//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.8
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from JassParser.g4 by ANTLR 4.8

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

using System;
using System.IO;
using System.Text;
using System.Diagnostics;
using System.Collections.Generic;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.8")]
[System.CLSCompliant(false)]
public partial class JassParser : Parser {
	protected static DFA[] decisionToDFA;
	protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
	public const int
		K_CODE=1, K_HANDLE=2, K_INTEGER=3, K_REAL=4, K_BOOLEAN=5, K_STRING=6, 
		K_TRUE=7, K_FALSE=8, K_NULL=9, K_NOT=10, K_AND=11, K_OR=12, K_FUNCTION=13, 
		K_RETURN=14, K_RETURNS=15, K_EXITWHEN=16, K_LOOP=17, K_ENDLOOP=18, K_ELSEIF=19, 
		K_ELSE=20, K_CALL=21, K_IF=22, K_THEN=23, K_ENDIF=24, K_DEBUG=25, K_SET=26, 
		K_TYPE=27, K_EXTENDS=28, K_GLOBALS=29, K_ENDGLOBALS=30, K_CONSTANT=31, 
		K_NATIVE=32, K_TAKES=33, K_NOTHING=34, K_ENDFUNCTION=35, K_LOCAL=36, K_ARRAY=37, 
		ADD=38, SUB=39, MULT=40, DIV=41, GT=42, LT=43, EQ=44, NEQ=45, GTEQ=46, 
		LTEQ=47, O_BRACK=48, C_BRACK=49, O_PAR=50, C_PAR=51, COMMA=52, ASSIGN=53, 
		DECIMAL=54, OCTAL=55, HEX=56, FOURCC=57, REAL_CONST=58, STRING_CONST=59, 
		ID=60, WS=61, COMMENT=62;
	public const int
		RULE_file = 0, RULE_declr = 1, RULE_typedef = 2, RULE_globals = 3, RULE_globalVarList = 4, 
		RULE_constDeclr = 5, RULE_nativeFunc = 6, RULE_funcDeclr = 7, RULE_paramList = 8, 
		RULE_paramDeclr = 9, RULE_func = 10, RULE_localVarList = 11, RULE_varDeclr = 12, 
		RULE_statementList = 13, RULE_statement = 14, RULE_set = 15, RULE_call = 16, 
		RULE_args = 17, RULE_ifthenelse = 18, RULE_elseClause = 19, RULE_loop = 20, 
		RULE_exitwhen = 21, RULE_returnStat = 22, RULE_debug = 23, RULE_expr = 24, 
		RULE_funcCall = 25, RULE_arrayRef = 26, RULE_funcRef = 27, RULE_constant = 28, 
		RULE_intConst = 29, RULE_decimal = 30, RULE_hex = 31, RULE_parens = 32, 
		RULE_boolConst = 33, RULE_stringConst = 34, RULE_type = 35, RULE_id = 36;
	public static readonly string[] ruleNames = {
		"file", "declr", "typedef", "globals", "globalVarList", "constDeclr", 
		"nativeFunc", "funcDeclr", "paramList", "paramDeclr", "func", "localVarList", 
		"varDeclr", "statementList", "statement", "set", "call", "args", "ifthenelse", 
		"elseClause", "loop", "exitwhen", "returnStat", "debug", "expr", "funcCall", 
		"arrayRef", "funcRef", "constant", "intConst", "decimal", "hex", "parens", 
		"boolConst", "stringConst", "type", "id"
	};

	private static readonly string[] _LiteralNames = {
		null, "'code'", "'handle'", "'integer'", "'real'", "'boolean'", "'string'", 
		"'true'", "'false'", "'null'", "'not'", "'and'", "'or'", "'function'", 
		"'return'", "'returns'", "'exitwhen'", "'loop'", "'endloop'", "'elseif'", 
		"'else'", "'call'", "'if'", "'then'", "'endif'", "'debug'", "'set'", "'type'", 
		"'extends'", "'globals'", "'endglobals'", "'constant'", "'native'", "'takes'", 
		"'nothing'", "'endfunction'", "'local'", "'array'", "'+'", "'-'", "'*'", 
		"'/'", "'>'", "'<'", "'=='", "'!='", "'>='", "'<='", "'['", "']'", "'('", 
		"')'", "','", "'='"
	};
	private static readonly string[] _SymbolicNames = {
		null, "K_CODE", "K_HANDLE", "K_INTEGER", "K_REAL", "K_BOOLEAN", "K_STRING", 
		"K_TRUE", "K_FALSE", "K_NULL", "K_NOT", "K_AND", "K_OR", "K_FUNCTION", 
		"K_RETURN", "K_RETURNS", "K_EXITWHEN", "K_LOOP", "K_ENDLOOP", "K_ELSEIF", 
		"K_ELSE", "K_CALL", "K_IF", "K_THEN", "K_ENDIF", "K_DEBUG", "K_SET", "K_TYPE", 
		"K_EXTENDS", "K_GLOBALS", "K_ENDGLOBALS", "K_CONSTANT", "K_NATIVE", "K_TAKES", 
		"K_NOTHING", "K_ENDFUNCTION", "K_LOCAL", "K_ARRAY", "ADD", "SUB", "MULT", 
		"DIV", "GT", "LT", "EQ", "NEQ", "GTEQ", "LTEQ", "O_BRACK", "C_BRACK", 
		"O_PAR", "C_PAR", "COMMA", "ASSIGN", "DECIMAL", "OCTAL", "HEX", "FOURCC", 
		"REAL_CONST", "STRING_CONST", "ID", "WS", "COMMENT"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "JassParser.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override string SerializedAtn { get { return new string(_serializedATN); } }

	static JassParser() {
		decisionToDFA = new DFA[_ATN.NumberOfDecisions];
		for (int i = 0; i < _ATN.NumberOfDecisions; i++) {
			decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
		}
	}

		public JassParser(ITokenStream input) : this(input, Console.Out, Console.Error) { }

		public JassParser(ITokenStream input, TextWriter output, TextWriter errorOutput)
		: base(input, output, errorOutput)
	{
		Interpreter = new ParserATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
	}

	public partial class FileContext : ParserRuleContext {
		public DeclrContext[] declr() {
			return GetRuleContexts<DeclrContext>();
		}
		public DeclrContext declr(int i) {
			return GetRuleContext<DeclrContext>(i);
		}
		public FuncContext[] func() {
			return GetRuleContexts<FuncContext>();
		}
		public FuncContext func(int i) {
			return GetRuleContext<FuncContext>(i);
		}
		public FileContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_file; } }
		public override void EnterRule(IParseTreeListener listener) {
			IJassParserListener typedListener = listener as IJassParserListener;
			if (typedListener != null) typedListener.EnterFile(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IJassParserListener typedListener = listener as IJassParserListener;
			if (typedListener != null) typedListener.ExitFile(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJassParserVisitor<TResult> typedVisitor = visitor as IJassParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFile(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FileContext file() {
		FileContext _localctx = new FileContext(Context, State);
		EnterRule(_localctx, 0, RULE_file);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 77;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,0,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 74; declr();
					}
					} 
				}
				State = 79;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,0,Context);
			}
			State = 83;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==K_FUNCTION || _la==K_CONSTANT) {
				{
				{
				State = 80; func();
				}
				}
				State = 85;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DeclrContext : ParserRuleContext {
		public TypedefContext typedef() {
			return GetRuleContext<TypedefContext>(0);
		}
		public GlobalsContext globals() {
			return GetRuleContext<GlobalsContext>(0);
		}
		public NativeFuncContext nativeFunc() {
			return GetRuleContext<NativeFuncContext>(0);
		}
		public DeclrContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_declr; } }
		public override void EnterRule(IParseTreeListener listener) {
			IJassParserListener typedListener = listener as IJassParserListener;
			if (typedListener != null) typedListener.EnterDeclr(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IJassParserListener typedListener = listener as IJassParserListener;
			if (typedListener != null) typedListener.ExitDeclr(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJassParserVisitor<TResult> typedVisitor = visitor as IJassParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDeclr(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DeclrContext declr() {
		DeclrContext _localctx = new DeclrContext(Context, State);
		EnterRule(_localctx, 2, RULE_declr);
		try {
			State = 89;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case K_TYPE:
				EnterOuterAlt(_localctx, 1);
				{
				State = 86; typedef();
				}
				break;
			case K_GLOBALS:
				EnterOuterAlt(_localctx, 2);
				{
				State = 87; globals();
				}
				break;
			case K_CONSTANT:
			case K_NATIVE:
				EnterOuterAlt(_localctx, 3);
				{
				State = 88; nativeFunc();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TypedefContext : ParserRuleContext {
		public ITerminalNode K_TYPE() { return GetToken(JassParser.K_TYPE, 0); }
		public IdContext[] id() {
			return GetRuleContexts<IdContext>();
		}
		public IdContext id(int i) {
			return GetRuleContext<IdContext>(i);
		}
		public ITerminalNode K_EXTENDS() { return GetToken(JassParser.K_EXTENDS, 0); }
		public ITerminalNode K_HANDLE() { return GetToken(JassParser.K_HANDLE, 0); }
		public TypedefContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_typedef; } }
		public override void EnterRule(IParseTreeListener listener) {
			IJassParserListener typedListener = listener as IJassParserListener;
			if (typedListener != null) typedListener.EnterTypedef(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IJassParserListener typedListener = listener as IJassParserListener;
			if (typedListener != null) typedListener.ExitTypedef(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJassParserVisitor<TResult> typedVisitor = visitor as IJassParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTypedef(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TypedefContext typedef() {
		TypedefContext _localctx = new TypedefContext(Context, State);
		EnterRule(_localctx, 4, RULE_typedef);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 91; Match(K_TYPE);
			State = 92; id();
			State = 93; Match(K_EXTENDS);
			State = 96;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case K_HANDLE:
				{
				State = 94; Match(K_HANDLE);
				}
				break;
			case ID:
				{
				State = 95; id();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class GlobalsContext : ParserRuleContext {
		public ITerminalNode K_GLOBALS() { return GetToken(JassParser.K_GLOBALS, 0); }
		public GlobalVarListContext globalVarList() {
			return GetRuleContext<GlobalVarListContext>(0);
		}
		public ITerminalNode K_ENDGLOBALS() { return GetToken(JassParser.K_ENDGLOBALS, 0); }
		public GlobalsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_globals; } }
		public override void EnterRule(IParseTreeListener listener) {
			IJassParserListener typedListener = listener as IJassParserListener;
			if (typedListener != null) typedListener.EnterGlobals(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IJassParserListener typedListener = listener as IJassParserListener;
			if (typedListener != null) typedListener.ExitGlobals(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJassParserVisitor<TResult> typedVisitor = visitor as IJassParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitGlobals(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public GlobalsContext globals() {
		GlobalsContext _localctx = new GlobalsContext(Context, State);
		EnterRule(_localctx, 6, RULE_globals);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 98; Match(K_GLOBALS);
			State = 99; globalVarList();
			State = 100; Match(K_ENDGLOBALS);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class GlobalVarListContext : ParserRuleContext {
		public ConstDeclrContext[] constDeclr() {
			return GetRuleContexts<ConstDeclrContext>();
		}
		public ConstDeclrContext constDeclr(int i) {
			return GetRuleContext<ConstDeclrContext>(i);
		}
		public VarDeclrContext[] varDeclr() {
			return GetRuleContexts<VarDeclrContext>();
		}
		public VarDeclrContext varDeclr(int i) {
			return GetRuleContext<VarDeclrContext>(i);
		}
		public GlobalVarListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_globalVarList; } }
		public override void EnterRule(IParseTreeListener listener) {
			IJassParserListener typedListener = listener as IJassParserListener;
			if (typedListener != null) typedListener.EnterGlobalVarList(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IJassParserListener typedListener = listener as IJassParserListener;
			if (typedListener != null) typedListener.ExitGlobalVarList(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJassParserVisitor<TResult> typedVisitor = visitor as IJassParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitGlobalVarList(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public GlobalVarListContext globalVarList() {
		GlobalVarListContext _localctx = new GlobalVarListContext(Context, State);
		EnterRule(_localctx, 8, RULE_globalVarList);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 106;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << K_CODE) | (1L << K_HANDLE) | (1L << K_INTEGER) | (1L << K_REAL) | (1L << K_BOOLEAN) | (1L << K_STRING) | (1L << K_CONSTANT) | (1L << ID))) != 0)) {
				{
				State = 104;
				ErrorHandler.Sync(this);
				switch (TokenStream.LA(1)) {
				case K_CONSTANT:
					{
					State = 102; constDeclr();
					}
					break;
				case K_CODE:
				case K_HANDLE:
				case K_INTEGER:
				case K_REAL:
				case K_BOOLEAN:
				case K_STRING:
				case ID:
					{
					State = 103; varDeclr();
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				State = 108;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ConstDeclrContext : ParserRuleContext {
		public ITerminalNode K_CONSTANT() { return GetToken(JassParser.K_CONSTANT, 0); }
		public TypeContext type() {
			return GetRuleContext<TypeContext>(0);
		}
		public IdContext id() {
			return GetRuleContext<IdContext>(0);
		}
		public ITerminalNode ASSIGN() { return GetToken(JassParser.ASSIGN, 0); }
		public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		public ConstDeclrContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_constDeclr; } }
		public override void EnterRule(IParseTreeListener listener) {
			IJassParserListener typedListener = listener as IJassParserListener;
			if (typedListener != null) typedListener.EnterConstDeclr(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IJassParserListener typedListener = listener as IJassParserListener;
			if (typedListener != null) typedListener.ExitConstDeclr(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJassParserVisitor<TResult> typedVisitor = visitor as IJassParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitConstDeclr(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ConstDeclrContext constDeclr() {
		ConstDeclrContext _localctx = new ConstDeclrContext(Context, State);
		EnterRule(_localctx, 10, RULE_constDeclr);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 109; Match(K_CONSTANT);
			State = 110; type();
			State = 111; id();
			State = 112; Match(ASSIGN);
			State = 113; expr(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class NativeFuncContext : ParserRuleContext {
		public ITerminalNode K_NATIVE() { return GetToken(JassParser.K_NATIVE, 0); }
		public FuncDeclrContext funcDeclr() {
			return GetRuleContext<FuncDeclrContext>(0);
		}
		public ITerminalNode K_CONSTANT() { return GetToken(JassParser.K_CONSTANT, 0); }
		public NativeFuncContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_nativeFunc; } }
		public override void EnterRule(IParseTreeListener listener) {
			IJassParserListener typedListener = listener as IJassParserListener;
			if (typedListener != null) typedListener.EnterNativeFunc(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IJassParserListener typedListener = listener as IJassParserListener;
			if (typedListener != null) typedListener.ExitNativeFunc(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJassParserVisitor<TResult> typedVisitor = visitor as IJassParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNativeFunc(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public NativeFuncContext nativeFunc() {
		NativeFuncContext _localctx = new NativeFuncContext(Context, State);
		EnterRule(_localctx, 12, RULE_nativeFunc);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 116;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==K_CONSTANT) {
				{
				State = 115; Match(K_CONSTANT);
				}
			}

			State = 118; Match(K_NATIVE);
			State = 119; funcDeclr();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FuncDeclrContext : ParserRuleContext {
		public IdContext id() {
			return GetRuleContext<IdContext>(0);
		}
		public ITerminalNode K_TAKES() { return GetToken(JassParser.K_TAKES, 0); }
		public ITerminalNode K_RETURNS() { return GetToken(JassParser.K_RETURNS, 0); }
		public ITerminalNode[] K_NOTHING() { return GetTokens(JassParser.K_NOTHING); }
		public ITerminalNode K_NOTHING(int i) {
			return GetToken(JassParser.K_NOTHING, i);
		}
		public ParamListContext paramList() {
			return GetRuleContext<ParamListContext>(0);
		}
		public TypeContext type() {
			return GetRuleContext<TypeContext>(0);
		}
		public FuncDeclrContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_funcDeclr; } }
		public override void EnterRule(IParseTreeListener listener) {
			IJassParserListener typedListener = listener as IJassParserListener;
			if (typedListener != null) typedListener.EnterFuncDeclr(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IJassParserListener typedListener = listener as IJassParserListener;
			if (typedListener != null) typedListener.ExitFuncDeclr(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJassParserVisitor<TResult> typedVisitor = visitor as IJassParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFuncDeclr(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FuncDeclrContext funcDeclr() {
		FuncDeclrContext _localctx = new FuncDeclrContext(Context, State);
		EnterRule(_localctx, 14, RULE_funcDeclr);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 121; id();
			State = 122; Match(K_TAKES);
			State = 125;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case K_NOTHING:
				{
				State = 123; Match(K_NOTHING);
				}
				break;
			case K_CODE:
			case K_HANDLE:
			case K_INTEGER:
			case K_REAL:
			case K_BOOLEAN:
			case K_STRING:
			case ID:
				{
				State = 124; paramList();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			State = 127; Match(K_RETURNS);
			State = 130;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case K_CODE:
			case K_HANDLE:
			case K_INTEGER:
			case K_REAL:
			case K_BOOLEAN:
			case K_STRING:
			case ID:
				{
				State = 128; type();
				}
				break;
			case K_NOTHING:
				{
				State = 129; Match(K_NOTHING);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ParamListContext : ParserRuleContext {
		public ParamDeclrContext[] paramDeclr() {
			return GetRuleContexts<ParamDeclrContext>();
		}
		public ParamDeclrContext paramDeclr(int i) {
			return GetRuleContext<ParamDeclrContext>(i);
		}
		public ITerminalNode[] COMMA() { return GetTokens(JassParser.COMMA); }
		public ITerminalNode COMMA(int i) {
			return GetToken(JassParser.COMMA, i);
		}
		public ParamListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_paramList; } }
		public override void EnterRule(IParseTreeListener listener) {
			IJassParserListener typedListener = listener as IJassParserListener;
			if (typedListener != null) typedListener.EnterParamList(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IJassParserListener typedListener = listener as IJassParserListener;
			if (typedListener != null) typedListener.ExitParamList(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJassParserVisitor<TResult> typedVisitor = visitor as IJassParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitParamList(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ParamListContext paramList() {
		ParamListContext _localctx = new ParamListContext(Context, State);
		EnterRule(_localctx, 16, RULE_paramList);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 132; paramDeclr();
			State = 137;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA) {
				{
				{
				State = 133; Match(COMMA);
				State = 134; paramDeclr();
				}
				}
				State = 139;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ParamDeclrContext : ParserRuleContext {
		public TypeContext type() {
			return GetRuleContext<TypeContext>(0);
		}
		public IdContext id() {
			return GetRuleContext<IdContext>(0);
		}
		public ParamDeclrContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_paramDeclr; } }
		public override void EnterRule(IParseTreeListener listener) {
			IJassParserListener typedListener = listener as IJassParserListener;
			if (typedListener != null) typedListener.EnterParamDeclr(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IJassParserListener typedListener = listener as IJassParserListener;
			if (typedListener != null) typedListener.ExitParamDeclr(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJassParserVisitor<TResult> typedVisitor = visitor as IJassParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitParamDeclr(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ParamDeclrContext paramDeclr() {
		ParamDeclrContext _localctx = new ParamDeclrContext(Context, State);
		EnterRule(_localctx, 18, RULE_paramDeclr);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 140; type();
			State = 141; id();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FuncContext : ParserRuleContext {
		public ITerminalNode K_FUNCTION() { return GetToken(JassParser.K_FUNCTION, 0); }
		public FuncDeclrContext funcDeclr() {
			return GetRuleContext<FuncDeclrContext>(0);
		}
		public LocalVarListContext localVarList() {
			return GetRuleContext<LocalVarListContext>(0);
		}
		public StatementListContext statementList() {
			return GetRuleContext<StatementListContext>(0);
		}
		public ITerminalNode K_ENDFUNCTION() { return GetToken(JassParser.K_ENDFUNCTION, 0); }
		public ITerminalNode K_CONSTANT() { return GetToken(JassParser.K_CONSTANT, 0); }
		public FuncContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_func; } }
		public override void EnterRule(IParseTreeListener listener) {
			IJassParserListener typedListener = listener as IJassParserListener;
			if (typedListener != null) typedListener.EnterFunc(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IJassParserListener typedListener = listener as IJassParserListener;
			if (typedListener != null) typedListener.ExitFunc(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJassParserVisitor<TResult> typedVisitor = visitor as IJassParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFunc(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FuncContext func() {
		FuncContext _localctx = new FuncContext(Context, State);
		EnterRule(_localctx, 20, RULE_func);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 144;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==K_CONSTANT) {
				{
				State = 143; Match(K_CONSTANT);
				}
			}

			State = 146; Match(K_FUNCTION);
			State = 147; funcDeclr();
			State = 148; localVarList();
			State = 149; statementList();
			State = 150; Match(K_ENDFUNCTION);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LocalVarListContext : ParserRuleContext {
		public ITerminalNode[] K_LOCAL() { return GetTokens(JassParser.K_LOCAL); }
		public ITerminalNode K_LOCAL(int i) {
			return GetToken(JassParser.K_LOCAL, i);
		}
		public VarDeclrContext[] varDeclr() {
			return GetRuleContexts<VarDeclrContext>();
		}
		public VarDeclrContext varDeclr(int i) {
			return GetRuleContext<VarDeclrContext>(i);
		}
		public LocalVarListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_localVarList; } }
		public override void EnterRule(IParseTreeListener listener) {
			IJassParserListener typedListener = listener as IJassParserListener;
			if (typedListener != null) typedListener.EnterLocalVarList(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IJassParserListener typedListener = listener as IJassParserListener;
			if (typedListener != null) typedListener.ExitLocalVarList(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJassParserVisitor<TResult> typedVisitor = visitor as IJassParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLocalVarList(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public LocalVarListContext localVarList() {
		LocalVarListContext _localctx = new LocalVarListContext(Context, State);
		EnterRule(_localctx, 22, RULE_localVarList);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 156;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==K_LOCAL) {
				{
				{
				State = 152; Match(K_LOCAL);
				State = 153; varDeclr();
				}
				}
				State = 158;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class VarDeclrContext : ParserRuleContext {
		public TypeContext type() {
			return GetRuleContext<TypeContext>(0);
		}
		public IdContext id() {
			return GetRuleContext<IdContext>(0);
		}
		public ITerminalNode ASSIGN() { return GetToken(JassParser.ASSIGN, 0); }
		public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		public ITerminalNode K_ARRAY() { return GetToken(JassParser.K_ARRAY, 0); }
		public VarDeclrContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_varDeclr; } }
		public override void EnterRule(IParseTreeListener listener) {
			IJassParserListener typedListener = listener as IJassParserListener;
			if (typedListener != null) typedListener.EnterVarDeclr(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IJassParserListener typedListener = listener as IJassParserListener;
			if (typedListener != null) typedListener.ExitVarDeclr(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJassParserVisitor<TResult> typedVisitor = visitor as IJassParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitVarDeclr(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public VarDeclrContext varDeclr() {
		VarDeclrContext _localctx = new VarDeclrContext(Context, State);
		EnterRule(_localctx, 24, RULE_varDeclr);
		int _la;
		try {
			State = 169;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,13,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 159; type();
				State = 160; id();
				State = 163;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==ASSIGN) {
					{
					State = 161; Match(ASSIGN);
					State = 162; expr(0);
					}
				}

				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 165; type();
				State = 166; Match(K_ARRAY);
				State = 167; id();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StatementListContext : ParserRuleContext {
		public StatementContext[] statement() {
			return GetRuleContexts<StatementContext>();
		}
		public StatementContext statement(int i) {
			return GetRuleContext<StatementContext>(i);
		}
		public StatementListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_statementList; } }
		public override void EnterRule(IParseTreeListener listener) {
			IJassParserListener typedListener = listener as IJassParserListener;
			if (typedListener != null) typedListener.EnterStatementList(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IJassParserListener typedListener = listener as IJassParserListener;
			if (typedListener != null) typedListener.ExitStatementList(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJassParserVisitor<TResult> typedVisitor = visitor as IJassParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStatementList(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public StatementListContext statementList() {
		StatementListContext _localctx = new StatementListContext(Context, State);
		EnterRule(_localctx, 26, RULE_statementList);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 174;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << K_RETURN) | (1L << K_EXITWHEN) | (1L << K_LOOP) | (1L << K_CALL) | (1L << K_IF) | (1L << K_DEBUG) | (1L << K_SET))) != 0)) {
				{
				{
				State = 171; statement();
				}
				}
				State = 176;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StatementContext : ParserRuleContext {
		public SetContext set() {
			return GetRuleContext<SetContext>(0);
		}
		public CallContext call() {
			return GetRuleContext<CallContext>(0);
		}
		public IfthenelseContext ifthenelse() {
			return GetRuleContext<IfthenelseContext>(0);
		}
		public LoopContext loop() {
			return GetRuleContext<LoopContext>(0);
		}
		public ExitwhenContext exitwhen() {
			return GetRuleContext<ExitwhenContext>(0);
		}
		public ReturnStatContext returnStat() {
			return GetRuleContext<ReturnStatContext>(0);
		}
		public DebugContext debug() {
			return GetRuleContext<DebugContext>(0);
		}
		public StatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_statement; } }
		public override void EnterRule(IParseTreeListener listener) {
			IJassParserListener typedListener = listener as IJassParserListener;
			if (typedListener != null) typedListener.EnterStatement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IJassParserListener typedListener = listener as IJassParserListener;
			if (typedListener != null) typedListener.ExitStatement(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJassParserVisitor<TResult> typedVisitor = visitor as IJassParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public StatementContext statement() {
		StatementContext _localctx = new StatementContext(Context, State);
		EnterRule(_localctx, 28, RULE_statement);
		try {
			State = 184;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case K_SET:
				EnterOuterAlt(_localctx, 1);
				{
				State = 177; set();
				}
				break;
			case K_CALL:
				EnterOuterAlt(_localctx, 2);
				{
				State = 178; call();
				}
				break;
			case K_IF:
				EnterOuterAlt(_localctx, 3);
				{
				State = 179; ifthenelse();
				}
				break;
			case K_LOOP:
				EnterOuterAlt(_localctx, 4);
				{
				State = 180; loop();
				}
				break;
			case K_EXITWHEN:
				EnterOuterAlt(_localctx, 5);
				{
				State = 181; exitwhen();
				}
				break;
			case K_RETURN:
				EnterOuterAlt(_localctx, 6);
				{
				State = 182; returnStat();
				}
				break;
			case K_DEBUG:
				EnterOuterAlt(_localctx, 7);
				{
				State = 183; debug();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SetContext : ParserRuleContext {
		public ITerminalNode K_SET() { return GetToken(JassParser.K_SET, 0); }
		public IdContext id() {
			return GetRuleContext<IdContext>(0);
		}
		public ITerminalNode ASSIGN() { return GetToken(JassParser.ASSIGN, 0); }
		public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		public ArrayRefContext arrayRef() {
			return GetRuleContext<ArrayRefContext>(0);
		}
		public SetContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_set; } }
		public override void EnterRule(IParseTreeListener listener) {
			IJassParserListener typedListener = listener as IJassParserListener;
			if (typedListener != null) typedListener.EnterSet(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IJassParserListener typedListener = listener as IJassParserListener;
			if (typedListener != null) typedListener.ExitSet(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJassParserVisitor<TResult> typedVisitor = visitor as IJassParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSet(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SetContext set() {
		SetContext _localctx = new SetContext(Context, State);
		EnterRule(_localctx, 30, RULE_set);
		try {
			State = 196;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,16,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 186; Match(K_SET);
				State = 187; id();
				State = 188; Match(ASSIGN);
				State = 189; expr(0);
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 191; Match(K_SET);
				State = 192; arrayRef();
				State = 193; Match(ASSIGN);
				State = 194; expr(0);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CallContext : ParserRuleContext {
		public ITerminalNode K_CALL() { return GetToken(JassParser.K_CALL, 0); }
		public IdContext id() {
			return GetRuleContext<IdContext>(0);
		}
		public ITerminalNode O_PAR() { return GetToken(JassParser.O_PAR, 0); }
		public ITerminalNode C_PAR() { return GetToken(JassParser.C_PAR, 0); }
		public ArgsContext args() {
			return GetRuleContext<ArgsContext>(0);
		}
		public CallContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_call; } }
		public override void EnterRule(IParseTreeListener listener) {
			IJassParserListener typedListener = listener as IJassParserListener;
			if (typedListener != null) typedListener.EnterCall(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IJassParserListener typedListener = listener as IJassParserListener;
			if (typedListener != null) typedListener.ExitCall(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJassParserVisitor<TResult> typedVisitor = visitor as IJassParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCall(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public CallContext call() {
		CallContext _localctx = new CallContext(Context, State);
		EnterRule(_localctx, 32, RULE_call);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 198; Match(K_CALL);
			State = 199; id();
			State = 200; Match(O_PAR);
			State = 202;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << K_TRUE) | (1L << K_FALSE) | (1L << K_NULL) | (1L << K_NOT) | (1L << K_FUNCTION) | (1L << ADD) | (1L << SUB) | (1L << O_PAR) | (1L << DECIMAL) | (1L << OCTAL) | (1L << HEX) | (1L << FOURCC) | (1L << REAL_CONST) | (1L << STRING_CONST) | (1L << ID))) != 0)) {
				{
				State = 201; args();
				}
			}

			State = 204; Match(C_PAR);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ArgsContext : ParserRuleContext {
		public ExprContext[] expr() {
			return GetRuleContexts<ExprContext>();
		}
		public ExprContext expr(int i) {
			return GetRuleContext<ExprContext>(i);
		}
		public ITerminalNode[] COMMA() { return GetTokens(JassParser.COMMA); }
		public ITerminalNode COMMA(int i) {
			return GetToken(JassParser.COMMA, i);
		}
		public ArgsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_args; } }
		public override void EnterRule(IParseTreeListener listener) {
			IJassParserListener typedListener = listener as IJassParserListener;
			if (typedListener != null) typedListener.EnterArgs(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IJassParserListener typedListener = listener as IJassParserListener;
			if (typedListener != null) typedListener.ExitArgs(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJassParserVisitor<TResult> typedVisitor = visitor as IJassParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitArgs(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ArgsContext args() {
		ArgsContext _localctx = new ArgsContext(Context, State);
		EnterRule(_localctx, 34, RULE_args);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 206; expr(0);
			State = 211;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA) {
				{
				{
				State = 207; Match(COMMA);
				State = 208; expr(0);
				}
				}
				State = 213;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IfthenelseContext : ParserRuleContext {
		public ITerminalNode K_IF() { return GetToken(JassParser.K_IF, 0); }
		public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		public ITerminalNode K_THEN() { return GetToken(JassParser.K_THEN, 0); }
		public StatementListContext statementList() {
			return GetRuleContext<StatementListContext>(0);
		}
		public ITerminalNode K_ENDIF() { return GetToken(JassParser.K_ENDIF, 0); }
		public ElseClauseContext elseClause() {
			return GetRuleContext<ElseClauseContext>(0);
		}
		public IfthenelseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_ifthenelse; } }
		public override void EnterRule(IParseTreeListener listener) {
			IJassParserListener typedListener = listener as IJassParserListener;
			if (typedListener != null) typedListener.EnterIfthenelse(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IJassParserListener typedListener = listener as IJassParserListener;
			if (typedListener != null) typedListener.ExitIfthenelse(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJassParserVisitor<TResult> typedVisitor = visitor as IJassParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIfthenelse(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public IfthenelseContext ifthenelse() {
		IfthenelseContext _localctx = new IfthenelseContext(Context, State);
		EnterRule(_localctx, 36, RULE_ifthenelse);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 214; Match(K_IF);
			State = 215; expr(0);
			State = 216; Match(K_THEN);
			State = 217; statementList();
			State = 219;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==K_ELSEIF || _la==K_ELSE) {
				{
				State = 218; elseClause();
				}
			}

			State = 221; Match(K_ENDIF);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ElseClauseContext : ParserRuleContext {
		public ITerminalNode K_ELSE() { return GetToken(JassParser.K_ELSE, 0); }
		public StatementListContext statementList() {
			return GetRuleContext<StatementListContext>(0);
		}
		public ITerminalNode K_ELSEIF() { return GetToken(JassParser.K_ELSEIF, 0); }
		public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		public ITerminalNode K_THEN() { return GetToken(JassParser.K_THEN, 0); }
		public ElseClauseContext elseClause() {
			return GetRuleContext<ElseClauseContext>(0);
		}
		public ElseClauseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_elseClause; } }
		public override void EnterRule(IParseTreeListener listener) {
			IJassParserListener typedListener = listener as IJassParserListener;
			if (typedListener != null) typedListener.EnterElseClause(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IJassParserListener typedListener = listener as IJassParserListener;
			if (typedListener != null) typedListener.ExitElseClause(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJassParserVisitor<TResult> typedVisitor = visitor as IJassParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitElseClause(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ElseClauseContext elseClause() {
		ElseClauseContext _localctx = new ElseClauseContext(Context, State);
		EnterRule(_localctx, 38, RULE_elseClause);
		int _la;
		try {
			State = 232;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case K_ELSE:
				EnterOuterAlt(_localctx, 1);
				{
				State = 223; Match(K_ELSE);
				State = 224; statementList();
				}
				break;
			case K_ELSEIF:
				EnterOuterAlt(_localctx, 2);
				{
				State = 225; Match(K_ELSEIF);
				State = 226; expr(0);
				State = 227; Match(K_THEN);
				State = 228; statementList();
				State = 230;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==K_ELSEIF || _la==K_ELSE) {
					{
					State = 229; elseClause();
					}
				}

				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LoopContext : ParserRuleContext {
		public ITerminalNode K_LOOP() { return GetToken(JassParser.K_LOOP, 0); }
		public StatementListContext statementList() {
			return GetRuleContext<StatementListContext>(0);
		}
		public ITerminalNode K_ENDLOOP() { return GetToken(JassParser.K_ENDLOOP, 0); }
		public LoopContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_loop; } }
		public override void EnterRule(IParseTreeListener listener) {
			IJassParserListener typedListener = listener as IJassParserListener;
			if (typedListener != null) typedListener.EnterLoop(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IJassParserListener typedListener = listener as IJassParserListener;
			if (typedListener != null) typedListener.ExitLoop(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJassParserVisitor<TResult> typedVisitor = visitor as IJassParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLoop(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public LoopContext loop() {
		LoopContext _localctx = new LoopContext(Context, State);
		EnterRule(_localctx, 40, RULE_loop);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 234; Match(K_LOOP);
			State = 235; statementList();
			State = 236; Match(K_ENDLOOP);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExitwhenContext : ParserRuleContext {
		public ITerminalNode K_EXITWHEN() { return GetToken(JassParser.K_EXITWHEN, 0); }
		public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		public ExitwhenContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_exitwhen; } }
		public override void EnterRule(IParseTreeListener listener) {
			IJassParserListener typedListener = listener as IJassParserListener;
			if (typedListener != null) typedListener.EnterExitwhen(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IJassParserListener typedListener = listener as IJassParserListener;
			if (typedListener != null) typedListener.ExitExitwhen(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJassParserVisitor<TResult> typedVisitor = visitor as IJassParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExitwhen(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ExitwhenContext exitwhen() {
		ExitwhenContext _localctx = new ExitwhenContext(Context, State);
		EnterRule(_localctx, 42, RULE_exitwhen);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 238; Match(K_EXITWHEN);
			State = 239; expr(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ReturnStatContext : ParserRuleContext {
		public ITerminalNode K_RETURN() { return GetToken(JassParser.K_RETURN, 0); }
		public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		public ReturnStatContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_returnStat; } }
		public override void EnterRule(IParseTreeListener listener) {
			IJassParserListener typedListener = listener as IJassParserListener;
			if (typedListener != null) typedListener.EnterReturnStat(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IJassParserListener typedListener = listener as IJassParserListener;
			if (typedListener != null) typedListener.ExitReturnStat(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJassParserVisitor<TResult> typedVisitor = visitor as IJassParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitReturnStat(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ReturnStatContext returnStat() {
		ReturnStatContext _localctx = new ReturnStatContext(Context, State);
		EnterRule(_localctx, 44, RULE_returnStat);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 241; Match(K_RETURN);
			State = 243;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << K_TRUE) | (1L << K_FALSE) | (1L << K_NULL) | (1L << K_NOT) | (1L << K_FUNCTION) | (1L << ADD) | (1L << SUB) | (1L << O_PAR) | (1L << DECIMAL) | (1L << OCTAL) | (1L << HEX) | (1L << FOURCC) | (1L << REAL_CONST) | (1L << STRING_CONST) | (1L << ID))) != 0)) {
				{
				State = 242; expr(0);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DebugContext : ParserRuleContext {
		public ITerminalNode K_DEBUG() { return GetToken(JassParser.K_DEBUG, 0); }
		public SetContext set() {
			return GetRuleContext<SetContext>(0);
		}
		public CallContext call() {
			return GetRuleContext<CallContext>(0);
		}
		public IfthenelseContext ifthenelse() {
			return GetRuleContext<IfthenelseContext>(0);
		}
		public LoopContext loop() {
			return GetRuleContext<LoopContext>(0);
		}
		public DebugContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_debug; } }
		public override void EnterRule(IParseTreeListener listener) {
			IJassParserListener typedListener = listener as IJassParserListener;
			if (typedListener != null) typedListener.EnterDebug(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IJassParserListener typedListener = listener as IJassParserListener;
			if (typedListener != null) typedListener.ExitDebug(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJassParserVisitor<TResult> typedVisitor = visitor as IJassParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDebug(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DebugContext debug() {
		DebugContext _localctx = new DebugContext(Context, State);
		EnterRule(_localctx, 46, RULE_debug);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 245; Match(K_DEBUG);
			State = 250;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case K_SET:
				{
				State = 246; set();
				}
				break;
			case K_CALL:
				{
				State = 247; call();
				}
				break;
			case K_IF:
				{
				State = 248; ifthenelse();
				}
				break;
			case K_LOOP:
				{
				State = 249; loop();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExprContext : ParserRuleContext {
		public ITerminalNode ADD() { return GetToken(JassParser.ADD, 0); }
		public ExprContext[] expr() {
			return GetRuleContexts<ExprContext>();
		}
		public ExprContext expr(int i) {
			return GetRuleContext<ExprContext>(i);
		}
		public ITerminalNode SUB() { return GetToken(JassParser.SUB, 0); }
		public ITerminalNode K_NOT() { return GetToken(JassParser.K_NOT, 0); }
		public FuncCallContext funcCall() {
			return GetRuleContext<FuncCallContext>(0);
		}
		public ArrayRefContext arrayRef() {
			return GetRuleContext<ArrayRefContext>(0);
		}
		public FuncRefContext funcRef() {
			return GetRuleContext<FuncRefContext>(0);
		}
		public IdContext id() {
			return GetRuleContext<IdContext>(0);
		}
		public ConstantContext constant() {
			return GetRuleContext<ConstantContext>(0);
		}
		public ParensContext parens() {
			return GetRuleContext<ParensContext>(0);
		}
		public ITerminalNode MULT() { return GetToken(JassParser.MULT, 0); }
		public ITerminalNode DIV() { return GetToken(JassParser.DIV, 0); }
		public ITerminalNode GT() { return GetToken(JassParser.GT, 0); }
		public ITerminalNode LT() { return GetToken(JassParser.LT, 0); }
		public ITerminalNode GTEQ() { return GetToken(JassParser.GTEQ, 0); }
		public ITerminalNode LTEQ() { return GetToken(JassParser.LTEQ, 0); }
		public ITerminalNode EQ() { return GetToken(JassParser.EQ, 0); }
		public ITerminalNode NEQ() { return GetToken(JassParser.NEQ, 0); }
		public ITerminalNode K_AND() { return GetToken(JassParser.K_AND, 0); }
		public ITerminalNode K_OR() { return GetToken(JassParser.K_OR, 0); }
		public ExprContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_expr; } }
		public override void EnterRule(IParseTreeListener listener) {
			IJassParserListener typedListener = listener as IJassParserListener;
			if (typedListener != null) typedListener.EnterExpr(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IJassParserListener typedListener = listener as IJassParserListener;
			if (typedListener != null) typedListener.ExitExpr(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJassParserVisitor<TResult> typedVisitor = visitor as IJassParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExpr(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ExprContext expr() {
		return expr(0);
	}

	private ExprContext expr(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		ExprContext _localctx = new ExprContext(Context, _parentState);
		ExprContext _prevctx = _localctx;
		int _startState = 48;
		EnterRecursionRule(_localctx, 48, RULE_expr, _p);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 265;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,24,Context) ) {
			case 1:
				{
				State = 253; Match(ADD);
				State = 254; expr(14);
				}
				break;
			case 2:
				{
				State = 255; Match(SUB);
				State = 256; expr(13);
				}
				break;
			case 3:
				{
				State = 257; Match(K_NOT);
				State = 258; expr(12);
				}
				break;
			case 4:
				{
				State = 259; funcCall();
				}
				break;
			case 5:
				{
				State = 260; arrayRef();
				}
				break;
			case 6:
				{
				State = 261; funcRef();
				}
				break;
			case 7:
				{
				State = 262; id();
				}
				break;
			case 8:
				{
				State = 263; constant();
				}
				break;
			case 9:
				{
				State = 264; parens();
				}
				break;
			}
			Context.Stop = TokenStream.LT(-1);
			State = 284;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,26,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					State = 282;
					ErrorHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(TokenStream,25,Context) ) {
					case 1:
						{
						_localctx = new ExprContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_expr);
						State = 267;
						if (!(Precpred(Context, 11))) throw new FailedPredicateException(this, "Precpred(Context, 11)");
						State = 268;
						_la = TokenStream.LA(1);
						if ( !(_la==MULT || _la==DIV) ) {
						ErrorHandler.RecoverInline(this);
						}
						else {
							ErrorHandler.ReportMatch(this);
						    Consume();
						}
						State = 269; expr(12);
						}
						break;
					case 2:
						{
						_localctx = new ExprContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_expr);
						State = 270;
						if (!(Precpred(Context, 10))) throw new FailedPredicateException(this, "Precpred(Context, 10)");
						State = 271;
						_la = TokenStream.LA(1);
						if ( !(_la==ADD || _la==SUB) ) {
						ErrorHandler.RecoverInline(this);
						}
						else {
							ErrorHandler.ReportMatch(this);
						    Consume();
						}
						State = 272; expr(11);
						}
						break;
					case 3:
						{
						_localctx = new ExprContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_expr);
						State = 273;
						if (!(Precpred(Context, 9))) throw new FailedPredicateException(this, "Precpred(Context, 9)");
						State = 274;
						_la = TokenStream.LA(1);
						if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << GT) | (1L << LT) | (1L << GTEQ) | (1L << LTEQ))) != 0)) ) {
						ErrorHandler.RecoverInline(this);
						}
						else {
							ErrorHandler.ReportMatch(this);
						    Consume();
						}
						State = 275; expr(10);
						}
						break;
					case 4:
						{
						_localctx = new ExprContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_expr);
						State = 276;
						if (!(Precpred(Context, 8))) throw new FailedPredicateException(this, "Precpred(Context, 8)");
						State = 277;
						_la = TokenStream.LA(1);
						if ( !(_la==EQ || _la==NEQ) ) {
						ErrorHandler.RecoverInline(this);
						}
						else {
							ErrorHandler.ReportMatch(this);
						    Consume();
						}
						State = 278; expr(9);
						}
						break;
					case 5:
						{
						_localctx = new ExprContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_expr);
						State = 279;
						if (!(Precpred(Context, 7))) throw new FailedPredicateException(this, "Precpred(Context, 7)");
						State = 280;
						_la = TokenStream.LA(1);
						if ( !(_la==K_AND || _la==K_OR) ) {
						ErrorHandler.RecoverInline(this);
						}
						else {
							ErrorHandler.ReportMatch(this);
						    Consume();
						}
						State = 281; expr(8);
						}
						break;
					}
					} 
				}
				State = 286;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,26,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class FuncCallContext : ParserRuleContext {
		public IdContext id() {
			return GetRuleContext<IdContext>(0);
		}
		public ITerminalNode O_PAR() { return GetToken(JassParser.O_PAR, 0); }
		public ITerminalNode C_PAR() { return GetToken(JassParser.C_PAR, 0); }
		public ArgsContext args() {
			return GetRuleContext<ArgsContext>(0);
		}
		public FuncCallContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_funcCall; } }
		public override void EnterRule(IParseTreeListener listener) {
			IJassParserListener typedListener = listener as IJassParserListener;
			if (typedListener != null) typedListener.EnterFuncCall(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IJassParserListener typedListener = listener as IJassParserListener;
			if (typedListener != null) typedListener.ExitFuncCall(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJassParserVisitor<TResult> typedVisitor = visitor as IJassParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFuncCall(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FuncCallContext funcCall() {
		FuncCallContext _localctx = new FuncCallContext(Context, State);
		EnterRule(_localctx, 50, RULE_funcCall);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 287; id();
			State = 288; Match(O_PAR);
			State = 290;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << K_TRUE) | (1L << K_FALSE) | (1L << K_NULL) | (1L << K_NOT) | (1L << K_FUNCTION) | (1L << ADD) | (1L << SUB) | (1L << O_PAR) | (1L << DECIMAL) | (1L << OCTAL) | (1L << HEX) | (1L << FOURCC) | (1L << REAL_CONST) | (1L << STRING_CONST) | (1L << ID))) != 0)) {
				{
				State = 289; args();
				}
			}

			State = 292; Match(C_PAR);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ArrayRefContext : ParserRuleContext {
		public IdContext id() {
			return GetRuleContext<IdContext>(0);
		}
		public ITerminalNode O_BRACK() { return GetToken(JassParser.O_BRACK, 0); }
		public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		public ITerminalNode C_BRACK() { return GetToken(JassParser.C_BRACK, 0); }
		public ArrayRefContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_arrayRef; } }
		public override void EnterRule(IParseTreeListener listener) {
			IJassParserListener typedListener = listener as IJassParserListener;
			if (typedListener != null) typedListener.EnterArrayRef(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IJassParserListener typedListener = listener as IJassParserListener;
			if (typedListener != null) typedListener.ExitArrayRef(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJassParserVisitor<TResult> typedVisitor = visitor as IJassParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitArrayRef(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ArrayRefContext arrayRef() {
		ArrayRefContext _localctx = new ArrayRefContext(Context, State);
		EnterRule(_localctx, 52, RULE_arrayRef);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 294; id();
			State = 295; Match(O_BRACK);
			State = 296; expr(0);
			State = 297; Match(C_BRACK);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FuncRefContext : ParserRuleContext {
		public ITerminalNode K_FUNCTION() { return GetToken(JassParser.K_FUNCTION, 0); }
		public IdContext id() {
			return GetRuleContext<IdContext>(0);
		}
		public FuncRefContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_funcRef; } }
		public override void EnterRule(IParseTreeListener listener) {
			IJassParserListener typedListener = listener as IJassParserListener;
			if (typedListener != null) typedListener.EnterFuncRef(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IJassParserListener typedListener = listener as IJassParserListener;
			if (typedListener != null) typedListener.ExitFuncRef(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJassParserVisitor<TResult> typedVisitor = visitor as IJassParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFuncRef(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FuncRefContext funcRef() {
		FuncRefContext _localctx = new FuncRefContext(Context, State);
		EnterRule(_localctx, 54, RULE_funcRef);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 299; Match(K_FUNCTION);
			State = 300; id();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ConstantContext : ParserRuleContext {
		public IntConstContext intConst() {
			return GetRuleContext<IntConstContext>(0);
		}
		public ITerminalNode REAL_CONST() { return GetToken(JassParser.REAL_CONST, 0); }
		public BoolConstContext boolConst() {
			return GetRuleContext<BoolConstContext>(0);
		}
		public StringConstContext stringConst() {
			return GetRuleContext<StringConstContext>(0);
		}
		public ITerminalNode K_NULL() { return GetToken(JassParser.K_NULL, 0); }
		public ConstantContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_constant; } }
		public override void EnterRule(IParseTreeListener listener) {
			IJassParserListener typedListener = listener as IJassParserListener;
			if (typedListener != null) typedListener.EnterConstant(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IJassParserListener typedListener = listener as IJassParserListener;
			if (typedListener != null) typedListener.ExitConstant(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJassParserVisitor<TResult> typedVisitor = visitor as IJassParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitConstant(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ConstantContext constant() {
		ConstantContext _localctx = new ConstantContext(Context, State);
		EnterRule(_localctx, 56, RULE_constant);
		try {
			State = 307;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case DECIMAL:
			case OCTAL:
			case HEX:
			case FOURCC:
				EnterOuterAlt(_localctx, 1);
				{
				State = 302; intConst();
				}
				break;
			case REAL_CONST:
				EnterOuterAlt(_localctx, 2);
				{
				State = 303; Match(REAL_CONST);
				}
				break;
			case K_TRUE:
			case K_FALSE:
				EnterOuterAlt(_localctx, 3);
				{
				State = 304; boolConst();
				}
				break;
			case STRING_CONST:
				EnterOuterAlt(_localctx, 4);
				{
				State = 305; stringConst();
				}
				break;
			case K_NULL:
				EnterOuterAlt(_localctx, 5);
				{
				State = 306; Match(K_NULL);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IntConstContext : ParserRuleContext {
		public DecimalContext @decimal() {
			return GetRuleContext<DecimalContext>(0);
		}
		public ITerminalNode OCTAL() { return GetToken(JassParser.OCTAL, 0); }
		public HexContext hex() {
			return GetRuleContext<HexContext>(0);
		}
		public ITerminalNode FOURCC() { return GetToken(JassParser.FOURCC, 0); }
		public IntConstContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_intConst; } }
		public override void EnterRule(IParseTreeListener listener) {
			IJassParserListener typedListener = listener as IJassParserListener;
			if (typedListener != null) typedListener.EnterIntConst(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IJassParserListener typedListener = listener as IJassParserListener;
			if (typedListener != null) typedListener.ExitIntConst(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJassParserVisitor<TResult> typedVisitor = visitor as IJassParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIntConst(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public IntConstContext intConst() {
		IntConstContext _localctx = new IntConstContext(Context, State);
		EnterRule(_localctx, 58, RULE_intConst);
		try {
			State = 313;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case DECIMAL:
				EnterOuterAlt(_localctx, 1);
				{
				State = 309; @decimal();
				}
				break;
			case OCTAL:
				EnterOuterAlt(_localctx, 2);
				{
				State = 310; Match(OCTAL);
				}
				break;
			case HEX:
				EnterOuterAlt(_localctx, 3);
				{
				State = 311; hex();
				}
				break;
			case FOURCC:
				EnterOuterAlt(_localctx, 4);
				{
				State = 312; Match(FOURCC);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DecimalContext : ParserRuleContext {
		public ITerminalNode DECIMAL() { return GetToken(JassParser.DECIMAL, 0); }
		public DecimalContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_decimal; } }
		public override void EnterRule(IParseTreeListener listener) {
			IJassParserListener typedListener = listener as IJassParserListener;
			if (typedListener != null) typedListener.EnterDecimal(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IJassParserListener typedListener = listener as IJassParserListener;
			if (typedListener != null) typedListener.ExitDecimal(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJassParserVisitor<TResult> typedVisitor = visitor as IJassParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDecimal(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DecimalContext @decimal() {
		DecimalContext _localctx = new DecimalContext(Context, State);
		EnterRule(_localctx, 60, RULE_decimal);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 315; Match(DECIMAL);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class HexContext : ParserRuleContext {
		public ITerminalNode HEX() { return GetToken(JassParser.HEX, 0); }
		public HexContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_hex; } }
		public override void EnterRule(IParseTreeListener listener) {
			IJassParserListener typedListener = listener as IJassParserListener;
			if (typedListener != null) typedListener.EnterHex(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IJassParserListener typedListener = listener as IJassParserListener;
			if (typedListener != null) typedListener.ExitHex(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJassParserVisitor<TResult> typedVisitor = visitor as IJassParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitHex(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public HexContext hex() {
		HexContext _localctx = new HexContext(Context, State);
		EnterRule(_localctx, 62, RULE_hex);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 317; Match(HEX);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ParensContext : ParserRuleContext {
		public ITerminalNode O_PAR() { return GetToken(JassParser.O_PAR, 0); }
		public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		public ITerminalNode C_PAR() { return GetToken(JassParser.C_PAR, 0); }
		public ParensContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_parens; } }
		public override void EnterRule(IParseTreeListener listener) {
			IJassParserListener typedListener = listener as IJassParserListener;
			if (typedListener != null) typedListener.EnterParens(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IJassParserListener typedListener = listener as IJassParserListener;
			if (typedListener != null) typedListener.ExitParens(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJassParserVisitor<TResult> typedVisitor = visitor as IJassParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitParens(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ParensContext parens() {
		ParensContext _localctx = new ParensContext(Context, State);
		EnterRule(_localctx, 64, RULE_parens);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 319; Match(O_PAR);
			State = 320; expr(0);
			State = 321; Match(C_PAR);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class BoolConstContext : ParserRuleContext {
		public ITerminalNode K_TRUE() { return GetToken(JassParser.K_TRUE, 0); }
		public ITerminalNode K_FALSE() { return GetToken(JassParser.K_FALSE, 0); }
		public BoolConstContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_boolConst; } }
		public override void EnterRule(IParseTreeListener listener) {
			IJassParserListener typedListener = listener as IJassParserListener;
			if (typedListener != null) typedListener.EnterBoolConst(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IJassParserListener typedListener = listener as IJassParserListener;
			if (typedListener != null) typedListener.ExitBoolConst(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJassParserVisitor<TResult> typedVisitor = visitor as IJassParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBoolConst(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public BoolConstContext boolConst() {
		BoolConstContext _localctx = new BoolConstContext(Context, State);
		EnterRule(_localctx, 66, RULE_boolConst);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 323;
			_la = TokenStream.LA(1);
			if ( !(_la==K_TRUE || _la==K_FALSE) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StringConstContext : ParserRuleContext {
		public ITerminalNode STRING_CONST() { return GetToken(JassParser.STRING_CONST, 0); }
		public StringConstContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_stringConst; } }
		public override void EnterRule(IParseTreeListener listener) {
			IJassParserListener typedListener = listener as IJassParserListener;
			if (typedListener != null) typedListener.EnterStringConst(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IJassParserListener typedListener = listener as IJassParserListener;
			if (typedListener != null) typedListener.ExitStringConst(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJassParserVisitor<TResult> typedVisitor = visitor as IJassParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStringConst(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public StringConstContext stringConst() {
		StringConstContext _localctx = new StringConstContext(Context, State);
		EnterRule(_localctx, 68, RULE_stringConst);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 325; Match(STRING_CONST);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TypeContext : ParserRuleContext {
		public IdContext id() {
			return GetRuleContext<IdContext>(0);
		}
		public ITerminalNode K_CODE() { return GetToken(JassParser.K_CODE, 0); }
		public ITerminalNode K_HANDLE() { return GetToken(JassParser.K_HANDLE, 0); }
		public ITerminalNode K_INTEGER() { return GetToken(JassParser.K_INTEGER, 0); }
		public ITerminalNode K_REAL() { return GetToken(JassParser.K_REAL, 0); }
		public ITerminalNode K_BOOLEAN() { return GetToken(JassParser.K_BOOLEAN, 0); }
		public ITerminalNode K_STRING() { return GetToken(JassParser.K_STRING, 0); }
		public TypeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_type; } }
		public override void EnterRule(IParseTreeListener listener) {
			IJassParserListener typedListener = listener as IJassParserListener;
			if (typedListener != null) typedListener.EnterType(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IJassParserListener typedListener = listener as IJassParserListener;
			if (typedListener != null) typedListener.ExitType(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJassParserVisitor<TResult> typedVisitor = visitor as IJassParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitType(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TypeContext type() {
		TypeContext _localctx = new TypeContext(Context, State);
		EnterRule(_localctx, 70, RULE_type);
		try {
			State = 334;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case ID:
				EnterOuterAlt(_localctx, 1);
				{
				State = 327; id();
				}
				break;
			case K_CODE:
				EnterOuterAlt(_localctx, 2);
				{
				State = 328; Match(K_CODE);
				}
				break;
			case K_HANDLE:
				EnterOuterAlt(_localctx, 3);
				{
				State = 329; Match(K_HANDLE);
				}
				break;
			case K_INTEGER:
				EnterOuterAlt(_localctx, 4);
				{
				State = 330; Match(K_INTEGER);
				}
				break;
			case K_REAL:
				EnterOuterAlt(_localctx, 5);
				{
				State = 331; Match(K_REAL);
				}
				break;
			case K_BOOLEAN:
				EnterOuterAlt(_localctx, 6);
				{
				State = 332; Match(K_BOOLEAN);
				}
				break;
			case K_STRING:
				EnterOuterAlt(_localctx, 7);
				{
				State = 333; Match(K_STRING);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IdContext : ParserRuleContext {
		public ITerminalNode ID() { return GetToken(JassParser.ID, 0); }
		public IdContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_id; } }
		public override void EnterRule(IParseTreeListener listener) {
			IJassParserListener typedListener = listener as IJassParserListener;
			if (typedListener != null) typedListener.EnterId(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IJassParserListener typedListener = listener as IJassParserListener;
			if (typedListener != null) typedListener.ExitId(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJassParserVisitor<TResult> typedVisitor = visitor as IJassParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitId(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public IdContext id() {
		IdContext _localctx = new IdContext(Context, State);
		EnterRule(_localctx, 72, RULE_id);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 336; Match(ID);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public override bool Sempred(RuleContext _localctx, int ruleIndex, int predIndex) {
		switch (ruleIndex) {
		case 24: return expr_sempred((ExprContext)_localctx, predIndex);
		}
		return true;
	}
	private bool expr_sempred(ExprContext _localctx, int predIndex) {
		switch (predIndex) {
		case 0: return Precpred(Context, 11);
		case 1: return Precpred(Context, 10);
		case 2: return Precpred(Context, 9);
		case 3: return Precpred(Context, 8);
		case 4: return Precpred(Context, 7);
		}
		return true;
	}

	private static char[] _serializedATN = {
		'\x3', '\x608B', '\xA72A', '\x8133', '\xB9ED', '\x417C', '\x3BE7', '\x7786', 
		'\x5964', '\x3', '@', '\x155', '\x4', '\x2', '\t', '\x2', '\x4', '\x3', 
		'\t', '\x3', '\x4', '\x4', '\t', '\x4', '\x4', '\x5', '\t', '\x5', '\x4', 
		'\x6', '\t', '\x6', '\x4', '\a', '\t', '\a', '\x4', '\b', '\t', '\b', 
		'\x4', '\t', '\t', '\t', '\x4', '\n', '\t', '\n', '\x4', '\v', '\t', '\v', 
		'\x4', '\f', '\t', '\f', '\x4', '\r', '\t', '\r', '\x4', '\xE', '\t', 
		'\xE', '\x4', '\xF', '\t', '\xF', '\x4', '\x10', '\t', '\x10', '\x4', 
		'\x11', '\t', '\x11', '\x4', '\x12', '\t', '\x12', '\x4', '\x13', '\t', 
		'\x13', '\x4', '\x14', '\t', '\x14', '\x4', '\x15', '\t', '\x15', '\x4', 
		'\x16', '\t', '\x16', '\x4', '\x17', '\t', '\x17', '\x4', '\x18', '\t', 
		'\x18', '\x4', '\x19', '\t', '\x19', '\x4', '\x1A', '\t', '\x1A', '\x4', 
		'\x1B', '\t', '\x1B', '\x4', '\x1C', '\t', '\x1C', '\x4', '\x1D', '\t', 
		'\x1D', '\x4', '\x1E', '\t', '\x1E', '\x4', '\x1F', '\t', '\x1F', '\x4', 
		' ', '\t', ' ', '\x4', '!', '\t', '!', '\x4', '\"', '\t', '\"', '\x4', 
		'#', '\t', '#', '\x4', '$', '\t', '$', '\x4', '%', '\t', '%', '\x4', '&', 
		'\t', '&', '\x3', '\x2', '\a', '\x2', 'N', '\n', '\x2', '\f', '\x2', '\xE', 
		'\x2', 'Q', '\v', '\x2', '\x3', '\x2', '\a', '\x2', 'T', '\n', '\x2', 
		'\f', '\x2', '\xE', '\x2', 'W', '\v', '\x2', '\x3', '\x3', '\x3', '\x3', 
		'\x3', '\x3', '\x5', '\x3', '\\', '\n', '\x3', '\x3', '\x4', '\x3', '\x4', 
		'\x3', '\x4', '\x3', '\x4', '\x3', '\x4', '\x5', '\x4', '\x63', '\n', 
		'\x4', '\x3', '\x5', '\x3', '\x5', '\x3', '\x5', '\x3', '\x5', '\x3', 
		'\x6', '\x3', '\x6', '\a', '\x6', 'k', '\n', '\x6', '\f', '\x6', '\xE', 
		'\x6', 'n', '\v', '\x6', '\x3', '\a', '\x3', '\a', '\x3', '\a', '\x3', 
		'\a', '\x3', '\a', '\x3', '\a', '\x3', '\b', '\x5', '\b', 'w', '\n', '\b', 
		'\x3', '\b', '\x3', '\b', '\x3', '\b', '\x3', '\t', '\x3', '\t', '\x3', 
		'\t', '\x3', '\t', '\x5', '\t', '\x80', '\n', '\t', '\x3', '\t', '\x3', 
		'\t', '\x3', '\t', '\x5', '\t', '\x85', '\n', '\t', '\x3', '\n', '\x3', 
		'\n', '\x3', '\n', '\a', '\n', '\x8A', '\n', '\n', '\f', '\n', '\xE', 
		'\n', '\x8D', '\v', '\n', '\x3', '\v', '\x3', '\v', '\x3', '\v', '\x3', 
		'\f', '\x5', '\f', '\x93', '\n', '\f', '\x3', '\f', '\x3', '\f', '\x3', 
		'\f', '\x3', '\f', '\x3', '\f', '\x3', '\f', '\x3', '\r', '\x3', '\r', 
		'\a', '\r', '\x9D', '\n', '\r', '\f', '\r', '\xE', '\r', '\xA0', '\v', 
		'\r', '\x3', '\xE', '\x3', '\xE', '\x3', '\xE', '\x3', '\xE', '\x5', '\xE', 
		'\xA6', '\n', '\xE', '\x3', '\xE', '\x3', '\xE', '\x3', '\xE', '\x3', 
		'\xE', '\x5', '\xE', '\xAC', '\n', '\xE', '\x3', '\xF', '\a', '\xF', '\xAF', 
		'\n', '\xF', '\f', '\xF', '\xE', '\xF', '\xB2', '\v', '\xF', '\x3', '\x10', 
		'\x3', '\x10', '\x3', '\x10', '\x3', '\x10', '\x3', '\x10', '\x3', '\x10', 
		'\x3', '\x10', '\x5', '\x10', '\xBB', '\n', '\x10', '\x3', '\x11', '\x3', 
		'\x11', '\x3', '\x11', '\x3', '\x11', '\x3', '\x11', '\x3', '\x11', '\x3', 
		'\x11', '\x3', '\x11', '\x3', '\x11', '\x3', '\x11', '\x5', '\x11', '\xC7', 
		'\n', '\x11', '\x3', '\x12', '\x3', '\x12', '\x3', '\x12', '\x3', '\x12', 
		'\x5', '\x12', '\xCD', '\n', '\x12', '\x3', '\x12', '\x3', '\x12', '\x3', 
		'\x13', '\x3', '\x13', '\x3', '\x13', '\a', '\x13', '\xD4', '\n', '\x13', 
		'\f', '\x13', '\xE', '\x13', '\xD7', '\v', '\x13', '\x3', '\x14', '\x3', 
		'\x14', '\x3', '\x14', '\x3', '\x14', '\x3', '\x14', '\x5', '\x14', '\xDE', 
		'\n', '\x14', '\x3', '\x14', '\x3', '\x14', '\x3', '\x15', '\x3', '\x15', 
		'\x3', '\x15', '\x3', '\x15', '\x3', '\x15', '\x3', '\x15', '\x3', '\x15', 
		'\x5', '\x15', '\xE9', '\n', '\x15', '\x5', '\x15', '\xEB', '\n', '\x15', 
		'\x3', '\x16', '\x3', '\x16', '\x3', '\x16', '\x3', '\x16', '\x3', '\x17', 
		'\x3', '\x17', '\x3', '\x17', '\x3', '\x18', '\x3', '\x18', '\x5', '\x18', 
		'\xF6', '\n', '\x18', '\x3', '\x19', '\x3', '\x19', '\x3', '\x19', '\x3', 
		'\x19', '\x3', '\x19', '\x5', '\x19', '\xFD', '\n', '\x19', '\x3', '\x1A', 
		'\x3', '\x1A', '\x3', '\x1A', '\x3', '\x1A', '\x3', '\x1A', '\x3', '\x1A', 
		'\x3', '\x1A', '\x3', '\x1A', '\x3', '\x1A', '\x3', '\x1A', '\x3', '\x1A', 
		'\x3', '\x1A', '\x3', '\x1A', '\x5', '\x1A', '\x10C', '\n', '\x1A', '\x3', 
		'\x1A', '\x3', '\x1A', '\x3', '\x1A', '\x3', '\x1A', '\x3', '\x1A', '\x3', 
		'\x1A', '\x3', '\x1A', '\x3', '\x1A', '\x3', '\x1A', '\x3', '\x1A', '\x3', 
		'\x1A', '\x3', '\x1A', '\x3', '\x1A', '\x3', '\x1A', '\x3', '\x1A', '\a', 
		'\x1A', '\x11D', '\n', '\x1A', '\f', '\x1A', '\xE', '\x1A', '\x120', '\v', 
		'\x1A', '\x3', '\x1B', '\x3', '\x1B', '\x3', '\x1B', '\x5', '\x1B', '\x125', 
		'\n', '\x1B', '\x3', '\x1B', '\x3', '\x1B', '\x3', '\x1C', '\x3', '\x1C', 
		'\x3', '\x1C', '\x3', '\x1C', '\x3', '\x1C', '\x3', '\x1D', '\x3', '\x1D', 
		'\x3', '\x1D', '\x3', '\x1E', '\x3', '\x1E', '\x3', '\x1E', '\x3', '\x1E', 
		'\x3', '\x1E', '\x5', '\x1E', '\x136', '\n', '\x1E', '\x3', '\x1F', '\x3', 
		'\x1F', '\x3', '\x1F', '\x3', '\x1F', '\x5', '\x1F', '\x13C', '\n', '\x1F', 
		'\x3', ' ', '\x3', ' ', '\x3', '!', '\x3', '!', '\x3', '\"', '\x3', '\"', 
		'\x3', '\"', '\x3', '\"', '\x3', '#', '\x3', '#', '\x3', '$', '\x3', '$', 
		'\x3', '%', '\x3', '%', '\x3', '%', '\x3', '%', '\x3', '%', '\x3', '%', 
		'\x3', '%', '\x5', '%', '\x151', '\n', '%', '\x3', '&', '\x3', '&', '\x3', 
		'&', '\x2', '\x3', '\x32', '\'', '\x2', '\x4', '\x6', '\b', '\n', '\f', 
		'\xE', '\x10', '\x12', '\x14', '\x16', '\x18', '\x1A', '\x1C', '\x1E', 
		' ', '\"', '$', '&', '(', '*', ',', '.', '\x30', '\x32', '\x34', '\x36', 
		'\x38', ':', '<', '>', '@', '\x42', '\x44', '\x46', 'H', 'J', '\x2', '\b', 
		'\x3', '\x2', '*', '+', '\x3', '\x2', '(', ')', '\x4', '\x2', ',', '-', 
		'\x30', '\x31', '\x3', '\x2', '.', '/', '\x3', '\x2', '\r', '\xE', '\x3', 
		'\x2', '\t', '\n', '\x2', '\x16A', '\x2', 'O', '\x3', '\x2', '\x2', '\x2', 
		'\x4', '[', '\x3', '\x2', '\x2', '\x2', '\x6', ']', '\x3', '\x2', '\x2', 
		'\x2', '\b', '\x64', '\x3', '\x2', '\x2', '\x2', '\n', 'l', '\x3', '\x2', 
		'\x2', '\x2', '\f', 'o', '\x3', '\x2', '\x2', '\x2', '\xE', 'v', '\x3', 
		'\x2', '\x2', '\x2', '\x10', '{', '\x3', '\x2', '\x2', '\x2', '\x12', 
		'\x86', '\x3', '\x2', '\x2', '\x2', '\x14', '\x8E', '\x3', '\x2', '\x2', 
		'\x2', '\x16', '\x92', '\x3', '\x2', '\x2', '\x2', '\x18', '\x9E', '\x3', 
		'\x2', '\x2', '\x2', '\x1A', '\xAB', '\x3', '\x2', '\x2', '\x2', '\x1C', 
		'\xB0', '\x3', '\x2', '\x2', '\x2', '\x1E', '\xBA', '\x3', '\x2', '\x2', 
		'\x2', ' ', '\xC6', '\x3', '\x2', '\x2', '\x2', '\"', '\xC8', '\x3', '\x2', 
		'\x2', '\x2', '$', '\xD0', '\x3', '\x2', '\x2', '\x2', '&', '\xD8', '\x3', 
		'\x2', '\x2', '\x2', '(', '\xEA', '\x3', '\x2', '\x2', '\x2', '*', '\xEC', 
		'\x3', '\x2', '\x2', '\x2', ',', '\xF0', '\x3', '\x2', '\x2', '\x2', '.', 
		'\xF3', '\x3', '\x2', '\x2', '\x2', '\x30', '\xF7', '\x3', '\x2', '\x2', 
		'\x2', '\x32', '\x10B', '\x3', '\x2', '\x2', '\x2', '\x34', '\x121', '\x3', 
		'\x2', '\x2', '\x2', '\x36', '\x128', '\x3', '\x2', '\x2', '\x2', '\x38', 
		'\x12D', '\x3', '\x2', '\x2', '\x2', ':', '\x135', '\x3', '\x2', '\x2', 
		'\x2', '<', '\x13B', '\x3', '\x2', '\x2', '\x2', '>', '\x13D', '\x3', 
		'\x2', '\x2', '\x2', '@', '\x13F', '\x3', '\x2', '\x2', '\x2', '\x42', 
		'\x141', '\x3', '\x2', '\x2', '\x2', '\x44', '\x145', '\x3', '\x2', '\x2', 
		'\x2', '\x46', '\x147', '\x3', '\x2', '\x2', '\x2', 'H', '\x150', '\x3', 
		'\x2', '\x2', '\x2', 'J', '\x152', '\x3', '\x2', '\x2', '\x2', 'L', 'N', 
		'\x5', '\x4', '\x3', '\x2', 'M', 'L', '\x3', '\x2', '\x2', '\x2', 'N', 
		'Q', '\x3', '\x2', '\x2', '\x2', 'O', 'M', '\x3', '\x2', '\x2', '\x2', 
		'O', 'P', '\x3', '\x2', '\x2', '\x2', 'P', 'U', '\x3', '\x2', '\x2', '\x2', 
		'Q', 'O', '\x3', '\x2', '\x2', '\x2', 'R', 'T', '\x5', '\x16', '\f', '\x2', 
		'S', 'R', '\x3', '\x2', '\x2', '\x2', 'T', 'W', '\x3', '\x2', '\x2', '\x2', 
		'U', 'S', '\x3', '\x2', '\x2', '\x2', 'U', 'V', '\x3', '\x2', '\x2', '\x2', 
		'V', '\x3', '\x3', '\x2', '\x2', '\x2', 'W', 'U', '\x3', '\x2', '\x2', 
		'\x2', 'X', '\\', '\x5', '\x6', '\x4', '\x2', 'Y', '\\', '\x5', '\b', 
		'\x5', '\x2', 'Z', '\\', '\x5', '\xE', '\b', '\x2', '[', 'X', '\x3', '\x2', 
		'\x2', '\x2', '[', 'Y', '\x3', '\x2', '\x2', '\x2', '[', 'Z', '\x3', '\x2', 
		'\x2', '\x2', '\\', '\x5', '\x3', '\x2', '\x2', '\x2', ']', '^', '\a', 
		'\x1D', '\x2', '\x2', '^', '_', '\x5', 'J', '&', '\x2', '_', '\x62', '\a', 
		'\x1E', '\x2', '\x2', '`', '\x63', '\a', '\x4', '\x2', '\x2', '\x61', 
		'\x63', '\x5', 'J', '&', '\x2', '\x62', '`', '\x3', '\x2', '\x2', '\x2', 
		'\x62', '\x61', '\x3', '\x2', '\x2', '\x2', '\x63', '\a', '\x3', '\x2', 
		'\x2', '\x2', '\x64', '\x65', '\a', '\x1F', '\x2', '\x2', '\x65', '\x66', 
		'\x5', '\n', '\x6', '\x2', '\x66', 'g', '\a', ' ', '\x2', '\x2', 'g', 
		'\t', '\x3', '\x2', '\x2', '\x2', 'h', 'k', '\x5', '\f', '\a', '\x2', 
		'i', 'k', '\x5', '\x1A', '\xE', '\x2', 'j', 'h', '\x3', '\x2', '\x2', 
		'\x2', 'j', 'i', '\x3', '\x2', '\x2', '\x2', 'k', 'n', '\x3', '\x2', '\x2', 
		'\x2', 'l', 'j', '\x3', '\x2', '\x2', '\x2', 'l', 'm', '\x3', '\x2', '\x2', 
		'\x2', 'm', '\v', '\x3', '\x2', '\x2', '\x2', 'n', 'l', '\x3', '\x2', 
		'\x2', '\x2', 'o', 'p', '\a', '!', '\x2', '\x2', 'p', 'q', '\x5', 'H', 
		'%', '\x2', 'q', 'r', '\x5', 'J', '&', '\x2', 'r', 's', '\a', '\x37', 
		'\x2', '\x2', 's', 't', '\x5', '\x32', '\x1A', '\x2', 't', '\r', '\x3', 
		'\x2', '\x2', '\x2', 'u', 'w', '\a', '!', '\x2', '\x2', 'v', 'u', '\x3', 
		'\x2', '\x2', '\x2', 'v', 'w', '\x3', '\x2', '\x2', '\x2', 'w', 'x', '\x3', 
		'\x2', '\x2', '\x2', 'x', 'y', '\a', '\"', '\x2', '\x2', 'y', 'z', '\x5', 
		'\x10', '\t', '\x2', 'z', '\xF', '\x3', '\x2', '\x2', '\x2', '{', '|', 
		'\x5', 'J', '&', '\x2', '|', '\x7F', '\a', '#', '\x2', '\x2', '}', '\x80', 
		'\a', '$', '\x2', '\x2', '~', '\x80', '\x5', '\x12', '\n', '\x2', '\x7F', 
		'}', '\x3', '\x2', '\x2', '\x2', '\x7F', '~', '\x3', '\x2', '\x2', '\x2', 
		'\x80', '\x81', '\x3', '\x2', '\x2', '\x2', '\x81', '\x84', '\a', '\x11', 
		'\x2', '\x2', '\x82', '\x85', '\x5', 'H', '%', '\x2', '\x83', '\x85', 
		'\a', '$', '\x2', '\x2', '\x84', '\x82', '\x3', '\x2', '\x2', '\x2', '\x84', 
		'\x83', '\x3', '\x2', '\x2', '\x2', '\x85', '\x11', '\x3', '\x2', '\x2', 
		'\x2', '\x86', '\x8B', '\x5', '\x14', '\v', '\x2', '\x87', '\x88', '\a', 
		'\x36', '\x2', '\x2', '\x88', '\x8A', '\x5', '\x14', '\v', '\x2', '\x89', 
		'\x87', '\x3', '\x2', '\x2', '\x2', '\x8A', '\x8D', '\x3', '\x2', '\x2', 
		'\x2', '\x8B', '\x89', '\x3', '\x2', '\x2', '\x2', '\x8B', '\x8C', '\x3', 
		'\x2', '\x2', '\x2', '\x8C', '\x13', '\x3', '\x2', '\x2', '\x2', '\x8D', 
		'\x8B', '\x3', '\x2', '\x2', '\x2', '\x8E', '\x8F', '\x5', 'H', '%', '\x2', 
		'\x8F', '\x90', '\x5', 'J', '&', '\x2', '\x90', '\x15', '\x3', '\x2', 
		'\x2', '\x2', '\x91', '\x93', '\a', '!', '\x2', '\x2', '\x92', '\x91', 
		'\x3', '\x2', '\x2', '\x2', '\x92', '\x93', '\x3', '\x2', '\x2', '\x2', 
		'\x93', '\x94', '\x3', '\x2', '\x2', '\x2', '\x94', '\x95', '\a', '\xF', 
		'\x2', '\x2', '\x95', '\x96', '\x5', '\x10', '\t', '\x2', '\x96', '\x97', 
		'\x5', '\x18', '\r', '\x2', '\x97', '\x98', '\x5', '\x1C', '\xF', '\x2', 
		'\x98', '\x99', '\a', '%', '\x2', '\x2', '\x99', '\x17', '\x3', '\x2', 
		'\x2', '\x2', '\x9A', '\x9B', '\a', '&', '\x2', '\x2', '\x9B', '\x9D', 
		'\x5', '\x1A', '\xE', '\x2', '\x9C', '\x9A', '\x3', '\x2', '\x2', '\x2', 
		'\x9D', '\xA0', '\x3', '\x2', '\x2', '\x2', '\x9E', '\x9C', '\x3', '\x2', 
		'\x2', '\x2', '\x9E', '\x9F', '\x3', '\x2', '\x2', '\x2', '\x9F', '\x19', 
		'\x3', '\x2', '\x2', '\x2', '\xA0', '\x9E', '\x3', '\x2', '\x2', '\x2', 
		'\xA1', '\xA2', '\x5', 'H', '%', '\x2', '\xA2', '\xA5', '\x5', 'J', '&', 
		'\x2', '\xA3', '\xA4', '\a', '\x37', '\x2', '\x2', '\xA4', '\xA6', '\x5', 
		'\x32', '\x1A', '\x2', '\xA5', '\xA3', '\x3', '\x2', '\x2', '\x2', '\xA5', 
		'\xA6', '\x3', '\x2', '\x2', '\x2', '\xA6', '\xAC', '\x3', '\x2', '\x2', 
		'\x2', '\xA7', '\xA8', '\x5', 'H', '%', '\x2', '\xA8', '\xA9', '\a', '\'', 
		'\x2', '\x2', '\xA9', '\xAA', '\x5', 'J', '&', '\x2', '\xAA', '\xAC', 
		'\x3', '\x2', '\x2', '\x2', '\xAB', '\xA1', '\x3', '\x2', '\x2', '\x2', 
		'\xAB', '\xA7', '\x3', '\x2', '\x2', '\x2', '\xAC', '\x1B', '\x3', '\x2', 
		'\x2', '\x2', '\xAD', '\xAF', '\x5', '\x1E', '\x10', '\x2', '\xAE', '\xAD', 
		'\x3', '\x2', '\x2', '\x2', '\xAF', '\xB2', '\x3', '\x2', '\x2', '\x2', 
		'\xB0', '\xAE', '\x3', '\x2', '\x2', '\x2', '\xB0', '\xB1', '\x3', '\x2', 
		'\x2', '\x2', '\xB1', '\x1D', '\x3', '\x2', '\x2', '\x2', '\xB2', '\xB0', 
		'\x3', '\x2', '\x2', '\x2', '\xB3', '\xBB', '\x5', ' ', '\x11', '\x2', 
		'\xB4', '\xBB', '\x5', '\"', '\x12', '\x2', '\xB5', '\xBB', '\x5', '&', 
		'\x14', '\x2', '\xB6', '\xBB', '\x5', '*', '\x16', '\x2', '\xB7', '\xBB', 
		'\x5', ',', '\x17', '\x2', '\xB8', '\xBB', '\x5', '.', '\x18', '\x2', 
		'\xB9', '\xBB', '\x5', '\x30', '\x19', '\x2', '\xBA', '\xB3', '\x3', '\x2', 
		'\x2', '\x2', '\xBA', '\xB4', '\x3', '\x2', '\x2', '\x2', '\xBA', '\xB5', 
		'\x3', '\x2', '\x2', '\x2', '\xBA', '\xB6', '\x3', '\x2', '\x2', '\x2', 
		'\xBA', '\xB7', '\x3', '\x2', '\x2', '\x2', '\xBA', '\xB8', '\x3', '\x2', 
		'\x2', '\x2', '\xBA', '\xB9', '\x3', '\x2', '\x2', '\x2', '\xBB', '\x1F', 
		'\x3', '\x2', '\x2', '\x2', '\xBC', '\xBD', '\a', '\x1C', '\x2', '\x2', 
		'\xBD', '\xBE', '\x5', 'J', '&', '\x2', '\xBE', '\xBF', '\a', '\x37', 
		'\x2', '\x2', '\xBF', '\xC0', '\x5', '\x32', '\x1A', '\x2', '\xC0', '\xC7', 
		'\x3', '\x2', '\x2', '\x2', '\xC1', '\xC2', '\a', '\x1C', '\x2', '\x2', 
		'\xC2', '\xC3', '\x5', '\x36', '\x1C', '\x2', '\xC3', '\xC4', '\a', '\x37', 
		'\x2', '\x2', '\xC4', '\xC5', '\x5', '\x32', '\x1A', '\x2', '\xC5', '\xC7', 
		'\x3', '\x2', '\x2', '\x2', '\xC6', '\xBC', '\x3', '\x2', '\x2', '\x2', 
		'\xC6', '\xC1', '\x3', '\x2', '\x2', '\x2', '\xC7', '!', '\x3', '\x2', 
		'\x2', '\x2', '\xC8', '\xC9', '\a', '\x17', '\x2', '\x2', '\xC9', '\xCA', 
		'\x5', 'J', '&', '\x2', '\xCA', '\xCC', '\a', '\x34', '\x2', '\x2', '\xCB', 
		'\xCD', '\x5', '$', '\x13', '\x2', '\xCC', '\xCB', '\x3', '\x2', '\x2', 
		'\x2', '\xCC', '\xCD', '\x3', '\x2', '\x2', '\x2', '\xCD', '\xCE', '\x3', 
		'\x2', '\x2', '\x2', '\xCE', '\xCF', '\a', '\x35', '\x2', '\x2', '\xCF', 
		'#', '\x3', '\x2', '\x2', '\x2', '\xD0', '\xD5', '\x5', '\x32', '\x1A', 
		'\x2', '\xD1', '\xD2', '\a', '\x36', '\x2', '\x2', '\xD2', '\xD4', '\x5', 
		'\x32', '\x1A', '\x2', '\xD3', '\xD1', '\x3', '\x2', '\x2', '\x2', '\xD4', 
		'\xD7', '\x3', '\x2', '\x2', '\x2', '\xD5', '\xD3', '\x3', '\x2', '\x2', 
		'\x2', '\xD5', '\xD6', '\x3', '\x2', '\x2', '\x2', '\xD6', '%', '\x3', 
		'\x2', '\x2', '\x2', '\xD7', '\xD5', '\x3', '\x2', '\x2', '\x2', '\xD8', 
		'\xD9', '\a', '\x18', '\x2', '\x2', '\xD9', '\xDA', '\x5', '\x32', '\x1A', 
		'\x2', '\xDA', '\xDB', '\a', '\x19', '\x2', '\x2', '\xDB', '\xDD', '\x5', 
		'\x1C', '\xF', '\x2', '\xDC', '\xDE', '\x5', '(', '\x15', '\x2', '\xDD', 
		'\xDC', '\x3', '\x2', '\x2', '\x2', '\xDD', '\xDE', '\x3', '\x2', '\x2', 
		'\x2', '\xDE', '\xDF', '\x3', '\x2', '\x2', '\x2', '\xDF', '\xE0', '\a', 
		'\x1A', '\x2', '\x2', '\xE0', '\'', '\x3', '\x2', '\x2', '\x2', '\xE1', 
		'\xE2', '\a', '\x16', '\x2', '\x2', '\xE2', '\xEB', '\x5', '\x1C', '\xF', 
		'\x2', '\xE3', '\xE4', '\a', '\x15', '\x2', '\x2', '\xE4', '\xE5', '\x5', 
		'\x32', '\x1A', '\x2', '\xE5', '\xE6', '\a', '\x19', '\x2', '\x2', '\xE6', 
		'\xE8', '\x5', '\x1C', '\xF', '\x2', '\xE7', '\xE9', '\x5', '(', '\x15', 
		'\x2', '\xE8', '\xE7', '\x3', '\x2', '\x2', '\x2', '\xE8', '\xE9', '\x3', 
		'\x2', '\x2', '\x2', '\xE9', '\xEB', '\x3', '\x2', '\x2', '\x2', '\xEA', 
		'\xE1', '\x3', '\x2', '\x2', '\x2', '\xEA', '\xE3', '\x3', '\x2', '\x2', 
		'\x2', '\xEB', ')', '\x3', '\x2', '\x2', '\x2', '\xEC', '\xED', '\a', 
		'\x13', '\x2', '\x2', '\xED', '\xEE', '\x5', '\x1C', '\xF', '\x2', '\xEE', 
		'\xEF', '\a', '\x14', '\x2', '\x2', '\xEF', '+', '\x3', '\x2', '\x2', 
		'\x2', '\xF0', '\xF1', '\a', '\x12', '\x2', '\x2', '\xF1', '\xF2', '\x5', 
		'\x32', '\x1A', '\x2', '\xF2', '-', '\x3', '\x2', '\x2', '\x2', '\xF3', 
		'\xF5', '\a', '\x10', '\x2', '\x2', '\xF4', '\xF6', '\x5', '\x32', '\x1A', 
		'\x2', '\xF5', '\xF4', '\x3', '\x2', '\x2', '\x2', '\xF5', '\xF6', '\x3', 
		'\x2', '\x2', '\x2', '\xF6', '/', '\x3', '\x2', '\x2', '\x2', '\xF7', 
		'\xFC', '\a', '\x1B', '\x2', '\x2', '\xF8', '\xFD', '\x5', ' ', '\x11', 
		'\x2', '\xF9', '\xFD', '\x5', '\"', '\x12', '\x2', '\xFA', '\xFD', '\x5', 
		'&', '\x14', '\x2', '\xFB', '\xFD', '\x5', '*', '\x16', '\x2', '\xFC', 
		'\xF8', '\x3', '\x2', '\x2', '\x2', '\xFC', '\xF9', '\x3', '\x2', '\x2', 
		'\x2', '\xFC', '\xFA', '\x3', '\x2', '\x2', '\x2', '\xFC', '\xFB', '\x3', 
		'\x2', '\x2', '\x2', '\xFD', '\x31', '\x3', '\x2', '\x2', '\x2', '\xFE', 
		'\xFF', '\b', '\x1A', '\x1', '\x2', '\xFF', '\x100', '\a', '(', '\x2', 
		'\x2', '\x100', '\x10C', '\x5', '\x32', '\x1A', '\x10', '\x101', '\x102', 
		'\a', ')', '\x2', '\x2', '\x102', '\x10C', '\x5', '\x32', '\x1A', '\xF', 
		'\x103', '\x104', '\a', '\f', '\x2', '\x2', '\x104', '\x10C', '\x5', '\x32', 
		'\x1A', '\xE', '\x105', '\x10C', '\x5', '\x34', '\x1B', '\x2', '\x106', 
		'\x10C', '\x5', '\x36', '\x1C', '\x2', '\x107', '\x10C', '\x5', '\x38', 
		'\x1D', '\x2', '\x108', '\x10C', '\x5', 'J', '&', '\x2', '\x109', '\x10C', 
		'\x5', ':', '\x1E', '\x2', '\x10A', '\x10C', '\x5', '\x42', '\"', '\x2', 
		'\x10B', '\xFE', '\x3', '\x2', '\x2', '\x2', '\x10B', '\x101', '\x3', 
		'\x2', '\x2', '\x2', '\x10B', '\x103', '\x3', '\x2', '\x2', '\x2', '\x10B', 
		'\x105', '\x3', '\x2', '\x2', '\x2', '\x10B', '\x106', '\x3', '\x2', '\x2', 
		'\x2', '\x10B', '\x107', '\x3', '\x2', '\x2', '\x2', '\x10B', '\x108', 
		'\x3', '\x2', '\x2', '\x2', '\x10B', '\x109', '\x3', '\x2', '\x2', '\x2', 
		'\x10B', '\x10A', '\x3', '\x2', '\x2', '\x2', '\x10C', '\x11E', '\x3', 
		'\x2', '\x2', '\x2', '\x10D', '\x10E', '\f', '\r', '\x2', '\x2', '\x10E', 
		'\x10F', '\t', '\x2', '\x2', '\x2', '\x10F', '\x11D', '\x5', '\x32', '\x1A', 
		'\xE', '\x110', '\x111', '\f', '\f', '\x2', '\x2', '\x111', '\x112', '\t', 
		'\x3', '\x2', '\x2', '\x112', '\x11D', '\x5', '\x32', '\x1A', '\r', '\x113', 
		'\x114', '\f', '\v', '\x2', '\x2', '\x114', '\x115', '\t', '\x4', '\x2', 
		'\x2', '\x115', '\x11D', '\x5', '\x32', '\x1A', '\f', '\x116', '\x117', 
		'\f', '\n', '\x2', '\x2', '\x117', '\x118', '\t', '\x5', '\x2', '\x2', 
		'\x118', '\x11D', '\x5', '\x32', '\x1A', '\v', '\x119', '\x11A', '\f', 
		'\t', '\x2', '\x2', '\x11A', '\x11B', '\t', '\x6', '\x2', '\x2', '\x11B', 
		'\x11D', '\x5', '\x32', '\x1A', '\n', '\x11C', '\x10D', '\x3', '\x2', 
		'\x2', '\x2', '\x11C', '\x110', '\x3', '\x2', '\x2', '\x2', '\x11C', '\x113', 
		'\x3', '\x2', '\x2', '\x2', '\x11C', '\x116', '\x3', '\x2', '\x2', '\x2', 
		'\x11C', '\x119', '\x3', '\x2', '\x2', '\x2', '\x11D', '\x120', '\x3', 
		'\x2', '\x2', '\x2', '\x11E', '\x11C', '\x3', '\x2', '\x2', '\x2', '\x11E', 
		'\x11F', '\x3', '\x2', '\x2', '\x2', '\x11F', '\x33', '\x3', '\x2', '\x2', 
		'\x2', '\x120', '\x11E', '\x3', '\x2', '\x2', '\x2', '\x121', '\x122', 
		'\x5', 'J', '&', '\x2', '\x122', '\x124', '\a', '\x34', '\x2', '\x2', 
		'\x123', '\x125', '\x5', '$', '\x13', '\x2', '\x124', '\x123', '\x3', 
		'\x2', '\x2', '\x2', '\x124', '\x125', '\x3', '\x2', '\x2', '\x2', '\x125', 
		'\x126', '\x3', '\x2', '\x2', '\x2', '\x126', '\x127', '\a', '\x35', '\x2', 
		'\x2', '\x127', '\x35', '\x3', '\x2', '\x2', '\x2', '\x128', '\x129', 
		'\x5', 'J', '&', '\x2', '\x129', '\x12A', '\a', '\x32', '\x2', '\x2', 
		'\x12A', '\x12B', '\x5', '\x32', '\x1A', '\x2', '\x12B', '\x12C', '\a', 
		'\x33', '\x2', '\x2', '\x12C', '\x37', '\x3', '\x2', '\x2', '\x2', '\x12D', 
		'\x12E', '\a', '\xF', '\x2', '\x2', '\x12E', '\x12F', '\x5', 'J', '&', 
		'\x2', '\x12F', '\x39', '\x3', '\x2', '\x2', '\x2', '\x130', '\x136', 
		'\x5', '<', '\x1F', '\x2', '\x131', '\x136', '\a', '<', '\x2', '\x2', 
		'\x132', '\x136', '\x5', '\x44', '#', '\x2', '\x133', '\x136', '\x5', 
		'\x46', '$', '\x2', '\x134', '\x136', '\a', '\v', '\x2', '\x2', '\x135', 
		'\x130', '\x3', '\x2', '\x2', '\x2', '\x135', '\x131', '\x3', '\x2', '\x2', 
		'\x2', '\x135', '\x132', '\x3', '\x2', '\x2', '\x2', '\x135', '\x133', 
		'\x3', '\x2', '\x2', '\x2', '\x135', '\x134', '\x3', '\x2', '\x2', '\x2', 
		'\x136', ';', '\x3', '\x2', '\x2', '\x2', '\x137', '\x13C', '\x5', '>', 
		' ', '\x2', '\x138', '\x13C', '\a', '\x39', '\x2', '\x2', '\x139', '\x13C', 
		'\x5', '@', '!', '\x2', '\x13A', '\x13C', '\a', ';', '\x2', '\x2', '\x13B', 
		'\x137', '\x3', '\x2', '\x2', '\x2', '\x13B', '\x138', '\x3', '\x2', '\x2', 
		'\x2', '\x13B', '\x139', '\x3', '\x2', '\x2', '\x2', '\x13B', '\x13A', 
		'\x3', '\x2', '\x2', '\x2', '\x13C', '=', '\x3', '\x2', '\x2', '\x2', 
		'\x13D', '\x13E', '\a', '\x38', '\x2', '\x2', '\x13E', '?', '\x3', '\x2', 
		'\x2', '\x2', '\x13F', '\x140', '\a', ':', '\x2', '\x2', '\x140', '\x41', 
		'\x3', '\x2', '\x2', '\x2', '\x141', '\x142', '\a', '\x34', '\x2', '\x2', 
		'\x142', '\x143', '\x5', '\x32', '\x1A', '\x2', '\x143', '\x144', '\a', 
		'\x35', '\x2', '\x2', '\x144', '\x43', '\x3', '\x2', '\x2', '\x2', '\x145', 
		'\x146', '\t', '\a', '\x2', '\x2', '\x146', '\x45', '\x3', '\x2', '\x2', 
		'\x2', '\x147', '\x148', '\a', '=', '\x2', '\x2', '\x148', 'G', '\x3', 
		'\x2', '\x2', '\x2', '\x149', '\x151', '\x5', 'J', '&', '\x2', '\x14A', 
		'\x151', '\a', '\x3', '\x2', '\x2', '\x14B', '\x151', '\a', '\x4', '\x2', 
		'\x2', '\x14C', '\x151', '\a', '\x5', '\x2', '\x2', '\x14D', '\x151', 
		'\a', '\x6', '\x2', '\x2', '\x14E', '\x151', '\a', '\a', '\x2', '\x2', 
		'\x14F', '\x151', '\a', '\b', '\x2', '\x2', '\x150', '\x149', '\x3', '\x2', 
		'\x2', '\x2', '\x150', '\x14A', '\x3', '\x2', '\x2', '\x2', '\x150', '\x14B', 
		'\x3', '\x2', '\x2', '\x2', '\x150', '\x14C', '\x3', '\x2', '\x2', '\x2', 
		'\x150', '\x14D', '\x3', '\x2', '\x2', '\x2', '\x150', '\x14E', '\x3', 
		'\x2', '\x2', '\x2', '\x150', '\x14F', '\x3', '\x2', '\x2', '\x2', '\x151', 
		'I', '\x3', '\x2', '\x2', '\x2', '\x152', '\x153', '\a', '>', '\x2', '\x2', 
		'\x153', 'K', '\x3', '\x2', '\x2', '\x2', '!', 'O', 'U', '[', '\x62', 
		'j', 'l', 'v', '\x7F', '\x84', '\x8B', '\x92', '\x9E', '\xA5', '\xAB', 
		'\xB0', '\xBA', '\xC6', '\xCC', '\xD5', '\xDD', '\xE8', '\xEA', '\xF5', 
		'\xFC', '\x10B', '\x11C', '\x11E', '\x124', '\x135', '\x13B', '\x150',
	};

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN);


}
