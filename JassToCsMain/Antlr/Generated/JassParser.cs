//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.8
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from Jass.g4 by ANTLR 4.8

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

using System;
using System.IO;
using System.Text;
using System.Diagnostics;
using System.Collections.Generic;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.8")]
[System.CLSCompliant(false)]
public partial class JassParser : Parser {
	protected static DFA[] decisionToDFA;
	protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
	public const int
		K_CODE=1, K_HANDLE=2, K_INTEGER=3, K_REAL=4, K_BOOLEAN=5, K_STRING=6, 
		K_TRUE=7, K_FALSE=8, K_NULL=9, K_NOT=10, K_AND=11, K_OR=12, K_FUNCTION=13, 
		K_RETURN=14, K_RETURNS=15, K_EXITWHEN=16, K_LOOP=17, K_ENDLOOP=18, K_ELSEIF=19, 
		K_ELSE=20, K_CALL=21, K_IF=22, K_THEN=23, K_ENDIF=24, K_DEBUG=25, K_SET=26, 
		K_TYPE=27, K_EXTENDS=28, K_GLOBALS=29, K_ENDGLOBALS=30, K_CONSTANT=31, 
		K_NATIVE=32, K_TAKES=33, K_NOTHING=34, K_ENDFUNCTION=35, K_LOCAL=36, K_ARRAY=37, 
		ADD=38, SUB=39, MULT=40, DIV=41, GT=42, LT=43, EQ=44, NEQ=45, GTEQ=46, 
		LTEQ=47, O_BRACK=48, C_BRACK=49, O_PAR=50, C_PAR=51, COMMA=52, ASSIGN=53, 
		DECIMAL=54, OCTAL=55, HEX=56, FOURCC=57, REAL_CONST=58, STRING_CONST=59, 
		ID=60, NEWLINE=61, SPACE=62, COMMENT=63;
	public const int
		RULE_file = 0, RULE_declr = 1, RULE_typedef = 2, RULE_globals = 3, RULE_global_var_list = 4, 
		RULE_global_var_declr = 5, RULE_native_func = 6, RULE_func_declr = 7, 
		RULE_param_list = 8, RULE_func = 9, RULE_local_var_list = 10, RULE_local_var_declr = 11, 
		RULE_var_declr = 12, RULE_statement_list = 13, RULE_statement = 14, RULE_set = 15, 
		RULE_call = 16, RULE_args = 17, RULE_ifthenelse = 18, RULE_else_clause = 19, 
		RULE_loop = 20, RULE_exitwhen = 21, RULE_return_stat = 22, RULE_debug = 23, 
		RULE_expr = 24, RULE_func_call = 25, RULE_array_ref = 26, RULE_func_ref = 27, 
		RULE_constant = 28, RULE_int_const = 29, RULE_parens = 30, RULE_boolConst = 31, 
		RULE_type = 32;
	public static readonly string[] ruleNames = {
		"file", "declr", "typedef", "globals", "global_var_list", "global_var_declr", 
		"native_func", "func_declr", "param_list", "func", "local_var_list", "local_var_declr", 
		"var_declr", "statement_list", "statement", "set", "call", "args", "ifthenelse", 
		"else_clause", "loop", "exitwhen", "return_stat", "debug", "expr", "func_call", 
		"array_ref", "func_ref", "constant", "int_const", "parens", "boolConst", 
		"type"
	};

	private static readonly string[] _LiteralNames = {
		null, "'code'", "'handle'", "'integer'", "'real'", "'boolean'", "'string'", 
		"'true'", "'false'", "'null'", "'not'", "'and'", "'or'", "'function'", 
		"'return'", "'returns'", "'exitwhen'", "'loop'", "'endloop'", "'elseif'", 
		"'else'", "'call'", "'if'", "'then'", "'endif'", "'debug'", "'set'", "'type'", 
		"'extends'", "'globals'", "'endglobals'", "'constant'", "'native'", "'takes'", 
		"'nothing'", "'endfunction'", "'local'", "'array'", "'+'", "'-'", "'*'", 
		"'/'", "'>'", "'<'", "'=='", "'!='", "'>='", "'<='", "'['", "']'", "'('", 
		"')'", "','", "'='"
	};
	private static readonly string[] _SymbolicNames = {
		null, "K_CODE", "K_HANDLE", "K_INTEGER", "K_REAL", "K_BOOLEAN", "K_STRING", 
		"K_TRUE", "K_FALSE", "K_NULL", "K_NOT", "K_AND", "K_OR", "K_FUNCTION", 
		"K_RETURN", "K_RETURNS", "K_EXITWHEN", "K_LOOP", "K_ENDLOOP", "K_ELSEIF", 
		"K_ELSE", "K_CALL", "K_IF", "K_THEN", "K_ENDIF", "K_DEBUG", "K_SET", "K_TYPE", 
		"K_EXTENDS", "K_GLOBALS", "K_ENDGLOBALS", "K_CONSTANT", "K_NATIVE", "K_TAKES", 
		"K_NOTHING", "K_ENDFUNCTION", "K_LOCAL", "K_ARRAY", "ADD", "SUB", "MULT", 
		"DIV", "GT", "LT", "EQ", "NEQ", "GTEQ", "LTEQ", "O_BRACK", "C_BRACK", 
		"O_PAR", "C_PAR", "COMMA", "ASSIGN", "DECIMAL", "OCTAL", "HEX", "FOURCC", 
		"REAL_CONST", "STRING_CONST", "ID", "NEWLINE", "SPACE", "COMMENT"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "Jass.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override string SerializedAtn { get { return new string(_serializedATN); } }

	static JassParser() {
		decisionToDFA = new DFA[_ATN.NumberOfDecisions];
		for (int i = 0; i < _ATN.NumberOfDecisions; i++) {
			decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
		}
	}

		public JassParser(ITokenStream input) : this(input, Console.Out, Console.Error) { }

		public JassParser(ITokenStream input, TextWriter output, TextWriter errorOutput)
		: base(input, output, errorOutput)
	{
		Interpreter = new ParserATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
	}

	public partial class FileContext : ParserRuleContext {
		public ITerminalNode[] NEWLINE() { return GetTokens(JassParser.NEWLINE); }
		public ITerminalNode NEWLINE(int i) {
			return GetToken(JassParser.NEWLINE, i);
		}
		public DeclrContext[] declr() {
			return GetRuleContexts<DeclrContext>();
		}
		public DeclrContext declr(int i) {
			return GetRuleContext<DeclrContext>(i);
		}
		public FuncContext[] func() {
			return GetRuleContexts<FuncContext>();
		}
		public FuncContext func(int i) {
			return GetRuleContext<FuncContext>(i);
		}
		public FileContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_file; } }
		public override void EnterRule(IParseTreeListener listener) {
			IJassListener typedListener = listener as IJassListener;
			if (typedListener != null) typedListener.EnterFile(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IJassListener typedListener = listener as IJassListener;
			if (typedListener != null) typedListener.ExitFile(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJassVisitor<TResult> typedVisitor = visitor as IJassVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFile(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FileContext file() {
		FileContext _localctx = new FileContext(Context, State);
		EnterRule(_localctx, 0, RULE_file);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 67;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==NEWLINE) {
				{
				State = 66; Match(NEWLINE);
				}
			}

			State = 74;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,1,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 69; declr();
					State = 70; Match(NEWLINE);
					}
					} 
				}
				State = 76;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,1,Context);
			}
			State = 80;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==K_FUNCTION || _la==K_CONSTANT) {
				{
				{
				State = 77; func();
				}
				}
				State = 82;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DeclrContext : ParserRuleContext {
		public TypedefContext typedef() {
			return GetRuleContext<TypedefContext>(0);
		}
		public GlobalsContext globals() {
			return GetRuleContext<GlobalsContext>(0);
		}
		public Native_funcContext native_func() {
			return GetRuleContext<Native_funcContext>(0);
		}
		public DeclrContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_declr; } }
		public override void EnterRule(IParseTreeListener listener) {
			IJassListener typedListener = listener as IJassListener;
			if (typedListener != null) typedListener.EnterDeclr(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IJassListener typedListener = listener as IJassListener;
			if (typedListener != null) typedListener.ExitDeclr(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJassVisitor<TResult> typedVisitor = visitor as IJassVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDeclr(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DeclrContext declr() {
		DeclrContext _localctx = new DeclrContext(Context, State);
		EnterRule(_localctx, 2, RULE_declr);
		try {
			State = 86;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case K_TYPE:
				EnterOuterAlt(_localctx, 1);
				{
				State = 83; typedef();
				}
				break;
			case K_GLOBALS:
				EnterOuterAlt(_localctx, 2);
				{
				State = 84; globals();
				}
				break;
			case K_CONSTANT:
			case K_NATIVE:
				EnterOuterAlt(_localctx, 3);
				{
				State = 85; native_func();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TypedefContext : ParserRuleContext {
		public ITerminalNode K_TYPE() { return GetToken(JassParser.K_TYPE, 0); }
		public ITerminalNode[] ID() { return GetTokens(JassParser.ID); }
		public ITerminalNode ID(int i) {
			return GetToken(JassParser.ID, i);
		}
		public ITerminalNode K_EXTENDS() { return GetToken(JassParser.K_EXTENDS, 0); }
		public ITerminalNode K_HANDLE() { return GetToken(JassParser.K_HANDLE, 0); }
		public TypedefContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_typedef; } }
		public override void EnterRule(IParseTreeListener listener) {
			IJassListener typedListener = listener as IJassListener;
			if (typedListener != null) typedListener.EnterTypedef(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IJassListener typedListener = listener as IJassListener;
			if (typedListener != null) typedListener.ExitTypedef(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJassVisitor<TResult> typedVisitor = visitor as IJassVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTypedef(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TypedefContext typedef() {
		TypedefContext _localctx = new TypedefContext(Context, State);
		EnterRule(_localctx, 4, RULE_typedef);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 88; Match(K_TYPE);
			State = 89; Match(ID);
			State = 90; Match(K_EXTENDS);
			State = 91;
			_la = TokenStream.LA(1);
			if ( !(_la==K_HANDLE || _la==ID) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class GlobalsContext : ParserRuleContext {
		public ITerminalNode K_GLOBALS() { return GetToken(JassParser.K_GLOBALS, 0); }
		public ITerminalNode NEWLINE() { return GetToken(JassParser.NEWLINE, 0); }
		public Global_var_listContext global_var_list() {
			return GetRuleContext<Global_var_listContext>(0);
		}
		public ITerminalNode K_ENDGLOBALS() { return GetToken(JassParser.K_ENDGLOBALS, 0); }
		public GlobalsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_globals; } }
		public override void EnterRule(IParseTreeListener listener) {
			IJassListener typedListener = listener as IJassListener;
			if (typedListener != null) typedListener.EnterGlobals(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IJassListener typedListener = listener as IJassListener;
			if (typedListener != null) typedListener.ExitGlobals(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJassVisitor<TResult> typedVisitor = visitor as IJassVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitGlobals(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public GlobalsContext globals() {
		GlobalsContext _localctx = new GlobalsContext(Context, State);
		EnterRule(_localctx, 6, RULE_globals);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 93; Match(K_GLOBALS);
			State = 94; Match(NEWLINE);
			State = 95; global_var_list();
			State = 96; Match(K_ENDGLOBALS);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Global_var_listContext : ParserRuleContext {
		public Global_var_declrContext[] global_var_declr() {
			return GetRuleContexts<Global_var_declrContext>();
		}
		public Global_var_declrContext global_var_declr(int i) {
			return GetRuleContext<Global_var_declrContext>(i);
		}
		public ITerminalNode[] NEWLINE() { return GetTokens(JassParser.NEWLINE); }
		public ITerminalNode NEWLINE(int i) {
			return GetToken(JassParser.NEWLINE, i);
		}
		public Var_declrContext[] var_declr() {
			return GetRuleContexts<Var_declrContext>();
		}
		public Var_declrContext var_declr(int i) {
			return GetRuleContext<Var_declrContext>(i);
		}
		public Global_var_listContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_global_var_list; } }
		public override void EnterRule(IParseTreeListener listener) {
			IJassListener typedListener = listener as IJassListener;
			if (typedListener != null) typedListener.EnterGlobal_var_list(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IJassListener typedListener = listener as IJassListener;
			if (typedListener != null) typedListener.ExitGlobal_var_list(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJassVisitor<TResult> typedVisitor = visitor as IJassVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitGlobal_var_list(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Global_var_listContext global_var_list() {
		Global_var_listContext _localctx = new Global_var_listContext(Context, State);
		EnterRule(_localctx, 8, RULE_global_var_list);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 106;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << K_CODE) | (1L << K_HANDLE) | (1L << K_INTEGER) | (1L << K_REAL) | (1L << K_BOOLEAN) | (1L << K_STRING) | (1L << K_CONSTANT) | (1L << ID))) != 0)) {
				{
				State = 104;
				ErrorHandler.Sync(this);
				switch (TokenStream.LA(1)) {
				case K_CONSTANT:
					{
					State = 98; global_var_declr();
					State = 99; Match(NEWLINE);
					}
					break;
				case K_CODE:
				case K_HANDLE:
				case K_INTEGER:
				case K_REAL:
				case K_BOOLEAN:
				case K_STRING:
				case ID:
					{
					State = 101; var_declr();
					State = 102; Match(NEWLINE);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				State = 108;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Global_var_declrContext : ParserRuleContext {
		public ITerminalNode K_CONSTANT() { return GetToken(JassParser.K_CONSTANT, 0); }
		public TypeContext type() {
			return GetRuleContext<TypeContext>(0);
		}
		public ITerminalNode ID() { return GetToken(JassParser.ID, 0); }
		public ITerminalNode ASSIGN() { return GetToken(JassParser.ASSIGN, 0); }
		public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		public Global_var_declrContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_global_var_declr; } }
		public override void EnterRule(IParseTreeListener listener) {
			IJassListener typedListener = listener as IJassListener;
			if (typedListener != null) typedListener.EnterGlobal_var_declr(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IJassListener typedListener = listener as IJassListener;
			if (typedListener != null) typedListener.ExitGlobal_var_declr(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJassVisitor<TResult> typedVisitor = visitor as IJassVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitGlobal_var_declr(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Global_var_declrContext global_var_declr() {
		Global_var_declrContext _localctx = new Global_var_declrContext(Context, State);
		EnterRule(_localctx, 10, RULE_global_var_declr);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 109; Match(K_CONSTANT);
			State = 110; type();
			State = 111; Match(ID);
			State = 112; Match(ASSIGN);
			State = 113; expr(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Native_funcContext : ParserRuleContext {
		public ITerminalNode K_NATIVE() { return GetToken(JassParser.K_NATIVE, 0); }
		public Func_declrContext func_declr() {
			return GetRuleContext<Func_declrContext>(0);
		}
		public ITerminalNode K_CONSTANT() { return GetToken(JassParser.K_CONSTANT, 0); }
		public Native_funcContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_native_func; } }
		public override void EnterRule(IParseTreeListener listener) {
			IJassListener typedListener = listener as IJassListener;
			if (typedListener != null) typedListener.EnterNative_func(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IJassListener typedListener = listener as IJassListener;
			if (typedListener != null) typedListener.ExitNative_func(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJassVisitor<TResult> typedVisitor = visitor as IJassVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNative_func(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Native_funcContext native_func() {
		Native_funcContext _localctx = new Native_funcContext(Context, State);
		EnterRule(_localctx, 12, RULE_native_func);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 116;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==K_CONSTANT) {
				{
				State = 115; Match(K_CONSTANT);
				}
			}

			State = 118; Match(K_NATIVE);
			State = 119; func_declr();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Func_declrContext : ParserRuleContext {
		public ITerminalNode ID() { return GetToken(JassParser.ID, 0); }
		public ITerminalNode K_TAKES() { return GetToken(JassParser.K_TAKES, 0); }
		public ITerminalNode K_RETURNS() { return GetToken(JassParser.K_RETURNS, 0); }
		public ITerminalNode[] K_NOTHING() { return GetTokens(JassParser.K_NOTHING); }
		public ITerminalNode K_NOTHING(int i) {
			return GetToken(JassParser.K_NOTHING, i);
		}
		public Param_listContext param_list() {
			return GetRuleContext<Param_listContext>(0);
		}
		public TypeContext type() {
			return GetRuleContext<TypeContext>(0);
		}
		public Func_declrContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_func_declr; } }
		public override void EnterRule(IParseTreeListener listener) {
			IJassListener typedListener = listener as IJassListener;
			if (typedListener != null) typedListener.EnterFunc_declr(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IJassListener typedListener = listener as IJassListener;
			if (typedListener != null) typedListener.ExitFunc_declr(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJassVisitor<TResult> typedVisitor = visitor as IJassVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFunc_declr(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Func_declrContext func_declr() {
		Func_declrContext _localctx = new Func_declrContext(Context, State);
		EnterRule(_localctx, 14, RULE_func_declr);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 121; Match(ID);
			State = 122; Match(K_TAKES);
			State = 125;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case K_NOTHING:
				{
				State = 123; Match(K_NOTHING);
				}
				break;
			case K_CODE:
			case K_HANDLE:
			case K_INTEGER:
			case K_REAL:
			case K_BOOLEAN:
			case K_STRING:
			case ID:
				{
				State = 124; param_list();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			State = 127; Match(K_RETURNS);
			State = 130;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case K_CODE:
			case K_HANDLE:
			case K_INTEGER:
			case K_REAL:
			case K_BOOLEAN:
			case K_STRING:
			case ID:
				{
				State = 128; type();
				}
				break;
			case K_NOTHING:
				{
				State = 129; Match(K_NOTHING);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Param_listContext : ParserRuleContext {
		public TypeContext[] type() {
			return GetRuleContexts<TypeContext>();
		}
		public TypeContext type(int i) {
			return GetRuleContext<TypeContext>(i);
		}
		public ITerminalNode[] ID() { return GetTokens(JassParser.ID); }
		public ITerminalNode ID(int i) {
			return GetToken(JassParser.ID, i);
		}
		public ITerminalNode[] COMMA() { return GetTokens(JassParser.COMMA); }
		public ITerminalNode COMMA(int i) {
			return GetToken(JassParser.COMMA, i);
		}
		public Param_listContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_param_list; } }
		public override void EnterRule(IParseTreeListener listener) {
			IJassListener typedListener = listener as IJassListener;
			if (typedListener != null) typedListener.EnterParam_list(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IJassListener typedListener = listener as IJassListener;
			if (typedListener != null) typedListener.ExitParam_list(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJassVisitor<TResult> typedVisitor = visitor as IJassVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitParam_list(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Param_listContext param_list() {
		Param_listContext _localctx = new Param_listContext(Context, State);
		EnterRule(_localctx, 16, RULE_param_list);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 132; type();
			State = 133; Match(ID);
			State = 140;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA) {
				{
				{
				State = 134; Match(COMMA);
				State = 135; type();
				State = 136; Match(ID);
				}
				}
				State = 142;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FuncContext : ParserRuleContext {
		public ITerminalNode K_FUNCTION() { return GetToken(JassParser.K_FUNCTION, 0); }
		public Func_declrContext func_declr() {
			return GetRuleContext<Func_declrContext>(0);
		}
		public ITerminalNode[] NEWLINE() { return GetTokens(JassParser.NEWLINE); }
		public ITerminalNode NEWLINE(int i) {
			return GetToken(JassParser.NEWLINE, i);
		}
		public Local_var_listContext local_var_list() {
			return GetRuleContext<Local_var_listContext>(0);
		}
		public Statement_listContext statement_list() {
			return GetRuleContext<Statement_listContext>(0);
		}
		public ITerminalNode K_ENDFUNCTION() { return GetToken(JassParser.K_ENDFUNCTION, 0); }
		public ITerminalNode K_CONSTANT() { return GetToken(JassParser.K_CONSTANT, 0); }
		public FuncContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_func; } }
		public override void EnterRule(IParseTreeListener listener) {
			IJassListener typedListener = listener as IJassListener;
			if (typedListener != null) typedListener.EnterFunc(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IJassListener typedListener = listener as IJassListener;
			if (typedListener != null) typedListener.ExitFunc(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJassVisitor<TResult> typedVisitor = visitor as IJassVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFunc(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FuncContext func() {
		FuncContext _localctx = new FuncContext(Context, State);
		EnterRule(_localctx, 18, RULE_func);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 144;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==K_CONSTANT) {
				{
				State = 143; Match(K_CONSTANT);
				}
			}

			State = 146; Match(K_FUNCTION);
			State = 147; func_declr();
			State = 148; Match(NEWLINE);
			State = 149; local_var_list();
			State = 150; statement_list();
			State = 151; Match(K_ENDFUNCTION);
			State = 152; Match(NEWLINE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Local_var_listContext : ParserRuleContext {
		public Local_var_declrContext[] local_var_declr() {
			return GetRuleContexts<Local_var_declrContext>();
		}
		public Local_var_declrContext local_var_declr(int i) {
			return GetRuleContext<Local_var_declrContext>(i);
		}
		public Local_var_listContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_local_var_list; } }
		public override void EnterRule(IParseTreeListener listener) {
			IJassListener typedListener = listener as IJassListener;
			if (typedListener != null) typedListener.EnterLocal_var_list(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IJassListener typedListener = listener as IJassListener;
			if (typedListener != null) typedListener.ExitLocal_var_list(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJassVisitor<TResult> typedVisitor = visitor as IJassVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLocal_var_list(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Local_var_listContext local_var_list() {
		Local_var_listContext _localctx = new Local_var_listContext(Context, State);
		EnterRule(_localctx, 20, RULE_local_var_list);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 157;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==K_LOCAL) {
				{
				{
				State = 154; local_var_declr();
				}
				}
				State = 159;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Local_var_declrContext : ParserRuleContext {
		public ITerminalNode K_LOCAL() { return GetToken(JassParser.K_LOCAL, 0); }
		public Var_declrContext var_declr() {
			return GetRuleContext<Var_declrContext>(0);
		}
		public ITerminalNode NEWLINE() { return GetToken(JassParser.NEWLINE, 0); }
		public Local_var_declrContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_local_var_declr; } }
		public override void EnterRule(IParseTreeListener listener) {
			IJassListener typedListener = listener as IJassListener;
			if (typedListener != null) typedListener.EnterLocal_var_declr(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IJassListener typedListener = listener as IJassListener;
			if (typedListener != null) typedListener.ExitLocal_var_declr(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJassVisitor<TResult> typedVisitor = visitor as IJassVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLocal_var_declr(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Local_var_declrContext local_var_declr() {
		Local_var_declrContext _localctx = new Local_var_declrContext(Context, State);
		EnterRule(_localctx, 22, RULE_local_var_declr);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 160; Match(K_LOCAL);
			State = 161; var_declr();
			State = 162; Match(NEWLINE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Var_declrContext : ParserRuleContext {
		public TypeContext type() {
			return GetRuleContext<TypeContext>(0);
		}
		public ITerminalNode ID() { return GetToken(JassParser.ID, 0); }
		public ITerminalNode ASSIGN() { return GetToken(JassParser.ASSIGN, 0); }
		public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		public ITerminalNode K_ARRAY() { return GetToken(JassParser.K_ARRAY, 0); }
		public Var_declrContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_var_declr; } }
		public override void EnterRule(IParseTreeListener listener) {
			IJassListener typedListener = listener as IJassListener;
			if (typedListener != null) typedListener.EnterVar_declr(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IJassListener typedListener = listener as IJassListener;
			if (typedListener != null) typedListener.ExitVar_declr(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJassVisitor<TResult> typedVisitor = visitor as IJassVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitVar_declr(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Var_declrContext var_declr() {
		Var_declrContext _localctx = new Var_declrContext(Context, State);
		EnterRule(_localctx, 24, RULE_var_declr);
		int _la;
		try {
			State = 174;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,13,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 164; type();
				State = 165; Match(ID);
				State = 168;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==ASSIGN) {
					{
					State = 166; Match(ASSIGN);
					State = 167; expr(0);
					}
				}

				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 170; type();
				State = 171; Match(K_ARRAY);
				State = 172; Match(ID);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Statement_listContext : ParserRuleContext {
		public StatementContext[] statement() {
			return GetRuleContexts<StatementContext>();
		}
		public StatementContext statement(int i) {
			return GetRuleContext<StatementContext>(i);
		}
		public ITerminalNode[] NEWLINE() { return GetTokens(JassParser.NEWLINE); }
		public ITerminalNode NEWLINE(int i) {
			return GetToken(JassParser.NEWLINE, i);
		}
		public Statement_listContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_statement_list; } }
		public override void EnterRule(IParseTreeListener listener) {
			IJassListener typedListener = listener as IJassListener;
			if (typedListener != null) typedListener.EnterStatement_list(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IJassListener typedListener = listener as IJassListener;
			if (typedListener != null) typedListener.ExitStatement_list(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJassVisitor<TResult> typedVisitor = visitor as IJassVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStatement_list(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Statement_listContext statement_list() {
		Statement_listContext _localctx = new Statement_listContext(Context, State);
		EnterRule(_localctx, 26, RULE_statement_list);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 181;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << K_RETURN) | (1L << K_EXITWHEN) | (1L << K_LOOP) | (1L << K_CALL) | (1L << K_IF) | (1L << K_DEBUG) | (1L << K_SET))) != 0)) {
				{
				{
				State = 176; statement();
				State = 177; Match(NEWLINE);
				}
				}
				State = 183;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StatementContext : ParserRuleContext {
		public SetContext set() {
			return GetRuleContext<SetContext>(0);
		}
		public CallContext call() {
			return GetRuleContext<CallContext>(0);
		}
		public IfthenelseContext ifthenelse() {
			return GetRuleContext<IfthenelseContext>(0);
		}
		public LoopContext loop() {
			return GetRuleContext<LoopContext>(0);
		}
		public ExitwhenContext exitwhen() {
			return GetRuleContext<ExitwhenContext>(0);
		}
		public Return_statContext return_stat() {
			return GetRuleContext<Return_statContext>(0);
		}
		public DebugContext debug() {
			return GetRuleContext<DebugContext>(0);
		}
		public StatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_statement; } }
		public override void EnterRule(IParseTreeListener listener) {
			IJassListener typedListener = listener as IJassListener;
			if (typedListener != null) typedListener.EnterStatement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IJassListener typedListener = listener as IJassListener;
			if (typedListener != null) typedListener.ExitStatement(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJassVisitor<TResult> typedVisitor = visitor as IJassVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public StatementContext statement() {
		StatementContext _localctx = new StatementContext(Context, State);
		EnterRule(_localctx, 28, RULE_statement);
		try {
			State = 191;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case K_SET:
				EnterOuterAlt(_localctx, 1);
				{
				State = 184; set();
				}
				break;
			case K_CALL:
				EnterOuterAlt(_localctx, 2);
				{
				State = 185; call();
				}
				break;
			case K_IF:
				EnterOuterAlt(_localctx, 3);
				{
				State = 186; ifthenelse();
				}
				break;
			case K_LOOP:
				EnterOuterAlt(_localctx, 4);
				{
				State = 187; loop();
				}
				break;
			case K_EXITWHEN:
				EnterOuterAlt(_localctx, 5);
				{
				State = 188; exitwhen();
				}
				break;
			case K_RETURN:
				EnterOuterAlt(_localctx, 6);
				{
				State = 189; return_stat();
				}
				break;
			case K_DEBUG:
				EnterOuterAlt(_localctx, 7);
				{
				State = 190; debug();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SetContext : ParserRuleContext {
		public ITerminalNode K_SET() { return GetToken(JassParser.K_SET, 0); }
		public ITerminalNode ID() { return GetToken(JassParser.ID, 0); }
		public ITerminalNode ASSIGN() { return GetToken(JassParser.ASSIGN, 0); }
		public ExprContext[] expr() {
			return GetRuleContexts<ExprContext>();
		}
		public ExprContext expr(int i) {
			return GetRuleContext<ExprContext>(i);
		}
		public ITerminalNode O_BRACK() { return GetToken(JassParser.O_BRACK, 0); }
		public ITerminalNode C_BRACK() { return GetToken(JassParser.C_BRACK, 0); }
		public SetContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_set; } }
		public override void EnterRule(IParseTreeListener listener) {
			IJassListener typedListener = listener as IJassListener;
			if (typedListener != null) typedListener.EnterSet(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IJassListener typedListener = listener as IJassListener;
			if (typedListener != null) typedListener.ExitSet(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJassVisitor<TResult> typedVisitor = visitor as IJassVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSet(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SetContext set() {
		SetContext _localctx = new SetContext(Context, State);
		EnterRule(_localctx, 30, RULE_set);
		try {
			State = 205;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,16,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 193; Match(K_SET);
				State = 194; Match(ID);
				State = 195; Match(ASSIGN);
				State = 196; expr(0);
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 197; Match(K_SET);
				State = 198; Match(ID);
				State = 199; Match(O_BRACK);
				State = 200; expr(0);
				State = 201; Match(C_BRACK);
				State = 202; Match(ASSIGN);
				State = 203; expr(0);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CallContext : ParserRuleContext {
		public ITerminalNode K_CALL() { return GetToken(JassParser.K_CALL, 0); }
		public ITerminalNode ID() { return GetToken(JassParser.ID, 0); }
		public ITerminalNode O_PAR() { return GetToken(JassParser.O_PAR, 0); }
		public ITerminalNode C_PAR() { return GetToken(JassParser.C_PAR, 0); }
		public ArgsContext args() {
			return GetRuleContext<ArgsContext>(0);
		}
		public CallContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_call; } }
		public override void EnterRule(IParseTreeListener listener) {
			IJassListener typedListener = listener as IJassListener;
			if (typedListener != null) typedListener.EnterCall(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IJassListener typedListener = listener as IJassListener;
			if (typedListener != null) typedListener.ExitCall(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJassVisitor<TResult> typedVisitor = visitor as IJassVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCall(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public CallContext call() {
		CallContext _localctx = new CallContext(Context, State);
		EnterRule(_localctx, 32, RULE_call);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 207; Match(K_CALL);
			State = 208; Match(ID);
			State = 209; Match(O_PAR);
			State = 211;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << K_TRUE) | (1L << K_FALSE) | (1L << K_NULL) | (1L << K_NOT) | (1L << K_FUNCTION) | (1L << ADD) | (1L << SUB) | (1L << O_PAR) | (1L << DECIMAL) | (1L << OCTAL) | (1L << HEX) | (1L << FOURCC) | (1L << REAL_CONST) | (1L << STRING_CONST) | (1L << ID))) != 0)) {
				{
				State = 210; args();
				}
			}

			State = 213; Match(C_PAR);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ArgsContext : ParserRuleContext {
		public ExprContext[] expr() {
			return GetRuleContexts<ExprContext>();
		}
		public ExprContext expr(int i) {
			return GetRuleContext<ExprContext>(i);
		}
		public ITerminalNode[] COMMA() { return GetTokens(JassParser.COMMA); }
		public ITerminalNode COMMA(int i) {
			return GetToken(JassParser.COMMA, i);
		}
		public ArgsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_args; } }
		public override void EnterRule(IParseTreeListener listener) {
			IJassListener typedListener = listener as IJassListener;
			if (typedListener != null) typedListener.EnterArgs(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IJassListener typedListener = listener as IJassListener;
			if (typedListener != null) typedListener.ExitArgs(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJassVisitor<TResult> typedVisitor = visitor as IJassVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitArgs(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ArgsContext args() {
		ArgsContext _localctx = new ArgsContext(Context, State);
		EnterRule(_localctx, 34, RULE_args);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 215; expr(0);
			State = 220;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA) {
				{
				{
				State = 216; Match(COMMA);
				State = 217; expr(0);
				}
				}
				State = 222;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IfthenelseContext : ParserRuleContext {
		public ITerminalNode K_IF() { return GetToken(JassParser.K_IF, 0); }
		public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		public ITerminalNode K_THEN() { return GetToken(JassParser.K_THEN, 0); }
		public ITerminalNode NEWLINE() { return GetToken(JassParser.NEWLINE, 0); }
		public Statement_listContext statement_list() {
			return GetRuleContext<Statement_listContext>(0);
		}
		public ITerminalNode K_ENDIF() { return GetToken(JassParser.K_ENDIF, 0); }
		public Else_clauseContext else_clause() {
			return GetRuleContext<Else_clauseContext>(0);
		}
		public IfthenelseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_ifthenelse; } }
		public override void EnterRule(IParseTreeListener listener) {
			IJassListener typedListener = listener as IJassListener;
			if (typedListener != null) typedListener.EnterIfthenelse(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IJassListener typedListener = listener as IJassListener;
			if (typedListener != null) typedListener.ExitIfthenelse(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJassVisitor<TResult> typedVisitor = visitor as IJassVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIfthenelse(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public IfthenelseContext ifthenelse() {
		IfthenelseContext _localctx = new IfthenelseContext(Context, State);
		EnterRule(_localctx, 36, RULE_ifthenelse);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 223; Match(K_IF);
			State = 224; expr(0);
			State = 225; Match(K_THEN);
			State = 226; Match(NEWLINE);
			State = 227; statement_list();
			State = 229;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==K_ELSEIF || _la==K_ELSE) {
				{
				State = 228; else_clause();
				}
			}

			State = 231; Match(K_ENDIF);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Else_clauseContext : ParserRuleContext {
		public ITerminalNode K_ELSE() { return GetToken(JassParser.K_ELSE, 0); }
		public ITerminalNode NEWLINE() { return GetToken(JassParser.NEWLINE, 0); }
		public Statement_listContext statement_list() {
			return GetRuleContext<Statement_listContext>(0);
		}
		public ITerminalNode K_ELSEIF() { return GetToken(JassParser.K_ELSEIF, 0); }
		public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		public ITerminalNode K_THEN() { return GetToken(JassParser.K_THEN, 0); }
		public Else_clauseContext else_clause() {
			return GetRuleContext<Else_clauseContext>(0);
		}
		public Else_clauseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_else_clause; } }
		public override void EnterRule(IParseTreeListener listener) {
			IJassListener typedListener = listener as IJassListener;
			if (typedListener != null) typedListener.EnterElse_clause(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IJassListener typedListener = listener as IJassListener;
			if (typedListener != null) typedListener.ExitElse_clause(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJassVisitor<TResult> typedVisitor = visitor as IJassVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitElse_clause(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Else_clauseContext else_clause() {
		Else_clauseContext _localctx = new Else_clauseContext(Context, State);
		EnterRule(_localctx, 38, RULE_else_clause);
		int _la;
		try {
			State = 244;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case K_ELSE:
				EnterOuterAlt(_localctx, 1);
				{
				State = 233; Match(K_ELSE);
				State = 234; Match(NEWLINE);
				State = 235; statement_list();
				}
				break;
			case K_ELSEIF:
				EnterOuterAlt(_localctx, 2);
				{
				State = 236; Match(K_ELSEIF);
				State = 237; expr(0);
				State = 238; Match(K_THEN);
				State = 239; Match(NEWLINE);
				State = 240; statement_list();
				State = 242;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==K_ELSEIF || _la==K_ELSE) {
					{
					State = 241; else_clause();
					}
				}

				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LoopContext : ParserRuleContext {
		public ITerminalNode K_LOOP() { return GetToken(JassParser.K_LOOP, 0); }
		public ITerminalNode NEWLINE() { return GetToken(JassParser.NEWLINE, 0); }
		public Statement_listContext statement_list() {
			return GetRuleContext<Statement_listContext>(0);
		}
		public ITerminalNode K_ENDLOOP() { return GetToken(JassParser.K_ENDLOOP, 0); }
		public LoopContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_loop; } }
		public override void EnterRule(IParseTreeListener listener) {
			IJassListener typedListener = listener as IJassListener;
			if (typedListener != null) typedListener.EnterLoop(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IJassListener typedListener = listener as IJassListener;
			if (typedListener != null) typedListener.ExitLoop(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJassVisitor<TResult> typedVisitor = visitor as IJassVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLoop(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public LoopContext loop() {
		LoopContext _localctx = new LoopContext(Context, State);
		EnterRule(_localctx, 40, RULE_loop);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 246; Match(K_LOOP);
			State = 247; Match(NEWLINE);
			State = 248; statement_list();
			State = 249; Match(K_ENDLOOP);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExitwhenContext : ParserRuleContext {
		public ITerminalNode K_EXITWHEN() { return GetToken(JassParser.K_EXITWHEN, 0); }
		public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		public ExitwhenContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_exitwhen; } }
		public override void EnterRule(IParseTreeListener listener) {
			IJassListener typedListener = listener as IJassListener;
			if (typedListener != null) typedListener.EnterExitwhen(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IJassListener typedListener = listener as IJassListener;
			if (typedListener != null) typedListener.ExitExitwhen(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJassVisitor<TResult> typedVisitor = visitor as IJassVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExitwhen(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ExitwhenContext exitwhen() {
		ExitwhenContext _localctx = new ExitwhenContext(Context, State);
		EnterRule(_localctx, 42, RULE_exitwhen);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 251; Match(K_EXITWHEN);
			State = 252; expr(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Return_statContext : ParserRuleContext {
		public ITerminalNode K_RETURN() { return GetToken(JassParser.K_RETURN, 0); }
		public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		public Return_statContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_return_stat; } }
		public override void EnterRule(IParseTreeListener listener) {
			IJassListener typedListener = listener as IJassListener;
			if (typedListener != null) typedListener.EnterReturn_stat(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IJassListener typedListener = listener as IJassListener;
			if (typedListener != null) typedListener.ExitReturn_stat(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJassVisitor<TResult> typedVisitor = visitor as IJassVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitReturn_stat(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Return_statContext return_stat() {
		Return_statContext _localctx = new Return_statContext(Context, State);
		EnterRule(_localctx, 44, RULE_return_stat);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 254; Match(K_RETURN);
			State = 256;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << K_TRUE) | (1L << K_FALSE) | (1L << K_NULL) | (1L << K_NOT) | (1L << K_FUNCTION) | (1L << ADD) | (1L << SUB) | (1L << O_PAR) | (1L << DECIMAL) | (1L << OCTAL) | (1L << HEX) | (1L << FOURCC) | (1L << REAL_CONST) | (1L << STRING_CONST) | (1L << ID))) != 0)) {
				{
				State = 255; expr(0);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DebugContext : ParserRuleContext {
		public ITerminalNode K_DEBUG() { return GetToken(JassParser.K_DEBUG, 0); }
		public SetContext set() {
			return GetRuleContext<SetContext>(0);
		}
		public CallContext call() {
			return GetRuleContext<CallContext>(0);
		}
		public IfthenelseContext ifthenelse() {
			return GetRuleContext<IfthenelseContext>(0);
		}
		public LoopContext loop() {
			return GetRuleContext<LoopContext>(0);
		}
		public DebugContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_debug; } }
		public override void EnterRule(IParseTreeListener listener) {
			IJassListener typedListener = listener as IJassListener;
			if (typedListener != null) typedListener.EnterDebug(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IJassListener typedListener = listener as IJassListener;
			if (typedListener != null) typedListener.ExitDebug(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJassVisitor<TResult> typedVisitor = visitor as IJassVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDebug(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DebugContext debug() {
		DebugContext _localctx = new DebugContext(Context, State);
		EnterRule(_localctx, 46, RULE_debug);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 258; Match(K_DEBUG);
			State = 263;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case K_SET:
				{
				State = 259; set();
				}
				break;
			case K_CALL:
				{
				State = 260; call();
				}
				break;
			case K_IF:
				{
				State = 261; ifthenelse();
				}
				break;
			case K_LOOP:
				{
				State = 262; loop();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExprContext : ParserRuleContext {
		public ITerminalNode ADD() { return GetToken(JassParser.ADD, 0); }
		public ExprContext[] expr() {
			return GetRuleContexts<ExprContext>();
		}
		public ExprContext expr(int i) {
			return GetRuleContext<ExprContext>(i);
		}
		public ITerminalNode SUB() { return GetToken(JassParser.SUB, 0); }
		public ITerminalNode K_NOT() { return GetToken(JassParser.K_NOT, 0); }
		public Func_callContext func_call() {
			return GetRuleContext<Func_callContext>(0);
		}
		public Array_refContext array_ref() {
			return GetRuleContext<Array_refContext>(0);
		}
		public Func_refContext func_ref() {
			return GetRuleContext<Func_refContext>(0);
		}
		public ITerminalNode ID() { return GetToken(JassParser.ID, 0); }
		public ConstantContext constant() {
			return GetRuleContext<ConstantContext>(0);
		}
		public ParensContext parens() {
			return GetRuleContext<ParensContext>(0);
		}
		public ITerminalNode MULT() { return GetToken(JassParser.MULT, 0); }
		public ITerminalNode DIV() { return GetToken(JassParser.DIV, 0); }
		public ITerminalNode GT() { return GetToken(JassParser.GT, 0); }
		public ITerminalNode LT() { return GetToken(JassParser.LT, 0); }
		public ITerminalNode GTEQ() { return GetToken(JassParser.GTEQ, 0); }
		public ITerminalNode LTEQ() { return GetToken(JassParser.LTEQ, 0); }
		public ITerminalNode EQ() { return GetToken(JassParser.EQ, 0); }
		public ITerminalNode NEQ() { return GetToken(JassParser.NEQ, 0); }
		public ITerminalNode K_AND() { return GetToken(JassParser.K_AND, 0); }
		public ITerminalNode K_OR() { return GetToken(JassParser.K_OR, 0); }
		public ExprContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_expr; } }
		public override void EnterRule(IParseTreeListener listener) {
			IJassListener typedListener = listener as IJassListener;
			if (typedListener != null) typedListener.EnterExpr(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IJassListener typedListener = listener as IJassListener;
			if (typedListener != null) typedListener.ExitExpr(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJassVisitor<TResult> typedVisitor = visitor as IJassVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExpr(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ExprContext expr() {
		return expr(0);
	}

	private ExprContext expr(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		ExprContext _localctx = new ExprContext(Context, _parentState);
		ExprContext _prevctx = _localctx;
		int _startState = 48;
		EnterRecursionRule(_localctx, 48, RULE_expr, _p);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 278;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,24,Context) ) {
			case 1:
				{
				State = 266; Match(ADD);
				State = 267; expr(14);
				}
				break;
			case 2:
				{
				State = 268; Match(SUB);
				State = 269; expr(13);
				}
				break;
			case 3:
				{
				State = 270; Match(K_NOT);
				State = 271; expr(12);
				}
				break;
			case 4:
				{
				State = 272; func_call();
				}
				break;
			case 5:
				{
				State = 273; array_ref();
				}
				break;
			case 6:
				{
				State = 274; func_ref();
				}
				break;
			case 7:
				{
				State = 275; Match(ID);
				}
				break;
			case 8:
				{
				State = 276; constant();
				}
				break;
			case 9:
				{
				State = 277; parens();
				}
				break;
			}
			Context.Stop = TokenStream.LT(-1);
			State = 297;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,26,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					State = 295;
					ErrorHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(TokenStream,25,Context) ) {
					case 1:
						{
						_localctx = new ExprContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_expr);
						State = 280;
						if (!(Precpred(Context, 11))) throw new FailedPredicateException(this, "Precpred(Context, 11)");
						State = 281;
						_la = TokenStream.LA(1);
						if ( !(_la==MULT || _la==DIV) ) {
						ErrorHandler.RecoverInline(this);
						}
						else {
							ErrorHandler.ReportMatch(this);
						    Consume();
						}
						State = 282; expr(12);
						}
						break;
					case 2:
						{
						_localctx = new ExprContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_expr);
						State = 283;
						if (!(Precpred(Context, 10))) throw new FailedPredicateException(this, "Precpred(Context, 10)");
						State = 284;
						_la = TokenStream.LA(1);
						if ( !(_la==ADD || _la==SUB) ) {
						ErrorHandler.RecoverInline(this);
						}
						else {
							ErrorHandler.ReportMatch(this);
						    Consume();
						}
						State = 285; expr(11);
						}
						break;
					case 3:
						{
						_localctx = new ExprContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_expr);
						State = 286;
						if (!(Precpred(Context, 9))) throw new FailedPredicateException(this, "Precpred(Context, 9)");
						State = 287;
						_la = TokenStream.LA(1);
						if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << GT) | (1L << LT) | (1L << GTEQ) | (1L << LTEQ))) != 0)) ) {
						ErrorHandler.RecoverInline(this);
						}
						else {
							ErrorHandler.ReportMatch(this);
						    Consume();
						}
						State = 288; expr(10);
						}
						break;
					case 4:
						{
						_localctx = new ExprContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_expr);
						State = 289;
						if (!(Precpred(Context, 8))) throw new FailedPredicateException(this, "Precpred(Context, 8)");
						State = 290;
						_la = TokenStream.LA(1);
						if ( !(_la==EQ || _la==NEQ) ) {
						ErrorHandler.RecoverInline(this);
						}
						else {
							ErrorHandler.ReportMatch(this);
						    Consume();
						}
						State = 291; expr(9);
						}
						break;
					case 5:
						{
						_localctx = new ExprContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_expr);
						State = 292;
						if (!(Precpred(Context, 7))) throw new FailedPredicateException(this, "Precpred(Context, 7)");
						State = 293;
						_la = TokenStream.LA(1);
						if ( !(_la==K_AND || _la==K_OR) ) {
						ErrorHandler.RecoverInline(this);
						}
						else {
							ErrorHandler.ReportMatch(this);
						    Consume();
						}
						State = 294; expr(8);
						}
						break;
					}
					} 
				}
				State = 299;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,26,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class Func_callContext : ParserRuleContext {
		public ITerminalNode ID() { return GetToken(JassParser.ID, 0); }
		public ITerminalNode O_PAR() { return GetToken(JassParser.O_PAR, 0); }
		public ITerminalNode C_PAR() { return GetToken(JassParser.C_PAR, 0); }
		public ArgsContext args() {
			return GetRuleContext<ArgsContext>(0);
		}
		public Func_callContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_func_call; } }
		public override void EnterRule(IParseTreeListener listener) {
			IJassListener typedListener = listener as IJassListener;
			if (typedListener != null) typedListener.EnterFunc_call(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IJassListener typedListener = listener as IJassListener;
			if (typedListener != null) typedListener.ExitFunc_call(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJassVisitor<TResult> typedVisitor = visitor as IJassVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFunc_call(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Func_callContext func_call() {
		Func_callContext _localctx = new Func_callContext(Context, State);
		EnterRule(_localctx, 50, RULE_func_call);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 300; Match(ID);
			State = 301; Match(O_PAR);
			State = 303;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << K_TRUE) | (1L << K_FALSE) | (1L << K_NULL) | (1L << K_NOT) | (1L << K_FUNCTION) | (1L << ADD) | (1L << SUB) | (1L << O_PAR) | (1L << DECIMAL) | (1L << OCTAL) | (1L << HEX) | (1L << FOURCC) | (1L << REAL_CONST) | (1L << STRING_CONST) | (1L << ID))) != 0)) {
				{
				State = 302; args();
				}
			}

			State = 305; Match(C_PAR);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Array_refContext : ParserRuleContext {
		public ITerminalNode ID() { return GetToken(JassParser.ID, 0); }
		public ITerminalNode O_BRACK() { return GetToken(JassParser.O_BRACK, 0); }
		public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		public ITerminalNode C_BRACK() { return GetToken(JassParser.C_BRACK, 0); }
		public Array_refContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_array_ref; } }
		public override void EnterRule(IParseTreeListener listener) {
			IJassListener typedListener = listener as IJassListener;
			if (typedListener != null) typedListener.EnterArray_ref(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IJassListener typedListener = listener as IJassListener;
			if (typedListener != null) typedListener.ExitArray_ref(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJassVisitor<TResult> typedVisitor = visitor as IJassVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitArray_ref(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Array_refContext array_ref() {
		Array_refContext _localctx = new Array_refContext(Context, State);
		EnterRule(_localctx, 52, RULE_array_ref);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 307; Match(ID);
			State = 308; Match(O_BRACK);
			State = 309; expr(0);
			State = 310; Match(C_BRACK);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Func_refContext : ParserRuleContext {
		public ITerminalNode K_FUNCTION() { return GetToken(JassParser.K_FUNCTION, 0); }
		public ITerminalNode ID() { return GetToken(JassParser.ID, 0); }
		public Func_refContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_func_ref; } }
		public override void EnterRule(IParseTreeListener listener) {
			IJassListener typedListener = listener as IJassListener;
			if (typedListener != null) typedListener.EnterFunc_ref(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IJassListener typedListener = listener as IJassListener;
			if (typedListener != null) typedListener.ExitFunc_ref(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJassVisitor<TResult> typedVisitor = visitor as IJassVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFunc_ref(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Func_refContext func_ref() {
		Func_refContext _localctx = new Func_refContext(Context, State);
		EnterRule(_localctx, 54, RULE_func_ref);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 312; Match(K_FUNCTION);
			State = 313; Match(ID);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ConstantContext : ParserRuleContext {
		public Int_constContext int_const() {
			return GetRuleContext<Int_constContext>(0);
		}
		public ITerminalNode REAL_CONST() { return GetToken(JassParser.REAL_CONST, 0); }
		public BoolConstContext boolConst() {
			return GetRuleContext<BoolConstContext>(0);
		}
		public ITerminalNode STRING_CONST() { return GetToken(JassParser.STRING_CONST, 0); }
		public ITerminalNode K_NULL() { return GetToken(JassParser.K_NULL, 0); }
		public ConstantContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_constant; } }
		public override void EnterRule(IParseTreeListener listener) {
			IJassListener typedListener = listener as IJassListener;
			if (typedListener != null) typedListener.EnterConstant(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IJassListener typedListener = listener as IJassListener;
			if (typedListener != null) typedListener.ExitConstant(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJassVisitor<TResult> typedVisitor = visitor as IJassVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitConstant(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ConstantContext constant() {
		ConstantContext _localctx = new ConstantContext(Context, State);
		EnterRule(_localctx, 56, RULE_constant);
		try {
			State = 320;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case DECIMAL:
			case OCTAL:
			case HEX:
			case FOURCC:
				EnterOuterAlt(_localctx, 1);
				{
				State = 315; int_const();
				}
				break;
			case REAL_CONST:
				EnterOuterAlt(_localctx, 2);
				{
				State = 316; Match(REAL_CONST);
				}
				break;
			case K_TRUE:
			case K_FALSE:
				EnterOuterAlt(_localctx, 3);
				{
				State = 317; boolConst();
				}
				break;
			case STRING_CONST:
				EnterOuterAlt(_localctx, 4);
				{
				State = 318; Match(STRING_CONST);
				}
				break;
			case K_NULL:
				EnterOuterAlt(_localctx, 5);
				{
				State = 319; Match(K_NULL);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Int_constContext : ParserRuleContext {
		public ITerminalNode DECIMAL() { return GetToken(JassParser.DECIMAL, 0); }
		public ITerminalNode OCTAL() { return GetToken(JassParser.OCTAL, 0); }
		public ITerminalNode HEX() { return GetToken(JassParser.HEX, 0); }
		public ITerminalNode FOURCC() { return GetToken(JassParser.FOURCC, 0); }
		public Int_constContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_int_const; } }
		public override void EnterRule(IParseTreeListener listener) {
			IJassListener typedListener = listener as IJassListener;
			if (typedListener != null) typedListener.EnterInt_const(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IJassListener typedListener = listener as IJassListener;
			if (typedListener != null) typedListener.ExitInt_const(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJassVisitor<TResult> typedVisitor = visitor as IJassVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitInt_const(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Int_constContext int_const() {
		Int_constContext _localctx = new Int_constContext(Context, State);
		EnterRule(_localctx, 58, RULE_int_const);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 322;
			_la = TokenStream.LA(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << DECIMAL) | (1L << OCTAL) | (1L << HEX) | (1L << FOURCC))) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ParensContext : ParserRuleContext {
		public ITerminalNode O_PAR() { return GetToken(JassParser.O_PAR, 0); }
		public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		public ITerminalNode C_PAR() { return GetToken(JassParser.C_PAR, 0); }
		public ParensContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_parens; } }
		public override void EnterRule(IParseTreeListener listener) {
			IJassListener typedListener = listener as IJassListener;
			if (typedListener != null) typedListener.EnterParens(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IJassListener typedListener = listener as IJassListener;
			if (typedListener != null) typedListener.ExitParens(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJassVisitor<TResult> typedVisitor = visitor as IJassVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitParens(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ParensContext parens() {
		ParensContext _localctx = new ParensContext(Context, State);
		EnterRule(_localctx, 60, RULE_parens);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 324; Match(O_PAR);
			State = 325; expr(0);
			State = 326; Match(C_PAR);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class BoolConstContext : ParserRuleContext {
		public ITerminalNode K_TRUE() { return GetToken(JassParser.K_TRUE, 0); }
		public ITerminalNode K_FALSE() { return GetToken(JassParser.K_FALSE, 0); }
		public BoolConstContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_boolConst; } }
		public override void EnterRule(IParseTreeListener listener) {
			IJassListener typedListener = listener as IJassListener;
			if (typedListener != null) typedListener.EnterBoolConst(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IJassListener typedListener = listener as IJassListener;
			if (typedListener != null) typedListener.ExitBoolConst(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJassVisitor<TResult> typedVisitor = visitor as IJassVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBoolConst(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public BoolConstContext boolConst() {
		BoolConstContext _localctx = new BoolConstContext(Context, State);
		EnterRule(_localctx, 62, RULE_boolConst);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 328;
			_la = TokenStream.LA(1);
			if ( !(_la==K_TRUE || _la==K_FALSE) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TypeContext : ParserRuleContext {
		public ITerminalNode ID() { return GetToken(JassParser.ID, 0); }
		public ITerminalNode K_CODE() { return GetToken(JassParser.K_CODE, 0); }
		public ITerminalNode K_HANDLE() { return GetToken(JassParser.K_HANDLE, 0); }
		public ITerminalNode K_INTEGER() { return GetToken(JassParser.K_INTEGER, 0); }
		public ITerminalNode K_REAL() { return GetToken(JassParser.K_REAL, 0); }
		public ITerminalNode K_BOOLEAN() { return GetToken(JassParser.K_BOOLEAN, 0); }
		public ITerminalNode K_STRING() { return GetToken(JassParser.K_STRING, 0); }
		public TypeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_type; } }
		public override void EnterRule(IParseTreeListener listener) {
			IJassListener typedListener = listener as IJassListener;
			if (typedListener != null) typedListener.EnterType(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IJassListener typedListener = listener as IJassListener;
			if (typedListener != null) typedListener.ExitType(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJassVisitor<TResult> typedVisitor = visitor as IJassVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitType(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TypeContext type() {
		TypeContext _localctx = new TypeContext(Context, State);
		EnterRule(_localctx, 64, RULE_type);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 330;
			_la = TokenStream.LA(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << K_CODE) | (1L << K_HANDLE) | (1L << K_INTEGER) | (1L << K_REAL) | (1L << K_BOOLEAN) | (1L << K_STRING) | (1L << ID))) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public override bool Sempred(RuleContext _localctx, int ruleIndex, int predIndex) {
		switch (ruleIndex) {
		case 24: return expr_sempred((ExprContext)_localctx, predIndex);
		}
		return true;
	}
	private bool expr_sempred(ExprContext _localctx, int predIndex) {
		switch (predIndex) {
		case 0: return Precpred(Context, 11);
		case 1: return Precpred(Context, 10);
		case 2: return Precpred(Context, 9);
		case 3: return Precpred(Context, 8);
		case 4: return Precpred(Context, 7);
		}
		return true;
	}

	private static char[] _serializedATN = {
		'\x3', '\x608B', '\xA72A', '\x8133', '\xB9ED', '\x417C', '\x3BE7', '\x7786', 
		'\x5964', '\x3', '\x41', '\x14F', '\x4', '\x2', '\t', '\x2', '\x4', '\x3', 
		'\t', '\x3', '\x4', '\x4', '\t', '\x4', '\x4', '\x5', '\t', '\x5', '\x4', 
		'\x6', '\t', '\x6', '\x4', '\a', '\t', '\a', '\x4', '\b', '\t', '\b', 
		'\x4', '\t', '\t', '\t', '\x4', '\n', '\t', '\n', '\x4', '\v', '\t', '\v', 
		'\x4', '\f', '\t', '\f', '\x4', '\r', '\t', '\r', '\x4', '\xE', '\t', 
		'\xE', '\x4', '\xF', '\t', '\xF', '\x4', '\x10', '\t', '\x10', '\x4', 
		'\x11', '\t', '\x11', '\x4', '\x12', '\t', '\x12', '\x4', '\x13', '\t', 
		'\x13', '\x4', '\x14', '\t', '\x14', '\x4', '\x15', '\t', '\x15', '\x4', 
		'\x16', '\t', '\x16', '\x4', '\x17', '\t', '\x17', '\x4', '\x18', '\t', 
		'\x18', '\x4', '\x19', '\t', '\x19', '\x4', '\x1A', '\t', '\x1A', '\x4', 
		'\x1B', '\t', '\x1B', '\x4', '\x1C', '\t', '\x1C', '\x4', '\x1D', '\t', 
		'\x1D', '\x4', '\x1E', '\t', '\x1E', '\x4', '\x1F', '\t', '\x1F', '\x4', 
		' ', '\t', ' ', '\x4', '!', '\t', '!', '\x4', '\"', '\t', '\"', '\x3', 
		'\x2', '\x5', '\x2', '\x46', '\n', '\x2', '\x3', '\x2', '\x3', '\x2', 
		'\x3', '\x2', '\a', '\x2', 'K', '\n', '\x2', '\f', '\x2', '\xE', '\x2', 
		'N', '\v', '\x2', '\x3', '\x2', '\a', '\x2', 'Q', '\n', '\x2', '\f', '\x2', 
		'\xE', '\x2', 'T', '\v', '\x2', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', 
		'\x5', '\x3', 'Y', '\n', '\x3', '\x3', '\x4', '\x3', '\x4', '\x3', '\x4', 
		'\x3', '\x4', '\x3', '\x4', '\x3', '\x5', '\x3', '\x5', '\x3', '\x5', 
		'\x3', '\x5', '\x3', '\x5', '\x3', '\x6', '\x3', '\x6', '\x3', '\x6', 
		'\x3', '\x6', '\x3', '\x6', '\x3', '\x6', '\a', '\x6', 'k', '\n', '\x6', 
		'\f', '\x6', '\xE', '\x6', 'n', '\v', '\x6', '\x3', '\a', '\x3', '\a', 
		'\x3', '\a', '\x3', '\a', '\x3', '\a', '\x3', '\a', '\x3', '\b', '\x5', 
		'\b', 'w', '\n', '\b', '\x3', '\b', '\x3', '\b', '\x3', '\b', '\x3', '\t', 
		'\x3', '\t', '\x3', '\t', '\x3', '\t', '\x5', '\t', '\x80', '\n', '\t', 
		'\x3', '\t', '\x3', '\t', '\x3', '\t', '\x5', '\t', '\x85', '\n', '\t', 
		'\x3', '\n', '\x3', '\n', '\x3', '\n', '\x3', '\n', '\x3', '\n', '\x3', 
		'\n', '\a', '\n', '\x8D', '\n', '\n', '\f', '\n', '\xE', '\n', '\x90', 
		'\v', '\n', '\x3', '\v', '\x5', '\v', '\x93', '\n', '\v', '\x3', '\v', 
		'\x3', '\v', '\x3', '\v', '\x3', '\v', '\x3', '\v', '\x3', '\v', '\x3', 
		'\v', '\x3', '\v', '\x3', '\f', '\a', '\f', '\x9E', '\n', '\f', '\f', 
		'\f', '\xE', '\f', '\xA1', '\v', '\f', '\x3', '\r', '\x3', '\r', '\x3', 
		'\r', '\x3', '\r', '\x3', '\xE', '\x3', '\xE', '\x3', '\xE', '\x3', '\xE', 
		'\x5', '\xE', '\xAB', '\n', '\xE', '\x3', '\xE', '\x3', '\xE', '\x3', 
		'\xE', '\x3', '\xE', '\x5', '\xE', '\xB1', '\n', '\xE', '\x3', '\xF', 
		'\x3', '\xF', '\x3', '\xF', '\a', '\xF', '\xB6', '\n', '\xF', '\f', '\xF', 
		'\xE', '\xF', '\xB9', '\v', '\xF', '\x3', '\x10', '\x3', '\x10', '\x3', 
		'\x10', '\x3', '\x10', '\x3', '\x10', '\x3', '\x10', '\x3', '\x10', '\x5', 
		'\x10', '\xC2', '\n', '\x10', '\x3', '\x11', '\x3', '\x11', '\x3', '\x11', 
		'\x3', '\x11', '\x3', '\x11', '\x3', '\x11', '\x3', '\x11', '\x3', '\x11', 
		'\x3', '\x11', '\x3', '\x11', '\x3', '\x11', '\x3', '\x11', '\x5', '\x11', 
		'\xD0', '\n', '\x11', '\x3', '\x12', '\x3', '\x12', '\x3', '\x12', '\x3', 
		'\x12', '\x5', '\x12', '\xD6', '\n', '\x12', '\x3', '\x12', '\x3', '\x12', 
		'\x3', '\x13', '\x3', '\x13', '\x3', '\x13', '\a', '\x13', '\xDD', '\n', 
		'\x13', '\f', '\x13', '\xE', '\x13', '\xE0', '\v', '\x13', '\x3', '\x14', 
		'\x3', '\x14', '\x3', '\x14', '\x3', '\x14', '\x3', '\x14', '\x3', '\x14', 
		'\x5', '\x14', '\xE8', '\n', '\x14', '\x3', '\x14', '\x3', '\x14', '\x3', 
		'\x15', '\x3', '\x15', '\x3', '\x15', '\x3', '\x15', '\x3', '\x15', '\x3', 
		'\x15', '\x3', '\x15', '\x3', '\x15', '\x3', '\x15', '\x5', '\x15', '\xF5', 
		'\n', '\x15', '\x5', '\x15', '\xF7', '\n', '\x15', '\x3', '\x16', '\x3', 
		'\x16', '\x3', '\x16', '\x3', '\x16', '\x3', '\x16', '\x3', '\x17', '\x3', 
		'\x17', '\x3', '\x17', '\x3', '\x18', '\x3', '\x18', '\x5', '\x18', '\x103', 
		'\n', '\x18', '\x3', '\x19', '\x3', '\x19', '\x3', '\x19', '\x3', '\x19', 
		'\x3', '\x19', '\x5', '\x19', '\x10A', '\n', '\x19', '\x3', '\x1A', '\x3', 
		'\x1A', '\x3', '\x1A', '\x3', '\x1A', '\x3', '\x1A', '\x3', '\x1A', '\x3', 
		'\x1A', '\x3', '\x1A', '\x3', '\x1A', '\x3', '\x1A', '\x3', '\x1A', '\x3', 
		'\x1A', '\x3', '\x1A', '\x5', '\x1A', '\x119', '\n', '\x1A', '\x3', '\x1A', 
		'\x3', '\x1A', '\x3', '\x1A', '\x3', '\x1A', '\x3', '\x1A', '\x3', '\x1A', 
		'\x3', '\x1A', '\x3', '\x1A', '\x3', '\x1A', '\x3', '\x1A', '\x3', '\x1A', 
		'\x3', '\x1A', '\x3', '\x1A', '\x3', '\x1A', '\x3', '\x1A', '\a', '\x1A', 
		'\x12A', '\n', '\x1A', '\f', '\x1A', '\xE', '\x1A', '\x12D', '\v', '\x1A', 
		'\x3', '\x1B', '\x3', '\x1B', '\x3', '\x1B', '\x5', '\x1B', '\x132', '\n', 
		'\x1B', '\x3', '\x1B', '\x3', '\x1B', '\x3', '\x1C', '\x3', '\x1C', '\x3', 
		'\x1C', '\x3', '\x1C', '\x3', '\x1C', '\x3', '\x1D', '\x3', '\x1D', '\x3', 
		'\x1D', '\x3', '\x1E', '\x3', '\x1E', '\x3', '\x1E', '\x3', '\x1E', '\x3', 
		'\x1E', '\x5', '\x1E', '\x143', '\n', '\x1E', '\x3', '\x1F', '\x3', '\x1F', 
		'\x3', ' ', '\x3', ' ', '\x3', ' ', '\x3', ' ', '\x3', '!', '\x3', '!', 
		'\x3', '\"', '\x3', '\"', '\x3', '\"', '\x2', '\x3', '\x32', '#', '\x2', 
		'\x4', '\x6', '\b', '\n', '\f', '\xE', '\x10', '\x12', '\x14', '\x16', 
		'\x18', '\x1A', '\x1C', '\x1E', ' ', '\"', '$', '&', '(', '*', ',', '.', 
		'\x30', '\x32', '\x34', '\x36', '\x38', ':', '<', '>', '@', '\x42', '\x2', 
		'\v', '\x4', '\x2', '\x4', '\x4', '>', '>', '\x3', '\x2', '*', '+', '\x3', 
		'\x2', '(', ')', '\x4', '\x2', ',', '-', '\x30', '\x31', '\x3', '\x2', 
		'.', '/', '\x3', '\x2', '\r', '\xE', '\x3', '\x2', '\x38', ';', '\x3', 
		'\x2', '\t', '\n', '\x4', '\x2', '\x3', '\b', '>', '>', '\x2', '\x15F', 
		'\x2', '\x45', '\x3', '\x2', '\x2', '\x2', '\x4', 'X', '\x3', '\x2', '\x2', 
		'\x2', '\x6', 'Z', '\x3', '\x2', '\x2', '\x2', '\b', '_', '\x3', '\x2', 
		'\x2', '\x2', '\n', 'l', '\x3', '\x2', '\x2', '\x2', '\f', 'o', '\x3', 
		'\x2', '\x2', '\x2', '\xE', 'v', '\x3', '\x2', '\x2', '\x2', '\x10', '{', 
		'\x3', '\x2', '\x2', '\x2', '\x12', '\x86', '\x3', '\x2', '\x2', '\x2', 
		'\x14', '\x92', '\x3', '\x2', '\x2', '\x2', '\x16', '\x9F', '\x3', '\x2', 
		'\x2', '\x2', '\x18', '\xA2', '\x3', '\x2', '\x2', '\x2', '\x1A', '\xB0', 
		'\x3', '\x2', '\x2', '\x2', '\x1C', '\xB7', '\x3', '\x2', '\x2', '\x2', 
		'\x1E', '\xC1', '\x3', '\x2', '\x2', '\x2', ' ', '\xCF', '\x3', '\x2', 
		'\x2', '\x2', '\"', '\xD1', '\x3', '\x2', '\x2', '\x2', '$', '\xD9', '\x3', 
		'\x2', '\x2', '\x2', '&', '\xE1', '\x3', '\x2', '\x2', '\x2', '(', '\xF6', 
		'\x3', '\x2', '\x2', '\x2', '*', '\xF8', '\x3', '\x2', '\x2', '\x2', ',', 
		'\xFD', '\x3', '\x2', '\x2', '\x2', '.', '\x100', '\x3', '\x2', '\x2', 
		'\x2', '\x30', '\x104', '\x3', '\x2', '\x2', '\x2', '\x32', '\x118', '\x3', 
		'\x2', '\x2', '\x2', '\x34', '\x12E', '\x3', '\x2', '\x2', '\x2', '\x36', 
		'\x135', '\x3', '\x2', '\x2', '\x2', '\x38', '\x13A', '\x3', '\x2', '\x2', 
		'\x2', ':', '\x142', '\x3', '\x2', '\x2', '\x2', '<', '\x144', '\x3', 
		'\x2', '\x2', '\x2', '>', '\x146', '\x3', '\x2', '\x2', '\x2', '@', '\x14A', 
		'\x3', '\x2', '\x2', '\x2', '\x42', '\x14C', '\x3', '\x2', '\x2', '\x2', 
		'\x44', '\x46', '\a', '?', '\x2', '\x2', '\x45', '\x44', '\x3', '\x2', 
		'\x2', '\x2', '\x45', '\x46', '\x3', '\x2', '\x2', '\x2', '\x46', 'L', 
		'\x3', '\x2', '\x2', '\x2', 'G', 'H', '\x5', '\x4', '\x3', '\x2', 'H', 
		'I', '\a', '?', '\x2', '\x2', 'I', 'K', '\x3', '\x2', '\x2', '\x2', 'J', 
		'G', '\x3', '\x2', '\x2', '\x2', 'K', 'N', '\x3', '\x2', '\x2', '\x2', 
		'L', 'J', '\x3', '\x2', '\x2', '\x2', 'L', 'M', '\x3', '\x2', '\x2', '\x2', 
		'M', 'R', '\x3', '\x2', '\x2', '\x2', 'N', 'L', '\x3', '\x2', '\x2', '\x2', 
		'O', 'Q', '\x5', '\x14', '\v', '\x2', 'P', 'O', '\x3', '\x2', '\x2', '\x2', 
		'Q', 'T', '\x3', '\x2', '\x2', '\x2', 'R', 'P', '\x3', '\x2', '\x2', '\x2', 
		'R', 'S', '\x3', '\x2', '\x2', '\x2', 'S', '\x3', '\x3', '\x2', '\x2', 
		'\x2', 'T', 'R', '\x3', '\x2', '\x2', '\x2', 'U', 'Y', '\x5', '\x6', '\x4', 
		'\x2', 'V', 'Y', '\x5', '\b', '\x5', '\x2', 'W', 'Y', '\x5', '\xE', '\b', 
		'\x2', 'X', 'U', '\x3', '\x2', '\x2', '\x2', 'X', 'V', '\x3', '\x2', '\x2', 
		'\x2', 'X', 'W', '\x3', '\x2', '\x2', '\x2', 'Y', '\x5', '\x3', '\x2', 
		'\x2', '\x2', 'Z', '[', '\a', '\x1D', '\x2', '\x2', '[', '\\', '\a', '>', 
		'\x2', '\x2', '\\', ']', '\a', '\x1E', '\x2', '\x2', ']', '^', '\t', '\x2', 
		'\x2', '\x2', '^', '\a', '\x3', '\x2', '\x2', '\x2', '_', '`', '\a', '\x1F', 
		'\x2', '\x2', '`', '\x61', '\a', '?', '\x2', '\x2', '\x61', '\x62', '\x5', 
		'\n', '\x6', '\x2', '\x62', '\x63', '\a', ' ', '\x2', '\x2', '\x63', '\t', 
		'\x3', '\x2', '\x2', '\x2', '\x64', '\x65', '\x5', '\f', '\a', '\x2', 
		'\x65', '\x66', '\a', '?', '\x2', '\x2', '\x66', 'k', '\x3', '\x2', '\x2', 
		'\x2', 'g', 'h', '\x5', '\x1A', '\xE', '\x2', 'h', 'i', '\a', '?', '\x2', 
		'\x2', 'i', 'k', '\x3', '\x2', '\x2', '\x2', 'j', '\x64', '\x3', '\x2', 
		'\x2', '\x2', 'j', 'g', '\x3', '\x2', '\x2', '\x2', 'k', 'n', '\x3', '\x2', 
		'\x2', '\x2', 'l', 'j', '\x3', '\x2', '\x2', '\x2', 'l', 'm', '\x3', '\x2', 
		'\x2', '\x2', 'm', '\v', '\x3', '\x2', '\x2', '\x2', 'n', 'l', '\x3', 
		'\x2', '\x2', '\x2', 'o', 'p', '\a', '!', '\x2', '\x2', 'p', 'q', '\x5', 
		'\x42', '\"', '\x2', 'q', 'r', '\a', '>', '\x2', '\x2', 'r', 's', '\a', 
		'\x37', '\x2', '\x2', 's', 't', '\x5', '\x32', '\x1A', '\x2', 't', '\r', 
		'\x3', '\x2', '\x2', '\x2', 'u', 'w', '\a', '!', '\x2', '\x2', 'v', 'u', 
		'\x3', '\x2', '\x2', '\x2', 'v', 'w', '\x3', '\x2', '\x2', '\x2', 'w', 
		'x', '\x3', '\x2', '\x2', '\x2', 'x', 'y', '\a', '\"', '\x2', '\x2', 'y', 
		'z', '\x5', '\x10', '\t', '\x2', 'z', '\xF', '\x3', '\x2', '\x2', '\x2', 
		'{', '|', '\a', '>', '\x2', '\x2', '|', '\x7F', '\a', '#', '\x2', '\x2', 
		'}', '\x80', '\a', '$', '\x2', '\x2', '~', '\x80', '\x5', '\x12', '\n', 
		'\x2', '\x7F', '}', '\x3', '\x2', '\x2', '\x2', '\x7F', '~', '\x3', '\x2', 
		'\x2', '\x2', '\x80', '\x81', '\x3', '\x2', '\x2', '\x2', '\x81', '\x84', 
		'\a', '\x11', '\x2', '\x2', '\x82', '\x85', '\x5', '\x42', '\"', '\x2', 
		'\x83', '\x85', '\a', '$', '\x2', '\x2', '\x84', '\x82', '\x3', '\x2', 
		'\x2', '\x2', '\x84', '\x83', '\x3', '\x2', '\x2', '\x2', '\x85', '\x11', 
		'\x3', '\x2', '\x2', '\x2', '\x86', '\x87', '\x5', '\x42', '\"', '\x2', 
		'\x87', '\x8E', '\a', '>', '\x2', '\x2', '\x88', '\x89', '\a', '\x36', 
		'\x2', '\x2', '\x89', '\x8A', '\x5', '\x42', '\"', '\x2', '\x8A', '\x8B', 
		'\a', '>', '\x2', '\x2', '\x8B', '\x8D', '\x3', '\x2', '\x2', '\x2', '\x8C', 
		'\x88', '\x3', '\x2', '\x2', '\x2', '\x8D', '\x90', '\x3', '\x2', '\x2', 
		'\x2', '\x8E', '\x8C', '\x3', '\x2', '\x2', '\x2', '\x8E', '\x8F', '\x3', 
		'\x2', '\x2', '\x2', '\x8F', '\x13', '\x3', '\x2', '\x2', '\x2', '\x90', 
		'\x8E', '\x3', '\x2', '\x2', '\x2', '\x91', '\x93', '\a', '!', '\x2', 
		'\x2', '\x92', '\x91', '\x3', '\x2', '\x2', '\x2', '\x92', '\x93', '\x3', 
		'\x2', '\x2', '\x2', '\x93', '\x94', '\x3', '\x2', '\x2', '\x2', '\x94', 
		'\x95', '\a', '\xF', '\x2', '\x2', '\x95', '\x96', '\x5', '\x10', '\t', 
		'\x2', '\x96', '\x97', '\a', '?', '\x2', '\x2', '\x97', '\x98', '\x5', 
		'\x16', '\f', '\x2', '\x98', '\x99', '\x5', '\x1C', '\xF', '\x2', '\x99', 
		'\x9A', '\a', '%', '\x2', '\x2', '\x9A', '\x9B', '\a', '?', '\x2', '\x2', 
		'\x9B', '\x15', '\x3', '\x2', '\x2', '\x2', '\x9C', '\x9E', '\x5', '\x18', 
		'\r', '\x2', '\x9D', '\x9C', '\x3', '\x2', '\x2', '\x2', '\x9E', '\xA1', 
		'\x3', '\x2', '\x2', '\x2', '\x9F', '\x9D', '\x3', '\x2', '\x2', '\x2', 
		'\x9F', '\xA0', '\x3', '\x2', '\x2', '\x2', '\xA0', '\x17', '\x3', '\x2', 
		'\x2', '\x2', '\xA1', '\x9F', '\x3', '\x2', '\x2', '\x2', '\xA2', '\xA3', 
		'\a', '&', '\x2', '\x2', '\xA3', '\xA4', '\x5', '\x1A', '\xE', '\x2', 
		'\xA4', '\xA5', '\a', '?', '\x2', '\x2', '\xA5', '\x19', '\x3', '\x2', 
		'\x2', '\x2', '\xA6', '\xA7', '\x5', '\x42', '\"', '\x2', '\xA7', '\xAA', 
		'\a', '>', '\x2', '\x2', '\xA8', '\xA9', '\a', '\x37', '\x2', '\x2', '\xA9', 
		'\xAB', '\x5', '\x32', '\x1A', '\x2', '\xAA', '\xA8', '\x3', '\x2', '\x2', 
		'\x2', '\xAA', '\xAB', '\x3', '\x2', '\x2', '\x2', '\xAB', '\xB1', '\x3', 
		'\x2', '\x2', '\x2', '\xAC', '\xAD', '\x5', '\x42', '\"', '\x2', '\xAD', 
		'\xAE', '\a', '\'', '\x2', '\x2', '\xAE', '\xAF', '\a', '>', '\x2', '\x2', 
		'\xAF', '\xB1', '\x3', '\x2', '\x2', '\x2', '\xB0', '\xA6', '\x3', '\x2', 
		'\x2', '\x2', '\xB0', '\xAC', '\x3', '\x2', '\x2', '\x2', '\xB1', '\x1B', 
		'\x3', '\x2', '\x2', '\x2', '\xB2', '\xB3', '\x5', '\x1E', '\x10', '\x2', 
		'\xB3', '\xB4', '\a', '?', '\x2', '\x2', '\xB4', '\xB6', '\x3', '\x2', 
		'\x2', '\x2', '\xB5', '\xB2', '\x3', '\x2', '\x2', '\x2', '\xB6', '\xB9', 
		'\x3', '\x2', '\x2', '\x2', '\xB7', '\xB5', '\x3', '\x2', '\x2', '\x2', 
		'\xB7', '\xB8', '\x3', '\x2', '\x2', '\x2', '\xB8', '\x1D', '\x3', '\x2', 
		'\x2', '\x2', '\xB9', '\xB7', '\x3', '\x2', '\x2', '\x2', '\xBA', '\xC2', 
		'\x5', ' ', '\x11', '\x2', '\xBB', '\xC2', '\x5', '\"', '\x12', '\x2', 
		'\xBC', '\xC2', '\x5', '&', '\x14', '\x2', '\xBD', '\xC2', '\x5', '*', 
		'\x16', '\x2', '\xBE', '\xC2', '\x5', ',', '\x17', '\x2', '\xBF', '\xC2', 
		'\x5', '.', '\x18', '\x2', '\xC0', '\xC2', '\x5', '\x30', '\x19', '\x2', 
		'\xC1', '\xBA', '\x3', '\x2', '\x2', '\x2', '\xC1', '\xBB', '\x3', '\x2', 
		'\x2', '\x2', '\xC1', '\xBC', '\x3', '\x2', '\x2', '\x2', '\xC1', '\xBD', 
		'\x3', '\x2', '\x2', '\x2', '\xC1', '\xBE', '\x3', '\x2', '\x2', '\x2', 
		'\xC1', '\xBF', '\x3', '\x2', '\x2', '\x2', '\xC1', '\xC0', '\x3', '\x2', 
		'\x2', '\x2', '\xC2', '\x1F', '\x3', '\x2', '\x2', '\x2', '\xC3', '\xC4', 
		'\a', '\x1C', '\x2', '\x2', '\xC4', '\xC5', '\a', '>', '\x2', '\x2', '\xC5', 
		'\xC6', '\a', '\x37', '\x2', '\x2', '\xC6', '\xD0', '\x5', '\x32', '\x1A', 
		'\x2', '\xC7', '\xC8', '\a', '\x1C', '\x2', '\x2', '\xC8', '\xC9', '\a', 
		'>', '\x2', '\x2', '\xC9', '\xCA', '\a', '\x32', '\x2', '\x2', '\xCA', 
		'\xCB', '\x5', '\x32', '\x1A', '\x2', '\xCB', '\xCC', '\a', '\x33', '\x2', 
		'\x2', '\xCC', '\xCD', '\a', '\x37', '\x2', '\x2', '\xCD', '\xCE', '\x5', 
		'\x32', '\x1A', '\x2', '\xCE', '\xD0', '\x3', '\x2', '\x2', '\x2', '\xCF', 
		'\xC3', '\x3', '\x2', '\x2', '\x2', '\xCF', '\xC7', '\x3', '\x2', '\x2', 
		'\x2', '\xD0', '!', '\x3', '\x2', '\x2', '\x2', '\xD1', '\xD2', '\a', 
		'\x17', '\x2', '\x2', '\xD2', '\xD3', '\a', '>', '\x2', '\x2', '\xD3', 
		'\xD5', '\a', '\x34', '\x2', '\x2', '\xD4', '\xD6', '\x5', '$', '\x13', 
		'\x2', '\xD5', '\xD4', '\x3', '\x2', '\x2', '\x2', '\xD5', '\xD6', '\x3', 
		'\x2', '\x2', '\x2', '\xD6', '\xD7', '\x3', '\x2', '\x2', '\x2', '\xD7', 
		'\xD8', '\a', '\x35', '\x2', '\x2', '\xD8', '#', '\x3', '\x2', '\x2', 
		'\x2', '\xD9', '\xDE', '\x5', '\x32', '\x1A', '\x2', '\xDA', '\xDB', '\a', 
		'\x36', '\x2', '\x2', '\xDB', '\xDD', '\x5', '\x32', '\x1A', '\x2', '\xDC', 
		'\xDA', '\x3', '\x2', '\x2', '\x2', '\xDD', '\xE0', '\x3', '\x2', '\x2', 
		'\x2', '\xDE', '\xDC', '\x3', '\x2', '\x2', '\x2', '\xDE', '\xDF', '\x3', 
		'\x2', '\x2', '\x2', '\xDF', '%', '\x3', '\x2', '\x2', '\x2', '\xE0', 
		'\xDE', '\x3', '\x2', '\x2', '\x2', '\xE1', '\xE2', '\a', '\x18', '\x2', 
		'\x2', '\xE2', '\xE3', '\x5', '\x32', '\x1A', '\x2', '\xE3', '\xE4', '\a', 
		'\x19', '\x2', '\x2', '\xE4', '\xE5', '\a', '?', '\x2', '\x2', '\xE5', 
		'\xE7', '\x5', '\x1C', '\xF', '\x2', '\xE6', '\xE8', '\x5', '(', '\x15', 
		'\x2', '\xE7', '\xE6', '\x3', '\x2', '\x2', '\x2', '\xE7', '\xE8', '\x3', 
		'\x2', '\x2', '\x2', '\xE8', '\xE9', '\x3', '\x2', '\x2', '\x2', '\xE9', 
		'\xEA', '\a', '\x1A', '\x2', '\x2', '\xEA', '\'', '\x3', '\x2', '\x2', 
		'\x2', '\xEB', '\xEC', '\a', '\x16', '\x2', '\x2', '\xEC', '\xED', '\a', 
		'?', '\x2', '\x2', '\xED', '\xF7', '\x5', '\x1C', '\xF', '\x2', '\xEE', 
		'\xEF', '\a', '\x15', '\x2', '\x2', '\xEF', '\xF0', '\x5', '\x32', '\x1A', 
		'\x2', '\xF0', '\xF1', '\a', '\x19', '\x2', '\x2', '\xF1', '\xF2', '\a', 
		'?', '\x2', '\x2', '\xF2', '\xF4', '\x5', '\x1C', '\xF', '\x2', '\xF3', 
		'\xF5', '\x5', '(', '\x15', '\x2', '\xF4', '\xF3', '\x3', '\x2', '\x2', 
		'\x2', '\xF4', '\xF5', '\x3', '\x2', '\x2', '\x2', '\xF5', '\xF7', '\x3', 
		'\x2', '\x2', '\x2', '\xF6', '\xEB', '\x3', '\x2', '\x2', '\x2', '\xF6', 
		'\xEE', '\x3', '\x2', '\x2', '\x2', '\xF7', ')', '\x3', '\x2', '\x2', 
		'\x2', '\xF8', '\xF9', '\a', '\x13', '\x2', '\x2', '\xF9', '\xFA', '\a', 
		'?', '\x2', '\x2', '\xFA', '\xFB', '\x5', '\x1C', '\xF', '\x2', '\xFB', 
		'\xFC', '\a', '\x14', '\x2', '\x2', '\xFC', '+', '\x3', '\x2', '\x2', 
		'\x2', '\xFD', '\xFE', '\a', '\x12', '\x2', '\x2', '\xFE', '\xFF', '\x5', 
		'\x32', '\x1A', '\x2', '\xFF', '-', '\x3', '\x2', '\x2', '\x2', '\x100', 
		'\x102', '\a', '\x10', '\x2', '\x2', '\x101', '\x103', '\x5', '\x32', 
		'\x1A', '\x2', '\x102', '\x101', '\x3', '\x2', '\x2', '\x2', '\x102', 
		'\x103', '\x3', '\x2', '\x2', '\x2', '\x103', '/', '\x3', '\x2', '\x2', 
		'\x2', '\x104', '\x109', '\a', '\x1B', '\x2', '\x2', '\x105', '\x10A', 
		'\x5', ' ', '\x11', '\x2', '\x106', '\x10A', '\x5', '\"', '\x12', '\x2', 
		'\x107', '\x10A', '\x5', '&', '\x14', '\x2', '\x108', '\x10A', '\x5', 
		'*', '\x16', '\x2', '\x109', '\x105', '\x3', '\x2', '\x2', '\x2', '\x109', 
		'\x106', '\x3', '\x2', '\x2', '\x2', '\x109', '\x107', '\x3', '\x2', '\x2', 
		'\x2', '\x109', '\x108', '\x3', '\x2', '\x2', '\x2', '\x10A', '\x31', 
		'\x3', '\x2', '\x2', '\x2', '\x10B', '\x10C', '\b', '\x1A', '\x1', '\x2', 
		'\x10C', '\x10D', '\a', '(', '\x2', '\x2', '\x10D', '\x119', '\x5', '\x32', 
		'\x1A', '\x10', '\x10E', '\x10F', '\a', ')', '\x2', '\x2', '\x10F', '\x119', 
		'\x5', '\x32', '\x1A', '\xF', '\x110', '\x111', '\a', '\f', '\x2', '\x2', 
		'\x111', '\x119', '\x5', '\x32', '\x1A', '\xE', '\x112', '\x119', '\x5', 
		'\x34', '\x1B', '\x2', '\x113', '\x119', '\x5', '\x36', '\x1C', '\x2', 
		'\x114', '\x119', '\x5', '\x38', '\x1D', '\x2', '\x115', '\x119', '\a', 
		'>', '\x2', '\x2', '\x116', '\x119', '\x5', ':', '\x1E', '\x2', '\x117', 
		'\x119', '\x5', '>', ' ', '\x2', '\x118', '\x10B', '\x3', '\x2', '\x2', 
		'\x2', '\x118', '\x10E', '\x3', '\x2', '\x2', '\x2', '\x118', '\x110', 
		'\x3', '\x2', '\x2', '\x2', '\x118', '\x112', '\x3', '\x2', '\x2', '\x2', 
		'\x118', '\x113', '\x3', '\x2', '\x2', '\x2', '\x118', '\x114', '\x3', 
		'\x2', '\x2', '\x2', '\x118', '\x115', '\x3', '\x2', '\x2', '\x2', '\x118', 
		'\x116', '\x3', '\x2', '\x2', '\x2', '\x118', '\x117', '\x3', '\x2', '\x2', 
		'\x2', '\x119', '\x12B', '\x3', '\x2', '\x2', '\x2', '\x11A', '\x11B', 
		'\f', '\r', '\x2', '\x2', '\x11B', '\x11C', '\t', '\x3', '\x2', '\x2', 
		'\x11C', '\x12A', '\x5', '\x32', '\x1A', '\xE', '\x11D', '\x11E', '\f', 
		'\f', '\x2', '\x2', '\x11E', '\x11F', '\t', '\x4', '\x2', '\x2', '\x11F', 
		'\x12A', '\x5', '\x32', '\x1A', '\r', '\x120', '\x121', '\f', '\v', '\x2', 
		'\x2', '\x121', '\x122', '\t', '\x5', '\x2', '\x2', '\x122', '\x12A', 
		'\x5', '\x32', '\x1A', '\f', '\x123', '\x124', '\f', '\n', '\x2', '\x2', 
		'\x124', '\x125', '\t', '\x6', '\x2', '\x2', '\x125', '\x12A', '\x5', 
		'\x32', '\x1A', '\v', '\x126', '\x127', '\f', '\t', '\x2', '\x2', '\x127', 
		'\x128', '\t', '\a', '\x2', '\x2', '\x128', '\x12A', '\x5', '\x32', '\x1A', 
		'\n', '\x129', '\x11A', '\x3', '\x2', '\x2', '\x2', '\x129', '\x11D', 
		'\x3', '\x2', '\x2', '\x2', '\x129', '\x120', '\x3', '\x2', '\x2', '\x2', 
		'\x129', '\x123', '\x3', '\x2', '\x2', '\x2', '\x129', '\x126', '\x3', 
		'\x2', '\x2', '\x2', '\x12A', '\x12D', '\x3', '\x2', '\x2', '\x2', '\x12B', 
		'\x129', '\x3', '\x2', '\x2', '\x2', '\x12B', '\x12C', '\x3', '\x2', '\x2', 
		'\x2', '\x12C', '\x33', '\x3', '\x2', '\x2', '\x2', '\x12D', '\x12B', 
		'\x3', '\x2', '\x2', '\x2', '\x12E', '\x12F', '\a', '>', '\x2', '\x2', 
		'\x12F', '\x131', '\a', '\x34', '\x2', '\x2', '\x130', '\x132', '\x5', 
		'$', '\x13', '\x2', '\x131', '\x130', '\x3', '\x2', '\x2', '\x2', '\x131', 
		'\x132', '\x3', '\x2', '\x2', '\x2', '\x132', '\x133', '\x3', '\x2', '\x2', 
		'\x2', '\x133', '\x134', '\a', '\x35', '\x2', '\x2', '\x134', '\x35', 
		'\x3', '\x2', '\x2', '\x2', '\x135', '\x136', '\a', '>', '\x2', '\x2', 
		'\x136', '\x137', '\a', '\x32', '\x2', '\x2', '\x137', '\x138', '\x5', 
		'\x32', '\x1A', '\x2', '\x138', '\x139', '\a', '\x33', '\x2', '\x2', '\x139', 
		'\x37', '\x3', '\x2', '\x2', '\x2', '\x13A', '\x13B', '\a', '\xF', '\x2', 
		'\x2', '\x13B', '\x13C', '\a', '>', '\x2', '\x2', '\x13C', '\x39', '\x3', 
		'\x2', '\x2', '\x2', '\x13D', '\x143', '\x5', '<', '\x1F', '\x2', '\x13E', 
		'\x143', '\a', '<', '\x2', '\x2', '\x13F', '\x143', '\x5', '@', '!', '\x2', 
		'\x140', '\x143', '\a', '=', '\x2', '\x2', '\x141', '\x143', '\a', '\v', 
		'\x2', '\x2', '\x142', '\x13D', '\x3', '\x2', '\x2', '\x2', '\x142', '\x13E', 
		'\x3', '\x2', '\x2', '\x2', '\x142', '\x13F', '\x3', '\x2', '\x2', '\x2', 
		'\x142', '\x140', '\x3', '\x2', '\x2', '\x2', '\x142', '\x141', '\x3', 
		'\x2', '\x2', '\x2', '\x143', ';', '\x3', '\x2', '\x2', '\x2', '\x144', 
		'\x145', '\t', '\b', '\x2', '\x2', '\x145', '=', '\x3', '\x2', '\x2', 
		'\x2', '\x146', '\x147', '\a', '\x34', '\x2', '\x2', '\x147', '\x148', 
		'\x5', '\x32', '\x1A', '\x2', '\x148', '\x149', '\a', '\x35', '\x2', '\x2', 
		'\x149', '?', '\x3', '\x2', '\x2', '\x2', '\x14A', '\x14B', '\t', '\t', 
		'\x2', '\x2', '\x14B', '\x41', '\x3', '\x2', '\x2', '\x2', '\x14C', '\x14D', 
		'\t', '\n', '\x2', '\x2', '\x14D', '\x43', '\x3', '\x2', '\x2', '\x2', 
		'\x1F', '\x45', 'L', 'R', 'X', 'j', 'l', 'v', '\x7F', '\x84', '\x8E', 
		'\x92', '\x9F', '\xAA', '\xB0', '\xB7', '\xC1', '\xCF', '\xD5', '\xDE', 
		'\xE7', '\xF4', '\xF6', '\x102', '\x109', '\x118', '\x129', '\x12B', '\x131', 
		'\x142',
	};

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN);


}
