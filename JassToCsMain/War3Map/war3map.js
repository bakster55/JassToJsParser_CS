var gv_aaa;
var gv_aab;
var gv_aac;
var gv_aad = null;
var gv_aae = 0;
var gv_aaf = 0;
var gv_aag = 0;
var gv_aah = 0;
var gv_aai = 0;
var gv_aaj = 0;
var gv_aak = 1;
var gv_aal = 1;
var gv_aam = [];
var gv_aan = [];
var gv_aao = [];
var gv_aap = [];
var gv_aaq = 851972;
var gv_aar = 851990;
var gv_aas = 851983;
var gv_aat = [];
var gv_aau = [];
var gv_aav = [];
var gv_aaw = [];
var gv_aax = [];
var gv_aay = [];
var gv_aaz = [];
var gv_aaA = [];
var gv_aaB = [];
var gv_aaC = [];
var gv_aaD = [];
var gv_aaE = [];
var gv_aaF = [];
var gv_aaG = [];
var gv_aaH = [];
var gv_aaI = [];
var gv_aaJ = [];
var gv_aaK = [];
var gv_aaL = [];
var gv_aaM = null;
var gv_aaN = null;
var gv_aaO = null;
var gv_aaP = [];
var gv_aaQ;
var gv_aaR = CreateGroup();
var gv_aaS = [];
var gv_aaT = [];
var gv_aaU = [];
var gv_aaV = [];
var gv_aaW;
var gv_aaX;
var gv_aaY;
var gv_aaZ;
var gv_aba;
var gv_abb;
var gv_abc = false;
var gv_abd = null;
var gv_abe = null;
var gv_abf = null;
var gv_abg = null;
var gv_abh = null;
var gv_abi = null;
var gv_abj = null;
var gv_abk;
var BONUS_ARMOR = 0;
var BONUS_DAMAGE = 1;
var BONUS_HERO_STR = 2;
var BONUS_HERO_AGI = 3;
var BONUS_HERO_INT = 4;
var BONUS_LIFE_REGEN = 5;
var BONUS_TYPES = 6;
var BonusMod__ABILITY_COUNT = 13;
var BonusMod__PRELOAD_ABILITYS = true;
var BonusMod__PRELOAD_DUMMY_UNIT = "Ofar";
var gv_abl = [];
var gv_abm = [];
var gv_abn;
var gv_abo;
var fdrop = 0.12;
var gv_abp = [];
var gv_abq = [];
var gv_abr = [];
var gv_abs = [];
var gv_abt = [];
var gv_abu = CreateGroup();
var gv_abv = false;
var gv_abw = null;
var A = 1048576;
var gv_abx = [];
var gv_aby = 0;
var gv_abz = 16777216;
var gv_abA = 2147483648;
var gv_abB = [];
var gv_abC = 0;
var gv_abD = null;
var gv_abE = null;
var gv_abF;
var gv_abG;
var gv_abH;
var gv_abI = null;
var ev = Player(PLAYER_NEUTRAL_PASSIVE);
var gv_abJ = 0.0;
var gv_abK = 0.0;
var gv_abL;
var gv_abM = [];
var gv_abN = 0;
var nv = 679645218;
var gv_abO;
var gv_abP = 0;
var gv_abQ;
var gv_abR = [];
var gv_abS;
var gv_abT = [];
var gv_abU;
var gv_abV;
var gv_abW;
var gv_abX;
var gv_abY;
var Cv = -gv_abz;
var dv = 1 / 64;
var Dv = -1;
var gv_abZ;
var gv_aca = [];
var gv_acb = 0;
var gv_acc = CreateTimer();
var gv_acd = null;
var gv_ace = CreateSoundFromLabel(
  "InterfaceError",
  false,
  false,
  false,
  10,
  10
);
var gv_acf = "hpea";
var gv_acg;
var gv_ach;
var gv_aci;
var gv_acj;
var gv_ack;
var gv_acl = CreateTimer();
var gv_acm = 0;
var gv_acn;
var gv_aco;
var gv_acp;
var gv_acq;
var gv_acr = -1;
var gv_acs = [];
var gv_act;
var gv_acu;
var gv_acv;
var gv_acw;
var gv_acx;
var gv_acy = CreateGroup();
var gv_acz = null;
var gv_acA = [];
var gv_acB = null;
var gv_acC = null;
var gv_acD = null;
var gv_acE = null;
var gv_acF = null;
var gv_acG = null;
var gv_acH = null;
var gv_acI = null;
var gv_acJ = null;
var gv_acK = null;
var gv_acL = null;
var gv_acM = null;
var gv_acN = null;
var gv_acO = null;
var gv_acP = null;
var gv_acQ = null;
var gv_acR = null;
var gv_acS = null;
var gv_acT = null;
var gv_acU = null;
var gv_acV = null;
var gv_acW = null;
var gv_acX = null;
var gv_acY = null;
var gv_acZ = null;
var gv_ada = null;
var gv_adb = null;
var gv_adc = null;
var gv_add = null;
var gv_ade = null;
var gv_adf = null;
var gv_adg = null;
var gv_adh = null;
var gv_adi = null;
var gv_adj = null;
var gv_adk = null;
var gv_adl = null;
var gv_adm = null;
var gv_adn = null;
var gv_ado = null;
var gv_adp = null;
var gv_adq = null;
var gv_adr = null;
var gv_ads = null;
var gv_adt = null;
var gv_adu = null;
var gv_adv = null;
var gv_adw = null;
var gv_adx = null;
var gv_ady = null;
var gv_adz = null;
var gv_adA = null;
var gv_adB = null;
var gv_adC = null;
var gv_adD = null;
var gv_adE = null;
var gv_adF = null;
var gv_adG = null;
var gv_adH = null;
var gv_adI = null;
var gv_adJ = null;
var gv_adK = null;
var gv_adL = null;
var gv_adM = null;
var gv_adN = null;
var gv_adO = null;
var gv_adP = null;
var gv_adQ = null;
var gv_adR = null;
var gv_adS = null;
var gv_adT = null;
var gv_adU = null;
var gv_adV = null;
var gv_adW = null;
var gv_adX = null;
var gv_adY = null;
var gv_adZ = null;
var gv_aea = null;
var gv_aeb = null;
var gv_aec = null;
var gv_aed = null;
var gv_aee = null;
var gv_aef = null;
var gv_aeg = null;
var gv_aeh = null;
var gv_aei = null;
var gv_aej = null;
var gv_aek = null;
var gv_ael = null;
var gv_aem = null;
var gv_aen = null;
var gv_aeo = null;
var gv_aep = null;
var gv_aeq = null;
var gv_aer = null;
var gv_aes = null;
var gv_aet = null;
var gv_aeu = null;
var gv_aev = null;
var gv_aew = null;
var gv_aex = null;
var gv_aey = null;
var gv_aez = null;
var gv_aeA = null;
var gv_aeB = null;
var gv_aeC = null;
var gv_aeD = null;
var gv_aeE = null;
var gv_aeF = null;
var gv_aeG = null;
var gv_aeH = null;
var gv_aeI = null;
var gv_aeJ = null;
var gv_aeK = null;
var gv_aeL = null;
var gv_aeM = null;
var gv_aeN = null;
var gv_aeO = null;
var gv_aeP = null;
var gv_aeQ = null;
var gv_aeR = null;
var gv_aeS = null;
var gv_aeT = null;
var gv_aeU = null;
var gv_aeV = null;
var gv_aeW = null;
var gv_aeX = null;
var gv_aeY = null;
var gv_aeZ = null;
var gv_afa = null;
var gv_afb = null;
var gv_afc = null;
var gv_afd = null;
var gv_afe = null;
var gv_aff = null;
var gv_afg = null;
var gv_afh = null;
var gv_afi = null;
var gv_afj = null;
var gv_afk = null;
var gv_afl = null;
var gv_afm = null;
var gv_afn = null;
var gv_afo = null;
var gv_afp = null;
var gv_afq = null;
var gv_afr = null;
var gv_afs = null;
var gv_aft = null;
var gv_afu = null;
var gv_afv = null;
var gv_afw = null;
var gv_afx = null;
var gv_afy = null;
var gv_afz = null;
var gv_afA = null;
var gv_afB = null;
var gv_afC = null;
var gv_afD = null;
var gv_afE = null;
var gv_afF = null;
var gv_afG = null;
var gv_afH = null;
var gv_afI = null;
var gv_afJ = null;
var gv_afK = null;
var gv_afL = null;
var gv_afM = null;
var gv_afN = null;
var gv_afO = null;
var gv_afP = null;
var gv_afQ = null;
var gv_afR = null;
var gv_afS = null;
var gv_afT = null;
var gv_afU = null;
var gv_afV = null;
var gv_afW = null;
var gv_afX = null;
var gv_afY = null;
var gv_afZ = null;
var gv_aga = null;
var gv_agb = null;
var gv_agc = null;
var gv_agd = null;
var gv_age = null;
var gv_agf = null;
var gv_agg = null;
var gv_agh = null;
var gv_agi = null;
var gv_agj = null;
var gv_agk = null;
var gv_agl = null;
var gv_agm = null;
var gv_agn = null;
var gv_ago = null;
var gv_agp = null;
var gv_agq = null;
var gv_agr = null;
var gv_ags = null;
var gv_agt = null;
var gv_agu = null;
var gv_agv = null;
var gv_agw = null;
var gv_agx = null;
var gv_agy = null;
var gv_agz = null;
var gv_agA = null;
var gv_agB = null;
var gv_agC = null;
var gv_agD = null;
var gv_agE = null;
var gv_agF = null;
var gv_agG = null;
var gv_agH = null;
var gv_agI = null;
var gv_agJ = null;
var gv_agK = null;
var gv_agL = null;
var gv_agM = null;
var gv_agN = null;
var gv_agO = null;
var gv_agP = null;
var gv_agQ = null;
var gv_agR = null;
var gv_agS = null;
var gv_agT = null;
var gv_agU = null;
var gv_agV = null;
var gv_agW = null;
var gv_agX = null;
var gv_agY = null;
var gv_agZ = null;
var gv_aha = null;
var gv_ahb = null;
var gv_ahc = null;
var gv_ahd = null;
var gv_ahe = null;
var gv_ahf = null;
var gv_ahg = null;
var gv_ahh = null;
var gv_ahi = null;
var gv_ahj = null;
var gv_ahk = null;
var gv_ahl = null;
var gv_ahm = null;
var gv_ahn = null;
var gv_aho = null;
var gv_ahp = null;
var gv_ahq = null;
var gv_ahr = null;
var gv_ahs = null;
var gv_aht = null;
var gv_ahu = null;
var gv_ahv = null;
var gv_ahw = null;
var gv_ahx = null;
var gv_ahy = null;
var gv_ahz = null;
var gv_ahA = null;
var gv_ahB = null;
var gv_ahC = null;
var gv_ahD = null;
var gv_ahE = null;
var gv_ahF = null;
var gv_ahG = null;
var gv_ahH = null;
var gv_ahI = null;
var gv_ahJ = null;
var gv_ahK = null;
var gv_ahL = null;
var gv_ahM = null;
var gv_ahN = null;
var gv_ahO = null;
var gv_ahP = null;
var gv_ahQ = null;
var gv_ahR = null;
var gv_ahS = null;
var gv_ahT = null;
var gv_ahU = null;
var gv_ahV = null;
var gv_ahW = null;
var gv_ahX = null;
var gv_ahY = null;
var gv_ahZ = null;
var gv_aia = null;
var gv_aib = null;
var gv_aic = null;
var gv_aid = null;
var gv_aie = null;
var gv_aif = null;
var gv_aig = null;
var gv_aih = null;
var gv_aii = null;
var gv_aij = null;
var gv_aik = null;
var gv_ail = null;
var gv_aim = null;
var gv_ain = null;
var gv_aio = null;
var gv_aip = null;
var gv_aiq = null;
var gv_air = null;
var gv_ais = null;
var gv_ait = null;
var gv_aiu = null;
var gv_aiv = null;
var gv_aiw = null;
var gv_aix = null;
var gv_aiy = null;
var gv_aiz = null;
var gv_aiA = null;
var gv_aiB = null;
var gv_aiC = null;
var gv_aiD = null;
var gv_aiE = null;
var gv_aiF = null;
var gv_aiG = null;
var gv_aiH = null;
var gv_aiI = null;
var gv_aiJ = null;
var gv_aiK = null;
var gv_aiL = null;
var gv_aiM = null;
var gv_aiN = null;
var gv_aiO = null;
var gv_aiP = null;
var gv_aiQ = null;
var gv_aiR = null;
var gv_aiS = null;
var gv_aiT = null;
var gv_aiU = null;
var gv_aiV = null;
var gv_aiW = null;
var gv_aiX = null;
var gv_aiY = null;
var gv_aiZ = null;
var gv_aja = null;
var gv_ajb = null;
var gv_ajc = null;
var gv_ajd = null;
var gv_aje = null;
var gv_ajf = null;
var gv_ajg = null;
var gv_ajh = null;
var gv_aji = null;
var gv_ajj = null;
var gv_ajk = null;
var gv_ajl = null;
var gv_ajm = null;
var gv_ajn = null;
var gv_ajo = null;
var gv_ajp = null;
var gv_ajq = null;
var gv_ajr = null;
var gv_ajs = null;
var gv_ajt = null;
var gv_aju = null;
var gv_ajv = null;
var gv_ajw = null;
var gv_ajx = null;
var gv_ajy = null;
var gv_ajz = null;
var gv_ajA = null;
var gv_ajB = null;
var gv_ajC = null;
var gv_ajD = null;
var gv_ajE = null;
var gv_ajF = null;
var gv_ajG = null;
var gv_ajH = null;
var gv_ajI = null;
var gv_ajJ = null;
var gv_ajK = null;
var gv_ajL = null;
var gv_ajM = null;
var gv_ajN = null;
var gv_ajO = null;
var gv_ajP = null;
var gv_ajQ = null;
var gv_ajR = null;
var gv_ajS = null;
var gv_ajT = null;
var gv_ajU = null;
var gv_ajV = null;
var gv_ajW = null;
var gv_ajX = null;
var gv_ajY = null;
var gv_ajZ = null;
var gv_aka = null;
var gv_akb = null;
var gv_akc = null;
var gv_akd = null;
var gv_ake = null;
var gv_akf = null;
var gv_akg = null;
var gv_akh = null;
var gv_aki = null;
var gv_akj = null;
var gv_akk = null;
var gv_akl = null;
var gv_akm = null;
var gv_akn = null;
var gv_ako = null;
var gv_akp = null;
var gv_akq = null;
var gv_akr = null;
var gv_aks = null;
var gv_akt = null;
var gv_aku = null;
var gv_akv = null;
var gv_akw = null;
var gv_akx = null;
var gv_aky = null;
var gv_akz = null;
var gv_akA = null;
var gv_akB = null;
var gv_akC = null;
var gv_akD = null;
var gv_akE = null;
var gv_akF = null;
var gv_akG = null;
var gv_akH = null;
var gv_akI = null;
var gv_akJ = null;
var gv_akK = null;
var gv_akL = null;
var gv_akM = null;
var gv_akN = null;
var gv_akO = null;
var gv_akP = null;
var gv_akQ = null;
var gv_akR = null;
var gv_akS = null;
var gv_akT = null;
var gv_akU = null;
var gv_akV = null;
var gv_akW = null;
var gv_akX = null;
var gv_akY = null;
var gv_akZ = null;
var gv_ala = null;
var gv_alb = null;
var gv_alc = null;
var gv_ald = [];
var gv_ale = [];
var gv_alf = [];
var gv_alg = [];
var gv_alh = [];
var gv_ali = [];
var gv_alj = [];
var gv_alk = [];
var gv_all = [];
var gv_alm = [];
var gv_aln = CreateGroup();
var gv_alo = CreateGroup();
var gv_alp = CreateGroup();
var gv_alq = CreateForce();
var gv_alr;
var gv_als;
var gv_alt = CreateForce();
var gv_alu;
var gv_alv;
var gv_alw;
var gv_alx;
var gv_aly;
var gv_alz;
var gv_alA;
var gv_alB;
var gv_alC;
var gv_alD;
var gv_alE;
var gv_alF;
var gv_alG;
var gv_alH;
var gv_alI = null;
var gv_alJ = [];
var gv_alK;
var gv_alL;
var gv_alM;
var gv_alN;
var gv_alO;
var gv_alP;
var gv_alQ;
var gv_alR;
var gv_alS = CreateGroup();
var gv_alT;
var gv_alU;
var gv_alV;
var gv_alW;
var gv_alX;
var gv_alY;
var gv_alZ;
var gv_ama;
var gv_amb;
var gv_amc;
var gv_amd;
var gv_ame = CreateGroup();
var gv_amf = [];
var gv_amg;
var gv_amh;
var gv_ami = "Abilities\\Spells\\Other\\Stampede\\StampedeMissileDeath.mdl";
var gv_amj = "Abilities\\Spells\\Items\\AIma\\AImaTarget.mdl";
var gv_amk = "Abilities\\Spells\\Undead\\DeathCoil\\DeathCoilSpecialArt.mdl";
var gv_aml = "Abilities\\Spells\\Items\\AIma\\AImaTarget.mdl";
var gv_amm = "Abilities\\Weapons\\FrostWyrmMissile\\FrostWyrmMissile.mdl";
var gv_amn =
  "Objects\\Spawnmodels\\Human\\HumanLargeDeathExplode\\HumanLargeDeathExplode.mdl";
var gv_amo;
var gv_amp = "Abilities\\Spells\\Other\\Drain\\DrainCaster.mdl";
var gv_amq = "Abilities\\Spells\\Human\\MarkOfChaos\\MarkOfChaosTarget.mdl";
var gv_amr = "Abilities\\Spells\\Human\\DispelMagic\\DispelMagicTarget.mdl";
var gv_ams = "Abilities\\Spells\\Human\\Slow\\SlowCaster.mdl";
var gv_amt;
var gv_amu = "Abilities\\Spells\\Other\\Charm\\CharmTarget.mdl";
var gv_amv;
var gv_amw = "Abilities\\Spells\\Orc\\WarStomp\\WarStompCaster.mdl";
var gv_amx;
var gv_amy = null;
var gv_amz = null;
var gv_amA;
var gv_amB = CreateGroup();
var gv_amC = false;
var gv_amD = 0;
var gv_amE = 0;
var gv_amF = CreateForce();
var GO = 15;
var gv_amG = Player(10);
var gv_amH = CreateGroup();
var gv_amI = false;
var gv_amJ = 0;
var gv_amK = 0;
var gv_amL = CreateForce();
var gv_amM = CreateGroup();
var gv_amN = false;
var gv_amO = 0;
var gv_amP = 0;
var gv_amQ = CreateForce();
var PO = 15;
var gv_amR = CreateGroup();
var gv_amS = false;
var gv_amT = 0;
var gv_amU = 0;
var gv_amV = CreateForce();
var TO = 15;
var gv_amW = CreateGroup();
var gv_amX = false;
var gv_amY = 0;
var gv_amZ = 0;
var gv_ana = CreateForce();
var YO = 10;
var gv_anb = CreateGroup();
var gv_anc = false;
var gv_and = 0;
var gv_ane = 0;
var gv_anf = CreateForce();
var oR = 10;
var gv_ang = CreateGroup();
var gv_anh = false;
var gv_ani = 0;
var gv_anj = 0;
var gv_ank = CreateForce();
var ER = 15;
var gv_anl = CreateGroup();
var gv_anm = false;
var gv_ann = 0;
var gv_ano = 0;
var gv_anp = CreateForce();
var gv_anq = CreateGroup();
var gv_anr = false;
var gv_ans = 0;
var gv_ant = 0;
var gv_anu = CreateForce();
var gv_anv = CreateGroup();
var gv_anw = false;
var gv_anx = 0;
var gv_any = 0;
var gv_anz = CreateForce();
var gv_anA = CreateGroup();
var gv_anB = false;
var gv_anC = 0;
var gv_anD = 0;
var gv_anE = CreateForce();
var kR = 15;
var gv_anF = CreateGroup();
var gv_anG = false;
var gv_anH = 0;
var gv_anI = 0;
var gv_anJ = CreateForce();
var gv_anK = false;
var gv_anL = false;
var gv_anM;
var gv_anN;
var gv_anO;
var gv_anP;
var gv_anQ;
var gv_anR;
var gv_anS;
var gv_anT;
var gv_anU;
var gv_anV;
var gv_anW;
var gv_anX;
var gv_anY;
var gv_anZ;
var gv_aoa;
var gv_aob = null;
var gv_aoc;
var gv_aod = [];
var gv_aoe;
var gv_aof = null;
var gv_aog;
var gv_aoh = null;
var gv_aoi;
var gv_aoj;
var gv_aok;
var gv_aol;
var gv_aom;
var gv_aon;
var gv_aoo;
var gv_aop;
var gv_aoq;
var gv_aor;
var gv_aos;
var gv_aot;
var gv_aou;
var gv_aov;
var gv_aow;
var gv_aox;
var gv_aoy;
var gv_aoz;
var gv_aoA;
var gv_aoB;
var gv_aoC;
var gv_aoD;
var gv_aoE;
var gv_aoF;
var gv_aoG = 0;
var gv_aoH = 0;
var gv_aoI = [];
var gv_aoJ = 0;
var gv_aoK = 0;
var gv_aoL = [];
var gv_aoM = [];
var gv_aoN = [];
var gv_aoO = [];
var gv_aoP = [];
var gv_aoQ = [];
var gv_aoR = [];
var gv_aoS = [];
var gv_aoT = [];
var gv_aoU = [];
var gv_aoV = [];
var gv_aoW = [];
var gv_aoX = [];
var gv_aoY = [];
var gv_aoZ = [];
var gv_apa = [];
var gv_apb = [];
var gv_apc = [];
var gv_apd = 0;
var gv_ape = 0;
var gv_apf = [];
var gv_apg = [];
var gv_aph = [];
var gv_api = [];
var gv_apj = 0;
var gv_apk = 0;
var gv_apl = [];
var gv_apm = [];
var gv_apn = [];
var gv_apo = 0;
var gv_app = 0;
var gv_apq = [];
var gv_apr = [];
var gv_aps = [];
var gv_apt = [];
var gv_apu = [];
var gv_apv = [];
var gv_apw = 0;
var gv_apx = 0;
var gv_apy = [];
var gv_apz = [];
var gv_apA = [];
var gv_apB = [];
var gv_apC = [];
var gv_apD = [];
var gv_apE = [];
var gv_apF = [];
var gv_apG = [];
var gv_apH = [];
var gv_apI = [];
var gv_apJ = [];
var gv_apK = [];
var gv_apL;
var gv_apM = [];
var gv_apN = [];
var gv_apO = [];
var gv_apP = 0;
var gv_apQ = 0;
var gv_apR = [];
var gv_apS = [];
var gv_apT = [];
var gv_apU = [];
var gv_apV = 0;
var gv_apW = 0;
var gv_apX = [];
var gv_apY = [];
var gv_apZ = [];
var gv_aqa = [];
var gv_aqb = [];
var gv_aqc = [];
var gv_aqd = [];
var gv_aqe = 0;
var gv_aqf = 0;
var gv_aqg = [];
var gv_aqh = [];
var gv_aqi = [];
var gv_aqj = [];
var gv_aqk = [];
var gv_aql = 0;
var gv_aqm = 0;
var gv_aqn = [];
var gv_aqo = [];
var gv_aqp = [];
var gv_aqq = [];
var gv_aqr = [];
var gv_aqs = [];
var gv_aqt = [];
var gv_aqu = [];
var gv_aqv = 0;
var gv_aqw = 0;
var gv_aqx = [];
var gv_aqy = [];
var gv_aqz = [];
var gv_aqA = [];
var gv_aqB = 0;
var gv_aqC = 0;
var gv_aqD = [];
var gv_aqE = [];
var gv_aqF = [];
var gv_aqG = [];
var gv_aqH = 0;
var gv_aqI = 0;
var gv_aqJ = [];
var gv_aqK = [];
var gv_aqL = [];
var gv_aqM = 0;
var gv_aqN = 0;
var gv_aqO = [];
var gv_aqP = [];
var gv_aqQ = [];
var gv_aqR = [];
var gv_aqS = [];
var gv_aqT = [];
var gv_aqU = [];
var gv_aqV = 0;
var gv_aqW = 0;
var gv_aqX = [];
var gv_aqY = [];
var gv_aqZ = [];
var gv_ara = [];
var gv_arb = [];
var gv_arc = [];
var gv_ard = [];
var gv_are = [];
var gv_arf = 0;
var gv_arg = 0;
var gv_arh = [];
var gv_ari = [];
var gv_arj = 0;
var gv_ark = 0;
var gv_arl = [];
var gv_arm = [];
var gv_arn = 0;
var gv_aro = 0;
var gv_arp = [];
var gv_arq = [];
var gv_arr = [];
var gv_ars = [];
var gv_art = [];
var gv_aru = [];
var gv_arv = 0;
var gv_arw = 0;
var gv_arx = [];
var gv_ary = [];
var gv_arz = [];
var gv_arA = [];
var gv_arB = [];
var gv_arC = 0;
var gv_arD = 0;
var gv_arE = [];
var gv_arF = [];
var gv_arG = 0;
var gv_arH = 0;
var gv_arI = [];
var gv_arJ = [];
var gv_arK = 0;
var gv_arL = 0;
var gv_arM = [];
var gv_arN = [];
var gv_arO = [];
var gv_arP = [];
var gv_arQ = [];
var gv_arR = [];
var gv_arS = [];
var gv_arT = 0;
var gv_arU = 0;
var gv_arV = [];
var gv_arW = [];
var gv_arX = [];
var gv_arY = [];
var gv_arZ = 0;
var gv_asa = 0;
var gv_asb = [];
var gv_asc = [];
var gv_asd = [];
var gv_ase = [];
var gv_asf = [];
var gv_asg = 0;
var gv_ash = 0;
var gv_asi = [];
var gv_asj = [];
var gv_ask = [];
var gv_asl = [];
var gv_asm = [];
var gv_asn = [];
var gv_aso = 0;
var gv_asp = 0;
var gv_asq = [];
var gv_asr = [];
var gv_ass = [];
var gv_ast = 0;
var gv_asu = 0;
var gv_asv = [];
var gv_asw = [];
var gv_asx = [];
var gv_asy = 0;
var gv_asz = 0;
var gv_asA = [];
var gv_asB = [];
var gv_asC = [];
var gv_asD = [];
var gv_asE = [];
var gv_asF = [];
var gv_asG = 0;
var gv_asH = 0;
var gv_asI = [];
var gv_asJ = [];
var gv_asK = [];
var gv_asL = [];
var gv_asM = 0;
var gv_asN = 0;
var gv_asO = [];
var gv_asP = [];
var gv_asQ = [];
var gv_asR = [];
var gv_asS = 0;
var gv_asT = 0;
var gv_asU = [];
var gv_asV = [];
var gv_asW = [];
var gv_asX = [];
var gv_asY = [];
var gv_asZ = 0;
var gv_ata = 0;
var gv_atb = [];
var gv_atc = [];
var gv_atd = [];
var gv_ate = [];
var gv_atf = 0;
var gv_atg = 0;
var gv_ath = [];
var gv_ati = [];
var gv_atj = [];
var gv_atk = [];
var gv_atl = 0;
var gv_atm = 0;
var gv_atn = [];
var gv_ato = [];
var gv_atp = [];
var gv_atq = 0;
var gv_atr = 0;
var gv_ats = [];
var gv_att = [];
var gv_atu = [];
var gv_atv = [];
var gv_atw = [];
var gv_atx = [];
var gv_aty = [];
var gv_atz = [];
var gv_atA = 0;
var gv_atB = 0;
var gv_atC = [];
var gv_atD = [];
var gv_atE = [];
var gv_atF = [];
var gv_atG = [];
var gv_atH = [];
var gv_atI = [];
var gv_atJ = [];
var gv_atK = [];
var gv_atL = [];
var gv_atM = [];
var gv_atN = 0;
var gv_atO = 0;
var gv_atP = [];
var gv_atQ = [];
var gv_atR = [];
var gv_atS = [];
var gv_atT = [];
var gv_atU = 0;
var gv_atV = 0;
var gv_atW = [];
var gv_atX = [];
var gv_atY = [];
var gv_atZ = [];
var gv_aua = 0;
var gv_aub = 0;
var gv_auc = [];
var gv_aud = [];
var gv_aue = [];
var gv_auf = [];
var gv_aug = 0;
var gv_auh = 0;
var gv_aui = [];
var gv_auj = [];
var gv_auk = [];
var gv_aul = [];
var gv_aum = [];
var gv_aun = [];
var gv_auo = 0;
var gv_aup = 0;
var gv_auq = [];
var gv_aur = [];
var gv_aus = [];
var gv_aut = [];
var gv_auu = [];
var gv_auv = 0;
var gv_auw = 0;
var gv_aux = [];
var gv_auy;
var gv_auz;
var gv_auA = [];
var gv_auB = [];
var gv_auC = [];
var gv_auD = 0;
var gv_auE = 0;
var gv_auF = [];
var gv_auG = [];
var gv_auH = 0;
var gv_auI = 0;
var gv_auJ = [];
var gv_auK = [];
var gv_auL = [];
var gv_auM = [];
var gv_auN = [];
var gv_auO = [];
var gv_auP = 0;
var gv_auQ = 0;
var gv_auR = [];
var gv_auS = [];
var gv_auT = [];
var gv_auU = [];
var gv_auV = [];
var gv_auW = [];
var gv_auX = 0;
var gv_auY = 0;
var gv_auZ = [];
var gv_ava = [];
var gv_avb = [];
var gv_avc = [];
var gv_avd = 0;
var gv_ave = 0;
var gv_avf = [];
var gv_avg = [];
var gv_avh = [];
var gv_avi = [];
var gv_avj = [];
var gv_avk = [];
var gv_avl = 0;
var gv_avm = 0;
var gv_avn = [];
var gv_avo = [];
var gv_avp = [];
var gv_avq = [];
var gv_avr = 0;
var gv_avs = 0;
var gv_avt = [];
var gv_avu = [];
var gv_avv = [];
var gv_avw = [];
var gv_avx = [];
var gv_avy = 0;
var gv_avz = 0;
var gv_avA = [];
var gv_avB = [];
var gv_avC = [];
var gv_avD = [];
var gv_avE = [];
var gv_avF = 0;
var gv_avG = 0;
var gv_avH = [];
var gv_avI = [];
var gv_avJ = [];
var gv_avK = [];
var gv_avL;
var gv_avM = [];
var gv_avN = [];
var gv_avO = 0;
var gv_avP = 0;
var gv_avQ = [];
var gv_avR = [];
var gv_avS = [];
var gv_avT = [];
var gv_avU = [];
var gv_avV = 0;
var gv_avW = 0;
var gv_avX = [];
var gv_avY = [];
var gv_avZ = [];
var gv_awa = 0;
var gv_awb = 0;
var gv_awc = [];
var gv_awd = [];
var gv_awe = [];
var gv_awf = [];
var gv_awg = [];
var gv_awh = [];
var gv_awi = [];
var gv_awj = [];
var gv_awk = [];
var gv_awl = [];
var gv_awm = [];
var gv_awn = [];
var gv_awo = [];
var gv_awp = [];
var gv_awq = [];
var gv_awr = [];
var gv_aws = [];
var gv_awt = [];
var gv_awu = [];
var gv_awv = [];
var gv_aww = [];
var gv_awx = [];
var gv_awy = [];
var gv_awz = [];
var gv_awA = [];
var gv_awB = [];
var gv_awC = [];
var gv_awD = [];
var gv_awE = [];
var gv_awF = [];
var gv_awG = [];
var gv_awH = [];
var gv_awI = [];
var gv_awJ = [];
var gv_awK = [];
var gv_awL = [];
var gv_awM = [];
var gv_awN = [];
var gv_awO = [];
var gv_awP = [];
var gv_awQ = [];
var gv_awR = [];
var gv_awS = [];
var gv_awT = [];
var gv_awU = [];
var gv_awV = [];
var gv_awW = [];
var gv_awX = [];
var gv_awY = [];
var gv_awZ = [];
var gv_axa = [];
var gv_axb = [];
var gv_axc = [];
var gv_axd = [];
var gv_axe = [];
var gv_axf = [];
var gv_axg = [];
var gv_axh = [];
var gv_axi = [];
var gv_axj;
var gv_axk;
var gv_axl;
var gv_axm;
var gv_axn;
var gv_axo;
var gv_axp;
var gv_axq;
var gv_axr;
var gv_axs;
var gv_axt;
var gv_axu;
var gv_axv;
var gv_axw;
var gv_axx;
var gv_axy;
var gv_axz;
var gv_axA;
var gv_axB;
var gv_axC;
var gv_axD;
var gv_axE;
var gv_axF;
var gv_axG;
var gv_axH;
var gv_axI;
var gv_axJ;
var gv_axK;
var gv_axL;
var gv_axM;
var gv_axN = [];
var gv_axO = [];
var gv_axP;
var gv_axQ;
var gv_axR;
var gv_axS;
var gv_axT;
var gv_axU;
var gv_axV;
var gv_axW;
var gv_axX;
var gv_axY;
var gv_axZ;
var gv_aya;
var gv_ayb;
var gv_ayc = null;
var gv_ayd = 0.0;
var gv_aye = 0.0;
var gv_ayf = null;
var gv_ayg = null;
var gv_ayh = null;

function f_ayi(lv_ayj) {
  if (
    GetInventoryIndexOfItemTypeBJ(lv_ayj, "sehr") +
      GetInventoryIndexOfItemTypeBJ(lv_ayj, "thle") +
      GetInventoryIndexOfItemTypeBJ(lv_ayj, "kysn") >
    0
  ) {
    return true;
  } else {
    if (
      GetInventoryIndexOfItemTypeBJ(lv_ayj, "sclp") +
        GetInventoryIndexOfItemTypeBJ(lv_ayj, "sorf") +
        GetInventoryIndexOfItemTypeBJ(lv_ayj, "phlt") >
      0
    ) {
      return true;
    } else {
      if (
        GetInventoryIndexOfItemTypeBJ(lv_ayj, "skrt") +
          GetInventoryIndexOfItemTypeBJ(lv_ayj, "glsk") +
          GetInventoryIndexOfItemTypeBJ(lv_ayj, "shwd") >
        0
      ) {
        return true;
      } else {
        return false;
      }
    }
  }
}
function f_ayk(lv_ayl) {
  if (
    GetInventoryIndexOfItemTypeBJ(lv_ayl, "I018") +
      GetInventoryIndexOfItemTypeBJ(lv_ayl, "I017") +
      GetInventoryIndexOfItemTypeBJ(lv_ayl, "I014") >
    0
  ) {
    return true;
  } else {
    if (
      GetInventoryIndexOfItemTypeBJ(lv_ayl, "I01A") +
        GetInventoryIndexOfItemTypeBJ(lv_ayl, "I015") +
        GetInventoryIndexOfItemTypeBJ(lv_ayl, "I019") >
      0
    ) {
      return true;
    } else {
      if (
        GetInventoryIndexOfItemTypeBJ(lv_ayl, "I01B") +
          GetInventoryIndexOfItemTypeBJ(lv_ayl, "I016") >
        0
      ) {
        return true;
      } else {
        return false;
      }
    }
  }
}
function f_aym(lv_ayn) {
  if (
    GetInventoryIndexOfItemTypeBJ(lv_ayn, "oslo") +
      GetInventoryIndexOfItemTypeBJ(lv_ayn, "rde0") +
      GetInventoryIndexOfItemTypeBJ(lv_ayn, "ram3") >
    0
  ) {
    return true;
  } else {
    if (
      GetInventoryIndexOfItemTypeBJ(lv_ayn, "ccmd") +
        GetInventoryIndexOfItemTypeBJ(lv_ayn, "sor1") +
        GetInventoryIndexOfItemTypeBJ(lv_ayn, "sor5") >
      0
    ) {
      return true;
    } else {
      if (
        GetInventoryIndexOfItemTypeBJ(lv_ayn, "shcw") +
          GetInventoryIndexOfItemTypeBJ(lv_ayn, "tels") +
          GetInventoryIndexOfItemTypeBJ(lv_ayn, "sfog") >
        0
      ) {
        return true;
      } else {
        if (
          GetInventoryIndexOfItemTypeBJ(lv_ayn, "klmm") +
            GetInventoryIndexOfItemTypeBJ(lv_ayn, "mnsf") +
            GetInventoryIndexOfItemTypeBJ(lv_ayn, "ocor") >
          0
        ) {
          return true;
        } else {
          return false;
        }
      }
    }
  }
}
function f_ayo(lv_ayp) {
  if (
    GetInventoryIndexOfItemTypeBJ(lv_ayp, "oven") +
      GetInventoryIndexOfItemTypeBJ(lv_ayp, "rnsp") +
      GetInventoryIndexOfItemTypeBJ(lv_ayp, "rugt") >
    0
  ) {
    return true;
  } else {
    if (
      GetInventoryIndexOfItemTypeBJ(lv_ayp, "rots") +
        GetInventoryIndexOfItemTypeBJ(lv_ayp, "sora") +
        GetInventoryIndexOfItemTypeBJ(lv_ayp, "sor6") >
      0
    ) {
      return true;
    } else {
      if (
        GetInventoryIndexOfItemTypeBJ(lv_ayp, "shtm") +
          GetInventoryIndexOfItemTypeBJ(lv_ayp, "rej4") +
          GetInventoryIndexOfItemTypeBJ(lv_ayp, "flag") >
        0
      ) {
        return true;
      } else {
        if (
          GetInventoryIndexOfItemTypeBJ(lv_ayp, "rej2") +
            GetInventoryIndexOfItemTypeBJ(lv_ayp, "rej1") +
            GetInventoryIndexOfItemTypeBJ(lv_ayp, "ofir") >
          0
        ) {
          return true;
        } else {
          return false;
        }
      }
    }
  }
}
function f_ayq(lv_ayr) {
  if (
    GetInventoryIndexOfItemTypeBJ(lv_ayr, "sprn") +
      GetInventoryIndexOfItemTypeBJ(lv_ayr, "gsou") +
      GetInventoryIndexOfItemTypeBJ(lv_ayr, "stre") >
    0
  ) {
    return true;
  } else {
    if (
      GetInventoryIndexOfItemTypeBJ(lv_ayr, "thdm") +
        GetInventoryIndexOfItemTypeBJ(lv_ayr, "tbar") +
        GetInventoryIndexOfItemTypeBJ(lv_ayr, "tfar") >
      0
    ) {
      return true;
    } else {
      if (
        GetInventoryIndexOfItemTypeBJ(lv_ayr, "tbsm") +
          GetInventoryIndexOfItemTypeBJ(lv_ayr, "spre") +
          GetInventoryIndexOfItemTypeBJ(lv_ayr, "sbok") >
        0
      ) {
        return true;
      } else {
        if (
          GetInventoryIndexOfItemTypeBJ(lv_ayr, "stwa") +
            GetInventoryIndexOfItemTypeBJ(lv_ayr, "tbak") +
            GetInventoryIndexOfItemTypeBJ(lv_ayr, "tlum") >
          0
        ) {
          return true;
        } else {
          return false;
        }
      }
    }
  }
}
function f_ays(lv_ayt) {
  var lv_ayu = 0;
  if (
    StringHash(GetPlayerName(GetOwningPlayer(lv_ayt))) == 381224678 ||
    StringHash(GetPlayerName(GetOwningPlayer(lv_ayt))) == 1995650487
  ) {
    lv_ayu = 1;
    if (
      GetInventoryIndexOfItemTypeBJ(lv_ayt, "lgdh") > 0 &&
      GetInventoryIndexOfItemTypeBJ(lv_ayt, "afac") > 0 &&
      GetInventoryIndexOfItemTypeBJ(lv_ayt, "rat9") > 0
    ) {
      lv_ayu = lv_ayu + 1;
    }
    if (
      GetInventoryIndexOfItemTypeBJ(lv_ayt, "mcou") > 0 &&
      GetInventoryIndexOfItemTypeBJ(lv_ayt, "hcun") +
        GetInventoryIndexOfItemTypeBJ(lv_ayt, "rde2") +
        GetInventoryIndexOfItemTypeBJ(lv_ayt, "belv") >
        0
    ) {
      lv_ayu = lv_ayu + 1;
    }
    if (
      GetInventoryIndexOfItemTypeBJ(lv_ayt, "rat9") > 0 &&
      GetInventoryIndexOfItemTypeBJ(lv_ayt, "hcun") +
        GetInventoryIndexOfItemTypeBJ(lv_ayt, "rde2") >
        0
    ) {
      lv_ayu = lv_ayu + 1;
    }
    if (
      GetInventoryIndexOfItemTypeBJ(lv_ayt, "I00B") +
        GetInventoryIndexOfItemTypeBJ(lv_ayt, "I00L") +
        GetInventoryIndexOfItemTypeBJ(lv_ayt, "I00T") >
        0 &&
      GetInventoryIndexOfItemTypeBJ(lv_ayt, "I000") +
        GetInventoryIndexOfItemTypeBJ(lv_ayt, "I001") +
        GetInventoryIndexOfItemTypeBJ(lv_ayt, "I00H") >
        0
    ) {
      lv_ayu = lv_ayu + 1;
    }
    if (
      GetInventoryIndexOfItemTypeBJ(lv_ayt, "I005") +
        GetInventoryIndexOfItemTypeBJ(lv_ayt, "arsh") >
      0
    ) {
      lv_ayu = lv_ayu + 1;
    }
    if (
      GetInventoryIndexOfItemTypeBJ(lv_ayt, "I065") +
        GetInventoryIndexOfItemTypeBJ(lv_ayt, "I062") >
      0
    ) {
      lv_ayu = lv_ayu + 1;
    }
    if (
      GetInventoryIndexOfItemTypeBJ(lv_ayt, "rwiz") +
        GetInventoryIndexOfItemTypeBJ(lv_ayt, "I00F") +
        GetInventoryIndexOfItemTypeBJ(lv_ayt, "I00O") +
        GetInventoryIndexOfItemTypeBJ(lv_ayt, "I00W") >
      0
    ) {
      lv_ayu = lv_ayu + 1;
    }
    if (
      GetInventoryIndexOfItemTypeBJ(lv_ayt, "tgxp") +
        GetInventoryIndexOfItemTypeBJ(lv_ayt, "jpnt") >
      0
    ) {
      lv_ayu = lv_ayu + 2;
    } else {
      if (GetInventoryIndexOfItemTypeBJ(lv_ayt, "tmsc") > 0) {
        lv_ayu = lv_ayu + 1;
      }
    }
    if (
      GetInventoryIndexOfItemTypeBJ(lv_ayt, "bzbe") > 0 &&
      GetUnitTypeId(lv_ayt) == "Edem"
    ) {
      lv_ayu = lv_ayu + 1;
    }
    if (GetInventoryIndexOfItemTypeBJ(lv_ayt, "k3m3") > 0) {
      lv_ayu = lv_ayu + 1;
    }
    if (
      GetInventoryIndexOfItemTypeBJ(lv_ayt, "kybl") +
        GetInventoryIndexOfItemTypeBJ(lv_ayt, "mgtk") >
      0
    ) {
      lv_ayu = lv_ayu + 1;
    }
    if (
      GetInventoryIndexOfItemTypeBJ(lv_ayt, "hbth") +
        GetInventoryIndexOfItemTypeBJ(lv_ayt, "sor8") +
        GetInventoryIndexOfItemTypeBJ(lv_ayt, "ram1") +
        GetInventoryIndexOfItemTypeBJ(lv_ayt, "scul") >
      0
    ) {
      lv_ayu = lv_ayu + 1;
    }
    if (
      GetInventoryIndexOfItemTypeBJ(lv_ayt, "ledg") +
        GetInventoryIndexOfItemTypeBJ(lv_ayt, "kygh") +
        GetInventoryIndexOfItemTypeBJ(lv_ayt, "bzbf") +
        GetInventoryIndexOfItemTypeBJ(lv_ayt, "gmfr") >
      0
    ) {
      lv_ayu = lv_ayu + 1;
    }
    if (GetInventoryIndexOfItemTypeBJ(lv_ayt, "dphe") > 0) {
      lv_ayu = lv_ayu + 1;
    }
    if (GetInventoryIndexOfItemTypeBJ(lv_ayt, "wolg") > 0) {
      lv_ayu = lv_ayu + 1;
    }
    if (f_ayq(lv_ayt)) {
      lv_ayu = lv_ayu + 1;
    }
    if (f_ayi(lv_ayt)) {
      lv_ayu = lv_ayu + 1;
    }
    if (f_ayk(lv_ayt)) {
      lv_ayu = lv_ayu + 1;
    }
    if (f_aym(lv_ayt) || f_ayo(lv_ayt)) {
      lv_ayu = lv_ayu + 1;
    }
  }
  if (f_aym(lv_ayt) || f_ayo(lv_ayt)) {
    lv_ayu = lv_ayu + 1;
  }
  return R2I(lv_ayu * gv_aak);
}
function f_ayv() {
  var lv_ayw = 8;
  do {
    if (lv_ayw > 15) {
      break;
    }
    gv_aam[lv_ayw] = 1;
    gv_aan[lv_ayw] = 1;
    lv_ayw = lv_ayw + 1;
  } while (true);
  lv_ayw = 1;
  gv_aav[lv_ayw] = "lgdh";
  gv_aaA[lv_ayw] = 4;
  lv_ayw = lv_ayw + 1;
  gv_aav[lv_ayw] = "ajen";
  gv_aay[lv_ayw] = 2;
  lv_ayw = lv_ayw + 1;
  gv_aav[lv_ayw] = "clfm";
  gv_aaw[lv_ayw] = 2;
  lv_ayw = lv_ayw + 1;
  gv_aav[lv_ayw] = "clsd";
  gv_aaz[lv_ayw] = 3;
  lv_ayw = lv_ayw + 1;
  gv_aav[lv_ayw] = "afac";
  gv_aax[lv_ayw] = 5;
  lv_ayw = lv_ayw + 1;
  gv_aav[lv_ayw] = "bgst";
  gv_aax[lv_ayw] = 10;
  gv_aay[lv_ayw] = 5;
  lv_ayw = lv_ayw + 1;
  gv_aav[lv_ayw] = "bspd";
  gv_aay[lv_ayw] = 10;
  lv_ayw = lv_ayw + 1;
  gv_aav[lv_ayw] = "belv";
  gv_aax[lv_ayw] = 10;
  lv_ayw = lv_ayw + 1;
  gv_aav[lv_ayw] = "odef";
  gv_aaA[lv_ayw] = 12;
  lv_ayw = lv_ayw + 1;
  gv_aav[lv_ayw] = "crys";
  gv_aaw[lv_ayw] = 6;
  lv_ayw = lv_ayw + 1;
  gv_aav[lv_ayw] = "rst1";
  gv_aaz[lv_ayw] = 12;
  lv_ayw = lv_ayw + 1;
  gv_aav[lv_ayw] = "dsum";
  gv_aaw[lv_ayw] = 3;
  lv_ayw = lv_ayw + 1;
  gv_aav[lv_ayw] = "hcun";
  gv_aaz[lv_ayw] = 20;
  lv_ayw = lv_ayw + 1;
  gv_aav[lv_ayw] = "rat6";
  gv_aay[lv_ayw] = 20;
  lv_ayw = lv_ayw + 1;
  gv_aav[lv_ayw] = "cnob";
  gv_aax[lv_ayw] = 20;
  gv_aay[lv_ayw] = 10;
  lv_ayw = lv_ayw + 1;
  gv_aav[lv_ayw] = "gcel";
  gv_aaw[lv_ayw] = 7;
  lv_ayw = lv_ayw + 1;
  gv_aav[lv_ayw] = "hval";
  gv_aaw[lv_ayw] = 6;
  lv_ayw = lv_ayw + 1;
  gv_aav[lv_ayw] = "ratc";
  gv_aay[lv_ayw] = 5;
  gv_aaz[lv_ayw] = 5;
  lv_ayw = lv_ayw + 1;
  gv_aav[lv_ayw] = "prvt";
  gv_aaA[lv_ayw] = 20;
  lv_ayw = lv_ayw + 1;
  gv_aav[lv_ayw] = "rde1";
  gv_aax[lv_ayw] = 25;
  gv_aay[lv_ayw] = 10;
  lv_ayw = lv_ayw + 1;
  gv_aav[lv_ayw] = "stel";
  gv_aaw[lv_ayw] = 10;
  lv_ayw = lv_ayw + 1;
  gv_aav[lv_ayw] = "rde3";
  gv_aax[lv_ayw] = 20;
  lv_ayw = lv_ayw + 1;
  gv_aav[lv_ayw] = "rde2";
  gv_aay[lv_ayw] = 12;
  gv_aaz[lv_ayw] = 12;
  lv_ayw = lv_ayw + 1;
  gv_aav[lv_ayw] = "ssil";
  gv_aaw[lv_ayw] = 13;
  lv_ayw = lv_ayw + 1;
  gv_aav[lv_ayw] = "evtl";
  gv_aaw[lv_ayw] = 5;
  gv_aaz[lv_ayw] = 15;
  lv_ayw = lv_ayw + 1;
  gv_aav[lv_ayw] = "brac";
  gv_aax[lv_ayw] = 15;
  gv_aay[lv_ayw] = 15;
  gv_aaz[lv_ayw] = 15;
  lv_ayw = lv_ayw + 1;
  gv_aav[lv_ayw] = "ciri";
  gv_aax[lv_ayw] = 30;
  gv_aay[lv_ayw] = 12;
  gv_aaB[lv_ayw] = 5;
  lv_ayw = lv_ayw + 1;
  gv_aav[lv_ayw] = "lhst";
  gv_aaC[lv_ayw] = 11;
  lv_ayw = lv_ayw + 1;
  gv_aav[lv_ayw] = "rlif";
  gv_aax[lv_ayw] = 45;
  lv_ayw = lv_ayw + 1;
  gv_aav[lv_ayw] = "ward";
  gv_aaw[lv_ayw] = 20;
  lv_ayw = lv_ayw + 1;
  gv_aav[lv_ayw] = "sbch";
  gv_aax[lv_ayw] = 55;
  lv_ayw = lv_ayw + 1;
  gv_aav[lv_ayw] = "rag1";
  gv_aax[lv_ayw] = 75;
  gv_aay[lv_ayw] = 10;
  lv_ayw = lv_ayw + 1;
  gv_aav[lv_ayw] = "rwiz";
  gv_aay[lv_ayw] = 50;
  lv_ayw = lv_ayw + 1;
  gv_aav[lv_ayw] = "I006";
  gv_aaA[lv_ayw] = 25;
  lv_ayw = lv_ayw + 1;
  gv_aav[lv_ayw] = "I005";
  gv_aaA[lv_ayw] = 18;
  lv_ayw = lv_ayw + 1;
  gv_aav[lv_ayw] = "I009";
  gv_aaA[lv_ayw] = 15;
  lv_ayw = lv_ayw + 1;
  gv_aav[lv_ayw] = "I008";
  gv_aaA[lv_ayw] = 35;
  lv_ayw = lv_ayw + 1;
  gv_aav[lv_ayw] = "I00B";
  gv_aaA[lv_ayw] = 50;
  lv_ayw = lv_ayw + 1;
  gv_aav[lv_ayw] = "I00C";
  gv_aaA[lv_ayw] = 25;
  lv_ayw = lv_ayw + 1;
  gv_aav[lv_ayw] = "I000";
  gv_aaz[lv_ayw] = 40;
  lv_ayw = lv_ayw + 1;
  gv_aav[lv_ayw] = "I003";
  gv_aaw[lv_ayw] = 15;
  gv_aaz[lv_ayw] = 15;
  lv_ayw = lv_ayw + 1;
  gv_aav[lv_ayw] = "I002";
  gv_aaw[lv_ayw] = 28;
  lv_ayw = lv_ayw + 1;
  gv_aav[lv_ayw] = "I001";
  gv_aaw[lv_ayw] = 5;
  gv_aaz[lv_ayw] = 30;
  lv_ayw = lv_ayw + 1;
  gv_aav[lv_ayw] = "I00I";
  gv_aaC[lv_ayw] = 15;
  lv_ayw = lv_ayw + 1;
  gv_aav[lv_ayw] = "I00E";
  gv_aax[lv_ayw] = 55;
  gv_aay[lv_ayw] = 35;
  lv_ayw = lv_ayw + 1;
  gv_aav[lv_ayw] = "I00F";
  gv_aay[lv_ayw] = 65;
  lv_ayw = lv_ayw + 1;
  gv_aav[lv_ayw] = "I00G";
  gv_aaw[lv_ayw] = 33;
  lv_ayw = lv_ayw + 1;
  gv_aav[lv_ayw] = "I00H";
  gv_aaz[lv_ayw] = 50;
  lv_ayw = lv_ayw + 1;
  gv_aav[lv_ayw] = "I00L";
  gv_aaA[lv_ayw] = 60;
  lv_ayw = lv_ayw + 1;
  gv_aav[lv_ayw] = "I00D";
  gv_aax[lv_ayw] = 65;
  lv_ayw = lv_ayw + 1;
  gv_aav[lv_ayw] = "I00K";
  gv_aaA[lv_ayw] = 30;
  lv_ayw = lv_ayw + 1;
  gv_aav[lv_ayw] = "I00U";
  gv_aaA[lv_ayw] = 45;
  lv_ayw = lv_ayw + 1;
  gv_aav[lv_ayw] = "I00Q";
  gv_aaw[lv_ayw] = 15;
  gv_aaB[lv_ayw] = 10;
  lv_ayw = lv_ayw + 1;
  gv_aav[lv_ayw] = "I00O";
  gv_aay[lv_ayw] = 75;
  lv_ayw = lv_ayw + 1;
  gv_aav[lv_ayw] = "I00M";
  gv_aax[lv_ayw] = 75;
  gv_aay[lv_ayw] = 40;
  lv_ayw = lv_ayw + 1;
  gv_aav[lv_ayw] = "I00N";
  gv_aax[lv_ayw] = 75;
  lv_ayw = lv_ayw + 1;
  gv_aav[lv_ayw] = "I00T";
  gv_aaA[lv_ayw] = 75;
  lv_ayw = lv_ayw + 1;
  gv_aav[lv_ayw] = "I00P";
  gv_aaw[lv_ayw] = 40;
  lv_ayw = lv_ayw + 1;
  gv_aav[lv_ayw] = "I00R";
  gv_aaz[lv_ayw] = 75;
  lv_ayw = lv_ayw + 1;
  gv_aav[lv_ayw] = "I00Y";
  gv_aaw[lv_ayw] = 50;
  lv_ayw = lv_ayw + 1;
  gv_aav[lv_ayw] = "I00Z";
  gv_aaw[lv_ayw] = 10;
  gv_aaC[lv_ayw] = 25;
  lv_ayw = lv_ayw + 1;
  gv_aav[lv_ayw] = "I013";
  gv_aaA[lv_ayw] = 25;
  lv_ayw = lv_ayw + 1;
  gv_aav[lv_ayw] = "I012";
  gv_aaA[lv_ayw] = 90;
  lv_ayw = lv_ayw + 1;
  gv_aav[lv_ayw] = "I010";
  gv_aaw[lv_ayw] = 35;
  gv_aaB[lv_ayw] = 10;
  lv_ayw = lv_ayw + 1;
  gv_aav[lv_ayw] = "I00W";
  gv_aay[lv_ayw] = 85;
  lv_ayw = lv_ayw + 1;
  gv_aav[lv_ayw] = "I00X";
  gv_aax[lv_ayw] = 125;
  lv_ayw = lv_ayw + 1;
  gv_aav[lv_ayw] = "I00V";
  gv_aax[lv_ayw] = 180;
  lv_ayw = lv_ayw + 1;
  gv_aav[lv_ayw] = "olig";
  gv_aaA[lv_ayw] = 40;
  lv_ayw = lv_ayw + 1;
  gv_aav[lv_ayw] = "oli2";
  gv_aaA[lv_ayw] = 25;
  lv_ayw = lv_ayw + 1;
  gv_aav[lv_ayw] = "oslo";
  gv_aaA[lv_ayw] = 65;
  lv_ayw = lv_ayw + 1;
  gv_aav[lv_ayw] = "oven";
  gv_aaA[lv_ayw] = 90;
  lv_ayw = lv_ayw + 1;
  gv_aav[lv_ayw] = "pgin";
  gv_aaA[lv_ayw] = 25;
  lv_ayw = lv_ayw + 1;
  gv_aav[lv_ayw] = "oflg";
  gv_aaA[lv_ayw] = 25;
  lv_ayw = lv_ayw + 1;
  gv_aav[lv_ayw] = "rde0";
  gv_aaA[lv_ayw] = 50;
  lv_ayw = lv_ayw + 1;
  gv_aav[lv_ayw] = "rnsp";
  gv_aaA[lv_ayw] = 100;
  lv_ayw = lv_ayw + 1;
  gv_aav[lv_ayw] = "ram1";
  gv_aaA[lv_ayw] = 25;
  lv_ayw = lv_ayw + 1;
  gv_aav[lv_ayw] = "ram2";
  gv_aaA[lv_ayw] = 40;
  lv_ayw = lv_ayw + 1;
  gv_aav[lv_ayw] = "ram3";
  gv_aaA[lv_ayw] = 65;
  lv_ayw = lv_ayw + 1;
  gv_aav[lv_ayw] = "rugt";
  gv_aaA[lv_ayw] = 80;
  lv_ayw = lv_ayw + 1;
  gv_aav[lv_ayw] = "schl";
  gv_aay[lv_ayw] = 15;
  gv_aaz[lv_ayw] = 15;
  gv_aaA[lv_ayw] = 15;
  lv_ayw = lv_ayw + 1;
  gv_aav[lv_ayw] = "horl";
  gv_aaA[lv_ayw] = 25;
  lv_ayw = lv_ayw + 1;
  gv_aav[lv_ayw] = "ccmd";
  gv_aay[lv_ayw] = 15;
  gv_aaz[lv_ayw] = 15;
  gv_aaA[lv_ayw] = 40;
  lv_ayw = lv_ayw + 1;
  gv_aav[lv_ayw] = "rots";
  gv_aay[lv_ayw] = 25;
  gv_aaz[lv_ayw] = 25;
  gv_aaA[lv_ayw] = 50;
  lv_ayw = lv_ayw + 1;
  gv_aav[lv_ayw] = "srtl";
  gv_aaA[lv_ayw] = 15;
  lv_ayw = lv_ayw + 1;
  gv_aav[lv_ayw] = "srbd";
  gv_aaA[lv_ayw] = 35;
  lv_ayw = lv_ayw + 1;
  gv_aav[lv_ayw] = "sor1";
  gv_aaA[lv_ayw] = 50;
  lv_ayw = lv_ayw + 1;
  gv_aav[lv_ayw] = "sora";
  gv_aaA[lv_ayw] = 75;
  lv_ayw = lv_ayw + 1;
  gv_aav[lv_ayw] = "sor4";
  gv_aax[lv_ayw] = 40;
  gv_aaz[lv_ayw] = 30;
  lv_ayw = lv_ayw + 1;
  gv_aav[lv_ayw] = "sor3";
  gv_aaw[lv_ayw] = 15;
  gv_aaz[lv_ayw] = 20;
  lv_ayw = lv_ayw + 1;
  gv_aav[lv_ayw] = "sor2";
  gv_aax[lv_ayw] = 60;
  lv_ayw = lv_ayw + 1;
  gv_aav[lv_ayw] = "sor5";
  gv_aax[lv_ayw] = 75;
  gv_aaw[lv_ayw] = 15;
  gv_aaz[lv_ayw] = 80;
  lv_ayw = lv_ayw + 1;
  gv_aav[lv_ayw] = "sor6";
  gv_aax[lv_ayw] = 140;
  gv_aaw[lv_ayw] = 25;
  gv_aaz[lv_ayw] = 120;
  lv_ayw = lv_ayw + 1;
  gv_aav[lv_ayw] = "sor7";
  gv_aaA[lv_ayw] = 25;
  lv_ayw = lv_ayw + 1;
  gv_aav[lv_ayw] = "sor8";
  gv_aaz[lv_ayw] = 35;
  gv_aaA[lv_ayw] = 15;
  lv_ayw = lv_ayw + 1;
  gv_aav[lv_ayw] = "sor9";
  gv_aaz[lv_ayw] = 15;
  lv_ayw = lv_ayw + 1;
  gv_aav[lv_ayw] = "shcw";
  gv_aaz[lv_ayw] = 50;
  gv_aaA[lv_ayw] = 40;
  lv_ayw = lv_ayw + 1;
  gv_aav[lv_ayw] = "shtm";
  gv_aaz[lv_ayw] = 90;
  gv_aaA[lv_ayw] = 55;
  lv_ayw = lv_ayw + 1;
  gv_aav[lv_ayw] = "gvsm";
  gv_aaw[lv_ayw] = 15;
  gv_aay[lv_ayw] = 20;
  lv_ayw = lv_ayw + 1;
  gv_aav[lv_ayw] = "gemt";
  gv_aax[lv_ayw] = 35;
  gv_aaz[lv_ayw] = 35;
  lv_ayw = lv_ayw + 1;
  gv_aav[lv_ayw] = "gobm";
  gv_aaw[lv_ayw] = 5;
  gv_aaA[lv_ayw] = 10;
  lv_ayw = lv_ayw + 1;
  gv_aav[lv_ayw] = "tels";
  gv_aaw[lv_ayw] = 20;
  gv_aax[lv_ayw] = 25;
  gv_aay[lv_ayw] = 25;
  gv_aaz[lv_ayw] = 25;
  gv_aaA[lv_ayw] = 25;
  lv_ayw = lv_ayw + 1;
  gv_aav[lv_ayw] = "rej4";
  gv_aaw[lv_ayw] = 30;
  gv_aax[lv_ayw] = 50;
  gv_aay[lv_ayw] = 50;
  gv_aaz[lv_ayw] = 25;
  gv_aaA[lv_ayw] = 35;
  lv_ayw = lv_ayw + 1;
  gv_aav[lv_ayw] = "rej6";
  gv_aay[lv_ayw] = 30;
  lv_ayw = lv_ayw + 1;
  gv_aav[lv_ayw] = "hbth";
  gv_aay[lv_ayw] = 25;
  gv_aaB[lv_ayw] = 15;
  lv_ayw = lv_ayw + 1;
  gv_aav[lv_ayw] = "grsl";
  gv_aaw[lv_ayw] = 20;
  gv_aay[lv_ayw] = 10;
  lv_ayw = lv_ayw + 1;
  gv_aav[lv_ayw] = "sfog";
  gv_aaw[lv_ayw] = 20;
  gv_aay[lv_ayw] = 65;
  gv_aaB[lv_ayw] = 15;
  lv_ayw = lv_ayw + 1;
  gv_aav[lv_ayw] = "flag";
  gv_aaw[lv_ayw] = 50;
  gv_aay[lv_ayw] = 80;
  gv_aaB[lv_ayw] = 25;
  lv_ayw = lv_ayw + 1;
  gv_aav[lv_ayw] = "kgal";
  gv_aax[lv_ayw] = 50;
  gv_aaz[lv_ayw] = 25;
  lv_ayw = lv_ayw + 1;
  gv_aav[lv_ayw] = "iwbr";
  gv_aaw[lv_ayw] = 10;
  gv_aaz[lv_ayw] = 30;
  lv_ayw = lv_ayw + 1;
  gv_aav[lv_ayw] = "jdrn";
  gv_aay[lv_ayw] = 15;
  gv_aaz[lv_ayw] = 20;
  gv_aaB[lv_ayw] = 5;
  lv_ayw = lv_ayw + 1;
  gv_aav[lv_ayw] = "klmm";
  gv_aaw[lv_ayw] = 10;
  gv_aax[lv_ayw] = 50;
  gv_aay[lv_ayw] = 15;
  gv_aaz[lv_ayw] = 75;
  gv_aaB[lv_ayw] = 5;
  lv_ayw = lv_ayw + 1;
  gv_aav[lv_ayw] = "rej2";
  gv_aaw[lv_ayw] = 20;
  gv_aax[lv_ayw] = 75;
  gv_aay[lv_ayw] = 25;
  gv_aaz[lv_ayw] = 100;
  gv_aaB[lv_ayw] = 25;
  lv_ayw = lv_ayw + 1;
  gv_aav[lv_ayw] = "lnrn";
  gv_aax[lv_ayw] = 25;
  gv_aaz[lv_ayw] = 35;
  lv_ayw = lv_ayw + 1;
  gv_aav[lv_ayw] = "mlst";
  gv_aaw[lv_ayw] = 20;
  gv_aaz[lv_ayw] = 10;
  lv_ayw = lv_ayw + 1;
  gv_aav[lv_ayw] = "rej5";
  gv_aaz[lv_ayw] = 30;
  gv_aaB[lv_ayw] = 10;
  lv_ayw = lv_ayw + 1;
  gv_aav[lv_ayw] = "mnsf";
  gv_aaw[lv_ayw] = 20;
  gv_aax[lv_ayw] = 25;
  gv_aaz[lv_ayw] = 75;
  gv_aaB[lv_ayw] = 10;
  lv_ayw = lv_ayw + 1;
  gv_aav[lv_ayw] = "rej1";
  gv_aaw[lv_ayw] = 25;
  gv_aax[lv_ayw] = 150;
  gv_aaz[lv_ayw] = 95;
  gv_aaB[lv_ayw] = 10;
  lv_ayw = lv_ayw + 1;
  gv_aav[lv_ayw] = "nflg";
  gv_aaA[lv_ayw] = 25;
  lv_ayw = lv_ayw + 1;
  gv_aav[lv_ayw] = "nspi";
  gv_aaA[lv_ayw] = 35;
  lv_ayw = lv_ayw + 1;
  gv_aav[lv_ayw] = "ocor";
  gv_aaA[lv_ayw] = 60;
  lv_ayw = lv_ayw + 1;
  gv_aav[lv_ayw] = "ofir";
  gv_aaA[lv_ayw] = 85;
  lv_ayw = lv_ayw + 1;
  gv_aav[lv_ayw] = "uflg";
  gv_aaw[lv_ayw] = 20;
  gv_aay[lv_ayw] = 30;
  lv_ayw = lv_ayw + 1;
  gv_aav[lv_ayw] = "tmsc";
  gv_aaA[lv_ayw] = 15;
  lv_ayw = lv_ayw + 1;
  gv_aav[lv_ayw] = "bzbe";
  gv_aaz[lv_ayw] = 50;
  lv_ayw = lv_ayw + 1;
  gv_aav[lv_ayw] = "tmmt";
  gv_aax[lv_ayw] = 150;
  gv_aay[lv_ayw] = 15;
  lv_ayw = lv_ayw + 1;
  gv_aav[lv_ayw] = "vddl";
  gv_aaw[lv_ayw] = 25;
  gv_aay[lv_ayw] = 15;
  gv_aaz[lv_ayw] = 12;
  gv_aaC[lv_ayw] = 10;
  lv_ayw = lv_ayw + 1;
  gv_aav[lv_ayw] = "ches";
  gv_aax[lv_ayw] = 75;
  gv_aay[lv_ayw] = 30;
  lv_ayw = lv_ayw + 1;
  gv_aav[lv_ayw] = "tgxp";
  gv_aaA[lv_ayw] = 15;
  lv_ayw = lv_ayw + 1;
  gv_aav[lv_ayw] = "kybl";
  gv_aax[lv_ayw] = 100;
  lv_ayw = lv_ayw + 1;
  gv_aav[lv_ayw] = "dkfw";
  gv_aaw[lv_ayw] = 10;
  gv_aax[lv_ayw] = 60;
  gv_aay[lv_ayw] = 75;
  lv_ayw = lv_ayw + 1;
  gv_aav[lv_ayw] = "jpnt";
  gv_aaA[lv_ayw] = 60;
  lv_ayw = lv_ayw + 1;
  gv_aav[lv_ayw] = "cnhn";
  gv_aax[lv_ayw] = 75;
  lv_ayw = lv_ayw + 1;
  gv_aav[lv_ayw] = "mgtk";
  gv_aaz[lv_ayw] = 80;
  gv_aax[lv_ayw] = 100;
  gv_aaC[lv_ayw] = 10;
  lv_ayw = lv_ayw + 1;
  gv_aav[lv_ayw] = "k3m1";
  gv_aaA[lv_ayw] = 40;
  lv_ayw = lv_ayw + 1;
  gv_aav[lv_ayw] = "gopr";
  gv_aaw[lv_ayw] = 10;
  gv_aaC[lv_ayw] = 15;
  lv_ayw = lv_ayw + 1;
  gv_aav[lv_ayw] = "azhr";
  gv_aaw[lv_ayw] = 10;
  gv_aaB[lv_ayw] = 50;
  gv_aaC[lv_ayw] = 10;
  lv_ayw = lv_ayw + 1;
  gv_aav[lv_ayw] = "k3m3";
  gv_aaw[lv_ayw] = 40;
  gv_aaB[lv_ayw] = 40;
  lv_ayw = lv_ayw + 1;
  gv_aav[lv_ayw] = "kygh";
  gv_aaz[lv_ayw] = 50;
  gv_aaC[lv_ayw] = 10;
  lv_ayw = lv_ayw + 1;
  gv_aav[lv_ayw] = "ledg";
  gv_aax[lv_ayw] = 150;
  lv_ayw = lv_ayw + 1;
  gv_aav[lv_ayw] = "bzbf";
  gv_aaA[lv_ayw] = 25;
  lv_ayw = lv_ayw + 1;
  gv_aav[lv_ayw] = "gmfr";
  gv_aay[lv_ayw] = 40;
  gv_aaB[lv_ayw] = 15;
  lv_ayw = lv_ayw + 1;
  gv_aav[lv_ayw] = "envl";
  gv_aaz[lv_ayw] = 40;
  gv_aaD[lv_ayw] = 20;
  lv_ayw = lv_ayw + 1;
  gv_aav[lv_ayw] = "drph";
  gv_aay[lv_ayw] = 40;
  gv_aaD[lv_ayw] = 20;
  lv_ayw = lv_ayw + 1;
  gv_aav[lv_ayw] = "shen";
  gv_aaA[lv_ayw] = 40;
  gv_aaD[lv_ayw] = 20;
  lv_ayw = lv_ayw + 1;
  gv_aav[lv_ayw] = "sehr";
  gv_aaw[lv_ayw] = 25;
  gv_aay[lv_ayw] = 35;
  gv_aaz[lv_ayw] = 35;
  gv_aaA[lv_ayw] = 35;
  gv_aaD[lv_ayw] = 30;
  lv_ayw = lv_ayw + 1;
  gv_aav[lv_ayw] = "thle";
  gv_aax[lv_ayw] = 180;
  gv_aaz[lv_ayw] = 70;
  gv_aaD[lv_ayw] = 25;
  lv_ayw = lv_ayw + 1;
  gv_aav[lv_ayw] = "kysn";
  gv_aaw[lv_ayw] = 20;
  gv_aaz[lv_ayw] = 60;
  gv_aaC[lv_ayw] = 20;
  gv_aaD[lv_ayw] = 25;
  lv_ayw = lv_ayw + 1;
  gv_aav[lv_ayw] = "sclp";
  gv_aaw[lv_ayw] = 50;
  gv_aay[lv_ayw] = 50;
  gv_aaD[lv_ayw] = 30;
  lv_ayw = lv_ayw + 1;
  gv_aav[lv_ayw] = "sorf";
  gv_aax[lv_ayw] = 60;
  gv_aay[lv_ayw] = 120;
  gv_aaD[lv_ayw] = 25;
  lv_ayw = lv_ayw + 1;
  gv_aav[lv_ayw] = "phlt";
  gv_aay[lv_ayw] = 80;
  gv_aaw[lv_ayw] = 10;
  gv_aaC[lv_ayw] = 20;
  gv_aaD[lv_ayw] = 25;
  lv_ayw = lv_ayw + 1;
  gv_aav[lv_ayw] = "skrt";
  gv_aaA[lv_ayw] = 40;
  gv_aaw[lv_ayw] = 40;
  gv_aaD[lv_ayw] = 30;
  lv_ayw = lv_ayw + 1;
  gv_aav[lv_ayw] = "glsk";
  gv_aaA[lv_ayw] = 60;
  gv_aaD[lv_ayw] = 25;
  lv_ayw = lv_ayw + 1;
  gv_aav[lv_ayw] = "shwd";
  gv_aaA[lv_ayw] = 100;
  gv_aaC[lv_ayw] = 20;
  gv_aaD[lv_ayw] = 25;
  lv_ayw = lv_ayw + 1;
  gv_aav[lv_ayw] = "k3m2";
  gv_aax[lv_ayw] = 125;
  gv_aay[lv_ayw] = 50;
  gv_aaz[lv_ayw] = 50;
  lv_ayw = lv_ayw + 1;
  gv_aav[lv_ayw] = "dphe";
  gv_aax[lv_ayw] = 125;
  gv_aaA[lv_ayw] = 50;
  lv_ayw = lv_ayw + 1;
  gv_aav[lv_ayw] = "dthb";
  gv_aaB[lv_ayw] = 50;
  gv_aay[lv_ayw] = 25;
  gv_aaz[lv_ayw] = 25;
  lv_ayw = lv_ayw + 1;
  gv_aav[lv_ayw] = "ktrm";
  gv_aaB[lv_ayw] = 50;
  lv_ayw = lv_ayw + 1;
  gv_aav[lv_ayw] = "wtlg";
  gv_aaw[lv_ayw] = 70;
  lv_ayw = lv_ayw + 1;
  gv_aav[lv_ayw] = "wolg";
  gv_aaw[lv_ayw] = 45;
  lv_ayw = lv_ayw + 1;
  gv_aav[lv_ayw] = "I018";
  gv_aaw[lv_ayw] = 35;
  gv_aay[lv_ayw] = 50;
  gv_aaA[lv_ayw] = 110;
  gv_aaB[lv_ayw] = 35;
  lv_ayw = lv_ayw + 1;
  gv_aav[lv_ayw] = "I017";
  gv_aaw[lv_ayw] = 50;
  gv_aay[lv_ayw] = 70;
  gv_aaz[lv_ayw] = 70;
  gv_aaA[lv_ayw] = 70;
  gv_aaB[lv_ayw] = 50;
  lv_ayw = lv_ayw + 1;
  gv_aav[lv_ayw] = "I014";
  gv_aaw[lv_ayw] = 50;
  gv_aay[lv_ayw] = 115;
  gv_aaz[lv_ayw] = 115;
  gv_aaB[lv_ayw] = 60;
  lv_ayw = lv_ayw + 1;
  gv_aav[lv_ayw] = "I01A";
  gv_aaw[lv_ayw] = 45;
  gv_aay[lv_ayw] = 110;
  gv_aaA[lv_ayw] = 110;
  gv_aaB[lv_ayw] = 50;
  lv_ayw = lv_ayw + 1;
  gv_aav[lv_ayw] = "I015";
  gv_aaw[lv_ayw] = 40;
  gv_aax[lv_ayw] = 170;
  gv_aay[lv_ayw] = 70;
  gv_aaz[lv_ayw] = 150;
  gv_aaA[lv_ayw] = 20;
  gv_aaB[lv_ayw] = 30;
  lv_ayw = lv_ayw + 1;
  gv_aav[lv_ayw] = "I019";
  gv_aaw[lv_ayw] = 50;
  gv_aaz[lv_ayw] = 120;
  gv_aaA[lv_ayw] = 120;
  gv_aaB[lv_ayw] = 50;
  lv_ayw = lv_ayw + 1;
  gv_aav[lv_ayw] = "I01B";
  gv_aaw[lv_ayw] = 40;
  gv_aaz[lv_ayw] = 100;
  gv_aaA[lv_ayw] = 120;
  gv_aaB[lv_ayw] = 50;
  lv_ayw = lv_ayw + 1;
  gv_aav[lv_ayw] = "I016";
  gv_aaw[lv_ayw] = 65;
  gv_aay[lv_ayw] = 150;
  gv_aaA[lv_ayw] = 45;
  gv_aaB[lv_ayw] = 40;
  lv_ayw = lv_ayw + 1;
  gv_aav[lv_ayw] = "I061";
  gv_aaz[lv_ayw] = 75;
  lv_ayw = lv_ayw + 1;
  gv_aav[lv_ayw] = "I065";
  gv_aay[lv_ayw] = 75;
  gv_aaB[lv_ayw] = 25;
  lv_ayw = lv_ayw + 1;
  gv_aav[lv_ayw] = "I066";
  gv_aay[lv_ayw] = 35;
  gv_aaz[lv_ayw] = 35;
  lv_ayw = lv_ayw + 1;
  gv_aav[lv_ayw] = "I05X";
  gv_aax[lv_ayw] = 125;
  lv_ayw = lv_ayw + 1;
  gv_aav[lv_ayw] = "I062";
  gv_aaA[lv_ayw] = 65;
  lv_ayw = lv_ayw + 1;
  gv_aav[lv_ayw] = "I063";
  gv_aaw[lv_ayw] = 25;
  lv_ayw = lv_ayw + 1;
  gv_aav[lv_ayw] = "stre";
  gv_aax[lv_ayw] = 35;
  lv_ayw = lv_ayw + 1;
  gv_aav[lv_ayw] = "thdm";
  gv_aay[lv_ayw] = 20;
  lv_ayw = lv_ayw + 1;
  gv_aav[lv_ayw] = "tbar";
  gv_aaz[lv_ayw] = 30;
  gv_aaC[lv_ayw] = 10;
  lv_ayw = lv_ayw + 1;
  gv_aav[lv_ayw] = "tbsm";
  gv_aaz[lv_ayw] = 50;
  gv_aaC[lv_ayw] = 25;
  lv_ayw = lv_ayw + 1;
  gv_aav[lv_ayw] = "spre";
  gv_aaz[lv_ayw] = 25;
  lv_ayw = lv_ayw + 1;
  gv_aav[lv_ayw] = "sbok";
  gv_aaA[lv_ayw] = 40;
  lv_ayw = lv_ayw + 1;
  gv_aav[lv_ayw] = "stwa";
  gv_aax[lv_ayw] = 70;
  gv_aaB[lv_ayw] = 10;
  lv_ayw = lv_ayw + 1;
  gv_aav[lv_ayw] = "tbak";
  gv_aay[lv_ayw] = 65;
  lv_ayw = lv_ayw + 1;
  gv_aav[lv_ayw] = "tlum";
  gv_aaA[lv_ayw] = 35;
  lv_ayw = lv_ayw + 1;
  gv_aav[lv_ayw] = "anfg";
  gv_aax[lv_ayw] = 65;
  lv_ayw = lv_ayw + 1;
  gv_aav[lv_ayw] = "axas";
  gv_aaw[lv_ayw] = 10;
  gv_aay[lv_ayw] = 10;
  lv_ayw = lv_ayw + 1;
  gv_aav[lv_ayw] = "pams";
  gv_aaB[lv_ayw] = 10;
  lv_ayw = lv_ayw + 1;
  gv_aav[lv_ayw] = "arsh";
  gv_aaA[lv_ayw] = 25;
  lv_ayw = lv_ayw + 1;
  gv_aav[lv_ayw] = "arsc";
  gv_aaz[lv_ayw] = 30;
  gv_aaC[lv_ayw] = 10;
  lv_ayw = lv_ayw + 1;
  gv_aav[lv_ayw] = "asbl";
  gv_aax[lv_ayw] = 25;
  gv_aay[lv_ayw] = 25;
  lv_ayw = lv_ayw + 1;
  gv_aav[lv_ayw] = "blba";
  gv_aaw[lv_ayw] = 10;
  gv_aay[lv_ayw] = 25;
  lv_ayw = lv_ayw + 1;
  gv_aav[lv_ayw] = "bfhr";
  gv_aaA[lv_ayw] = 25;
  lv_ayw = lv_ayw + 1;
  gv_aav[lv_ayw] = "btst";
  gv_aax[lv_ayw] = 25;
  gv_aaz[lv_ayw] = 25;
  lv_ayw = lv_ayw + 1;
  gv_aav[lv_ayw] = "rat3";
  gv_aax[lv_ayw] = 50;
  lv_ayw = lv_ayw + 1;
  gv_aav[lv_ayw] = "brag";
  gv_aaB[lv_ayw] = 15;
  lv_ayw = lv_ayw + 1;
  gv_aav[lv_ayw] = "cosl";
  gv_aaC[lv_ayw] = 10;
  gv_aaD[lv_ayw] = 20;
  lv_ayw = lv_ayw + 1;
  gv_aav[lv_ayw] = "stpg";
  gv_aaA[lv_ayw] = 35;
  lv_ayw = lv_ayw + 1;
  gv_aav[lv_ayw] = "crdt";
  gv_aay[lv_ayw] = 25;
  gv_aaz[lv_ayw] = 25;
  gv_aaA[lv_ayw] = 25;
  lv_ayw = lv_ayw + 1;
  gv_aav[lv_ayw] = "frhg";
  gv_aaC[lv_ayw] = 20;
  lv_ayw = lv_ayw + 1;
  gv_aav[lv_ayw] = "esaz";
  gv_aax[lv_ayw] = 65;
  lv_ayw = lv_ayw + 1;
  gv_aav[lv_ayw] = "fwss";
  gv_aaB[lv_ayw] = 30;
  lv_ayw = lv_ayw + 1;
  gv_aav[lv_ayw] = "frgd";
  gv_aay[lv_ayw] = 20;
  gv_aaz[lv_ayw] = 20;
  lv_ayw = lv_ayw + 1;
  gv_aaE[1] = lv_ayw;
}
function f_ayx() {
  var lv_ayy = 0;
  gv_aaF[lv_ayy] = "pghe";
  gv_aaG[lv_ayy] = 100;
  lv_ayy = lv_ayy + 1;
  gv_aaF[lv_ayy] = "pomn";
  gv_aaG[lv_ayy] = 250;
  lv_ayy = lv_ayy + 1;
  gv_aaF[lv_ayy] = "pres";
  gv_aaG[lv_ayy] = 500;
  lv_ayy = lv_ayy + 1;
  gv_aaF[lv_ayy] = "fgrd";
  gv_aaG[lv_ayy] = 1000;
  lv_ayy = lv_ayy + 1;
  gv_aaF[lv_ayy] = "fgfh";
  gv_aaG[lv_ayy] = 1500;
  lv_ayy = lv_ayy + 1;
  gv_aaF[lv_ayy] = "I064";
  gv_aaG[lv_ayy] = 1500;
  lv_ayy = lv_ayy + 1;
  gv_aaF[lv_ayy] = "azhr";
  gv_aaG[lv_ayy] = 1000;
  lv_ayy = lv_ayy + 1;
  lv_ayy = 10;
  gv_aaF[lv_ayy] = "pgma";
  gv_aaH[lv_ayy] = 75;
  lv_ayy = lv_ayy + 1;
  gv_aaF[lv_ayy] = "pnvu";
  gv_aaH[lv_ayy] = 190;
  lv_ayy = lv_ayy + 1;
  gv_aaF[lv_ayy] = "pdiv";
  gv_aaH[lv_ayy] = 375;
  lv_ayy = lv_ayy + 1;
  gv_aaF[lv_ayy] = "mnst";
  gv_aaH[lv_ayy] = 750;
  lv_ayy = lv_ayy + 1;
  gv_aaF[lv_ayy] = "infs";
  gv_aaH[lv_ayy] = 1125;
  lv_ayy = lv_ayy + 1;
  gv_aaF[lv_ayy] = "I067";
  gv_aaH[lv_ayy] = 1125;
  lv_ayy = lv_ayy + 1;
  gv_aaF[lv_ayy] = "k3m1";
  gv_aaH[lv_ayy] = 1125;
  lv_ayy = lv_ayy + 1;
  lv_ayy = 20;
  gv_aaF[lv_ayy] = "shea";
  gv_aaG[lv_ayy] = 400;
  lv_ayy = lv_ayy + 1;
  gv_aaF[lv_ayy] = "sman";
  gv_aaH[lv_ayy] = 200;
  lv_ayy = lv_ayy + 1;
  gv_aaF[lv_ayy] = "shas";
  lv_ayy = lv_ayy + 1;
  gv_aaF[lv_ayy] = "I06H";
  gv_aaG[lv_ayy] = 2000;
  gv_aaH[lv_ayy] = 800;
  lv_ayy = lv_ayy + 1;
  gv_aaE[2] = lv_ayy;
}
function f_ayz(lv_ayA) {
  return (
    S2S("Lv1: " + gv_aaZ) +
    I2S(R2I(gv_ald[lv_ayA + 1])) +
    "|r, Lv2: " +
    gv_aaZ +
    I2S(R2I(gv_ald[lv_ayA + 2])) +
    "|r, Lv3: " +
    gv_aaZ +
    I2S(R2I(gv_ald[lv_ayA + 3])) +
    "|r, Lv4: " +
    gv_aaZ +
    I2S(R2I(gv_ald[lv_ayA + 4])) +
    "|r, Lv5: " +
    gv_aaZ +
    I2S(R2I(gv_ald[lv_ayA + 5])) +
    "|r, Lv6: " +
    gv_aaZ +
    I2S(R2I(gv_ald[lv_ayA + 6])) +
    "|r"
  );
}
function f_ayB(lv_ayC) {
  return (
    S2S("Lv1: " + gv_aaZ) +
    I2S(R2I(gv_ald[lv_ayC + 1] * 100)) +
    "%|r, Lv2: " +
    gv_aaZ +
    I2S(R2I(gv_ald[lv_ayC + 2] * 100)) +
    "%|r, Lv3: " +
    gv_aaZ +
    I2S(R2I(gv_ald[lv_ayC + 3] * 100)) +
    "%|r, Lv4: " +
    gv_aaZ +
    I2S(R2I(gv_ald[lv_ayC + 4] * 100)) +
    "%|r, Lv5: " +
    gv_aaZ +
    I2S(R2I(gv_ald[lv_ayC + 5] * 100)) +
    "%|r, Lv6: " +
    gv_aaZ +
    I2S(R2I(gv_ald[lv_ayC + 6] * 100)) +
    "%|r"
  );
}
function f_ayD(lv_ayE, lv_ayF, lv_ayG, lv_ayH, lv_ayI, lv_ayJ) {
  return (
    S2S("\nMana cost: 1: " + gv_aba) +
    I2S(lv_ayE) +
    "|r, 2: " +
    gv_aba +
    I2S(lv_ayF) +
    "|r, 3: " +
    gv_aba +
    I2S(lv_ayG) +
    "|r, 4: " +
    gv_aba +
    I2S(lv_ayH) +
    "|r, 5: " +
    gv_aba +
    I2S(lv_ayI) +
    "|r, 6: " +
    gv_aba +
    I2S(lv_ayJ) +
    "|r"
  );
}
function f_ayK(lv_ayL) {
  var lv_ayM = 1;
  var lv_ayN = "\n";
  do {
    if (lv_ayM > 6) {
      break;
    }
    lv_ayM = lv_ayM + 1;
  } while (true);
  return lv_ayN;
}
function f_ayO() {
  var lv_ayP = 0;
  gv_aaZ = "|cffffaaaa";
  gv_aba = "|cff8888ff";
  gv_abb = "|cffffcc00";
  SaveInteger(gv_abL, 4, lv_ayP, "Udre");
  SaveStr(
    gv_abL,
    1,
    lv_ayP,
    S2S(gv_abb + "Soul-piercing shot|r scales by ") +
      gv_aaZ +
      "0.23|r Int per level" +
      f_ayD(14, 24, 38, 57, 81, 110)
  );
  SaveStr(
    gv_abL,
    2,
    lv_ayP,
    S2S(gv_abb + "Stardust|r scales with at (") +
      gv_abb +
      "0.3+0.15*lvl|r) *(Int +SH/1.6), base heal: \n" +
      f_ayz(1017)
  );
  SaveStr(
    gv_abL,
    3,
    lv_ayP,
    S2S(
      gv_abb +
        "Mark of the Moon|r: (level+1)/3. *(spell damage+Int), base dmg \n"
    ) + f_ayz(1011)
  );
  SaveStr(
    gv_abL,
    4,
    lv_ayP,
    S2S(gv_abb + "Selene's Blessing|r atk speed rises ") +
      gv_aaZ +
      "10%|r per level, evasion rises " +
      gv_abb +
      "6%|r, duration about " +
      gv_aaZ +
      "1.5|r seconds\n and mana cost is 60,100,160,240,340,460"
  );
  SaveStr(
    gv_abL,
    5,
    lv_ayP,
    S2S(gv_abb + "Lunar shot|r gains ") +
      gv_aaZ +
      "1|r second per level" +
      f_ayD(100, 130, 170, 220, 285, 370)
  );
  lv_ayP = lv_ayP + 1;
  SaveInteger(gv_abL, 4, lv_ayP, "Hjai");
  SaveStr(
    gv_abL,
    1,
    lv_ayP,
    S2S(gv_abb + "Reclamation|r gains ") +
      gv_aaZ +
      "5%|r more life steal each level.\nScales with (damage dealt+ agi/6)" +
      f_ayD(9, 12, 16, 22, 30, 38)
  );
  SaveStr(
    gv_abL,
    2,
    lv_ayP,
    S2S(
      gv_abb +
        "Kudzu|r: slow is fixed, (level+3)/2 *Int +level/3 *Agi, base damage \n"
    ) +
      f_ayz(1077) +
      f_ayD(75, 115, 155, 210, 280, 380)
  );
  SaveStr(
    gv_abL,
    3,
    lv_ayP,
    S2S(gv_abb + "Ares Warcry|r: Damage Bonus: ") +
      f_ayB(1300) +
      "Armor Bonus: 25% base armor " +
      f_ayz(1306) +
      f_ayD(30, 40, 55, 75, 100, 135)
  );
  SaveStr(
    gv_abL,
    4,
    lv_ayP,
    S2S(gv_abb + "Cat-like reflexes|r: ") +
      gv_abb +
      "15% 3x|r agi is fixed, only base damage scales\n" +
      f_ayz(1083)
  );
  SaveStr(
    gv_abL,
    5,
    lv_ayP,
    S2S(gv_abb + "Reckless charge|r: ") +
      gv_aaZ +
      "15%|r miss chance and 2 second stun are fixed, and (level+3)/3 *Str +level/3 *Agi bonus damage, \nbase dmg: " +
      f_ayz(1071) +
      f_ayD(60, 80, 110, 150, 200, 270)
  );
  lv_ayP = lv_ayP + 1;
  SaveInteger(gv_abL, 4, lv_ayP, "Emoo");
  SaveStr(
    gv_abL,
    1,
    lv_ayP,
    S2S(gv_abb + "Spear impetus|r gains ") +
      gv_aaZ +
      "7%|r of distance damage each level"
  );
  SaveStr(
    gv_abL,
    2,
    lv_ayP,
    S2S(gv_abb + "Frenzy|r: each level- miss chance drops ") +
      gv_aaZ +
      "1%|r, mana cost drops " +
      gv_aaZ +
      "5%|r, and damage scales up by " +
      gv_aaZ +
      "7%|r "
  );
  SaveStr(
    gv_abL,
    3,
    lv_ayP,
    S2S(gv_abb + "Puncture|r: always ") +
      gv_aaZ +
      "17%|r, each level increases creep stun " +
      gv_aaZ +
      "0.5|r seconds and titan stun 0.2 seconds "
  );
  SaveStr(
    gv_abL,
    4,
    lv_ayP,
    S2S(gv_abb + "Precise throw|r: always ") +
      gv_abb +
      "20%|r, each level increases bonus damage another " +
      gv_aaZ +
      "30%"
  );
  SaveStr(
    gv_abL,
    5,
    lv_ayP,
    S2S(gv_abb + "Exploding Spear|r always ") +
      gv_aaZ +
      "3x|r Int over " +
      gv_aaZ +
      "8|r seconds, cd drops 1 (about 5%) sec per level, base dmg \n" +
      f_ayz(1119)
  );
  lv_ayP = lv_ayP + 1;
  SaveInteger(gv_abL, 4, lv_ayP, "Udea");
  SaveStr(
    gv_abL,
    1,
    lv_ayP,
    S2S(gv_abb + "Valor|r: always regen ") +
      gv_abb +
      "1%|r of target max hp/sec, plus an level component of: 15, 24, 37, 54, 75, 100"
  );
  SaveStr(
    gv_abL,
    2,
    lv_ayP,
    S2S(
      gv_abb +
        "Charge|r stuns for (level+1)/2 seconds and deals (level+1)/2 *Strength damage, \n base dmg: "
    ) + f_ayz(1107)
  );
  SaveStr(
    gv_abL,
    3,
    lv_ayP,
    S2S(gv_abb + "Blood drunk|r gains ") +
      gv_aaZ +
      "0.5x|r damage and 10 mana cost every level"
  );
  SaveStr(
    gv_abL,
    4,
    lv_ayP,
    S2S(
      gv_abb +
        "Taunt|r: fixed cooldown, duration, range- armor gain/reduction of 5, 9, 14, 20, 27, 35"
    )
  );
  SaveStr(
    gv_abL,
    5,
    lv_ayP,
    S2S(
      gv_abb + "Phalanx|r: always 500 range, mana cost= level x4 /sec, gains "
    ) +
      gv_abb +
      "5%|r evasion and spell resist per level"
  );
  lv_ayP = lv_ayP + 1;
  SaveInteger(gv_abL, 4, lv_ayP, "Hamg");
  SaveStr(
    gv_abL,
    1,
    lv_ayP,
    S2S(
      gv_abb +
        "Life Leech|r: Spelldamage/(10-level) per wave for 10 waves, channeling base dmg \n"
    ) + f_ayz(1191)
  );
  SaveStr(
    gv_abL,
    2,
    lv_ayP,
    S2S(gv_abb + "Mojo|r costs ") +
      gv_aaZ +
      "30|r *level hp to cast, heal for " +
      gv_aaZ +
      "10%|r *level damage done, benefits from (2+level)/3 *spell dmg, base dmg \n" +
      f_ayz(1179)
  );
  SaveStr(
    gv_abL,
    3,
    lv_ayP,
    S2S(gv_abb + "Wail of the Banshee|r Adds ") +
      gv_aaZ +
      "4x|r Spell damage to hp before calculating %, Each level inc %hp damage done by " +
      gv_aaZ +
      "5%|r, enemy atk reduction 7%, duration by 2 seconds, and life cost by 75.\n"
  );
  SaveStr(
    gv_abL,
    4,
    lv_ayP,
    S2S(gv_abb + "Grave Dance|r: ") +
      gv_abb +
      "3|r ghosts for " +
      gv_aaZ +
      "15|r seconds, \n max hp % damage is " +
      f_ayB(1222)
  );
  SaveStr(
    gv_abL,
    5,
    lv_ayP,
    S2S(gv_abb + "Voodoo|r: always ") +
      gv_aaZ +
      "50%|r slow and " +
      gv_aaZ +
      "1x|r spell damage/sec for " +
      gv_aaZ +
      "5|r seconds, \n base dmg " +
      f_ayz(1215)
  );
  lv_ayP = lv_ayP + 1;
  SaveInteger(gv_abL, 4, lv_ayP, "Hblm");
  SaveStr(
    gv_abL,
    1,
    lv_ayP,
    S2S(gv_abb + "Frozen Vestment|r: 5, 11, 20, 32, 47, 65")
  );
  SaveStr(
    gv_abL,
    2,
    lv_ayP,
    S2S(gv_abb + "Ice Prison|r: deals ") +
      gv_aaZ +
      "24%|r bonus dmg each for frostbite and aqua spike debuffs \n always " +
      gv_aaZ +
      "3|r sec immobilize, (level+3)/4. *spell damage, \n base dmg " +
      f_ayz(1161)
  );
  SaveStr(
    gv_abL,
    3,
    lv_ayP,
    S2S(gv_abb + "Aqua spike|r: deals ") +
      gv_aaZ +
      "40%|r bonus to Frostbitten foes, (level+4)/5. *spell damagebase,\n base dmg: " +
      f_ayz(1167)
  );
  SaveStr(
    gv_abL,
    4,
    lv_ayP,
    S2S(gv_abb + "Frostbite|r: always ") +
      gv_abb +
      "5|r seconds, scales with (level+2)/3 *spell damage, \n base dmg" +
      f_ayz(1155)
  );
  SaveStr(
    gv_abL,
    5,
    lv_ayP,
    S2S(gv_abb + "Blizzard|r: always 30 waves, ") +
      gv_aaZ +
      "30%|r extra dmg during Frostbite, each wave benefits from 1/(15-level)*spell damage, \n base dmg " +
      f_ayz(1173)
  );
  lv_ayP = lv_ayP + 1;
  SaveInteger(gv_abL, 4, lv_ayP, "Hpal");
  SaveStr(
    gv_abL,
    1,
    lv_ayP,
    S2S(gv_abb + "Hammer|r: Stun ") +
      gv_aaZ +
      "2|r seconds and Str scales " +
      gv_aaZ +
      "0.3|r per level, base dmg \n" +
      f_ayz(1885) +
      f_ayD(90, 120, 160, 210, 270, 340)
  );
  SaveStr(
    gv_abL,
    2,
    lv_ayP,
    S2S(
      gv_abb +
        "Holy Light|r: (level+2)/4. *(Int + spell heal), AOE and %dmg fixed, base heal \n"
    ) +
      f_ayz(1035) +
      f_ayD(60, 90, 140, 210, 300, 410)
  );
  SaveStr(
    gv_abL,
    3,
    lv_ayP,
    S2S(
      gv_abb +
        "Favor|r: gain 5, 10, 17, 26, 37, 50 armor aura for nearby allies"
    )
  );
  SaveStr(
    gv_abL,
    4,
    lv_ayP,
    S2S(
      gv_abb +
        "Holy Shield|r: benefits from (Int+Str)*ablevel/4 +Spellheal \nshield takes hits after armor reduction, base shield \n"
    ) +
      f_ayz(1041) +
      f_ayD(130, 180, 250, 340, 450, 580)
  );
  SaveStr(
    gv_abL,
    5,
    lv_ayP,
    S2S(gv_abb + "Blinding Flare|r: 200 AOE, 7 seconds, and ") +
      gv_aaZ +
      "45%|r miss chance at all levels\n(level+5)/3x Int, (level+2)/3)x SD, base dmg \n" +
      f_ayz(1023) +
      f_ayD(60, 90, 135, 175, 270, 360)
  );
  lv_ayP = lv_ayP + 1;
  SaveInteger(gv_abL, 4, lv_ayP, "Ulic");
  SaveStr(
    gv_abL,
    1,
    lv_ayP,
    S2S(
      gv_abb +
        "Burning Vestment|r: 4, 8, 15, 25, 38, 52, 65 armor (1 free level from gear/equip), \ndamage return benefits from SD/10, base \n"
    ) + f_ayz(1125)
  );
  SaveStr(
    gv_abL,
    2,
    lv_ayP,
    S2S(gv_abb + "Firedrop|r: Makes enemies take ") +
      gv_aaZ +
      "12%|r per level extra fire damage, 50*ablevel +spelldmg dealt over " +
      gv_aaZ +
      "7|r seconds,\nspelldmg +base dmg dealt immediately \n" +
      f_ayz(1149) +
      f_ayD(110, 165, 250, 370, 560, 835)
  );
  SaveStr(
    gv_abL,
    3,
    lv_ayP,
    S2S(
      gv_abb +
        "Scald|r: reduce armor by 3, 7, 11, 16, 21, 28; deals 1/3 of damage immediately and remainder over 8 seconds\n Scales with (level+2)/3 *spell damage, \nbase dmg "
    ) +
      f_ayz(1137) +
      f_ayD(50, 75, 115, 170, 250, 380)
  );
  SaveStr(
    gv_abL,
    4,
    lv_ayP,
    S2S(
      gv_abb +
        "Meteor|r: always 3 sec stun, scales with (level+2)/3 *spell damage, mana cost follows base dmg \n"
    ) + f_ayz(1131)
  );
  SaveStr(
    gv_abL,
    5,
    lv_ayP,
    S2S(
      gv_abb +
        "Firestorm|r: always 10 waves and 900 AOE, each wave gains 1/(10-level) *spelldamage, \nbase dmg/wave "
    ) + f_ayz(1143)
  );
  lv_ayP = lv_ayP + 1;
  SaveInteger(gv_abL, 4, lv_ayP, "Oshd");
  SaveStr(
    gv_abL,
    1,
    lv_ayP,
    S2S(gv_abb + "Heal|r: always ") +
      gv_abb +
      "1x|r Int, base heal \n" +
      f_ayz(1059) +
      f_ayD(95, 110, 145, 195, 265, 345)
  );
  SaveStr(
    gv_abL,
    2,
    lv_ayP,
    S2S(
      gv_abb + "Give and Take|r: heal nearby allies based on damage dealt +"
    ) +
      gv_aaZ +
      "Int/4|r, \nheal for " +
      f_ayB(1047) +
      f_ayD(10, 16, 25, 37, 52, 70)
  );
  SaveStr(
    gv_abL,
    3,
    lv_ayP,
    S2S(gv_abb + "Hand of God|r: 200 AOE, each level boosts duration by ") +
      gv_abb +
      "1 second|r and slow magnitude " +
      gv_abb +
      "4%|r, scales with (level+1)/2 *SD \nbase dmg " +
      f_ayz(1065) +
      f_ayD(175, 235, 230, 430, 580, 800)
  );
  SaveStr(
    gv_abL,
    4,
    lv_ayP,
    S2S(
      gv_abb +
        "Sanctuary|r: gains 7% magic resistence per level and base heal improves 50%\nDivisor for (spellheal+2x Int) regen drops 1.5 each level"
    )
  );
  SaveStr(
    gv_abL,
    5,
    lv_ayP,
    S2S(gv_abb + "Rebirth|r: revive an ally with % hp \n") + f_ayB(1053)
  );
  lv_ayP = lv_ayP + 1;
  SaveInteger(gv_abL, 4, lv_ayP, "Hant");
  SaveStr(
    gv_abL,
    1,
    lv_ayP,
    S2S(gv_abb + "Energize|r: increases by ") +
      gv_aaZ +
      "1%|r current mana per level, costs " +
      gv_aba +
      "1/7|rth of damage as added mana cost" +
      f_ayD(10, 16, 25, 38, 55, 80)
  );
  SaveStr(
    gv_abL,
    2,
    lv_ayP,
    S2S(gv_abb + "Reverberate|r: Scaling ") +
      gv_aaZ +
      "(Level+4)/5|r x (Int+SD) damage, base dmg \n" +
      f_ayz(999)
  );
  SaveStr(
    gv_abL,
    3,
    lv_ayP,
    S2S(
      gv_abb +
        "Mental barrrier|r: each point of mana worth .85, 1.4, 2.0, 2.65, 3.35, 4.1 hit points, mana loss before armor"
    )
  );
  SaveStr(
    gv_abL,
    4,
    lv_ayP,
    S2S(
      gv_abb +
        "Mind Blast|r: (Int+Spell damage) *(level+2)/3 scaling damage, base dmg \n"
    ) + f_ayz(1005)
  );
  SaveStr(
    gv_abL,
    5,
    lv_ayP,
    S2S(gv_abb + "Mark of Magus|r: each point gives ") +
      gv_abb +
      "2|r seconds duration and " +
      gv_abb +
      "3%|r spell dmg taken"
  );
  lv_ayP = lv_ayP + 1;
  SaveInteger(gv_abL, 4, lv_ayP, "Ekee");
  SaveStr(
    gv_abL,
    1,
    lv_ayP,
    S2S(gv_abb + "Rejuvenation|r: Heals for ") +
      gv_abb +
      "100 +lvl*200 +(SH+int)*(lvl+2)/4|r and cd drops about 10% per level."
  );
  SaveStr(
    gv_abL,
    2,
    lv_ayP,
    S2S(
      gv_abb +
        "Nature's Wrath|r: duration 2+Level +-1 seconds, reduced for boss or Titan, armor reduction 5*lvl*(lvl+1), and dps=20 +5*lvl*(lvl+1) +(SD+int)*(lvl+2)/15"
    )
  );
  SaveStr(
    gv_abL,
    3,
    lv_ayP,
    S2S(
      gv_abb +
        "Call of the Wild|r: inc allied attack by 24, 30, 37, 46, 58, 74 %"
    )
  );
  SaveStr(
    gv_abL,
    4,
    lv_ayP,
    S2S(
      gv_abb +
        "Chain Lightning|r: each level gains half bounce, scales with  (Int+SD)*(level+2)/4, actually reduces 5% per bounce, base dmg \n"
    ) + f_ayz(1101)
  );
  SaveStr(
    gv_abL,
    5,
    lv_ayP,
    S2S(
      gv_abb +
        "Storm Caller|r: Channeling, Heals by 35, 50, 75, 110, 155, 215  "
    ) +
      gv_abb +
      "+SH*(lvl+3)/25|r hp/sec \n Damage scales with (level+3)/4 *spelldmg,\n base dmg: " +
      f_ayz(1095)
  );
  lv_ayP = lv_ayP + 1;
  SaveInteger(gv_abL, 4, lv_ayP, "Edem");
  SaveStr(
    gv_abL,
    1,
    lv_ayP,
    S2S(
      gv_abb +
        "Stalk|r: Fixed duration and movespeed, 10-15% cd reduction per level, dmg scales by an additional "
    ) +
      gv_aaZ +
      "0.5x|r atk per level"
  );
  SaveStr(
    gv_abL,
    2,
    lv_ayP,
    S2S(gv_abb + "Wounding|r: For every ") +
      gv_aaZ +
      "(45-5*lvl)%|r hp missing deal " +
      gv_aaZ +
      "15*lvl|r physical bonus damage."
  );
  SaveStr(
    gv_abL,
    3,
    lv_ayP,
    S2S(
      gv_abb +
        "Garrote|r: fixed MS slow, atk reduction gains 5% per level, gains "
    ) +
      gv_aaZ +
      "0.5x|r str and " +
      gv_aaZ +
      "0.3x|r agi per level, also slight cd reduction each level, base dmg \n" +
      f_ayz(1203)
  );
  SaveStr(
    gv_abL,
    4,
    lv_ayP,
    S2S(
      gv_abb + "Kunai Scren|r: miss chance and attack speed reduction grow "
    ) +
      gv_aaZ +
      "6%|r per level, cd drops half a second, str component Str*(lvl+3)/3, base dmg \n" +
      f_ayz(1209)
  );
  SaveStr(
    gv_abL,
    5,
    lv_ayP,
    S2S(gv_abb + "Shadow Image|r: each level increases chance/attack by ") +
      gv_aaZ +
      "5%|r and decreases cooldown by " +
      gv_aaZ +
      "0.3|r seconds."
  );
  lv_ayP = 1;
  gv_aaI[lv_ayP] = "A074";
  lv_ayP = lv_ayP + 1;
  gv_aaI[lv_ayP] = "A06R";
  lv_ayP = lv_ayP + 1;
  gv_aaI[lv_ayP] = "A03Q";
  lv_ayP = lv_ayP + 1;
  gv_aaI[lv_ayP] = "A07D";
  lv_ayP = lv_ayP + 1;
  gv_aaI[lv_ayP] = "A03Z";
  lv_ayP = lv_ayP + 1;
  gv_aaI[lv_ayP] = "A03P";
  lv_ayP = lv_ayP + 1;
  gv_aaI[lv_ayP] = "A046";
  lv_ayP = lv_ayP + 1;
  gv_aaI[lv_ayP] = "A03X";
  lv_ayP = lv_ayP + 1;
  gv_aaI[lv_ayP] = "A03V";
  lv_ayP = lv_ayP + 1;
  gv_aaI[lv_ayP] = "A04E";
  lv_ayP = lv_ayP + 1;
  gv_aaI[lv_ayP] = "A03T";
  lv_ayP = lv_ayP + 1;
  gv_aaI[lv_ayP] = "A03R";
  lv_ayP = lv_ayP + 1;
  gv_aaI[lv_ayP] = "A05C";
  lv_ayP = lv_ayP + 1;
  gv_aaI[lv_ayP] = "A05D";
  lv_ayP = lv_ayP + 1;
  gv_aaI[lv_ayP] = "A05E";
  lv_ayP = lv_ayP + 1;
  gv_aaI[lv_ayP] = "A05B";
  lv_ayP = lv_ayP + 1;
  gv_aaI[lv_ayP] = "A05I";
  lv_ayP = lv_ayP + 1;
  gv_aaI[lv_ayP] = "A06L";
  lv_ayP = lv_ayP + 1;
  gv_aaI[lv_ayP] = "A06M";
  lv_ayP = lv_ayP + 1;
  gv_aaI[lv_ayP] = "A06P";
  lv_ayP = lv_ayP + 1;
  gv_aaI[lv_ayP] = "A06Q";
  lv_ayP = lv_ayP + 1;
  gv_aaI[lv_ayP] = "A06K";
  lv_ayP = lv_ayP + 1;
  gv_aaI[lv_ayP] = "A076";
  lv_ayP = lv_ayP + 1;
  gv_aaI[lv_ayP] = "A070";
  lv_ayP = lv_ayP + 1;
  gv_aaI[lv_ayP] = "A07C";
  lv_ayP = lv_ayP + 1;
  gv_aaI[lv_ayP] = "A071";
  lv_ayP = lv_ayP + 1;
  gv_aaI[lv_ayP] = "A065";
  lv_ayP = lv_ayP + 1;
  gv_aaI[lv_ayP] = "A068";
  lv_ayP = lv_ayP + 1;
  gv_aaI[lv_ayP] = "A067";
  lv_ayP = lv_ayP + 1;
  gv_aaI[lv_ayP] = "A066";
  lv_ayP = lv_ayP + 1;
  gv_aaI[lv_ayP] = "A053";
  lv_ayP = lv_ayP + 1;
  gv_aaI[lv_ayP] = "A051";
  lv_ayP = lv_ayP + 1;
  gv_aaI[lv_ayP] = "A050";
  lv_ayP = lv_ayP + 1;
  gv_aaI[lv_ayP] = "A048";
  lv_ayP = lv_ayP + 1;
  gv_aaI[lv_ayP] = "A08H";
  lv_ayP = lv_ayP + 1;
  gv_aaI[lv_ayP] = "A041";
  lv_ayP = lv_ayP + 1;
  gv_aaI[lv_ayP] = "A06F";
  lv_ayP = lv_ayP + 1;
  gv_aaI[lv_ayP] = "A06E";
  lv_ayP = lv_ayP + 1;
  gv_aaI[lv_ayP] = "A06D";
  lv_ayP = lv_ayP + 1;
  gv_aaI[lv_ayP] = "A06G";
  lv_ayP = lv_ayP + 1;
  gv_aaI[lv_ayP] = "A078";
  lv_ayP = lv_ayP + 1;
  gv_aaI[lv_ayP] = "A04U";
  lv_ayP = lv_ayP + 1;
  gv_aaI[lv_ayP] = "A04V";
  lv_ayP = lv_ayP + 1;
  gv_aaI[lv_ayP] = "A05J";
  lv_ayP = lv_ayP + 1;
  gv_aaI[lv_ayP] = "A05K";
  lv_ayP = lv_ayP + 1;
  gv_aaI[lv_ayP] = "A05L";
  lv_ayP = lv_ayP + 1;
  gv_aaI[lv_ayP] = "A05M";
  lv_ayP = lv_ayP + 1;
  gv_aaI[lv_ayP] = "A05N";
  lv_ayP = lv_ayP + 1;
  gv_aaI[lv_ayP] = "A05S";
  lv_ayP = lv_ayP + 1;
  gv_aaI[lv_ayP] = "A05R";
  lv_ayP = lv_ayP + 1;
  gv_aaI[lv_ayP] = "A04Z";
  lv_ayP = lv_ayP + 1;
  gv_aaI[0] = lv_ayP;
}
function f_ayQ() {
  var lv_ayR = GetPlayerId(GetOwningPlayer(GetTriggerUnit()));
  var lv_ayS = GetLearnedSkill();
  var lv_ayT = 1;
  var lv_ayU = GetUnitAbilityLevel(GetTriggerUnit(), lv_ayS);
  if (lv_ayS == 0 && GetSpellAbilityId() != 0) {
    lv_ayS = GetSpellAbilityId();
    lv_ayU = GetUnitAbilityLevel(GetTriggerUnit(), lv_ayS) - 1;
  }
  BlzSetUnitAbilityCooldown(
    GetTriggerUnit(),
    lv_ayS,
    lv_ayU,
    BlzGetAbilityCooldown(lv_ayS, lv_ayU) / gv_aan[lv_ayR]
  );
  if (
    lv_ayS == "A07C" &&
    GetInventoryIndexOfItemTypeBJ(GetTriggerUnit(), "tels") +
      GetInventoryIndexOfItemTypeBJ(GetTriggerUnit(), "rej4") >
      0
  ) {
    BlzSetUnitAbilityCooldown(
      GetTriggerUnit(),
      "A07C",
      lv_ayU,
      (BlzGetAbilityCooldown("A07C", lv_ayU) * 0.7) / gv_aan[lv_ayR]
    );
  }
}
function f_ayV() {
  var lv_ayW;
  var lv_ayX = 0;
  lv_ayW = "|cffffcc00for all|r: any gear or equip	";
  lv_ayW = S2S(
    lv_ayW +
      "|cffffcc00comboes|r: hidecap+leathercap+plain dagger;   gold ring+(mighty gauntlet or iron arm band or iron jav)   "
  );
  lv_ayW = S2S(
    lv_ayW +
      "comboes:leathercap+(mighty gauntlet or iron arm band);  robe mind+(galerus or gold sash or cori helm)	"
  );
  lv_ayW = S2S(
    lv_ayW +
      "|cffffcc00single booster|r: starlight charm; thanatos scept; tela boar skewer;	odysseus' armor	"
  );
  gv_aaW = S2S(
    lv_ayW +
      "single booster: sacred olymp armor-sword, hallowed regalia, any hermes-posiedon, any str 50-85	"
  );
  lv_ayW = "";
  gv_aaP[1] = GetRectCenter(gv_adY);
  gv_aaP[2] = GetRectCenter(gv_adf);
  gv_aaP[3] = GetRectCenter(gv_adl);
  gv_aaP[4] = GetRectCenter(gv_aeR);
  lv_ayW =
    "-copy: copies all enemies (non-titan) within 300 of ur hero, cd scales with player count \n-p: shows players on multiboard \n-q: shows quests on multiboard\n";
  lv_ayW = S2S(
    lv_ayW +
      "-save: saves ur game, gives a code and also creates text file in Documents,Warcraft III,CustomMapData,TBR 2 \n"
  );
  gv_aaX = S2S(
    lv_ayW +
      "-abinfo: shows how your abilities scale as you level them, mana costs not included for now \n-out: zooms out\n-show #: displays icon for player hero(check hp/heal)\n"
  );
  lv_ayW = "# commands, -str, -agi, -int, -lvl, -gold, -honor, -demi";
  lv_ayW = S2S(lv_ayW + "\n-ion, -troll, -harpy, -naga, -soh, -ruby, -hof");
  gv_aaY = S2S(lv_ayW + "\n-seal, -flawless, -pelt");
  lv_ayW = "";
  gv_aau[0] = "tmsc";
  gv_aau[1] = "bzbe";
  gv_aau[2] = "tmmt";
  gv_aau[3] = "vddl";
  gv_aau[4] = "ches";
  gv_aau[5] = "tgxp";
  gv_aau[6] = "kybl";
  gv_aau[7] = "engs";
  gv_aau[8] = "uflg";
  gv_aau[9] = "dkfw";
  gv_aau[10] = "jpnt";
  gv_aau[11] = "cnhn";
  gv_aau[12] = "mgtk";
  gv_aau[14] = "k3m1";
  gv_aau[15] = "gopr";
  gv_aau[17] = "azhr";
  gv_aau[18] = "k3m3";
  f_ayv();
  f_ayO();
  f_ayx();
  lv_ayX = 0;
  do {
    if (lv_ayX > 8) {
      break;
    }
    gv_abp[lv_ayX] = DialogCreate();
    TriggerRegisterDialogEvent(gv_abk, gv_abp[lv_ayX]);
    lv_ayX = lv_ayX + 1;
  } while (true);
  gv_aaK[21] = 2500;
  gv_aaJ[21] = 0;
  gv_aaK[22] = 15000;
  gv_aaJ[22] = 0;
  gv_aaK[23] = 25000;
  gv_aaJ[23] = 3;
  gv_aaK[24] = 50000;
  gv_aaJ[24] = 10;
  gv_aaK[25] = 125000;
  gv_aaJ[25] = 25;
  lv_ayX = 1;
  do {
    if (lv_ayX > 9) {
      break;
    }
    gv_aaV[lv_ayX] = GetUnitName(gv_aaU[lv_ayX]);
    lv_ayX = lv_ayX + 1;
  } while (true);
  gv_abs[1] = 3650;
  gv_abs[101] = 14400;
  gv_abs[2] = -11850;
  gv_abs[102] = 3150;
  gv_abs[3] = -8400;
  gv_abs[103] = 12500;
  gv_abs[4] = 3100;
  gv_abs[104] = -8150;
  gv_abs[5] = -8150;
  gv_abs[105] = -2600;
  gv_abs[6] = -2700;
  gv_abs[106] = -5100;
  gv_abs[7] = -2450;
  gv_abs[107] = -13300;
  gv_abs[8] = -12500;
  gv_abs[108] = -1500;
  gv_abs[9] = -13500;
  gv_abs[109] = 13000;
}
function f_ayY(lv_ayZ) {
  var lv_aza = R2I(lv_ayZ * 2.55);
  if (lv_aza < 0) {
    lv_aza = 0;
  } else {
    if (lv_aza > 255) {
      lv_aza = 255;
    }
  }
  return lv_aza;
}
function f_azb(
  lv_azc,
  lv_azd,
  lv_aze,
  lv_azf,
  lv_azg,
  lv_azh,
  lv_azi,
  lv_azj,
  lv_azk,
  lv_azl
) {
  bj_lastCreatedTextTag = CreateTextTag();
  SetTextTagText(bj_lastCreatedTextTag, lv_azc, lv_azh * 0.0023);
  SetTextTagPos(
    bj_lastCreatedTextTag,
    GetUnitX(lv_azd),
    GetUnitY(lv_azd),
    lv_azg
  );
  SetTextTagColor(
    bj_lastCreatedTextTag,
    f_ayY(lv_azi),
    f_ayY(lv_azj),
    f_ayY(lv_azk),
    f_ayY(100.0 - lv_azl)
  );
  SetTextTagPermanent(bj_lastCreatedTextTag, false);
  SetTextTagVelocity(bj_lastCreatedTextTag, 0, lv_azf / 1803);
  SetTextTagLifespan(bj_lastCreatedTextTag, lv_aze);
  SetTextTagFadepoint(bj_lastCreatedTextTag, lv_aze - 0.4);
  return bj_lastCreatedTextTag;
}
function f_azm(lv_azn) {
  return gv_aam[GetPlayerId(GetOwningPlayer(lv_azn))];
}
function f_azo(lv_azp) {
  return gv_aan[GetPlayerId(GetOwningPlayer(lv_azp))];
}
function f_azq(lv_azr) {
  return gv_aan[GetPlayerId(GetOwningPlayer(lv_azr))] * 0.5 + 0.5;
}
function f_azs() {
  var lv_azt = 0;
  var lv_azu;
  var lv_azv;
  var lv_azw;
  var lv_azx;
  var lv_azy;
  var lv_azz;
  do {
    if (lv_azt > 7) {
      break;
    }
    gv_aam[lv_azt] = 1 + 0.2 * I2R(f_ays(gv_ale[lv_azt]));
    gv_aan[lv_azt] = 1 + 0.1 * I2R(f_ays(gv_ale[lv_azt]));
    lv_azu = 0;
    lv_azx = 1;
    lv_azy = 1;
    do {
      if (lv_azu > 5) {
        break;
      }
      lv_azz = GetItemTypeId(UnitItemInSlot(gv_ale[lv_azt], lv_azu));
      lv_azv = 0;
      do {
        if (lv_azv > gv_aaE.getInt(1)) {
          break;
        }
        if (lv_azz == gv_aav.getInt(lv_azv)) {
          if (gv_aaC.getInt(lv_azv) > 0) {
            lv_azw = 1 - (gv_aaC.getInt(lv_azv) / 100) * gv_aan[lv_azt];
            lv_azx = lv_azx * lv_azw;
          }
          if (gv_aaD.getInt(lv_azv) > 0) {
            lv_azw = 1 - (gv_aaD.getInt(lv_azv) / 100) * gv_aan[lv_azt];
            lv_azy = lv_azy * lv_azw;
          }
          lv_azv = gv_aaE.getInt(1);
        }
        lv_azv = lv_azv + 1;
      } while (true);
      lv_azu = lv_azu + 1;
    } while (true);
    if (GetUnitAbilityLevel(gv_ale[lv_azt], "A04G") > 0) {
      lv_azx =
        lv_azx *
        (1 -
          ((7 + GetUnitAbilityLevel(gv_ale[lv_azt], "A03Q") * 6) *
            gv_aan[lv_azt]) /
            100);
    }
    if (GetUnitAbilityLevel(gv_ale[lv_azt], "A04P") > 0) {
      lv_azw = 0.9 - GetUnitAbilityLevel(gv_ale[lv_azt], "A04Q") * 0.05;
      lv_azy = lv_azy * lv_azw;
      lv_azx = lv_azx * lv_azw;
    }
    if (GetUnitAbilityLevel(gv_ale[lv_azt], "A09N") < 1) {
      UnitAddAbility(gv_ale[lv_azt], "A09N");
    }
    SetUnitAbilityLevel(gv_ale[lv_azt], "A09M", R2I(101 - lv_azx * 100));
    SetUnitAbilityLevel(gv_ale[lv_azt], "A01A", R2I(101 - lv_azy * 100));
    lv_azt = lv_azt + 1;
  } while (true);
}
function f_azA(lv_azB) {
  var lv_azC = GetUnitTypeId(gv_ale[lv_azB]);
  var lv_azD = 0;
  var lv_azE = 1;
  if (gv_ale[lv_azB] == null) {
    lv_azC = GetUnitTypeId(gv_ale[lv_azB + 16]);
  }
  do {
    if (lv_azD > 12) {
      break;
    }
    if (LoadInteger(gv_abL, 4, lv_azD) == lv_azC) {
      do {
        if (lv_azE > 5) {
          break;
        }
        DisplayTimedTextToPlayer(
          Player(lv_azB),
          0,
          0,
          30,
          LoadStr(gv_abL, lv_azE, lv_azD)
        );
        lv_azE = lv_azE + 1;
      } while (true);
      lv_azD = 12;
    }
    lv_azD = lv_azD + 1;
  } while (true);
}
function f_azF() {
  var lv_azG = GetFilterUnit();
  if (
    GetUnitState(lv_azG, UNIT_STATE_LIFE) > 0.405 &&
    IsUnitEnemy(lv_azG, GetOwningPlayer(gv_aad)) &&
    gv_aaf == 1
  ) {
    CreateUnit(
      GetOwningPlayer(lv_azG),
      GetUnitTypeId(lv_azG),
      GetUnitX(lv_azG),
      GetUnitY(lv_azG),
      270
    );
    gv_aaf = 0;
  }
  lv_azG = null;
  return false;
}
function f_azH() {
  var lv_azI = GetFilterUnit();
  if (
    GetUnitState(lv_azI, UNIT_STATE_LIFE) > 0.405 &&
    gv_aaf > 0 &&
    IsUnitEnemy(lv_azI, GetOwningPlayer(gv_aad))
  ) {
    if (
      IsUnitType(lv_azI, UNIT_TYPE_HERO) == false &&
      IsUnitType(lv_azI, UNIT_TYPE_GIANT) == false &&
      IsUnitType(lv_azI, UNIT_TYPE_STRUCTURE) == false &&
      lv_azI != gv_akL
    ) {
      CreateUnit(
        GetOwningPlayer(lv_azI),
        GetUnitTypeId(lv_azI),
        GetUnitX(lv_azI),
        GetUnitY(lv_azI),
        270
      );
      gv_aaf = gv_aaf - 1;
    }
  }
  lv_azI = null;
  return false;
}
function f_azJ() {
  var lv_azK = GetUnitTypeId(GetFilterUnit());
  return lv_azK == "nfnp" || lv_azK == "nfoh";
}
function f_azL(lv_azM) {
  if (
    GetInventoryIndexOfItemTypeBJ(lv_azM, "tgxp") +
      GetInventoryIndexOfItemTypeBJ(lv_azM, "tmsc") +
      GetInventoryIndexOfItemTypeBJ(lv_azM, "jpnt") >
    0
  ) {
    DestroyEffect(AddSpecialEffectTarget(gv_aml, lv_azM, "origin"));
    SetUnitState(
      lv_azM,
      UNIT_STATE_MANA,
      GetUnitState(lv_azM, UNIT_STATE_MANA) +
        (GetUnitState(lv_azM, UNIT_STATE_MAX_MANA) / 200) *
          (f_azo(lv_azM) - 0.7)
    );
  }
}
function f_azN(lv_azO, gv_aaj) {
  if (GetInventoryIndexOfItemTypeBJ(lv_azO, "cnhn") > 0) {
    SetUnitState(
      lv_azO,
      UNIT_STATE_LIFE,
      GetUnitState(lv_azO, UNIT_STATE_LIFE) + gv_aaj * f_azo(lv_azO) * 0.05
    );
  }
}
function f_azP(lv_azQ) {
  var lv_azR = GetPlayerId(GetOwningPlayer(lv_azQ));
  var lv_azS = 0;
  var lv_azT = 1;
  if (GetInventoryIndexOfItemTypeBJ(gv_ale[lv_azR], "oslo") > 0) {
    lv_azS = 7;
  } else {
    if (GetInventoryIndexOfItemTypeBJ(gv_ale[lv_azR], "oven") > 0) {
      lv_azS = 9;
    }
  }
  if (GetRandomInt(0, 100) < lv_azS * gv_aan[lv_azR]) {
    lv_azT = 1 + 1.2 * gv_aam[lv_azR] * GetRandomReal(0.85, 1.15);
  }
  return lv_azT;
}
function f_azU(lv_azV, lv_azW, lv_azX) {
  SetItemCharges(
    CreateItem(
      lv_azW,
      GetUnitX(gv_ale[lv_azX]) + GetRandomReal(-50, 50),
      GetUnitY(gv_ale[lv_azX]) + GetRandomReal(-50, 50)
    ),
    IMaxBJ(IMinBJ(lv_azV, 9), 1)
  );
}
function f_azY() {
  var lv_azZ = GetPlayerId(GetTriggerPlayer());
  var lv_aAa;
  var lv_aAb = GetEventPlayerChatString();
  var lv_aAc = false;
  if (lv_aAb == "-copyt" || lv_aAb == "-copy") {
    if (gv_aat.getInt(lv_azZ) >= 1) {
      gv_aad = gv_ale[lv_azZ];
      gv_aaM = GetUnitLoc(gv_aad);
      gv_aaQ = GetUnitsInRangeOfLocMatching(800, gv_aaM, Condition(f_azJ));
      bj_groupCountUnits = 0;
      ForGroup(gv_aaQ, CountUnitsInGroupEnum);
      DestroyGroup(gv_aaQ);
      if (bj_groupCountUnits < 1) {
        if (lv_aAb == "-copyt" && f_ays(gv_aad) > 2) {
          gv_aaf = 1;
          gv_aaQ = GetUnitsInRangeOfLocMatching(
            I2R(450 + 30 * f_ays(gv_aad)),
            gv_aaM,
            Condition(f_azF)
          );
        } else {
          if (lv_aAb == "-copy") {
            gv_aaf = R2I(12 * gv_aam[lv_azZ] * gv_aan[lv_azZ]);
            gv_aaQ = GetUnitsInRangeOfLocMatching(
              I2R(300 + 50 * f_ays(gv_aad)),
              gv_aaM,
              Condition(f_azH)
            );
          }
        }
        gv_aat[lv_azZ] = gv_aat.getInt(lv_azZ) - 1;
      } else {
        DisplayTextToPlayer(
          GetTriggerPlayer(),
          0,
          0,
          "Cannot copy near a fountain"
        );
      }
      RemoveLocation(gv_aaM);
      DestroyGroup(gv_aaQ);
      gv_aad = null;
    } else {
      DisplayTextToPlayer(
        Player(lv_azZ),
        0,
        0,
        "Copy command is cooling down."
      );
    }
  } else {
    if (lv_aAb == "-dbl" && f_ays(gv_ale[lv_azZ]) > 0 && lv_aAc) {
      gv_aak = 2;
      DisplayTextToPlayer(GetTriggerPlayer(), 0, 0, "double buff");
    } else {
      if (lv_aAb == "-tpl" && f_ays(gv_ale[lv_azZ]) > 0 && lv_aAc) {
        gv_aak = 3;
        DisplayTextToPlayer(GetTriggerPlayer(), 0, 0, "triple buff");
      } else {
        if (lv_aAb == "-ez" && f_ays(gv_ale[lv_azZ]) > 0 && lv_aAc) {
          gv_aak = 1.5;
          DisplayTextToPlayer(
            GetTriggerPlayer(),
            0,
            0,
            "50% bonus exp and gold"
          );
        } else {
          if (lv_aAb == "-normal" || lv_aAb == "-ezoff") {
            gv_aak = 1;
            DisplayTextToPlayer(GetTriggerPlayer(), 0, 0, "reverted to normal");
          } else {
            if (
              SubString(lv_aAb, 0, 5) == "-demi" &&
              (f_ays(gv_ale[lv_azZ]) > 0 || gv_abc)
            ) {
              gv_aal = S2R(SubString(lv_aAb, 6, 9));
              if (gv_aal < 1) {
                gv_aal = 1;
              }
              DisplayTimedTextToPlayer(
                GetTriggerPlayer(),
                0,
                0,
                5,
                R2S(gv_aal)
              );
            } else {
              if (SubString(lv_aAb, 0, 5) == "-show") {
                lv_aAa = S2I(SubString(lv_aAb, 6, 9)) - 1;
                if (lv_aAa != lv_azZ && gv_ale[lv_aAa] != null) {
                  SetPlayerAllianceBJ(
                    Player(lv_aAa),
                    ALLIANCE_SHARED_ADVANCED_CONTROL,
                    true,
                    Player(lv_azZ)
                  );
                  SetPlayerAllianceBJ(
                    Player(lv_aAa),
                    ALLIANCE_SHARED_CONTROL,
                    false,
                    Player(lv_azZ)
                  );
                  DisplayTimedTextToPlayer(
                    GetTriggerPlayer(),
                    0,
                    0,
                    5,
                    "Can now see the icon for " + GetPlayerName(Player(lv_aAa))
                  );
                } else {
                  DisplayTimedTextToPlayer(
                    GetTriggerPlayer(),
                    0,
                    0,
                    5,
                    "failed for " + I2S(lv_aAa + 1) + " and " + I2S(lv_azZ + 1)
                  );
                }
              } else {
                if (SubString(lv_aAb, 0, 5) == "-hide") {
                  lv_aAa = S2I(SubString(lv_aAb, 6, 9)) - 1;
                  if (lv_aAa != lv_azZ && gv_ale[lv_aAa] != null) {
                    SetPlayerAllianceBJ(
                      Player(lv_aAa),
                      ALLIANCE_SHARED_ADVANCED_CONTROL,
                      false,
                      Player(lv_azZ)
                    );
                    DisplayTimedTextToPlayer(
                      GetTriggerPlayer(),
                      0,
                      0,
                      5,
                      "hid icon for " + GetPlayerName(Player(lv_aAa))
                    );
                  }
                } else {
                  if (lv_aAb == "-bh" && lv_aAc) {
                    lv_aAa =
                      GetPlayerState(
                        GetTriggerPlayer(),
                        PLAYER_STATE_RESOURCE_GOLD
                      ) / 60000;
                    SetPlayerState(
                      GetTriggerPlayer(),
                      PLAYER_STATE_RESOURCE_GOLD,
                      GetPlayerState(
                        GetTriggerPlayer(),
                        PLAYER_STATE_RESOURCE_GOLD
                      ) -
                        lv_aAa * 60000
                    );
                    AdjustPlayerStateBJ(
                      R2I(lv_aAa * gv_aan[GetPlayerId(GetTriggerPlayer())]),
                      GetTriggerPlayer(),
                      PLAYER_STATE_RESOURCE_LUMBER
                    );
                    DisplayTextToPlayer(
                      GetTriggerPlayer(),
                      0,
                      0,
                      "You bought " + I2S(lv_aAa) + " honor"
                    );
                  } else {
                    if (lv_aAb == "-book" || lv_aAb == "-  ") {
                      if (gv_aat.getInt(lv_azZ) > 2) {
                        DisplayTextToPlayer(GetTriggerPlayer(), 0, 0, gv_aaW);
                      } else {
                        DisplayTextToPlayer(GetTriggerPlayer(), 0, 0, "-");
                      }
                    } else {
                      if (lv_aAb == "-abinfo") {
                        f_azA(lv_azZ);
                      } else {
                        if (lv_aAb == "-ab") {
                          DisplayTimedTextToPlayer(
                            Player(lv_azZ),
                            0,
                            0,
                            10,
                            R2S(gv_aam[lv_azZ]) + "  " + R2S(gv_aan[lv_azZ])
                          );
                        } else {
                          if (lv_aAb == "-reset") {
                            f_ayO();
                          } else {
                            if (lv_aAb == "-beta") {
                              DisableTrigger(gv_ajB);
                              gv_abc = true;
                              DisplayTextToPlayer(
                                GetTriggerPlayer(),
                                0,
                                0,
                                "beta-mode activated, 30 seconds kick deactivated, but no saving"
                              );
                            } else {
                              if (lv_aAb == "-cc" || lv_aAb == "-commands") {
                                DisplayTextToPlayer(
                                  GetTriggerPlayer(),
                                  0,
                                  0,
                                  gv_aaX
                                );
                                if (gv_abc) {
                                  DisplayTextToPlayer(
                                    GetTriggerPlayer(),
                                    0,
                                    0,
                                    gv_aaY
                                  );
                                }
                              } else {
                                if (lv_aAb == "-titan" || lv_aAb == "-titans") {
                                  lv_aAa = 1;
                                  do {
                                    if (lv_aAa > 9) {
                                      break;
                                    }
                                    if (GetWidgetLife(gv_aaU[lv_aAa]) > 10) {
                                      DisplayTextToPlayer(
                                        GetLocalPlayer(),
                                        0,
                                        0,
                                        S2S(
                                          gv_aaV[lv_aAa] +
                                            ": is |cff00ff00Alive|r"
                                        )
                                      );
                                    } else {
                                      DisplayTextToPlayer(
                                        GetLocalPlayer(),
                                        0,
                                        0,
                                        S2S(
                                          gv_aaV[lv_aAa] +
                                            ": is |cffff0000Dead|r"
                                        )
                                      );
                                    }
                                    if (gv_alg.getInt(lv_aAa + 7000) == 2) {
                                      DisplayTextToPlayer(
                                        GetLocalPlayer(),
                                        0,
                                        0,
                                        S2S(gv_alf[lv_aAa + 7200] + ": is next")
                                      );
                                      PingMinimap(
                                        gv_abs[lv_aAa],
                                        gv_abs[lv_aAa + 100],
                                        5
                                      );
                                    }
                                    lv_aAa = lv_aAa + 1;
                                  } while (true);
                                } else {
                                  if (lv_aAb == "-myloc") {
                                    DisplayTextToPlayer(
                                      GetTriggerPlayer(),
                                      0,
                                      0,
                                      R2S(GetUnitX(gv_ale[lv_azZ])) +
                                        " , " +
                                        R2S(GetUnitY(gv_ale[lv_azZ]))
                                    );
                                  } else {
                                    if (lv_aAb == "-plad  ") {
                                      PingMinimap(
                                        GetUnitX(gv_akr),
                                        GetUnitY(gv_akr),
                                        5
                                      );
                                    } else {
                                      if (
                                        lv_aAb == "-clear" ||
                                        lv_aAb == "-cl"
                                      ) {
                                        if (
                                          GetPlayerId(GetLocalPlayer()) ==
                                          lv_azZ
                                        ) {
                                          ClearTextMessages();
                                        }
                                      } else {
                                        if (lv_aAb == "-stats") {
                                          lv_aAb =
                                            "** Your Hero has  |cff00ff00Speed:|r " +
                                            I2S(
                                              R2I(
                                                GetUnitMoveSpeed(gv_ale[lv_azZ])
                                              )
                                            );
                                          lv_aAb =
                                            S2S(
                                              lv_aAb +
                                                "\n|cffffffffExtra Spell |cff00ff00Damage:|r "
                                            ) +
                                            I2S(R2I(gv_ald[lv_azZ])) +
                                            "-" +
                                            I2S(
                                              R2I(
                                                f_ays(gv_ale[lv_azZ]) / gv_aak +
                                                  0.5
                                              )
                                            ) +
                                            ", |cffffd700xHealing:|r " +
                                            I2S(R2I(gv_ald[lv_azZ + 8]));
                                          lv_aAb =
                                            S2S(lv_aAb + ", Copies: ") +
                                            I2S(gv_aat.getInt(lv_azZ)) +
                                            "\n|cff00ff00Evasion|r: " +
                                            I2S(
                                              IMaxBJ(
                                                GetUnitAbilityLevel(
                                                  gv_ale[lv_azZ],
                                                  "A09M"
                                                ) - 1,
                                                0
                                              )
                                            );
                                          DisplayTimedTextToPlayer(
                                            Player(lv_azZ),
                                            0.4,
                                            -0.6,
                                            13,
                                            lv_aAb
                                          );
                                        }
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }
  if (lv_aAc && gv_abc) {
    if (lv_aAb == "") {
    } else {
      if (SubString(lv_aAb, 0, 5) == "-lvl ") {
        SetHeroLevelBJ(gv_ale[lv_azZ], S2I(SubString(lv_aAb, 5, 8)), false);
      } else {
        if (SubString(lv_aAb, 0, 3) == "-g ") {
          SetPlayerState(
            GetTriggerPlayer(),
            PLAYER_STATE_RESOURCE_GOLD,
            S2I(SubString(lv_aAb, 3, 10))
          );
        } else {
          if (SubString(lv_aAb, 0, 3) == "-l ") {
            SetPlayerState(
              GetTriggerPlayer(),
              PLAYER_STATE_RESOURCE_LUMBER,
              S2I(SubString(lv_aAb, 3, 10))
            );
          } else {
            if (SubString(lv_aAb, 0, 4) == "-str") {
              lv_aAa = S2I(SubString(lv_aAb, 4, 9));
              SetHeroStr(gv_ale[lv_azZ], lv_aAa, true);
            } else {
              if (SubString(lv_aAb, 0, 4) == "-agi") {
                lv_aAa = S2I(SubString(lv_aAb, 4, 9));
                SetHeroAgi(gv_ale[lv_azZ], lv_aAa, true);
              } else {
                if (SubString(lv_aAb, 0, 4) == "-int") {
                  lv_aAa = S2I(SubString(lv_aAb, 4, 9));
                  SetHeroInt(gv_ale[lv_azZ], lv_aAa, true);
                } else {
                  if (SubString(lv_aAb, 0, 3) == "-hp") {
                    lv_aAa = S2I(SubString(lv_aAb, 4, 9));
                    SetUnitState(gv_ale[lv_azZ], UNIT_STATE_LIFE, lv_aAa);
                  } else {
                    if (SubString(lv_aAb, 0, 3) == "-cd") {
                      UnitResetCooldown(gv_ale[lv_azZ]);
                    } else {
                      if (SubString(lv_aAb, 0, 5) == "-gold") {
                        lv_aAa = S2I(SubString(lv_aAb, 5, 12));
                        SetPlayerState(
                          Player(lv_azZ),
                          PLAYER_STATE_RESOURCE_GOLD,
                          GetPlayerState(
                            Player(lv_azZ),
                            PLAYER_STATE_RESOURCE_GOLD
                          ) + lv_aAa
                        );
                      } else {
                        if (SubString(lv_aAb, 0, 6) == "-honor") {
                          lv_aAa = S2I(SubString(lv_aAb, 6, 12));
                          SetPlayerState(
                            Player(lv_azZ),
                            PLAYER_STATE_RESOURCE_LUMBER,
                            GetPlayerState(
                              Player(lv_azZ),
                              PLAYER_STATE_RESOURCE_LUMBER
                            ) + lv_aAa
                          );
                        } else {
                          if (SubString(lv_aAb, 0, 6) == "-favor") {
                            lv_aAa = S2I(SubString(lv_aAb, 6, 10));
                            SetPlayerState(
                              Player(lv_azZ),
                              PLAYER_STATE_RESOURCE_FOOD_USED,
                              GetPlayerState(
                                Player(lv_azZ),
                                PLAYER_STATE_RESOURCE_FOOD_USED
                              ) + lv_aAa
                            );
                          } else {
                            if (SubString(lv_aAb, 0, 4) == "-ion") {
                              lv_aAa = S2I(SubString(lv_aAb, 5, 7));
                              f_azU(lv_aAa, "fgsk", lv_azZ);
                              f_azU(lv_aAa, "fgdg", lv_azZ);
                              f_azU(lv_aAa, "wild", lv_azZ);
                            } else {
                              if (SubString(lv_aAb, 0, 6) == "-troll") {
                                lv_aAa = S2I(SubString(lv_aAb, 6, 8));
                                f_azU(lv_aAa, "srrc", lv_azZ);
                              } else {
                                if (SubString(lv_aAb, 0, 6) == "-harpy") {
                                  lv_aAa = S2I(SubString(lv_aAb, 6, 8));
                                  f_azU(lv_aAa, "wswd", lv_azZ);
                                } else {
                                  if (SubString(lv_aAb, 0, 5) == "-naga") {
                                    lv_aAa = S2I(SubString(lv_aAb, 5, 8));
                                    f_azU(lv_aAa, "fgrg", lv_azZ);
                                  } else {
                                    if (SubString(lv_aAb, 0, 6) == "-satyr") {
                                      lv_aAa = S2I(SubString(lv_aAb, 6, 8));
                                      f_azU(lv_aAa, "totw", lv_azZ);
                                    } else {
                                      if (
                                        SubString(lv_aAb, 0, 7) == "-treant"
                                      ) {
                                        lv_aAa = S2I(SubString(lv_aAb, 7, 9));
                                        f_azU(lv_aAa, "will", lv_azZ);
                                      } else {
                                        if (SubString(lv_aAb, 0, 4) == "-sos") {
                                          lv_aAa = S2I(SubString(lv_aAb, 5, 8));
                                          f_azU(lv_aAa, "wlsd", lv_azZ);
                                        } else {
                                          if (
                                            SubString(lv_aAb, 0, 4) == "-hof"
                                          ) {
                                            lv_aAa = S2I(
                                              SubString(lv_aAb, 5, 8)
                                            );
                                            f_azU(lv_aAa, "woms", lv_azZ);
                                          } else {
                                            if (
                                              SubString(lv_aAb, 0, 5) == "-ruby"
                                            ) {
                                              lv_aAa = S2I(
                                                SubString(lv_aAb, 5, 8)
                                              );
                                              f_azU(lv_aAa, "whwd", lv_azZ);
                                            } else {
                                              if (
                                                SubString(lv_aAb, 0, 4) ==
                                                "-soh"
                                              ) {
                                                lv_aAa = S2I(
                                                  SubString(lv_aAb, 4, 8)
                                                );
                                                f_azU(lv_aAa, "I01H", lv_azZ);
                                              } else {
                                                if (
                                                  SubString(lv_aAb, 0, 5) ==
                                                  "-bhol"
                                                ) {
                                                  lv_aAa = S2I(
                                                    SubString(lv_aAb, 5, 8)
                                                  );
                                                  f_azU(lv_aAa, "I01D", lv_azZ);
                                                } else {
                                                  if (
                                                    SubString(lv_aAb, 0, 6) ==
                                                    "-skull"
                                                  ) {
                                                    lv_aAa = S2I(
                                                      SubString(lv_aAb, 6, 8)
                                                    );
                                                    f_azU(
                                                      lv_aAa,
                                                      "I01C",
                                                      lv_azZ
                                                    );
                                                  } else {
                                                    if (
                                                      SubString(lv_aAb, 0, 4) ==
                                                      "-pelt"
                                                    ) {
                                                      lv_aAa = S2I(
                                                        SubString(lv_aAb, 5, 8)
                                                      );
                                                      f_azU(
                                                        lv_aAa,
                                                        "gmfr",
                                                        lv_azZ
                                                      );
                                                    } else {
                                                      if (lv_aAb == "-seal") {
                                                        CreateItem(
                                                          "I01W",
                                                          GetUnitX(
                                                            gv_ale[lv_azZ]
                                                          ) +
                                                            GetRandomReal(
                                                              -50,
                                                              50
                                                            ),
                                                          GetUnitY(
                                                            gv_ale[lv_azZ]
                                                          ) +
                                                            GetRandomReal(
                                                              -50,
                                                              50
                                                            )
                                                        );
                                                      } else {
                                                        if (
                                                          lv_aAb == "-flawless"
                                                        ) {
                                                          CreateItem(
                                                            "I01V",
                                                            GetUnitX(
                                                              gv_ale[lv_azZ]
                                                            ) +
                                                              GetRandomReal(
                                                                -50,
                                                                50
                                                              ),
                                                            GetUnitY(
                                                              gv_ale[lv_azZ]
                                                            ) +
                                                              GetRandomReal(
                                                                -50,
                                                                50
                                                              )
                                                          );
                                                        } else {
                                                          if (
                                                            lv_aAb == "-items"
                                                          ) {
                                                            CreateItem(
                                                              "ccmd",
                                                              GetUnitX(
                                                                gv_ale[lv_azZ]
                                                              ),
                                                              GetUnitY(
                                                                gv_ale[lv_azZ]
                                                              )
                                                            );
                                                            CreateItem(
                                                              "sfog",
                                                              GetUnitX(
                                                                gv_ale[lv_azZ]
                                                              ),
                                                              GetUnitY(
                                                                gv_ale[lv_azZ]
                                                              )
                                                            );
                                                            if (
                                                              gv_aat.getInt(
                                                                lv_azZ
                                                              ) > 3
                                                            ) {
                                                              CreateItem(
                                                                "I00Y",
                                                                GetUnitX(
                                                                  gv_ale[lv_azZ]
                                                                ),
                                                                GetUnitY(
                                                                  gv_ale[lv_azZ]
                                                                )
                                                              );
                                                              CreateItem(
                                                                "I013",
                                                                GetUnitX(
                                                                  gv_ale[lv_azZ]
                                                                ),
                                                                GetUnitY(
                                                                  gv_ale[lv_azZ]
                                                                )
                                                              );
                                                              CreateItem(
                                                                "shen",
                                                                GetUnitX(
                                                                  gv_ale[lv_azZ]
                                                                ),
                                                                GetUnitY(
                                                                  gv_ale[lv_azZ]
                                                                )
                                                              );
                                                              CreateItem(
                                                                "rej3",
                                                                GetUnitX(
                                                                  gv_ale[lv_azZ]
                                                                ),
                                                                GetUnitY(
                                                                  gv_ale[lv_azZ]
                                                                )
                                                              );
                                                              CreateItem(
                                                                "rej3",
                                                                GetUnitX(
                                                                  gv_ale[lv_azZ]
                                                                ),
                                                                GetUnitY(
                                                                  gv_ale[lv_azZ]
                                                                )
                                                              );
                                                              CreateItem(
                                                                "rej3",
                                                                GetUnitX(
                                                                  gv_ale[lv_azZ]
                                                                ),
                                                                GetUnitY(
                                                                  gv_ale[lv_azZ]
                                                                )
                                                              );
                                                              CreateItem(
                                                                "rej3",
                                                                GetUnitX(
                                                                  gv_ale[lv_azZ]
                                                                ),
                                                                GetUnitY(
                                                                  gv_ale[lv_azZ]
                                                                )
                                                              );
                                                              CreateItem(
                                                                "woms",
                                                                GetUnitX(
                                                                  gv_ale[lv_azZ]
                                                                ),
                                                                GetUnitY(
                                                                  gv_ale[lv_azZ]
                                                                )
                                                              );
                                                              CreateItem(
                                                                "woms",
                                                                GetUnitX(
                                                                  gv_ale[lv_azZ]
                                                                ),
                                                                GetUnitY(
                                                                  gv_ale[lv_azZ]
                                                                )
                                                              );
                                                              CreateItem(
                                                                "woms",
                                                                GetUnitX(
                                                                  gv_ale[lv_azZ]
                                                                ),
                                                                GetUnitY(
                                                                  gv_ale[lv_azZ]
                                                                )
                                                              );
                                                              CreateItem(
                                                                "whwd",
                                                                GetUnitX(
                                                                  gv_ale[lv_azZ]
                                                                ),
                                                                GetUnitY(
                                                                  gv_ale[lv_azZ]
                                                                )
                                                              );
                                                              CreateItem(
                                                                "whwd",
                                                                GetUnitX(
                                                                  gv_ale[lv_azZ]
                                                                ),
                                                                GetUnitY(
                                                                  gv_ale[lv_azZ]
                                                                )
                                                              );
                                                              CreateItem(
                                                                "I01H",
                                                                GetUnitX(
                                                                  gv_ale[lv_azZ]
                                                                ),
                                                                GetUnitY(
                                                                  gv_ale[lv_azZ]
                                                                )
                                                              );
                                                              CreateItem(
                                                                "I01H",
                                                                GetUnitX(
                                                                  gv_ale[lv_azZ]
                                                                ),
                                                                GetUnitY(
                                                                  gv_ale[lv_azZ]
                                                                )
                                                              );
                                                              CreateItem(
                                                                "I01H",
                                                                GetUnitX(
                                                                  gv_ale[lv_azZ]
                                                                ),
                                                                GetUnitY(
                                                                  gv_ale[lv_azZ]
                                                                )
                                                              );
                                                              CreateItem(
                                                                "I01D",
                                                                GetUnitX(
                                                                  gv_ale[lv_azZ]
                                                                ),
                                                                GetUnitY(
                                                                  gv_ale[lv_azZ]
                                                                )
                                                              );
                                                              CreateItem(
                                                                "I01D",
                                                                GetUnitX(
                                                                  gv_ale[lv_azZ]
                                                                ),
                                                                GetUnitY(
                                                                  gv_ale[lv_azZ]
                                                                )
                                                              );
                                                            }
                                                          }
                                                        }
                                                      }
                                                    }
                                                  }
                                                }
                                              }
                                            }
                                          }
                                        }
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }
  lv_aAb = "";
}
function f_aAd() {
  var lv_aAe = 0;
  var lv_aAf = 0;
  var lv_aAg = 1;
  do {
    if (lv_aAe > 8) {
      break;
    }
    if (GetHeroLevel(gv_ale[lv_aAe]) > 1) {
      lv_aAf = lv_aAf + 1;
    }
    lv_aAe = lv_aAe + 1;
  } while (true);
  if (lv_aAf == 2) {
    lv_aAg = 2;
  } else {
    if (lv_aAf < 2) {
      lv_aAf = 1;
    }
  }
  lv_aAe = 0;
  do {
    if (lv_aAe > 8) {
      break;
    }
    if (gv_aat.getInt(lv_aAe) < lv_aAg + f_ays(gv_ale[lv_aAe])) {
      gv_aap[lv_aAe] =
        gv_aap[lv_aAe] + (0.2 * (-0.5 + f_azm(gv_ale[lv_aAe]))) / lv_aAf;
      if (gv_aap[lv_aAe] > 1) {
        gv_aap[lv_aAe] = gv_aap[lv_aAe] - 1;
        gv_aat[lv_aAe] = gv_aat.getInt(lv_aAe) + 1;
      }
    }
    if (gv_aao[lv_aAe] > 0) {
      gv_aao[lv_aAe] = gv_aao[lv_aAe] - 0.08 * f_azm(gv_ale[lv_aAe]) + 0.05;
    } else {
      if (gv_aao[lv_aAe] > -5) {
        gv_aao[lv_aAe] = gv_aao[lv_aAe] - 0.04 * f_azm(gv_ale[lv_aAe]) + 0.03;
      }
    }
    lv_aAe = lv_aAe + 1;
  } while (true);
}
function f_aAh(lv_aAi, lv_aAj) {
  var lv_aAk = CreateGroup();
  var lv_aAl;
  var lv_aAm = lv_aAj / 200;
  GroupEnumUnitsInRange(lv_aAk, GetUnitX(lv_aAi), GetUnitY(lv_aAi), 900, null);
  do {
    lv_aAl = FirstOfGroup(lv_aAk);
    if (lv_aAl == null) {
      break;
    }
    if (
      GetWidgetLife(lv_aAl) > 0.405 &&
      IsUnitAlly(lv_aAl, GetOwningPlayer(lv_aAi))
    ) {
      SetUnitState(
        lv_aAl,
        UNIT_STATE_MANA,
        GetUnitState(lv_aAl, UNIT_STATE_MANA) +
          GetUnitState(lv_aAl, UNIT_STATE_MAX_MANA) * lv_aAm * f_azo(lv_aAl)
      );
    }
    GroupRemoveUnit(lv_aAk, lv_aAl);
    lv_aAl = null;
  } while (true);
  DestroyGroup(lv_aAk);
  lv_aAk = null;
}
function f_aAn() {
  var lv_aAo = 0;
  do {
    if (lv_aAo > 8) {
      break;
    }
    if (GetUnitAbilityLevel(gv_ale[lv_aAo], "B00J") > 0) {
      SetUnitState(
        gv_ale[lv_aAo],
        UNIT_STATE_LIFE,
        GetUnitState(gv_ale[lv_aAo], UNIT_STATE_LIFE) +
          (GetUnitState(gv_ale[lv_aAo], UNIT_STATE_MAX_LIFE) / 230) *
            f_azo(gv_ale[lv_aAo])
      );
    }
    if (UnitHasItemOfTypeBJ(gv_ale[lv_aAo], "ocor")) {
      SetUnitState(
        gv_ale[lv_aAo],
        UNIT_STATE_MANA,
        GetUnitState(gv_ale[lv_aAo], UNIT_STATE_MANA) +
          GetUnitState(gv_ale[lv_aAo], UNIT_STATE_MAX_MANA) *
            0.015 *
            f_azo(gv_ale[lv_aAo])
      );
      f_aAh(gv_ale[lv_aAo], 1 * f_azo(gv_ale[lv_aAo]));
    } else {
      if (UnitHasItemOfTypeBJ(gv_ale[lv_aAo], "ofir")) {
        SetUnitState(
          gv_ale[lv_aAo],
          UNIT_STATE_MANA,
          GetUnitState(gv_ale[lv_aAo], UNIT_STATE_MANA) +
            GetUnitState(gv_ale[lv_aAo], UNIT_STATE_MAX_MANA) *
              0.02 *
              f_azo(gv_ale[lv_aAo])
        );
        f_aAh(gv_ale[lv_aAo], 1.5 * f_azo(gv_ale[lv_aAo]));
      }
    }
    lv_aAo = lv_aAo + 1;
  } while (true);
}
function f_aAp(lv_aAq, lv_aAr) {
  if (GetWidgetLife(lv_aAq) > lv_aAr) {
    SetWidgetLife(lv_aAq, GetWidgetLife(lv_aAq) - lv_aAr);
  } else {
    if (GetWidgetLife(lv_aAq) > 0.405) {
      SetWidgetLife(lv_aAq, 1);
    }
  }
}
function f_aAs(lv_aAt) {
  gv_aac = "";
  if (GetUnitTypeId(lv_aAt) == "Udre") {
    gv_aac = "AR ";
  } else {
    if (GetUnitTypeId(lv_aAt) == "Hjai") {
      gv_aac = "Amazon ";
    } else {
      if (GetUnitTypeId(lv_aAt) == "Emoo") {
        gv_aac = "Jav ";
      } else {
        if (GetUnitTypeId(lv_aAt) == "Udea") {
          gv_aac = "SW ";
        } else {
          if (GetUnitTypeId(lv_aAt) == "Hamg") {
            gv_aac = "bkr ";
          } else {
            if (GetUnitTypeId(lv_aAt) == "Hblm") {
              gv_aac = "hydro ";
            } else {
              if (GetUnitTypeId(lv_aAt) == "Hpal") {
                gv_aac = "TG ";
              } else {
                if (GetUnitTypeId(lv_aAt) == "Ulic") {
                  gv_aac = "pyro ";
                } else {
                  if (GetUnitTypeId(lv_aAt) == "Oshd") {
                    gv_aac = "prst ";
                  } else {
                    if (GetUnitTypeId(lv_aAt) == "Hant") {
                      gv_aac = "spbld ";
                    } else {
                      if (GetUnitTypeId(lv_aAt) == "Ekee") {
                        gv_aac = "Dryad ";
                      } else {
                        if (GetUnitTypeId(lv_aAt) == "Edem") {
                          gv_aac = "Assas ";
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }
}
function f_aAu() {
  return (
    (IsUnitType(GetFilterUnit(), UNIT_TYPE_MAGIC_IMMUNE) == false &&
      IsUnitType(GetFilterUnit(), UNIT_TYPE_ANCIENT) == false &&
      IsUnitInRangeXY(GetFilterUnit(), gv_ach, gv_aci, gv_acj) &&
      GetWidgetLife(GetFilterUnit()) > 0.405 &&
      IsUnitEnemy(GetFilterUnit(), gv_acg)) != null
  );
}
function f_aAv() {
  return (
    (IsUnitType(GetFilterUnit(), UNIT_TYPE_ANCIENT) == false &&
      IsUnitType(GetFilterUnit(), UNIT_TYPE_STRUCTURE) == false &&
      IsUnitInRangeXY(GetFilterUnit(), gv_ach, gv_aci, gv_acj) &&
      GetWidgetLife(GetFilterUnit()) > 0.405 &&
      IsUnitAlly(GetFilterUnit(), gv_acg)) != null
  );
}
function f_aAw() {
  return (
    (IsUnitType(GetFilterUnit(), UNIT_TYPE_STRUCTURE) == false &&
      GetWidgetLife(GetFilterUnit()) > 0.405 &&
      IsUnitAlly(GetFilterUnit(), gv_acg)) != null
  );
}
function f_aAx() {
  var lv_aAy;
  lv_aAy = BONUS_ARMOR * BonusMod__ABILITY_COUNT;
  gv_abl[lv_aAy + 0] = "ZxA0";
  gv_abl[lv_aAy + 1] = "ZxA1";
  gv_abl[lv_aAy + 2] = "ZxA2";
  gv_abl[lv_aAy + 3] = "ZxA3";
  gv_abl[lv_aAy + 4] = "ZxA4";
  gv_abl[lv_aAy + 5] = "ZxA5";
  gv_abl[lv_aAy + 6] = "ZxA6";
  gv_abl[lv_aAy + 7] = "ZxA7";
  gv_abl[lv_aAy + 8] = "ZxA8";
  gv_abl[lv_aAy + 9] = "ZxA9";
  gv_abl[lv_aAy + 10] = "ZxAa";
  gv_abl[lv_aAy + 11] = "ZxAb";
  gv_abl[lv_aAy + 12] = "ZxAc";
  lv_aAy = BONUS_DAMAGE * BonusMod__ABILITY_COUNT;
  gv_abl[lv_aAy + 0] = "ZxB0";
  gv_abl[lv_aAy + 1] = "ZxB1";
  gv_abl[lv_aAy + 2] = "ZxB2";
  gv_abl[lv_aAy + 3] = "ZxB3";
  gv_abl[lv_aAy + 4] = "ZxB4";
  gv_abl[lv_aAy + 5] = "ZxB5";
  gv_abl[lv_aAy + 6] = "ZxB6";
  gv_abl[lv_aAy + 7] = "ZxB7";
  gv_abl[lv_aAy + 8] = "ZxB8";
  gv_abl[lv_aAy + 9] = "ZxB9";
  gv_abl[lv_aAy + 10] = "ZxBa";
  gv_abl[lv_aAy + 11] = "ZxBb";
  gv_abl[lv_aAy + 12] = "ZxBc";
  lv_aAy = BONUS_LIFE_REGEN * BonusMod__ABILITY_COUNT;
  gv_abl[lv_aAy + 0] = "ZxH0";
  gv_abl[lv_aAy + 1] = "ZxH1";
  gv_abl[lv_aAy + 2] = "ZxH2";
  gv_abl[lv_aAy + 3] = "ZxH3";
  gv_abl[lv_aAy + 4] = "ZxH4";
  gv_abl[lv_aAy + 5] = "ZxH5";
  gv_abl[lv_aAy + 6] = "ZxH6";
  gv_abl[lv_aAy + 7] = "ZxH7";
  gv_abl[lv_aAy + 8] = "ZxH8";
  gv_abl[lv_aAy + 9] = "ZxH9";
  gv_abl[lv_aAy + 10] = "ZxHa";
  gv_abl[lv_aAy + 11] = "ZxHb";
  gv_abl[lv_aAy + 12] = "ZxHc";
  lv_aAy = BONUS_HERO_STR * BonusMod__ABILITY_COUNT;
  gv_abl[lv_aAy + 0] = "ZxS0";
  gv_abl[lv_aAy + 1] = "ZxS1";
  gv_abl[lv_aAy + 2] = "ZxS2";
  gv_abl[lv_aAy + 3] = "ZxS3";
  gv_abl[lv_aAy + 4] = "ZxS4";
  gv_abl[lv_aAy + 5] = "ZxS5";
  gv_abl[lv_aAy + 6] = "ZxS6";
  gv_abl[lv_aAy + 7] = "ZxS7";
  gv_abl[lv_aAy + 8] = "ZxS8";
  gv_abl[lv_aAy + 9] = "ZxS9";
  gv_abl[lv_aAy + 10] = "ZxSa";
  gv_abl[lv_aAy + 11] = "ZxSb";
  gv_abl[lv_aAy + 12] = "ZxSc";
  lv_aAy = BONUS_HERO_AGI * BonusMod__ABILITY_COUNT;
  gv_abl[lv_aAy + 0] = "ZxG0";
  gv_abl[lv_aAy + 1] = "ZxG1";
  gv_abl[lv_aAy + 2] = "ZxG2";
  gv_abl[lv_aAy + 3] = "ZxG3";
  gv_abl[lv_aAy + 4] = "ZxG4";
  gv_abl[lv_aAy + 5] = "ZxG5";
  gv_abl[lv_aAy + 6] = "ZxG6";
  gv_abl[lv_aAy + 7] = "ZxG7";
  gv_abl[lv_aAy + 8] = "ZxG8";
  gv_abl[lv_aAy + 9] = "ZxG9";
  gv_abl[lv_aAy + 10] = "ZxGa";
  gv_abl[lv_aAy + 11] = "ZxGb";
  gv_abl[lv_aAy + 12] = "ZxGc";
  lv_aAy = BONUS_HERO_INT * BonusMod__ABILITY_COUNT;
  gv_abl[lv_aAy + 0] = "ZxI0";
  gv_abl[lv_aAy + 1] = "ZxI1";
  gv_abl[lv_aAy + 2] = "ZxI2";
  gv_abl[lv_aAy + 3] = "ZxI3";
  gv_abl[lv_aAy + 4] = "ZxI4";
  gv_abl[lv_aAy + 5] = "ZxI5";
  gv_abl[lv_aAy + 6] = "ZxI6";
  gv_abl[lv_aAy + 7] = "ZxI7";
  gv_abl[lv_aAy + 8] = "ZxI8";
  gv_abl[lv_aAy + 9] = "ZxI9";
  gv_abl[lv_aAy + 10] = "ZxIa";
  gv_abl[lv_aAy + 11] = "ZxIb";
  gv_abl[lv_aAy + 12] = "ZxIc";
}
function f_aAz(lv_aAA, lv_aAB) {
  var lv_aAC = 0;
  do {
    UnitRemoveAbility(
      lv_aAA,
      gv_abl.getInt(lv_aAB * BonusMod__ABILITY_COUNT + lv_aAC)
    );
    lv_aAC = lv_aAC + 1;
    if (lv_aAC == BonusMod__ABILITY_COUNT - 2) {
      break;
    }
  } while (true);
}
function f_aAD(lv_aAE, lv_aAF, lv_aAG) {
  var lv_aAH = BonusMod__ABILITY_COUNT - 2;
  if (lv_aAG < gv_abo || lv_aAG > gv_abn) {
    return false;
  } else {
    if (lv_aAF < 0 || lv_aAF >= BONUS_TYPES) {
      return false;
    }
  }
  if (lv_aAG < 0) {
    lv_aAG = gv_abn + lv_aAG + 1;
    UnitAddAbility(
      lv_aAE,
      gv_abl.getInt(
        lv_aAF * BonusMod__ABILITY_COUNT + BonusMod__ABILITY_COUNT - 1
      )
    );
    UnitMakeAbilityPermanent(
      lv_aAE,
      true,
      gv_abl.getInt(
        lv_aAF * BonusMod__ABILITY_COUNT + BonusMod__ABILITY_COUNT - 1
      )
    );
  } else {
    UnitRemoveAbility(
      lv_aAE,
      gv_abl.getInt(
        lv_aAF * BonusMod__ABILITY_COUNT + BonusMod__ABILITY_COUNT - 1
      )
    );
  }
  do {
    if (lv_aAG >= gv_abm.getInt(lv_aAH)) {
      UnitAddAbility(
        lv_aAE,
        gv_abl.getInt(lv_aAF * BonusMod__ABILITY_COUNT + lv_aAH)
      );
      UnitMakeAbilityPermanent(
        lv_aAE,
        true,
        gv_abl.getInt(lv_aAF * BonusMod__ABILITY_COUNT + lv_aAH)
      );
      lv_aAG = lv_aAG - gv_abm.getInt(lv_aAH);
    } else {
      UnitRemoveAbility(
        lv_aAE,
        gv_abl.getInt(lv_aAF * BonusMod__ABILITY_COUNT + lv_aAH)
      );
    }
    lv_aAH = lv_aAH - 1;
    if (lv_aAH < 0) {
      break;
    }
  } while (true);
  return true;
}
function f_aAI(lv_aAJ, lv_aAK) {
  var lv_aAL = 0;
  var lv_aAM = 0;
  if (
    GetUnitAbilityLevel(
      lv_aAJ,
      gv_abl.getInt(
        lv_aAK * BonusMod__ABILITY_COUNT + BonusMod__ABILITY_COUNT - 1
      )
    ) > 0
  ) {
    lv_aAM = gv_abo;
  }
  do {
    if (
      GetUnitAbilityLevel(
        lv_aAJ,
        gv_abl.getInt(lv_aAK * BonusMod__ABILITY_COUNT + lv_aAL)
      ) > 0
    ) {
      lv_aAM = lv_aAM + gv_abm.getInt(lv_aAL);
    }
    lv_aAL = lv_aAL + 1;
    if (lv_aAL == BonusMod__ABILITY_COUNT - 1) {
      break;
    }
  } while (true);
  return lv_aAM;
}
function f_aAN(lv_aAO, lv_aAP, lv_aAQ) {
  return f_aAD(lv_aAO, lv_aAP, f_aAI(lv_aAO, lv_aAP) + lv_aAQ);
}
function f_aAR() {
  var lv_aAS = 1;
  var lv_aAT;
  gv_abm[0] = 1;
  do {
    gv_abm[lv_aAS] = gv_abm.getInt(lv_aAS - 1) * 2;
    lv_aAS = lv_aAS + 1;
    if (lv_aAS == BonusMod__ABILITY_COUNT) {
      break;
    }
  } while (true);
  gv_abn = gv_abm.getInt(BonusMod__ABILITY_COUNT - 1) - 1;
  gv_abo = -gv_abm.getInt(BonusMod__ABILITY_COUNT - 1);
  f_aAx();
  if (BonusMod__PRELOAD_ABILITYS) {
    lv_aAT = CreateUnit(
      Player(PLAYER_NEUTRAL_PASSIVE),
      BonusMod__PRELOAD_DUMMY_UNIT,
      0,
      0,
      0
    );
    lv_aAS = 0;
    do {
      if (lv_aAS == BONUS_TYPES * BonusMod__ABILITY_COUNT) {
        break;
      }
      UnitAddAbility(lv_aAT, gv_abl.getInt(lv_aAS));
      lv_aAS = lv_aAS + 1;
    } while (true);
    UnitAddAbility(lv_aAT, "A09M");
    UnitAddAbility(lv_aAT, "A01A");
    RemoveUnit(lv_aAT);
  }
}
function f_aAU(lv_aAV, lv_aAW) {
  var lv_aAX = GetUnitAbilityLevel(lv_aAV, lv_aAW);
  UnitRemoveAbility(lv_aAV, lv_aAW);
  UnitAddAbility(lv_aAV, lv_aAW);
  SetUnitAbilityLevel(lv_aAV, lv_aAW, lv_aAX);
}
function f_aAY() {
  var lv_aAZ = GetPlayerId(GetOwningPlayer(GetFilterUnit()));
  return (
    IsUnitType(GetFilterUnit(), UNIT_TYPE_DEAD) == false &&
    GetUnitAbilityLevel(GetFilterUnit(), "Avul") == 0 &&
    (lv_aAZ == 10 || lv_aAZ == 11)
  );
}
function f_aBa(lv_aBb, lv_aBc) {
  var lv_aBd = CreateGroup();
  var lv_aBe;
  GroupEnumUnitsInRange(
    lv_aBd,
    GetUnitX(lv_aBb),
    GetUnitY(lv_aBb),
    lv_aBc * f_azo(lv_aBb),
    Condition(f_aAY)
  );
  do {
    lv_aBe = FirstOfGroup(lv_aBd);
    if (lv_aBe == null) {
      break;
    }
    IssueTargetOrder(lv_aBe, "attack", lv_aBb);
    GroupRemoveUnit(lv_aBd, lv_aBe);
  } while (true);
}
function f_aBf(lv_aBg, gv_aaj) {
  if (GetUnitAbilityLevel(lv_aBg, "B01L") > 0) {
    gv_aaj = gv_aaj * 1.2;
  }
  if (GetUnitAbilityLevel(lv_aBg, "B00W") > 0) {
    gv_aaj = gv_aaj * (1 + 0.2 * f_azo(lv_aBg));
  }
  return gv_aaj;
}
function f_aBh(lv_aBi, lv_aBj) {
  var lv_aBk = lv_aBj * gv_aam[lv_aBi];
  if (GetRandomReal(0, 1) < lv_aBk - R2I(lv_aBk)) {
    return R2I(lv_aBk + 1);
  }
  return R2I(lv_aBk);
}
function f_aBl(lv_aBm, lv_aBn) {
  var lv_aBo = lv_aBn * gv_aan[lv_aBm];
  if (GetRandomReal(0, 1) < lv_aBo - R2I(lv_aBo)) {
    return R2I(lv_aBo + 1);
  }
  return R2I(lv_aBo);
}
function f_aBp(lv_aBq) {
  var lv_aBr;
  var lv_aBs = TimerGetElapsed(gv_ayc);
  if (lv_aBs <= 0) {
    gv_ayc = CreateTimer();
    TimerStart(gv_ayc, 1000000, false, null);
  }
  if (lv_aBq > 0) {
    do {
      lv_aBr = lv_aBq - TimerGetElapsed(gv_ayc) + lv_aBs;
      if (lv_aBr <= 0) {
        break;
      }
      if (lv_aBr > bj_POLLED_WAIT_SKIP_THRESHOLD) {
        TriggerSleepAction(0.1 * lv_aBr);
      } else {
        TriggerSleepAction(bj_POLLED_WAIT_INTERVAL);
      }
    } while (true);
  }
}
function f_aBt(lv_aBu) {
  var lv_aBv = CreateSound(lv_aBu, false, false, true, 12700, 12700, "");
  StartSound(lv_aBv);
  KillSoundWhenDone(lv_aBv);
  lv_aBv = null;
}
function f_aBw() {
  var lv_aBx = GetDestructableX(GetFilterDestructable()) - gv_ayd;
  var lv_aBy = GetDestructableY(GetFilterDestructable()) - gv_aye;
  return lv_aBx * lv_aBx + lv_aBy * lv_aBy <= bj_enumDestructableRadius;
}
function f_aBz(lv_aBA, lv_aBB) {
  gv_ayf = CreateGroup();
  bj_groupEnumOwningPlayer = lv_aBB;
  GroupEnumUnitsInRect(gv_ayf, lv_aBA, filterGetUnitsInRectOfPlayer);
  return gv_ayf;
}
function f_aBC(lv_aBD) {
  gv_ayf = CreateGroup();
  GroupEnumUnitsOfPlayer(gv_ayf, lv_aBD, gv_ayh);
  return gv_ayf;
}
function f_aBE(lv_aBF) {
  gv_ayg = CreateForce();
  ForceAddPlayer(gv_ayg, lv_aBF);
  return gv_ayg;
}
function f_aBG(lv_aBH, lv_aBI) {
  var lv_aBJ;
  bj_stockPickedItemType = lv_aBH;
  bj_stockPickedItemLevel = lv_aBI;
  lv_aBJ = CreateGroup();
  GroupEnumUnitsOfType(lv_aBJ, "marketplace", gv_ayh);
  ForGroup(lv_aBJ, UpdateEachStockBuildingEnum);
  DestroyGroup(lv_aBJ);
  lv_aBJ = null;
}
function f_aBK() {
  var lv_aBL;
  var lv_aBM;
  var lv_aBN = 0;
  var lv_aBO = 0;
  var lv_aBP;
  lv_aBP = 1;
  do {
    if (bj_stockAllowedPermanent[lv_aBP]) {
      lv_aBO = lv_aBO + 1;
      if (GetRandomInt(1, lv_aBO) == 1) {
        lv_aBM = ITEM_TYPE_PERMANENT;
        lv_aBN = lv_aBP;
      }
    }
    if (bj_stockAllowedCharged[lv_aBP]) {
      lv_aBO = lv_aBO + 1;
      if (GetRandomInt(1, lv_aBO) == 1) {
        lv_aBM = ITEM_TYPE_CHARGED;
        lv_aBN = lv_aBP;
      }
    }
    if (bj_stockAllowedArtifact[lv_aBP]) {
      lv_aBO = lv_aBO + 1;
      if (GetRandomInt(1, lv_aBO) == 1) {
        lv_aBM = ITEM_TYPE_ARTIFACT;
        lv_aBN = lv_aBP;
      }
    }
    lv_aBP = lv_aBP + 1;
    if (lv_aBP > 10) {
      break;
    }
  } while (true);
  if (lv_aBO == 0) {
    lv_aBM = null;
    return;
  }
  f_aBG(lv_aBM, lv_aBN);
  lv_aBM = null;
}
function f_aBQ() {
  f_aBK();
  TimerStart(bj_stockUpdateTimer, bj_STOCK_RESTOCK_INTERVAL, true, f_aBK);
}
function f_aBR() {
  return true;
}
function f_aBS(lv_aBT, lv_aBU, lv_aBV, lv_aBW) {
  gv_axT = lv_aBU;
  gv_axV = lv_aBV;
  gv_axW = lv_aBW;
  TriggerExecute(gv_axN[lv_aBT]);
}
function f_aBX(lv_aBY, lv_aBZ, lv_aCa, lv_aCb, lv_aCc) {
  gv_axT = lv_aBZ;
  gv_axX = lv_aCa;
  gv_axU = lv_aCb;
  gv_axY = lv_aCc;
  TriggerExecute(gv_axO[lv_aBY]);
}
function f_aCd(lv_aCe) {
  if (lv_aCe < 8191) {
    return gv_awj.getInt(lv_aCe);
  } else {
    if (lv_aCe < 204775) {
      if (lv_aCe < 16382) {
        return gv_awk.getInt(lv_aCe - 8191);
      } else {
        if (lv_aCe < 106483) {
          if (lv_aCe < 24573) {
            return gv_awl.getInt(lv_aCe - 16382);
          } else {
            if (lv_aCe < 65528) {
              if (lv_aCe < 32764) {
                return gv_awm.getInt(lv_aCe - 24573);
              } else {
                if (lv_aCe < 49146) {
                  if (lv_aCe < 40955) {
                    return gv_awn.getInt(lv_aCe - 32764);
                  } else {
                    return gv_awo.getInt(lv_aCe - 40955);
                  }
                } else {
                  if (lv_aCe < 57337) {
                    return gv_awp.getInt(lv_aCe - 49146);
                  } else {
                    return gv_awq.getInt(lv_aCe - 57337);
                  }
                }
              }
            } else {
              if (lv_aCe < 73719) {
                return gv_awr.getInt(lv_aCe - 65528);
              } else {
                if (lv_aCe < 90101) {
                  if (lv_aCe < 81910) {
                    return gv_aws.getInt(lv_aCe - 73719);
                  } else {
                    return gv_awt.getInt(lv_aCe - 81910);
                  }
                } else {
                  if (lv_aCe < 98292) {
                    return gv_awu.getInt(lv_aCe - 90101);
                  } else {
                    return gv_awv.getInt(lv_aCe - 98292);
                  }
                }
              }
            }
          }
        } else {
          if (lv_aCe < 114674) {
            return gv_aww.getInt(lv_aCe - 106483);
          } else {
            if (lv_aCe < 155629) {
              if (lv_aCe < 122865) {
                return gv_awx.getInt(lv_aCe - 114674);
              } else {
                if (lv_aCe < 139247) {
                  if (lv_aCe < 131056) {
                    return gv_awy.getInt(lv_aCe - 122865);
                  } else {
                    return gv_awz.getInt(lv_aCe - 131056);
                  }
                } else {
                  if (lv_aCe < 147438) {
                    return gv_awA.getInt(lv_aCe - 139247);
                  } else {
                    return gv_awB.getInt(lv_aCe - 147438);
                  }
                }
              }
            } else {
              if (lv_aCe < 163820) {
                return gv_awC.getInt(lv_aCe - 155629);
              } else {
                if (lv_aCe < 180202) {
                  if (lv_aCe < 172011) {
                    return gv_awD.getInt(lv_aCe - 163820);
                  } else {
                    return gv_awE.getInt(lv_aCe - 172011);
                  }
                } else {
                  if (lv_aCe < 188393) {
                    return gv_awF.getInt(lv_aCe - 180202);
                  } else {
                    if (lv_aCe < 196584) {
                      return gv_awG.getInt(lv_aCe - 188393);
                    } else {
                      return gv_awH.getInt(lv_aCe - 196584);
                    }
                  }
                }
              }
            }
          }
        }
      }
    } else {
      if (lv_aCe < 212966) {
        return gv_awI.getInt(lv_aCe - 204775);
      } else {
        if (lv_aCe < 311258) {
          if (lv_aCe < 221157) {
            return gv_awJ.getInt(lv_aCe - 212966);
          } else {
            if (lv_aCe < 262112) {
              if (lv_aCe < 229348) {
                return gv_awK.getInt(lv_aCe - 221157);
              } else {
                if (lv_aCe < 245730) {
                  if (lv_aCe < 237539) {
                    return gv_awL.getInt(lv_aCe - 229348);
                  } else {
                    return gv_awM.getInt(lv_aCe - 237539);
                  }
                } else {
                  if (lv_aCe < 253921) {
                    return gv_awN.getInt(lv_aCe - 245730);
                  } else {
                    return gv_awO.getInt(lv_aCe - 253921);
                  }
                }
              }
            } else {
              if (lv_aCe < 270303) {
                return gv_awP.getInt(lv_aCe - 262112);
              } else {
                if (lv_aCe < 286685) {
                  if (lv_aCe < 278494) {
                    return gv_awQ.getInt(lv_aCe - 270303);
                  } else {
                    return gv_awR.getInt(lv_aCe - 278494);
                  }
                } else {
                  if (lv_aCe < 294876) {
                    return gv_awS.getInt(lv_aCe - 286685);
                  } else {
                    if (lv_aCe < 303067) {
                      return gv_awT.getInt(lv_aCe - 294876);
                    } else {
                      return gv_awU.getInt(lv_aCe - 303067);
                    }
                  }
                }
              }
            }
          }
        } else {
          if (lv_aCe < 319449) {
            return gv_awV.getInt(lv_aCe - 311258);
          } else {
            if (lv_aCe < 360404) {
              if (lv_aCe < 327640) {
                return gv_awW.getInt(lv_aCe - 319449);
              } else {
                if (lv_aCe < 344022) {
                  if (lv_aCe < 335831) {
                    return gv_awX.getInt(lv_aCe - 327640);
                  } else {
                    return gv_awY.getInt(lv_aCe - 335831);
                  }
                } else {
                  if (lv_aCe < 352213) {
                    return gv_awZ.getInt(lv_aCe - 344022);
                  } else {
                    return gv_axa.getInt(lv_aCe - 352213);
                  }
                }
              }
            } else {
              if (lv_aCe < 368595) {
                return gv_axb.getInt(lv_aCe - 360404);
              } else {
                if (lv_aCe < 384977) {
                  if (lv_aCe < 376786) {
                    return gv_axc.getInt(lv_aCe - 368595);
                  } else {
                    return gv_axd.getInt(lv_aCe - 376786);
                  }
                } else {
                  if (lv_aCe < 393168) {
                    return gv_axe.getInt(lv_aCe - 384977);
                  } else {
                    if (lv_aCe < 401359) {
                      return gv_axf.getInt(lv_aCe - 393168);
                    } else {
                      return gv_axg.getInt(lv_aCe - 401359);
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }
}
function f_aCf(lv_aCg, lv_aCh) {
  if (lv_aCg < 8191) {
    gv_awj[lv_aCg] = lv_aCh;
  } else {
    if (lv_aCg < 204775) {
      if (lv_aCg < 16382) {
        gv_awk[lv_aCg - 8191] = lv_aCh;
      } else {
        if (lv_aCg < 106483) {
          if (lv_aCg < 24573) {
            gv_awl[lv_aCg - 16382] = lv_aCh;
          } else {
            if (lv_aCg < 65528) {
              if (lv_aCg < 32764) {
                gv_awm[lv_aCg - 24573] = lv_aCh;
              } else {
                if (lv_aCg < 49146) {
                  if (lv_aCg < 40955) {
                    gv_awn[lv_aCg - 32764] = lv_aCh;
                  } else {
                    gv_awo[lv_aCg - 40955] = lv_aCh;
                  }
                } else {
                  if (lv_aCg < 57337) {
                    gv_awp[lv_aCg - 49146] = lv_aCh;
                  } else {
                    gv_awq[lv_aCg - 57337] = lv_aCh;
                  }
                }
              }
            } else {
              if (lv_aCg < 73719) {
                gv_awr[lv_aCg - 65528] = lv_aCh;
              } else {
                if (lv_aCg < 90101) {
                  if (lv_aCg < 81910) {
                    gv_aws[lv_aCg - 73719] = lv_aCh;
                  } else {
                    gv_awt[lv_aCg - 81910] = lv_aCh;
                  }
                } else {
                  if (lv_aCg < 98292) {
                    gv_awu[lv_aCg - 90101] = lv_aCh;
                  } else {
                    gv_awv[lv_aCg - 98292] = lv_aCh;
                  }
                }
              }
            }
          }
        } else {
          if (lv_aCg < 114674) {
            gv_aww[lv_aCg - 106483] = lv_aCh;
          } else {
            if (lv_aCg < 155629) {
              if (lv_aCg < 122865) {
                gv_awx[lv_aCg - 114674] = lv_aCh;
              } else {
                if (lv_aCg < 139247) {
                  if (lv_aCg < 131056) {
                    gv_awy[lv_aCg - 122865] = lv_aCh;
                  } else {
                    gv_awz[lv_aCg - 131056] = lv_aCh;
                  }
                } else {
                  if (lv_aCg < 147438) {
                    gv_awA[lv_aCg - 139247] = lv_aCh;
                  } else {
                    gv_awB[lv_aCg - 147438] = lv_aCh;
                  }
                }
              }
            } else {
              if (lv_aCg < 163820) {
                gv_awC[lv_aCg - 155629] = lv_aCh;
              } else {
                if (lv_aCg < 180202) {
                  if (lv_aCg < 172011) {
                    gv_awD[lv_aCg - 163820] = lv_aCh;
                  } else {
                    gv_awE[lv_aCg - 172011] = lv_aCh;
                  }
                } else {
                  if (lv_aCg < 188393) {
                    gv_awF[lv_aCg - 180202] = lv_aCh;
                  } else {
                    if (lv_aCg < 196584) {
                      gv_awG[lv_aCg - 188393] = lv_aCh;
                    } else {
                      gv_awH[lv_aCg - 196584] = lv_aCh;
                    }
                  }
                }
              }
            }
          }
        }
      }
    } else {
      if (lv_aCg < 212966) {
        gv_awI[lv_aCg - 204775] = lv_aCh;
      } else {
        if (lv_aCg < 311258) {
          if (lv_aCg < 221157) {
            gv_awJ[lv_aCg - 212966] = lv_aCh;
          } else {
            if (lv_aCg < 262112) {
              if (lv_aCg < 229348) {
                gv_awK[lv_aCg - 221157] = lv_aCh;
              } else {
                if (lv_aCg < 245730) {
                  if (lv_aCg < 237539) {
                    gv_awL[lv_aCg - 229348] = lv_aCh;
                  } else {
                    gv_awM[lv_aCg - 237539] = lv_aCh;
                  }
                } else {
                  if (lv_aCg < 253921) {
                    gv_awN[lv_aCg - 245730] = lv_aCh;
                  } else {
                    gv_awO[lv_aCg - 253921] = lv_aCh;
                  }
                }
              }
            } else {
              if (lv_aCg < 270303) {
                gv_awP[lv_aCg - 262112] = lv_aCh;
              } else {
                if (lv_aCg < 286685) {
                  if (lv_aCg < 278494) {
                    gv_awQ[lv_aCg - 270303] = lv_aCh;
                  } else {
                    gv_awR[lv_aCg - 278494] = lv_aCh;
                  }
                } else {
                  if (lv_aCg < 294876) {
                    gv_awS[lv_aCg - 286685] = lv_aCh;
                  } else {
                    if (lv_aCg < 303067) {
                      gv_awT[lv_aCg - 294876] = lv_aCh;
                    } else {
                      gv_awU[lv_aCg - 303067] = lv_aCh;
                    }
                  }
                }
              }
            }
          }
        } else {
          if (lv_aCg < 319449) {
            gv_awV[lv_aCg - 311258] = lv_aCh;
          } else {
            if (lv_aCg < 360404) {
              if (lv_aCg < 327640) {
                gv_awW[lv_aCg - 319449] = lv_aCh;
              } else {
                if (lv_aCg < 344022) {
                  if (lv_aCg < 335831) {
                    gv_awX[lv_aCg - 327640] = lv_aCh;
                  } else {
                    gv_awY[lv_aCg - 335831] = lv_aCh;
                  }
                } else {
                  if (lv_aCg < 352213) {
                    gv_awZ[lv_aCg - 344022] = lv_aCh;
                  } else {
                    gv_axa[lv_aCg - 352213] = lv_aCh;
                  }
                }
              }
            } else {
              if (lv_aCg < 368595) {
                gv_axb[lv_aCg - 360404] = lv_aCh;
              } else {
                if (lv_aCg < 384977) {
                  if (lv_aCg < 376786) {
                    gv_axc[lv_aCg - 368595] = lv_aCh;
                  } else {
                    gv_axd[lv_aCg - 376786] = lv_aCh;
                  }
                } else {
                  if (lv_aCg < 393168) {
                    gv_axe[lv_aCg - 384977] = lv_aCh;
                  } else {
                    if (lv_aCg < 401359) {
                      gv_axf[lv_aCg - 393168] = lv_aCh;
                    } else {
                      gv_axg[lv_aCg - 401359] = lv_aCh;
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }
}
function f_aCi() {
  var lv_aCj = gv_awa;
  if (lv_aCj != 0) {
    gv_awa = gv_awc.getInt(lv_aCj);
  } else {
    gv_awb = gv_awb + 1;
    lv_aCj = gv_awb;
  }
  if (lv_aCj > 90) {
    return 0;
  }
  gv_awe[lv_aCj] = (lv_aCj - 1) * 90;
  gv_awc[lv_aCj] = -1;
  return lv_aCj;
}
function f_aCk(lv_aCl) {
  if (lv_aCl == null) {
    return;
  } else {
    if (gv_awc.getInt(lv_aCl) != -1) {
      return;
    }
  }
  gv_axZ = lv_aCl;
  TriggerEvaluate(gv_axM);
  gv_awc[lv_aCl] = gv_awa;
  gv_awa = lv_aCl;
}
function f_aCm() {
  var lv_aCn = gv_avV;
  if (lv_aCn != 0) {
    gv_avV = gv_avX.getInt(lv_aCn);
  } else {
    gv_avW = gv_avW + 1;
    lv_aCn = gv_avW;
  }
  if (lv_aCn > 8190) {
    return 0;
  }
  gv_avX[lv_aCn] = -1;
  return lv_aCn;
}
function f_aCo() {
  var lv_aCp = gv_avO;
  if (lv_aCp != 0) {
    gv_avO = gv_avQ.getInt(lv_aCp);
  } else {
    gv_avP = gv_avP + 1;
    lv_aCp = gv_avP;
  }
  if (lv_aCp > 8190) {
    return 0;
  }
  gv_avQ[lv_aCp] = -1;
  return lv_aCp;
}
function f_aCq(lv_aCr) {
  if (lv_aCr == null) {
    return;
  } else {
    if (gv_avQ.getInt(lv_aCr) != -1) {
      return;
    }
  }
  gv_avQ[lv_aCr] = gv_avO;
  gv_avO = lv_aCr;
}
function f_aCs() {
  var lv_aCt = gv_aoG;
  if (lv_aCt != 0) {
    gv_aoG = gv_aoI.getInt(lv_aCt);
  } else {
    gv_aoH = gv_aoH + 1;
    lv_aCt = gv_aoH;
  }
  if (lv_aCt > 8100) {
    return 0;
  }
  gv_axh[lv_aCt] = 2;
  gv_aoI[lv_aCt] = -1;
  return lv_aCt;
}
function f_aCu() {
  var lv_aCv = gv_avF;
  if (lv_aCv != 0) {
    gv_avF = gv_avH.getInt(lv_aCv);
  } else {
    gv_avG = gv_avG + 1;
    lv_aCv = gv_avG;
  }
  if (lv_aCv > 8190) {
    return 0;
  }
  gv_avH[lv_aCv] = -1;
  return lv_aCv;
}
function f_aCw(lv_aCx) {
  if (lv_aCx == null) {
    return;
  } else {
    if (gv_avH.getInt(lv_aCx) != -1) {
      return;
    }
  }
  gv_axZ = lv_aCx;
  TriggerEvaluate(gv_axK);
  gv_avH[lv_aCx] = gv_avF;
  gv_avF = lv_aCx;
}
function f_aCy() {
  var lv_aCz = f_aCs();
  var lv_aCA;
  if (lv_aCz == 0) {
    return 0;
  }
  gv_axh[lv_aCz] = 3;
  lv_aCA = lv_aCz;
  return lv_aCz;
}
function f_aCB() {
  var lv_aCC = gv_avy;
  if (lv_aCC != 0) {
    gv_avy = gv_avA.getInt(lv_aCC);
  } else {
    gv_avz = gv_avz + 1;
    lv_aCC = gv_avz;
  }
  if (lv_aCC > 8190) {
    return 0;
  }
  gv_avA[lv_aCC] = -1;
  return lv_aCC;
}
function f_aCD(lv_aCE) {
  if (lv_aCE == null) {
    return;
  } else {
    if (gv_avA.getInt(lv_aCE) != -1) {
      return;
    }
  }
  gv_avA[lv_aCE] = gv_avy;
  gv_avy = lv_aCE;
}
function f_aCF() {
  var lv_aCG = f_aCs();
  var lv_aCH;
  if (lv_aCG == 0) {
    return 0;
  }
  gv_axh[lv_aCG] = 4;
  lv_aCH = lv_aCG;
  return lv_aCG;
}
function f_aCI() {
  var lv_aCJ = f_aCs();
  var lv_aCK;
  if (lv_aCJ == 0) {
    return 0;
  }
  gv_axh[lv_aCJ] = 5;
  lv_aCK = lv_aCJ;
  return lv_aCJ;
}
function f_aCL() {
  var lv_aCM = gv_avr;
  if (lv_aCM != 0) {
    gv_avr = gv_avt.getInt(lv_aCM);
  } else {
    gv_avs = gv_avs + 1;
    lv_aCM = gv_avs;
  }
  if (lv_aCM > 8190) {
    return 0;
  }
  gv_avt[lv_aCM] = -1;
  return lv_aCM;
}
function f_aCN(lv_aCO) {
  if (lv_aCO == null) {
    return;
  } else {
    if (gv_avt.getInt(lv_aCO) != -1) {
      return;
    }
  }
  gv_avt[lv_aCO] = gv_avr;
  gv_avr = lv_aCO;
}
function f_aCP() {
  var lv_aCQ = gv_avl;
  if (lv_aCQ != 0) {
    gv_avl = gv_avn.getInt(lv_aCQ);
  } else {
    gv_avm = gv_avm + 1;
    lv_aCQ = gv_avm;
  }
  if (lv_aCQ > 8190) {
    return 0;
  }
  gv_avn[lv_aCQ] = -1;
  return lv_aCQ;
}
function f_aCR(lv_aCS) {
  if (lv_aCS == null) {
    return;
  } else {
    if (gv_avn.getInt(lv_aCS) != -1) {
      return;
    }
  }
  gv_avn[lv_aCS] = gv_avl;
  gv_avl = lv_aCS;
}
function f_aCT(lv_aCU, lv_aCV) {
  SetUnitFacing(gv_avj[lv_aCU], lv_aCV * bj_RADTODEG);
  return false;
}
function f_aCW() {
  var lv_aCX = gv_avd;
  if (lv_aCX != 0) {
    gv_avd = gv_avf.getInt(lv_aCX);
  } else {
    gv_ave = gv_ave + 1;
    lv_aCX = gv_ave;
  }
  if (lv_aCX > 8190) {
    return 0;
  }
  gv_avf[lv_aCX] = -1;
  return lv_aCX;
}
function f_aCY(lv_aCZ) {
  if (lv_aCZ == null) {
    return;
  } else {
    if (gv_avf.getInt(lv_aCZ) != -1) {
      return;
    }
  }
  gv_axZ = lv_aCZ;
  TriggerEvaluate(gv_axJ);
  gv_avf[lv_aCZ] = gv_avd;
  gv_avd = lv_aCZ;
}
function f_aDa() {
  var lv_aDb = gv_auX;
  if (lv_aDb != 0) {
    gv_auX = gv_auZ.getInt(lv_aDb);
  } else {
    gv_auY = gv_auY + 1;
    lv_aDb = gv_auY;
  }
  if (lv_aDb > 8190) {
    return 0;
  }
  gv_auZ[lv_aDb] = -1;
  return lv_aDb;
}
function f_aDc(lv_aDd) {
  if (lv_aDd == null) {
    return;
  } else {
    if (gv_auZ.getInt(lv_aDd) != -1) {
      return;
    }
  }
  gv_auZ[lv_aDd] = gv_auX;
  gv_auX = lv_aDd;
}
function f_aDe(lv_aDf, lv_aDg) {
  SetUnitFacing(gv_auV[lv_aDf], lv_aDg * bj_RADTODEG);
  return false;
}
function f_aDh() {
  var lv_aDi = gv_auP;
  if (lv_aDi != 0) {
    gv_auP = gv_auR.getInt(lv_aDi);
  } else {
    gv_auQ = gv_auQ + 1;
    lv_aDi = gv_auQ;
  }
  if (lv_aDi > 8190) {
    return 0;
  }
  gv_auR[lv_aDi] = -1;
  return lv_aDi;
}
function f_aDj(lv_aDk) {
  if (lv_aDk == null) {
    return;
  } else {
    if (gv_auR.getInt(lv_aDk) != -1) {
      return;
    }
  }
  gv_axZ = lv_aDk;
  TriggerEvaluate(gv_axH);
  gv_auR[lv_aDk] = gv_auP;
  gv_auP = lv_aDk;
}
function f_aDl() {
  var lv_aDm = gv_auH;
  if (lv_aDm != 0) {
    gv_auH = gv_auJ.getInt(lv_aDm);
  } else {
    gv_auI = gv_auI + 1;
    lv_aDm = gv_auI;
  }
  if (lv_aDm > 8190) {
    return 0;
  }
  gv_auJ[lv_aDm] = -1;
  return lv_aDm;
}
function f_aDn(lv_aDo) {
  if (lv_aDo == null) {
    return;
  } else {
    if (gv_auJ.getInt(lv_aDo) != -1) {
      return;
    }
  }
  gv_auJ[lv_aDo] = gv_auH;
  gv_auH = lv_aDo;
}
function f_aDp() {
  var lv_aDq = gv_auD;
  if (lv_aDq != 0) {
    gv_auD = gv_auF.getInt(lv_aDq);
  } else {
    gv_auE = gv_auE + 1;
    lv_aDq = gv_auE;
  }
  if (lv_aDq > 8190) {
    return 0;
  }
  gv_auF[lv_aDq] = -1;
  return lv_aDq;
}
function f_aDr(lv_aDs) {
  if (lv_aDs == null) {
    return;
  } else {
    if (gv_auF.getInt(lv_aDs) != -1) {
      return;
    }
  }
  gv_auF[lv_aDs] = gv_auD;
  gv_auD = lv_aDs;
}
function f_aDt() {
  var lv_aDu = gv_auv;
  if (lv_aDu != 0) {
    gv_auv = gv_aux.getInt(lv_aDu);
  } else {
    gv_auw = gv_auw + 1;
    lv_aDu = gv_auw;
  }
  if (lv_aDu > 8190) {
    return 0;
  }
  gv_aux[lv_aDu] = -1;
  return lv_aDu;
}
function f_aDv(lv_aDw) {
  if (lv_aDw == null) {
    return;
  } else {
    if (gv_aux.getInt(lv_aDw) != -1) {
      return;
    }
  }
  gv_aux[lv_aDw] = gv_auv;
  gv_auv = lv_aDw;
}
function f_aDx() {
  var lv_aDy = gv_auo;
  if (lv_aDy != 0) {
    gv_auo = gv_auq.getInt(lv_aDy);
  } else {
    gv_aup = gv_aup + 1;
    lv_aDy = gv_aup;
  }
  if (lv_aDy > 8190) {
    return 0;
  }
  gv_auq[lv_aDy] = -1;
  return lv_aDy;
}
function f_aDz(lv_aDA) {
  if (lv_aDA == null) {
    return;
  } else {
    if (gv_auq.getInt(lv_aDA) != -1) {
      return;
    }
  }
  gv_auq[lv_aDA] = gv_auo;
  gv_auo = lv_aDA;
}
function f_aDB() {
  var lv_aDC = gv_aug;
  if (lv_aDC != 0) {
    gv_aug = gv_aui.getInt(lv_aDC);
  } else {
    gv_auh = gv_auh + 1;
    lv_aDC = gv_auh;
  }
  if (lv_aDC > 8190) {
    return 0;
  }
  gv_aui[lv_aDC] = -1;
  return lv_aDC;
}
function f_aDD(lv_aDE) {
  if (lv_aDE == null) {
    return;
  } else {
    if (gv_aui.getInt(lv_aDE) != -1) {
      return;
    }
  }
  gv_aui[lv_aDE] = gv_aug;
  gv_aug = lv_aDE;
}
function f_aDF() {
  var lv_aDG = gv_aua;
  if (lv_aDG != 0) {
    gv_aua = gv_auc.getInt(lv_aDG);
  } else {
    gv_aub = gv_aub + 1;
    lv_aDG = gv_aub;
  }
  if (lv_aDG > 8190) {
    return 0;
  }
  gv_auc[lv_aDG] = -1;
  return lv_aDG;
}
function f_aDH(lv_aDI) {
  if (lv_aDI == null) {
    return;
  } else {
    if (gv_auc.getInt(lv_aDI) != -1) {
      return;
    }
  }
  gv_auc[lv_aDI] = gv_aua;
  gv_aua = lv_aDI;
}
function f_aDJ() {
  var lv_aDK = gv_atU;
  if (lv_aDK != 0) {
    gv_atU = gv_atW.getInt(lv_aDK);
  } else {
    gv_atV = gv_atV + 1;
    lv_aDK = gv_atV;
  }
  if (lv_aDK > 8190) {
    return 0;
  }
  gv_atW[lv_aDK] = -1;
  return lv_aDK;
}
function f_aDL(lv_aDM) {
  if (lv_aDM == null) {
    return;
  } else {
    if (gv_atW.getInt(lv_aDM) != -1) {
      return;
    }
  }
  gv_atW[lv_aDM] = gv_atU;
  gv_atU = lv_aDM;
}
function f_aDN() {
  var lv_aDO = gv_atN;
  if (lv_aDO != 0) {
    gv_atN = gv_atP.getInt(lv_aDO);
  } else {
    gv_atO = gv_atO + 1;
    lv_aDO = gv_atO;
  }
  if (lv_aDO > 8190) {
    return 0;
  }
  gv_atP[lv_aDO] = -1;
  return lv_aDO;
}
function f_aDP(lv_aDQ) {
  if (lv_aDQ == null) {
    return;
  } else {
    if (gv_atP.getInt(lv_aDQ) != -1) {
      return;
    }
  }
  gv_atP[lv_aDQ] = gv_atN;
  gv_atN = lv_aDQ;
}
function f_aDR() {
  var lv_aDS = gv_atA;
  if (lv_aDS != 0) {
    gv_atA = gv_atC.getInt(lv_aDS);
  } else {
    gv_atB = gv_atB + 1;
    lv_aDS = gv_atB;
  }
  if (lv_aDS > 2729) {
    return 0;
  }
  gv_atE[lv_aDS] = (lv_aDS - 1) * 3;
  gv_atG[lv_aDS] = (lv_aDS - 1) * 3;
  gv_atI[lv_aDS] = (lv_aDS - 1) * 3;
  gv_atC[lv_aDS] = -1;
  return lv_aDS;
}
function f_aDT(lv_aDU) {
  if (lv_aDU == null) {
    return;
  } else {
    if (gv_atC.getInt(lv_aDU) != -1) {
      return;
    }
  }
  gv_atC[lv_aDU] = gv_atA;
  gv_atA = lv_aDU;
}
function f_aDV(lv_aDW, lv_aDX) {
  gv_axZ = lv_aDW;
  gv_axP = lv_aDX;
  TriggerEvaluate(gv_axE);
  return gv_aya;
}
function f_aDY() {
  var lv_aDZ = gv_atq;
  if (lv_aDZ != 0) {
    gv_atq = gv_ats.getInt(lv_aDZ);
  } else {
    gv_atr = gv_atr + 1;
    lv_aDZ = gv_atr;
  }
  if (lv_aDZ > 8190) {
    return 0;
  }
  gv_ats[lv_aDZ] = -1;
  return lv_aDZ;
}
function f_aEa(lv_aEb) {
  if (lv_aEb == null) {
    return;
  } else {
    if (gv_ats.getInt(lv_aEb) != -1) {
      return;
    }
  }
  gv_axZ = lv_aEb;
  TriggerEvaluate(gv_axF);
  gv_ats[lv_aEb] = gv_atq;
  gv_atq = lv_aEb;
}
function f_aEc() {
  var lv_aEd = gv_atl;
  if (lv_aEd != 0) {
    gv_atl = gv_atn.getInt(lv_aEd);
  } else {
    gv_atm = gv_atm + 1;
    lv_aEd = gv_atm;
  }
  if (lv_aEd > 8190) {
    return 0;
  }
  gv_atn[lv_aEd] = -1;
  return lv_aEd;
}
function f_aEe(lv_aEf) {
  if (lv_aEf == null) {
    return;
  } else {
    if (gv_atn.getInt(lv_aEf) != -1) {
      return;
    }
  }
  gv_atn[lv_aEf] = gv_atl;
  gv_atl = lv_aEf;
}
function f_aEg() {
  var lv_aEh = gv_atf;
  if (lv_aEh != 0) {
    gv_atf = gv_ath.getInt(lv_aEh);
  } else {
    gv_atg = gv_atg + 1;
    lv_aEh = gv_atg;
  }
  if (lv_aEh > 8190) {
    return 0;
  }
  gv_ath[lv_aEh] = -1;
  return lv_aEh;
}
function f_aEi(lv_aEj) {
  if (lv_aEj == null) {
    return;
  } else {
    if (gv_ath.getInt(lv_aEj) != -1) {
      return;
    }
  }
  gv_ath[lv_aEj] = gv_atf;
  gv_atf = lv_aEj;
}
function f_aEk() {
  var lv_aEl = gv_asZ;
  if (lv_aEl != 0) {
    gv_asZ = gv_atb.getInt(lv_aEl);
  } else {
    gv_ata = gv_ata + 1;
    lv_aEl = gv_ata;
  }
  if (lv_aEl > 8190) {
    return 0;
  }
  gv_atb[lv_aEl] = -1;
  return lv_aEl;
}
function f_aEm(lv_aEn) {
  if (lv_aEn == null) {
    return;
  } else {
    if (gv_atb.getInt(lv_aEn) != -1) {
      return;
    }
  }
  gv_atb[lv_aEn] = gv_asZ;
  gv_asZ = lv_aEn;
}
function f_aEo() {
  var lv_aEp = gv_asS;
  if (lv_aEp != 0) {
    gv_asS = gv_asU.getInt(lv_aEp);
  } else {
    gv_asT = gv_asT + 1;
    lv_aEp = gv_asT;
  }
  if (lv_aEp > 8190) {
    return 0;
  }
  gv_asU[lv_aEp] = -1;
  return lv_aEp;
}
function f_aEq(lv_aEr) {
  if (lv_aEr == null) {
    return;
  } else {
    if (gv_asU.getInt(lv_aEr) != -1) {
      return;
    }
  }
  gv_asU[lv_aEr] = gv_asS;
  gv_asS = lv_aEr;
}
function f_aEs() {
  var lv_aEt = gv_asM;
  if (lv_aEt != 0) {
    gv_asM = gv_asO.getInt(lv_aEt);
  } else {
    gv_asN = gv_asN + 1;
    lv_aEt = gv_asN;
  }
  if (lv_aEt > 8190) {
    return 0;
  }
  gv_asO[lv_aEt] = -1;
  return lv_aEt;
}
function f_aEu() {
  var lv_aEv = gv_asG;
  if (lv_aEv != 0) {
    gv_asG = gv_asI.getInt(lv_aEv);
  } else {
    gv_asH = gv_asH + 1;
    lv_aEv = gv_asH;
  }
  if (lv_aEv > 8190) {
    return 0;
  }
  gv_asI[lv_aEv] = -1;
  return lv_aEv;
}
function f_aEw(lv_aEx) {
  if (lv_aEx == null) {
    return;
  } else {
    if (gv_asI.getInt(lv_aEx) != -1) {
      return;
    }
  }
  gv_asI[lv_aEx] = gv_asG;
  gv_asG = lv_aEx;
}
function f_aEy(lv_aEz, lv_aEA) {
  gv_axZ = lv_aEz;
  gv_axP = lv_aEA;
  TriggerEvaluate(gv_axB);
  return gv_aya;
}
function f_aEB() {
  var lv_aEC = gv_asy;
  if (lv_aEC != 0) {
    gv_asy = gv_asA.getInt(lv_aEC);
  } else {
    gv_asz = gv_asz + 1;
    lv_aEC = gv_asz;
  }
  if (lv_aEC > 8190) {
    return 0;
  }
  gv_asA[lv_aEC] = -1;
  return lv_aEC;
}
function f_aED(lv_aEE) {
  if (lv_aEE == null) {
    return;
  } else {
    if (gv_asA.getInt(lv_aEE) != -1) {
      return;
    }
  }
  gv_axZ = lv_aEE;
  TriggerEvaluate(gv_axC);
  gv_asA[lv_aEE] = gv_asy;
  gv_asy = lv_aEE;
}
function f_aEF() {
  var lv_aEG = gv_ast;
  if (lv_aEG != 0) {
    gv_ast = gv_asv.getInt(lv_aEG);
  } else {
    gv_asu = gv_asu + 1;
    lv_aEG = gv_asu;
  }
  if (lv_aEG > 8190) {
    return 0;
  }
  gv_asv[lv_aEG] = -1;
  return lv_aEG;
}
function f_aEH(lv_aEI) {
  if (lv_aEI == null) {
    return;
  } else {
    if (gv_asv.getInt(lv_aEI) != -1) {
      return;
    }
  }
  gv_asv[lv_aEI] = gv_ast;
  gv_ast = lv_aEI;
}
function f_aEJ() {
  var lv_aEK = gv_aso;
  if (lv_aEK != 0) {
    gv_aso = gv_asq.getInt(lv_aEK);
  } else {
    gv_asp = gv_asp + 1;
    lv_aEK = gv_asp;
  }
  if (lv_aEK > 8190) {
    return 0;
  }
  gv_asq[lv_aEK] = -1;
  return lv_aEK;
}
function f_aEL(lv_aEM) {
  if (lv_aEM == null) {
    return;
  } else {
    if (gv_asq.getInt(lv_aEM) != -1) {
      return;
    }
  }
  gv_asq[lv_aEM] = gv_aso;
  gv_aso = lv_aEM;
}
function f_aEN() {
  var lv_aEO = gv_asg;
  if (lv_aEO != 0) {
    gv_asg = gv_asi.getInt(lv_aEO);
  } else {
    gv_ash = gv_ash + 1;
    lv_aEO = gv_ash;
  }
  if (lv_aEO > 8190) {
    return 0;
  }
  gv_asi[lv_aEO] = -1;
  return lv_aEO;
}
function f_aEP(lv_aEQ) {
  if (lv_aEQ == null) {
    return;
  } else {
    if (gv_asi.getInt(lv_aEQ) != -1) {
      return;
    }
  }
  gv_asi[lv_aEQ] = gv_asg;
  gv_asg = lv_aEQ;
}
function f_aER() {
  var lv_aES = gv_arZ;
  if (lv_aES != 0) {
    gv_arZ = gv_asb.getInt(lv_aES);
  } else {
    gv_asa = gv_asa + 1;
    lv_aES = gv_asa;
  }
  if (lv_aES > 8190) {
    return 0;
  }
  gv_asb[lv_aES] = -1;
  return lv_aES;
}
function f_aET(lv_aEU) {
  if (lv_aEU == null) {
    return;
  } else {
    if (gv_asb.getInt(lv_aEU) != -1) {
      return;
    }
  }
  gv_asb[lv_aEU] = gv_arZ;
  gv_arZ = lv_aEU;
}
function f_aEV() {
  var lv_aEW = gv_arT;
  if (lv_aEW != 0) {
    gv_arT = gv_arV.getInt(lv_aEW);
  } else {
    gv_arU = gv_arU + 1;
    lv_aEW = gv_arU;
  }
  if (lv_aEW > 8190) {
    return 0;
  }
  gv_arV[lv_aEW] = -1;
  return lv_aEW;
}
function f_aEX(lv_aEY) {
  if (lv_aEY == null) {
    return;
  } else {
    if (gv_arV.getInt(lv_aEY) != -1) {
      return;
    }
  }
  gv_arV[lv_aEY] = gv_arT;
  gv_arT = lv_aEY;
}
function f_aEZ(lv_aFa, lv_aFb) {
  gv_axZ = lv_aFa;
  gv_axP = lv_aFb;
  TriggerEvaluate(gv_axz);
  return gv_aya;
}
function f_aFc() {
  var lv_aFd = gv_arK;
  if (lv_aFd != 0) {
    gv_arK = gv_arM.getInt(lv_aFd);
  } else {
    gv_arL = gv_arL + 1;
    lv_aFd = gv_arL;
  }
  if (lv_aFd > 8190) {
    return 0;
  }
  gv_arM[lv_aFd] = -1;
  return lv_aFd;
}
function f_aFe(lv_aFf) {
  if (lv_aFf == null) {
    return;
  } else {
    if (gv_arM.getInt(lv_aFf) != -1) {
      return;
    }
  }
  gv_axZ = lv_aFf;
  TriggerEvaluate(gv_axA);
  gv_arM[lv_aFf] = gv_arK;
  gv_arK = lv_aFf;
}
function f_aFg() {
  var lv_aFh = gv_arG;
  if (lv_aFh != 0) {
    gv_arG = gv_arI.getInt(lv_aFh);
  } else {
    gv_arH = gv_arH + 1;
    lv_aFh = gv_arH;
  }
  if (lv_aFh > 8190) {
    return 0;
  }
  gv_arI[lv_aFh] = -1;
  return lv_aFh;
}
function f_aFi(lv_aFj) {
  if (lv_aFj == null) {
    return;
  } else {
    if (gv_arI.getInt(lv_aFj) != -1) {
      return;
    }
  }
  gv_arI[lv_aFj] = gv_arG;
  gv_arG = lv_aFj;
}
function f_aFk() {
  var lv_aFl = gv_arC;
  if (lv_aFl != 0) {
    gv_arC = gv_arE.getInt(lv_aFl);
  } else {
    gv_arD = gv_arD + 1;
    lv_aFl = gv_arD;
  }
  if (lv_aFl > 8190) {
    return 0;
  }
  gv_arE[lv_aFl] = -1;
  return lv_aFl;
}
function f_aFm(lv_aFn) {
  if (lv_aFn == null) {
    return;
  } else {
    if (gv_arE.getInt(lv_aFn) != -1) {
      return;
    }
  }
  gv_arE[lv_aFn] = gv_arC;
  gv_arC = lv_aFn;
}
function f_aFo() {
  var lv_aFp = gv_arv;
  if (lv_aFp != 0) {
    gv_arv = gv_arx.getInt(lv_aFp);
  } else {
    gv_arw = gv_arw + 1;
    lv_aFp = gv_arw;
  }
  if (lv_aFp > 8190) {
    return 0;
  }
  gv_arx[lv_aFp] = -1;
  return lv_aFp;
}
function f_aFq(lv_aFr) {
  if (lv_aFr == null) {
    return;
  } else {
    if (gv_arx.getInt(lv_aFr) != -1) {
      return;
    }
  }
  gv_arx[lv_aFr] = gv_arv;
  gv_arv = lv_aFr;
}
function f_aFs(lv_aFt, lv_aFu) {
  return false;
}
function f_aFv() {
  var lv_aFw = gv_arn;
  if (lv_aFw != 0) {
    gv_arn = gv_arp.getInt(lv_aFw);
  } else {
    gv_aro = gv_aro + 1;
    lv_aFw = gv_aro;
  }
  if (lv_aFw > 8190) {
    return 0;
  }
  gv_arp[lv_aFw] = -1;
  return lv_aFw;
}
function f_aFx(lv_aFy) {
  if (lv_aFy == null) {
    return;
  } else {
    if (gv_arp.getInt(lv_aFy) != -1) {
      return;
    }
  }
  gv_axZ = lv_aFy;
  TriggerEvaluate(gv_axy);
  gv_arp[lv_aFy] = gv_arn;
  gv_arn = lv_aFy;
}
function f_aFz() {
  var lv_aFA = gv_arj;
  if (lv_aFA != 0) {
    gv_arj = gv_arl.getInt(lv_aFA);
  } else {
    gv_ark = gv_ark + 1;
    lv_aFA = gv_ark;
  }
  if (lv_aFA > 8190) {
    return 0;
  }
  gv_arl[lv_aFA] = -1;
  return lv_aFA;
}
function f_aFB(lv_aFC) {
  if (lv_aFC == null) {
    return;
  } else {
    if (gv_arl.getInt(lv_aFC) != -1) {
      return;
    }
  }
  gv_arl[lv_aFC] = gv_arj;
  gv_arj = lv_aFC;
}
function f_aFD() {
  var lv_aFE = gv_arf;
  if (lv_aFE != 0) {
    gv_arf = gv_arh.getInt(lv_aFE);
  } else {
    gv_arg = gv_arg + 1;
    lv_aFE = gv_arg;
  }
  if (lv_aFE > 8190) {
    return 0;
  }
  gv_arh[lv_aFE] = -1;
  return lv_aFE;
}
function f_aFF(lv_aFG) {
  if (lv_aFG == null) {
    return;
  } else {
    if (gv_arh.getInt(lv_aFG) != -1) {
      return;
    }
  }
  gv_arh[lv_aFG] = gv_arf;
  gv_arf = lv_aFG;
}
function f_aFH(lv_aFI, lv_aFJ) {
  gv_axZ = lv_aFI;
  gv_axP = lv_aFJ;
  TriggerEvaluate(gv_axv);
  return gv_aya;
}
function f_aFK() {
  var lv_aFL = gv_aqV;
  if (lv_aFL != 0) {
    gv_aqV = gv_aqX.getInt(lv_aFL);
  } else {
    gv_aqW = gv_aqW + 1;
    lv_aFL = gv_aqW;
  }
  if (lv_aFL > 8190) {
    return 0;
  }
  gv_aqX[lv_aFL] = -1;
  return lv_aFL;
}
function f_aFM(lv_aFN) {
  if (lv_aFN == null) {
    return;
  } else {
    if (gv_aqX.getInt(lv_aFN) != -1) {
      return;
    }
  }
  gv_axZ = lv_aFN;
  TriggerEvaluate(gv_axw);
  gv_aqX[lv_aFN] = gv_aqV;
  gv_aqV = lv_aFN;
}
function f_aFO(lv_aFP, lv_aFQ) {
  gv_axZ = lv_aFP;
  gv_axP = lv_aFQ;
  TriggerEvaluate(gv_axt);
  return gv_aya;
}
function f_aFR() {
  var lv_aFS = gv_aqM;
  if (lv_aFS != 0) {
    gv_aqM = gv_aqO.getInt(lv_aFS);
  } else {
    gv_aqN = gv_aqN + 1;
    lv_aFS = gv_aqN;
  }
  if (lv_aFS > 8190) {
    return 0;
  }
  gv_aqO[lv_aFS] = -1;
  return lv_aFS;
}
function f_aFT(lv_aFU) {
  if (lv_aFU == null) {
    return;
  } else {
    if (gv_aqO.getInt(lv_aFU) != -1) {
      return;
    }
  }
  gv_axZ = lv_aFU;
  TriggerEvaluate(gv_axu);
  gv_aqO[lv_aFU] = gv_aqM;
  gv_aqM = lv_aFU;
}
function f_aFV() {
  var lv_aFW = gv_aqH;
  if (lv_aFW != 0) {
    gv_aqH = gv_aqJ.getInt(lv_aFW);
  } else {
    gv_aqI = gv_aqI + 1;
    lv_aFW = gv_aqI;
  }
  if (lv_aFW > 8190) {
    return 0;
  }
  gv_aqJ[lv_aFW] = -1;
  return lv_aFW;
}
function f_aFX() {
  var lv_aFY = gv_aqB;
  if (lv_aFY != 0) {
    gv_aqB = gv_aqD.getInt(lv_aFY);
  } else {
    gv_aqC = gv_aqC + 1;
    lv_aFY = gv_aqC;
  }
  if (lv_aFY > 8190) {
    return 0;
  }
  gv_aqD[lv_aFY] = -1;
  return lv_aFY;
}
function f_aFZ(lv_aGa) {
  if (lv_aGa == null) {
    return;
  } else {
    if (gv_aqD.getInt(lv_aGa) != -1) {
      return;
    }
  }
  gv_aqD[lv_aGa] = gv_aqB;
  gv_aqB = lv_aGa;
}
function f_aGb() {
  var lv_aGc = gv_aqv;
  if (lv_aGc != 0) {
    gv_aqv = gv_aqx.getInt(lv_aGc);
  } else {
    gv_aqw = gv_aqw + 1;
    lv_aGc = gv_aqw;
  }
  if (lv_aGc > 8190) {
    return 0;
  }
  gv_aqx[lv_aGc] = -1;
  return lv_aGc;
}
function f_aGd(lv_aGe) {
  if (lv_aGe == null) {
    return;
  } else {
    if (gv_aqx.getInt(lv_aGe) != -1) {
      return;
    }
  }
  gv_aqx[lv_aGe] = gv_aqv;
  gv_aqv = lv_aGe;
}
function f_aGf(lv_aGg, lv_aGh) {
  gv_axZ = lv_aGg;
  gv_axP = lv_aGh;
  TriggerEvaluate(gv_axq);
  return gv_aya;
}
function f_aGi() {
  var lv_aGj = gv_aql;
  if (lv_aGj != 0) {
    gv_aql = gv_aqn.getInt(lv_aGj);
  } else {
    gv_aqm = gv_aqm + 1;
    lv_aGj = gv_aqm;
  }
  if (lv_aGj > 8190) {
    return 0;
  }
  gv_aqn[lv_aGj] = -1;
  return lv_aGj;
}
function f_aGk(lv_aGl) {
  if (lv_aGl == null) {
    return;
  } else {
    if (gv_aqn.getInt(lv_aGl) != -1) {
      return;
    }
  }
  gv_axZ = lv_aGl;
  TriggerEvaluate(gv_axr);
  gv_aqn[lv_aGl] = gv_aql;
  gv_aql = lv_aGl;
}
function f_aGm() {
  var lv_aGn = gv_aqe;
  if (lv_aGn != 0) {
    gv_aqe = gv_aqg.getInt(lv_aGn);
  } else {
    gv_aqf = gv_aqf + 1;
    lv_aGn = gv_aqf;
  }
  if (lv_aGn > 8190) {
    return 0;
  }
  gv_aqg[lv_aGn] = -1;
  return lv_aGn;
}
function f_aGo(lv_aGp, lv_aGq) {
  gv_axZ = lv_aGp;
  gv_axP = lv_aGq;
  TriggerEvaluate(gv_axn);
  return gv_aya;
}
function f_aGr() {
  var lv_aGs = gv_apV;
  if (lv_aGs != 0) {
    gv_apV = gv_apX.getInt(lv_aGs);
  } else {
    gv_apW = gv_apW + 1;
    lv_aGs = gv_apW;
  }
  if (lv_aGs > 8190) {
    return 0;
  }
  gv_apX[lv_aGs] = -1;
  return lv_aGs;
}
function f_aGt(lv_aGu) {
  if (lv_aGu == null) {
    return;
  } else {
    if (gv_apX.getInt(lv_aGu) != -1) {
      return;
    }
  }
  gv_axZ = lv_aGu;
  TriggerEvaluate(gv_axo);
  gv_apX[lv_aGu] = gv_apV;
  gv_apV = lv_aGu;
}
function f_aGv() {
  var lv_aGw = gv_apP;
  if (lv_aGw != 0) {
    gv_apP = gv_apR.getInt(lv_aGw);
  } else {
    gv_apQ = gv_apQ + 1;
    lv_aGw = gv_apQ;
  }
  if (lv_aGw > 8190) {
    return 0;
  }
  gv_apR[lv_aGw] = -1;
  return lv_aGw;
}
function f_aGx(lv_aGy) {
  if (lv_aGy == null) {
    return;
  } else {
    if (gv_apR.getInt(lv_aGy) != -1) {
      return;
    }
  }
  gv_apR[lv_aGy] = gv_apP;
  gv_apP = lv_aGy;
}
function f_aGz() {
  var lv_aGA = gv_aoJ;
  if (lv_aGA != 0) {
    gv_aoJ = gv_aoL.getInt(lv_aGA);
  } else {
    gv_aoK = gv_aoK + 1;
    lv_aGA = gv_aoK;
  }
  if (lv_aGA > 8190) {
    return 0;
  }
  gv_aoL[lv_aGA] = -1;
  return lv_aGA;
}
function f_aGB() {
  var lv_aGC = gv_apd;
  if (lv_aGC != 0) {
    gv_apd = gv_apf.getInt(lv_aGC);
  } else {
    gv_ape = gv_ape + 1;
    lv_aGC = gv_ape;
  }
  if (lv_aGC > 818) {
    return 0;
  }
  gv_aph[lv_aGC] = (lv_aGC - 1) * 10;
  gv_api[lv_aGC] = (lv_aGC - 1) * 10;
  gv_apf[lv_aGC] = -1;
  return lv_aGC;
}
function f_aGD(lv_aGE) {
  gv_axZ = lv_aGE;
  TriggerEvaluate(gv_apB[gv_apz.getInt(lv_aGE)]);
}
function f_aGF(lv_aGG) {
  if (lv_aGG == null) {
    return;
  } else {
    if (gv_apy.getInt(lv_aGG) != -1) {
      return;
    }
  }
  gv_axZ = lv_aGG;
  TriggerEvaluate(gv_apA[gv_apz.getInt(lv_aGG)]);
  gv_apy[lv_aGG] = gv_apw;
  gv_apw = lv_aGG;
}
function f_aGH(lv_aGI, lv_aGJ) {
  gv_axZ = lv_aGI;
  gv_axP = lv_aGJ;
  TriggerEvaluate(gv_axl);
  return gv_aya;
}
function f_aGK() {
  var lv_aGL = gv_apo;
  if (lv_aGL != 0) {
    gv_apo = gv_apq.getInt(lv_aGL);
  } else {
    gv_app = gv_app + 1;
    lv_aGL = gv_app;
  }
  if (lv_aGL > 8190) {
    return 0;
  }
  gv_apq[lv_aGL] = -1;
  return lv_aGL;
}
function f_aGM(lv_aGN) {
  if (lv_aGN == null) {
    return;
  } else {
    if (gv_apq.getInt(lv_aGN) != -1) {
      return;
    }
  }
  gv_apq[lv_aGN] = gv_apo;
  gv_apo = lv_aGN;
}
function f_aGO() {
  var lv_aGP = gv_apj;
  if (lv_aGP != 0) {
    gv_apj = gv_apl.getInt(lv_aGP);
  } else {
    gv_apk = gv_apk + 1;
    lv_aGP = gv_apk;
  }
  if (lv_aGP > 8190) {
    return 0;
  }
  gv_apm[lv_aGP] = null;
  gv_apl[lv_aGP] = -1;
  return lv_aGP;
}
function f_aGQ(lv_aGR) {
  if (lv_aGR == null) {
    return;
  } else {
    if (gv_apl.getInt(lv_aGR) != -1) {
      return;
    }
  }
  gv_apl[lv_aGR] = gv_apj;
  gv_apj = lv_aGR;
}
function f_aGS(lv_aGT, lv_aGU, lv_aGV, lv_aGW, lv_aGX) {
  gv_axT = lv_aGT;
  gv_axP = lv_aGU;
  gv_axQ = lv_aGV;
  gv_axR = lv_aGW;
  gv_axS = lv_aGX;
  TriggerEvaluate(gv_axm);
  return gv_ayb;
}
function f_aGY() {
  var lv_aGZ;
  var lv_aHa = gv_apw;
  if (lv_aHa != 0) {
    gv_apw = gv_apy.getInt(lv_aHa);
  } else {
    gv_apx = gv_apx + 1;
    lv_aHa = gv_apx;
  }
  if (lv_aHa > 8190) {
    return 0;
  }
  gv_apz[lv_aHa] = 13;
  lv_aGZ = lv_aHa;
  gv_apy[lv_aHa] = -1;
  return lv_aHa;
}
function f_aHb(lv_aHc, lv_aHd, lv_aHe, lv_aHf, lv_aHg) {
  var lv_aHh = f_aGS(lv_aHc, lv_aHd, lv_aHe, lv_aHf, lv_aHg);
  var lv_aHi;
  if (lv_aHh == 0) {
    return 0;
  }
  gv_apz[lv_aHh] = 66;
  lv_aHi = lv_aHh;
  return lv_aHh;
}
function f_aHj(lv_aHk, lv_aHl, lv_aHm, lv_aHn, lv_aHo) {
  var lv_aHp = f_aGS(lv_aHk, lv_aHl, lv_aHm, lv_aHn, lv_aHo);
  var lv_aHq;
  if (lv_aHp == 0) {
    return 0;
  }
  gv_apz[lv_aHp] = 14;
  lv_aHq = lv_aHp;
  return lv_aHp;
}
function f_aHr(lv_aHs, lv_aHt, lv_aHu, lv_aHv, lv_aHw) {
  var lv_aHx = f_aGS(lv_aHs, lv_aHt, lv_aHu, lv_aHv, lv_aHw);
  var lv_aHy;
  if (lv_aHx == 0) {
    return 0;
  }
  gv_apz[lv_aHx] = 61;
  lv_aHy = lv_aHx;
  return lv_aHx;
}
function f_aHz(lv_aHA, lv_aHB, lv_aHC, lv_aHD, lv_aHE) {
  var lv_aHF = f_aGS(lv_aHA, lv_aHB, lv_aHC, lv_aHD, lv_aHE);
  var lv_aHG;
  if (lv_aHF == 0) {
    return 0;
  }
  gv_apz[lv_aHF] = 62;
  lv_aHG = lv_aHF;
  return lv_aHF;
}
function f_aHH(lv_aHI, lv_aHJ, lv_aHK, lv_aHL, lv_aHM) {
  var lv_aHN = f_aGS(lv_aHI, lv_aHJ, lv_aHK, lv_aHL, lv_aHM);
  var lv_aHO;
  if (lv_aHN == 0) {
    return 0;
  }
  gv_apz[lv_aHN] = 64;
  lv_aHO = lv_aHN;
  return lv_aHN;
}
function f_aHP(lv_aHQ, lv_aHR, lv_aHS, lv_aHT) {
  return lv_aHT + lv_aHS * 256 + lv_aHR * 65536 + lv_aHQ * gv_abz;
}
function f_aHU(lv_aHV) {
  if (lv_aHV < 0) {
    return 128 + -(-lv_aHV + -gv_abA) / gv_abz;
  } else {
    return lv_aHV / gv_abz;
  }
}
function f_aHW(lv_aHX) {
  var lv_aHY = lv_aHX * 256;
  if (lv_aHY < 0) {
    return 128 + -(-lv_aHY + -gv_abA) / gv_abz;
  } else {
    return R2I(lv_aHY / gv_abz);
  }
}
function f_aHZ(lv_aIa) {
  var lv_aIb = lv_aIa * 65536;
  if (lv_aIb < 0) {
    return 128 + -(-lv_aIb + -gv_abA) / gv_abz;
  } else {
    return R2I(lv_aIb / gv_abz);
  }
}
function f_aIc(lv_aId) {
  var lv_aIe = lv_aId * gv_abz;
  if (lv_aIe < 0) {
    return 128 + -(-lv_aIe + -gv_abA) / gv_abz;
  } else {
    return R2I(lv_aIe / gv_abz);
  }
}
function f_aIf(lv_aIg, lv_aIh) {
  return (
    S2S("|c" + gv_abt[f_aHU(lv_aIg)]) +
    gv_abt[f_aHW(lv_aIg)] +
    gv_abt[f_aHZ(lv_aIg)] +
    gv_abt[f_aIc(lv_aIg)] +
    lv_aIh +
    "|r"
  );
}
function f_aIi() {
  var lv_aIj = 0;
  lv_aIj = 0;
  do {
    if (lv_aIj == 16) {
      break;
    }
    gv_abt[0 * 16 + lv_aIj] = S2S("0" + gv_abt[0 * 16 + lv_aIj]);
    gv_abt[lv_aIj * 16 + 0] = S2S(gv_abt[lv_aIj * 16 + 0] + "0");
    lv_aIj = lv_aIj + 1;
  } while (true);
  lv_aIj = 0;
  do {
    if (lv_aIj == 16) {
      break;
    }
    gv_abt[1 * 16 + lv_aIj] = S2S("1" + gv_abt[1 * 16 + lv_aIj]);
    gv_abt[lv_aIj * 16 + 1] = S2S(gv_abt[lv_aIj * 16 + 1] + "1");
    lv_aIj = lv_aIj + 1;
  } while (true);
  lv_aIj = 0;
  do {
    if (lv_aIj == 16) {
      break;
    }
    gv_abt[2 * 16 + lv_aIj] = S2S("2" + gv_abt[2 * 16 + lv_aIj]);
    gv_abt[lv_aIj * 16 + 2] = S2S(gv_abt[lv_aIj * 16 + 2] + "2");
    lv_aIj = lv_aIj + 1;
  } while (true);
  lv_aIj = 0;
  do {
    if (lv_aIj == 16) {
      break;
    }
    gv_abt[3 * 16 + lv_aIj] = S2S("3" + gv_abt[3 * 16 + lv_aIj]);
    gv_abt[lv_aIj * 16 + 3] = S2S(gv_abt[lv_aIj * 16 + 3] + "3");
    lv_aIj = lv_aIj + 1;
  } while (true);
  lv_aIj = 0;
  do {
    if (lv_aIj == 16) {
      break;
    }
    gv_abt[4 * 16 + lv_aIj] = S2S("4" + gv_abt[4 * 16 + lv_aIj]);
    gv_abt[lv_aIj * 16 + 4] = S2S(gv_abt[lv_aIj * 16 + 4] + "4");
    lv_aIj = lv_aIj + 1;
  } while (true);
  lv_aIj = 0;
  do {
    if (lv_aIj == 16) {
      break;
    }
    gv_abt[5 * 16 + lv_aIj] = S2S("5" + gv_abt[5 * 16 + lv_aIj]);
    gv_abt[lv_aIj * 16 + 5] = S2S(gv_abt[lv_aIj * 16 + 5] + "5");
    lv_aIj = lv_aIj + 1;
  } while (true);
  lv_aIj = 0;
  do {
    if (lv_aIj == 16) {
      break;
    }
    gv_abt[6 * 16 + lv_aIj] = S2S("6" + gv_abt[6 * 16 + lv_aIj]);
    gv_abt[lv_aIj * 16 + 6] = S2S(gv_abt[lv_aIj * 16 + 6] + "6");
    lv_aIj = lv_aIj + 1;
  } while (true);
  lv_aIj = 0;
  do {
    if (lv_aIj == 16) {
      break;
    }
    gv_abt[7 * 16 + lv_aIj] = S2S("7" + gv_abt[7 * 16 + lv_aIj]);
    gv_abt[lv_aIj * 16 + 7] = S2S(gv_abt[lv_aIj * 16 + 7] + "7");
    lv_aIj = lv_aIj + 1;
  } while (true);
  lv_aIj = 0;
  do {
    if (lv_aIj == 16) {
      break;
    }
    gv_abt[8 * 16 + lv_aIj] = S2S("8" + gv_abt[8 * 16 + lv_aIj]);
    gv_abt[lv_aIj * 16 + 8] = S2S(gv_abt[lv_aIj * 16 + 8] + "8");
    lv_aIj = lv_aIj + 1;
  } while (true);
  lv_aIj = 0;
  do {
    if (lv_aIj == 16) {
      break;
    }
    gv_abt[9 * 16 + lv_aIj] = S2S("9" + gv_abt[9 * 16 + lv_aIj]);
    gv_abt[lv_aIj * 16 + 9] = S2S(gv_abt[lv_aIj * 16 + 9] + "9");
    lv_aIj = lv_aIj + 1;
  } while (true);
  lv_aIj = 0;
  do {
    if (lv_aIj == 16) {
      break;
    }
    gv_abt[10 * 16 + lv_aIj] = S2S("A" + gv_abt[10 * 16 + lv_aIj]);
    gv_abt[lv_aIj * 16 + 10] = S2S(gv_abt[lv_aIj * 16 + 10] + "A");
    lv_aIj = lv_aIj + 1;
  } while (true);
  lv_aIj = 0;
  do {
    if (lv_aIj == 16) {
      break;
    }
    gv_abt[11 * 16 + lv_aIj] = S2S("B" + gv_abt[11 * 16 + lv_aIj]);
    gv_abt[lv_aIj * 16 + 11] = S2S(gv_abt[lv_aIj * 16 + 11] + "B");
    lv_aIj = lv_aIj + 1;
  } while (true);
  lv_aIj = 0;
  do {
    if (lv_aIj == 16) {
      break;
    }
    gv_abt[12 * 16 + lv_aIj] = S2S("C" + gv_abt[12 * 16 + lv_aIj]);
    gv_abt[lv_aIj * 16 + 12] = S2S(gv_abt[lv_aIj * 16 + 12] + "C");
    lv_aIj = lv_aIj + 1;
  } while (true);
  lv_aIj = 0;
  do {
    if (lv_aIj == 16) {
      break;
    }
    gv_abt[13 * 16 + lv_aIj] = S2S("D" + gv_abt[13 * 16 + lv_aIj]);
    gv_abt[lv_aIj * 16 + 13] = S2S(gv_abt[lv_aIj * 16 + 13] + "D");
    lv_aIj = lv_aIj + 1;
  } while (true);
  lv_aIj = 0;
  do {
    if (lv_aIj == 16) {
      break;
    }
    gv_abt[14 * 16 + lv_aIj] = S2S("E" + gv_abt[14 * 16 + lv_aIj]);
    gv_abt[lv_aIj * 16 + 14] = S2S(gv_abt[lv_aIj * 16 + 14] + "E");
    lv_aIj = lv_aIj + 1;
  } while (true);
  lv_aIj = 0;
  do {
    if (lv_aIj == 16) {
      break;
    }
    gv_abt[15 * 16 + lv_aIj] = S2S("F" + gv_abt[15 * 16 + lv_aIj]);
    gv_abt[lv_aIj * 16 + 15] = S2S(gv_abt[lv_aIj * 16 + 15] + "F");
    lv_aIj = lv_aIj + 1;
  } while (true);
}
function f_aIk() {
  if (gv_abv) {
    GroupClear(gv_abw);
    gv_abv = false;
  }
  GroupAddUnit(gv_abw, GetEnumUnit());
}
function f_aIl(lv_aIm) {
  gv_abv = true;
  gv_abw = lv_aIm;
  ForGroup(gv_abw, f_aIk);
  if (gv_abv) {
    GroupClear(lv_aIm);
  }
}
function f_aIn() {
  if (gv_aby == 0) {
    gv_abx[0] = CreateGroup();
  } else {
    gv_aby = gv_aby - 1;
  }
  f_aCf(GetHandleId(gv_abx[gv_aby]) - A, 1);
  return gv_abx[gv_aby];
}
function f_aIo(lv_aIp) {
  var lv_aIq = f_aCd(GetHandleId(lv_aIp) - A);
  var lv_aIr = true;
  if (lv_aIp == null) {
    lv_aIr = false;
  } else {
    if (lv_aIq == 0) {
      lv_aIr = false;
    } else {
      if (lv_aIq == 2) {
        lv_aIr = false;
      } else {
        if (gv_aby == 8191) {
          DestroyGroup(lv_aIp);
          lv_aIr = false;
        } else {
          GroupClear(lv_aIp);
          gv_abx[gv_aby] = lv_aIp;
          gv_aby = gv_aby + 1;
          f_aCf(GetHandleId(lv_aIp) - A, 2);
        }
      }
    }
  }
  return lv_aIr;
}
function f_aIs() {
  var lv_aIt = GetEnumPlayer();
  if (
    GetPlayerController(lv_aIt) == MAP_CONTROL_USER &&
    GetPlayerSlotState(lv_aIt) == PLAYER_SLOT_STATE_PLAYING
  ) {
    ForceAddPlayer(gv_alq, lv_aIt);
    SetPlayerAlliance(gv_alu, lv_aIt, ALLIANCE_SHARED_CONTROL, true);
    SetPlayerAlliance(gv_alu, lv_aIt, ALLIANCE_SHARED_VISION, true);
    SetPlayerAlliance(gv_alu, Player(14), ALLIANCE_PASSIVE, true);
    TriggerRegisterPlayerEventEndCinematic(gv_afX, lv_aIt);
  }
  lv_aIt = null;
}
function f_aIu() {
  var lv_aIv = CreateSoundFromLabel(
    "InterfaceError",
    false,
    false,
    false,
    10,
    10
  );
  DestroyTimer(GetExpiredTimer());
  SetSoundPosition(lv_aIv, 0.0, 0.0, 0.0);
  SetSoundVolume(lv_aIv, 0);
  StartSound(lv_aIv);
  KillSoundWhenDone(lv_aIv);
  lv_aIv = CreateSound(
    "Buildings\\Human\\Blacksmith\\BlacksmithWhat1.wav",
    false,
    true,
    true,
    10,
    10,
    "SpellsEAX"
  );
  SetSoundChannel(lv_aIv, 5);
  SetSoundDistances(lv_aIv, 1000, 5000);
  SetSoundDistanceCutoff(lv_aIv, 5000);
  SetSoundPosition(lv_aIv, 0.0, 0.0, 0.0);
  SetSoundVolume(lv_aIv, 0);
  StartSound(lv_aIv);
  KillSoundWhenDone(lv_aIv);
  lv_aIv = null;
}
function f_aIw(lv_aIx) {
  TriggerAddCondition(gv_abD, lv_aIx);
  gv_abB[gv_abC] = lv_aIx;
  gv_abC = gv_abC + 1;
}
function f_aIy() {
  DisableTrigger(gv_abD);
}
function f_aIz() {
  EnableTrigger(gv_abD);
}
function f_aIA() {
  if (GetUnitAbilityLevel(GetFilterUnit(), "Aloc") < 1) {
    TriggerRegisterUnitEvent(gv_abD, GetFilterUnit(), EVENT_UNIT_DAMAGED);
  }
  return false;
}
function f_aIB() {
  if (GetUnitAbilityLevel(GetTriggerUnit(), "Aloc") < 1) {
    TriggerRegisterUnitEvent(gv_abD, GetTriggerUnit(), EVENT_UNIT_DAMAGED);
  }
  return false;
}
function f_aIC() {
  var lv_aID = 0;
  var lv_aIE = IsTriggerEnabled(gv_abD);
  DisableTrigger(gv_abD);
  if (gv_abE != null) {
    DestroyTrigger(gv_abE);
  }
  gv_abE = gv_abD;
  gv_abD = CreateTrigger();
  if (!lv_aIE) {
    DisableTrigger(gv_abD);
  }
  GroupEnumUnitsInRect(gv_abF, gv_abG, Filter(f_aIA));
  do {
    if (lv_aID >= gv_abC) {
      break;
    }
    TriggerAddCondition(gv_abD, gv_abB[lv_aID]);
    lv_aID = lv_aID + 1;
  } while (true);
}
function f_aIF() {
  var lv_aIG = CreateTrigger();
  var lv_aIH = CreateRegion();
  var lv_aII = 0;
  gv_abG = GetWorldBounds();
  RegionAddRect(lv_aIH, gv_abG);
  TriggerRegisterEnterRegion(lv_aIG, lv_aIH, null);
  TriggerAddCondition(lv_aIG, Condition(f_aIB));
  gv_abF = CreateGroup();
  gv_abD = CreateTrigger();
  do {
    if (lv_aII >= gv_abC) {
      break;
    }
    TriggerAddCondition(gv_abD, gv_abB[lv_aII]);
    lv_aII = lv_aII + 1;
  } while (true);
  GroupEnumUnitsInRect(gv_abF, GetWorldBounds(), Filter(f_aIA));
}
function f_aIJ() {
  gv_abH = InitHashtable();
}
function f_aIK() {
  gv_abJ = GetRectMinX(bj_mapInitialPlayableArea);
  gv_abK = GetRectMinY(bj_mapInitialPlayableArea);
  gv_abI = CreateUnit(ev, "hpea", 0.0, 0.0, 0.0);
  UnitAddAbility(gv_abI, "A098");
  UnitAddAbility(gv_abI, "Avul");
  IssueImmediateOrderById(gv_abI, 852129);
  SetUnitX(gv_abI, gv_abJ);
  SetUnitY(gv_abI, gv_abK);
}
function f_aIL() {
  if (gv_abN == 0) {
    gv_abM[0] = CreateTimer();
  } else {
    gv_abN = gv_abN - 1;
  }
  SaveInteger(gv_abL, 0, GetHandleId(gv_abM[gv_abN]), 0);
  return gv_abM[gv_abN];
}
function f_aIM(lv_aIN) {
  if (lv_aIN == null) {
    return;
  }
  if (gv_abN == 8191) {
    DestroyTimer(lv_aIN);
  } else {
    PauseTimer(lv_aIN);
    if (LoadInteger(gv_abL, 0, GetHandleId(lv_aIN)) == nv) {
      return;
    }
    SaveInteger(gv_abL, 0, GetHandleId(lv_aIN), nv);
    gv_abM[gv_abN] = lv_aIN;
    gv_abN = gv_abN + 1;
  }
}
function f_aIO() {
  gv_abL = InitHashtable();
}
function f_aIP(lv_aIQ) {
  var lv_aIR = 2;
  var lv_aIS = 1;
  if (
    lv_aIQ == null ||
    GetWidgetLife(lv_aIQ) < 0.406 ||
    gv_abR.getInt(LoadInteger(gv_abH, gv_abU, GetHandleId(lv_aIQ)) * gv_abQ) ==
      1
  ) {
    return false;
  }
  do {
    if (
      lv_aIS >
      gv_abR.getInt(
        LoadInteger(gv_abH, gv_abU, GetHandleId(lv_aIQ)) * gv_abQ + 1
      )
    ) {
      break;
    }
    UnitRemoveAbility(
      lv_aIQ,
      gv_abR.getInt(
        LoadInteger(gv_abH, gv_abU, GetHandleId(lv_aIQ)) * gv_abQ + lv_aIR
      )
    );
    gv_abR[
      LoadInteger(gv_abH, gv_abU, GetHandleId(lv_aIQ)) * gv_abQ + lv_aIR
    ] = 0;
    lv_aIR = lv_aIR + 1;
    lv_aIS = lv_aIS + 1;
  } while (true);
  gv_abR[LoadInteger(gv_abH, gv_abU, GetHandleId(lv_aIQ)) * gv_abQ + 1] = 0;
  if (GetUnitAbilityLevel(lv_aIQ, "Aloc") < 1) {
    UnitAddAbility(lv_aIQ, "Aloc");
  }
  SetUnitOwner(lv_aIQ, Player(PLAYER_NEUTRAL_PASSIVE), true);
  SetUnitScale(lv_aIQ, 1, 1, 1);
  SetUnitFlyHeight(lv_aIQ, 0.0, 0.0);
  GroupAddUnit(gv_abO, lv_aIQ);
  return true;
}
function f_aIT() {
  var lv_aIU = GetExpiredTimer();
  gv_abR[LoadInteger(gv_abL, 0, GetHandleId(lv_aIU)) * gv_abQ] = 0;
  f_aIP(gv_abT[LoadInteger(gv_abL, 0, GetHandleId(lv_aIU))]);
  f_aIM(lv_aIU);
  lv_aIU = null;
}
function f_aIV(lv_aIW, lv_aIX, lv_aIY, lv_aIZ) {
  var lv_aJa = 0;
  var lv_aJb;
  gv_abS = FirstOfGroup(gv_abO);
  if (gv_abS == null) {
    gv_abS = CreateUnit(Player(PLAYER_NEUTRAL_PASSIVE), gv_acf, 0.0, 0.0, 0.0);
    UnitAddAbility(gv_abS, "Aloc");
    UnitAddAbility(gv_abS, "Amrf");
    UnitRemoveAbility(gv_abS, "Amrf");
    SaveInteger(gv_abH, gv_abU, GetHandleId(gv_abS), gv_abP);
    gv_abT[gv_abP] = gv_abS;
    gv_abP = gv_abP + 1;
  }
  if (gv_abS != null) {
    GroupRemoveUnit(gv_abO, gv_abS);
  }
  if (lv_aIZ > 0.0) {
    gv_abR[LoadInteger(gv_abH, gv_abU, GetHandleId(gv_abS)) * gv_abQ] = 1;
    lv_aJb = f_aIL();
    SaveInteger(
      gv_abL,
      0,
      GetHandleId(lv_aJb),
      LoadInteger(gv_abH, gv_abU, GetHandleId(gv_abS))
    );
    TimerStart(lv_aJb, lv_aIZ, false, f_aIT);
  }
  SetUnitPosition(gv_abS, lv_aIX, lv_aIY);
  SetUnitOwner(gv_abS, lv_aIW, false);
  return gv_abS;
}
function f_aJc(lv_aJd, lv_aJe, lv_aJf) {
  var lv_aJg = 2;
  var lv_aJh;
  if (
    gv_abR.getInt(
      LoadInteger(gv_abH, gv_abU, GetHandleId(lv_aJd)) * gv_abQ + 1
    ) == 3 ||
    lv_aJd == null
  ) {
    return false;
  }
  do {
    if (
      gv_abR.getInt(
        LoadInteger(gv_abH, gv_abU, GetHandleId(lv_aJd)) * gv_abQ + lv_aJg
      ) == 0
    ) {
      break;
    }
    lv_aJg = lv_aJg + 1;
  } while (true);
  gv_abR[
    LoadInteger(gv_abH, gv_abU, GetHandleId(lv_aJd)) * gv_abQ + lv_aJg
  ] = lv_aJe;
  gv_abR[LoadInteger(gv_abH, gv_abU, GetHandleId(lv_aJd)) * gv_abQ + 1] =
    gv_abR.getInt(
      LoadInteger(gv_abH, gv_abU, GetHandleId(lv_aJd)) * gv_abQ + 1
    ) + 1;
  UnitAddAbility(lv_aJd, lv_aJe);
  if (lv_aJf > 1) {
    SetUnitAbilityLevel(lv_aJd, lv_aJe, lv_aJf);
  }
  return true;
}
function f_aJi() {
  gv_abQ = 3 + 2;
  gv_abO = CreateGroup();
  gv_abU = f_aCI();
}
function f_aJj() {
  var lv_aJk = 5500;
  var lv_aJl = 15000;
  var lv_aJm = 22000;
  var lv_aJn = 35000;
  var lv_aJo = 50000;
  var lv_aJp = 120000;
  var lv_aJq = 60000;
  var lv_aJr = 10;
  var lv_aJs = 200000;
  var lv_aJt = 45;
  var lv_aJu = 20000;
  var lv_aJv = 120000;
  var lv_aJw = 75000;
  var lv_aJx = 150000;
  var lv_aJy = 500000;
  gv_abX = f_aCF();
  gv_abY = f_aCF();
  SaveInteger(gv_abH, gv_abX, StringHash("|cx001A035|rBattle Axe"), lv_aJk);
  SaveInteger(gv_abH, gv_abY, StringHash("|cx001A035|rBattle Axe"), 0);
  SaveInteger(
    gv_abH,
    gv_abX,
    StringHash("|cx002A035|rMighty Gauntlets"),
    lv_aJk
  );
  SaveInteger(gv_abH, gv_abY, StringHash("|cx002A035|rMighty Gauntlets"), 0);
  SaveInteger(gv_abH, gv_abX, StringHash("|cx003A035|rHero's Blade"), lv_aJk);
  SaveInteger(gv_abH, gv_abY, StringHash("|cx003A035|rHero's Blade"), 0);
  SaveInteger(gv_abH, gv_abX, StringHash("|cx004A055|rPeacebringer"), lv_aJl);
  SaveInteger(gv_abH, gv_abY, StringHash("|cx004A055|rPeacebringer"), 0);
  SaveInteger(gv_abH, gv_abX, StringHash("|cx005A055|rGreat Halberd"), lv_aJl);
  SaveInteger(gv_abH, gv_abY, StringHash("|cx005A055|rGreat Halberd"), 0);
  SaveInteger(gv_abH, gv_abX, StringHash("|cx006A055|rBrooch of War"), lv_aJl);
  SaveInteger(gv_abH, gv_abY, StringHash("|cx006A055|rBrooch of War"), 0);
  SaveInteger(
    gv_abH,
    gv_abX,
    StringHash("|cx007A075|rCorinthian Short Sword"),
    lv_aJm
  );
  SaveInteger(
    gv_abH,
    gv_abY,
    StringHash("|cx007A075|rCorinthian Short Sword"),
    1
  );
  SaveInteger(
    gv_abH,
    gv_abX,
    StringHash("|cx008A075|rGauntlet's of Heros"),
    lv_aJm
  );
  SaveInteger(gv_abH, gv_abY, StringHash("|cx008A075|rGauntlet's of Heros"), 1);
  SaveInteger(
    gv_abH,
    gv_abX,
    StringHash("|cx009A075|rTalisman of Battle"),
    lv_aJm
  );
  SaveInteger(gv_abH, gv_abY, StringHash("|cx009A075|rTalisman of Battle"), 1);
  SaveInteger(
    gv_abH,
    gv_abX,
    StringHash("|cx010A035|rSturdy Leggings"),
    lv_aJk
  );
  SaveInteger(gv_abH, gv_abY, StringHash("|cx010A035|rSturdy Leggings"), 0);
  SaveInteger(gv_abH, gv_abX, StringHash("|cx011A035|rRing Mail"), lv_aJk);
  SaveInteger(gv_abH, gv_abY, StringHash("|cx011A035|rRing Mail"), 0);
  SaveInteger(
    gv_abH,
    gv_abX,
    StringHash("|cx012A035|rGreat Helm of War"),
    lv_aJk
  );
  SaveInteger(gv_abH, gv_abY, StringHash("|cx012A035|rGreat Helm of War"), 0);
  SaveInteger(gv_abH, gv_abX, StringHash("|cx013A055|rMedium Shield"), lv_aJl);
  SaveInteger(gv_abH, gv_abY, StringHash("|cx013A055|rMedium Shield"), 0);
  SaveInteger(gv_abH, gv_abX, StringHash("|cx014A055|rSplint Mail"), lv_aJl);
  SaveInteger(gv_abH, gv_abY, StringHash("|cx014A055|rSplint Mail"), 0);
  SaveInteger(gv_abH, gv_abX, StringHash("|cx015A055|rGalerus"), lv_aJl);
  SaveInteger(gv_abH, gv_abY, StringHash("|cx015A055|rGalerus"), 0);
  SaveInteger(
    gv_abH,
    gv_abX,
    StringHash("|cx016A075|rCorinthian Helm"),
    lv_aJm
  );
  SaveInteger(gv_abH, gv_abY, StringHash("|cx016A075|rCorinthian Helm"), 1);
  SaveInteger(
    gv_abH,
    gv_abX,
    StringHash("|cx017A075|rCorinthian Chain Mail"),
    lv_aJm
  );
  SaveInteger(
    gv_abH,
    gv_abY,
    StringHash("|cx017A075|rCorinthian Chain Mail"),
    1
  );
  SaveInteger(gv_abH, gv_abX, StringHash("|cx018A075|rBronze Bracers"), lv_aJm);
  SaveInteger(gv_abH, gv_abY, StringHash("|cx018A075|rBronze Bracers"), 1);
  SaveInteger(gv_abH, gv_abX, StringHash("|cx019A035|rGlowing Orb"), lv_aJk);
  SaveInteger(gv_abH, gv_abY, StringHash("|cx019A035|rGlowing Orb"), 0);
  SaveInteger(
    gv_abH,
    gv_abX,
    StringHash("|cx020A035|rStarlight Charm"),
    lv_aJk
  );
  SaveInteger(gv_abH, gv_abY, StringHash("|cx020A035|rStarlight Charm"), 0);
  SaveInteger(
    gv_abH,
    gv_abX,
    StringHash("|cx021A035|rApprentice Ring"),
    lv_aJk
  );
  SaveInteger(gv_abH, gv_abY, StringHash("|cx021A035|rApprentice Ring"), 0);
  SaveInteger(gv_abH, gv_abX, StringHash("|cx022A055|rSoul Ring"), lv_aJl);
  SaveInteger(gv_abH, gv_abY, StringHash("|cx022A055|rSoul Ring"), 0);
  SaveInteger(
    gv_abH,
    gv_abX,
    StringHash("|cx023A055|rSash of Enlightenment"),
    lv_aJl
  );
  SaveInteger(
    gv_abH,
    gv_abY,
    StringHash("|cx023A055|rSash of Enlightenment"),
    0
  );
  SaveInteger(gv_abH, gv_abX, StringHash("|cx024A055|rPower Orb"), lv_aJl);
  SaveInteger(gv_abH, gv_abY, StringHash("|cx024A055|rPower Orb"), 0);
  SaveInteger(gv_abH, gv_abX, StringHash("|cx025A075|rOracle Staff"), lv_aJm);
  SaveInteger(gv_abH, gv_abY, StringHash("|cx025A075|rOracle Staff"), 1);
  SaveInteger(
    gv_abH,
    gv_abX,
    StringHash("|cx026A075|rRobe of the Mind"),
    lv_aJm
  );
  SaveInteger(gv_abH, gv_abY, StringHash("|cx026A075|rRobe of the Mind"), 1);
  SaveInteger(
    gv_abH,
    gv_abX,
    StringHash("|cx027A075|rRod of the Magi"),
    lv_aJm
  );
  SaveInteger(gv_abH, gv_abY, StringHash("|cx027A075|rRod of the Magi"), 1);
  SaveInteger(
    gv_abH,
    gv_abX,
    StringHash("|cx028A100|rMassive War Axe"),
    lv_aJn
  );
  SaveInteger(gv_abH, gv_abY, StringHash("|cx028A100|rMassive War Axe"), 3);
  SaveInteger(
    gv_abH,
    gv_abX,
    StringHash("|cx029A100|rCrusader's Gauntlets"),
    lv_aJn
  );
  SaveInteger(
    gv_abH,
    gv_abY,
    StringHash("|cx029A100|rCrusader's Gauntlets"),
    3
  );
  SaveInteger(
    gv_abH,
    gv_abX,
    StringHash("|cx030A100|rCrusader's Maul"),
    lv_aJn
  );
  SaveInteger(gv_abH, gv_abY, StringHash("|cx030A100|rCrusader's Maul"), 3);
  SaveInteger(
    gv_abH,
    gv_abX,
    StringHash("|cx042A115|rSteel Gauntlets"),
    lv_aJo
  );
  SaveInteger(gv_abH, gv_abY, StringHash("|cx042A115|rSteel Gauntlets"), 5);
  SaveInteger(gv_abH, gv_abX, StringHash("|cx032A115|rGladius"), lv_aJo);
  SaveInteger(gv_abH, gv_abY, StringHash("|cx032A115|rGladius"), 5);
  SaveInteger(
    gv_abH,
    gv_abX,
    StringHash("|cx033A115|rCrusader's Cuirass"),
    lv_aJo
  );
  SaveInteger(gv_abH, gv_abY, StringHash("|cx033A115|rCrusader's Cuirass"), 5);
  SaveInteger(
    gv_abH,
    gv_abX,
    StringHash("|cx034A135|rSpartan Long Sword"),
    lv_aJp
  );
  SaveInteger(gv_abH, gv_abY, StringHash("|cx034A135|rSpartan Long Sword"), 10);
  SaveInteger(
    gv_abH,
    gv_abX,
    StringHash("|cx035A135|rSpartan Cuirass"),
    lv_aJp
  );
  SaveInteger(gv_abH, gv_abY, StringHash("|cx035A135|rSpartan Cuirass"), 10);
  SaveInteger(gv_abH, gv_abX, StringHash("|cx036A135|rSpartan Helm"), lv_aJp);
  SaveInteger(gv_abH, gv_abY, StringHash("|cx036A135|rSpartan Helm"), 10);
  SaveInteger(gv_abH, gv_abX, StringHash("|cx037A100|rGolden Sash"), lv_aJn);
  SaveInteger(gv_abH, gv_abY, StringHash("|cx037A100|rGolden Sash"), 3);
  SaveInteger(
    gv_abH,
    gv_abX,
    StringHash("|cx038A100|rFine Steel Shirt"),
    lv_aJn
  );
  SaveInteger(gv_abH, gv_abY, StringHash("|cx038A100|rFine Steel Shirt"), 3);
  SaveInteger(
    gv_abH,
    gv_abX,
    StringHash("|cx039A100|rCape of Evasion"),
    lv_aJn
  );
  SaveInteger(gv_abH, gv_abY, StringHash("|cx039A100|rCape of Evasion"), 3);
  SaveInteger(gv_abH, gv_abX, StringHash("|cx040A115|rPlate Mail"), lv_aJo);
  SaveInteger(gv_abH, gv_abY, StringHash("|cx040A115|rPlate Mail"), 5);
  SaveInteger(
    gv_abH,
    gv_abX,
    StringHash("|cx041A115|rCloak of Resilience"),
    lv_aJo
  );
  SaveInteger(gv_abH, gv_abY, StringHash("|cx041A115|rCloak of Resilience"), 5);
  SaveInteger(
    gv_abH,
    gv_abX,
    StringHash("|cx031A115|rEmperors Great Sword"),
    lv_aJo
  );
  SaveInteger(
    gv_abH,
    gv_abY,
    StringHash("|cx031A115|rEmperors Great Sword"),
    5
  );
  SaveInteger(gv_abH, gv_abX, StringHash("|cx045A135|rRoyal Greaves"), lv_aJp);
  SaveInteger(gv_abH, gv_abY, StringHash("|cx045A135|rRoyal Greaves"), 10);
  SaveInteger(gv_abH, gv_abX, StringHash("|cx044A135|rEpic Tower"), lv_aJp);
  SaveInteger(gv_abH, gv_abY, StringHash("|cx044A135|rEpic Tower"), 10);
  SaveInteger(
    gv_abH,
    gv_abX,
    StringHash("|cx043A135|rEmperors Plate Mail"),
    lv_aJp
  );
  SaveInteger(
    gv_abH,
    gv_abY,
    StringHash("|cx043A135|rEmperors Plate Mail"),
    10
  );
  SaveInteger(
    gv_abH,
    gv_abX,
    StringHash("|cx046A100|rAmulet of Power"),
    lv_aJn
  );
  SaveInteger(gv_abH, gv_abY, StringHash("|cx046A100|rAmulet of Power"), 3);
  SaveInteger(gv_abH, gv_abX, StringHash("|cx047A100|rJeweled Ring"), lv_aJn);
  SaveInteger(gv_abH, gv_abY, StringHash("|cx047A100|rJeweled Ring"), 3);
  SaveInteger(
    gv_abH,
    gv_abX,
    StringHash("|cx048A100|rRing of the Magi"),
    lv_aJn
  );
  SaveInteger(gv_abH, gv_abY, StringHash("|cx048A100|rRing of the Magi"), 3);
  SaveInteger(
    gv_abH,
    gv_abX,
    StringHash("|cx049A115|rStaff of the Chosen One"),
    lv_aJo
  );
  SaveInteger(
    gv_abH,
    gv_abY,
    StringHash("|cx049A115|rStaff of the Chosen One"),
    5
  );
  SaveInteger(
    gv_abH,
    gv_abX,
    StringHash("|cx050A115|rOrb of the Mind"),
    lv_aJo
  );
  SaveInteger(gv_abH, gv_abY, StringHash("|cx050A115|rOrb of the Mind"), 5);
  SaveInteger(
    gv_abH,
    gv_abX,
    StringHash("|cx051A115|rCharm of Delphi"),
    lv_aJo
  );
  SaveInteger(gv_abH, gv_abY, StringHash("|cx051A115|rCharm of Delphi"), 5);
  SaveInteger(gv_abH, gv_abX, StringHash("|cx052A135|rBlackfire Orb"), lv_aJp);
  SaveInteger(gv_abH, gv_abY, StringHash("|cx052A135|rBlackfire Orb"), 10);
  SaveInteger(gv_abH, gv_abX, StringHash("|cx053A135|rMagi's Crown"), lv_aJp);
  SaveInteger(gv_abH, gv_abY, StringHash("|cx053A135|rMagi's Crown"), 10);
  SaveInteger(
    gv_abH,
    gv_abX,
    StringHash("|cx054A135|rHigh Oracle Staff"),
    lv_aJp
  );
  SaveInteger(gv_abH, gv_abY, StringHash("|cx054A135|rHigh Oracle Staff"), 10);
  SaveInteger(
    gv_abH,
    gv_abX,
    StringHash("|cx055A100|rScepter of Thanatos"),
    lv_aJq
  );
  SaveInteger(
    gv_abH,
    gv_abY,
    StringHash("|cx055A100|rScepter of Thanatos"),
    lv_aJr
  );
  SaveInteger(
    gv_abH,
    gv_abX,
    StringHash("|cx056A100|rArchmages Mantle"),
    lv_aJq
  );
  SaveInteger(
    gv_abH,
    gv_abY,
    StringHash("|cx056A100|rArchmages Mantle"),
    lv_aJr
  );
  SaveInteger(gv_abH, gv_abX, StringHash("|cx057A100|rAxe of Thereus"), lv_aJq);
  SaveInteger(gv_abH, gv_abY, StringHash("|cx057A100|rAxe of Thereus"), lv_aJr);
  SaveInteger(
    gv_abH,
    gv_abX,
    StringHash("|cx058A100|rAlexander's Cuirass"),
    lv_aJq
  );
  SaveInteger(
    gv_abH,
    gv_abY,
    StringHash("|cx058A100|rAlexander's Cuirass"),
    lv_aJr
  );
  SaveInteger(
    gv_abH,
    gv_abX,
    StringHash("|cx059A100|rHector's Shimmering Shield"),
    lv_aJq
  );
  SaveInteger(
    gv_abH,
    gv_abY,
    StringHash("|cx059A100|rHector's Shimmering Shield"),
    lv_aJr
  );
  SaveInteger(
    gv_abH,
    gv_abX,
    StringHash("|cx060A100|rTelamon's Boar Skewer"),
    lv_aJq
  );
  SaveInteger(
    gv_abH,
    gv_abY,
    StringHash("|cx060A100|rTelamon's Boar Skewer"),
    lv_aJr
  );
  SaveInteger(
    gv_abH,
    gv_abX,
    StringHash("|cx061A100|rThe Mighty Bow of Herakles"),
    lv_aJq
  );
  SaveInteger(
    gv_abH,
    gv_abY,
    StringHash("|cx061A100|rThe Mighty Bow of Herakles"),
    lv_aJr
  );
  SaveInteger(
    gv_abH,
    gv_abX,
    StringHash("|cx062A100|rAssassin's Shroud"),
    lv_aJq
  );
  SaveInteger(
    gv_abH,
    gv_abY,
    StringHash("|cx062A100|rAssassin's Shroud"),
    lv_aJr
  );
  SaveInteger(
    gv_abH,
    gv_abX,
    StringHash("|cx063A100|rVestment of the Overlord"),
    lv_aJq
  );
  SaveInteger(
    gv_abH,
    gv_abY,
    StringHash("|cx063A100|rVestment of the Overlord"),
    lv_aJr
  );
  SaveInteger(
    gv_abH,
    gv_abX,
    StringHash("|cx064A135|rGolden Shield of Pelarohn"),
    35000
  );
  SaveInteger(
    gv_abH,
    gv_abY,
    StringHash("|cx064A135|rGolden Shield of Pelarohn"),
    25
  );
  SaveInteger(
    gv_abH,
    gv_abX,
    StringHash("|cx065A135|rImmortal Armor of Achillies"),
    35000
  );
  SaveInteger(
    gv_abH,
    gv_abY,
    StringHash("|cx065A135|rImmortal Armor of Achillies"),
    25
  );
  SaveInteger(gv_abH, gv_abX, StringHash("|cx066A135|rAres Warhelm"), 35000);
  SaveInteger(gv_abH, gv_abY, StringHash("|cx066A135|rAres Warhelm"), 25);
  SaveInteger(
    gv_abH,
    gv_abX,
    StringHash("|cx067A135|rAlexander's Greaves"),
    35000
  );
  SaveInteger(
    gv_abH,
    gv_abY,
    StringHash("|cx067A135|rAlexander's Greaves"),
    25
  );
  SaveInteger(gv_abH, gv_abX, StringHash("|cx068A135|rOdysseus Armor"), 35000);
  SaveInteger(gv_abH, gv_abY, StringHash("|cx068A135|rOdysseus Armor"), 25);
  SaveInteger(
    gv_abH,
    gv_abX,
    StringHash("|cx069A135|rBlack Pearl Bracelet"),
    35000
  );
  SaveInteger(
    gv_abH,
    gv_abY,
    StringHash("|cx069A135|rBlack Pearl Bracelet"),
    25
  );
  SaveInteger(gv_abH, gv_abX, StringHash("|cx070A135|rCadeus"), 35000);
  SaveInteger(gv_abH, gv_abY, StringHash("|cx070A135|rCadeus"), 25);
  SaveInteger(
    gv_abH,
    gv_abX,
    StringHash("|cx071A135|rHesione's Golden Veil"),
    35000
  );
  SaveInteger(
    gv_abH,
    gv_abY,
    StringHash("|cx071A135|rHesione's Golden Veil"),
    25
  );
  SaveInteger(
    gv_abH,
    gv_abX,
    StringHash("|cx072A135|rDionysus' Wineskin"),
    35000
  );
  SaveInteger(gv_abH, gv_abY, StringHash("|cx072A135|rDionysus' Wineskin"), 25);
  SaveInteger(gv_abH, gv_abX, StringHash("|cx073A135|rArchmages Clasp"), 35000);
  SaveInteger(gv_abH, gv_abY, StringHash("|cx073A135|rArchmages Clasp"), 25);
  SaveInteger(
    gv_abH,
    gv_abX,
    StringHash("|cx074A140|rRed Dragonscale Shield"),
    lv_aJs
  );
  SaveInteger(
    gv_abH,
    gv_abY,
    StringHash("|cx074A140|rRed Dragonscale Shield"),
    lv_aJt
  );
  SaveInteger(
    gv_abH,
    gv_abX,
    StringHash("|cx075A140|rRed Dragonscale Armor"),
    lv_aJs
  );
  SaveInteger(
    gv_abH,
    gv_abY,
    StringHash("|cx075A140|rRed Dragonscale Armor"),
    lv_aJt
  );
  SaveInteger(
    gv_abH,
    gv_abX,
    StringHash("|cx076A140|rRed Dragonscale Ring"),
    lv_aJs
  );
  SaveInteger(
    gv_abH,
    gv_abY,
    StringHash("|cx076A140|rRed Dragonscale Ring"),
    lv_aJt
  );
  SaveInteger(
    gv_abH,
    gv_abX,
    StringHash("|cx077A140|rWhite Dragonscale Shield"),
    lv_aJs
  );
  SaveInteger(
    gv_abH,
    gv_abY,
    StringHash("|cx077A140|rWhite Dragonscale Shield"),
    lv_aJt
  );
  SaveInteger(
    gv_abH,
    gv_abX,
    StringHash("|cx078A140|rWhite Dragonscale Armor"),
    lv_aJs
  );
  SaveInteger(
    gv_abH,
    gv_abY,
    StringHash("|cx078A140|rWhite Dragonscale Armor"),
    lv_aJt
  );
  SaveInteger(
    gv_abH,
    gv_abX,
    StringHash("|cx079A140|rWhite Dragonscale Ring"),
    lv_aJs
  );
  SaveInteger(
    gv_abH,
    gv_abY,
    StringHash("|cx079A140|rWhite Dragonscale Ring"),
    lv_aJt
  );
  SaveInteger(
    gv_abH,
    gv_abX,
    StringHash("|cx080A140|rGreen Dragonscale Shield"),
    lv_aJs
  );
  SaveInteger(
    gv_abH,
    gv_abY,
    StringHash("|cx080A140|rGreen Dragonscale Shield"),
    lv_aJt
  );
  SaveInteger(
    gv_abH,
    gv_abX,
    StringHash("|cx081A140|rGreen Dragonscale Armor"),
    lv_aJs
  );
  SaveInteger(
    gv_abH,
    gv_abY,
    StringHash("|cx081A140|rGreen Dragonscale Armor"),
    lv_aJt
  );
  SaveInteger(
    gv_abH,
    gv_abX,
    StringHash("|cx082A140|rGreen Dragonscale Ring"),
    lv_aJs
  );
  SaveInteger(
    gv_abH,
    gv_abY,
    StringHash("|cx082A140|rGreen Dragonscale Ring"),
    lv_aJt
  );
  SaveInteger(
    gv_abH,
    gv_abX,
    StringHash("|cx083A120|rHelm of the Nemean Lion"),
    75000
  );
  SaveInteger(
    gv_abH,
    gv_abY,
    StringHash("|cx083A120|rHelm of the Nemean Lion"),
    50
  );
  SaveInteger(
    gv_abH,
    gv_abX,
    StringHash("|cx084A120|rPelt of the Nemean Lion"),
    75000
  );
  SaveInteger(
    gv_abH,
    gv_abY,
    StringHash("|cx084A120|rPelt of the Nemean Lion"),
    50
  );
  SaveInteger(
    gv_abH,
    gv_abX,
    StringHash("|cx085A120|rBracers of the Nemean Lion"),
    75000
  );
  SaveInteger(
    gv_abH,
    gv_abY,
    StringHash("|cx085A120|rBracers of the Nemean Lion"),
    50
  );
  SaveInteger(
    gv_abH,
    gv_abX,
    StringHash("|cx086A120|rGreaves of the Nemean Lion"),
    75000
  );
  SaveInteger(
    gv_abH,
    gv_abY,
    StringHash("|cx086A120|rGreaves of the Nemean Lion"),
    50
  );
  SaveInteger(
    gv_abH,
    gv_abX,
    StringHash("|cx087A130|rMighty Olympian Sword"),
    100000
  );
  SaveInteger(
    gv_abH,
    gv_abY,
    StringHash("|cx087A130|rMighty Olympian Sword"),
    75
  );
  SaveInteger(
    gv_abH,
    gv_abX,
    StringHash("|cx088A130|rSacred Olympian Sword"),
    100000
  );
  SaveInteger(
    gv_abH,
    gv_abY,
    StringHash("|cx088A130|rSacred Olympian Sword"),
    75
  );
  SaveInteger(
    gv_abH,
    gv_abX,
    StringHash("|cx089A140|rMighy Olympian Helm"),
    100000
  );
  SaveInteger(
    gv_abH,
    gv_abY,
    StringHash("|cx089A140|rMighy Olympian Helm"),
    100
  );
  SaveInteger(
    gv_abH,
    gv_abX,
    StringHash("|cx090A140|rSacred Olympian Helm"),
    100000
  );
  SaveInteger(
    gv_abH,
    gv_abY,
    StringHash("|cx090A140|rSacred Olympian Helm"),
    100
  );
  SaveInteger(
    gv_abH,
    gv_abX,
    StringHash("|cx091A145|rMighty Olympian Armor"),
    100000
  );
  SaveInteger(
    gv_abH,
    gv_abY,
    StringHash("|cx091A145|rMighty Olympian Armor"),
    150
  );
  SaveInteger(
    gv_abH,
    gv_abX,
    StringHash("|cx092A145|rSacred Olympian Armor"),
    100000
  );
  SaveInteger(
    gv_abH,
    gv_abY,
    StringHash("|cx092A145|rSacred Olympian Armor"),
    150
  );
  SaveInteger(
    gv_abH,
    gv_abX,
    StringHash("|cx093A150|rGreat Olympian Regalia"),
    lv_aJy
  );
  SaveInteger(
    gv_abH,
    gv_abY,
    StringHash("|cx093A150|rGreat Olympian Regalia"),
    500
  );
  SaveInteger(
    gv_abH,
    gv_abX,
    StringHash("|cx094A150|rPowerful Olympian Regalia"),
    lv_aJy
  );
  SaveInteger(
    gv_abH,
    gv_abY,
    StringHash("|cx094A150|rPowerful Olympian Regalia"),
    500
  );
  SaveInteger(
    gv_abH,
    gv_abX,
    StringHash("|cx095A150|rStrong Olympian Regalia"),
    lv_aJy
  );
  SaveInteger(
    gv_abH,
    gv_abY,
    StringHash("|cx095A150|rStrong Olympian Regalia"),
    500
  );
  SaveInteger(
    gv_abH,
    gv_abX,
    StringHash("|cx096A150|rConsecrated Olympian Regalia"),
    lv_aJy
  );
  SaveInteger(
    gv_abH,
    gv_abY,
    StringHash("|cx096A150|rConsecrated Olympian Regalia"),
    500
  );
  SaveInteger(
    gv_abH,
    gv_abX,
    StringHash("|cx097A150|rBlessed Olympian Regalia"),
    lv_aJy
  );
  SaveInteger(
    gv_abH,
    gv_abY,
    StringHash("|cx097A150|rBlessed Olympian Regalia"),
    500
  );
  SaveInteger(
    gv_abH,
    gv_abX,
    StringHash("|cx098A150|rRevered Olympian Regalia"),
    lv_aJy
  );
  SaveInteger(
    gv_abH,
    gv_abY,
    StringHash("|cx098A150|rRevered Olympian Regalia"),
    500
  );
  SaveInteger(
    gv_abH,
    gv_abX,
    StringHash("|cx099A150|rHallowed Olympian Regalia"),
    lv_aJy
  );
  SaveInteger(
    gv_abH,
    gv_abY,
    StringHash("|cx099A150|rHallowed Olympian Regalia"),
    500
  );
  SaveInteger(
    gv_abH,
    gv_abX,
    StringHash("|cx100A150|rSanctified Olympian Regalia"),
    lv_aJy
  );
  SaveInteger(
    gv_abH,
    gv_abY,
    StringHash("|cx100A150|rSanctified Olympian Regalia"),
    500
  );
  SaveInteger(gv_abH, gv_abX, StringHash("|cx101B035|rDivine Hammer"), 10000);
  SaveInteger(gv_abH, gv_abY, StringHash("|cx101B035|rDivine Hammer"), 0);
  SaveInteger(gv_abH, gv_abX, StringHash("|cx102B070|rDivine Gear"), lv_aJw);
  SaveInteger(gv_abH, gv_abY, StringHash("|cx102B070|rDivine Gear"), 1);
  SaveInteger(
    gv_abH,
    gv_abX,
    StringHash("|cx103B125|rDivine Equipment"),
    lv_aJx
  );
  SaveInteger(gv_abH, gv_abY, StringHash("|cx103B125|rDivine Equipment"), 10);
  SaveInteger(gv_abH, gv_abX, StringHash("|cx104C035|rVeteran Helm"), 10000);
  SaveInteger(gv_abH, gv_abY, StringHash("|cx104C035|rVeteran Helm"), 0);
  SaveInteger(gv_abH, gv_abX, StringHash("|cx105C070|rVeteran Gear"), lv_aJw);
  SaveInteger(gv_abH, gv_abY, StringHash("|cx105C070|rVeteran Gear"), 1);
  SaveInteger(
    gv_abH,
    gv_abX,
    StringHash("|cx106C125|rVeteran Equipment"),
    lv_aJx
  );
  SaveInteger(gv_abH, gv_abY, StringHash("|cx106C125|rVeteran Equipment"), 10);
  SaveInteger(gv_abH, gv_abX, StringHash("|cx107D035|rTribal Totem"), 10000);
  SaveInteger(gv_abH, gv_abY, StringHash("|cx107D035|rTribal Totem"), 0);
  SaveInteger(gv_abH, gv_abX, StringHash("|cx108D070|rTribal Gear"), lv_aJw);
  SaveInteger(gv_abH, gv_abY, StringHash("|cx108D070|rTribal Gear"), 1);
  SaveInteger(
    gv_abH,
    gv_abX,
    StringHash("|cx109D125|rTribal  Equipment"),
    lv_aJx
  );
  SaveInteger(gv_abH, gv_abY, StringHash("|cx109D125|rTribal  Equipment"), 10);
  SaveInteger(gv_abH, gv_abX, StringHash("|cx110E035|rShadow Cloak"), 10000);
  SaveInteger(gv_abH, gv_abY, StringHash("|cx110E035|rShadow Cloak"), 0);
  SaveInteger(gv_abH, gv_abX, StringHash("|cx111E070|rShadow Gear"), lv_aJw);
  SaveInteger(gv_abH, gv_abY, StringHash("|cx111E070|rShadow Gear"), 1);
  SaveInteger(
    gv_abH,
    gv_abX,
    StringHash("|cx112E125|rShadow Equipment"),
    lv_aJx
  );
  SaveInteger(gv_abH, gv_abY, StringHash("|cx112E125|rShadow Equipment"), 10);
  SaveInteger(
    gv_abH,
    gv_abX,
    StringHash("|cx113F035|rAmulet of Energy"),
    10000
  );
  SaveInteger(gv_abH, gv_abY, StringHash("|cx113F035|rAmulet of Energy"), 0);
  SaveInteger(gv_abH, gv_abX, StringHash("|cx114F070|rEnergy Gear"), lv_aJw);
  SaveInteger(gv_abH, gv_abY, StringHash("|cx114F070|rEnergy Gear"), 1);
  SaveInteger(
    gv_abH,
    gv_abX,
    StringHash("|cx115F125|rEnergy Equipment"),
    lv_aJx
  );
  SaveInteger(gv_abH, gv_abY, StringHash("|cx115F125|rEnergy Equipment"), 10);
  SaveInteger(gv_abH, gv_abX, StringHash("|cx1161035|rMolten Crown"), 10000);
  SaveInteger(gv_abH, gv_abY, StringHash("|cx1161035|rMolten Crown"), 0);
  SaveInteger(gv_abH, gv_abX, StringHash("|cx1171070|rMolten Gear"), lv_aJw);
  SaveInteger(gv_abH, gv_abY, StringHash("|cx1171070|rMolten Gear"), 1);
  SaveInteger(
    gv_abH,
    gv_abX,
    StringHash("|cx1181125|rMolten Equipment"),
    lv_aJx
  );
  SaveInteger(gv_abH, gv_abY, StringHash("|cx1181125|rMolten Equipment"), 10);
  SaveInteger(gv_abH, gv_abX, StringHash("|cx1192035|rCirclet of Ice"), 10000);
  SaveInteger(gv_abH, gv_abY, StringHash("|cx1192035|rCirclet of Ice"), 0);
  SaveInteger(gv_abH, gv_abX, StringHash("|cx1202070|rIce Gear"), lv_aJw);
  SaveInteger(gv_abH, gv_abY, StringHash("|cx1202070|rIce Gear"), 1);
  SaveInteger(gv_abH, gv_abX, StringHash("|cx1212125|rIce Equipment"), lv_aJx);
  SaveInteger(gv_abH, gv_abY, StringHash("|cx1212125|rIce Equipment"), 10);
  SaveInteger(gv_abH, gv_abX, StringHash("|cx1223035|rCrown of Souls"), 10000);
  SaveInteger(gv_abH, gv_abY, StringHash("|cx1223035|rCrown of Souls"), 0);
  SaveInteger(gv_abH, gv_abX, StringHash("|cx1233070|rSoul Gear"), lv_aJw);
  SaveInteger(gv_abH, gv_abY, StringHash("|cx1233070|rSoul Gear"), 1);
  SaveInteger(gv_abH, gv_abX, StringHash("|cx1243125|rSoul Equipment"), lv_aJx);
  SaveInteger(gv_abH, gv_abY, StringHash("|cx1243125|rSoul Equipment"), 10);
  SaveInteger(
    gv_abH,
    gv_abX,
    StringHash("|cx1254035|rAmulet of the Wild"),
    10000
  );
  SaveInteger(gv_abH, gv_abY, StringHash("|cx1254035|rAmulet of the Wild"), 0);
  SaveInteger(gv_abH, gv_abX, StringHash("|cx1264070|rWild Gear"), lv_aJw);
  SaveInteger(gv_abH, gv_abY, StringHash("|cx1264070|rWild Gear"), 1);
  SaveInteger(gv_abH, gv_abX, StringHash("|cx1274125|rWild Equipment"), lv_aJx);
  SaveInteger(gv_abH, gv_abY, StringHash("|cx1274125|rWild Equipment"), 10);
  SaveInteger(gv_abH, gv_abX, StringHash("|cx1285035|rBook of Light"), 10000);
  SaveInteger(gv_abH, gv_abY, StringHash("|cx1285035|rBook of Light"), 0);
  SaveInteger(gv_abH, gv_abX, StringHash("|cx1295070|rLight Gear"), lv_aJw);
  SaveInteger(gv_abH, gv_abY, StringHash("|cx1295070|rLight Gear"), 1);
  SaveInteger(
    gv_abH,
    gv_abX,
    StringHash("|cx1305125|rLight Equipment"),
    lv_aJx
  );
  SaveInteger(gv_abH, gv_abY, StringHash("|cx1305125|rLight Equipment"), 10);
  SaveInteger(gv_abH, gv_abX, StringHash("|cx1316035|rHoplite Spear"), 10000);
  SaveInteger(gv_abH, gv_abY, StringHash("|cx1316035|rHoplite Spear"), 0);
  SaveInteger(gv_abH, gv_abX, StringHash("|cx1326070|rHoplite Gear"), lv_aJw);
  SaveInteger(gv_abH, gv_abY, StringHash("|cx1326070|rHoplite Gear"), 1);
  SaveInteger(
    gv_abH,
    gv_abX,
    StringHash("|cx1336125|rHoplite Equipment"),
    lv_aJx
  );
  SaveInteger(gv_abH, gv_abY, StringHash("|cx1336125|rHoplite Equipment"), 10);
  SaveInteger(
    gv_abH,
    gv_abX,
    StringHash("|cx1347035|rMoonlight Quiver"),
    10000
  );
  SaveInteger(gv_abH, gv_abY, StringHash("|cx1347035|rMoonlight Quiver"), 0);
  SaveInteger(gv_abH, gv_abX, StringHash("|cx1357070|rMoonlight Gear"), lv_aJw);
  SaveInteger(gv_abH, gv_abY, StringHash("|cx1357070|rMoonlight Gear"), 1);
  SaveInteger(
    gv_abH,
    gv_abX,
    StringHash("|cx1367125|rMoonlight Equipment"),
    lv_aJx
  );
  SaveInteger(
    gv_abH,
    gv_abY,
    StringHash("|cx1367125|rMoonlight Equipment"),
    10
  );
  SaveInteger(
    gv_abH,
    gv_abX,
    StringHash("|cx137A050|rInitiate of Apollo"),
    lv_aJu
  );
  SaveInteger(gv_abH, gv_abY, StringHash("|cx137A050|rInitiate of Apollo"), 1);
  SaveInteger(
    gv_abH,
    gv_abX,
    StringHash("|cx138A120|rFollower of Apollo"),
    lv_aJv
  );
  SaveInteger(gv_abH, gv_abY, StringHash("|cx138A120|rFollower of Apollo"), 15);
  SaveInteger(
    gv_abH,
    gv_abX,
    StringHash("|cx139A050|rInitiate of Artemis"),
    lv_aJu
  );
  SaveInteger(gv_abH, gv_abY, StringHash("|cx139A050|rInitiate of Artemis"), 1);
  SaveInteger(
    gv_abH,
    gv_abX,
    StringHash("|cx140A120|rFollower of Artemis"),
    lv_aJv
  );
  SaveInteger(
    gv_abH,
    gv_abY,
    StringHash("|cx140A120|rFollower of Artemis"),
    15
  );
  SaveInteger(
    gv_abH,
    gv_abX,
    StringHash("|cx141A050|rInitiate of Ares"),
    lv_aJu
  );
  SaveInteger(gv_abH, gv_abY, StringHash("|cx141A050|rInitiate of Ares"), 1);
  SaveInteger(
    gv_abH,
    gv_abX,
    StringHash("|cx142A120|rFollower of Ares"),
    lv_aJv
  );
  SaveInteger(gv_abH, gv_abY, StringHash("|cx142A120|rFollower of Ares"), 15);
  SaveInteger(
    gv_abH,
    gv_abX,
    StringHash("|cx143A050|rInitiate of Hephaestus"),
    lv_aJu
  );
  SaveInteger(
    gv_abH,
    gv_abY,
    StringHash("|cx143A050|rInitiate of Hephaestus"),
    1
  );
  SaveInteger(
    gv_abH,
    gv_abX,
    StringHash("|cx144A120|rFollower of Hephaestus"),
    lv_aJv
  );
  SaveInteger(
    gv_abH,
    gv_abY,
    StringHash("|cx144A120|rFollower of Hephaestus"),
    15
  );
  SaveInteger(
    gv_abH,
    gv_abX,
    StringHash("|cx145A050|rInitiate of Hermes"),
    lv_aJu
  );
  SaveInteger(gv_abH, gv_abY, StringHash("|cx145A050|rInitiate of Hermes"), 1);
  SaveInteger(
    gv_abH,
    gv_abX,
    StringHash("|cx146A120|rFollower of Hermes"),
    lv_aJv
  );
  SaveInteger(gv_abH, gv_abY, StringHash("|cx146A120|rFollower of Hermes"), 15);
  SaveInteger(
    gv_abH,
    gv_abX,
    StringHash("|cx147A050|rInitiate of Poseidon"),
    lv_aJu
  );
  SaveInteger(
    gv_abH,
    gv_abY,
    StringHash("|cx147A050|rInitiate of Poseidon"),
    1
  );
  SaveInteger(
    gv_abH,
    gv_abX,
    StringHash("|cx148A120|rFollower of Poseidon"),
    lv_aJv
  );
  SaveInteger(
    gv_abH,
    gv_abY,
    StringHash("|cx148A120|rFollower of Poseidon"),
    15
  );
  gv_abV = f_aCF();
  SaveInteger(gv_abH, gv_abV, StringHash("|cffA075ff|rRod of the Magi"), 50);
  SaveInteger(gv_abH, gv_abV, StringHash("|cffA005ff|rBone Staff"), 10);
  SaveInteger(gv_abH, gv_abV, StringHash("|cffA015ff|rIron Brooch"), 35);
  SaveInteger(gv_abH, gv_abV, StringHash("|cffA025ff|rStone Tablet"), 60);
  SaveInteger(gv_abH, gv_abV, StringHash("|cffA035ff|rGlowing Orb"), 90);
  SaveInteger(gv_abH, gv_abV, StringHash("|cffA055ff|rSoul Ring"), 140);
  SaveInteger(gv_abH, gv_abV, StringHash("|cffA075ff|rOracle Staff"), 120);
  SaveInteger(gv_abH, gv_abV, StringHash("|cffA100ff|rAmulet of Power"), 200);
  SaveInteger(
    gv_abH,
    gv_abV,
    StringHash("|cffA115ff|rStaff of the Chosen One"),
    270
  );
  SaveInteger(gv_abH, gv_abV, StringHash("|cffA135ff|rBlackfire Orb"), 350);
  SaveInteger(gv_abH, gv_abV, StringHash("|cffA075ff|rOracle Staff"), 120);
  SaveInteger(gv_abH, gv_abV, StringHash("|cffA135ff|rHigh Oracle Staff"), 200);
  SaveInteger(
    gv_abH,
    gv_abV,
    StringHash("|cffA045ff|r|cff00BFFFHigh Shaman's Staff|r"),
    150
  );
  SaveInteger(
    gv_abH,
    gv_abV,
    StringHash("|cffA110ff|r|cff00BFFFAgamemnon's Deathmask|r"),
    300
  );
  SaveInteger(
    gv_abH,
    gv_abV,
    StringHash("|cffA1302f|r|cff00BFFFFingerbone of Boreas|r"),
    200
  );
  SaveInteger(
    gv_abH,
    gv_abV,
    StringHash("|cffB035fd|r|cff00CD00Divine Helm|r"),
    100
  );
  SaveInteger(
    gv_abH,
    gv_abV,
    StringHash("|cffB070f2|r|cff00CD00Divine Gear|r"),
    125
  );
  SaveInteger(
    gv_abH,
    gv_abV,
    StringHash("|cffB125f2|r|cff00CD00Divine Equipment|r"),
    200
  );
  SaveInteger(
    gv_abH,
    gv_abV,
    StringHash("|cffF035fb|r|cff00CD00Amulet of Energy|r"),
    200
  );
  SaveInteger(
    gv_abH,
    gv_abV,
    StringHash("|cffF035fc|r|cff00CD00Robe of Energy|r"),
    150
  );
  SaveInteger(
    gv_abH,
    gv_abV,
    StringHash("|cffF07022|r|cff00CD00Energy Gear|r"),
    350
  );
  SaveInteger(
    gv_abH,
    gv_abV,
    StringHash("|cffF12522|r|cff00CD00Energy Equipment|r"),
    650
  );
  SaveInteger(
    gv_abH,
    gv_abV,
    StringHash("|cff1035fc|r|cff00CD00Molten Crown|r"),
    225
  );
  SaveInteger(
    gv_abH,
    gv_abV,
    StringHash("|cff1035fd|r|cff00CD00Molten Ring|r"),
    150
  );
  SaveInteger(
    gv_abH,
    gv_abV,
    StringHash("|cff1070f2|r|cff00CD00Molten Gear|r"),
    375
  );
  SaveInteger(
    gv_abH,
    gv_abV,
    StringHash("|cff1125f2|r|cff00CD00Molten Equipment|r"),
    600
  );
  SaveInteger(
    gv_abH,
    gv_abV,
    StringHash("|cff2035fb|r|cff00CD00Circlet of Ice|r"),
    150
  );
  SaveInteger(
    gv_abH,
    gv_abV,
    StringHash("|cff2035fd|r|cff00CD00Staff of Ice|r"),
    325
  );
  SaveInteger(
    gv_abH,
    gv_abV,
    StringHash("|cff2070f2|r|cff00CD00Ice Gear|r"),
    475
  );
  SaveInteger(
    gv_abH,
    gv_abV,
    StringHash("|cff2125f2|r|cff00CD00Ice Equipment|r"),
    650
  );
  SaveInteger(
    gv_abH,
    gv_abV,
    StringHash("|cff3035fb|r|cff00CD00Band of Souls|r"),
    175
  );
  SaveInteger(
    gv_abH,
    gv_abV,
    StringHash("|cff3035fc|r|cff00CD00Crown of Souls|r"),
    75
  );
  SaveInteger(
    gv_abH,
    gv_abV,
    StringHash("|cff307022|r|cff00CD00Soul Gear|r"),
    250
  );
  SaveInteger(
    gv_abH,
    gv_abV,
    StringHash("|cff312522|r|cff00CD00Soul Equipment|r"),
    400
  );
  SaveInteger(
    gv_abH,
    gv_abV,
    StringHash("|cff4035fd|r|cff00CD00Staff of the Wild|r"),
    125
  );
  SaveInteger(
    gv_abH,
    gv_abV,
    StringHash("|cff4035fc|r|cff00CD00Hood of the Wild|r"),
    75
  );
  SaveInteger(
    gv_abH,
    gv_abV,
    StringHash("|cff4070f2|r|cff00CD00Wild Gear|r"),
    200
  );
  SaveInteger(
    gv_abH,
    gv_abV,
    StringHash("|cff4125f2|r|cff00CD00Wild Equipment|r"),
    350
  );
  SaveInteger(
    gv_abH,
    gv_abV,
    StringHash("|cff7035fd|r|cff00CD00Moonlight Talisman|r"),
    120
  );
  SaveInteger(
    gv_abH,
    gv_abV,
    StringHash("|cff7035fb|r|cff00CD00Moonlight Cloak|r"),
    100
  );
  SaveInteger(
    gv_abH,
    gv_abV,
    StringHash("|cff7070f2|r|cff00CD00Moonlight Gear|r"),
    250
  );
  SaveInteger(
    gv_abH,
    gv_abV,
    StringHash("|cff7125f2|r|cff00CD00Moonlight Equipment|r"),
    450
  );
  SaveInteger(
    gv_abH,
    gv_abV,
    StringHash("|cffA050fa|r|cff8A2BE2Initiate of Poseidon|r"),
    400
  );
  SaveInteger(
    gv_abH,
    gv_abV,
    StringHash("|cffA120fa|r|cff8A2BE2Follower of Poseidon|r"),
    700
  );
  SaveInteger(
    gv_abH,
    gv_abV,
    StringHash("|cffA100ff|r|cffFFA500Scepter of Thanatos.|r"),
    200
  );
  SaveInteger(
    gv_abH,
    gv_abV,
    StringHash("|cffA100ff|r|cffFFA500Archmages Mantle|r"),
    50
  );
  SaveInteger(
    gv_abH,
    gv_abV,
    StringHash("|cffA100ff|r|cffFFA500Vestment of the Overlord|r"),
    300
  );
  SaveInteger(
    gv_abH,
    gv_abV,
    StringHash("|cffA130ff|r|cffFFA500Cadeus|r"),
    700
  );
  SaveInteger(
    gv_abH,
    gv_abV,
    StringHash("|cffA130ff|r|cffFFA500Archmages Clasp|r"),
    200
  );
  SaveInteger(
    gv_abH,
    gv_abV,
    StringHash("|cffA140f4|r|cffFFA500White Dragonscale Armor|r"),
    300
  );
  SaveInteger(
    gv_abH,
    gv_abV,
    StringHash("|cffA140f4|r|cffFFA500White Dragonscale Ring|r"),
    600
  );
  SaveInteger(
    gv_abH,
    gv_abV,
    StringHash("|cffA130f5|r|cffFFD700Sacred Olympian Sword|r"),
    225
  );
  SaveInteger(
    gv_abH,
    gv_abV,
    StringHash("|cffA140f6|r|cffFFD700Sacred Olympian Helm|r"),
    340
  );
  SaveInteger(
    gv_abH,
    gv_abV,
    StringHash("|cffA145f7|r|cffFFD700Sacred Olympian Armor|r"),
    300
  );
  SaveInteger(
    gv_abH,
    gv_abV,
    StringHash("|cffA150f8|r|cffFFD700Strong Olympian Regalia|r"),
    250
  );
  SaveInteger(
    gv_abH,
    gv_abV,
    StringHash("|cffA150f8|r|cffFFD700Consecrated Olympian Regalia|r"),
    400
  );
  SaveInteger(
    gv_abH,
    gv_abV,
    StringHash("|cffA150f8|r|cffFFD700Blessed Olympian Regalia|r"),
    1300
  );
  SaveInteger(
    gv_abH,
    gv_abV,
    StringHash("|cffA150f8|r|cffFFD700Revered Olympian Regalia|r"),
    0
  );
  SaveInteger(
    gv_abH,
    gv_abV,
    StringHash("|cffA150f8|r|cffFFD700Hallowed Olympian Regalia|r"),
    600
  );
  SaveInteger(
    gv_abH,
    gv_abV,
    StringHash("|cffA150f8|r|cffFFD700Sanctified Olympian Regalia|r"),
    650
  );
  SaveInteger(
    gv_abH,
    gv_abV,
    StringHash("|cffA120f9|r|cffFFA500Helm of the Nemean Lion|r"),
    125
  );
  SaveInteger(
    gv_abH,
    gv_abV,
    StringHash("|cffA13023|r|cff00FFFFPersephone's Caress|r"),
    600
  );
  SaveInteger(
    gv_abH,
    gv_abV,
    StringHash("|cffA095ff|r|cff00BFFFDark Heart of the Forest|r"),
    50
  );
  gv_abW = f_aCF();
  SaveInteger(
    gv_abH,
    gv_abW,
    StringHash("|cffA095ff|r|cff00BFFFDark Heart of the Forest|r"),
    50
  );
  SaveInteger(gv_abH, gv_abW, StringHash("|cffA005ff|rBone Staff"), 10);
  SaveInteger(gv_abH, gv_abW, StringHash("|cffA015ff|rIron Brooch"), 35);
  SaveInteger(gv_abH, gv_abW, StringHash("|cffA025ff|rStone Tablet"), 60);
  SaveInteger(gv_abH, gv_abW, StringHash("|cffA035ff|rGlowing Orb"), 90);
  SaveInteger(gv_abH, gv_abW, StringHash("|cffA055ff|rSoul Ring"), 140);
  SaveInteger(gv_abH, gv_abW, StringHash("|cffA075ff|rOracle Staff"), 120);
  SaveInteger(gv_abH, gv_abW, StringHash("|cffA075ff|rRod of the Magi"), 50);
  SaveInteger(gv_abH, gv_abW, StringHash("|cffA100ff|rAmulet of Power"), 200);
  SaveInteger(
    gv_abH,
    gv_abW,
    StringHash("|cffA115ff|rStaff of the Chosen One"),
    270
  );
  SaveInteger(gv_abH, gv_abW, StringHash("|cffA075ff|rOracle Staff"), 120);
  SaveInteger(gv_abH, gv_abW, StringHash("|cffA135ff|rBlackfire Orb"), 350);
  SaveInteger(gv_abH, gv_abW, StringHash("|cffA135ff|rHigh Oracle Staff"), 200);
  SaveInteger(
    gv_abH,
    gv_abW,
    StringHash("|cffA045ff|r|cff00BFFFHigh Shaman's Staff|r"),
    150
  );
  SaveInteger(
    gv_abH,
    gv_abW,
    StringHash("|cffA110ff|r|cff00BFFFAreithou's Mace|r"),
    300
  );
  SaveInteger(
    gv_abH,
    gv_abW,
    StringHash("|cffA1302f|r|cff00BFFFFingerbone of Boreas|r"),
    200
  );
  SaveInteger(
    gv_abH,
    gv_abW,
    StringHash("|cffB035fd|r|cff00CD00Divine Helm|r"),
    100
  );
  SaveInteger(
    gv_abH,
    gv_abW,
    StringHash("|cffB070f2|r|cff00CD00Divine Gear|r"),
    125
  );
  SaveInteger(
    gv_abH,
    gv_abW,
    StringHash("|cffB125f2|r|cff00CD00Divine Equipment|r"),
    200
  );
  SaveInteger(
    gv_abH,
    gv_abW,
    StringHash("|cff4035fd|r|cff00CD00Staff of the Wild|r"),
    125
  );
  SaveInteger(
    gv_abH,
    gv_abW,
    StringHash("|cff4035fc|r|cff00CD00Hood of the Wild|r"),
    75
  );
  SaveInteger(
    gv_abH,
    gv_abW,
    StringHash("|cff4070f2|r|cff00CD00Wild Gear|r"),
    200
  );
  SaveInteger(
    gv_abH,
    gv_abW,
    StringHash("|cff4125f2|r|cff00CD00Wild Equipment|r"),
    350
  );
  SaveInteger(
    gv_abH,
    gv_abW,
    StringHash("|cff5035fb|r|cff00CD00Book of Light|r"),
    200
  );
  SaveInteger(
    gv_abH,
    gv_abW,
    StringHash("|cff5035fc|r|cff00CD00Rod of Light|r"),
    200
  );
  SaveInteger(
    gv_abH,
    gv_abW,
    StringHash("|cff5070f2|r|cff00CD00Light Gear|r"),
    400
  );
  SaveInteger(
    gv_abH,
    gv_abW,
    StringHash("|cff5125f2|r|cff00CD00Light Equipment|r"),
    700
  );
  SaveInteger(
    gv_abH,
    gv_abW,
    StringHash("|cffA050fa|r|cff8A2BE2Initiate of Apollo|r"),
    350
  );
  SaveInteger(
    gv_abH,
    gv_abW,
    StringHash("|cffA120fa|r|cff8A2BE2Follower of Apollo|r"),
    600
  );
  SaveInteger(
    gv_abH,
    gv_abW,
    StringHash("|cffA100ff|r|cffFFA500Scepter of Thanatos.|r"),
    200
  );
  SaveInteger(
    gv_abH,
    gv_abW,
    StringHash("|cffA100ff|r|cffFFA500Archmages Mantle|r"),
    50
  );
  SaveInteger(
    gv_abH,
    gv_abW,
    StringHash("|cffA100ff|r|cffFFA500Vestment of the Overlord|r"),
    300
  );
  SaveInteger(
    gv_abH,
    gv_abW,
    StringHash("|cffA130ff|r|cffFFA500Hesione's Golden Veil|r"),
    700
  );
  SaveInteger(
    gv_abH,
    gv_abW,
    StringHash("|cffA130ff|r|cffFFA500Archmages Clasp|r"),
    200
  );
  SaveInteger(
    gv_abH,
    gv_abW,
    StringHash("|cffA140f4|r|cffFFA500White Dragonscale Armor|r"),
    300
  );
  SaveInteger(
    gv_abH,
    gv_abW,
    StringHash("|cffA140f4|r|cffFFA500White Dragonscale Ring|r"),
    600
  );
  SaveInteger(
    gv_abH,
    gv_abW,
    StringHash("|cffA130f5|r|cffFFD700Sacred Olympian Sword|r"),
    225
  );
  SaveInteger(
    gv_abH,
    gv_abW,
    StringHash("|cffA140f6|r|cffFFD700Sacred Olympian Helm|r"),
    340
  );
  SaveInteger(
    gv_abH,
    gv_abW,
    StringHash("|cffA145f7|r|cffFFD700Sacred Olympian Armor|r"),
    300
  );
  SaveInteger(
    gv_abH,
    gv_abW,
    StringHash("|cffA150f8|r|cffFFD700Strong Olympian Regalia|r"),
    250
  );
  SaveInteger(
    gv_abH,
    gv_abW,
    StringHash("|cffA150f8|r|cffFFD700Consecrated Olympian Regalia|r"),
    400
  );
  SaveInteger(
    gv_abH,
    gv_abW,
    StringHash("|cffA150f8|r|cffFFD700Blessed Olympian Regalia|r"),
    1300
  );
  SaveInteger(
    gv_abH,
    gv_abW,
    StringHash("|cffA150f8|r|cffFFD700Revered Olympian Regalia|r"),
    0
  );
  SaveInteger(
    gv_abH,
    gv_abW,
    StringHash("|cffA150f8|r|cffFFD700Hallowed Olympian Regalia|r"),
    600
  );
  SaveInteger(
    gv_abH,
    gv_abW,
    StringHash("|cffA150f8|r|cffFFD700Sanctified Olympian Regalia|r"),
    650
  );
  SaveInteger(
    gv_abH,
    gv_abW,
    StringHash("|cffA120f9|r|cffFFA500Helm of the Nemean Lion|r"),
    125
  );
}
function f_aJz(lv_aJA, lv_aJB) {
  var lv_aJC = 0;
  var lv_aJD = false;
  var lv_aJE;
  do {
    if (lv_aJC > 5) {
      break;
    }
    lv_aJE = UnitItemInSlot(gv_ale[lv_aJA], lv_aJC);
    if (lv_aJB == GetItemTypeId(lv_aJE)) {
      lv_aJD = true;
    }
    lv_aJE = UnitItemInSlot(gv_ale[lv_aJA + 8], lv_aJC);
    if (lv_aJB == GetItemTypeId(lv_aJE)) {
      lv_aJD = true;
    }
    lv_aJC = lv_aJC + 1;
  } while (true);
  lv_aJE = null;
  return lv_aJD;
}
function f_aJF(lv_aJG, lv_aJH) {
  var lv_aJI = 0;
  var lv_aJJ = GetUnitX(lv_aJG);
  var lv_aJK = GetUnitY(lv_aJG);
  var lv_aJL;
  var lv_aJM;
  do {
    if (lv_aJI > 8) {
      break;
    }
    lv_aJL = lv_aJJ - GetUnitX(gv_ale[lv_aJI]);
    lv_aJM = lv_aJK - GetUnitY(gv_ale[lv_aJI]);
    if (SquareRoot(lv_aJL * lv_aJL + lv_aJM * lv_aJM) < 1300) {
      if (f_aJz(GetPlayerId(GetOwningPlayer(lv_aJG)), "I06F")) {
        AdjustPlayerStateBJ(
          f_aBh(lv_aJI, lv_aJH * 1.3),
          Player(lv_aJI),
          PLAYER_STATE_RESOURCE_LUMBER
        );
      } else {
        AdjustPlayerStateBJ(
          f_aBl(lv_aJI, lv_aJH),
          Player(lv_aJI),
          PLAYER_STATE_RESOURCE_LUMBER
        );
      }
    }
    lv_aJI = lv_aJI + 1;
  } while (true);
}
function f_aJN(lv_aJO, lv_aJP, lv_aJQ) {
  var lv_aJR = null;
  lv_aJR = MultiboardGetItem(gv_alz, lv_aJQ - 1, 0);
  MultiboardSetItemValue(lv_aJR, lv_aJO);
  MultiboardSetItemStyle(lv_aJR, true, false);
  MultiboardSetItemWidth(lv_aJR, 0.12);
  MultiboardReleaseItem(lv_aJR);
  lv_aJR = MultiboardGetItem(gv_alz, lv_aJQ - 1, 1);
  MultiboardSetItemValue(lv_aJR, lv_aJP);
  MultiboardSetItemStyle(lv_aJR, true, false);
  MultiboardReleaseItem(lv_aJR);
  lv_aJR = null;
}
function f_aJS() {
  var lv_aJT = 1;
  var lv_aJU = 0;
  var lv_aJV;
  var lv_aJW;
  var lv_aJX = 0;
  var lv_aJY = MultiboardGetRowCount(gv_alz);
  do {
    if (lv_aJT > gv_alg.getInt(6999)) {
      break;
    }
    if (
      gv_alg.getInt(lv_aJT + 7000) == 2 ||
      gv_alg.getInt(lv_aJT + 7000) == 3
    ) {
      lv_aJX = lv_aJX + 1;
      if (gv_alg.getInt(lv_aJT + 7500) > 99) {
        lv_aJX = lv_aJX + 1;
      }
    }
    lv_aJT = lv_aJT + 1;
  } while (true);
  if (lv_aJX == 0) {
    lv_aJV = "None right now...";
    lv_aJW = " ";
    lv_aJX = lv_aJX + 1;
    f_aJN(lv_aJV, lv_aJW, lv_aJX);
  }
  if (lv_aJX > lv_aJY) {
    MultiboardSetRowCount(gv_alz, lv_aJX);
  }
  if (lv_aJX < lv_aJY) {
    do {
      if (lv_aJY == lv_aJX) {
        break;
      }
      f_aJN(" ", " ", lv_aJY);
      lv_aJY = lv_aJY - 1;
    } while (true);
  }
  lv_aJT = 1;
  lv_aJX = 0;
  do {
    if (lv_aJT > gv_alg.getInt(6999)) {
      break;
    }
    if (gv_alg.getInt(lv_aJT + 7000) == 3) {
      if (gv_alg.getInt(lv_aJT + 7500) <= 99) {
        lv_aJV = S2S(gv_alf[81] + gv_alf[lv_aJT + 7200]);
        if (gv_alg.getInt(lv_aJT + 7500) == 1 && gv_alf[lv_aJT + 7100] == "k") {
          lv_aJW = S2S(gv_alf[77] + "Dead");
        } else {
          lv_aJW =
            gv_alf[77] +
            (I2S(gv_alg.getInt(lv_aJT + 7400)) +
              ("/" + I2S(gv_alg.getInt(lv_aJT + 7500))));
        }
        if (gv_alf[lv_aJT + 7100] == "t") {
          lv_aJW = S2S(gv_alf[77] + "Done");
        }
      } else {
        lv_aJU = 0;
        do {
          if (lv_aJU > StringLength(gv_alf[lv_aJT + 7200])) {
            break;
          }
          if (SubString(gv_alf[lv_aJT + 7200], lv_aJU, lv_aJU + 1) == ",") {
            break;
          }
          lv_aJU = lv_aJU + 1;
        } while (true);
        lv_aJV = gv_alf[81] + SubString(gv_alf[lv_aJT + 7200], 0, lv_aJU);
        lv_aJW =
          gv_alf[77] +
          (I2S(
            gv_alg.getInt(lv_aJT + 7400) -
              R2I(gv_alg.getInt(lv_aJT + 7400) / 100) * 100
          ) +
            ("/" +
              I2S(
                gv_alg.getInt(lv_aJT + 7500) -
                  R2I(gv_alg.getInt(lv_aJT + 7500) / 100) * 100
              )));
        lv_aJX = lv_aJX + 1;
        f_aJN(lv_aJV, lv_aJW, lv_aJX);
        lv_aJV =
          gv_alf[81] +
          SubString(
            gv_alf[lv_aJT + 7200],
            lv_aJU + 1,
            StringLength(gv_alf[lv_aJT + 7200])
          );
        lv_aJW =
          gv_alf[77] +
          (I2S(R2I(gv_alg.getInt(lv_aJT + 7400) / 100)) +
            ("/" + I2S(R2I(gv_alg.getInt(lv_aJT + 7500) / 100))));
      }
      lv_aJX = lv_aJX + 1;
      f_aJN(lv_aJV, lv_aJW, lv_aJX);
    }
    lv_aJT = lv_aJT + 1;
  } while (true);
  lv_aJT = 1;
  do {
    if (lv_aJT > gv_alg.getInt(6999)) {
      break;
    }
    if (gv_alg.getInt(lv_aJT + 7000) == 2) {
      if (gv_alg.getInt(lv_aJT + 7500) <= 99) {
        lv_aJV = gv_alf[lv_aJT + 7200];
        if (lv_aJT < 11) {
          lv_aJV = S2S(gv_alf[75] + gv_alf[lv_aJT + 7200]) + "|r";
        }
        if (SubString(gv_alf[lv_aJT + 7000], 0, 1) == "*") {
          lv_aJV = S2S(gv_alf[78] + gv_alf[lv_aJT + 7200]) + "|r";
        }
        if (gv_alg.getInt(lv_aJT + 7500) == 1 && gv_alf[lv_aJT + 7100] == "k") {
          lv_aJW = S2S(gv_alf[74] + "Alive");
        } else {
          lv_aJW =
            I2S(gv_alg.getInt(lv_aJT + 7400)) +
            "/" +
            I2S(gv_alg.getInt(lv_aJT + 7500));
        }
        if (gv_alf[lv_aJT + 7100] == "t") {
          lv_aJW = "Open";
        }
      } else {
        lv_aJU = 0;
        do {
          if (lv_aJU > StringLength(gv_alf[lv_aJT + 7200])) {
            break;
          }
          if (SubString(gv_alf[lv_aJT + 7200], lv_aJU, lv_aJU + 1) == ",") {
            break;
          }
          lv_aJU = lv_aJU + 1;
        } while (true);
        lv_aJV = SubString(gv_alf[lv_aJT + 7200], 0, lv_aJU);
        lv_aJW =
          I2S(
            gv_alg.getInt(lv_aJT + 7400) -
              R2I(gv_alg.getInt(lv_aJT + 7400) / 100) * 100
          ) +
          "/" +
          I2S(
            gv_alg.getInt(lv_aJT + 7500) -
              R2I(gv_alg.getInt(lv_aJT + 7500) / 100) * 100
          );
        lv_aJX = lv_aJX + 1;
        f_aJN(lv_aJV, lv_aJW, lv_aJX);
        lv_aJV = SubString(
          gv_alf[lv_aJT + 7200],
          lv_aJU + 1,
          StringLength(gv_alf[lv_aJT + 7200])
        );
        lv_aJW =
          I2S(R2I(gv_alg.getInt(lv_aJT + 7400) / 100)) +
          "/" +
          I2S(R2I(gv_alg.getInt(lv_aJT + 7500) / 100));
      }
      lv_aJX = lv_aJX + 1;
      f_aJN(lv_aJV, lv_aJW, lv_aJX);
    }
    lv_aJT = lv_aJT + 1;
  } while (true);
}
function f_aJZ(lv_aKa) {
  if (gv_alg.getInt(lv_aKa + 7000) == 0) {
    gv_alg[lv_aKa + 7000] = 1;
    DestroyEffect(gv_alh[lv_aKa + 7000]);
    gv_alh[lv_aKa + 7000] = AddSpecialEffectTarget(
      "Abilities\\Spells\\Other\\TalkToMe\\TalkToMe.mdl",
      gv_ale[lv_aKa + 7000],
      "overhead"
    );
  }
}
function f_aKb(lv_aKc, lv_aKd) {
  var lv_aKe;
  var lv_aKf;
  var lv_aKg = 0;
  if (gv_alg.getInt(lv_aKc + 7600) > GetHeroLevel(gv_ale[lv_aKd])) {
    if (GetLocalPlayer() == Player(lv_aKd)) {
      DisplayTimedTextToPlayer(
        Player(lv_aKd),
        0,
        0,
        20,
        gv_alf[75] +
          GetUnitName(gv_ale[lv_aKc + 7000]) +
          "|r - I have a quest for you when you are level: " +
          gv_alf[74] +
          I2S(gv_alg.getInt(lv_aKc + 7600))
      );
    }
    return;
  }
  gv_alg[lv_aKc + 7000] = 2;
  gv_alk[lv_aKc] = CreateQuestBJ(
    0,
    gv_alf[lv_aKc + 7000],
    gv_alf[75] +
      (GetUnitName(gv_ale[lv_aKc + 7000]) +
        S2S("|r - " + gv_alf[lv_aKc + 7300])),
    gv_alf[lv_aKc + 7400]
  );
  if (gv_alf[lv_aKc + 7100] == "k") {
    if (gv_alg.getInt(lv_aKc + 7500) <= 99) {
      if (gv_alg.getInt(lv_aKc + 7500) == 1) {
        lv_aKe = S2S(gv_alf[77] + "Defeat ") + gv_alf[lv_aKc + 7200];
      } else {
        lv_aKe =
          S2S(gv_alf[77] + "Kill ") +
          (I2S(gv_alg.getInt(lv_aKc + 7500)) +
            S2S(" " + gv_alf[lv_aKc + 7200]));
      }
    } else {
      do {
        if (lv_aKg > StringLength(gv_alf[lv_aKc + 7200])) {
          break;
        }
        if (SubString(gv_alf[lv_aKc + 7200], lv_aKg, lv_aKg + 1) == ",") {
          break;
        }
        lv_aKg = lv_aKg + 1;
      } while (true);
      lv_aKe =
        S2S(gv_alf[77] + "Kill ") +
        (I2S(
          gv_alg.getInt(lv_aKc + 7500) -
            R2I(gv_alg.getInt(lv_aKc + 7500) / 100) * 100
        ) +
          (" " + SubString(gv_alf[lv_aKc + 7200], 0, lv_aKg)));
      lv_aKe =
        S2S(lv_aKe + " and Destroy ") +
        (I2S(R2I(gv_alg.getInt(lv_aKc + 7500) / 100)) +
          (" " +
            SubString(
              gv_alf[lv_aKc + 7200],
              lv_aKg + 1,
              StringLength(gv_alf[lv_aKc + 7200])
            )));
    }
  }
  if (gv_alf[lv_aKc + 7100] == "c") {
    lv_aKe =
      S2S(gv_alf[77] + "Collect ") +
      (I2S(gv_alg.getInt(lv_aKc + 7500)) + S2S(" " + gv_alf[lv_aKc + 7200]));
  }
  if (gv_alf[lv_aKc + 7100] == "t") {
    lv_aKe = gv_alf[lv_aKc + 7200];
  }
  CreateQuestItemBJ(gv_alk[lv_aKc], lv_aKe);
  lv_aKf =
    S2S(gv_alf[79] + "Level: ") + I2S(gv_alg.getInt(lv_aKc + 7600)) + "|r ";
  lv_aKf =
    S2S(lv_aKf + "for ") +
    gv_alf[74] +
    I2S(gv_alg.getInt(lv_aKc + 7100)) +
    "|r Experience, ";
  lv_aKf =
    S2S(lv_aKf + gv_alf[81]) + I2S(gv_alg.getInt(lv_aKc + 7200)) + "|r Gold, ";
  lv_aKf =
    S2S(lv_aKf + "and ") +
    gv_alf[75] +
    I2S(gv_alg.getInt(lv_aKc + 7300)) +
    "|r Honor.";
  CreateQuestItemBJ(gv_alk[lv_aKc], lv_aKf);
  QuestSetDiscovered(gv_alk[lv_aKc], true);
  FlashQuestDialogButton();
  lv_aKg = 0;
  do {
    if (lv_aKg > 7) {
      break;
    }
    if (
      gv_alg.getInt(250 + lv_aKg) == 1 &&
      GetLocalPlayer() == Player(lv_aKg)
    ) {
      DisplayTimedTextToPlayer(
        Player(lv_aKg),
        0,
        0,
        20,
        S2S("\n" + gv_alf[82]) + gv_alf[lv_aKc + 7300]
      );
    }
    lv_aKg = lv_aKg + 1;
  } while (true);
  DisplayTimedTextToForce(
    gv_alq,
    20,
    S2S("\n" + "Quest Added: ") + gv_alf[64] + gv_alf[lv_aKc + 7000]
  );
  DisplayTimedTextToForce(
    gv_alq,
    20,
    gv_alf[75] + (GetUnitName(gv_ale[lv_aKc + 7000]) + S2S("|r - " + lv_aKe))
  );
  DestroyEffect(gv_alh[lv_aKc + 7000]);
  f_aJS();
}
function f_aKh(lv_aKi) {
  if (gv_alg.getInt(lv_aKi + 7000) < 2 && gv_alg.getInt(lv_aKi + 7500) == 1) {
    gv_alg[lv_aKi + 7400] = gv_alg.getInt(lv_aKi + 7400) + 1;
  }
  if (gv_alg.getInt(lv_aKi + 7000) == 2) {
    gv_alg[lv_aKi + 7400] = gv_alg.getInt(lv_aKi + 7400) + 1;
    if (gv_alg.getInt(lv_aKi + 7500) > 99) {
      if (
        gv_alg.getInt(lv_aKi + 7400) -
          R2I(gv_alg.getInt(lv_aKi + 7400) / 100) * 100 >
        gv_alg.getInt(lv_aKi + 7500) -
          R2I(gv_alg.getInt(lv_aKi + 7500) / 100) * 100
      ) {
        gv_alg[lv_aKi + 7400] = gv_alg.getInt(lv_aKi + 7400) - 1;
      }
    }
    if (gv_alg.getInt(lv_aKi + 7400) > gv_alg.getInt(lv_aKi + 7500)) {
      gv_alg[lv_aKi + 7400] = gv_alg.getInt(lv_aKi + 7500);
    }
    if (gv_alg.getInt(lv_aKi + 7400) == gv_alg.getInt(lv_aKi + 7500)) {
      gv_alg[lv_aKi + 7000] = 3;
      QuestSetDescription(
        gv_alk[lv_aKi],
        S2S("For your reward return to: " + gv_alf[75]) +
          GetUnitName(gv_ale[lv_aKi + 7000])
      );
      QuestSetCompleted(gv_alk[lv_aKi], true);
      DestroyEffect(gv_alh[lv_aKi + 7000]);
      gv_alh[lv_aKi + 7000] = AddSpecialEffectTarget(
        "Abilities\\Spells\\Other\\TalkToMe\\TalkToMe.mdl",
        gv_ale[lv_aKi + 7000],
        "overhead"
      );
    }
    f_aJS();
  }
}
function f_aKj(lv_aKk) {
  var lv_aKl = 0;
  var lv_aKm = 0;
  var lv_aKn = 1;
  var lv_aKo;
  DestroyQuest(gv_alk[lv_aKk]);
  DestroyEffect(gv_alh[lv_aKk + 7000]);
  gv_alg[lv_aKk + 7000] = 4;
  if (lv_aKk == 10 && GetWidgetLife(gv_akN) > 1) {
    gv_alg[10 + 7300] = 25;
    DisplayTimedTextToPlayer(
      GetLocalPlayer(),
      0,
      0,
      5,
      "Extra honor for keeping Persephone alive in the Hades fight"
    );
  } else {
    gv_alg[10 + 7300] = 15;
  }
  do {
    if (lv_aKl > 7) {
      break;
    }
    lv_aKm = 1;
    if (GetPlayerSlotState(Player(lv_aKl)) != PLAYER_SLOT_STATE_PLAYING) {
      lv_aKm = 0;
    }
    if (GetHeroLevel(gv_ale[lv_aKl]) < gv_alg.getInt(lv_aKk + 7600) - 5) {
      lv_aKm = 0;
    }
    if (
      gv_alg.getInt(lv_aKk + 7600) < 56 &&
      GetHeroLevel(gv_ale[lv_aKl]) > gv_alg.getInt(lv_aKk + 7600) + 30
    ) {
      lv_aKm = 0;
    }
    if (lv_aKm == 1) {
      if (IsUnitType(gv_ale[lv_aKl], UNIT_TYPE_DEAD) == false) {
        AddHeroXP(gv_ale[lv_aKl], gv_alg.getInt(lv_aKk + 7100), true);
      }
      AdjustPlayerStateBJ(
        R2I(f_azm(gv_ale[lv_aKl]) * gv_alg.getInt(lv_aKk + 7200)),
        Player(lv_aKl),
        PLAYER_STATE_RESOURCE_GOLD
      );
      if (f_aJz(lv_aKl, "I06F")) {
        AdjustPlayerStateBJ(
          f_aBh(lv_aKl, gv_alg.getInt(lv_aKk + 7300) * 1.3),
          Player(lv_aKl),
          PLAYER_STATE_RESOURCE_LUMBER
        );
      } else {
        AdjustPlayerStateBJ(
          f_aBl(lv_aKl, gv_alg.getInt(lv_aKk + 7300)),
          Player(lv_aKl),
          PLAYER_STATE_RESOURCE_LUMBER
        );
      }
    }
    lv_aKl = lv_aKl + 1;
  } while (true);
  if (gv_alg.getInt(7000) > 0) {
    if (gv_alg.getInt(7000) > 7) {
      QuestItemSetDescription(
        gv_alF,
        S2S(gv_alf[77] + "Defeated:|r All 8 Titans.")
      );
      QuestItemSetCompleted(gv_alF, true);
    } else {
      QuestItemSetDescription(
        gv_alF,
        S2S(gv_alf[77] + "Defeated:|r ") +
          I2S(gv_alg.getInt(7000)) +
          " of 8 Titans."
      );
    }
  }
  if (gv_alg.getInt(7000) == 9) {
    QuestItemSetDescription(
      gv_alG,
      S2S(gv_alf[77] + "Defeated:|r The Queen of the Underworld.")
    );
    QuestItemSetCompleted(gv_alG, true);
  }
  if (gv_alg.getInt(7000) == 10) {
    QuestItemSetDescription(
      gv_alH,
      S2S(gv_alf[77] + "Defeated:|r The Lord of Hell.")
    );
    QuestItemSetCompleted(gv_alH, true);
  }
  lv_aKo = "";
  do {
    if (lv_aKn > 99) {
      break;
    }
    if (gv_alg.getInt(lv_aKn + 7000) == 4) {
      lv_aKo = S2S(lv_aKo + gv_alf[lv_aKn + 7000]) + "\n";
    }
    lv_aKn = lv_aKn + 1;
  } while (true);
  QuestSetDescription(gv_alk[0], lv_aKo);
  if (SubString(gv_alf[lv_aKk + 7000], 0, 1) == "*") {
    gv_alg[lv_aKk + 7500] = gv_alg.getInt(lv_aKk + 7500) + GetRandomInt(2, 5);
    if (gv_alg.getInt(lv_aKk + 7500) > 50) {
      gv_alg[lv_aKk + 7500] = 50;
    }
    gv_alg[lv_aKk + 7000] = 0;
    gv_alg[lv_aKk + 7400] = 0;
    f_aJZ(lv_aKk);
  }
  f_aJS();
}
function f_aKp(lv_aKq) {
  var lv_aKr = 0;
  var lv_aKs = 10;
  do {
    if (lv_aKr > 7) {
      break;
    }
    if (IsUnitSelected(lv_aKq, Player(lv_aKr))) {
      lv_aKs = lv_aKr;
      lv_aKr = 10;
    }
    lv_aKr = lv_aKr + 1;
  } while (true);
  return lv_aKs;
}
function f_aKt(lv_aKu, lv_aKv) {
  var lv_aKw = GetUnitLoc(lv_aKu);
  var lv_aKx = GetUnitLoc(gv_ale[lv_aKv]);
  var lv_aKy = false;
  if (DistanceBetweenPoints(lv_aKw, lv_aKx) < 501) {
    lv_aKy = true;
  }
  RemoveLocation(lv_aKw);
  lv_aKw = null;
  RemoveLocation(lv_aKx);
  lv_aKx = null;
  return lv_aKy;
}
function f_aKz(lv_aKA) {
  if (lv_aKA > 3) {
    return GetRandomInt(lv_aKA - 3, lv_aKA + 5);
  } else {
    return lv_aKA;
  }
}
function f_aKB() {
  ForceAddPlayer(gv_abZ, GetEnumPlayer());
}
function f_aKC() {
  var lv_aKD = gv_acb - 1;
  var lv_aKE;
  do {
    if (lv_aKD < 0) {
      break;
    }
    lv_aKE = gv_aca.getInt(lv_aKD);
    gv_aoP[lv_aKE] = GetUnitX(gv_aoW[lv_aKE]);
    gv_aoQ[lv_aKE] = GetUnitY(gv_aoW[lv_aKE]);
    SetTextTagPos(
      gv_aoM[lv_aKE],
      gv_aoP[lv_aKE] + gv_aoX[lv_aKE],
      gv_aoQ[lv_aKE] + gv_aoY[lv_aKE],
      gv_aoR[lv_aKE]
    );
    lv_aKD = lv_aKD - 1;
  } while (true);
}
function f_aKF(lv_aKG, lv_aKH) {
  var lv_aKI;
  var lv_aKJ = 0;
  if (lv_aKH > 100) {
    lv_aKH = 100;
  } else {
    if (lv_aKH < 0.0) {
      lv_aKH = 0.0;
    }
  }
  gv_aoZ[lv_aKG] = lv_aKH / 100;
  gv_aoS[lv_aKG] = gv_aoO[lv_aKG];
  lv_aKI =
    (R2I(
      gv_aoZ[lv_aKG] * gv_apa.getInt(lv_aKG) * StringLength(gv_apb[lv_aKG]) +
        0.5
    ) /
      StringLength(gv_apb[lv_aKG])) *
    StringLength(gv_apb[lv_aKG]);
  gv_aoS[lv_aKG] = gv_aoS[lv_aKG] + SubString(gv_apc[lv_aKG], 0, lv_aKI);
  gv_aoS[lv_aKG] = S2S(gv_aoS[lv_aKG] + "|r");
  gv_aoS[lv_aKG] =
    gv_aoS[lv_aKG] +
    SubString(gv_apc[lv_aKG], 0, StringLength(gv_apc[lv_aKG]) - lv_aKI);
  if (gv_aoM[lv_aKG] != null) {
    SetTextTagText(gv_aoM[lv_aKG], gv_aoS[lv_aKG], gv_aoT[lv_aKG]);
  }
}
function f_aKK(lv_aKL, lv_aKM) {
  gv_aoR[lv_aKL] = lv_aKM;
  if (gv_aoM[lv_aKL] != null) {
    SetTextTagPos(
      gv_aoM[lv_aKL],
      gv_aoP[lv_aKL],
      gv_aoQ[lv_aKL],
      gv_aoR[lv_aKL]
    );
  }
}
function f_aKN(lv_aKO) {
  var lv_aKP = 0;
  gv_apc[lv_aKO] = "";
  do {
    if (lv_aKP >= gv_apa.getInt(lv_aKO)) {
      break;
    }
    gv_apc[lv_aKO] = S2S(gv_apc[lv_aKO] + gv_apb[lv_aKO]);
    lv_aKP = lv_aKP + 1;
  } while (true);
}
function f_aKQ(lv_aKR, lv_aKS) {
  gv_aoN[lv_aKR] = lv_aKS;
  if (gv_aoM[lv_aKR] != null) {
    SetTextTagColor(
      gv_aoM[lv_aKR],
      f_aHW(gv_aoN.getInt(lv_aKR)),
      f_aHZ(gv_aoN.getInt(lv_aKR)),
      f_aIc(gv_aoN.getInt(lv_aKR)),
      f_aHU(gv_aoN.getInt(lv_aKR))
    );
  }
}
function f_aKT(lv_aKU, lv_aKV) {
  gv_aoO[lv_aKU] = SubString(f_aIf(lv_aKV, ""), 0, 10);
  f_aKF(lv_aKU, gv_aoZ[lv_aKU] * 100);
}
function f_aKW(lv_aKX, lv_aKY, lv_aKZ, lv_aLa, lv_aLb) {
  if (!gv_aoV[lv_aKX]) {
    gv_aca[gv_acb] = lv_aKX;
    gv_aoW[lv_aKX] = lv_aKY;
    gv_aoV[lv_aKX] = true;
    gv_aoU[lv_aKX] = gv_acb;
    gv_aoX[lv_aKX] = lv_aKZ;
    gv_aoY[lv_aKX] = lv_aLa;
    f_aKK(lv_aKX, lv_aLb);
    if (gv_acb == 0) {
      TimerStart(gv_acc, dv, true, f_aKC);
    }
    gv_acb = gv_acb + 1;
  }
}
function f_aLc(lv_aLd) {
  var lv_aLe = 0;
  if (!gv_aoV[lv_aLd]) {
    return;
  }
  gv_acb = gv_acb - 1;
  if (gv_acb == 0) {
    PauseTimer(gv_acc);
  }
  gv_aca[gv_aoU.getInt(lv_aLd)] = gv_aca.getInt(gv_acb);
  gv_aoU[gv_aca.getInt(gv_acb)] = gv_aoU.getInt(lv_aLd);
  gv_aoV[lv_aLd] = false;
}
function f_aLf(lv_aLg, lv_aLh, lv_aLi, lv_aLj, lv_aLk, lv_aLl) {
  var lv_aLm = f_aGz();
  gv_aoM[lv_aLm] = CreateTextTag();
  gv_aoN[lv_aLm] = Cv;
  gv_aoP[lv_aLm] = lv_aLj;
  gv_aoQ[lv_aLm] = lv_aLk;
  gv_aoR[lv_aLm] = lv_aLl;
  gv_aoT[lv_aLm] = TextTagSize2Height(lv_aLi);
  gv_aoO[lv_aLm] = SubString(f_aIf(Dv, ""), 0, 10);
  gv_apa[lv_aLm] = lv_aLh;
  if (lv_aLg == "|") {
    gv_apb[lv_aLm] = "||";
  } else {
    gv_apb[lv_aLm] = lv_aLg;
  }
  gv_aoV[lv_aLm] = false;
  f_aKF(lv_aLm, 0);
  if (gv_aoM[lv_aLm] != null) {
    SetTextTagPos(
      gv_aoM[lv_aLm],
      gv_aoP[lv_aLm],
      gv_aoQ[lv_aLm],
      gv_aoR[lv_aLm]
    );
    SetTextTagColor(
      gv_aoM[lv_aLm],
      f_aHW(gv_aoN.getInt(lv_aLm)),
      f_aHZ(gv_aoN.getInt(lv_aLm)),
      f_aIc(gv_aoN.getInt(lv_aLm)),
      f_aHU(gv_aoN.getInt(lv_aLm))
    );
    SetTextTagText(gv_aoM[lv_aLm], gv_aoS[lv_aLm], gv_aoT[lv_aLm]);
  }
  f_aKN(lv_aLm);
  return lv_aLm;
}
function f_aLn(lv_aLo) {
  if (gv_aoM[lv_aLo] != null) {
    DestroyTextTag(gv_aoM[lv_aLo]);
    gv_aoM[lv_aLo] = null;
  }
  if (gv_aoV[lv_aLo]) {
    f_aLc(lv_aLo);
    gv_aoW[lv_aLo] = null;
  }
}
function f_aLp(lv_aLq) {
  if (lv_aLq == null) {
    return;
  } else {
    if (gv_aoL.getInt(lv_aLq) != -1) {
      return;
    }
  }
  f_aLn(lv_aLq);
  gv_aoL[lv_aLq] = gv_aoJ;
  gv_aoJ = lv_aLq;
}
function f_aLr() {
  var lv_aLs = LoadInteger(gv_abL, 0, GetHandleId(GetExpiredTimer()));
  gv_aoM[lv_aLs] = null;
  f_aLp(lv_aLs);
  f_aIM(GetExpiredTimer());
}
function f_aLt(lv_aLu) {
  var lv_aLv = f_aGO();
  gv_apn[lv_aLv] = f_aIL();
  gv_apm[lv_aLv] = lv_aLu;
  SaveInteger(gv_abL, 0, GetHandleId(gv_apn[lv_aLv]), lv_aLv);
  return lv_aLv;
}
function f_aLw(lv_aLx) {
  DestroyEffect(gv_apm[lv_aLx]);
  f_aIM(gv_apn[lv_aLx]);
  f_aGQ(lv_aLx);
}
function f_aLy() {
  f_aLw(LoadInteger(gv_abL, 0, GetHandleId(GetExpiredTimer())));
}
function f_aLz(lv_aLA, lv_aLB) {
  var lv_aLC = f_aLt(lv_aLA);
  TimerStart(gv_apn[lv_aLC], lv_aLB, false, f_aLy);
  return lv_aLC;
}
function f_aLD(lv_aLE) {}
function f_aLF() {
  RemoveUnit(gv_acd);
  gv_acd = null;
  f_aIM(GetExpiredTimer());
}
function f_aLG() {}
function f_aLH() {
  var lv_aLI = 0;
  var lv_aLJ = 0;
  do {
    if (lv_aLI > 7) {
      break;
    }
    if (
      GetPlayerSlotState(Player(lv_aLI)) == PLAYER_SLOT_STATE_PLAYING &&
      GetPlayerController(Player(lv_aLI)) == MAP_CONTROL_USER
    ) {
      lv_aLJ = lv_aLJ + 1;
    }
    lv_aLI = lv_aLI + 1;
  } while (true);
  return lv_aLJ;
}
function f_aLK(lv_aLL) {
  return (
    (GetUnitAbilityLevel(lv_aLL, "Adda") > 0 ||
      GetUnitAbilityLevel(lv_aLL, "A06T") > 0 ||
      GetUnitAbilityLevel(lv_aLL, "Aloc") > 0) &&
    (IsUnitType(lv_aLL, UNIT_TYPE_STRUCTURE) ||
      IsUnitType(lv_aLL, UNIT_TYPE_MECHANICAL) ||
      IsUnitType(lv_aLL, UNIT_TYPE_ANCIENT))
  );
}
function f_aLM() {
  return (
    (IsUnitType(GetFilterUnit(), UNIT_TYPE_MAGIC_IMMUNE) == false &&
      IsUnitType(GetFilterUnit(), UNIT_TYPE_ANCIENT) == false &&
      IsUnitType(GetFilterUnit(), UNIT_TYPE_STRUCTURE) == false &&
      IsUnitInRangeXY(GetFilterUnit(), gv_ach, gv_aci, gv_acj) &&
      GetWidgetLife(GetFilterUnit()) > 0.405 &&
      IsUnitEnemy(GetFilterUnit(), gv_acg)) != null
  );
}
function f_aLN() {
  return (
    (IsUnitType(GetFilterUnit(), UNIT_TYPE_ANCIENT) == false &&
      IsUnitType(GetFilterUnit(), UNIT_TYPE_STRUCTURE) == false &&
      IsUnitInRangeXY(GetFilterUnit(), gv_ach, gv_aci, gv_acj) &&
      GetWidgetLife(GetFilterUnit()) > 0.405 &&
      IsUnitAlly(GetFilterUnit(), gv_acg)) != null
  );
}
function f_aLO(lv_aLP, lv_aLQ) {
  lv_aLQ = S2S("\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n|cffffcc00" + lv_aLQ) + "|r";
  if (GetLocalPlayer() == lv_aLP) {
    ClearTextMessages();
    DisplayTimedTextToPlayer(lv_aLP, 0.52, 0.96, 3, lv_aLQ);
    StartSound(gv_ace);
  }
}
function f_aLR(
  lv_aLS,
  lv_aLT,
  lv_aLU,
  lv_aLV,
  lv_aLW,
  lv_aLX,
  lv_aLY,
  lv_aLZ,
  lv_aMa,
  lv_aMb,
  lv_aMc
) {
  var lv_aMd = CreateTextTag();
  lv_aMc = (lv_aMc * 0.024) / 10;
  SetTextTagText(lv_aMd, lv_aLT, lv_aMc);
  SetTextTagPos(lv_aMd, lv_aLX, lv_aLY, 0.0);
  SetTextTagColor(lv_aMd, lv_aLU, lv_aLV, lv_aLW, 255);
  SetTextTagVelocity(lv_aMd, 0, lv_aLZ);
  if (lv_aLS != null) {
    SetTextTagVisibility(lv_aMd, GetLocalPlayer() == lv_aLS);
  }
  SetTextTagFadepoint(lv_aMd, lv_aMa);
  SetTextTagLifespan(lv_aMd, lv_aMb);
  SetTextTagPermanent(lv_aMd, false);
  lv_aMd = null;
}
function f_aMe(lv_aMf, lv_aMg, lv_aMh, lv_aMi) {
  var lv_aMj = lv_aMh - lv_aMf;
  var lv_aMk = lv_aMi - lv_aMg;
  return SquareRoot(lv_aMj * lv_aMj + lv_aMk * lv_aMk);
}
function f_aMl() {
  var lv_aMm = LoadInteger(gv_abL, 0, GetHandleId(GetExpiredTimer()));
  GroupRemoveUnit(gv_aln, gv_ale[lv_aMm]);
  f_aIM(GetExpiredTimer());
}
function f_aMn(lv_aMo) {
  if (lv_aMo < 0.0) {
    return R2I(lv_aMo - 0.5);
  }
  return R2I(lv_aMo + 0.5);
}
function f_aMp(lv_aMq) {
  var lv_aMr;
  var lv_aMs = 0;
  do {
    if (lv_aMs > 13) {
      break;
    }
    lv_aMr = Player(lv_aMs);
    SetPlayerAbilityAvailable(lv_aMr, lv_aMq, false);
    lv_aMs = lv_aMs + 1;
  } while (true);
  lv_aMr = null;
}
function f_aMt(lv_aMu) {
  var lv_aMv;
  var lv_aMw = 0;
  do {
    if (lv_aMw > 13) {
      break;
    }
    lv_aMv = Player(lv_aMw);
    SetPlayerAbilityAvailable(lv_aMv, lv_aMu, true);
    lv_aMw = lv_aMw + 1;
  } while (true);
  lv_aMv = null;
}
function f_aMx(lv_aMy) {
  if (GetUnitAbilityLevel(lv_aMy, "A042") > 0) {
    return true;
  } else {
    if (GetUnitAbilityLevel(lv_aMy, "A040") > 0) {
      return true;
    } else {
      if (GetUnitAbilityLevel(lv_aMy, "A046") > 0) {
        return true;
      } else {
        if (GetUnitAbilityLevel(lv_aMy, "A03V") > 0) {
          return true;
        } else {
          if (GetUnitAbilityLevel(lv_aMy, "A05A") > 0) {
            return true;
          } else {
            if (GetUnitAbilityLevel(lv_aMy, "A05I") > 0) {
              return true;
            } else {
              if (GetUnitAbilityLevel(lv_aMy, "A066") > 0) {
                return true;
              } else {
                if (GetUnitAbilityLevel(lv_aMy, "A06G") > 0) {
                  return true;
                } else {
                  if (GetUnitAbilityLevel(lv_aMy, "A06K") > 0) {
                    return true;
                  } else {
                    if (GetUnitAbilityLevel(lv_aMy, "A071") > 0) {
                      return true;
                    } else {
                      if (GetUnitAbilityLevel(lv_aMy, "A056") > 0) {
                        return true;
                      } else {
                        if (GetUnitAbilityLevel(lv_aMy, "A07D") > 0) {
                          return true;
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }
  return false;
}
function f_aMz(lv_aMA) {
  if (GetUnitTypeId(lv_aMA) == "Emoo") {
    UnitAddAbility(lv_aMA, "A03V");
  } else {
    if (GetUnitTypeId(lv_aMA) == "Hant") {
      UnitAddAbility(lv_aMA, "A040");
    } else {
      if (GetUnitTypeId(lv_aMA) == "Udea") {
        UnitAddAbility(lv_aMA, "A042");
      } else {
        if (GetUnitTypeId(lv_aMA) == "Hjai") {
          UnitAddAbility(lv_aMA, "A046");
        } else {
          if (GetUnitTypeId(lv_aMA) == "Oshd") {
            UnitAddAbility(lv_aMA, "A05A");
          } else {
            if (GetUnitTypeId(lv_aMA) == "Hamg") {
              UnitAddAbility(lv_aMA, "A05I");
            } else {
              if (GetUnitTypeId(lv_aMA) == "Ulic") {
                UnitAddAbility(lv_aMA, "A066");
              } else {
                if (GetUnitTypeId(lv_aMA) == "Ekee") {
                  UnitAddAbility(lv_aMA, "A06G");
                } else {
                  if (GetUnitTypeId(lv_aMA) == "Hblm") {
                    UnitAddAbility(lv_aMA, "A06K");
                  } else {
                    if (GetUnitTypeId(lv_aMA) == "Hpal") {
                      UnitAddAbility(lv_aMA, "A071");
                    } else {
                      if (GetUnitTypeId(lv_aMA) == "Edem") {
                        UnitAddAbility(lv_aMA, "A056");
                      } else {
                        if (GetUnitTypeId(lv_aMA) == "Udre") {
                          UnitAddAbility(lv_aMA, "A07D");
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }
}
function f_aMB() {
  var lv_aMC = GetEnumUnit();
  UnitRemoveAbility(lv_aMC, "Aatk");
  UnitRemoveAbility(lv_aMC, "Amov");
  UnitAddAbility(lv_aMC, "A000");
  UnitModifySkillPoints(lv_aMC, -1);
  f_aMz(lv_aMC);
  lv_aMC = null;
}
function f_aMD() {
  Preload(
    "Objects\\Spawnmodels\\Undead\\ImpaleTargetDust\\ImpaleTargetDust.mdl"
  );
  Preload("Abilities\\Spells\\Other\\Stampede\\StampedeMissileDeath.mdl");
  Preload("Objects\\Spawnmodels\\Orc\\Orcblood\\BattrollBlood.mdl");
  Preload("Abilities\\Spells\\Orc\\EarthQuake\\EarthQuakeTarget.mdl");
  Preload("Abilities\\Spells\\NightElf\\Starfall\\StarfallCaster.mdl");
  Preload("Abilities\\Spells\\NightElf\\Starfall\\StarfallTarget.mdl");
  Preload("Abilities\\Spells\\Items\\HealingSalve\\HealingSalveTarget.mdl");
  Preload("Objects\\Spawnmodels\\Human\\HCancelDeath\\HCancelDeath.mdl");
  Preload("Abilities\\Spells\\Other\\SoulBurn\\SoulBurnbuff.mdl");
  Preload("MDX\\HolyBlessing.mdx");
  Preload("Abilities\\Spells\\Human\\Resurrect\\ResurrectCaster.mdl");
  Preload("Abilities\\Weapons\\Bolt\\BoltImpact.mdl");
  Preload("MDX\\LightningWrath.mdx");
  Preload("Abilities\\Spells\\Human\\Feedback\\SpellBreakerAttack.mdl");
  Preload("Abilities\\Spells\\Orc\\WarStomp\\WarStompCaster.mdl");
  Preload(
    "Abilities\\Weapons\\DemolisherFireMissile\\DemolisherFireMissile.mdl"
  );
  Preload("MDX\\MagmaBurst.mdx");
  Preload("Environment\\SmallBuildingFire\\SmallBuildingFire2.mdl");
  Preload("MDX\\MeteorAttack.mdx");
  Preload("Abilities\\Spells\\Other\\Incinerate\\FireLordDeathExplode.mdl");
  Preload("MDX\\WaterMagic.mdx");
  Preload("Abilities\\Spells\\Items\\ResourceItems\\ResourceEffectTarget.mdl");
  Preload(
    "Abilities\\Spells\\Items\\StaffOfSanctuary\\Staff_Sanctuary_Target.mdl"
  );
  Preload("Abilities\\Spells\\Orc\\Voodoo\\VoodooAuraTarget.mdl");
  Preload("MDX\\FreezingRing.mdx");
  Preload("Abilities\\Spells\\Human\\Feedback\\ArcaneTowerAttack.mdl");
  Preload("Abilities\\Spells\\Undead\\FrostNova\\FrostNovaTarget.mdl");
  Preload("MDX\\SnowyBlizzardTarget.mdx");
  Preload("Abilities\\Spells\\Undead\\AnimateDead\\AnimateDeadTarget.mdl");
}
function f_aME() {
  var lv_aMF = GetExpiredTimer();
  var lv_aMG = LoadInteger(gv_abL, 0, GetHandleId(lv_aMF));
  var lv_aMH = Atan2(
    gv_aps[lv_aMG] - GetUnitY(gv_apu[lv_aMG]),
    gv_apr[lv_aMG] - GetUnitX(gv_apu[lv_aMG])
  );
  SetUnitX(
    gv_apu[lv_aMG],
    GetUnitX(gv_apu[lv_aMG]) + Cos(lv_aMH) * gv_apt[lv_aMG]
  );
  SetUnitY(
    gv_apu[lv_aMG],
    GetUnitY(gv_apu[lv_aMG]) + Sin(lv_aMH) * gv_apt[lv_aMG]
  );
  if (
    IsUnitInRangeXY(
      gv_apu[lv_aMG],
      gv_apr[lv_aMG],
      gv_aps[lv_aMG],
      gv_apt[lv_aMG]
    ) ||
    f_aGH(lv_aMG, lv_aMH)
  ) {
    f_aGM(lv_aMG);
    GroupRemoveUnit(gv_ack, gv_apu[lv_aMG]);
    f_aIM(lv_aMF);
  }
  lv_aMF = null;
}
function f_aMI(lv_aMJ, lv_aMK, lv_aML, lv_aMM) {
  var lv_aMN = f_aGK();
  var lv_aMO = f_aIL();
  gv_apu[lv_aMN] = lv_aMJ;
  gv_apr[lv_aMN] = lv_aMK;
  gv_aps[lv_aMN] = lv_aML;
  gv_apt[lv_aMN] = lv_aMM * 0.025;
  GroupAddUnit(gv_ack, gv_apu[lv_aMN]);
  SaveInteger(gv_abL, 0, GetHandleId(lv_aMO), lv_aMN);
  TimerStart(lv_aMO, 0.025, true, f_aME);
  lv_aMO = null;
  return lv_aMN;
}
function f_aMP(lv_aMQ, lv_aMR) {
  var lv_aMS;
  if (IsUnitType(lv_aMQ, UNIT_TYPE_GIANT) == false) {
    lv_aMS = f_aMI(
      lv_aMQ,
      GetUnitX(lv_aMQ) + Cos(lv_aMR) * 400,
      GetUnitY(lv_aMQ) + Sin(lv_aMR) * 400,
      600
    );
    gv_apv[lv_aMS] = 0;
  }
}
function f_aMT() {
  gv_ack = CreateGroup();
}
function f_aMU(lv_aMV, lv_aMW, lv_aMX, lv_aMY, lv_aMZ) {
  var lv_aNa = f_aGY();
  gv_apC[lv_aNa] = lv_aMV;
  if (lv_aMW > gv_aco) {
    gv_apD[lv_aNa] = gv_aco;
  } else {
    if (lv_aMW < gv_acn) {
      gv_apD[lv_aNa] = gv_acn;
    } else {
      gv_apD[lv_aNa] = lv_aMW;
    }
  }
  if (lv_aMX > gv_acq) {
    gv_apE[lv_aNa] = gv_acq;
  } else {
    if (lv_aMX < gv_acp) {
      gv_apE[lv_aNa] = gv_acp;
    } else {
      gv_apE[lv_aNa] = lv_aMX;
    }
  }
  gv_apF[lv_aNa] = lv_aMY;
  gv_apG[lv_aNa] = lv_aMZ;
  gv_apH[lv_aNa] = 0.0;
  gv_apI[lv_aNa] = false;
  gv_apJ[lv_aNa] = false;
  gv_apK[lv_aNa] = false;
  gv_acr = gv_acr + 1;
  gv_acs[gv_acr] = lv_aNa;
  if (gv_acr == 0) {
    TimerStart(gv_acl, 0.02, true, gv_apL);
  }
  return lv_aNa;
}
function f_aNb() {
  var lv_aNc = gv_acr;
  var lv_aNd;
  var lv_aNe;
  do {
    if (lv_aNc < 0) {
      break;
    }
    lv_aNe = gv_acs.getInt(lv_aNc);
    gv_acm = lv_aNc;
    gv_apH[lv_aNe] = gv_apH[lv_aNe] + 0.02;
    if (gv_apH[lv_aNe] >= gv_apG[lv_aNe]) {
      lv_aNd = Atan2(
        gv_apE[lv_aNe] - GetUnitY(gv_apC[lv_aNe]),
        gv_apD[lv_aNe] - GetUnitX(gv_apC[lv_aNe])
      );
      if (!gv_apJ[lv_aNe]) {
        SetUnitFacing(gv_apC[lv_aNe], lv_aNd * bj_RADTODEG);
      }
      if (gv_apI[lv_aNe]) {
        SetUnitPosition(
          gv_apC[lv_aNe],
          GetUnitX(gv_apC[lv_aNe]) + gv_apF[lv_aNe] * Cos(lv_aNd),
          GetUnitY(gv_apC[lv_aNe]) + gv_apF[lv_aNe] * Sin(lv_aNd)
        );
      } else {
        SetUnitX(
          gv_apC[lv_aNe],
          GetUnitX(gv_apC[lv_aNe]) + gv_apF[lv_aNe] * Cos(lv_aNd)
        );
        SetUnitY(
          gv_apC[lv_aNe],
          GetUnitY(gv_apC[lv_aNe]) + gv_apF[lv_aNe] * Sin(lv_aNd)
        );
      }
      if (gv_apB[gv_apz.getInt(lv_aNe)] != null) {
        f_aGD(lv_aNe);
      }
      gv_apH[lv_aNe] = 0.0;
    }
    if (
      IsUnitInRangeXY(
        gv_apC[lv_aNe],
        gv_apD[lv_aNe],
        gv_apE[lv_aNe],
        gv_apF[lv_aNe]
      ) ||
      gv_apK[lv_aNe]
    ) {
      f_aGF(lv_aNe);
      gv_acs[lv_aNc] = gv_acs.getInt(gv_acr);
      gv_acr = gv_acr - 1;
    }
    lv_aNc = lv_aNc - 1;
  } while (true);
  if (gv_acr == -1) {
    PauseTimer(gv_acl);
  }
}
function f_aNf() {
  gv_apL = f_aNb;
}
function f_aNg(lv_aNh, lv_aNi, lv_aNj, lv_aNk, lv_aNl, lv_aNm) {
  var lv_aNn = GetUnitFacing(lv_aNh) * bj_DEGTORAD;
  var lv_aNo = f_aHj(
    lv_aNh,
    GetUnitX(lv_aNh) - Cos(lv_aNn) * lv_aNj,
    GetUnitY(lv_aNh) - Sin(lv_aNn) * lv_aNj,
    lv_aNk,
    lv_aNm
  );
  gv_apM[lv_aNo] = lv_aNl;
  gv_apN[lv_aNo] = lv_aNi;
  gv_apJ[lv_aNo] = true;
  gv_apI[lv_aNo] = true;
  gv_apO[lv_aNo] = 0;
  return lv_aNo;
}
function f_aNp() {
  gv_acn = GetRectMinX(bj_mapInitialPlayableArea);
  gv_aco = GetRectMaxX(bj_mapInitialPlayableArea);
  gv_acp = GetRectMinY(bj_mapInitialPlayableArea);
  gv_acq = GetRectMaxY(bj_mapInitialPlayableArea);
  Preload(
    "Objects\\Spawnmodels\\Undead\\ImpaleTargetDust\\ImpaleTargetDust.mdl"
  );
}
function f_aNq(lv_aNr, lv_aNs, lv_aNt) {
  var lv_aNu = 10;
  var lv_aNv;
  var lv_aNw = 0;
  do {
    if (lv_aNw > 7) {
      break;
    }
    if (
      GetPlayerController(Player(lv_aNw)) == MAP_CONTROL_USER &&
      GetPlayerSlotState(Player(lv_aNw)) == PLAYER_SLOT_STATE_PLAYING
    ) {
      lv_aNv = f_aMe(
        lv_aNr,
        lv_aNs,
        GetUnitX(gv_ale[lv_aNw]),
        GetUnitY(gv_ale[lv_aNw])
      );
      if (GetWidgetLife(gv_ale[lv_aNw]) > 0.405 && lv_aNt > lv_aNv) {
        lv_aNt = lv_aNv;
        lv_aNu = lv_aNw;
      }
    }
    lv_aNw = lv_aNw + 1;
  } while (true);
  return lv_aNu;
}
function f_aNx(lv_aNy) {
  var lv_aNz = 0;
  var lv_aNA = 0;
  do {
    if (lv_aNA > 7) {
      break;
    }
    if (
      GetWidgetLife(gv_ale[lv_aNA]) > 0.405 &&
      GetPlayerController(Player(lv_aNA)) == MAP_CONTROL_USER &&
      GetPlayerSlotState(Player(lv_aNA)) == PLAYER_SLOT_STATE_PLAYING
    ) {
      if (
        RectContainsCoords(
          lv_aNy,
          GetUnitX(gv_ale[lv_aNA]),
          GetUnitY(gv_ale[lv_aNA])
        )
      ) {
        lv_aNz = lv_aNz + 1;
      }
    }
    lv_aNA = lv_aNA + 1;
  } while (true);
  return lv_aNz;
}
function f_aNB() {
  RemoveDestructable(GetEnumDestructable());
}
function f_aNC(lv_aND, lv_aNE) {
  var lv_aNF;
  if (StringCase(lv_aNE, false) == "x") {
    lv_aNF = GetRandomReal(GetRectMinX(lv_aND), GetRectMaxX(lv_aND));
  } else {
    lv_aNF = GetRandomReal(GetRectMinY(lv_aND), GetRectMaxY(lv_aND));
  }
  return lv_aNF;
}
function f_aNG(lv_aNH, lv_aNI, lv_aNJ, lv_aNK, lv_aNL, lv_aNM) {
  do {
    lv_aNH = lv_aNH - 1;
    if (lv_aNH < 0) {
      break;
    }
    CreateUnit(lv_aNJ, lv_aNI, lv_aNK, lv_aNL, lv_aNM);
  } while (true);
}
function f_aNN(lv_aNO) {
  if (lv_aNO == "red") {
    return 0;
  }
  if (lv_aNO == "blue") {
    return 1;
  }
  if (lv_aNO == "teal") {
    return 2;
  }
  if (lv_aNO == "purple") {
    return 3;
  }
  if (lv_aNO == "yellow") {
    return 4;
  }
  if (lv_aNO == "orange") {
    return 5;
  }
  if (lv_aNO == "green") {
    return 6;
  }
  if (lv_aNO == "pink") {
    return 7;
  }
  return 10;
}
function f_aNP() {
  return (
    (IsUnitType(GetEnteringUnit(), UNIT_TYPE_HERO) &&
      GetWidgetLife(GetEnteringUnit()) > 0.405) != null
  );
}
function f_aNQ() {
  return (
    IsUnitEnemy(GetFilterUnit(), Player(11)) &&
    !f_aLK(GetFilterUnit()) &&
    GetWidgetLife(GetFilterUnit()) > 0.405
  );
}
function f_aNR() {
  if (GetWidgetLife(GetEnumUnit()) > 0.405) {
    SetUnitInvulnerable(GetEnumUnit(), false);
    KillUnit(GetEnumUnit());
  }
}
function f_aNS() {
  var lv_aNT = LoadInteger(gv_abL, 0, GetHandleId(GetExpiredTimer()));
  SetUnitInvulnerable(gv_apS[lv_aNT], false);
  EnableTrigger(gv_apU[lv_aNT]);
  PauseUnit(gv_apS[lv_aNT], false);
  if (f_aNx(gv_apT[lv_aNT]) > 0) {
    TriggerExecute(gv_apU[lv_aNT]);
  }
  f_aGx(lv_aNT);
  f_aIM(GetExpiredTimer());
}
function f_aNU(lv_aNV, lv_aNW, lv_aNX) {
  var lv_aNY = f_aGv();
  var lv_aNZ = f_aIL();
  gv_acu = GetUnitName(lv_aNV);
  if (LoadInteger(gv_abH, gv_act, StringHash(S2S(gv_acu + "_X"))) != 0) {
    SetUnitPosition(
      lv_aNV,
      LoadInteger(gv_abH, gv_act, StringHash(S2S(gv_acu + "_X"))),
      LoadInteger(gv_abH, gv_act, StringHash(S2S(gv_acu + "_Y")))
    );
    SetUnitFacing(
      lv_aNV,
      LoadInteger(gv_abH, gv_act, StringHash(S2S(gv_acu + "_A")))
    );
  }
  SetUnitState(lv_aNV, UNIT_STATE_LIFE, 999999);
  SetUnitState(lv_aNV, UNIT_STATE_MANA, 999999);
  SetUnitInvulnerable(lv_aNV, true);
  PauseUnit(lv_aNV, true);
  gv_apS[lv_aNY] = lv_aNV;
  gv_apT[lv_aNY] = lv_aNW;
  gv_apU[lv_aNY] = lv_aNX;
  SaveInteger(gv_abL, 0, GetHandleId(lv_aNZ), lv_aNY);
  TimerStart(lv_aNZ, 8, true, f_aNS);
  lv_aNZ = null;
}
function f_aOa() {
  gv_act = f_aCF();
  SaveInteger(gv_abH, gv_act, StringHash("Avatar of Earth_X"), 2055);
  SaveInteger(gv_abH, gv_act, StringHash("Avatar of Earth_Y"), 14396);
  SaveInteger(gv_abH, gv_act, StringHash("Avatar of Earth_A"), 338);
  SaveInteger(gv_abH, gv_act, StringHash("Avatar of Justice_X"), -11254);
  SaveInteger(gv_abH, gv_act, StringHash("Avatar of Justice_Y"), 4772);
  SaveInteger(gv_abH, gv_act, StringHash("Avatar of Justice_A"), 228);
  SaveInteger(gv_abH, gv_act, StringHash("Avatar of Air_X"), -10320);
  SaveInteger(gv_abH, gv_act, StringHash("Avatar of Air_Y"), 14323);
  SaveInteger(gv_abH, gv_act, StringHash("Avatar of Air_A"), 316);
  SaveInteger(gv_abH, gv_act, StringHash("Avatar of Water_X"), 1967);
  SaveInteger(gv_abH, gv_act, StringHash("Avatar of Water_Y"), -10228);
  SaveInteger(gv_abH, gv_act, StringHash("Avatar of Water_A"), 55);
  SaveInteger(gv_abH, gv_act, StringHash("Avatar of Pain_X"), -9577);
  SaveInteger(gv_abH, gv_act, StringHash("Avatar of Pain_Y"), -1031);
  SaveInteger(gv_abH, gv_act, StringHash("Avatar of Pain_A"), 298);
  SaveInteger(gv_abH, gv_act, StringHash("Art_X"), -9299);
  SaveInteger(gv_abH, gv_act, StringHash("Art_Y"), -1000);
  SaveInteger(gv_abH, gv_act, StringHash("Art_A"), 263);
  SaveInteger(gv_abH, gv_act, StringHash("Lilly_X"), -9706);
  SaveInteger(gv_abH, gv_act, StringHash("Lilly_Y"), -1251);
  SaveInteger(gv_abH, gv_act, StringHash("Lilly_A"), 340);
  SaveInteger(gv_abH, gv_act, StringHash("Avatar of Nature_X"), -1781);
  SaveInteger(gv_abH, gv_act, StringHash("Avatar of Nature_Y"), -3049);
  SaveInteger(gv_abH, gv_act, StringHash("Avatar of Nature_A"), 274);
  SaveInteger(gv_abH, gv_act, StringHash("Mother Earth_X"), -169);
  SaveInteger(gv_abH, gv_act, StringHash("Mother Earth_Y"), -14035);
  SaveInteger(gv_abH, gv_act, StringHash("Mother Earth_A"), 241);
  SaveInteger(gv_abH, gv_act, StringHash("Avatar of Death_X"), 14499);
  SaveInteger(gv_abH, gv_act, StringHash("Avatar of Death_Y"), -11269);
  SaveInteger(gv_abH, gv_act, StringHash("Avatar of Death_A"), 217);
  SaveInteger(gv_abH, gv_act, StringHash("|cffA120ff|rNemean Lion_X"), -5423);
  SaveInteger(gv_abH, gv_act, StringHash("|cffA120ff|rNemean Lion_Y"), -13086);
  SaveInteger(gv_abH, gv_act, StringHash("|cffA120ff|rNemean Lion_A"), 303);
  SaveInteger(gv_abH, gv_act, StringHash("|cffA138ff|rChillhand_X"), 13820);
  SaveInteger(gv_abH, gv_act, StringHash("|cffA138ff|rChillhand_Y"), -3003);
  SaveInteger(gv_abH, gv_act, StringHash("|cffA138ff|rChillhand_A"), 275);
  SaveInteger(gv_abH, gv_act, StringHash("|cffA138ff|rLaestrygonian_X"), 10196);
  SaveInteger(gv_abH, gv_act, StringHash("|cffA138ff|rLaestrygonian_Y"), -7258);
  SaveInteger(gv_abH, gv_act, StringHash("|cffA138ff|rLaestrygonian_A"), 314);
  SaveInteger(gv_abH, gv_act, StringHash("|cffA138ff|rChimaera_X"), 9786);
  SaveInteger(gv_abH, gv_act, StringHash("|cffA138ff|rChimaera_Y"), -2051);
  SaveInteger(gv_abH, gv_act, StringHash("|cffA138ff|rChimaera_A"), 306);
  SaveInteger(gv_abH, gv_act, StringHash("|cffA120ff|rMedusa_X"), 3932);
  SaveInteger(gv_abH, gv_act, StringHash("|cffA120ff|rMedusa_Y"), -14075);
  SaveInteger(gv_abH, gv_act, StringHash("|cffA120ff|rMedusa_A"), 30);
  SaveInteger(
    gv_abH,
    gv_act,
    StringHash("|cffA085ff|rRotting Flesh Golem #1_X"),
    4274
  );
  SaveInteger(
    gv_abH,
    gv_act,
    StringHash("|cffA085ff|rRotting Flesh Golem #1_Y"),
    -14536
  );
  SaveInteger(
    gv_abH,
    gv_act,
    StringHash("|cffA085ff|rRotting Flesh Golem #1_A"),
    44
  );
  SaveInteger(
    gv_abH,
    gv_act,
    StringHash("|cffA085ff|rRotting Flesh Golem #2_X"),
    3965
  );
  SaveInteger(
    gv_abH,
    gv_act,
    StringHash("|cffA085ff|rRotting Flesh Golem #2_Y"),
    -13243
  );
  SaveInteger(
    gv_abH,
    gv_act,
    StringHash("|cffA085ff|rRotting Flesh Golem #2_A"),
    345
  );
  SaveInteger(
    gv_abH,
    gv_act,
    StringHash("|cffA085ff|rRotting Flesh Golem #3_X"),
    3244
  );
  SaveInteger(
    gv_abH,
    gv_act,
    StringHash("|cffA085ff|rRotting Flesh Golem #3_Y"),
    -141050
  );
  SaveInteger(
    gv_abH,
    gv_act,
    StringHash("|cffA085ff|rRotting Flesh Golem #3_A"),
    18
  );
  SaveInteger(gv_abH, gv_act, StringHash("|cffA130ff|rLadon_X"), 0);
  SaveInteger(gv_abH, gv_act, StringHash("|cffA130ff|rLadon_Y"), 0);
  SaveInteger(gv_abH, gv_act, StringHash("|cffA130ff|rLadon_A"), 0);
  SaveInteger(gv_abH, gv_act, StringHash("Queen of the Underworld_X"), 13403);
  SaveInteger(gv_abH, gv_act, StringHash("Queen of the Underworld_Y"), 201);
  SaveInteger(gv_abH, gv_act, StringHash("Queen of the Underworld_A"), 192);
}
function f_aOb() {
  var lv_aOc = 0;
  var lv_aOd = GetUnitX(gv_acw);
  var lv_aOe = GetUnitY(gv_acw);
  if (GetWidgetLife(gv_acw) < 0.406 || GetUnitLifePercent(gv_acw) < 5) {
    DisplayTimedTextToForce(
      gv_alq,
      5,
      "|cff00ff00Hades:|r This will not be the end, Champion of Greece. My world awaits you,\n             with far worse terrors than those in yours!"
    );
    CreateItem("I01Z", lv_aOd, lv_aOe);
    if (GetRandomInt(1, 8) == 1) {
      CreateItem(gv_alJ.getInt(365 + GetRandomInt(0, 5)), lv_aOd, lv_aOe);
    }
    gv_alf[7010] = S2S(
      gv_alf[7010] + " -- |cffffd700You and your companions drove him back|r"
    );
    f_aKh(10);
    gv_alg[7000] = gv_alg.getInt(7000) + 1;
    gv_alg[196] = gv_alg.getInt(196) + 10;
    if (GetRandomInt(1, 4) == 1) {
      CreateItem("I01H", lv_aOd, lv_aOe);
    }
    ShowUnit(gv_acw, false);
    f_aIM(gv_acv);
  } else {
    SaveInteger(
      gv_abL,
      0,
      GetHandleId(gv_acv),
      LoadInteger(gv_abL, 0, GetHandleId(gv_acv)) + 1
    );
    if (ModuloInteger(LoadInteger(gv_abL, 0, GetHandleId(gv_acv)), 3) == 0) {
      gv_alv = CreateUnit(Player(11), gv_acf, lv_aOd, lv_aOe, 0.0);
      UnitAddAbility(gv_alv, "A090");
      IssuePointOrderById(
        gv_alv,
        852238,
        lv_aOd + GetRandomReal(-600, 600),
        lv_aOe + GetRandomReal(-600, 600)
      );
      UnitApplyTimedLife(gv_alv, "BTLF", 5);
    }
    if (GetUnitLifePercent(gv_acw) < 90 && GetUnitUserData(gv_acw) == 1) {
      SetUnitUserData(gv_acw, 2);
    }
    if (GetUnitLifePercent(gv_acw) < 60 && GetUnitUserData(gv_acw) == 2) {
      SetUnitUserData(gv_acw, 3);
      UnitAddAbility(gv_acw, "A03N");
    }
    if (
      GetUnitUserData(gv_acw) > 1 &&
      ModuloInteger(LoadInteger(gv_abL, 0, GetHandleId(gv_acv)), 15) == 0
    ) {
      GroupClear(gv_abu);
      GroupEnumUnitsInRange(
        gv_abu,
        GetUnitX(gv_acw),
        GetUnitY(gv_acw),
        1000,
        Condition(f_aNQ)
      );
      bj_groupRandomConsidered = 0;
      bj_groupRandomCurrentPick = null;
      ForGroup(gv_abu, GroupPickRandomUnitEnum);
      if (bj_groupRandomCurrentPick != null) {
        DisplayTimedTextToForce(
          gv_alq,
          5,
          "|cff00ff00Hades:|r I don't need you awake..."
        );
        gv_alv = CreateUnit(
          Player(10),
          "hpea",
          GetUnitX(gv_acw),
          GetUnitY(gv_acw),
          GetUnitFacing(gv_acw)
        );
        UnitAddAbility(gv_alv, "AUsl");
        IssueTargetOrderById(gv_alv, 852227, bj_groupRandomCurrentPick);
        UnitApplyTimedLife(gv_alv, "BTLF", 2);
      }
      f_aIl(gv_abu);
    }
    if (
      GetUnitUserData(gv_acw) == 2 &&
      LoadInteger(gv_abL, 0, GetHandleId(gv_acv)) == 15
    ) {
      DisplayTimedTextToForce(
        gv_alq,
        5,
        "|cff00ff00Hades:|r For I am ruler of the underworld... First illusion, Soul Tsunami!"
      );
      gv_alv = CreateUnit(
        Player(10),
        "hpea",
        GetUnitX(gv_acw),
        GetUnitY(gv_acw),
        GetUnitFacing(gv_acw)
      );
      UnitAddAbility(gv_alv, "A092");
      IssuePointOrderById(gv_alv, 852593, GetUnitX(gv_acw), GetUnitY(gv_acw));
      UnitApplyTimedLife(gv_alv, "BTLF", 25);
    }
    if (
      GetUnitUserData(gv_acw) == 3 &&
      LoadInteger(gv_abL, 0, GetHandleId(gv_acv)) == 15
    ) {
      DisplayTimedTextToForce(
        gv_alq,
        5,
        "|cff00ff00Hades:|r Zeus is a fool for not joining his champions battle... Second illusion, Perfect Split!"
      );
      if (GetUnitAbilityLevel(gv_acw, "A094") < 1) {
        UnitAddAbility(gv_acw, "A094");
      }
      IssueImmediateOrderById(gv_acw, 852123);
    }
    if (
      ModuloInteger(LoadInteger(gv_abL, 0, GetHandleId(gv_acv)), 10) == 0 &&
      GetUnitUserData(gv_acw) > 0
    ) {
      GroupClear(gv_abu);
      GroupEnumUnitsInRange(
        gv_abu,
        GetUnitX(gv_acw),
        GetUnitY(gv_acw),
        300,
        Condition(f_aNQ)
      );
      bj_groupRandomConsidered = 0;
      bj_groupRandomCurrentPick = null;
      ForGroup(gv_abu, GroupPickRandomUnitEnum);
      if (bj_groupRandomCurrentPick != null) {
        DisplayTimedTextToForce(
          gv_alq,
          5,
          "|cff00ff00Hades:|r Get out of my way mortal!"
        );
        f_aNg(
          bj_groupRandomCurrentPick,
          "Objects\\Spawnmodels\\Undead\\ImpaleTargetDust\\ImpaleTargetDust.mdl",
          500,
          14,
          0.2,
          0.02
        );
        UnitDamageTarget(
          gv_acw,
          bj_groupRandomCurrentPick,
          1000,
          false,
          false,
          ATTACK_TYPE_NORMAL,
          DAMAGE_TYPE_UNIVERSAL,
          null
        );
      }
      f_aIl(gv_abu);
    }
    if (LoadInteger(gv_abL, 0, GetHandleId(gv_acv)) == 30) {
      if (GetUnitUserData(gv_acw) > 0) {
        DisplayTimedTextToForce(
          gv_alq,
          5,
          "|cff00ff00Hades:|r Rise from Tartarus thy soul!"
        );
        gv_alv = CreateUnit(
          Player(11),
          "n00M",
          lv_aOd + GetRandomReal(-300, 300),
          lv_aOe + GetRandomReal(-300, 300),
          0.0
        );
        IssuePointOrderById(gv_alv, gv_aas, GetUnitX(gv_ajS), GetUnitY(gv_ajS));
      }
      SaveInteger(gv_abL, 0, GetHandleId(gv_acv), 0);
    }
  }
}
function f_aOf() {
  if (GetEnteringUnit() == gv_acw) {
    PauseTimer(gv_acv);
    PauseUnit(gv_acw, true);
    SetUnitInvulnerable(gv_acw, true);
    ShowUnit(gv_akN, true);
    DestroyEffect(
      AddSpecialEffectTarget(
        "Abilities\\Spells\\Human\\MassTeleport\\MassTeleportCaster.mdl",
        gv_akN,
        "origin"
      )
    );
    SetUnitInvulnerable(gv_akN, true);
    DisplayTimedTextToForce(
      gv_alq,
      5,
      "|cff00ff00Hades:|r Ah my wife, come and join me to finish off these mortal fools!"
    );
    f_aBp(1);
    DisplayTimedTextToForce(
      gv_alq,
      5,
      "|cff00ff00Persephone:|r Never! As long as I'm still bound to my mother I won't let you do this."
    );
    f_aBp(1);
    DisplayTimedTextToForce(
      gv_alq,
      5,
      "|cff00ff00Hades:|r Then I have no choice, I shall send you back Tartarus myself then"
    );
    f_aBp(1);
    DisplayTimedTextToForce(
      gv_alq,
      5,
      "|cff00ff00Persephone:|r Never till my time here is over Hades!"
    );
    f_aBp(1);
    PauseUnit(gv_acw, false);
    SetUnitInvulnerable(gv_acw, false);
    PauseUnit(gv_akN, false);
    SetUnitInvulnerable(gv_akN, false);
    f_aNg(
      gv_acw,
      "Objects\\Spawnmodels\\Undead\\ImpaleTargetDust\\ImpaleTargetDust.mdl",
      500,
      14,
      0.2,
      0.02
    );
    DisableTrigger(GetTriggeringTrigger());
    TimerStart(gv_acv, 1, true, f_aOb);
    IssuePointOrderById(gv_acw, gv_aas, GetUnitX(gv_ajS), GetUnitY(gv_ajS));
  }
}
function f_aOg() {
  DisplayTimedTextToForce(
    gv_alq,
    5,
    "|cff00ff00Hades:|r My foolish wife... You shall pay for this trickery champions!"
  );
}
function f_aOh() {
  var lv_aOi = CreateRegion();
  RegionAddRect(lv_aOi, gv_acJ);
  DisplayTimedTextToForce(
    gv_alq,
    5,
    "|cff00ff00Hades:|r Open, gates of hell! I come for Greece. Only death awaits you, mortals!"
  );
  SaveInteger(gv_abL, 0, GetHandleId(gv_acv), 0);
  SetUnitUserData(gv_acw, 1);
  gv_aiE = CreateTrigger();
  TriggerRegisterEnterRegion(gv_aiE, lv_aOi, null);
  TriggerAddAction(gv_aiE, f_aOf);
  gv_aiE = CreateTrigger();
  TriggerRegisterUnitEvent(gv_aiE, gv_akN, EVENT_UNIT_DEATH);
  TriggerAddAction(gv_aiE, f_aOg);
  TimerStart(gv_acv, 1, true, f_aOb);
}
function f_aOj(lv_aOk, lv_aOl, lv_aOm) {
  SetPlayerState(
    lv_aOk,
    PLAYER_STATE_RESOURCE_GOLD,
    GetPlayerState(lv_aOk, PLAYER_STATE_RESOURCE_GOLD) +
      LoadInteger(
        gv_abH,
        gv_acx,
        StringHash(I2S(GetItemTypeId(lv_aOl)) + "Gold")
      )
  );
  SetPlayerState(
    lv_aOk,
    PLAYER_STATE_RESOURCE_LUMBER,
    GetPlayerState(lv_aOk, PLAYER_STATE_RESOURCE_LUMBER) +
      LoadInteger(
        gv_abH,
        gv_acx,
        StringHash(I2S(GetItemTypeId(lv_aOl)) + "Lumber")
      )
  );
  if (lv_aOm == 0) {
    f_aLO(
      lv_aOk,
      "You are too weak to use the spell upgrade book.\n    The cost has been refunded."
    );
  }
  if (lv_aOm == 1) {
    f_aLO(
      lv_aOk,
      "You have already purchase a skill point, please upgrade the skill first.\n    The cost has been refunded."
    );
  } else {
    if (lv_aOm == 2) {
      f_aLO(
        lv_aOk,
        "You have no skills that can be upgraded.\n    The cost has been refunded."
      );
    }
  }
}
function f_aOn(lv_aOo, lv_aOp, lv_aOq) {
  var lv_aOr = lv_aOp * 5 + 200;
  if (gv_alg.getInt(lv_aOr) == lv_aOq) {
    UnitAddAbility(lv_aOo, "A054");
  }
  if (gv_alg.getInt(lv_aOr + 1) == lv_aOq) {
    UnitAddAbility(lv_aOo, "A05X");
  }
  if (gv_alg.getInt(lv_aOr + 2) == lv_aOq) {
    UnitAddAbility(lv_aOo, "A05Y");
  }
  if (gv_alg.getInt(lv_aOr + 3) == lv_aOq) {
    UnitAddAbility(lv_aOo, "A05Z");
  }
  if (gv_alg.getInt(lv_aOr + 4) == lv_aOq) {
    UnitAddAbility(lv_aOo, "A060");
  }
}
function f_aOs(lv_aOt, lv_aOu, lv_aOv) {
  var lv_aOw = lv_aOv * 5 + 200;
  lv_aOu = lv_aOu - 1;
  IncUnitAbilityLevel(
    lv_aOt,
    gv_alJ.getInt(
      LoadInteger(gv_abH, gv_acx, StringHash(GetUnitName(lv_aOt))) + lv_aOu
    )
  );
  gv_alg[lv_aOw + lv_aOu] = gv_alg.getInt(lv_aOw + lv_aOu) + 1;
}
function f_aOx(lv_aOy) {
  var lv_aOz = StringHash(GetUnitName(gv_ale[lv_aOy]));
  var lv_aOA = 1;
  var lv_aOB;
  var lv_aOC = 0;
  do {
    if (lv_aOA > 5) {
      break;
    }
    lv_aOB = GetUnitAbilityLevel(
      gv_ale[lv_aOy],
      gv_alJ.getInt(LoadInteger(gv_abH, gv_acx, lv_aOz) + lv_aOA)
    );
    if (lv_aOB > 0) {
      SetUnitAbilityLevel(
        gv_ale[lv_aOy],
        gv_alJ.getInt(LoadInteger(gv_abH, gv_acx, lv_aOz) + lv_aOA),
        1
      );
      gv_alg[lv_aOy * 5 + 199 + lv_aOA] = 1;
      if (lv_aOB == 6) {
        lv_aOC = lv_aOC + 77;
      } else {
        if (lv_aOB == 5) {
          lv_aOC = lv_aOC + 27;
        } else {
          if (lv_aOB == 4) {
            lv_aOC = lv_aOC + 7;
          }
        }
      }
    }
    lv_aOA = lv_aOA + 1;
  } while (true);
  AdjustPlayerStateBJ(
    R2I(lv_aOC / 2),
    Player(lv_aOy),
    PLAYER_STATE_RESOURCE_LUMBER
  );
}
function f_aOD() {
  var lv_aOE = GetItemTypeId(GetManipulatedItem());
  return (
    lv_aOE == "lmbr" ||
    lv_aOE == "gfor" ||
    lv_aOE == "gomn" ||
    lv_aOE == "guvi" ||
    lv_aOE == "rdis" ||
    lv_aOE == "I06J"
  );
}
function f_aOF() {
  var lv_aOG = GetManipulatingUnit();
  var lv_aOH = GetPlayerId(GetOwningPlayer(lv_aOG));
  var lv_aOI = GetItemTypeId(GetManipulatedItem());
  var lv_aOJ = 0;
  var lv_aOK = LoadInteger(gv_abH, gv_acx, StringHash(I2S(lv_aOI) + "Req"));
  var lv_aOL = 1;
  var lv_aOM;
  if (lv_aOI == "I06J") {
    f_aOx(lv_aOH);
    lv_aOG = null;
    return;
  }
  do {
    if (lv_aOL > 5) {
      break;
    }
    if (gv_alg.getInt(lv_aOH * 5 + 199 + lv_aOL) > lv_aOK) {
      lv_aOJ = lv_aOJ + 1;
    } else {
      if (gv_alg.getInt(lv_aOH * 5 + 199 + lv_aOL) == lv_aOK) {
        lv_aOI = 1;
      }
    }
    lv_aOL = lv_aOL + 1;
  } while (true);
  gv_aaK[lv_aOH] = gv_aaK.getInt(20 + lv_aOK) * (lv_aOJ + 1);
  gv_aaJ[lv_aOH] = gv_aaJ.getInt(20 + lv_aOK) * (lv_aOJ + 1);
  lv_aOM = 25 * lv_aOK + 4 * lv_aOJ;
  if (GetHeroLevel(gv_ale[lv_aOH]) < lv_aOM) {
    DisplayTimedTextToPlayer(
      GetOwningPlayer(lv_aOG),
      0,
      0,
      10,
      S2S("Requires level " + gv_aba) +
        I2S(lv_aOM) +
        "|r, " +
        gv_abb +
        I2S(gv_aaK.getInt(lv_aOH)) +
        "|r gold, and " +
        gv_aaZ +
        I2S(gv_aaJ.getInt(lv_aOH)) +
        "|r Honor to upgrade next skill to this level."
    );
  } else {
    if (
      GetPlayerState(GetOwningPlayer(lv_aOG), PLAYER_STATE_RESOURCE_GOLD) <
        gv_aaK.getInt(lv_aOH) ||
      GetPlayerState(GetOwningPlayer(lv_aOG), PLAYER_STATE_RESOURCE_LUMBER) <
        gv_aaJ.getInt(lv_aOH)
    ) {
      DisplayTimedTextToPlayer(
        GetOwningPlayer(lv_aOG),
        0,
        0,
        10,
        S2S("Requires level " + gv_aba) +
          I2S(lv_aOM) +
          "|r, " +
          gv_abb +
          I2S(gv_aaK.getInt(lv_aOH)) +
          "|r gold, and " +
          gv_aaZ +
          I2S(gv_aaJ.getInt(lv_aOH)) +
          "|r Honor to upgrade next skill to this level."
      );
    } else {
      if (lv_aOI != 1) {
        DisplayTimedTextToPlayer(
          GetOwningPlayer(lv_aOG),
          0,
          0,
          10,
          "You lack a level " + I2S(lv_aOK) + " skill to upgrade."
        );
      } else {
        DialogClear(gv_abp[lv_aOH]);
        DialogSetMessageBJ(
          gv_abp[lv_aOH],
          S2S("Choose ability to upgrade. Cost " + gv_abb) +
            I2S(gv_aaK.getInt(lv_aOH)) +
            "|r G, " +
            gv_aaZ +
            I2S(gv_aaJ.getInt(lv_aOH)) +
            "|r Honor"
        );
        lv_aOL = 1;
        do {
          if (lv_aOL > 5) {
            break;
          }
          if (gv_alg.getInt(lv_aOH * 5 + 199 + lv_aOL) == lv_aOK) {
            gv_abq[lv_aOH * 6 + lv_aOL] = DialogAddButton(
              gv_abp[lv_aOH],
              I2S(lv_aOL) +
                "-" +
                BlzGetAbilityTooltip(
                  gv_alJ.getInt(
                    LoadInteger(
                      gv_abH,
                      gv_acx,
                      StringHash(GetUnitName(lv_aOG))
                    ) +
                      lv_aOL -
                      1
                  ),
                  lv_aOK
                ),
              48 + lv_aOL
            );
          }
          lv_aOL = lv_aOL + 1;
        } while (true);
        gv_abr[lv_aOH] = DialogAddButton(gv_abp[lv_aOH], "Cancel", 67);
        DialogDisplay(GetTriggerPlayer(), gv_abp[lv_aOH], true);
      }
    }
  }
  lv_aOG = null;
}
function f_aON() {
  var lv_aOO = 1;
  var lv_aOP = GetPlayerId(GetTriggerPlayer());
  var lv_aOQ;
  if (GetClickedButton() == gv_abr[lv_aOP]) {
    return;
  }
  do {
    if (lv_aOO > 5) {
      break;
    }
    if (GetClickedButton() == gv_abq[lv_aOP * 6 + lv_aOO]) {
      IncUnitAbilityLevel(
        gv_ale[lv_aOP],
        gv_alJ.getInt(
          LoadInteger(gv_abH, gv_acx, StringHash(GetUnitName(gv_ale[lv_aOP]))) +
            lv_aOO -
            1
        )
      );
      DisplayTimedTextToPlayer(
        GetTriggerPlayer(),
        0,
        0,
        20,
        "Successfully upgraded " +
          BlzGetAbilityTooltip(
            gv_alJ.getInt(
              LoadInteger(
                gv_abH,
                gv_acx,
                StringHash(GetUnitName(gv_ale[lv_aOP]))
              ) +
                lv_aOO -
                1
            ),
            gv_alg.getInt(lv_aOP * 5 + 199 + lv_aOO)
          )
      );
      gv_alg[lv_aOP * 5 + 199 + lv_aOO] =
        gv_alg.getInt(lv_aOP * 5 + 199 + lv_aOO) + 1;
      AdjustPlayerStateBJ(
        -gv_aaK.getInt(lv_aOP),
        Player(lv_aOP),
        PLAYER_STATE_RESOURCE_GOLD
      );
      AdjustPlayerStateBJ(
        -gv_aaJ.getInt(lv_aOP),
        Player(lv_aOP),
        PLAYER_STATE_RESOURCE_LUMBER
      );
    }
    lv_aOO = lv_aOO + 1;
  } while (true);
}
function f_aOR() {
  var lv_aOS = GetManipulatingUnit();
  var lv_aOT = GetPlayerId(GetOwningPlayer(lv_aOS));
  var lv_aOU = GetItemTypeId(GetManipulatedItem());
  var lv_aOV = true;
  var lv_aOW = LoadInteger(gv_abH, gv_acx, StringHash(I2S(lv_aOU) + "Req"));
  var lv_aOX = 0;
  if (lv_aOU == "I06J") {
    f_aOx(lv_aOT);
    lv_aOS = null;
    return;
  }
  if (
    GetHeroLevel(gv_ale[lv_aOT]) >=
    LoadInteger(gv_abH, gv_acx, StringHash(I2S(lv_aOU) + "Level"))
  ) {
    do {
      if (lv_aOX > 4) {
        break;
      }
      if (gv_alg.getInt(lv_aOT * 5 + 200 + lv_aOX) == lv_aOW) {
        lv_aOV = false;
      }
      lv_aOX = lv_aOX + 1;
      if (!lv_aOV) {
        break;
      }
    } while (true);
    if (IsUnitInGroup(gv_ale[lv_aOT], gv_acy)) {
      f_aOj(Player(lv_aOT), GetManipulatedItem(), 1);
    } else {
      if (lv_aOV) {
        f_aOj(Player(lv_aOT), GetManipulatedItem(), 2);
      } else {
        GroupAddUnit(gv_acy, gv_ale[lv_aOT]);
        gv_ale[24 + lv_aOT] = CreateUnit(
          Player(lv_aOT),
          "ewsp",
          GetUnitX(gv_ale[lv_aOT]),
          GetUnitY(gv_ale[lv_aOT]),
          0.0
        );
        UnitRemoveAbility(gv_ale[24 + lv_aOT], "Aatk");
        UnitRemoveAbility(gv_ale[24 + lv_aOT], "Amov");
        f_aOn(gv_ale[24 + lv_aOT], lv_aOT, lv_aOW);
        SetUnitVertexColor(gv_ale[24 + lv_aOT], 255, 255, 255, 150);
        SelectUnitForPlayerSingle(gv_ale[24 + lv_aOT], Player(lv_aOT));
      }
    }
  } else {
    f_aOj(Player(lv_aOT), GetManipulatedItem(), 0);
  }
  lv_aOS = null;
}
function f_aOY() {
  return (
    GetSpellAbilityId() == "A054" ||
    GetSpellAbilityId() == "A05X" ||
    GetSpellAbilityId() == "A05Y" ||
    GetSpellAbilityId() == "A05Z" ||
    GetSpellAbilityId() == "A060"
  );
}
function f_aOZ() {
  var lv_aPa = GetTriggerUnit();
  var lv_aPb = GetPlayerId(GetOwningPlayer(lv_aPa));
  SetUnitAnimation(lv_aPa, "spell");
  SelectUnitForPlayerSingle(gv_ale[lv_aPb], Player(lv_aPb));
  if (GetSpellAbilityId() == "A054") {
    f_aOs(gv_ale[lv_aPb], 1, lv_aPb);
  } else {
    if (GetSpellAbilityId() == "A05X") {
      f_aOs(gv_ale[lv_aPb], 2, lv_aPb);
    } else {
      if (GetSpellAbilityId() == "A05Y") {
        f_aOs(gv_ale[lv_aPb], 3, lv_aPb);
      } else {
        if (GetSpellAbilityId() == "A05Z") {
          f_aOs(gv_ale[lv_aPb], 4, lv_aPb);
        } else {
          if (GetSpellAbilityId() == "A060") {
            f_aOs(gv_ale[lv_aPb], 5, lv_aPb);
          }
        }
      }
    }
  }
  GroupRemoveUnit(gv_acy, gv_ale[lv_aPb]);
  RemoveUnit(lv_aPa);
  gv_ale[lv_aPb + 24] = null;
  lv_aPa = null;
}
function f_aPc() {
  gv_acx = f_aCF();
  SaveInteger(gv_abH, gv_acx, StringHash(I2S("lmbr") + "Gold"), 7000);
  SaveInteger(gv_abH, gv_acx, StringHash(I2S("lmbr") + "Lumber"), 0);
  SaveInteger(gv_abH, gv_acx, StringHash(I2S("lmbr") + "Level"), 30);
  SaveInteger(gv_abH, gv_acx, StringHash(I2S("lmbr") + "Req"), 1);
  SaveInteger(gv_abH, gv_acx, StringHash(I2S("gfor") + "Gold"), 40000);
  SaveInteger(gv_abH, gv_acx, StringHash(I2S("gfor") + "Lumber"), 0);
  SaveInteger(gv_abH, gv_acx, StringHash(I2S("gfor") + "Level"), 60);
  SaveInteger(gv_abH, gv_acx, StringHash(I2S("gfor") + "Req"), 2);
  SaveInteger(gv_abH, gv_acx, StringHash(I2S("gomn") + "Gold"), 80000);
  SaveInteger(gv_abH, gv_acx, StringHash(I2S("gomn") + "Lumber"), 7);
  SaveInteger(gv_abH, gv_acx, StringHash(I2S("gomn") + "Level"), 90);
  SaveInteger(gv_abH, gv_acx, StringHash(I2S("gomn") + "Req"), 3);
  SaveInteger(gv_abH, gv_acx, StringHash(I2S("guvi") + "Gold"), 160000);
  SaveInteger(gv_abH, gv_acx, StringHash(I2S("guvi") + "Lumber"), 20);
  SaveInteger(gv_abH, gv_acx, StringHash(I2S("guvi") + "Level"), 120);
  SaveInteger(gv_abH, gv_acx, StringHash(I2S("guvi") + "Req"), 4);
  SaveInteger(gv_abH, gv_acx, StringHash(I2S("rdis") + "Gold"), 300000);
  SaveInteger(gv_abH, gv_acx, StringHash(I2S("rdis") + "Lumber"), 50);
  SaveInteger(gv_abH, gv_acx, StringHash(I2S("rdis") + "Level"), 150);
  SaveInteger(gv_abH, gv_acx, StringHash(I2S("rdis") + "Req"), 5);
  SaveInteger(gv_abH, gv_acx, StringHash("|c10000000|rPyromancer"), 735);
  SaveInteger(gv_abH, gv_acx, StringHash("|c20000000|rHydromancer"), 715);
  SaveInteger(gv_abH, gv_acx, StringHash("|c30000000|rBokor"), 725);
  SaveInteger(gv_abH, gv_acx, StringHash("|c40000000|rDryad"), 710);
  SaveInteger(gv_abH, gv_acx, StringHash("|c50000000|rPriestess"), 730);
  SaveInteger(gv_abH, gv_acx, StringHash("|c60000000|rJavelineer"), 720);
  SaveInteger(gv_abH, gv_acx, StringHash("|c70000000|rArcane Ranger"), 700);
  SaveInteger(gv_abH, gv_acx, StringHash("|cB0000000|rTemple Guardian"), 750);
  SaveInteger(gv_abH, gv_acx, StringHash("|cC0000000|rSpartan Warrior"), 740);
  SaveInteger(gv_abH, gv_acx, StringHash("|cD0000000|rAmazon"), 755);
  SaveInteger(gv_abH, gv_acx, StringHash("|cE0000000|rAssassin"), 705);
  SaveInteger(gv_abH, gv_acx, StringHash("|cF0000000|rSpell Blade"), 745);
}
function f_aPd() {
  gv_ahZ = CreateTrigger();
  TriggerRegisterAnyUnitEventBJ(gv_ahZ, EVENT_PLAYER_UNIT_PICKUP_ITEM);
  TriggerAddAction(gv_ahZ, f_aOF);
  TriggerAddCondition(gv_ahZ, Condition(f_aOD));
  gv_ahZ = CreateTrigger();
  TriggerRegisterAnyUnitEventBJ(gv_ahZ, EVENT_PLAYER_UNIT_SPELL_EFFECT);
  TriggerAddAction(gv_ahZ, f_aOZ);
  TriggerAddCondition(gv_ahZ, Condition(f_aOY));
  ExecuteFunc("f_aPc");
  f_aLD("A054");
  f_aLD("A05X");
  f_aLD("A05Y");
  f_aLD("A05Z");
  f_aLD("A060");
}
function f_aPe() {
  var lv_aPf;
  var lv_aPg = null;
  var lv_aPh = LoadInteger(gv_abL, 0, GetHandleId(GetExpiredTimer()));
  var gv_aaj = 350 * gv_aam[lv_aPh];
  if (GetWidgetLife(gv_ale[lv_aPh]) > 0.405) {
    lv_aPf = f_aIn();
    gv_ach = GetUnitX(gv_ale[lv_aPh]);
    gv_aci = GetUnitY(gv_ale[lv_aPh]);
    gv_acj = 256 * gv_aan[lv_aPh];
    gv_acg = GetOwningPlayer(gv_ale[lv_aPh]);
    GroupEnumUnitsInRange(lv_aPf, gv_ach, gv_aci, 400, Condition(f_aLM));
    do {
      lv_aPg = FirstOfGroup(lv_aPf);
      if (lv_aPg == null) {
        break;
      }
      f_aLz(
        AddSpecialEffectTarget(
          "Abilities\\Spells\\Items\\HealingSalve\\HealingSalveTarget.mdl",
          lv_aPg,
          "head"
        ),
        0.5
      );
      UnitDamageTarget(
        f_aIV(GetOwningPlayer(gv_ale[lv_aPh]), gv_ach, gv_aci, 1),
        lv_aPg,
        gv_aaj,
        false,
        false,
        ATTACK_TYPE_NORMAL,
        DAMAGE_TYPE_UNIVERSAL,
        null
      );
      GroupRemoveUnit(lv_aPf, lv_aPg);
    } while (true);
    f_aIo(lv_aPf);
  }
  if (UnitHasItemOfTypeBJ(gv_ale[lv_aPh], "I066") == false) {
    GroupRemoveUnit(gv_alm[8], gv_ale[lv_aPh]);
    PauseTimer(gv_ali[lv_aPh + 8]);
  }
  lv_aPf = null;
}
function f_aPi(lv_aPj) {
  var lv_aPk = GetPlayerId(GetOwningPlayer(lv_aPj));
  if (!IsUnitInGroup(lv_aPj, gv_alm[8]) && GetHeroLevel(lv_aPj) > 129) {
    GroupAddUnit(gv_alm[8], lv_aPj);
    SaveInteger(gv_abL, 0, GetHandleId(gv_ali[lv_aPk + 8]), lv_aPk);
    TimerStart(gv_ali[lv_aPk + 8], 1, true, f_aPe);
  }
}
function f_aPl(lv_aPm) {
  var lv_aPn = GetPlayerId(GetOwningPlayer(lv_aPm));
  if (IsUnitInGroup(lv_aPm, gv_alm[8]) && GetHeroLevel(lv_aPm) > 129) {
    GroupRemoveUnit(gv_alm[8], lv_aPm);
    PauseTimer(gv_ali[lv_aPn + 8]);
  }
}
function f_aPo() {
  var lv_aPp = Player(PLAYER_NEUTRAL_PASSIVE);
  var lv_aPq;
  var lv_aPr;
  var lv_aPs;
  var lv_aPt;
  lv_aPq = CreateUnit(lv_aPp, "n002", -10400, -1888, 270);
  gv_ajU = CreateUnit(lv_aPp, "nnsg", 10752, 13760, 270);
  lv_aPq = CreateUnit(lv_aPp, "n002", -9248, -224, 270);
  lv_aPq = CreateUnit(lv_aPp, "n002", -8672, -1248, 270);
}
function f_aPu() {
  var lv_aPv = Player(PLAYER_NEUTRAL_PASSIVE);
  var lv_aPw;
  var lv_aPx;
  var lv_aPy;
  var lv_aPz;
  lv_aPw = CreateUnit(lv_aPv, "Oshd", -14685.1, -14793.7, 343.02);
  SetUnitState(lv_aPw, UNIT_STATE_MANA, 0);
  lv_aPw = CreateUnit(lv_aPv, "nech", 2532.9, 1738.7, 16.92);
  lv_aPw = CreateUnit(lv_aPv, "nfh0", -10880, -3136, 347.568);
  lv_aPw = CreateUnit(lv_aPv, "nshe", 1284.6, 3901.4, 58.273);
  lv_aPw = CreateUnit(lv_aPv, "nshe", 1170.8, 3855.2, 8.679);
  lv_aPw = CreateUnit(lv_aPv, "nshe", 1054.1, 4066.9, 190.344);
  lv_aPw = CreateUnit(lv_aPv, "nshe", 1133, 4276.5, 102.198);
  lv_aPw = CreateUnit(lv_aPv, "nshe", 963.5, 4020.1, 22.775);
  lv_aPw = CreateUnit(lv_aPv, "nshe", 933.4, 4261.6, 217.646);
  lv_aPw = CreateUnit(lv_aPv, "nshe", 895, 3939.2, 0.439);
  lv_aPw = CreateUnit(lv_aPv, "nshe", 1021.1, 3786.4, 249.375);
  lv_aPw = CreateUnit(lv_aPv, "nshe", 1354.8, 4125.2, 3.933);
  lv_aPw = CreateUnit(lv_aPv, "nshe", 1152, 4239.5, 179.171);
  lv_aPw = CreateUnit(lv_aPv, "nshe", 1292.2, 3766, 350.255);
  lv_aPw = CreateUnit(lv_aPv, "nshe", 1166, 4090.7, 330.808);
  lv_aPw = CreateUnit(lv_aPv, "nshe", 942.7, 4142.7, 338.137);
  lv_aPw = CreateUnit(lv_aPv, "nech", 2428.8, 1699.8, 238.64);
  lv_aPw = CreateUnit(lv_aPv, "nech", 2513.5, 1657.7, 116.59);
  lv_aPw = CreateUnit(lv_aPv, "Edem", -13858.9, -14673.9, 206.083);
  SetUnitState(lv_aPw, UNIT_STATE_MANA, 0);
  lv_aPw = CreateUnit(lv_aPv, "Udea", -14282.3, -14474.6, 270.45);
  SetUnitState(lv_aPw, UNIT_STATE_MANA, 0);
  lv_aPw = CreateUnit(lv_aPv, "Ulic", -14110.4, -15427.8, 107.069);
  SetUnitState(lv_aPw, UNIT_STATE_MANA, 0);
  lv_aPw = CreateUnit(lv_aPv, "Hblm", -14390.7, -15399.4, 66.36);
  SetUnitState(lv_aPw, UNIT_STATE_MANA, 0);
  lv_aPw = CreateUnit(lv_aPv, "hdhw", 10983.1, 7591.1, 281.4);
  lv_aPw = CreateUnit(lv_aPv, "nech", 15184.8, 15224.5, 346.541);
  lv_aPw = CreateUnit(lv_aPv, "Hpal", -14536.5, -14582.6, 299.97);
  SetUnitState(lv_aPw, UNIT_STATE_MANA, 0);
  lv_aPw = CreateUnit(lv_aPv, "Ekee", -14711.6, -15029.1, 11.949);
  SetUnitState(lv_aPw, UNIT_STATE_MANA, 0);
  lv_aPw = CreateUnit(lv_aPv, "Emoo", -13750.3, -14901.5, 181.06);
  SetUnitState(lv_aPw, UNIT_STATE_MANA, 0);
  lv_aPw = CreateUnit(lv_aPv, "ncrb", 15306.8, 15258.4, 293.366);
  lv_aPw = CreateUnit(lv_aPv, "Hamg", -14602.4, -15241.8, 43.544);
  SetUnitState(lv_aPw, UNIT_STATE_MANA, 0);
  lv_aPw = CreateUnit(lv_aPv, "Udre", -13765.7, -15118.1, 160.292);
  SetUnitState(lv_aPw, UNIT_STATE_MANA, 0);
  lv_aPw = CreateUnit(lv_aPv, "ndwm", 15464.9, 15202.4, 309.384);
  lv_aPw = CreateUnit(lv_aPv, "nfbr", 15335.8, 15116.9, 29.192);
  lv_aPw = CreateUnit(lv_aPv, "Hjai", -14035.8, -14549.6, 237.71);
  lv_aPw = CreateUnit(lv_aPv, "nshe", 10120, 9763, 0.626);
  lv_aPw = CreateUnit(lv_aPv, "nshe", 10103.1, 9651.4, 238.784);
  gv_ajQ = CreateUnit(lv_aPv, "hkni", -11946.8, -8857.3, 46.16);
  lv_aPw = CreateUnit(lv_aPv, "nshe", 10202.8, 9674.3, 289.543);
  lv_aPw = CreateUnit(lv_aPv, "nshe", 10170.2, 9836.5, 29.565);
  lv_aPw = CreateUnit(lv_aPv, "nshe", 10074.8, 9829.1, 43.738);
  lv_aPw = CreateUnit(lv_aPv, "nfro", 15206.6, 15098, 43.617);
  lv_aPw = CreateUnit(lv_aPv, "nhmc", 15111.8, 15142.8, 93.442);
  lv_aPw = CreateUnit(lv_aPv, "ndog", 9276.9, 9702, 69.414);
  lv_aPw = CreateUnit(lv_aPv, "ndog", 6512.4, 7942.5, 23.16);
  lv_aPw = CreateUnit(lv_aPv, "nrac", 8351.1, 7191.1, 235.411);
  lv_aPw = CreateUnit(lv_aPv, "nrac", 9289.5, 12035.2, 205.747);
  lv_aPw = CreateUnit(lv_aPv, "nrac", 5066.5, 8444.5, 259.604);
  lv_aPw = CreateUnit(lv_aPv, "npng", 15217.9, 15057.5, 124.006);
  lv_aPw = CreateUnit(lv_aPv, "npig", 15339.4, 14969.4, 105.329);
  lv_aPw = CreateUnit(lv_aPv, "nsea", 15454.4, 15026.9, 128.434);
  lv_aPw = CreateUnit(lv_aPv, "nrat", 15197.6, 14943.4, 74.742);
  lv_aPw = CreateUnit(lv_aPv, "nrac", 15274.8, 14842, 316.746);
  lv_aPw = CreateUnit(lv_aPv, "nder", 15129.2, 14805.3, 296.673);
  lv_aPw = CreateUnit(lv_aPv, "nskk", 15095.2, 14962.9, 179.863);
  lv_aPw = CreateUnit(lv_aPv, "necr", 15043.2, 15042.8, 223.754);
  gv_akJ = CreateUnit(lv_aPv, "ugho", 10525.9, 5676.1, 16.26);
  lv_aPw = CreateUnit(lv_aPv, "Hant", -13883.6, -15338.9, 134.02);
  SetUnitState(lv_aPw, UNIT_STATE_MANA, 0);
  gv_ajR = CreateUnit(lv_aPv, "u007", 11083.6, 5476.8, 120.36);
}
function f_aPA() {
  var lv_aPB;
  var lv_aPC;
  var lv_aPD;
  var lv_aPE;
  var lv_aPF;
  lv_aPB = Player(8);
  gv_ajS = CreateUnit(lv_aPB, "hcas", 8384, 9152, 270);
  SetUnitColor(gv_ajS, ConvertPlayerColor(0));
  lv_aPC = CreateUnit(lv_aPB, "hmpr", 7680, 10112, 270);
  SetUnitColor(lv_aPC, ConvertPlayerColor(5));
  lv_aPC = CreateUnit(lv_aPB, "hgtw", 6720, 11968, 270);
  lv_aPC = CreateUnit(lv_aPB, "hgtw", 6400, 12224, 270);
  lv_aPC = CreateUnit(lv_aPB, "hctw", 8384, 12032, 270);
  lv_aPC = CreateUnit(lv_aPB, "hgtw", 8128, 12032, 270);
  lv_aPC = CreateUnit(lv_aPB, "hgtw", 8384, 12288, 270);
  lv_aPC = CreateUnit(lv_aPB, "hgtw", 5952, 11648, 270);
  lv_aPC = CreateUnit(lv_aPB, "hgtw", 6528, 10688, 270);
  lv_aPC = CreateUnit(lv_aPB, "hgtw", 8000, 11072, 270);
  lv_aPC = CreateUnit(lv_aPB, "hgtw", 7168, 8448, 270);
  lv_aPC = CreateUnit(lv_aPB, "hgtw", 5632, 9344, 270);
  lv_aPC = CreateUnit(lv_aPB, "hgtw", 6144, 8832, 270);
  lv_aPC = CreateUnit(lv_aPB, "hgtw", 5504, 10624, 270);
  gv_ajO = CreateUnit(lv_aPB, "oalt", 288, 12448, 270);
  lv_aPC = CreateUnit(lv_aPB, "hctw", 6400, 11904, 270);
  lv_aPC = CreateUnit(lv_aPB, "hatw", 8320, 9664, 270);
  lv_aPC = CreateUnit(lv_aPB, "hgtw", 5504, 10112, 270);
  lv_aPC = CreateUnit(lv_aPB, "hmpr", 3968, -960, 270);
  SetUnitColor(lv_aPC, ConvertPlayerColor(5));
  lv_aPC = CreateUnit(lv_aPB, "hlum", -12800, -7360, 270);
  lv_aPC = CreateUnit(lv_aPB, "nfoh", 3968, 10752, 270);
  lv_aPC = CreateUnit(lv_aPB, "nfoh", 4608, -1216, 270);
  lv_aPC = CreateUnit(lv_aPB, "hmpr", -10176, -6656, 270);
  SetUnitColor(lv_aPC, ConvertPlayerColor(5));
  lv_aPC = CreateUnit(lv_aPB, "hmpr", 64, 3008, 270);
  SetUnitColor(lv_aPC, ConvertPlayerColor(5));
  lv_aPC = CreateUnit(lv_aPB, "ogre", 12960, 11168, 270);
  lv_aPB = Player(9);
  lv_aPC = CreateUnit(lv_aPB, "nfnp", -10176, -7232, 270);
  lv_aPC = CreateUnit(lv_aPB, "hgtw", -1216, 512, 270);
  lv_aPC = CreateUnit(lv_aPB, "nfnp", 7808, 9728, 270);
  gv_ajV = CreateUnit(lv_aPB, "hgra", 10752, 8512, 180);
  SetUnitColor(gv_ajV, ConvertPlayerColor(0));
  lv_aPC = CreateUnit(lv_aPB, "hgtw", -320, 512, 270);
  lv_aPC = CreateUnit(lv_aPB, "hgtw", -1536, 3456, 270);
  lv_aPC = CreateUnit(lv_aPB, "nfnp", 192, 2688, 270);
  lv_aPC = CreateUnit(lv_aPB, "hgtw", -2368, 1600, 270);
  lv_aPC = CreateUnit(lv_aPB, "hgtw", -2368, 2432, 270);
  lv_aPC = CreateUnit(lv_aPB, "hkee", 13792, 14688, 270);
  lv_aPC = CreateUnit(lv_aPB, "hgtw", -10176, -6464, 270);
  lv_aPC = CreateUnit(lv_aPB, "hgtw", -9536, -6976, 270);
  lv_aPC = CreateUnit(lv_aPB, "hgtw", -10048, -7744, 270);
  lv_aPC = CreateUnit(lv_aPB, "hgtw", -10048, -8896, 270);
  lv_aPC = CreateUnit(lv_aPB, "htow", 14112, 14496, 193.86);
  lv_aPC = CreateUnit(lv_aPB, "hgtw", -10816, -8896, 270);
  lv_aPC = CreateUnit(lv_aPB, "hgtw", 4928, -1920, 270);
  lv_aPC = CreateUnit(lv_aPB, "hgtw", 4416, -1728, 270);
  lv_aPC = CreateUnit(lv_aPB, "hgtw", 3648, -1408, 270);
  lv_aPC = CreateUnit(lv_aPB, "ostr", 14008.2, 14792.9, 175.553);
  lv_aPC = CreateUnit(lv_aPB, "hgtw", 896, 2496, 270);
  lv_aPC = CreateUnit(lv_aPB, "hgtw", 896, 1536, 270);
  lv_aPC = CreateUnit(lv_aPB, "nft2", 9472, 6272, 270);
  lv_aPC = CreateUnit(lv_aPB, "nft2", 9984, 5184, 270);
  lv_aPB = Player(10);
  lv_aPC = CreateUnit(lv_aPB, "ntt2", -1952, 12576, 270);
  lv_aPC = CreateUnit(lv_aPB, "nct2", -1248, -11104, 270);
  lv_aPC = CreateUnit(lv_aPB, "ntn2", 4384, 6816, 270);
  lv_aPC = CreateUnit(lv_aPB, "ntn2", 4768, 7200, 270);
  lv_aPC = CreateUnit(lv_aPB, "ntn2", 5344, 3936, 319.237);
  lv_aPC = CreateUnit(lv_aPB, "ntn2", 6176, 3968, 142.948);
  lv_aPC = CreateUnit(lv_aPB, "nct1", -9824, -12832, 270);
  lv_aPC = CreateUnit(lv_aPB, "nct1", -2080, -11296, 270);
  lv_aPC = CreateUnit(lv_aPB, "ncnt", -1696, -11488, 270);
  lv_aPC = CreateUnit(lv_aPB, "ncnt", -9696, -13792, 270);
  lv_aPC = CreateUnit(lv_aPB, "nct2", -9120, -13728, 270);
  lv_aPC = CreateUnit(lv_aPB, "nct2", -10208, -13408, 270);
  lv_aPC = CreateUnit(lv_aPB, "nct1", -10144, -12960, 270);
  lv_aPC = CreateUnit(lv_aPB, "ncnt", -4256, -12192, 270);
  lv_aPC = CreateUnit(lv_aPB, "nct1", -5024, -11936, 270);
  lv_aPC = CreateUnit(lv_aPB, "nct2", -4192, -11872, 270);
  lv_aPC = CreateUnit(lv_aPB, "ofrt", -448, 14528, 270);
  lv_aPC = CreateUnit(lv_aPB, "ntn2", 7744, 6400, 215.91);
  lv_aPC = CreateUnit(lv_aPB, "ntnt", -7008, 14176, 270);
  lv_aPC = CreateUnit(lv_aPB, "nhns", -8000, 6208, 270);
  lv_aPC = CreateUnit(lv_aPB, "nhns", -8576, 8128, 270);
  lv_aPC = CreateUnit(lv_aPB, "nhns", -6720, 6912, 270);
  lv_aPC = CreateUnit(lv_aPB, "nhns", -6528, 8960, 270);
  lv_aPC = CreateUnit(lv_aPB, "ntt2", -1376, 12256, 270);
  lv_aPC = CreateUnit(lv_aPB, "ntnt", -6624, 14624, 270);
  lv_aPC = CreateUnit(lv_aPB, "ntnt", -3744, 14560, 270);
  lv_aPC = CreateUnit(lv_aPB, "ntt2", -3296, 14688, 270);
  lv_aPC = CreateUnit(lv_aPB, "ntn2", 5856, 3552, 61.743);
  lv_aPC = CreateUnit(lv_aPB, "ntn2", 7712, 5664, 270);
  lv_aPC = CreateUnit(lv_aPB, "nmg1", 5280, -3424, 270);
  lv_aPC = CreateUnit(lv_aPB, "nmg0", 4768, -3808, 270);
  lv_aPC = CreateUnit(lv_aPB, "nmg0", 4896, -3040, 270);
  lv_aPC = CreateUnit(lv_aPB, "nmg1", 4384, -3360, 270);
  lv_aPC = CreateUnit(lv_aPB, "nmg1", 5536, -6560, 270);
  lv_aPC = CreateUnit(lv_aPB, "nmg0", 5792, -5920, 270);
  lv_aPC = CreateUnit(lv_aPB, "nmg1", 5280, -5984, 270);
  lv_aPC = CreateUnit(lv_aPB, "nmg1", 5664, -4384, 270);
  lv_aPC = CreateUnit(lv_aPB, "nmg0", 5408, -4256, 270);
  lv_aPC = CreateUnit(lv_aPB, "nmg0", 5664, -3872, 270);
  lv_aPC = CreateUnit(lv_aPB, "nmg0", 2336, -4128, 270);
  lv_aPC = CreateUnit(lv_aPB, "nmg1", 2848, -4064, 270);
  lv_aPC = CreateUnit(lv_aPB, "nmg1", 2656, -4320, 270);
  lv_aPB = Player(11);
  lv_aPC = CreateUnit(lv_aPB, "u000", -10496, -448, 270);
}
function f_aPG() {
  var lv_aPH;
  var lv_aPI;
  var lv_aPJ;
  var lv_aPK;
  var lv_aPL;
  lv_aPH = Player(8);
  lv_aPI = CreateUnit(lv_aPH, "harm", 6090.5, 8200.9, 270);
  SetUnitColor(lv_aPI, ConvertPlayerColor(0));
  lv_aPI = CreateUnit(lv_aPH, "hars", 8813.5, 7744.5, 172.03);
  SetUnitColor(lv_aPI, ConvertPlayerColor(0));
  lv_aPI = CreateUnit(lv_aPH, "hbla", 8786.3, 11183.9, 231.88);
  SetUnitColor(lv_aPI, ConvertPlayerColor(0));
  lv_aPI = CreateUnit(lv_aPH, "hvlt", 7616, 11008, 140.87);
  SetUnitColor(lv_aPI, ConvertPlayerColor(8));
  lv_aPI = CreateUnit(lv_aPH, "hbar", -516.8, 2440.2, 318.63);
  SetUnitColor(lv_aPI, ConvertPlayerColor(8));
  lv_aPI = CreateUnit(lv_aPH, "hhou", 5984, 9120, 41.23);
  SetUnitColor(lv_aPI, ConvertPlayerColor(8));
  lv_aPI = CreateUnit(lv_aPH, "hbar", 5946.7, 10355, 286.64);
  SetUnitColor(lv_aPI, ConvertPlayerColor(8));
  gv_akN = CreateUnit(lv_aPH, "Hvwd", 7433.2, 12090.5, 94.91);
  SetHeroLevel(gv_akN, 140, false);
  UnitAddItemToSlotById(gv_akN, "dphe", 0);
  UnitAddItemToSlotById(gv_akN, "fwss", 1);
  UnitAddItemToSlotById(gv_akN, "jpnt", 2);
  UnitAddItemToSlotById(gv_akN, "I00K", 3);
  lv_aPI = CreateUnit(lv_aPH, "hcth", 3648.8, 11297.2, 90.856);
  SetUnitAcquireRange(lv_aPI, 200);
  lv_aPI = CreateUnit(lv_aPH, "hrif", 194.8, 12015.8, 252.816);
  lv_aPI = CreateUnit(lv_aPH, "hcth", 3491.9, 11043.2, 151.688);
  SetUnitAcquireRange(lv_aPI, 200);
  lv_aPI = CreateUnit(lv_aPH, "hcth", 4020.9, 11141.3, 356.387);
  SetUnitAcquireRange(lv_aPI, 200);
  lv_aPI = CreateUnit(lv_aPH, "hcth", 3634.1, 10734.1, 260.563);
  SetUnitAcquireRange(lv_aPI, 200);
  lv_aPI = CreateUnit(lv_aPH, "hmtt", 6929, 9033.3, 210.38);
  lv_aPI = CreateUnit(lv_aPH, "hmtt", 8724.6, 10519.4, 111.6);
  lv_aPI = CreateUnit(lv_aPH, "hmtt", 6312, 11433.2, 350.29);
  lv_aPI = CreateUnit(lv_aPH, "hgry", 6064.8, 9676, 106.57);
  lv_aPI = CreateUnit(lv_aPH, "hgry", 7308.7, 11033, 126.53);
  lv_aPI = CreateUnit(lv_aPH, "hgyr", 6639.6, 8597.5, 60.22);
  lv_aPI = CreateUnit(lv_aPH, "hgyr", 8401.4, 11010.1, 260.92);
  lv_aPI = CreateUnit(lv_aPH, "earc", 3297.6, 10801.6, 333.74);
  lv_aPI = CreateUnit(lv_aPH, "hgyr", -774.9, 2135.9, 356.26);
  lv_aPI = CreateUnit(lv_aPH, "hgry", -259.8, 971.5, 105.31);
  lv_aPI = CreateUnit(lv_aPH, "hgry", -319.2, 3029, 201.8);
  lv_aPI = CreateUnit(lv_aPH, "hmtt", -1811.5, 2101.8, 324.04);
  lv_aPI = CreateUnit(lv_aPH, "hmtt", -10780.9, -8244.5, 47.45);
  lv_aPI = CreateUnit(lv_aPH, "hmtt", -11778.6, -6676.7, 250.12);
  lv_aPI = CreateUnit(lv_aPH, "hgyr", -12489.2, -7942.2, 308.1);
  lv_aPI = CreateUnit(lv_aPH, "hgyr", -9705.3, -7827.2, 56.71);
  lv_aPI = CreateUnit(lv_aPH, "hgyr", -10378.8, -6787.9, 164.29);
  lv_aPI = CreateUnit(lv_aPH, "hgry", -10441.4, -7713.8, 272.93);
  lv_aPI = CreateUnit(lv_aPH, "hgry", 9720.2, 8030.4, 126.53);
  lv_aPI = CreateUnit(lv_aPH, "hgyr", 9054.3, 8711.2, 260.92);
  lv_aPH = Player(9);
  gv_ajT = CreateUnit(lv_aPH, "eden", 2304, 8000, 336.708);
  lv_aPI = CreateUnit(lv_aPH, "ofor", -224, 3264, 276.96);
  SetUnitColor(lv_aPI, ConvertPlayerColor(1));
  gv_akc = CreateUnit(lv_aPH, "Ewar", 11041.3, 6050.7, 220.16);
  lv_aPI = CreateUnit(lv_aPH, "obar", 160, 1440, 312.22);
  SetUnitColor(lv_aPI, ConvertPlayerColor(1));
  gv_akk = CreateUnit(lv_aPH, "Harf", 8052.5, 9442.8, 125);
  SetHeroLevel(gv_akk, 100, false);
  SelectHeroSkill(gv_akk, "AHhb");
  SelectHeroSkill(gv_akk, "AHhb");
  SelectHeroSkill(gv_akk, "AHhb");
  SelectHeroSkill(gv_akk, "AHtc");
  SelectHeroSkill(gv_akk, "AHtc");
  SelectHeroSkill(gv_akk, "AHtc");
  SelectHeroSkill(gv_akk, "ANdb");
  SelectHeroSkill(gv_akk, "ANdb");
  SelectHeroSkill(gv_akk, "ANdb");
  SelectHeroSkill(gv_akk, "AHad");
  SelectHeroSkill(gv_akk, "AHad");
  SelectHeroSkill(gv_akk, "AHad");
  SelectHeroSkill(gv_akk, "AHbh");
  SelectHeroSkill(gv_akk, "AHbh");
  SelectHeroSkill(gv_akk, "AHbh");
  SelectHeroSkill(gv_akk, "Acdb");
  SelectHeroSkill(gv_akk, "Acdb");
  SelectHeroSkill(gv_akk, "Acdb");
  SelectHeroSkill(gv_akk, "Acdb");
  SelectHeroSkill(gv_akk, "AOs2");
  SelectHeroSkill(gv_akk, "AOs2");
  SelectHeroSkill(gv_akk, "AOs2");
  SelectHeroSkill(gv_akk, "AOs2");
  SelectHeroSkill(gv_akk, "AOcl");
  SelectHeroSkill(gv_akk, "AOcl");
  SelectHeroSkill(gv_akk, "AOcl");
  gv_ajZ = CreateUnit(lv_aPH, "n003", -10659.6, -3298.7, 277.88);
  gv_aky = CreateUnit(lv_aPH, "hmtm", 522.4, 3117.9, 209.74);
  gv_akA = CreateUnit(lv_aPH, "ncpn", 4354.6, -13174.1, 271.747);
  SetUnitColor(gv_akA, ConvertPlayerColor(9));
  gv_akb = CreateUnit(lv_aPH, "nmr5", 1408, 384, 234.187);
  SetUnitColor(gv_akb, ConvertPlayerColor(12));
  lv_aPI = CreateUnit(lv_aPH, "otrb", -9600, -8640, 208.29);
  lv_aPI = CreateUnit(lv_aPH, "owtw", -9248, 6496, 130.34);
  lv_aPI = CreateUnit(lv_aPH, "hvlt", -736, 1056, 293.92);
  SetUnitColor(lv_aPI, ConvertPlayerColor(8));
  lv_aPI = CreateUnit(lv_aPH, "otto", -11526.8, -7861.7, 320.8);
  SetUnitColor(lv_aPI, ConvertPlayerColor(5));
  lv_aPI = CreateUnit(lv_aPH, "osld", -10240.8, -8351.7, 242.82);
  SetUnitColor(lv_aPI, ConvertPlayerColor(5));
  lv_aPI = CreateUnit(lv_aPH, "ovln", -12614.4, -6674.4, 299.143);
  SetUnitColor(lv_aPI, ConvertPlayerColor(5));
  lv_aPI = CreateUnit(lv_aPH, "nech", -11489.1, -6477.4, 20.59);
  lv_aPI = CreateUnit(lv_aPH, "nech", 10241, 9575.5, 332.97);
  lv_aPI = CreateUnit(lv_aPH, "obea", -1760, 2976, 304.16);
  SetUnitColor(lv_aPI, ConvertPlayerColor(1));
  lv_aPI = CreateUnit(lv_aPH, "hvlt", 3685.8, -1105.6, 334.528);
  SetUnitColor(lv_aPI, ConvertPlayerColor(8));
  gv_akB = CreateUnit(lv_aPH, "opeo", 10273.5, 10680.6, 202.207);
  lv_aPI = CreateUnit(lv_aPH, "hvlt", -10880, -7264, 310.96);
  SetUnitColor(lv_aPI, ConvertPlayerColor(8));
  lv_aPI = CreateUnit(lv_aPH, "nech", 10275.8, 9981.9, 182.31);
  gv_akf = CreateUnit(lv_aPH, "unec", 7813.2, 9271.8, 277.92);
  SetUnitColor(gv_akf, ConvertPlayerColor(0));
  gv_akd = CreateUnit(lv_aPH, "hsor", 4286.9, -936.8, 266.224);
  lv_aPI = CreateUnit(lv_aPH, "edoc", 2470.1, 7823.8, 354.969);
  SetUnitColor(lv_aPI, ConvertPlayerColor(6));
  lv_aPI = CreateUnit(lv_aPH, "ogru", 10422.9, 8504.8, 176.86);
  SetUnitColor(lv_aPI, ConvertPlayerColor(0));
  lv_aPI = CreateUnit(lv_aPH, "nemi", 10751.3, 13563.5, 272.84);
  SetUnitColor(lv_aPI, ConvertPlayerColor(2));
  lv_aPI = CreateUnit(lv_aPH, "nwat", 1221.1, 318.2, 189.566);
  SetUnitColor(lv_aPI, ConvertPlayerColor(12));
  lv_aPI = CreateUnit(lv_aPH, "nech", -11595.6, -6400.7, 297.31);
  lv_aPI = CreateUnit(lv_aPH, "nech", -11653.1, -6431.9, 13.6);
  lv_aPI = CreateUnit(lv_aPH, "nech", -11589.4, -6493.3, 90.72);
  lv_aPI = CreateUnit(lv_aPH, "nech", -11599.2, -6308.6, 14.01);
  gv_akC = CreateUnit(lv_aPH, "orai", 211.7, 4359.7, 284.28);
  gv_akE = CreateUnit(lv_aPH, "otau", -87.7, 2464.1, 321.08);
  gv_akF = CreateUnit(lv_aPH, "ohun", -3784.8, 10435.6, 326.294);
  gv_akG = CreateUnit(lv_aPH, "ocat", -12708.3, 13949.5, 308.39);
  lv_aPI = CreateUnit(lv_aPH, "okod", -12342.6, 14147.5, 262.09);
  gv_aka = CreateUnit(lv_aPH, "hspt", 3751.3, 11071.9, 130.9);
  SetUnitState(gv_aka, UNIT_STATE_MANA, 0);
  SetUnitAcquireRange(gv_aka, 200);
  lv_aPI = CreateUnit(lv_aPH, "okod", -12745, 14196.4, 311.77);
  gv_akl = CreateUnit(lv_aPH, "owyv", -1142.9, 268.4, 325.334);
  SetUnitColor(gv_akl, ConvertPlayerColor(5));
  gv_akm = CreateUnit(lv_aPH, "otbr", -7761.9, -5582.5, 254.711);
  SetUnitColor(gv_akm, ConvertPlayerColor(6));
  gv_akz = CreateUnit(lv_aPH, "odoc", -13147.9, -7351.4, 329.41);
  SetUnitColor(gv_akz, ConvertPlayerColor(1));
  gv_ajW = CreateUnit(lv_aPH, "esen", -9552.5, -7781.9, 129.722);
  SetUnitColor(gv_ajW, ConvertPlayerColor(0));
  gv_akD = CreateUnit(lv_aPH, "ospw", 9067.8, -12396.3, 223.839);
  lv_aPI = CreateUnit(lv_aPH, "uaco", 11052.8, 6491.6, 217.159);
  lv_aPI = CreateUnit(lv_aPH, "hbar", -10632.7, -6465.3, 270.995);
  SetUnitColor(lv_aPI, ConvertPlayerColor(8));
  lv_aPH = Player(10);
  lv_aPI = CreateUnit(lv_aPH, "nhrq", -6639.9, 7143.6, 60.74);
  gv_ake = CreateUnit(lv_aPH, "nhrh", -8209.6, 10223.4, 297.96);
  lv_aPI = CreateUnit(lv_aPH, "ncks", -4571.6, -12156.2, 93.397);
  gv_akL = CreateUnit(lv_aPH, "nftk", -10192.1, 1709.9, 22.14);
  gv_ajY = CreateUnit(lv_aPH, "nbld", 8375.5, 3677.7, 99.1);
  lv_aPI = CreateUnit(lv_aPH, "ncim", -9556.8, -13114.8, 79.896);
  lv_aPI = CreateUnit(lv_aPH, "ncer", -9910.4, -13167.6, 162.724);
  lv_aPI = CreateUnit(lv_aPH, "ncer", -9309.9, -12870.4, 75.923);
  lv_aPI = CreateUnit(lv_aPH, "ncks", -9568.4, -13440.9, 77.764);
  lv_aPI = CreateUnit(lv_aPH, "ncer", -4447.9, -11840.3, 52.511);
  lv_aPI = CreateUnit(lv_aPH, "ncer", -4795.2, -11895.1, 134.482);
  lv_aPI = CreateUnit(lv_aPH, "ncim", -9128.2, -13318, 352.443);
  lv_aPI = CreateUnit(lv_aPH, "ncim", -4595.6, -11885.2, 146.906);
  lv_aPI = CreateUnit(lv_aPH, "ncer", -1862.8, -11230, 172.491);
  lv_aPI = CreateUnit(lv_aPH, "ncer", -1506.3, -10919, 133.61);
  lv_aPI = CreateUnit(lv_aPH, "ncks", -1506.1, -11321, 127.961);
  lv_aPI = CreateUnit(lv_aPH, "ncim", -1743.7, -10981.9, 146.906);
  gv_akH = CreateUnit(lv_aPH, "ncnk", -5478.5, -13557, 266.01);
  lv_aPI = CreateUnit(lv_aPH, "nbda", -1604.9, 12266.8, 214.567);
  SetUnitState(lv_aPI, UNIT_STATE_MANA, 0);
  lv_aPI = CreateUnit(lv_aPH, "nhrq", -7773.2, 6313.6, 70.902);
  lv_aPI = CreateUnit(lv_aPH, "nbdo", -3710, 14290.8, 307.42);
  lv_aPI = CreateUnit(lv_aPH, "nbdo", -3410.7, 14290.8, 257.19);
  lv_aPI = CreateUnit(lv_aPH, "nbda", -3881.1, 14361.6, 325.78);
  lv_aPI = CreateUnit(lv_aPH, "nbda", -3515.5, 14490.7, 275.84);
  lv_aPI = CreateUnit(lv_aPH, "nbdo", -2161.5, 12414.4, 188.314);
  SetUnitState(lv_aPI, UNIT_STATE_MANA, 0);
  gv_akK = CreateUnit(lv_aPH, "nbdw", -653.4, 14283.2, 212.24);
  lv_aPI = CreateUnit(lv_aPH, "nbdo", -596.2, 14031.6, 188.314);
  SetUnitState(lv_aPI, UNIT_STATE_MANA, 0);
  lv_aPI = CreateUnit(lv_aPH, "nbdo", -849.2, 14117.6, 188.314);
  SetUnitState(lv_aPI, UNIT_STATE_MANA, 0);
  lv_aPI = CreateUnit(lv_aPH, "nbda", -293.8, 14190.9, 203.955);
  SetUnitState(lv_aPI, UNIT_STATE_MANA, 0);
  lv_aPI = CreateUnit(lv_aPH, "nbda", -861.1, 14580.3, 223.344);
  SetUnitState(lv_aPI, UNIT_STATE_MANA, 0);
  lv_aPI = CreateUnit(lv_aPH, "nbdo", -1976.8, 12162.4, 188.314);
  SetUnitState(lv_aPI, UNIT_STATE_MANA, 0);
  lv_aPI = CreateUnit(lv_aPH, "nbdo", -1925.1, 11912.1, 188.314);
  SetUnitState(lv_aPI, UNIT_STATE_MANA, 0);
  lv_aPI = CreateUnit(lv_aPH, "nbda", -1745.1, 12101.5, 171.62);
  SetUnitState(lv_aPI, UNIT_STATE_MANA, 0);
  lv_aPI = CreateUnit(lv_aPH, "nbda", -1819, 12288.2, 214.567);
  SetUnitState(lv_aPI, UNIT_STATE_MANA, 0);
  lv_aPI = CreateUnit(lv_aPH, "nbdo", -6362.2, 14192.2, 310.004);
  SetUnitState(lv_aPI, UNIT_STATE_MANA, 0);
  lv_aPI = CreateUnit(lv_aPH, "nbdo", -6522.6, 14033.6, 310.004);
  SetUnitState(lv_aPI, UNIT_STATE_MANA, 0);
  lv_aPI = CreateUnit(lv_aPH, "nbda", -6358, 14391.8, 299.603);
  SetUnitState(lv_aPI, UNIT_STATE_MANA, 0);
  lv_aPI = CreateUnit(lv_aPH, "nbdo", -954.7, 14344.6, 188.314);
  SetUnitState(lv_aPI, UNIT_STATE_MANA, 0);
  lv_aPI = CreateUnit(lv_aPH, "nbda", -6598.2, 14293.3, 299.603);
  SetUnitState(lv_aPI, UNIT_STATE_MANA, 0);
  lv_aPI = CreateUnit(lv_aPH, "nbda", -6727.6, 14066.1, 299.603);
  SetUnitState(lv_aPI, UNIT_STATE_MANA, 0);
  gv_akI = CreateUnit(lv_aPH, "n004", 10315.6, -11520.8, 306.86);
  SetUnitColor(gv_akI, ConvertPlayerColor(11));
  lv_aPI = CreateUnit(lv_aPH, "nhrq", -8354, 7946.7, 321.43);
  lv_aPI = CreateUnit(lv_aPH, "nhrq", -6357, 8696.7, 311.82);
  gv_akt = CreateUnit(lv_aPH, "ndqt", 3931, -14074, 28);
  SetUnitState(gv_akt, UNIT_STATE_MANA, 0);
  gv_akr = CreateUnit(lv_aPH, "nbzd", -11094.8, 7053, 42.7);
  gv_ajP = CreateUnit(lv_aPH, "npfm", 9828.1, -2344.7, 306.136);
  SetUnitColor(gv_ajP, ConvertPlayerColor(2));
  gv_ajX = CreateUnit(lv_aPH, "nbdm", 13838.9, -3064.2, 275.55);
  lv_aPI = CreateUnit(lv_aPH, "ndrd", 14255.7, 6527.3, 245.12);
  lv_aPI = CreateUnit(lv_aPH, "nmrr", 2598, -3891.5, 297.308);
  lv_aPI = CreateUnit(lv_aPH, "nbda", -3214.7, 14440.8, 250.92);
  gv_aku = CreateUnit(lv_aPH, "narg", 4293.5, -14565.8, 44.275);
  gv_akq = CreateUnit(lv_aPH, "n00L", 3246.8, -14205.5, 18.45);
  gv_akh = CreateUnit(lv_aPH, "n00K", 3960.8, -13312.6, 345.32);
  gv_akw = CreateUnit(lv_aPH, "nanw", -5429.5, -13144.1, 303.22);
  gv_akx = CreateUnit(lv_aPH, "nowb", 8450.9, -13977.7, 268.155);
  gv_aks = CreateUnit(lv_aPH, "nwns", 14007.5, -14345.8, 228.264);
  lv_aPI = CreateUnit(lv_aPH, "nmrr", 2497.6, -4210.6, 51.714);
  lv_aPI = CreateUnit(lv_aPH, "nmmu", 2266.5, -3917.7, 271.052);
  SetUnitState(lv_aPI, UNIT_STATE_MANA, 0);
  gv_aki = CreateUnit(lv_aPH, "nahy", 5890.2, -9701.1, 109.55);
  gv_akM = CreateUnit(lv_aPH, "nsqa", -11814, -1684, 236);
  gv_akj = CreateUnit(lv_aPH, "nwld", 10178.9, -7331.5, 314.607);
  SetUnitColor(gv_akj, ConvertPlayerColor(2));
  lv_aPI = CreateUnit(lv_aPH, "nban", 4615, 6759.2, 335.296);
  lv_aPI = CreateUnit(lv_aPH, "nban", 4871.9, 6973.2, 295.114);
  lv_aPI = CreateUnit(lv_aPH, "nass", 4658.8, 6985.1, 309.451);
  lv_aPI = CreateUnit(lv_aPH, "nass", 7848.6, 5992.7, 163.455);
  lv_aPI = CreateUnit(lv_aPH, "nban", 7690.2, 6148.6, 174.192);
  lv_aPI = CreateUnit(lv_aPH, "nban", 7672.5, 5881.6, 149.058);
  lv_aPI = CreateUnit(lv_aPH, "nban", 7440.8, 5849.5, 130.904);
  lv_aPI = CreateUnit(lv_aPH, "nban", 5564.7, 4052.6, 61.909);
  lv_aPI = CreateUnit(lv_aPH, "nban", 5911.7, 4083.7, 151.891);
  lv_aPI = CreateUnit(lv_aPH, "nass", 5969.2, 3769.4, 124.859);
  lv_aPI = CreateUnit(lv_aPH, "nass", 5653.3, 3731.4, 89.843);
  lv_aPI = CreateUnit(lv_aPH, "nmrr", 5537.2, -3354.9, 33.743);
  lv_aPI = CreateUnit(lv_aPH, "nmrr", 4982.3, -3344.7, 48.023);
  lv_aPI = CreateUnit(lv_aPH, "nmrr", 4948.7, -3582.9, 228.58);
  lv_aPI = CreateUnit(lv_aPH, "nmrm", 5364.7, -3798, 141.918);
  SetUnitState(lv_aPI, UNIT_STATE_MANA, 0);
  lv_aPI = CreateUnit(lv_aPH, "nmmu", 4647.1, -3166, 127.464);
  SetUnitState(lv_aPI, UNIT_STATE_MANA, 0);
  lv_aPI = CreateUnit(lv_aPH, "nmmu", 5025.3, -4022.4, 271.052);
  SetUnitState(lv_aPI, UNIT_STATE_MANA, 0);
  lv_aPI = CreateUnit(lv_aPH, "nmmu", 5540.1, -6215.3, 143.472);
  SetUnitState(lv_aPI, UNIT_STATE_MANA, 0);
  lv_aPI = CreateUnit(lv_aPH, "nmrm", 5797.1, -6303.4, 129.814);
  SetUnitState(lv_aPI, UNIT_STATE_MANA, 0);
  lv_aPI = CreateUnit(lv_aPH, "nmrr", 5527.6, -5911.2, 103.58);
  lv_aPI = CreateUnit(lv_aPH, "nmrr", 5241, -6333.6, 222.127);
  lv_aPI = CreateUnit(lv_aPH, "nmrr", 5254.8, -3988.6, 237.411);
  lv_aPI = CreateUnit(lv_aPH, "nmrr", 4462.6, -3666.5, 154.65);
  lv_aPI = CreateUnit(lv_aPH, "nmmu", 5177.7, -3159.6, 88.146);
  SetUnitState(lv_aPI, UNIT_STATE_MANA, 0);
  gv_akg = CreateUnit(lv_aPH, "n006", 1573.5, -2340.6, 338.314);
  gv_akv = CreateUnit(lv_aPH, "n006", 7115.4, -5143.4, 143.6);
  gv_akn = CreateUnit(lv_aPH, "n006", 7141.6, -7297.9, 164.11);
  lv_aPH = Player(11);
  lv_aPI = CreateUnit(lv_aPH, "ushd", 13324.9, 163.4, 109.84);
  lv_aPI = CreateUnit(lv_aPH, "ushd", 9883.8, -2378.2, 126.76);
  lv_aPI = CreateUnit(lv_aPH, "ushd", 13855.3, -3206.8, 7);
  lv_aPI = CreateUnit(lv_aPH, "ushd", 10220.1, -7381.2, 293.85);
  gv_ako = CreateUnit(lv_aPH, "n007", -9709.5, -1289.6, 340.61);
  gv_aaU[1] = CreateUnit(lv_aPH, "Nalc", 2063.5, 14384.8, 338.89);
  SetUnitState(gv_aaU[1], UNIT_STATE_MANA, 0);
  gv_aaU[2] = CreateUnit(lv_aPH, "Nbst", -11254.7, 4772.4, 255.149);
  gv_aaU[3] = CreateUnit(lv_aPH, "Obla", -10357.2, 14316.5, 288.482);
  gv_aaU[4] = CreateUnit(lv_aPH, "Nbrn", 1967.1, -10242.8, 54.86);
  gv_aaU[5] = CreateUnit(lv_aPH, "Hmkg", -9588.8, -1076.8, 305.921);
  gv_aaU[6] = CreateUnit(lv_aPH, "Npbm", -1753.2, -3218.1, 274.01);
  gv_aaU[7] = CreateUnit(lv_aPH, "Nngs", -176.2, -14143.5, 241.353);
  SetUnitColor(gv_aaU[7], ConvertPlayerColor(10));
  gv_aaU[8] = CreateUnit(lv_aPH, "Nplh", 14629.2, -11387.4, 216.945);
  gv_aaU[9] = CreateUnit(lv_aPH, "Ntin", 13383.4, 188.4, 192.2);
  gv_akp = CreateUnit(lv_aPH, "n00I", -9297.8, -1041.3, 263.54);
}
function f_aPM() {
  var lv_aPN = 0;
  var lv_aPO = Location(0, 0);
  var lv_aPP = CreateUnit(
    Player(PLAYER_NEUTRAL_PASSIVE),
    "hpea",
    0.0,
    0.0,
    0.0
  );
  var lv_aPQ = CreateGroup();
  gv_alu = Player(11);
  StartMeleeAI(gv_amG, "map.ai");
  StartMeleeAI(gv_alu, "map.ai");
  FogMaskEnable(true);
  FogEnable(true);
  lv_aPQ = CreateGroup();
  GroupEnumUnitsInRange(lv_aPQ, -14200, -15000, 1000, null);
  ForGroup(lv_aPQ, f_aMB);
  gv_alu = Player(PLAYER_NEUTRAL_PASSIVE);
  ForForce(bj_FORCE_ALL_PLAYERS, f_aIs);
  SetCameraBoundsToRect(gv_adR);
  PanCameraToTimed(-14200, -15000, 0.0);
  DisplayTimedTextToPlayer(
    GetLocalPlayer(),
    0.0,
    0.0,
    600,
    "|cffffcc00Notice: |rYou can continue your hero with '-load <code>', but if you do, the '-repick' option will be disabled."
  );
  SetCineFilterBlendMode(BLEND_MODE_BLEND);
  SetCineFilterTexMapFlags(TEXMAP_FLAG_NONE);
  SetCineFilterStartUV(0, 0, 1, 1);
  SetCineFilterEndUV(0, 0, 1, 1);
  SetCineFilterStartColor(255, 255, 255, 255);
  SetCineFilterEndColor(255, 255, 255, 0);
  SetCineFilterDuration(5);
  ExecuteFunc("f_aPR");
  ExecuteFunc("f_aPS");
  TimerStart(CreateTimer(), 15, false, f_aIu);
  SetMapFlag(MAP_LOCK_RESOURCE_TRADING, true);
  lv_aPN = 0;
  do {
    if (lv_aPN > 8) {
      break;
    }
    SetPlayerAllianceStateBJ(Player(lv_aPN), Player(8), 3);
    SetPlayerAllianceStateBJ(Player(8), Player(lv_aPN), 3);
    SetPlayerAllianceStateBJ(Player(lv_aPN), Player(9), 2);
    SetPlayerAllianceStateBJ(Player(9), Player(lv_aPN), 2);
    lv_aPN = lv_aPN + 1;
  } while (true);
  SetPlayerAllianceStateBJ(Player(8), Player(9), 3);
  SetPlayerAllianceStateBJ(Player(9), Player(8), 2);
  SetPlayerAllianceStateBJ(Player(9), Player(14), 2);
  SetPlayerAllianceStateBJ(Player(8), Player(14), 2);
  SetPlayerAllianceStateBJ(Player(9), Player(10), 0);
  SetPlayerAllianceStateBJ(Player(9), Player(11), 0);
  SetPlayerAllianceStateBJ(Player(10), Player(9), 0);
  SetPlayerAllianceStateBJ(Player(11), Player(9), 0);
  lv_aPN = 0;
  do {
    if (lv_aPN > 7) {
      break;
    }
    SetPlayerState(Player(lv_aPN), PLAYER_STATE_RESOURCE_FOOD_CAP, 200);
    gv_all[50 + lv_aPN] = GetRectCenter(gv_adY);
    gv_alg[260 + lv_aPN] = 0;
    lv_aPN = lv_aPN + 1;
  } while (true);
  SetTimeOfDay(6);
  SuspendTimeOfDay(false);
  gv_alg[192] = 0;
  SetPlayerState(Player(10), PLAYER_STATE_GIVES_BOUNTY, 0);
  SetPlayerState(Player(11), PLAYER_STATE_GIVES_BOUNTY, 0);
  RemoveLocation(lv_aPO);
  DestroyGroup(lv_aPQ);
  lv_aPQ = null;
  lv_aPO = null;
}
function f_aPR() {
  var lv_aPT = 0;
  do {
    if (lv_aPT > 7) {
      break;
    }
    gv_ali[lv_aPT] = f_aIL();
    gv_alf[30 + lv_aPT] = "I";
    gv_alm[0 + lv_aPT] = f_aIn();
    gv_all[50 + lv_aPT] = GetRectCenter(gv_adY);
    lv_aPT = lv_aPT + 1;
  } while (true);
  gv_ali[8] = f_aIL();
  gv_ali[9] = f_aIL();
  gv_alC = CreateTimer();
  gv_alD = CreateTimer();
  gv_alE = CreateTimer();
  gv_alg[8103] = 16;
  gv_alf[12] =
    "|cffffcc00Arcane Ranger:|r |cff0080ffShrouded in mystery, this hero makes its home in the deepest and darkest forest in all of Greece; their devotion to the god Artemis bordering on fanatical.  In return, Artemis has bestowed on his followers legendary skill with a bow and unlocked the secrets of ancients magics that outsiders to their civilization rarely get to glimpse.";
  gv_alf[13] =
    "|cffffcc00Assassin:|r |cff0080ffIf killing is an art, then the Assassin strives to paint a masterpiece with each slash of his blade.  His attacks are a series of well placed strikes designed to inflict as much damage as possible in the shortest amount of time and tend to leave a lasting impression on his prey.";
  gv_alf[14] =
    "|cffffcc00Dryad:|r |cff0080ffNature is steady and reliable, qualities that the Dryad wholly encompasses. Serving as a conduit through which the earth itself can exert its force, she brings with her the awesome power of the elements to bear on her foes.  With the powers of nature in hand, the Dryad can turn the tide of a battle by smiting foes with lightning or mending the wounds of an ally.";
  gv_alf[15] =
    "|cffffcc00Hydromancer:|r |cff0080ffSacrificing humanity for an abnormal control over the element of water, the Hydromancer prides himself on his ability to alter the conditions around him to cause damage or impede his enemies.  While his temper is much more controlled than that of the Pyromancer, he still leaves an indelible mark on any foe unfortunate enough to get too close to him.";
  gv_alf[16] =
    "|cffffcc00Javelineer:|r |cff0080ffA skilled warrior who can attack from a long distance can be a tremendous asset in battle, helping to thin the enemyâ€™s ranks or picking off important targets that hand-to-hand units canâ€™t get near.  Since an early age the Javalineer has been trained to augment the effectiveness of front line soldiers with his deadly spears, adding a dimension to a group that few others can boast.";
  gv_alf[17] =
    "|cffffcc00Bokor:|r |cff0080ffShrouded in mystery the Bokorâ€™s strong connections to the spirit world make him a fearsome presence on a battlefield. Pouring his very life essence into his magicks the Bokor is as welcome an ally as he is deadly a foe. They are accepted in an adventuring party with a wary cautiousness but there are few who would disagree that it is better to be with the Bokor than against him.";
  gv_alf[18] =
    "|cffffcc00Priestess:|r |cff0080ffWarriors will tell you that there is no substitute in battle for a good, sharp blade.  Or rather, they would tell you, if they werenâ€™t dead from their ignorance--nothing is as important in battling the forces of Hell as a competent healer.  Able to commune with the healing Gods and directing their blessings to her allies, winning or losing a battle often comes down to one simple question: Where is the Priestess?";
  gv_alf[19] =
    "|cffffcc00Pyromancer:|r |cff0080ffAwed by the mysteries of fire, the Pyromancer abandoned his humanity and sought to become one with his beloved flame.  Armed with the annihilative power of fire, the Pyromancer hasnâ€™t a shred of kindness in his entire being.  Brooding and angry, he prefers to deal with obstacles through swift, destructive force rather than with diplomacy.";
  gv_alf[20] =
    "|cffffcc00Spartan Warrior:|r |cff0080ffFew in history can match the ferocity and effectiveness with which warriors from Sparta display during warfare.  Their prowess on the front lines and legendary endurance makes them ideal to lead a group of heroes onto the battlefield to face their enemies.";
  gv_alf[21] =
    "|cffffcc00Spell Blade:|r |cff0080ffNot every spell caster likes to play his trade from behind the front lines.  Some, like the Spell Blade, prefer to be up close and in the thick of the action.  By channeling his arcane abilities through his weapons the Spell Blade seeks the ultimate balance between might and magic.";
  gv_alf[22] =
    "|cffffcc00Temple Guardian:|r |cff0080ffWith powers bestowed by the Gods they serve; the guardians of Athensâ€™ temples can be counted on to be in the front lines of any battle.  Their devotion to their God is absolute as is their commitment to banish the forces of Hell from the land.  With unwavering will, the Temple Guardian refuses to die without a fight.";
  gv_alf[23] =
    "|cffffcc00Amazon:|r |cff0080ffBorn in a highly secretive society in which the female plays the dominate role, the Amazon is both a tactful and ferocious warrior. Aided by her fearless mount she charges to the front lines where even the men of Sparta take notice of her combat prowess.";
  gv_alf[59] =
    "4#F?Q6xkXa9v5w%KbihEeS@D/dzMGsugNAyRq$B8TpH<c&rPUmV=Yn+3ZfW2>Ct7J";
  gv_alf[60] = "|cffff0202";
  gv_alf[61] = "|cff0041ff";
  gv_alf[62] = "|cff1be5b8";
  gv_alf[63] = "|cff530080";
  gv_alf[64] = "|cfffffc00";
  gv_alf[65] = "|cfffe890d";
  gv_alf[66] = "|cff1fbf00";
  gv_alf[67] = "|cffe45aaf";
  gv_alf[68] = "|cff949596";
  gv_alf[69] = "|cff7dbef1";
  gv_alf[70] = "|cff0f6145";
  gv_alf[71] = "|cff4d2903";
  gv_alf[74] = "|cff00ff00";
  gv_alf[75] = "|cff88ccff";
  gv_alf[76] = "|cff7777aa";
  gv_alf[77] = "|cffff0000";
  gv_alf[78] = "|cffff8800";
  gv_alf[79] = "|cffff8a08";
  gv_alf[80] = "|cffffcc00";
  gv_alf[81] = "|cffffd700";
  gv_alf[82] = "|cffffffff";
  gv_alf[83] = "|cffcccc00";
  gv_alf[89] = "|c00ffffff";
  gv_alf[90] = "Defenders of Greece, to The Black Road!";
  gv_alf[91] = "Demons! Lots of Demons. Here they come down the road.";
  gv_alf[92] = "Demon attack is imminent!  Return to Athens at once.";
  gv_alf[93] = "Scouts report demons approaching Athens on The Black Road!";
  gv_alf[94] = "Quick! The gates of Hades are opening near The Black Road!";
  gv_alf[110] =
    "I charm birds, fishes and wild beasts, coax the trees and rocks into dance.  Which one are you?";
  gv_alf[111] =
    "Leave me be. I'm one of the handful of Greek heroes to visit the Underworld and return.";
  gv_alf[112] =
    "I only sing about dead heros now.  Guess it's about time to sing your song.";
  gv_alf[113] = "Click me again, and I'll restring your face.";
  gv_alf[114] =
    "Even in the darkest parts of underworld my song and lyre did not lose their power.";
  gv_alf[115] =
    "The Orphic way of life: vegetarianism and abstention from sex, and refrain from eating eggs and beans.";
  gv_alf[116] = "Now I know why Serius said you were an assclown.";
  gv_alf[120] =
    "Alive without breath, as cold as death. Never thirsty, always drinking, Clad in mail, never clinking.";
  gv_alf[135] = "fish";
  gv_alf[121] =
    "An army I am countless upon the battlefield, even over hills and valleys. My soldiers have uncountable blades at their disposal, yet not a single shield to count.";
  gv_alf[136] = "grass";
  gv_alf[122] =
    "I have no voice, yet I speak to you. I tell of anything you'd ever want to hear. I have leaves, but I am not a tree. I have a spine and hinges, but I am not a man or a door.";
  gv_alf[137] = "book";
  gv_alf[123] =
    "What has roots as nobody sees, and is taller than trees. Up, up it goes, and yet never grows?";
  gv_alf[138] = "mountain";
  gv_alf[124] =
    "When I am young I am tall, When I am old I am short. While I have the light of life, The breath of god is my foe.";
  gv_alf[139] = "candle";
  gv_alf[125] =
    "What can run but never walk, Has a mouth but never talks? Has a bed but never sleeps, Has a head but never weeps?";
  gv_alf[140] = "river";
  gv_alf[126] =
    "What is greater than Zeus, more evil than Hades. The poor have it. The rich donâ€™t. If you eat it you will die.";
  gv_alf[141] = "nothing";
  gv_alf[127] =
    "My first is in water and also in tea. My second is in fish but not in the sea. My third is in mountains but not underground. My last is in strike but never in pound. My whole crushes mountains, rivers, even civilizations. And all that live, fear my arrival.";
  gv_alf[142] = "time";
  gv_alf[128] =
    "The beginning of eternity, the end of time and space. The beginning of every end, and the end of every place.";
  gv_alf[143] = "e";
  gv_alf[129] =
    "What is the animal that has one voice, and goes on four legs in the morning, two legs at noon, and upon three legs in the evening?";
  gv_alf[144] = "human";
  gv_alf[130] =
    "Carrying a scythe, I arrive when I should, always behind but never late.  I hold in my hand what never stops moving.";
  gv_alf[145] = "fathertime";
  gv_alf[131] =
    "Feed me and I live, give me drink and I die. A little air and I grow, too much and I go away.";
  gv_alf[146] = "fire";
  gv_alf[132] =
    "I raise my weapon up to the sky; I let my armies fall and fly; I let my weapon strike the ground; and let loose a terrible battle cry.";
  gv_alf[147] = "storm";
  lv_aPT = 205;
  do {
    if (lv_aPT > 239) {
      break;
    }
    gv_alg[lv_aPT] = 1;
    lv_aPT = lv_aPT + 1;
  } while (true);
  gv_ald[0] = 0.0;
  gv_ald[1] = 0.0;
  gv_ald[2] = 0.0;
  gv_ald[3] = 0.0;
  gv_ald[4] = 0.0;
  gv_ald[5] = 0.0;
  gv_ald[6] = 0.0;
  gv_ald[7] = 0.0;
  gv_ald[8] = 0.0;
  gv_ald[9] = 0.0;
  gv_ald[10] = 0.0;
  gv_ald[11] = 0.0;
  gv_ald[12] = 0.0;
  gv_ald[13] = 0.0;
  gv_ald[14] = 0.0;
  gv_ald[15] = 0.0;
  gv_alg[1] = 2;
  gv_alg[73] = 2;
  gv_alg[2] = 5;
  gv_alg[74] = 5;
  gv_alg[3] = 7;
  gv_alg[75] = 9;
  gv_alg[4] = 11;
  gv_alg[76] = 13;
  gv_alg[5] = 14;
  gv_alg[77] = 18;
  gv_alg[6] = 17;
  gv_alg[78] = 22;
  gv_alg[7] = 21;
  gv_alg[79] = 28;
  gv_alg[8] = 24;
  gv_alg[80] = 33;
  gv_alg[9] = 28;
  gv_alg[81] = 39;
  gv_alg[10] = 32;
  gv_alg[82] = 45;
  gv_alg[11] = 36;
  gv_alg[83] = 51;
  gv_alg[12] = 39;
  gv_alg[84] = 57;
  gv_alg[13] = 43;
  gv_alg[85] = 64;
  gv_alg[14] = 47;
  gv_alg[86] = 71;
  gv_alg[15] = 52;
  gv_alg[87] = 77;
  gv_alg[16] = 56;
  gv_alg[88] = 84;
  gv_alg[17] = 60;
  gv_alg[89] = 92;
  gv_alg[18] = 64;
  gv_alg[90] = 99;
  gv_alg[19] = 68;
  gv_alg[91] = 106;
  gv_alg[20] = 73;
  gv_alg[92] = 114;
  gv_alg[21] = 77;
  gv_alg[93] = 122;
  gv_alg[22] = 82;
  gv_alg[94] = 130;
  gv_alg[23] = 86;
  gv_alg[95] = 138;
  gv_alg[24] = 91;
  gv_alg[96] = 146;
  gv_alg[25] = 95;
  gv_alg[97] = 154;
  gv_alg[26] = 100;
  gv_alg[98] = 163;
  gv_alg[27] = 104;
  gv_alg[99] = 171;
  gv_alg[28] = 109;
  gv_alg[100] = 180;
  gv_alg[29] = 114;
  gv_alg[101] = 188;
  gv_alg[30] = 118;
  gv_alg[102] = 197;
  gv_alg[31] = 123;
  gv_alg[103] = 206;
  gv_alg[32] = 128;
  gv_alg[104] = 215;
  gv_alg[33] = 155;
  gv_alg[105] = 224;
  gv_alg[34] = 138;
  gv_alg[106] = 234;
  gv_alg[35] = 143;
  gv_alg[107] = 243;
  gv_alg[36] = 147;
  gv_alg[108] = 252;
  gv_alg[37] = 152;
  gv_alg[109] = 262;
  gv_alg[38] = 157;
  gv_alg[110] = 271;
  gv_alg[39] = 162;
  gv_alg[111] = 281;
  gv_alg[40] = 167;
  gv_alg[112] = 291;
  gv_alg[41] = 172;
  gv_alg[113] = 301;
  gv_alg[42] = 177;
  gv_alg[114] = 311;
  gv_alg[43] = 182;
  gv_alg[115] = 321;
  gv_alg[44] = 188;
  gv_alg[116] = 331;
  gv_alg[45] = 193;
  gv_alg[117] = 341;
  gv_alg[46] = 198;
  gv_alg[118] = 351;
  gv_alg[47] = 203;
  gv_alg[119] = 362;
  gv_alg[48] = 208;
  gv_alg[120] = 372;
  gv_alg[49] = 213;
  gv_alg[121] = 383;
  gv_alg[50] = 219;
  gv_alg[122] = 393;
  gv_alg[51] = 224;
  gv_alg[123] = 404;
  gv_alg[52] = 229;
  gv_alg[124] = 415;
  gv_alg[53] = 235;
  gv_alg[125] = 425;
  gv_alg[54] = 240;
  gv_alg[126] = 436;
  gv_alg[55] = 245;
  gv_alg[127] = 447;
  gv_alg[56] = 251;
  gv_alg[128] = 458;
  gv_alg[57] = 256;
  gv_alg[129] = 469;
  gv_alg[58] = 261;
  gv_alg[130] = 480;
  gv_alg[59] = 267;
  gv_alg[131] = 492;
  gv_alg[60] = 272;
  gv_alg[132] = 503;
  gv_alg[61] = 278;
  gv_alg[133] = 514;
  gv_alg[62] = 283;
  gv_alg[134] = 526;
  gv_alg[63] = 289;
  gv_alg[135] = 537;
  gv_alg[64] = 294;
  gv_alg[136] = 549;
  gv_alg[65] = 300;
  gv_alg[137] = 560;
  gv_alg[66] = 305;
  gv_alg[138] = 572;
  gv_alg[67] = 311;
  gv_alg[139] = 584;
  gv_alg[68] = 316;
  gv_alg[140] = 596;
  gv_alg[69] = 322;
  gv_alg[141] = 607;
  gv_alg[70] = 327;
  gv_alg[142] = 619;
  gv_alg[71] = 333;
  gv_alg[143] = 631;
  gv_alg[72] = 339;
  gv_alg[144] = 643;
  gv_alg[400] = "nkob";
  gv_alg[401] = "nkob";
  gv_alg[402] = "nkob";
  gv_alg[403] = "nkob";
  gv_alg[404] = "nkob";
  gv_alg[405] = "nkob";
  gv_alg[406] = "nkob";
  gv_alg[407] = "nkob";
  gv_alg[408] = "nkob";
  gv_alg[409] = "nkob";
  gv_alg[410] = "nkob";
  gv_alg[411] = "nkog";
  gv_alg[412] = "nkog";
  gv_alg[413] = "nkog";
  gv_alg[414] = "nkol";
  gv_alg[415] = "nwlt";
  gv_alg[416] = "nban";
  gv_alg[417] = "nban";
  gv_alg[418] = "nban";
  gv_alg[419] = "nban";
  gv_alg[420] = "nban";
  gv_alg[421] = "nban";
  gv_alg[422] = "nban";
  gv_alg[423] = "nban";
  gv_alg[424] = "nban";
  gv_alg[425] = "nban";
  gv_alg[426] = "nban";
  gv_alg[427] = "nban";
  gv_alg[428] = "nban";
  gv_alg[429] = "nass";
  gv_alg[430] = "nass";
  gv_alg[431] = "nass";
  gv_alg[432] = "nass";
  gv_alg[433] = "nass";
  gv_alg[434] = "nass";
  gv_alg[435] = "nass";
  gv_alg[436] = "nftt";
  gv_alg[437] = "nftt";
  gv_alg[438] = "nftt";
  gv_alg[439] = "nftt";
  gv_alg[440] = "nftt";
  gv_alg[441] = "nftt";
  gv_alg[442] = "nftt";
  gv_alg[443] = "nftt";
  gv_alg[444] = "nftt";
  gv_alg[445] = "nftb";
  gv_alg[446] = "nftb";
  gv_alg[447] = "nftb";
  gv_alg[448] = "nftb";
  gv_alg[449] = "nftb";
  gv_alg[450] = "nfsp";
  gv_alg[451] = "nhrr";
  gv_alg[452] = "nmgw";
  gv_alg[453] = "nmrr";
  gv_alg[454] = "nmrr";
  gv_alg[455] = "nmrr";
  gv_alg[456] = "nmrr";
  gv_alg[457] = "nmrr";
  gv_alg[458] = "nmrr";
  gv_alg[459] = "nmrr";
  gv_alg[460] = "nmrr";
  gv_alg[461] = "nmrr";
  gv_alg[462] = "nmrr";
  gv_alg[463] = "nmrr";
  gv_alg[464] = "nmmu";
  gv_alg[465] = "nmmu";
  gv_alg[466] = "nmmu";
  gv_alg[467] = "nmrm";
  gv_alg[468] = "nsat";
  gv_alg[469] = "nsat";
  gv_alg[470] = "nsat";
  gv_alg[471] = "nsat";
  gv_alg[472] = "nsat";
  gv_alg[473] = "nsat";
  gv_alg[474] = "nsat";
  gv_alg[475] = "nsat";
  gv_alg[476] = "nsat";
  gv_alg[477] = "nsat";
  gv_alg[478] = "nstl";
  gv_alg[479] = "nstl";
  gv_alg[480] = "nstl";
  gv_alg[481] = "nstl";
  gv_alg[482] = "nstl";
  gv_alg[483] = "nstl";
  gv_alg[484] = "nstl";
  gv_alg[485] = "nstl";
  gv_alg[486] = "nsth";
  gv_alg[487] = "nsth";
  gv_alg[488] = "nfrl";
  gv_alg[489] = "nfrl";
  gv_alg[490] = "nfrl";
  gv_alg[491] = "nfrl";
  gv_alg[492] = "nfrl";
  gv_alg[493] = "nfrl";
  gv_alg[494] = "nfrl";
  gv_alg[495] = "nfrl";
  gv_alg[496] = "nfrb";
  gv_alg[497] = "nfrb";
  gv_alg[498] = "nfrb";
  gv_alg[499] = "nfrb";
  gv_alg[500] = "nfrg";
  gv_alg[501] = "nfrg";
  gv_alg[502] = "ncks";
  gv_alg[503] = "ncks";
  gv_alg[504] = "ncks";
  gv_alg[505] = "ncks";
  gv_alg[506] = "ncks";
  gv_alg[507] = "ncks";
  gv_alg[508] = "ncks";
  gv_alg[509] = "ncim";
  gv_alg[510] = "ncim";
  gv_alg[511] = "ncim";
  gv_alg[512] = "ncim";
  gv_alg[513] = "ncim";
  gv_alg[514] = "ncim";
  gv_alg[515] = "ncim";
  gv_alg[516] = "nfor";
  gv_alg[517] = "nfor";
  gv_alg[518] = "nfor";
  gv_alg[519] = "nfor";
  gv_alg[520] = "nfor";
  gv_alg[521] = "nfor";
  gv_alg[522] = "ngh1";
  gv_alg[523] = "ngh1";
  gv_alg[524] = "ngh1";
  gv_alg[525] = "ngh1";
  gv_alg[526] = "ngh1";
  gv_alg[527] = "ngh1";
  gv_alg[528] = "ngh2";
  gv_alg[529] = "ngh2";
  gv_alg[530] = "ngh2";
  gv_alg[531] = "nmgd";
  gv_alg[532] = "nrvs";
  gv_alg[533] = "ntks";
  gv_alg[540] = "h009";
  gv_alg[541] = "n00B";
  gv_alg[542] = "n00D";
  gv_ale[200] = gv_akk;
  gv_alf[500] = "Can I add you to my friends list?";
  gv_alf[501] = "Can you add me to your friends list?";
  gv_alf[502] = "Hades is a major assclown.";
  gv_alf[503] = "The Titans know you are coming.";
  gv_alf[504] = "I'll guard the city, while you kick ass.";
  gv_alf[505] = "I'm sure I have a quest for you.";
  gv_alf[506] = "Only return once you have killed something.";
  gv_alf[507] = "You don't want to duel me.";
  gv_alf[508] = "Zeus needs real heros, not mambie pambies.";
  gv_alf[509] = "You know I'm ignoring you right?";
  gv_alf[510] = "I must not be allowed to die.";
  gv_alf[511] = "You really need more levels.";
  gv_alf[512] = "Time to open up a can of whoop ass.";
  gv_alf[513] = "Theron stays outside until he admits to the affair.";
  gv_alf[514] = "Look for the rich farmer, he has work.";
  gv_alf[515] = "Yes nice weapon, but can you use it?";
  gv_alf[516] = "Don't stand there, get to work!";
  gv_ale[201] = gv_aka;
  gv_alf[550] = "I like to be where the action is.";
  gv_alf[551] = "Demons, demons, always demons.";
  gv_alf[552] = "No time for ale, must kill things.";
  gv_alf[553] = "You sit by the fire, you die.";
  gv_alf[554] = "Watch out for the big ones.";
  gv_alf[555] = "I did not have sex with that woman.";
  gv_alf[556] = "Read my lips: demons suck.";
  gv_alf[557] = "I'll power level you.";
  gv_alf[558] = "Here is a dirty job, you'll love.";
  gv_alf[559] = "Kill first and ask questions later.";
  gv_alf[560] = "First titan is to the north.";
  gv_alf[561] = "I hear a dragon looms to the west.";
  gv_alf[562] = "Pots, always carry some pot.";
  gv_ale[202] = gv_akB;
  gv_alf[575] = "Yes I have a daughter why do you ask?";
  gv_alf[576] = "Your bravery reminds me of my son.";
  gv_alf[577] = "Those demons sure make life hard.";
  gv_alf[578] = "Those wolves ate my sheep.";
  gv_alf[579] = "Got sheep?";
  gv_alf[580] = "I hope you didn't eat the magic seeds.";
  gv_alf[581] = "You like green tomatoes?";
  gv_alf[582] = "I need help.";
  gv_alf[583] = "There is an amazing forge up the mount.";
  gv_alf[584] = "I can't kill wolves and farm at the same time.";
  gv_ale[203] = gv_aky;
  gv_alf[585] = "We rival Athens and Thebes in wealth.";
  gv_alf[586] = "Visit the Temple of Aphrodite.";
  gv_alf[587] = "Did you know we started the olympics here.";
  gv_alf[588] = "Athens is filled with boy lovers.";
  gv_alf[589] = "Have some ale, while you heal.";
  gv_alf[590] = "Harpys are birds from hell.";
  gv_alf[591] = "Damn trolls, killed my dog.";
  gv_alf[592] = "That Troll Chieftain bugs me.";
  gv_alf[593] = "One more beer, and I'll join ya.";
  gv_alf[594] = "Serius is the one worried about the titans.";
  gv_alf[595] = "I could run Sparta, but their ale is weak.";
  gv_alf[596] = "Did you hear that?";
}
function f_aPU() {
  var lv_aPV;
  CreateQuestBJ(
    2,
    "Synopsis",
    "Hades has created the Black Road from the Underworld and his demonic hordes have come to ravage Greece.  Darkest evil descends upon the fathers of the West in many guises, and Athens is beset on all sides.  To aid him in his unholy quest, Hades has called upon the ancient Titans.",
    "ReplaceableTextures\\CommandButtons\\BTNArcaneObservatory.blp"
  );
  CreateQuestBJ(
    2,
    "Victory",
    "To win, you must defeat Hades at the Gates of Hell at the end of the Black Road.  To summon Hades, defeat the eight Titans scattered around the map.  When you do, the Gates of Hell will become vulnerable.  Attack the Gates of Hell until Hades arrives.",
    "ReplaceableTextures\\CommandButtons\\BTNHumanCaptureFlag.blp"
  );
  lv_aPV =
    "-load, -save  (For loading or saving character) \n-quests, -players  (switch multiboard) \n-clear  (Clears the screen of text)";
  lv_aPV = S2S(
    lv_aPV +
      "-repick  (Repicks hero) \n-abinfo (shows how your abilities scale as you level them, mana costs not included for now) \n-out, -in  (Zoom your view out or back in)"
  );
  lv_aPV = S2S(lv_aPV + "\n-commands or -cc, shows some custom commands");
  lv_aPV = S2S(
    lv_aPV +
      "-roll  (Players will be assigned a number between 1 and 100) \n-die  (kills your hero) \n-info  (Shows speed and regen, only use in a safe place)"
  );
  lv_aPV = S2S(
    lv_aPV +
      "-text  (Display quest text) \n-find * \n\n* add the color of the player.  Example: -find blue"
  );
  CreateQuestBJ(
    2,
    "Chat Commands",
    lv_aPV,
    "ReplaceableTextures\\WorldEditUI\\Editor-MultipleUnits.blp"
  );
  CreateQuestBJ(
    2,
    "Saving",
    "To save your character, type -save at any time.  You will receive a string of characters representing your experience, class, hero inventory, and other stats.  Items on your hero and your bag of holding will save unless otherwise noted.  The bag even saves stacked potions.",
    "ReplaceableTextures\\CommandButtons\\BTNLoadDwarf.blp"
  );
  CreateQuestBJ(
    2,
    "Loading",
    "To load a character, type -load followed by your save code.  You may only load |cffff0000one character per game|r and once you successfully load you |cffff0000may not re-load|r so make sure the save code you enter is the correct one.",
    "ReplaceableTextures\\CommandButtons\\BTNLoadDwarf.blp"
  );
  CreateQuestBJ(
    2,
    "Bags of Holding",
    "If you use an item that is in your bag of holding, the effects will be applied to your hero. You can also use it to carry backup equipment such as weapons and armor, but the effects will not be applied.",
    "ReplaceableTextures\\CommandButtons\\BTNDust.blp"
  );
  CreateQuestBJ(
    2,
    "Quest Levels",
    "All quests have a quest level assigned to them.  Only a player at or above that level will get the gold and experience given by the quest reward.",
    "ReplaceableTextures\\WorldEditUI\\Editor-Random-Unit.blp"
  );
  lv_aPV =
    "Only for 'host' player: \n-hex * (critter)\n-slap, -stab * (damages a player's hero)\n-kill * (kills a player's hero)\n-boot, -kick * (removes a player from the game)\n\n* add the color of the player.  Example: -stab blue";
  CreateQuestBJ(
    2,
    "Host Commands",
    lv_aPV,
    "ReplaceableTextures\\WorldEditUI\\Editor-MultipleUnits.blp"
  );
  lv_aPV =
    "Arcane ranger: Gives a 2% chance to reset spell cd's on spellcast, does not affect Ultimate. chance is 5% at night, also boosts Q about 20% \nTemple Guardian: Gives a 15% Endurance aura, a 20% command aura, and a 30% atk speed bonus to self ";
  lv_aPV = S2S(
    lv_aPV +
      "\nSpartan: Gives a chance to throw 2 spears at an enemy you hit, dealing eventdamage + str based damage \nAmazon: 10% chance to deal 150 AOE damage and stun nearby enemies for 2 seconds (1 sec for bosses)"
  );
  lv_aPV = S2S(
    lv_aPV +
      "\nJavelin: Increases Spear impetus damage by about 50%\nAssassin: Gives a 5% chance to crit for bonus damage- 2.5x bonus if gear, 4x if equip \nBokor: Revive you with half hp and mp on death, 180 sec cooldown "
  );
  lv_aPV =
    "Spellblade: Increases self mana regen by 4% per sec, and nearby allies 1%, equip raises this to 5.5, 1.5% \nHydromancer: when you damage an enemy with atk of select spells- has 7% chance to frost nova random enemy in range for 400 dmg (10% chance if equip)";
  lv_aPV = S2S(
    lv_aPV +
      "\nPyromancer: gear/equip give a 8% chance to deal 100-125% bonus damage on atk or spell hit \nDryad: 7% chance to entangling roots a foe when you attack\nPriestess: adds 70% of Spelheal to eventdamage used to calculate give and take healing"
  );
  CreateQuestBJ(
    2,
    "Contact Info",
    "Visit: |cffffcc00Clan TBR|r on U.S. East\nForums: http://theblackroad.net/forums \n Discord at: https://discord.gg/YBCmwZS",
    "ReplaceableTextures\\WorldEditUI\\Doodad-Cinematic.blp"
  );
  lv_aPV =
    "TBR 1.x WaterMolecule (PwncakesnRofles)\n\nTBR 2.x Created by:\n|cffffcc00FatherTime|r - Theme & quest design, Terrain, Items, Units & Heros, Icons & Models.\n\n";
  lv_aPV = S2S(
    lv_aPV +
      "|cffffcc00Av3n|r - Hero Spells, Boss Fights, Creep Spawns, Item Effect Triggers, Regalia Effects, Systems optimization.\n\n|cffffcc00ArthasFirestorm|r - Quest triggers, multiboards, Save/Load code, Chat commands, Battle Arena Duels, Attack Waves & Black Road effects, Athenians, General Triggers.\n\n"
  );
  lv_aPV = S2S(
    lv_aPV +
      "|cffffcc00Aerox|r - Preliminary Concept/Balance, XP/Gold Creep Rewards, Simple Hero Mechanics, Hero Selection, Item Forging, Map Protection."
  );
  CreateQuestBJ(
    2,
    "Programming",
    lv_aPV,
    "ReplaceableTextures\\CommandButtons\\BTNBox.blp"
  );
  lv_aPV =
    "GurkenKinG (Priestess Skin Contest Winner)\nIdontneedaname (Custom Skins - SpellBlade)\nNG_Absalon\toriad (Semi-developers)\nxXm0rpH3usXx (Models)\nTiki (Models)\n";
  lv_aPV = S2S(
    lv_aPV +
      "olofmoleman (Models)|nDaelin (Models)\nCallahan (Models)\narmel (Models)\nMc! (Models and Doodads)\nGeneral Frank (Models)\nJetFangInferno (Models)\nCamels_hump (Skins)\n"
  );
  lv_aPV = S2S(
    lv_aPV +
      "moyack (system)\nKaTTaNa, Rising_Dusk and Vexorian (external functions)\nBloody_Turds (model)\nWILL_THE_ALMIGHTY (models)\nCallahan (model)\nNorinad (model)\n"
  );
  lv_aPV = S2S(
    lv_aPV +
      "Infrisios (models)\nalfredx_sotn (model)\nsc_freek (model)\nPheonix-IV (model)\ns4nji (model)\nPyritie (model)\nCaptian Griffen (system)\nCoZZa (boss lines)\n"
  );
  lv_aPV = S2S(lv_aPV + "Deaod (system)\nSzythe (model)\nTiL-Doom (model)");
  CreateQuestBJ(
    2,
    "Credits",
    lv_aPV,
    "ReplaceableTextures\\CommandButtons\\BTNBox.blp"
  );
  DestroyTrigger(gv_afU);
}
function f_aPW() {
  var lv_aPX = 0;
  gv_aly = CreateMultiboard();
  MultiboardSetColumnCount(gv_aly, 4);
  MultiboardSetRowCount(gv_aly, 9);
  MultiboardSetTitleText(gv_aly, "Adventuring Party");
  MultiboardSetItemValueBJ(gv_aly, 1, 1, S2S(gv_alf[74] + "Life|r"));
  MultiboardSetItemWidthBJ(gv_aly, 1, 1, 3);
  MultiboardSetItemStyleBJ(gv_aly, 1, lv_aPX, true, false);
  MultiboardSetItemValueBJ(gv_aly, 2, 1, "Player");
  MultiboardSetItemWidthBJ(gv_aly, 2, 1, 10);
  MultiboardSetItemStyleBJ(gv_aly, 2, lv_aPX, true, false);
  MultiboardSetItemValueBJ(gv_aly, 3, 1, S2S(gv_alf[81] + "Class|r"));
  MultiboardSetItemWidthBJ(gv_aly, 3, 1, 10);
  MultiboardSetItemStyleBJ(gv_aly, 3, lv_aPX, true, false);
  MultiboardSetItemValueBJ(gv_aly, 4, 1, S2S(gv_alf[75] + "Level|r"));
  MultiboardSetItemWidthBJ(gv_aly, 4, 1, 3);
  MultiboardSetItemStyleBJ(gv_aly, 4, lv_aPX, true, false);
  do {
    if (lv_aPX > 7) {
      break;
    }
    if (GetPlayerSlotState(Player(lv_aPX)) == PLAYER_SLOT_STATE_PLAYING) {
      gv_alg[195] = gv_alg.getInt(195) + 1;
      MultiboardSetItemValueBJ(
        gv_aly,
        2,
        lv_aPX + 2,
        gv_alf[60 + lv_aPX] + GetPlayerName(Player(lv_aPX)) + "|r"
      );
      MultiboardSetItemValueBJ(gv_aly, 3, lv_aPX + 2, "- unloaded -");
      MultiboardSetItemValueBJ(gv_aly, 4, lv_aPX + 2, "---");
    } else {
      MultiboardSetItemValueBJ(
        gv_aly,
        2,
        lv_aPX + 2,
        gv_alf[68] + GetPlayerName(Player(lv_aPX)) + "|r"
      );
      MultiboardSetItemValueBJ(
        gv_aly,
        3,
        lv_aPX + 2,
        S2S(gv_alf[68] + "- not playing -|r")
      );
      MultiboardSetItemValueBJ(gv_aly, 4, lv_aPX + 2, " ");
    }
    MultiboardSetItemStyleBJ(gv_aly, 1, lv_aPX + 2, true, false);
    MultiboardSetItemStyleBJ(gv_aly, 2, lv_aPX + 2, true, false);
    MultiboardSetItemStyleBJ(gv_aly, 3, lv_aPX + 2, true, false);
    MultiboardSetItemStyleBJ(gv_aly, 4, lv_aPX + 2, true, false);
    MultiboardSetItemWidthBJ(gv_aly, 1, lv_aPX + 2, 3);
    MultiboardSetItemWidthBJ(gv_aly, 2, lv_aPX + 2, 10);
    MultiboardSetItemWidthBJ(gv_aly, 3, lv_aPX + 2, 10);
    MultiboardSetItemWidthBJ(gv_aly, 4, lv_aPX + 2, 3);
    lv_aPX = lv_aPX + 1;
  } while (true);
  CinematicFadeBJ(
    1,
    0,
    "ReplaceableTextures\\CameraMasks\\Black_mask.blp",
    0,
    0,
    0,
    0
  );
  EnableUserControl(false);
  ClearTextMessages();
  DisplayTimedTextToForce(
    gv_alq,
    7,
    "                                                                         |cffffcc00-= CLAN TBR's =-|r"
  );
  DisplayTimedTextToForce(gv_alq, 7, " ");
  DisplayTimedTextToForce(
    gv_alq,
    7,
    "                                                                      The Black Road 2.0.82"
  );
  DisplayTimedTextToForce(
    gv_alq,
    7,
    "                                                                  |cffff0000www.theblackroad.net/forums|r"
  );
  DisplayTimedTextToForce(gv_alq, 7, " ");
  DisplayTimedTextToForce(
    gv_alq,
    7,
    "                                                                       https://discord.gg/YBCmwZS"
  );
  DisplayTimedTextToForce(gv_alq, 7, " ");
  DisplayTimedTextToForce(
    gv_alq,
    7,
    "                                                                             Map Credits:"
  );
  DisplayTimedTextToForce(
    gv_alq,
    7,
    "                                                                      Av3n, ArthasFirestorm,"
  );
  DisplayTimedTextToForce(
    gv_alq,
    7,
    "                                                                        afis, and FatherTime"
  );
  DisplayTimedTextToForce(gv_alq, 7, " ");
  DisplayTimedTextToForce(
    gv_alq,
    7,
    "                                                                     With special thanks to:"
  );
  DisplayTimedTextToForce(
    gv_alq,
    7,
    "                                                      Aerox, HappyTauren and CrazyRussian"
  );
  DisplayTimedTextToForce(
    gv_alq,
    7,
    "                                                                  txt-save system by: afis"
  );
  DisplayTimedTextToForce(
    gv_alq,
    7,
    "                                                               try -abinfo to see ability levels"
  );
  TriggerSleepAction(6);
  CinematicFadeBJ(
    0,
    3,
    "ReplaceableTextures\\CameraMasks\\Black_mask.blp",
    0,
    0,
    0,
    0
  );
  EnableUserControl(true);
  MultiboardDisplay(gv_aly, true);
  MultiboardMinimize(gv_aly, false);
}
function f_aPY() {
  var lv_aPZ = GetTriggerPlayer();
  var lv_aQa = GetPlayerId(lv_aPZ);
  var lv_aQb = GetTriggerUnit();
  var lv_aQc = GetUnitFacing(lv_aQb);
  var lv_aQd = lv_aQc * bj_DEGTORAD;
  if (GetLocalPlayer() == lv_aPZ) {
    SetCameraField(CAMERA_FIELD_ROTATION, lv_aQc + 180, 1);
    SetCameraField(CAMERA_FIELD_TARGET_DISTANCE, 1250, 1);
    SetCameraField(CAMERA_FIELD_ANGLE_OF_ATTACK, 320, 1);
    PanCameraToTimed(-14200 - 200 * Cos(lv_aQd), -15000 - 200 * Sin(lv_aQd), 1);
    if (gv_ale[16 + lv_aQa] != null) {
      ResetUnitAnimation(gv_ale[16 + lv_aQa]);
    }
    SetUnitAnimation(lv_aQb, "spell");
    if (GetUnitTypeId(lv_aQb) == "Emoo") {
      SetUnitAnimation(lv_aQb, "attack");
    }
    if (GetUnitTypeId(lv_aQb) == "Udea") {
      SetUnitAnimation(lv_aQb, "stand defend");
    }
    ClearTextMessages();
  }
  DisplayTimedTextToPlayer(
    lv_aPZ,
    0.4,
    -0.8,
    60,
    gv_alf[GetUnitPointValue(lv_aQb)]
  );
  DisplayTimedTextToPlayer(
    lv_aPZ,
    0.4,
    -0.6,
    60,
    "\n|cffffcc00Press |r|cffff0000Esc|r|cffffcc00 to select this Hero."
  );
  gv_ale[16 + lv_aQa] = lv_aQb;
  lv_aPZ = null;
  lv_aQb = null;
}
function f_aQe() {
  return gv_ale[GetPlayerId(GetTriggerPlayer())] == null;
}
function f_aQf() {
  if (GetEnumPlayer() == gv_alu) {
    return;
  }
  SetPlayerAlliance(gv_alu, GetEnumPlayer(), ALLIANCE_SHARED_VISION, true);
}
function f_aQg(lv_aQh) {
  var lv_aQi = 0;
  do {
    if (lv_aQi == lv_aQh) {
      lv_aQi = lv_aQi + 1;
    }
    if (lv_aQi > 8) {
      break;
    }
    SetPlayerTeam(Player(lv_aQh), 0);
    SetPlayerState(Player(lv_aQh), PLAYER_STATE_ALLIED_VICTORY, 1);
    SetPlayerAlliance(
      Player(lv_aQh),
      Player(lv_aQi),
      ALLIANCE_SHARED_CONTROL,
      false
    );
    SetPlayerAlliance(
      Player(lv_aQh),
      Player(lv_aQi),
      ALLIANCE_SHARED_ADVANCED_CONTROL,
      false
    );
    SetPlayerAllianceStateAllyBJ(Player(lv_aQh), Player(lv_aQi), true);
    SetPlayerAllianceStateVisionBJ(Player(lv_aQh), Player(lv_aQi), true);
    lv_aQi = lv_aQi + 1;
  } while (true);
}
function f_aQj() {
  var lv_aQk = GetTriggerPlayer();
  var lv_aQl = GetPlayerId(lv_aQk);
  var lv_aQm = gv_ale[GetPlayerId(lv_aQk) + 16];
  f_aQg(lv_aQl);
  gv_ale[lv_aQl] = CreateUnit(lv_aQk, GetUnitTypeId(lv_aQm), 3750, 11000, 270);
  gv_ale[lv_aQl + 8] = CreateUnit(lv_aQk, "e000", 3550, 10800, 270);
  UnitModifySkillPoints(gv_ale[lv_aQl], 2);
  if (lv_aQk == GetLocalPlayer()) {
    ResetToGameCamera(0.0);
    SetCameraBoundsToRect(bj_mapInitialCameraBounds);
    ClearTextMessages();
    ClearSelection();
    SelectUnit(gv_ale[lv_aQl], true);
  }
  UnitAddAbility(gv_ale[lv_aQl], "Amrf");
  UnitRemoveAbility(gv_ale[lv_aQl], "Amrf");
  PanCameraToTimedForPlayer(lv_aQk, 3750, 11000, 0.5);
  SetPlayerAlliance(Player(9), lv_aQk, ALLIANCE_SHARED_VISION, true);
  SetPlayerAlliance(
    Player(PLAYER_NEUTRAL_PASSIVE),
    lv_aQk,
    ALLIANCE_SHARED_CONTROL,
    false
  );
  SetPlayerAlliance(
    Player(PLAYER_NEUTRAL_PASSIVE),
    lv_aQk,
    ALLIANCE_SHARED_VISION,
    false
  );
  gv_alu = lv_aQk;
  ForForce(gv_alq, f_aQf);
  DisplayTimedTextToPlayer(
    lv_aQk,
    0,
    0,
    60,
    "Welcome to |cffff0000The Black Road 2|r!"
  );
  DisplayTimedTextToPlayer(lv_aQk, 0, 0, 60, "     ");
  DisplayTimedTextToPlayer(
    lv_aQk,
    0,
    0,
    60,
    "    If you are new to this map, read the quests (|cffffcc00F9|r)."
  );
  MultiboardSetItemValueBJ(gv_aly, 3, lv_aQl + 2, GetUnitName(gv_ale[lv_aQl]));
  MultiboardSetItemValueBJ(gv_aly, 4, lv_aQl + 2, gv_alf[75] + I2S(1) + "|r");
  gv_alg[250 + lv_aQl] = 1;
  lv_aQl = lv_aQl * 5 + 200;
  gv_alg[lv_aQl] = 1;
  gv_alg[lv_aQl + 1] = 1;
  gv_alg[lv_aQl + 2] = 1;
  gv_alg[lv_aQl + 3] = 1;
  gv_alg[lv_aQl + 4] = 0;
  lv_aQk = null;
  lv_aQm = null;
  PolledWait(0.5);
  SetCameraFieldForPlayer(
    GetTriggerPlayer(),
    CAMERA_FIELD_TARGET_DISTANCE,
    2000,
    1
  );
}
function f_aQn() {
  var lv_aQo = GetPlayerId(GetTriggerPlayer());
  return gv_ale[lv_aQo] == null && gv_ale[lv_aQo + 16] != null;
}
function f_aQp() {
  var lv_aQq = 0;
  gv_alg[6999] = 59;
  do {
    if (lv_aQq > gv_alg.getInt(6999)) {
      break;
    }
    gv_alg[lv_aQq + 7000] = 0;
    gv_alg[lv_aQq + 7400] = 0;
    lv_aQq = lv_aQq + 1;
  } while (true);
  lv_aQq = 1;
  gv_ale[lv_aQq + 7000] = gv_akk;
  gv_alf[lv_aQq + 7000] = "Avatar of Earth";
  gv_alf[lv_aQq + 7100] = "k";
  gv_alf[lv_aQq + 7200] = "Atlas";
  gv_alf[lv_aQq + 7300] =
    "A series of Titans were put into Greece to aid Hades quest; they must be defeated if we are to again secure our lands. To the northwest of town, nestled in against the mountains, is the Avatar of Earth named Atlas. He is the first of the Titans and must be defeated.";
  gv_alf[lv_aQq + 7400] =
    "ReplaceableTextures\\CommandButtons\\BTNRockGolem.blp";
  gv_alg[lv_aQq + 7100] = 300;
  gv_alg[lv_aQq + 7200] = 200;
  gv_alg[lv_aQq + 7300] = 0;
  gv_alg[lv_aQq + 7500] = 1;
  gv_alg[lv_aQq + 7600] = 25;
  lv_aQq = 2;
  gv_ale[lv_aQq + 7000] = gv_akk;
  gv_alf[lv_aQq + 7000] = "Avatar of Justice";
  gv_alf[lv_aQq + 7100] = "k";
  gv_alf[lv_aQq + 7200] = "Themus";
  gv_alf[lv_aQq + 7300] =
    "In the far west of the foothills lies what was once the farm of a very prosperous family. Recently the Titan Themus moved into the compound and made it his home. He must be eliminated, drive him from the farm and back to hell.";
  gv_alf[lv_aQq + 7400] = "ReplaceableTextures\\CommandButtons\\BTNGuldan.blp";
  gv_alg[lv_aQq + 7100] = 700;
  gv_alg[lv_aQq + 7200] = 350;
  gv_alg[lv_aQq + 7300] = 0;
  gv_alg[lv_aQq + 7500] = 1;
  gv_alg[lv_aQq + 7600] = 40;
  lv_aQq = 3;
  gv_ale[lv_aQq + 7000] = gv_akk;
  gv_alf[lv_aQq + 7000] = "Avatar of Air";
  gv_alf[lv_aQq + 7100] = "k";
  gv_alf[lv_aQq + 7200] = "Uranus";
  gv_alf[lv_aQq + 7300] =
    "Up in the Minotaur Mountain region lies the domain of the titan Uranus. Journey up the mountain, locate and defeat him.";
  gv_alf[lv_aQq + 7400] =
    "ReplaceableTextures\\CommandButtons\\BTNHeroCryptLord.blp";
  gv_alg[lv_aQq + 7100] = 1800;
  gv_alg[lv_aQq + 7200] = 650;
  gv_alg[lv_aQq + 7300] = 0;
  gv_alg[lv_aQq + 7500] = 1;
  gv_alg[lv_aQq + 7600] = 60;
  lv_aQq = 4;
  gv_ale[lv_aQq + 7000] = gv_akk;
  gv_alf[lv_aQq + 7000] = "Avatar of Water";
  gv_alf[lv_aQq + 7100] = "k";
  gv_alf[lv_aQq + 7200] = "Oceanus";
  gv_alf[lv_aQq + 7300] =
    "When the Titans began to make their homes in Athens we thought we were safe, as we had no place big enough to support them - Then out of the depths rose the lands of Oceanus. We managed to put a gate up to keep him from taking over the entire island but he is a constant threat.";
  gv_alf[lv_aQq + 7400] =
    "ReplaceableTextures\\CommandButtons\\BTNSeaElemental.blp";
  gv_alg[lv_aQq + 7100] = 3500;
  gv_alg[lv_aQq + 7200] = 1700;
  gv_alg[lv_aQq + 7300] = 1;
  gv_alg[lv_aQq + 7500] = 1;
  gv_alg[lv_aQq + 7600] = 80;
  lv_aQq = 5;
  gv_ale[lv_aQq + 7000] = gv_akk;
  gv_alf[lv_aQq + 7000] = "Mistress of Pain";
  gv_alf[lv_aQq + 7100] = "k";
  gv_alf[lv_aQq + 7200] = "Rhea";
  gv_alf[lv_aQq + 7300] =
    "Deep within the Satyr Woodlands near the cost lies the lair of the demoness Rhea. She and her ilk are preforming horrifying rituals and sacrificing our good people to increase their infernal powers. You must put a stop to their activities.";
  gv_alf[lv_aQq + 7400] =
    "ReplaceableTextures\\CommandButtons\\BTNHeroDreadlord.blp";
  gv_alg[lv_aQq + 7100] = 4800;
  gv_alg[lv_aQq + 7200] = 2000;
  gv_alg[lv_aQq + 7300] = 2;
  gv_alg[lv_aQq + 7500] = 1;
  gv_alg[lv_aQq + 7600] = 90;
  lv_aQq = 6;
  gv_ale[lv_aQq + 7000] = gv_akk;
  gv_alf[lv_aQq + 7000] = "Avatar of Nature";
  gv_alf[lv_aQq + 7100] = "k";
  gv_alf[lv_aQq + 7200] = "Thea";
  gv_alf[lv_aQq + 7300] =
    "The Titan Thea has reportedly been seen far to the east at the very edge of the forest. I don't have to tell you how important it is that he be defeated if we hope to win this war. Go forth and force him out by any means necessary.";
  gv_alf[lv_aQq + 7400] =
    "ReplaceableTextures\\CommandButtons\\BTNSasquatch.blp";
  gv_alg[lv_aQq + 7100] = 6000;
  gv_alg[lv_aQq + 7200] = 3000;
  gv_alg[lv_aQq + 7300] = 2;
  gv_alg[lv_aQq + 7500] = 1;
  gv_alg[lv_aQq + 7600] = 100;
  lv_aQq = 7;
  gv_ale[lv_aQq + 7000] = gv_akk;
  gv_alf[lv_aQq + 7000] = "Avatar of the Elements";
  gv_alf[lv_aQq + 7100] = "k";
  gv_alf[lv_aQq + 7200] = "Gaea";
  gv_alf[lv_aQq + 7300] =
    "The very southeastern tip of the Centaur Plains is home to Gaea. She is the last of the Titans that reside in Greece - the rest, wellâ€¦ deal with her first and we will talk about them.";
  gv_alf[lv_aQq + 7400] =
    "ReplaceableTextures\\CommandButtons\\BTNNightElfRunner.blp";
  gv_alg[lv_aQq + 7100] = 9500;
  gv_alg[lv_aQq + 7200] = 5000;
  gv_alg[lv_aQq + 7300] = 3;
  gv_alg[lv_aQq + 7500] = 1;
  gv_alg[lv_aQq + 7600] = 110;
  lv_aQq = 8;
  gv_ale[lv_aQq + 7000] = gv_akk;
  gv_alf[lv_aQq + 7000] = "Avatar of Death";
  gv_alf[lv_aQq + 7100] = "k";
  gv_alf[lv_aQq + 7200] = "Cronus";
  gv_alf[lv_aQq + 7300] =
    "Somewhere in the Undead region is the tomb of the Avatar of Death, Cronus. He has at his disposal great powers over the creatures in his realm so be careful should you manage to locate him.";
  gv_alf[lv_aQq + 7400] = "ReplaceableTextures\\CommandButtons\\BTNPitLord.blp";
  gv_alg[lv_aQq + 7100] = 13500;
  gv_alg[lv_aQq + 7200] = 6000;
  gv_alg[lv_aQq + 7300] = 4;
  gv_alg[lv_aQq + 7500] = 1;
  gv_alg[lv_aQq + 7600] = 125;
  lv_aQq = 9;
  gv_ale[lv_aQq + 7000] = gv_akk;
  gv_alf[lv_aQq + 7000] = "Frozen Citadel";
  gv_alf[lv_aQq + 7100] = "k";
  gv_alf[lv_aQq + 7200] = "Persephone";
  gv_alf[lv_aQq + 7300] =
    "There may be hope for Greece yet! Only one task remains before we can force Hades to show himself and banish him back to Tartarus; defeating his wife Persephone. To do that you must venture into her Frozen Citadel and face her minions. Once they have been slain you will get your chance to face the ice queen herself.";
  gv_alf[lv_aQq + 7400] =
    "ReplaceableTextures\\CommandButtons\\BTNAssassin.blp";
  gv_alg[lv_aQq + 7100] = 15000;
  gv_alg[lv_aQq + 7200] = 10000;
  gv_alg[lv_aQq + 7300] = 10;
  gv_alg[lv_aQq + 7500] = 1;
  gv_alg[lv_aQq + 7600] = 135;
  lv_aQq = 10;
  gv_ale[lv_aQq + 7000] = gv_akk;
  gv_alf[lv_aQq + 7000] = "Hades Himself";
  gv_alf[lv_aQq + 7100] = "k";
  gv_alf[lv_aQq + 7200] = "Hades";
  gv_alf[lv_aQq + 7300] =
    "Now that all of his minions have been defeated we can force Hades to show himself. Get yourself in position men, for he comes now!!!";
  gv_alf[lv_aQq + 7400] =
    "ReplaceableTextures\\CommandButtons\\BTNKiljaedin.blp";
  gv_alg[lv_aQq + 7100] = 22500;
  gv_alg[lv_aQq + 7200] = 15000;
  gv_alg[lv_aQq + 7300] = 15;
  gv_alg[lv_aQq + 7500] = 1;
  gv_alg[lv_aQq + 7600] = 140;
  lv_aQq = 11;
  gv_ale[lv_aQq + 7000] = gv_aka;
  gv_alf[lv_aQq + 7000] = "Training Grounds";
  gv_alf[lv_aQq + 7100] = "k";
  gv_alf[lv_aQq + 7200] = "Minor Demons";
  gv_alf[lv_aQq + 7300] =
    "Demons have infested our lands. Some of them are very powerful, others are no more than a nuscence - the ones around here are the later. But before we put you in the front lines against more dangerous foes we need to make sure you are properly trained.";
  gv_alf[lv_aQq + 7400] =
    "ReplaceableTextures\\CommandButtons\\BTNLavaSpawn.blp";
  gv_alg[lv_aQq + 7100] = 50;
  gv_alg[lv_aQq + 7200] = 50;
  gv_alg[lv_aQq + 7300] = 0;
  gv_alg[lv_aQq + 7500] = f_aKz(10);
  gv_alg[lv_aQq + 7600] = 1;
  lv_aQq = 12;
  gv_ale[lv_aQq + 7000] = gv_aka;
  gv_alf[lv_aQq + 7000] = "Advanced Training";
  gv_alf[lv_aQq + 7100] = "k";
  gv_alf[lv_aQq + 7200] = "Demons or Major Demons";
  gv_alf[lv_aQq + 7300] =
    "You cannot expect all foes to be so easy to overcome. Search out some 'Demons' and 'Major Demons' and see how you fare against them.";
  gv_alf[lv_aQq + 7400] =
    "ReplaceableTextures\\CommandButtons\\BTNLavaSpawn.blp";
  gv_alg[lv_aQq + 7100] = 100;
  gv_alg[lv_aQq + 7200] = 100;
  gv_alg[lv_aQq + 7300] = 0;
  gv_alg[lv_aQq + 7500] = f_aKz(25);
  gv_alg[lv_aQq + 7600] = 1;
  lv_aQq = 13;
  gv_ale[lv_aQq + 7000] = gv_aka;
  gv_alf[lv_aQq + 7000] = "* Cleansing the Land";
  gv_alf[lv_aQq + 7100] = "k";
  gv_alf[lv_aQq + 7200] = "Demons";
  gv_alf[lv_aQq + 7300] =
    "These 'Demons' are a plight on our land. Continue to defeat them and I will pay you a handsome bounty.";
  gv_alf[lv_aQq + 7400] =
    "ReplaceableTextures\\CommandButtons\\BTNLavaSpawn.blp";
  gv_alg[lv_aQq + 7100] = 60;
  gv_alg[lv_aQq + 7200] = 60;
  gv_alg[lv_aQq + 7300] = 0;
  gv_alg[lv_aQq + 7500] = f_aKz(15);
  gv_alg[lv_aQq + 7600] = 1;
  lv_aQq = 14;
  gv_ale[lv_aQq + 7000] = gv_aka;
  gv_alf[lv_aQq + 7000] = "A Thorn in our Side";
  gv_alf[lv_aQq + 7100] = "k";
  gv_alf[lv_aQq + 7200] = "Bandits,Bandit Tents";
  gv_alf[lv_aQq + 7300] =
    "While the real threat to Athens lies to the north of town, a troop of bandits have moved into the lands to the southwest and have been a constant hindrance to our ability to defend ourselves. Seek out these bandits and eradicate their camps.";
  gv_alf[lv_aQq + 7400] = "ReplaceableTextures\\CommandButtons\\BTNBandit.blp";
  gv_alg[lv_aQq + 7100] = 300;
  gv_alg[lv_aQq + 7200] = 150;
  gv_alg[lv_aQq + 7300] = 0;
  gv_alg[lv_aQq + 7500] = f_aKz(12) + 7 * 100;
  gv_alg[lv_aQq + 7600] = 5;
  lv_aQq = 15;
  gv_ale[lv_aQq + 7000] = gv_aka;
  gv_alf[lv_aQq + 7000] = "* Patrol the Southlands";
  gv_alf[lv_aQq + 7100] = "k";
  gv_alf[lv_aQq + 7200] = "Bandits";
  gv_alf[lv_aQq + 7300] =
    "Eliminating the Bandit Camps was a step in the right direction, but there are more Bandits who need dealt with. I shall pay you a bounty for each one you eliminate.";
  gv_alf[lv_aQq + 7400] =
    "ReplaceableTextures\\CommandButtons\\BTNBanditSpearThrower.blp";
  gv_alg[lv_aQq + 7100] = 150;
  gv_alg[lv_aQq + 7200] = 200;
  gv_alg[lv_aQq + 7300] = 0;
  gv_alg[lv_aQq + 7500] = f_aKz(15);
  gv_alg[lv_aQq + 7600] = 5;
  lv_aQq = 16;
  gv_ale[lv_aQq + 7000] = gv_aka;
  gv_alf[lv_aQq + 7000] = "Bandit Lord";
  gv_alf[lv_aQq + 7100] = "k";
  gv_alf[lv_aQq + 7200] = "Bandit Lord";
  gv_alf[lv_aQq + 7300] =
    "Your efforts to eradicate the Bandits have paid off; the elusive Bandit Lord has finally showed himself. Seek him out and deal with him in a way that will ensure he never bothers us again.";
  gv_alf[lv_aQq + 7400] = "ReplaceableTextures\\CommandButtons\\BTNBandit.blp";
  gv_alg[lv_aQq + 7100] = 700;
  gv_alg[lv_aQq + 7200] = 500;
  gv_alg[lv_aQq + 7300] = 0;
  gv_alg[lv_aQq + 7500] = 1;
  gv_alg[lv_aQq + 7600] = 10;
  lv_aQq = 17;
  gv_ale[lv_aQq + 7000] = gv_akB;
  gv_alf[lv_aQq + 7000] = "* Wolf Pelts";
  gv_alf[lv_aQq + 7100] = "c";
  gv_alf[lv_aQq + 7200] = "Wolf Pelts";
  gv_alf[lv_aQq + 7300] =
    "Sure the problems of Greece bother me, but I have problems of my own. Each night a pack of wolves come down from Mount Olympus and prey upon my sheep. If you could eliminate the threat to my farm and family I would be more inclined to take an interest in the problems facing Athens.";
  gv_alf[lv_aQq + 7400] =
    "ReplaceableTextures\\CommandButtons\\BTNTimberWolf.blp";
  gv_alg[lv_aQq + 7100] = 200;
  gv_alg[lv_aQq + 7200] = 300;
  gv_alg[lv_aQq + 7300] = 0;
  gv_alg[lv_aQq + 7500] = f_aKz(8);
  gv_alg[lv_aQq + 7600] = 15;
  lv_aQq = 18;
  gv_ale[lv_aQq + 7000] = gv_akB;
  gv_alf[lv_aQq + 7000] = "Sewing the Seeds";
  gv_alf[lv_aQq + 7100] = "c";
  gv_alf[lv_aQq + 7200] = "Blessed Seeds";
  gv_alf[lv_aQq + 7300] =
    "The evil in the land has made it hard for me to grow my crops. In order to feed my family I require a special seed available only from the Sacred Grove of the Druids west of Athens.  Normally I would send my son but he is currently serving in the army of Corinth and so I need someone else to go. Do this errand for me and my family and I willl be most thankful.";
  gv_alf[lv_aQq + 7400] = "ReplaceableTextures\\CommandButtons\\BTNAcorn.blp";
  gv_alg[lv_aQq + 7100] = 300;
  gv_alg[lv_aQq + 7200] = 300;
  gv_alg[lv_aQq + 7300] = 0;
  gv_alg[lv_aQq + 7500] = 1;
  gv_alg[lv_aQq + 7600] = 15;
  lv_aQq = 19;
  gv_ale[lv_aQq + 7000] = gv_akB;
  gv_alf[lv_aQq + 7000] = "Restock the Flock";
  gv_alf[lv_aQq + 7100] = "c";
  gv_alf[lv_aQq + 7200] = "Sheep";
  gv_alf[lv_aQq + 7300] =
    "With the threat of the wolves removed my farm can once again support a full flock of sheep. There is a farm just north of Corinth where you can get the sheep I require. Lead 6 of them safely back here so my flock can be restored.";
  gv_alf[lv_aQq + 7400] = "ReplaceableTextures\\CommandButtons\\BTNSheep.blp";
  gv_alg[lv_aQq + 7100] = 300;
  gv_alg[lv_aQq + 7200] = 800;
  gv_alg[lv_aQq + 7300] = 0;
  gv_alg[lv_aQq + 7500] = 6;
  gv_alg[lv_aQq + 7600] = 15;
  lv_aQq = 20;
  gv_ale[lv_aQq + 7000] = gv_akB;
  gv_alf[lv_aQq + 7000] = "Letter to my Son";
  gv_alf[lv_aQq + 7100] = "c";
  gv_alf[lv_aQq + 7200] = "Letter to Son";
  gv_alf[lv_aQq + 7300] =
    "You have been of great service to my family and we are in your debt. I have just one last favor to ask of you. My son is serving in the Corinthian army helping to defend the city. We obviously cannout journey there to visit him but you can. Please deliver this letter to him and send him our love.";
  gv_alf[lv_aQq + 7400] = "ReplaceableTextures\\CommandButtons\\BTNScroll.blp";
  gv_alg[lv_aQq + 7100] = 500;
  gv_alg[lv_aQq + 7200] = 100;
  gv_alg[lv_aQq + 7300] = 0;
  gv_alg[lv_aQq + 7500] = 1;
  gv_alg[lv_aQq + 7600] = 15;
  lv_aQq = 21;
  gv_ale[lv_aQq + 7000] = gv_aky;
  gv_alf[lv_aQq + 7000] = "* Trolls-A-Plenty";
  gv_alf[lv_aQq + 7100] = "k";
  gv_alf[lv_aQq + 7200] = "Trolls";
  gv_alf[lv_aQq + 7300] =
    "Troll, trolls, trollsâ€¦ the damn things are everywhere around here. Tell you what, go eliminate some of them and bring back their mangy hides and I'll see you get some  gold for your troubles.";
  gv_alf[lv_aQq + 7400] =
    "ReplaceableTextures\\CommandButtons\\BTNForestTrollTrapper.blp";
  gv_alg[lv_aQq + 7100] = 400;
  gv_alg[lv_aQq + 7200] = 400;
  gv_alg[lv_aQq + 7300] = 0;
  gv_alg[lv_aQq + 7500] = f_aKz(25);
  gv_alg[lv_aQq + 7600] = 20;
  lv_aQq = 22;
  gv_ale[lv_aQq + 7000] = gv_aky;
  gv_alf[lv_aQq + 7000] = "Troll Chieftain";
  gv_alf[lv_aQq + 7100] = "k";
  gv_alf[lv_aQq + 7200] = "Troll Chieftain";
  gv_alf[lv_aQq + 7300] =
    "So apparently there is one troll that actually possesses half a brain who the others treat as some sort of leader. Seek out this 'super troll' and bash his half-brain's out, would ya?";
  gv_alf[lv_aQq + 7400] =
    "ReplaceableTextures\\CommandButtons\\BTNForestTroll.blp";
  gv_alg[lv_aQq + 7100] = 800;
  gv_alg[lv_aQq + 7200] = 500;
  gv_alg[lv_aQq + 7300] = 0;
  gv_alg[lv_aQq + 7500] = 1;
  gv_alg[lv_aQq + 7600] = 20;
  lv_aQq = 23;
  gv_ale[lv_aQq + 7000] = gv_aky;
  gv_alf[lv_aQq + 7000] = "Harpys on the Hill";
  gv_alf[lv_aQq + 7100] = "k";
  gv_alf[lv_aQq + 7200] = "Harpys,Harpy Nests";
  gv_alf[lv_aQq + 7300] =
    "Just south of the path that leads into the Minotaur Mountains lies a nest of evil Harpy's that seem to delight in swooping down and stealing our farmers precious cattle. Go up to them and do some 'negotiating' with them and persuade them to leave the mountain for good.";
  gv_alf[lv_aQq + 7400] = "ReplaceableTextures\\CommandButtons\\BTNHarpy.blp";
  gv_alg[lv_aQq + 7100] = 1200;
  gv_alg[lv_aQq + 7200] = 700;
  gv_alg[lv_aQq + 7300] = 0;
  gv_alg[lv_aQq + 7500] = f_aKz(8) + 4 * 100;
  gv_alg[lv_aQq + 7600] = 35;
  lv_aQq = 24;
  gv_ale[lv_aQq + 7000] = gv_aky;
  gv_alf[lv_aQq + 7000] = "* Snatching the Claws";
  gv_alf[lv_aQq + 7100] = "c";
  gv_alf[lv_aQq + 7200] = "Harpy Claws";
  gv_alf[lv_aQq + 7300] =
    "As repulsive as Harpy's are they aren't totally useless - their feathers are great for use on our shields. Since war preparations are in full swing we can use all the claws we can get. For each dozen claws you collect I'll dip into the war chest and pay you a nice reward.";
  gv_alf[lv_aQq + 7400] =
    "ReplaceableTextures\\CommandButtons\\BTNAdvancedCreatureAttack.blp";
  gv_alg[lv_aQq + 7100] = 700;
  gv_alg[lv_aQq + 7200] = 600;
  gv_alg[lv_aQq + 7300] = 0;
  gv_alg[lv_aQq + 7500] = f_aKz(12);
  gv_alg[lv_aQq + 7600] = 35;
  lv_aQq = 25;
  gv_ale[lv_aQq + 7000] = gv_aky;
  gv_alf[lv_aQq + 7000] = "Hive Mother of the Harpys";
  gv_alf[lv_aQq + 7100] = "k";
  gv_alf[lv_aQq + 7200] = "Harpy Hive Mother";
  gv_alf[lv_aQq + 7300] =
    "It seems there is one Harpy meaner than the others - a Hive Mother! We can't be sure our farms will be safe until she is killed and is no more.";
  gv_alf[lv_aQq + 7400] =
    "ReplaceableTextures\\CommandButtons\\BTNHarpyWitch.blp";
  gv_alg[lv_aQq + 7100] = 1400;
  gv_alg[lv_aQq + 7200] = 900;
  gv_alg[lv_aQq + 7300] = 0;
  gv_alg[lv_aQq + 7500] = 1;
  gv_alg[lv_aQq + 7600] = 40;
  lv_aQq = 26;
  gv_ale[lv_aQq + 7000] = gv_akF;
  gv_alf[lv_aQq + 7000] = "Revenge against the Minotaurs";
  gv_alf[lv_aQq + 7100] = "k";
  gv_alf[lv_aQq + 7200] = "Minotaurs,Minotaur Buildings";
  gv_alf[lv_aQq + 7300] =
    "Hail Brave Warriors! I am in need of your services. For a long time my family has made their home on this mountain, bur recently a band of evil Minotaur's has come and driven us from our home. Worse still, they killed my wife and my children in the process.";
  gv_alf[lv_aQq + 7400] =
    "ReplaceableTextures\\CommandButtons\\BTNHeroTaurenChieftain.blp";
  gv_alg[lv_aQq + 7100] = 2000;
  gv_alg[lv_aQq + 7200] = 1200;
  gv_alg[lv_aQq + 7300] = 0;
  gv_alg[lv_aQq + 7500] = 22 + 7 * 100;
  gv_alg[lv_aQq + 7600] = 40;
  lv_aQq = 27;
  gv_ale[lv_aQq + 7000] = gv_akF;
  gv_alf[lv_aQq + 7000] = "Treasure Cave";
  gv_alf[lv_aQq + 7100] = "t";
  gv_alf[lv_aQq + 7200] = "Talk to Draco";
  gv_alf[lv_aQq + 7300] =
    "High up in the mountains where the snow never melts lies a cave filled with wonderous treasure - and also with a hideous one-eyed creature known simply as the 'Cyclops.'  Going into his cave would be suicide for most people but you have proven to be both tough and resourceful enough to rid us of this menace. The warrior Draco makes camp in the region, seek him out and he may be able to show you a way into the cave.";
  gv_alf[lv_aQq + 7400] = "ReplaceableTextures\\CommandButtons\\BTNDranai.blp";
  gv_alg[lv_aQq + 7100] = 0;
  gv_alg[lv_aQq + 7200] = 0;
  gv_alg[lv_aQq + 7300] = 0;
  gv_alg[lv_aQq + 7500] = 1;
  gv_alg[lv_aQq + 7600] = 40;
  lv_aQq = 28;
  gv_ale[lv_aQq + 7000] = gv_akG;
  gv_alf[lv_aQq + 7000] = "Minotaur Hides";
  gv_alf[lv_aQq + 7100] = "c";
  gv_alf[lv_aQq + 7200] = "Minotaur Hides";
  gv_alf[lv_aQq + 7300] =
    "So you wish to venture into the cave and face the Cyclops? Well, of course I can show you the way into the cave but you'll have to do something for me. I need the hides from 10 Minotaur's that roam the hills south of this camp; bring to me those hides and I will show you the way.";
  gv_alf[lv_aQq + 7400] = "ReplaceableTextures\\CommandButtons\\BTNTauren.blp";
  gv_alg[lv_aQq + 7100] = 1200;
  gv_alg[lv_aQq + 7200] = 1100;
  gv_alg[lv_aQq + 7300] = 0;
  gv_alg[lv_aQq + 7500] = f_aKz(10);
  gv_alg[lv_aQq + 7600] = 45;
  lv_aQq = 29;
  gv_ale[lv_aQq + 7000] = gv_akG;
  gv_alf[lv_aQq + 7000] = "Cyclops Eye";
  gv_alf[lv_aQq + 7100] = "c";
  gv_alf[lv_aQq + 7200] = "Cyclops Eye";
  gv_alf[lv_aQq + 7300] =
    "Be wary when you enter the cave for the Cyclops defends his treasure fiercely. If you do manage to defeat him return to me with his eye so I may send it back to Athens as proof he is dead and I will share my reward with you.";
  gv_alf[lv_aQq + 7400] =
    "ReplaceableTextures\\CommandButtons\\BTNSentryWard.blp";
  gv_alg[lv_aQq + 7100] = 1500;
  gv_alg[lv_aQq + 7200] = 2000;
  gv_alg[lv_aQq + 7300] = 0;
  gv_alg[lv_aQq + 7500] = 1;
  gv_alg[lv_aQq + 7600] = 45;
  lv_aQq = 30;
  gv_ale[lv_aQq + 7000] = gv_akG;
  gv_alf[lv_aQq + 7000] = "Terror of the Mountain";
  gv_alf[lv_aQq + 7100] = "k";
  gv_alf[lv_aQq + 7200] = "Ladon";
  gv_alf[lv_aQq + 7300] =
    "There is a dangerous creature that terrorizes the mountain - the great dragon Ladon. My troops and I are not nearly powerful enough to defeat him but perhaps you are. If you manage to kill him the rewards will be great but I don't need to tell you the consequences should you fail.";
  gv_alf[lv_aQq + 7400] =
    "ReplaceableTextures\\CommandButtons\\BTNBronzeDragon.blp";
  gv_alg[lv_aQq + 7100] = 15000;
  gv_alg[lv_aQq + 7200] = 10000;
  gv_alg[lv_aQq + 7300] = 2;
  gv_alg[lv_aQq + 7500] = 1;
  gv_alg[lv_aQq + 7600] = 100;
  lv_aQq = 31;
  gv_ale[lv_aQq + 7000] = gv_akd;
  gv_alf[lv_aQq + 7000] = "Naga Homelands";
  gv_alf[lv_aQq + 7100] = "k";
  gv_alf[lv_aQq + 7200] = "Naga,Naga Huts";
  gv_alf[lv_aQq + 7300] =
    "For a long time my people inhabited this island and lived in peace, making a very good living in the shipping trade. Recently, however, we have been pushed further and further up the island by the Naga until we were left with only this small settlement. Please erradicate these monsters from our island.";
  gv_alf[lv_aQq + 7400] =
    "ReplaceableTextures\\CommandButtons\\BTNSeaWitch.blp";
  gv_alg[lv_aQq + 7100] = 3000;
  gv_alg[lv_aQq + 7200] = 1800;
  gv_alg[lv_aQq + 7300] = 0;
  gv_alg[lv_aQq + 7500] = f_aKz(25) + 13 * 100;
  gv_alg[lv_aQq + 7600] = 50;
  lv_aQq = 32;
  gv_ale[lv_aQq + 7000] = gv_akd;
  gv_alf[lv_aQq + 7000] = "Here There Be Monsters";
  gv_alf[lv_aQq + 7100] = "k";
  gv_alf[lv_aQq + 7200] = "Hydra";
  gv_alf[lv_aQq + 7300] =
    "At the very southeastern tip of Crete lies what was our most important settlement, but the foul Hydra has risen from the depths and decided to take it as his home instead. We tried to fight him but many were lost. Send him back to the depths so that we may reclaim our most important city.";
  gv_alf[lv_aQq + 7400] =
    "ReplaceableTextures\\CommandButtons\\BTNGreenHydra.blp";
  gv_alg[lv_aQq + 7100] = 3000;
  gv_alg[lv_aQq + 7200] = 800;
  gv_alg[lv_aQq + 7300] = 1;
  gv_alg[lv_aQq + 7500] = 1;
  gv_alg[lv_aQq + 7600] = 59;
  lv_aQq = 33;
  gv_ale[lv_aQq + 7000] = gv_akd;
  gv_alf[lv_aQq + 7000] = "* Back to the Depths";
  gv_alf[lv_aQq + 7100] = "k";
  gv_alf[lv_aQq + 7200] = "Naga";
  gv_alf[lv_aQq + 7300] =
    "Every Naga you kill is one less that we have to worry about in the furture. For each of them you send to a watery grave I will reach into our rich coffers and reward you generously.";
  gv_alf[lv_aQq + 7400] =
    "ReplaceableTextures\\CommandButtons\\BTNNagaMyrmidon.blp";
  gv_alg[lv_aQq + 7100] = 2200;
  gv_alg[lv_aQq + 7200] = 1500;
  gv_alg[lv_aQq + 7300] = 0;
  gv_alg[lv_aQq + 7500] = f_aKz(15);
  gv_alg[lv_aQq + 7600] = 55;
  lv_aQq = 34;
  gv_ale[lv_aQq + 7000] = gv_akl;
  gv_alf[lv_aQq + 7000] = "Opening the Road";
  gv_alf[lv_aQq + 7100] = "k";
  gv_alf[lv_aQq + 7200] = "Satyrs";
  gv_alf[lv_aQq + 7300] =
    "Sparta is a very important city to the defense of Greece. Unfortunately there is only one road that leads to the city and it runs through the Satyr Woodlands to the south of us. Used to be that wasn't a problem; send a few troops and they would leave you alone. But now only 1 out of every 10 caravans makes it through and I'm losing money with each failed shipment. Thin the Satyr ranks and help establish order and I shall pay you handsomely.";
  gv_alf[lv_aQq + 7400] = "ReplaceableTextures\\CommandButtons\\BTNSatyr.blp";
  gv_alg[lv_aQq + 7100] = 2000;
  gv_alg[lv_aQq + 7200] = 3500;
  gv_alg[lv_aQq + 7300] = 0;
  gv_alg[lv_aQq + 7500] = f_aKz(12);
  gv_alg[lv_aQq + 7600] = 60;
  lv_aQq = 35;
  gv_ale[lv_aQq + 7000] = gv_akl;
  gv_alf[lv_aQq + 7000] = "Escorting the Caravan";
  gv_alf[lv_aQq + 7100] = "t";
  gv_alf[lv_aQq + 7200] = "Escort Caravan";
  gv_alf[lv_aQq + 7300] =
    "Now that you've shown the Satyr's you're not to be trifled with I need you to help escort a caravan through the woods to Sparta. Report back to me once it has passed into the city so I know that it made it successfully.";
  gv_alf[lv_aQq + 7400] =
    "ReplaceableTextures\\CommandButtons\\BTNBloodElfSupplyWagon.blp";
  gv_alg[lv_aQq + 7100] = 6500;
  gv_alg[lv_aQq + 7200] = 5000;
  gv_alg[lv_aQq + 7300] = 1;
  gv_alg[lv_aQq + 7500] = 1;
  gv_alg[lv_aQq + 7600] = 60;
  lv_aQq = 36;
  gv_ale[lv_aQq + 7000] = gv_akl;
  gv_alf[lv_aQq + 7000] = "* Patrolling the Forest";
  gv_alf[lv_aQq + 7100] = "c";
  gv_alf[lv_aQq + 7200] = "Satyr Hooves";
  gv_alf[lv_aQq + 7300] =
    "Thanks to you the road to Sparta is now open, but that doesn't mean that those uppity Satyr's won't try something like this again. Why don't you go back into the Woodlands and ensure that they don't get the chance. For every pair of Satyr hooves you collect I'll see to it your coin purse grows heavier.";
  gv_alf[lv_aQq + 7400] =
    "ReplaceableTextures\\CommandButtons\\BTNWarStomp.blp";
  gv_alg[lv_aQq + 7100] = 1000;
  gv_alg[lv_aQq + 7200] = 900;
  gv_alg[lv_aQq + 7300] = 0;
  gv_alg[lv_aQq + 7500] = f_aKz(10);
  gv_alg[lv_aQq + 7600] = 60;
  lv_aQq = 37;
  gv_ale[lv_aQq + 7000] = gv_akm;
  gv_alf[lv_aQq + 7000] = "Evil Forest";
  gv_alf[lv_aQq + 7100] = "k";
  gv_alf[lv_aQq + 7200] = "Corrupted Treants";
  gv_alf[lv_aQq + 7300] =
    "Once this swamp was home to the a great many magestic trees, but like everything in the land these days the trees have sucumb to the infulences of evil. Venture into the swamp and erradicate these spirits as best you can. Start with the seedlings and saplings, as you can defeat them easily before the evil inside them becomes deeply rooted.";
  gv_alf[lv_aQq + 7400] = "ReplaceableTextures\\CommandButtons\\BTNEnt.blp";
  gv_alg[lv_aQq + 7100] = 2500;
  gv_alg[lv_aQq + 7200] = 1000;
  gv_alg[lv_aQq + 7300] = 0;
  gv_alg[lv_aQq + 7500] = f_aKz(18);
  gv_alg[lv_aQq + 7600] = 75;
  lv_aQq = 38;
  gv_ale[lv_aQq + 7000] = gv_akm;
  gv_alf[lv_aQq + 7000] = "A Deeply Rooted Problem";
  gv_alf[lv_aQq + 7100] = "k";
  gv_alf[lv_aQq + 7200] = "Treant Snags";
  gv_alf[lv_aQq + 7300] =
    "We believe that we have discovered how the evil is spreading - through a type of Treant called 'The Snag' which are the oldest and greatest trees in the forest. These 'Snags' are responsible for 'planting' evil seeds which then quickly grow into Seedlings and Saplings. Seek out and eliminate all such abominations as you can find.";
  gv_alf[lv_aQq + 7400] = "ReplaceableTextures\\CommandButtons\\BTNTreant.blp";
  gv_alg[lv_aQq + 7100] = 3500;
  gv_alg[lv_aQq + 7200] = 1500;
  gv_alg[lv_aQq + 7300] = 0;
  gv_alg[lv_aQq + 7500] = f_aKz(10);
  gv_alg[lv_aQq + 7600] = 75;
  lv_aQq = 39;
  gv_ale[lv_aQq + 7000] = gv_akm;
  gv_alf[lv_aQq + 7000] = "* The Cleansing Continued";
  gv_alf[lv_aQq + 7100] = "k";
  gv_alf[lv_aQq + 7200] = "Corrupted Treants";
  gv_alf[lv_aQq + 7300] =
    "Your efforts are clearly making a difference in the swamp, for the animals are slowly returning and a great many birds that once fled the branches of evil trees are once again singing their songs. For each additional 15 Corrupted Treants you remove from the forest I will pay you a handsome bounty.";
  gv_alf[lv_aQq + 7400] =
    "ReplaceableTextures\\CommandButtons\\BTNCorruptedEnt.blp";
  gv_alg[lv_aQq + 7100] = 1500;
  gv_alg[lv_aQq + 7200] = 1250;
  gv_alg[lv_aQq + 7300] = 0;
  gv_alg[lv_aQq + 7500] = f_aKz(15);
  gv_alg[lv_aQq + 7600] = 75;
  lv_aQq = 40;
  gv_ale[lv_aQq + 7000] = gv_akm;
  gv_alf[lv_aQq + 7000] = "The Dark Heart of the Forest";
  gv_alf[lv_aQq + 7100] = "k";
  gv_alf[lv_aQq + 7200] = "Blackspot Raven-Perch";
  gv_alf[lv_aQq + 7300] =
    "We thought that the 'Snags' in the forest were the source of the corruption but I'm sad to say that we were wrong. Deep in the woods to the north of town is the most evil and foul Treant I've ever heard about - Blackspot Raven-Perch.";
  gv_alf[lv_aQq + 7400] =
    "ReplaceableTextures\\CommandButtons\\BTNAncientOfTheMoon.blp";
  gv_alg[lv_aQq + 7100] = 7500;
  gv_alg[lv_aQq + 7200] = 5000;
  gv_alg[lv_aQq + 7300] = 1;
  gv_alg[lv_aQq + 7500] = 1;
  gv_alg[lv_aQq + 7600] = 90;
  lv_aQq = 41;
  gv_ale[lv_aQq + 7000] = gv_akz;
  gv_alf[lv_aQq + 7000] = "Reestablishing the Route";
  gv_alf[lv_aQq + 7100] = "c";
  gv_alf[lv_aQq + 7200] = "Shipping Manifest";
  gv_alf[lv_aQq + 7300] =
    "Good adventurers, I am in need of our assistance. Thanks to your liberation of the Isle of Crete I can reopen the vital trading route established many years ago. Go see Lysander and find out what provisions he and his people are in need of the most then return here with a manifest. Let him know that my boats will sail from port in 3 days.";
  gv_alf[lv_aQq + 7400] =
    "ReplaceableTextures\\CommandButtons\\BTNBansheeMaster.blp";
  gv_alg[lv_aQq + 7100] = 3500;
  gv_alg[lv_aQq + 7200] = 0;
  gv_alg[lv_aQq + 7300] = 0;
  gv_alg[lv_aQq + 7500] = 1;
  gv_alg[lv_aQq + 7600] = 85;
  lv_aQq = 42;
  gv_ale[lv_aQq + 7000] = gv_akz;
  gv_alf[lv_aQq + 7000] = "Additional Supplies";
  gv_alf[lv_aQq + 7100] = "c";
  gv_alf[lv_aQq + 7200] = "Grapes, Olives, Wine";
  gv_alf[lv_aQq + 7300] =
    "Lysander has requested some additional supplies that I am in short supply of. I need you to gather for me six bushels of grapes, ten branches of olives and three casks of wine. Return to me when you have located these provisions.";
  gv_alf[lv_aQq + 7400] =
    "ReplaceableTextures\\CommandButtons\\BTNNatureTouchGrow.blp";
  gv_alg[lv_aQq + 7100] = 5000;
  gv_alg[lv_aQq + 7200] = 3500;
  gv_alg[lv_aQq + 7300] = 0;
  gv_alg[lv_aQq + 7500] = 19;
  gv_alg[lv_aQq + 7600] = 85;
  lv_aQq = 43;
  gv_ale[lv_aQq + 7000] = gv_akz;
  gv_alf[lv_aQq + 7000] = "In Need of Repairs";
  gv_alf[lv_aQq + 7100] = "c";
  gv_alf[lv_aQq + 7200] = "Gloomdire Wood";
  gv_alf[lv_aQq + 7300] =
    "It seems that my boats need a little work before I can send them out to sea for their voyage.  My boatright tells me he needs some wood but that the only wood hard enough to withstand the boiling seas between here and Crete is found only in Gloomdire Swamp. He needs 12 bundles to complete his repairs, but before you try and venture into the swamp you should check with the woodsman.";
  gv_alf[lv_aQq + 7400] =
    "ReplaceableTextures\\CommandButtons\\BTNBundleOfLumber.blp";
  gv_alg[lv_aQq + 7100] = 6500;
  gv_alg[lv_aQq + 7200] = 5000;
  gv_alg[lv_aQq + 7300] = 0;
  gv_alg[lv_aQq + 7500] = f_aKz(12);
  gv_alg[lv_aQq + 7600] = 95;
  lv_aQq = 44;
  gv_ale[lv_aQq + 7000] = gv_akz;
  gv_alf[lv_aQq + 7000] = "Paying my Dues";
  gv_alf[lv_aQq + 7100] = "c";
  gv_alf[lv_aQq + 7200] = "Merchant's Tithe";
  gv_alf[lv_aQq + 7300] =
    "Praise be to the gods for the rewards they have bestowed upon me and my family. Long ago I realized that not everyone can be as fortunate as we are and that I needed to give something back. Please take this money to the priest in town and tell him to use it to further his works.";
  gv_alf[lv_aQq + 7400] = "ReplaceableTextures\\CommandButtons\\BTNPriest.blp";
  gv_alg[lv_aQq + 7100] = 1000;
  gv_alg[lv_aQq + 7200] = 0;
  gv_alg[lv_aQq + 7300] = 0;
  gv_alg[lv_aQq + 7500] = 1;
  gv_alg[lv_aQq + 7600] = 100;
  lv_aQq = 45;
  gv_ale[lv_aQq + 7000] = gv_ajQ;
  gv_alf[lv_aQq + 7000] = "Centaur Camps";
  gv_alf[lv_aQq + 7100] = "k";
  gv_alf[lv_aQq + 7200] = "Centaurs,Centaur Camps";
  gv_alf[lv_aQq + 7300] =
    "To the south of our great city lies a barren region that the locals call 'The Centaur Plains' for obvious reasons - the place is overrun with the hideous beasts. We need you to travel into these barrens and seek out their encampments, defeat all the centaurs and return here.";
  gv_alf[lv_aQq + 7400] = "ReplaceableTextures\\CommandButtons\\BTNcentaur.blp";
  gv_alg[lv_aQq + 7100] = 6600;
  gv_alg[lv_aQq + 7200] = 3000;
  gv_alg[lv_aQq + 7300] = 0;
  gv_alg[lv_aQq + 7500] = f_aKz(25) + 11 * 100;
  gv_alg[lv_aQq + 7600] = 90;
  lv_aQq = 46;
  gv_ale[lv_aQq + 7000] = gv_ajQ;
  gv_alf[lv_aQq + 7000] = "The Centaur War Chief";
  gv_alf[lv_aQq + 7100] = "k";
  gv_alf[lv_aQq + 7200] = "Centaur War Chief";
  gv_alf[lv_aQq + 7300] =
    "Apparently slaying those centaurs and destroying their huts has really made their War Chief angry. Normally I wouldn't ask a few adventurers to go out and face him - I would send a whole garrison of troops to do the job - but I don't have that luxury at the moment.";
  gv_alf[lv_aQq + 7400] =
    "ReplaceableTextures\\CommandButtons\\BTNCentaurKhan.blp";
  gv_alg[lv_aQq + 7100] = 6500;
  gv_alg[lv_aQq + 7200] = 4500;
  gv_alg[lv_aQq + 7300] = 1;
  gv_alg[lv_aQq + 7500] = 1;
  gv_alg[lv_aQq + 7600] = 90;
  lv_aQq = 47;
  gv_ale[lv_aQq + 7000] = gv_ajQ;
  gv_alf[lv_aQq + 7000] = "* Crude but Effective";
  gv_alf[lv_aQq + 7100] = "c";
  gv_alf[lv_aQq + 7200] = "Centaur Weapons";
  gv_alf[lv_aQq + 7300] =
    "The impending war has spread our resources very thin and we are in need of as many weapons as we can lay our hands on. While the Centaur weapons aren't of the quality we would normally issue our troops they are non the less crudely effective. For each batch of 12 weapons you gather we can equip a garrison of troops. For each garrison we are able to equip this way I will see you properly rewarded.";
  gv_alf[lv_aQq + 7400] =
    "ReplaceableTextures\\CommandButtons\\BTNOrcMeleeUpOne.blp";
  gv_alg[lv_aQq + 7100] = 3500;
  gv_alg[lv_aQq + 7200] = 3000;
  gv_alg[lv_aQq + 7300] = 0;
  gv_alg[lv_aQq + 7500] = f_aKz(12);
  gv_alg[lv_aQq + 7600] = 90;
  lv_aQq = 48;
  gv_ale[lv_aQq + 7000] = gv_ajQ;
  gv_alf[lv_aQq + 7000] = "Call Home the Captains";
  gv_alf[lv_aQq + 7100] = "c";
  gv_alf[lv_aQq + 7200] = "Spartan Captains";
  gv_alf[lv_aQq + 7300] =
    "Our captains are out recruiting every soldier they can, but it is time for them to return home and prepare for battle. There are five of them scattered throughout the realm, locate them and have them return to the city immediately.";
  gv_alf[lv_aQq + 7400] =
    "ReplaceableTextures\\CommandButtons\\BTNTheCaptain.blp";
  gv_alg[lv_aQq + 7100] = 7500;
  gv_alg[lv_aQq + 7200] = 0;
  gv_alg[lv_aQq + 7300] = 0;
  gv_alg[lv_aQq + 7500] = 5;
  gv_alg[lv_aQq + 7600] = 90;
  lv_aQq = 49;
  gv_ale[lv_aQq + 7000] = gv_akD;
  gv_alf[lv_aQq + 7000] = "Rest their Souls";
  gv_alf[lv_aQq + 7100] = "k";
  gv_alf[lv_aQq + 7200] = "Undead Spirits";
  gv_alf[lv_aQq + 7300] =
    "Gloomdire Swamp was the final resting place to the souls of our fallen, but now they rest no more.  Free their souls from the plague of evil and help them to again find peace.";
  gv_alf[lv_aQq + 7400] = "ReplaceableTextures\\CommandButtons\\BTNGhost.blp";
  gv_alg[lv_aQq + 7100] = 5000;
  gv_alg[lv_aQq + 7200] = 1500;
  gv_alg[lv_aQq + 7300] = 0;
  gv_alg[lv_aQq + 7500] = f_aKz(20);
  gv_alg[lv_aQq + 7600] = 110;
  lv_aQq = 50;
  gv_ale[lv_aQq + 7000] = gv_akD;
  gv_alf[lv_aQq + 7000] = "Flows of Evil";
  gv_alf[lv_aQq + 7100] = "k";
  gv_alf[lv_aQq + 7200] = "Undead Lords";
  gv_alf[lv_aQq + 7300] =
    "Evil flows from three souces; the Lycanthrope, Vampire Lord and Zombie Lord. Ridding us of these seeds of evil will go a long way to restoring order to the marsh.";
  gv_alf[lv_aQq + 7400] =
    "ReplaceableTextures\\CommandButtons\\BTNHeroDreadLord.blp";
  gv_alg[lv_aQq + 7100] = 7500;
  gv_alg[lv_aQq + 7200] = 2000;
  gv_alg[lv_aQq + 7300] = 0;
  gv_alg[lv_aQq + 7500] = 3;
  gv_alg[lv_aQq + 7600] = 110;
  lv_aQq = 51;
  gv_ale[lv_aQq + 7000] = gv_akD;
  gv_alf[lv_aQq + 7000] = "Lady of the Swamp";
  gv_alf[lv_aQq + 7100] = "k";
  gv_alf[lv_aQq + 7200] = "Medusa";
  gv_alf[lv_aQq + 7300] =
    "The inner sanctum of the swamp is home to the legendary Medusa and her protectors. Release this land from her evil grip and we can begin to re-sanctify this land.";
  gv_alf[lv_aQq + 7400] =
    "ReplaceableTextures\\CommandButtons\\BTNNagaSeaWitch.blp";
  gv_alg[lv_aQq + 7100] = 10000;
  gv_alg[lv_aQq + 7200] = 5000;
  gv_alg[lv_aQq + 7300] = 2;
  gv_alg[lv_aQq + 7500] = 1;
  gv_alg[lv_aQq + 7600] = 110;
  lv_aQq = 52;
  gv_ale[lv_aQq + 7000] = gv_akD;
  gv_alf[lv_aQq + 7000] = "* Final Rest";
  gv_alf[lv_aQq + 7100] = "k";
  gv_alf[lv_aQq + 7200] = "Undead Spirits";
  gv_alf[lv_aQq + 7300] =
    "Now that the well springs of evil have been purged from this land the souls who inhabit this land can once again be allowed to rest. For each 25 souls you help lay to rest I will reach into the church coffers and pay you a reward.";
  gv_alf[lv_aQq + 7400] =
    "ReplaceableTextures\\CommandButtons\\BTNSkeletonMage.blp";
  gv_alg[lv_aQq + 7100] = 4000;
  gv_alg[lv_aQq + 7200] = 2500;
  gv_alg[lv_aQq + 7300] = 0;
  gv_alg[lv_aQq + 7500] = f_aKz(25);
  gv_alg[lv_aQq + 7600] = 110;
  lv_aQq = 53;
  gv_ale[lv_aQq + 7000] = gv_akA;
  gv_alf[lv_aQq + 7000] = "A Special Invitation";
  gv_alf[lv_aQq + 7100] = "t";
  gv_alf[lv_aQq + 7200] = "Find Riddlemaster";
  gv_alf[lv_aQq + 7300] =
    "Thank you for setting me free - normally I would have nothing to do with your ilk but a good deed is a good deed. I have no way to repay your generosity other than this; Seek out the Satyr known as the Riddlemaster at his hut in the Satyr Woodlands and tell him that I sent you.";
  gv_alf[lv_aQq + 7400] =
    "ReplaceableTextures\\CommandButtons\\BTNSatyrTrickster.blp";
  gv_alg[lv_aQq + 7100] = 0;
  gv_alg[lv_aQq + 7200] = 0;
  gv_alg[lv_aQq + 7300] = 0;
  gv_alg[lv_aQq + 7500] = 1;
  gv_alg[lv_aQq + 7600] = 110;
  lv_aQq = 54;
  gv_ale[lv_aQq + 7000] = gv_ajZ;
  gv_alf[lv_aQq + 7000] = "Solve the Riddle";
  gv_alf[lv_aQq + 7100] = "t";
  gv_alf[lv_aQq + 7200] = "Answer the Riddle";
  gv_alf[lv_aQq + 7300] = "*** Riddle to be chosen ***";
  gv_alf[lv_aQq + 7400] =
    "ReplaceableTextures\\CommandButtons\\BTN_Quest_NemeanLion.blp";
  gv_alg[lv_aQq + 7100] = 15000;
  gv_alg[lv_aQq + 7200] = 15000;
  gv_alg[lv_aQq + 7300] = 0;
  gv_alg[lv_aQq + 7500] = 1;
  gv_alg[lv_aQq + 7600] = 110;
  lv_aQq = 55;
  gv_ale[lv_aQq + 7000] = gv_akf;
  gv_alf[lv_aQq + 7000] = "Looking for a Lost Lyre";
  gv_alf[lv_aQq + 7100] = "c";
  gv_alf[lv_aQq + 7200] = "Lyre";
  gv_alf[lv_aQq + 7300] =
    "I have lost it!  As a poet and musician, I'm trying to perfect the lyre invented by Hermes.  If you find my lyre, please return it.  I promise to sing a song in your honor that I'm sure will inspire the troops of Athens.";
  gv_alf[lv_aQq + 7400] =
    "ReplaceableTextures\\CommandButtons\\BTNBoneChimes.blp";
  gv_alg[lv_aQq + 7100] = 2500;
  gv_alg[lv_aQq + 7200] = 2250;
  gv_alg[lv_aQq + 7300] = 0;
  gv_alg[lv_aQq + 7500] = 1;
  gv_alg[lv_aQq + 7600] = 60;
  lv_aQq = 56;
  gv_ale[lv_aQq + 7000] = gv_ajW;
  gv_alf[lv_aQq + 7000] = "One Lives and One Dies";
  gv_alf[lv_aQq + 7100] = "t";
  gv_alf[lv_aQq + 7200] = "Make a Choice";
  gv_alf[lv_aQq + 7300] =
    "Two heros are in dire need of help, but there is only time to save one.  Jason is being attacked by King Aeetes and his troops.  Chiron is overrun by centuars led by Nessus.  Please hurry! If you wait too long BOTH will be lost and Athens will surely fall!";
  gv_alf[lv_aQq + 7400] =
    "ReplaceableTextures\\CommandButtons\\BTNGarithos.blp";
  gv_alg[lv_aQq + 7100] = 7500;
  gv_alg[lv_aQq + 7200] = 2500;
  gv_alg[lv_aQq + 7300] = 0;
  gv_alg[lv_aQq + 7500] = 1;
  gv_alg[lv_aQq + 7600] = 100;
  lv_aQq = 57;
  gv_ale[lv_aQq + 7000] = gv_akk;
  gv_alf[lv_aQq + 7000] = "When will my heart (blade) beat again?";
  gv_alf[lv_aQq + 7100] = "t";
  gv_alf[lv_aQq + 7200] = "The Heart Blade";
  gv_alf[lv_aQq + 7300] =
    "The other day I was at the Arena and made a silly bet on one of the gladiators. I didnâ€™t think I could lose and so I carelessly wagered my favorite sword â€“ The Heart Blade. If you could talk to Apeleuthathes and find out what it would take to get my sword back, I know heâ€™s a reasonable man to do business with. If you do that, and keep hush-hush about it Iâ€™ll give you a nice reward. I may even reach into the townâ€™s Equipment Cache and come up with something really special.";
  gv_alf[lv_aQq + 7400] = "ReplaceableTextures\\CommandButtons\\BTNCurse.blp";
  gv_alg[lv_aQq + 7100] = 10000;
  gv_alg[lv_aQq + 7200] = 25000;
  gv_alg[lv_aQq + 7300] = 5;
  gv_alg[lv_aQq + 7500] = 1;
  gv_alg[lv_aQq + 7600] = 120;
  lv_aQq = 58;
  gv_ale[lv_aQq + 7000] = gv_ajZ;
  gv_alf[lv_aQq + 7000] = "Slay the Lion";
  gv_alf[lv_aQq + 7100] = "k";
  gv_alf[lv_aQq + 7200] = "Nemean Lion";
  gv_alf[lv_aQq + 7300] =
    "Very impressive, now we'll see if your blade is as sharp as your mind. Deep within the Centaur Canyons lives the fabled Nemean Lion. I have awoken him and coaxed him from his cave, battle him if you dare!";
  gv_alf[lv_aQq + 7400] =
    "ReplaceableTextures\\CommandButtons\\BTN_Quest_NemeanLion.blp";
  gv_alg[lv_aQq + 7100] = 15000;
  gv_alg[lv_aQq + 7200] = 15000;
  gv_alg[lv_aQq + 7300] = 0;
  gv_alg[lv_aQq + 7500] = 1;
  gv_alg[lv_aQq + 7600] = 105;
  lv_aQq = 1;
  do {
    if (lv_aQq > gv_alg.getInt(6999)) {
      break;
    }
    if (SubString(gv_alf[lv_aQq + 7000], 0, 1) == "*") {
      gv_alf[lv_aQq + 7200] = S2S("* " + gv_alf[lv_aQq + 7200]);
    }
    lv_aQq = lv_aQq + 1;
  } while (true);
  DestroyTrigger(gv_afY);
}
function f_aQr() {
  var lv_aQs = 0;
  gv_alz = CreateMultiboard();
  MultiboardSetColumnCount(gv_alz, 2);
  MultiboardSetRowCount(gv_alz, 1);
  MultiboardSetTitleText(gv_alz, "Active Quests");
  MultiboardSetItemStyleBJ(gv_alz, 1, 1, true, false);
  MultiboardSetItemStyleBJ(gv_alz, 2, 1, true, false);
  MultiboardSetItemWidthBJ(gv_alz, 1, 1, 13);
  MultiboardSetItemValueBJ(gv_alz, 1, 1, "None right now...");
  gv_alk[lv_aQs] = CreateQuestBJ(
    0,
    "Completed Quests",
    "None",
    "ReplaceableTextures\\CommandButtons\\BTNSnazzyScroll.blp"
  );
  gv_alF = CreateQuestItemBJ(
    gv_alk[lv_aQs],
    "|cff00ff00Alive:|r All 8 Titans."
  );
  gv_alG = CreateQuestItemBJ(
    gv_alk[lv_aQs],
    "|cff00ff00Alive:|r The Queen of the Underworld."
  );
  gv_alH = CreateQuestItemBJ(
    gv_alk[lv_aQs],
    "|cff00ff00Alive:|r The Lord of Hell."
  );
  QuestSetDiscovered(gv_alk[lv_aQs], true);
  f_aJZ(1);
  f_aJZ(11);
  f_aJZ(14);
  f_aJZ(17);
  f_aJZ(21);
  f_aJZ(23);
  f_aJZ(26);
  f_aJZ(28);
  f_aJZ(31);
  f_aJZ(34);
  f_aJZ(37);
  f_aJZ(41);
  f_aJZ(45);
  f_aJZ(49);
  f_aJZ(53);
  f_aJZ(55);
  f_aJZ(56);
  ShowUnit(gv_ajY, false);
  ShowUnit(gv_akC, false);
  ShowUnit(gv_akL, false);
  ShowUnit(gv_ake, false);
  ShowUnit(gv_akK, false);
  ShowUnit(gv_aki, false);
  ShowUnit(gv_akI, false);
  ShowUnit(gv_aks, false);
  ShowUnit(gv_akx, false);
  ShowUnit(gv_akr, false);
  ShowUnit(gv_akH, false);
  ShowUnit(gv_akw, false);
  ShowUnit(gv_akA, false);
  ShowUnit(gv_akg, false);
  ShowUnit(gv_akv, false);
  ShowUnit(gv_akn, false);
  ShowUnit(gv_akc, false);
  SetUnitInvulnerable(gv_akM, true);
  DestroyTrigger(gv_afZ);
}
function f_aQt() {
  MultiboardDisplay(gv_aly, false);
  MultiboardDisplay(gv_alz, true);
  MultiboardMinimize(gv_alz, false);
  DestroyTrigger(gv_aga);
}
function f_aQu() {
  var lv_aQv = 0;
  var lv_aQw = null;
  var lv_aQx = GetRandomLocInRect(gv_aeL);
  var lv_aQy = GetItemTypeId(GetManipulatedItem());
  var lv_aQz = GetTriggerPlayer();
  var lv_aQA = GetPlayerId(lv_aQz);
  var lv_aQB;
  if (lv_aQy == "I057") {
    f_aKh(17);
  }
  if (lv_aQy == "I058") {
    f_aKh(18);
  }
  if (lv_aQy == "I059") {
    lv_aQv = 1;
    do {
      if (lv_aQv > 12) {
        break;
      }
      lv_aQw = CreateUnit(
        Player(8),
        "n000",
        I2R(GetRandomInt(544, 832)),
        I2R(GetRandomInt(4768, 5120)),
        0.0
      );
      lv_aQx = GetRectCenter(gv_aeN);
      IssuePointOrderByIdLoc(lv_aQw, 851986, lv_aQx);
      lv_aQv = lv_aQv + 1;
    } while (true);
    lv_aQx = GetRectCenter(gv_aeN);
    lv_aQw = CreateUnitAtLoc(
      gv_amG,
      gv_alg.getInt(GetRandomInt(416, 435)),
      lv_aQx,
      0.0
    );
    lv_aQw = CreateUnitAtLoc(
      gv_amG,
      gv_alg.getInt(GetRandomInt(416, 435)),
      lv_aQx,
      0.0
    );
    lv_aQw = CreateUnitAtLoc(
      gv_amG,
      gv_alg.getInt(GetRandomInt(416, 435)),
      lv_aQx,
      0.0
    );
    lv_aQw = CreateUnitAtLoc(
      gv_amG,
      gv_alg.getInt(GetRandomInt(416, 435)),
      lv_aQx,
      0.0
    );
    lv_aQx = GetRectCenter(gv_aeO);
    lv_aQw = CreateUnitAtLoc(
      gv_amG,
      gv_alg.getInt(GetRandomInt(416, 435)),
      lv_aQx,
      0.0
    );
    lv_aQw = CreateUnitAtLoc(
      gv_amG,
      gv_alg.getInt(GetRandomInt(416, 435)),
      lv_aQx,
      0.0
    );
    lv_aQw = CreateUnitAtLoc(
      gv_amG,
      gv_alg.getInt(GetRandomInt(416, 435)),
      lv_aQx,
      0.0
    );
    lv_aQx = GetRectCenter(gv_aeP);
    lv_aQw = CreateUnitAtLoc(
      gv_amG,
      gv_alg.getInt(GetRandomInt(416, 435)),
      lv_aQx,
      0.0
    );
    lv_aQw = CreateUnitAtLoc(
      gv_amG,
      gv_alg.getInt(GetRandomInt(416, 435)),
      lv_aQx,
      0.0
    );
    lv_aQx = GetRectCenter(gv_aeM);
    lv_aQw = CreateUnitAtLoc(
      gv_amG,
      gv_alg.getInt(GetRandomInt(416, 435)),
      lv_aQx,
      0.0
    );
  }
  if (lv_aQy == "I05B") {
    f_aKh(24);
  }
  if (lv_aQy == "I05C") {
    f_aKh(28);
  }
  if (lv_aQy == "I05E") {
    f_aKh(36);
  }
  if (lv_aQy == "I05G" || lv_aQy == "I05H" || lv_aQy == "I05I") {
    f_aKh(42);
  }
  if (lv_aQy == "I05J") {
    f_aKh(43);
  }
  if (lv_aQy == "I05K") {
    f_aKh(47);
  }
  if (gv_alg.getInt(56 + 7000) == 2) {
    if (lv_aQy == "I05T" || lv_aQy == "I05U") {
      ShowUnit(gv_ajW, false);
      if (lv_aQy == "I05T") {
        gv_alf[56 + 7200] = "Save Jason";
        gv_ale[89] = CreateUnit(Player(8), "uabo", 6850, 1200, 0.0);
      }
      if (lv_aQy == "I05U") {
        gv_alf[56 + 7200] = "Save Chiron";
        gv_ale[89] = CreateUnit(Player(8), "edot", 6850, 1200, 0.0);
      }
      lv_aQv = 0;
      do {
        if (lv_aQv > 7) {
          break;
        }
        if (RectContainsUnit(gv_aeQ, gv_ale[lv_aQv])) {
          DestroyEffect(
            AddSpecialEffectTarget(
              "Abilities\\Spells\\Human\\MassTeleport\\MassTeleportCaster.mdl",
              gv_ale[lv_aQv],
              "origin"
            )
          );
          SetUnitPosition(gv_ale[lv_aQv], 6850, 1200);
          PanCameraToTimedForPlayer(Player(lv_aQv), 6850, 1200, 0);
        }
        lv_aQv = lv_aQv + 1;
      } while (true);
      f_aJS();
      EnableTrigger(gv_agE);
      TriggerRegisterTimerEventPeriodic(gv_agE, 5);
      EnableTrigger(gv_agF);
      ExecuteFunc("f_aQC");
    }
  }
  if (gv_alg.getInt(57 + 7000) == 2) {
    if (lv_aQy == "I05Y" && GetWidgetLife(gv_akc) > 0.405) {
      gv_alg[188] = 4;
      gv_alg[168] = lv_aQA + 8;
      SetUnitPosition(gv_akc, GetRectCenterX(gv_aeY), GetRectCenterY(gv_aeY));
      SetPlayerAllianceStateBJ(Player(lv_aQA), Player(9), 0);
      SetPlayerAllianceStateBJ(Player(9), Player(lv_aQA), 0);
      SetUnitPosition(
        gv_ale[lv_aQA],
        GetRectCenterX(gv_aeX),
        GetRectCenterY(gv_aeX)
      );
      PanCameraToTimedForPlayer(
        Player(lv_aQA),
        GetRectCenterX(gv_aeX),
        GetRectCenterY(gv_aeX),
        0
      );
      IssueTargetOrderById(gv_akc, gv_aas, gv_ale[lv_aQA]);
    }
    if (lv_aQy == "I05Z") {
      lv_aQv = 0;
      do {
        if (lv_aQv > 11) {
          break;
        }
        if (lv_aQv < 6) {
          lv_aQB = UnitItemInSlot(gv_ale[lv_aQA], lv_aQv);
        } else {
          lv_aQB = UnitItemInSlot(gv_ale[lv_aQA + 8], lv_aQv - 6);
        }
        if (GetItemTypeId(lv_aQB) == "I01E") {
          if (GetItemPlayer(lv_aQB) == Player(lv_aQA)) {
            f_aLO(lv_aQz, "Those remains of the lion are so NOT fresh.");
          } else {
            RemoveItem(lv_aQB);
            UnitAddItemByIdSwapped("I060", gv_ale[lv_aQA + 8]);
            f_aKh(57);
            lv_aQv = 13;
          }
        }
        lv_aQv = lv_aQv + 1;
      } while (true);
      if (lv_aQv < 13) {
        f_aLO(lv_aQz, "Listen assclown, bring me real remains from the lion.");
      }
    }
  }
  lv_aQw = null;
  lv_aQz = null;
  lv_aQB = null;
  RemoveLocation(lv_aQx);
  lv_aQx = null;
}
function f_aQD() {
  var lv_aQE;
  var lv_aQF;
  var lv_aQG;
  var lv_aQH = 200 + GetRandomInt(0, 4);
  lv_aQF = GetUnitX(gv_ale[lv_aQH]) + 50;
  lv_aQG = GetUnitY(gv_ale[lv_aQH]) + 65;
  if (lv_aQH == 200) {
    lv_aQE = gv_alf[500 + GetRandomInt(0, 16)];
  }
  if (lv_aQH == 201) {
    lv_aQE = gv_alf[500 + GetRandomInt(50, 62)];
  }
  if (lv_aQH == 202) {
    lv_aQE = gv_alf[500 + GetRandomInt(75, 84)];
  }
  if (lv_aQH == 203) {
    lv_aQE = gv_alf[500 + GetRandomInt(85, 96)];
  }
  f_aLR(null, lv_aQE, 255, 215, 0, lv_aQF, lv_aQG, 0.0, 0.0, 19, 10);
}
function f_aQI() {
  f_aIM(GetExpiredTimer());
  gv_acw = CreateUnit(
    Player(11),
    "Nfir",
    GetRectCenterX(gv_afq),
    GetRectCenterY(gv_afq),
    225
  );
  SuspendHeroXP(gv_acw, true);
  f_aOh();
}
function f_aQJ() {
  var lv_aQK = 0;
  var lv_aQL = 0;
  var lv_aQM = 0;
  var lv_aQN = GetRectCenter(gv_acC);
  var lv_aQO = GetTriggerUnit();
  var lv_aQP;
  lv_aQK = f_aKp(lv_aQO);
  if (f_aKt(lv_aQO, lv_aQK) == false) {
    return;
  }
  lv_aQM = 1;
  if (gv_alg.getInt(lv_aQM + 7000) == 1) {
    f_aKb(lv_aQM, lv_aQK);
    if (gv_alg.getInt(lv_aQM + 7000) == 2) {
      ModifyGateBJ(1, gv_akW);
      lv_aQN = GetRectCenter(gv_adA);
      PingMinimapLocForForce(gv_alq, lv_aQN, 15);
    }
  }
  if (gv_alg.getInt(lv_aQM + 7000) == 3) {
    f_aKj(lv_aQM);
    f_aJZ(2);
  }
  lv_aQM = 2;
  if (gv_alg.getInt(lv_aQM + 7000) == 1) {
    f_aKb(lv_aQM, lv_aQK);
    if (gv_alg.getInt(lv_aQM + 7000) == 2) {
      ModifyGateBJ(1, gv_akT);
      lv_aQN = GetRectCenter(gv_afa);
      PingMinimapLocForForce(gv_alq, lv_aQN, 15);
    }
  }
  if (gv_alg.getInt(lv_aQM + 7000) == 3) {
    f_aKj(lv_aQM);
    f_aJZ(3);
  }
  lv_aQM = 3;
  if (gv_alg.getInt(lv_aQM + 7000) == 1) {
    f_aKb(lv_aQM, lv_aQK);
    if (gv_alg.getInt(lv_aQM + 7000) == 2) {
      ModifyGateBJ(1, gv_akU);
      lv_aQN = GetRectCenter(gv_afm);
      PingMinimapLocForForce(gv_alq, lv_aQN, 15);
    }
  }
  if (gv_alg.getInt(lv_aQM + 7000) == 3) {
    f_aKj(lv_aQM);
    f_aJZ(4);
  }
  lv_aQM = 4;
  if (gv_alg.getInt(lv_aQM + 7000) == 1) {
    f_aKb(lv_aQM, lv_aQK);
    if (gv_alg.getInt(lv_aQM + 7000) == 2) {
      ModifyGateBJ(1, gv_akY);
      lv_aQN = GetRectCenter(gv_ael);
      PingMinimapLocForForce(gv_alq, lv_aQN, 15);
    }
  }
  if (gv_alg.getInt(lv_aQM + 7000) == 3) {
    f_aKj(lv_aQM);
    f_aJZ(5);
  }
  lv_aQM = 5;
  if (gv_alg.getInt(lv_aQM + 7000) == 1) {
    f_aKb(lv_aQM, lv_aQK);
    if (gv_alg.getInt(lv_aQM + 7000) == 2) {
      ModifyGateBJ(1, gv_akP);
      lv_aQN = GetRectCenter(gv_aez);
      PingMinimapLocForForce(gv_alq, lv_aQN, 15);
    }
  }
  if (gv_alg.getInt(lv_aQM + 7000) == 3) {
    f_aKj(lv_aQM);
    f_aJZ(6);
  }
  lv_aQM = 6;
  if (gv_alg.getInt(lv_aQM + 7000) == 1) {
    f_aKb(lv_aQM, lv_aQK);
    if (gv_alg.getInt(lv_aQM + 7000) == 2) {
      EnumDestructablesInRectAll(gv_afw, f_aNB);
      lv_aQN = GetRectCenter(gv_aeZ);
      PingMinimapLocForForce(gv_alq, lv_aQN, 15);
    }
  }
  if (gv_alg.getInt(lv_aQM + 7000) == 3) {
    f_aKj(lv_aQM);
    f_aJZ(7);
    f_aJZ(57);
  }
  lv_aQM = 7;
  if (gv_alg.getInt(lv_aQM + 7000) == 1) {
    f_aKb(lv_aQM, lv_aQK);
    if (gv_alg.getInt(lv_aQM + 7000) == 2) {
      ModifyGateBJ(1, gv_akO);
      lv_aQN = GetRectCenter(gv_adJ);
      PingMinimapLocForForce(gv_alq, lv_aQN, 15);
    }
  }
  if (gv_alg.getInt(lv_aQM + 7000) == 3) {
    f_aKj(lv_aQM);
    f_aJZ(8);
  }
  lv_aQM = 8;
  if (gv_alg.getInt(lv_aQM + 7000) == 1) {
    f_aKb(lv_aQM, lv_aQK);
    if (gv_alg.getInt(lv_aQM + 7000) == 2) {
      ModifyGateBJ(1, gv_akZ);
      lv_aQN = GetRectCenter(gv_adm);
      PingMinimapLocForForce(gv_alq, lv_aQN, 15);
    }
  }
  if (gv_alg.getInt(lv_aQM + 7000) == 3) {
    f_aKj(lv_aQM);
    f_aJZ(9);
  }
  lv_aQM = 9;
  if (gv_alg.getInt(lv_aQM + 7000) == 1) {
    f_aKb(lv_aQM, lv_aQK);
    if (gv_alg.getInt(lv_aQM + 7000) == 2) {
      KillDestructable(gv_akR);
      lv_aQN = GetRectCenter(gv_adu);
      PingMinimapLocForForce(gv_alq, lv_aQN, 15);
    }
  }
  if (gv_alg.getInt(lv_aQM + 7000) == 3) {
    f_aKj(lv_aQM);
    f_aJZ(10);
  }
  lv_aQM = 10;
  if (gv_alg.getInt(lv_aQM + 7000) == 1) {
    f_aKb(lv_aQM, lv_aQK);
    if (gv_alg.getInt(lv_aQM + 7000) == 2) {
      DisplayTimedTextToForce(
        gv_alq,
        5,
        "|cff00ff00Serius:|r Our seers tell us that we only got about a minute till Hades arrive!"
      );
      lv_aQN = GetRectCenter(gv_afq);
      PingMinimapLocForForce(gv_alq, lv_aQN, 5);
      TimerStart(f_aIL(), 60, false, f_aQI);
    }
  }
  if (gv_alg.getInt(lv_aQM + 7000) == 3) {
    f_aKj(lv_aQM);
  }
  lv_aQM = 57;
  if (gv_alg.getInt(lv_aQM + 7000) == 1) {
    f_aKb(lv_aQM, lv_aQK);
    PauseUnit(gv_akc, false);
    ShowUnit(gv_akc, true);
  }
  if (gv_alg.getInt(lv_aQM + 7000) == 3) {
    lv_aQL = 0;
    do {
      if (lv_aQL > 11) {
        break;
      }
      if (lv_aQL < 6) {
        lv_aQP = UnitItemInSlot(gv_ale[lv_aQK], lv_aQL);
      } else {
        lv_aQP = UnitItemInSlot(gv_ale[lv_aQK + 8], lv_aQL - 6);
      }
      if (GetItemTypeId(lv_aQP) == "I060") {
        RemoveItem(lv_aQP);
        f_aKj(lv_aQM);
        if (GetRandomInt(1, 10) <= 3) {
          UnitAddItemByIdSwapped(
            gv_alJ.getInt(365 + GetRandomInt(0, 5)),
            gv_ale[lv_aQK + 8]
          );
        }
        lv_aQL = 13;
      }
      lv_aQL = lv_aQL + 1;
    } while (true);
  }
  lv_aQO = null;
  lv_aQP = null;
  RemoveLocation(lv_aQN);
  lv_aQN = null;
}
function f_aQQ() {
  var lv_aQR = 0;
  var lv_aQS = 0;
  var lv_aQT = 0;
  var lv_aQU = GetTriggerUnit();
  lv_aQR = f_aKp(lv_aQU);
  if (f_aKt(lv_aQU, lv_aQR) == false) {
    return;
  }
  lv_aQT = 11;
  if (gv_alg.getInt(lv_aQT + 7000) == 1) {
    f_aKb(lv_aQT, lv_aQR);
  }
  if (gv_alg.getInt(lv_aQT + 7000) == 3) {
    f_aKj(lv_aQT);
    f_aJZ(12);
  }
  lv_aQT = 12;
  if (gv_alg.getInt(lv_aQT + 7000) == 1) {
    f_aKb(lv_aQT, lv_aQR);
  }
  if (gv_alg.getInt(lv_aQT + 7000) == 3) {
    f_aKj(lv_aQT);
    f_aJZ(13);
  }
  lv_aQT = 13;
  if (gv_alg.getInt(lv_aQT + 7000) == 1) {
    f_aKb(lv_aQT, lv_aQR);
  }
  if (gv_alg.getInt(lv_aQT + 7000) == 3) {
    f_aKj(lv_aQT);
    f_aJZ(14);
  }
  lv_aQT = 14;
  if (gv_alg.getInt(lv_aQT + 7000) == 1) {
    f_aKb(lv_aQT, lv_aQR);
  }
  if (gv_alg.getInt(lv_aQT + 7000) == 3) {
    f_aKj(lv_aQT);
    f_aJZ(15);
  }
  lv_aQT = 15;
  if (gv_alg.getInt(lv_aQT + 7000) == 1) {
    f_aKb(lv_aQT, lv_aQR);
  }
  if (gv_alg.getInt(lv_aQT + 7000) == 3) {
    f_aKj(lv_aQT);
    f_aJZ(16);
  }
  lv_aQT = 16;
  if (gv_alg.getInt(lv_aQT + 7000) == 1) {
    f_aKb(lv_aQT, lv_aQR);
    if (gv_alg.getInt(lv_aQT + 7000) == 2) {
      ShowUnit(gv_ajY, true);
      lv_aQS = 1;
      do {
        if (lv_aQS > 3) {
          break;
        }
        CreateUnit(
          Player(10),
          "nban",
          GetUnitX(gv_ajY),
          GetUnitY(gv_ajY),
          GetRandomReal(0, 360)
        );
        lv_aQS = lv_aQS + 1;
      } while (true);
      lv_aQS = 1;
      do {
        if (lv_aQS > 3) {
          break;
        }
        CreateUnit(
          Player(10),
          "nass",
          GetUnitX(gv_ajY),
          GetUnitY(gv_ajY),
          GetRandomReal(0, 360)
        );
        lv_aQS = lv_aQS + 1;
      } while (true);
    }
  }
  if (gv_alg.getInt(lv_aQT + 7000) == 3) {
    f_aKj(lv_aQT);
  }
  lv_aQU = null;
}
function f_aQV() {
  var lv_aQW = 0;
  var lv_aQX = 0;
  var lv_aQY = 0;
  var lv_aQZ = 0;
  var lv_aRa = GetTriggerUnit();
  var lv_aRb = GetRandomLocInRect(gv_aeL);
  lv_aQW = f_aKp(lv_aRa);
  if (f_aKt(lv_aRa, lv_aQW) == false) {
    return;
  }
  lv_aQY = 17;
  if (gv_alg.getInt(lv_aQY + 7000) == 1) {
    f_aKb(lv_aQY, lv_aQW);
  }
  if (gv_alg.getInt(lv_aQY + 7000) == 3) {
    f_aKj(lv_aQY);
    f_aJZ(18);
  }
  lv_aQY = 18;
  if (gv_alg.getInt(lv_aQY + 7000) == 1) {
    f_aKb(lv_aQY, lv_aQW);
  }
  if (gv_alg.getInt(lv_aQY + 7000) == 3) {
    lv_aQX = 0;
    do {
      if (lv_aQX > 12) {
        break;
      }
      lv_aQX = lv_aQX + 1;
      if (lv_aQX <= 6) {
        lv_aQZ = GetItemTypeId(UnitItemInSlot(gv_ale[lv_aQW], lv_aQX));
      } else {
        lv_aQZ = GetItemTypeId(UnitItemInSlot(gv_ale[lv_aQW + 8], lv_aQX - 6));
      }
      if (lv_aQZ == "I058") {
        if (lv_aQX <= 6) {
          RemoveItem(UnitItemInSlot(gv_ale[lv_aQW], lv_aQX));
        } else {
          RemoveItem(UnitItemInSlot(gv_ale[lv_aQW + 8], lv_aQX - 6));
        }
        f_aKj(lv_aQY);
        f_aJZ(19);
        lv_aQX = 13;
      }
    } while (true);
  }
  lv_aQY = 19;
  if (gv_alg.getInt(lv_aQY + 7000) == 1) {
    f_aKb(lv_aQY, lv_aQW);
    ShowUnit(gv_akC, true);
  }
  if (gv_alg.getInt(lv_aQY + 7000) == 3) {
    f_aKj(lv_aQY);
    f_aJZ(20);
  }
  lv_aQY = 20;
  if (gv_alg.getInt(lv_aQY + 7000) == 1) {
    f_aKb(lv_aQY, lv_aQW);
    if (gv_alg.getInt(lv_aQY + 7000) == 2) {
      UnitAddItemByIdSwapped("I05A", gv_ale[lv_aQW + 8]);
      lv_aRa = gv_akE;
      lv_aRb = GetRandomLocInRect(gv_ade);
      IssuePointOrderByIdLoc(lv_aRa, 851986, lv_aRb);
    }
  }
  if (gv_alg.getInt(lv_aQY + 7000) == 3) {
    f_aKj(lv_aQY);
  }
  lv_aRa = null;
  RemoveLocation(lv_aRb);
  lv_aRb = null;
}
function f_aRc() {
  var lv_aRd = 0;
  var lv_aRe = 0;
  var lv_aRf = 0;
  var lv_aRg = 0;
  var lv_aRh;
  var lv_aRi = GetTriggerUnit();
  lv_aRd = f_aKp(lv_aRi);
  if (f_aKt(lv_aRi, lv_aRd) == false) {
    return;
  }
  lv_aRf = 20;
  if (gv_alg.getInt(lv_aRf + 7000) == 2) {
    lv_aRe = 0;
    do {
      if (lv_aRe > 11) {
        break;
      }
      if (lv_aRe < 6) {
        lv_aRh = UnitItemInSlot(gv_ale[lv_aRd], lv_aRe);
      } else {
        lv_aRh = UnitItemInSlot(gv_ale[lv_aRd + 8], lv_aRe - 6);
      }
      lv_aRg = GetItemTypeId(lv_aRh);
      if (lv_aRg == "I05A") {
        RemoveItem(lv_aRh);
        f_aKh(lv_aRf);
        lv_aRe = 13;
      }
      lv_aRe = lv_aRe + 1;
    } while (true);
  }
  lv_aRh = null;
  lv_aRi = null;
}
function f_aRj() {
  var lv_aRk = 0;
  var lv_aRl = 0;
  var lv_aRm = 0;
  var lv_aRn = GetTriggerUnit();
  lv_aRk = f_aKp(lv_aRn);
  if (f_aKt(lv_aRn, lv_aRk) == false) {
    return;
  }
  lv_aRm = 21;
  if (gv_alg.getInt(lv_aRm + 7000) == 1) {
    f_aKb(lv_aRm, lv_aRk);
  }
  if (gv_alg.getInt(lv_aRm + 7000) == 3) {
    f_aKj(lv_aRm);
    f_aJZ(22);
  }
  lv_aRm = 22;
  if (gv_alg.getInt(lv_aRm + 7000) == 1) {
    f_aKb(lv_aRm, lv_aRk);
    if (gv_alg.getInt(lv_aRm + 7000) == 2) {
      ShowUnitShow(gv_akL);
    }
  }
  if (gv_alg.getInt(lv_aRm + 7000) == 3) {
    f_aKj(lv_aRm);
  }
  lv_aRm = 23;
  if (gv_alg.getInt(lv_aRm + 7000) == 1) {
    f_aKb(lv_aRm, lv_aRk);
  }
  if (gv_alg.getInt(lv_aRm + 7000) == 3) {
    f_aKj(lv_aRm);
    f_aJZ(24);
  }
  lv_aRm = 24;
  if (gv_alg.getInt(lv_aRm + 7000) == 1) {
    f_aKb(lv_aRm, lv_aRk);
  }
  if (gv_alg.getInt(lv_aRm + 7000) == 3) {
    f_aKj(lv_aRm);
    if (gv_alg.getInt(25 + 7000) == 0) {
      f_aJZ(25);
    }
  }
  lv_aRm = 25;
  if (gv_alg.getInt(lv_aRm + 7000) == 1) {
    f_aKb(lv_aRm, lv_aRk);
    if (gv_alg.getInt(lv_aRm + 7000) == 2) {
      ShowUnit(gv_ake, true);
    }
  }
  if (gv_alg.getInt(lv_aRm + 7000) == 3) {
    f_aKj(lv_aRm);
  }
  lv_aRn = null;
}
function f_aRo() {
  var lv_aRp = 0;
  var lv_aRq = 0;
  var lv_aRr = 0;
  var lv_aRs = GetTriggerUnit();
  lv_aRp = f_aKp(lv_aRs);
  if (f_aKt(lv_aRs, lv_aRp) == false) {
    return;
  }
  lv_aRr = 26;
  if (gv_alg.getInt(lv_aRr + 7000) == 1) {
    f_aKb(lv_aRr, lv_aRp);
    ShowUnit(gv_akK, true);
  }
  if (gv_alg.getInt(lv_aRr + 7000) == 3) {
    f_aKj(lv_aRr);
    f_aJZ(27);
  }
  lv_aRr = 27;
  if (gv_alg.getInt(lv_aRr + 7000) == 1) {
    f_aKb(lv_aRr, lv_aRp);
  }
  lv_aRs = null;
}
function f_aRt() {
  var lv_aRu = 0;
  var lv_aRv = 0;
  var lv_aRw = 0;
  var lv_aRx;
  var lv_aRy = GetTriggerUnit();
  lv_aRu = f_aKp(lv_aRy);
  if (f_aKt(lv_aRy, lv_aRu) == false) {
    return;
  }
  if (gv_alg.getInt(27 + 7000) == 2) {
    f_aKh(27);
    f_aKj(27);
    f_aJZ(28);
  }
  lv_aRw = 28;
  if (gv_alg.getInt(lv_aRw + 7000) == 1) {
    f_aKb(lv_aRw, lv_aRu);
  }
  if (gv_alg.getInt(lv_aRw + 7000) == 3) {
    f_aKj(lv_aRw);
    f_aJZ(29);
    KillDestructable(gv_akV);
    KillDestructable(gv_akQ);
    KillDestructable(gv_akS);
  }
  lv_aRw = 29;
  if (gv_alg.getInt(lv_aRw + 7000) == 1) {
    f_aKb(lv_aRw, lv_aRu);
  }
  if (gv_alg.getInt(lv_aRw + 7000) == 2) {
    lv_aRv = 0;
    do {
      if (lv_aRv > 11) {
        break;
      }
      if (lv_aRv < 6) {
        lv_aRx = UnitItemInSlot(gv_ale[lv_aRu], lv_aRv);
      } else {
        lv_aRx = UnitItemInSlot(gv_ale[lv_aRu + 8], lv_aRv - 6);
      }
      if (GetItemTypeId(lv_aRx) == "I05D") {
        RemoveItem(lv_aRx);
        f_aKh(lv_aRw);
        lv_aRv = 13;
      }
      lv_aRv = lv_aRv + 1;
    } while (true);
  }
  if (gv_alg.getInt(lv_aRw + 7000) == 3) {
    f_aKj(lv_aRw);
    f_aJZ(30);
  }
  lv_aRw = 30;
  if (gv_alg.getInt(lv_aRw + 7000) == 1) {
    f_aKb(lv_aRw, lv_aRu);
    if (gv_alg.getInt(lv_aRw + 7000) == 2) {
      ShowUnit(gv_akr, true);
      EnableTrigger(gv_aiN);
    }
  }
  if (gv_alg.getInt(lv_aRw + 7000) == 3) {
    f_aKj(lv_aRw);
  }
  lv_aRy = null;
}
function f_aRz() {
  var lv_aRA = 0;
  var lv_aRB = 0;
  var lv_aRC = GetTriggerUnit();
  lv_aRA = f_aKp(lv_aRC);
  if (f_aKt(lv_aRC, lv_aRA) == false) {
    return;
  }
  lv_aRB = 31;
  if (gv_alg.getInt(lv_aRB + 7000) == 1) {
    f_aKb(lv_aRB, lv_aRA);
  }
  if (gv_alg.getInt(lv_aRB + 7000) == 3) {
    f_aKj(lv_aRB);
    f_aJZ(32);
  }
  lv_aRB = 32;
  if (gv_alg.getInt(lv_aRB + 7000) == 1) {
    f_aKb(lv_aRB, lv_aRA);
    if (gv_alg.getInt(lv_aRB + 7000) == 2) {
      ShowUnitShow(gv_aki);
    }
  }
  if (gv_alg.getInt(lv_aRB + 7000) == 3) {
    f_aKj(lv_aRB);
    f_aJZ(33);
  }
  lv_aRB = 33;
  if (gv_alg.getInt(lv_aRB + 7000) == 1) {
    f_aKb(lv_aRB, lv_aRA);
  }
  if (gv_alg.getInt(lv_aRB + 7000) == 3) {
    f_aKj(lv_aRB);
  }
  lv_aRB = 41;
  if (gv_alg.getInt(lv_aRB + 7000) == 2) {
    DestroyEffect(gv_alh[lv_aRB + 7000]);
    UnitAddItemByIdSwapped("I05F", gv_ale[lv_aRA + 8]);
    f_aKh(lv_aRB);
  }
  lv_aRC = null;
}
function f_aRD() {
  var lv_aRE = 0;
  var lv_aRF = 0;
  var lv_aRG = 0;
  var lv_aRH = 0;
  var lv_aRI;
  var lv_aRJ = GetTriggerUnit();
  lv_aRE = f_aKp(lv_aRJ);
  if (f_aKt(lv_aRJ, lv_aRE) == false) {
    return;
  }
  lv_aRG = 55;
  if (gv_alg.getInt(lv_aRG + 7000) == 1) {
    if (gv_alg.getInt(lv_aRG + 7600) > GetHeroLevel(gv_ale[lv_aRE])) {
      f_aLO(
        Player(lv_aRE),
        gv_alf[75] +
          (GetUnitName(gv_ale[lv_aRG + 7000]) +
            "|r - " +
            gv_alf[110 + GetRandomInt(0, 6)])
      );
      return;
    } else {
      f_aKb(lv_aRG, lv_aRE);
      ShowUnit(gv_akg, true);
      ShowUnit(gv_akv, true);
      ShowUnit(gv_akn, true);
    }
  }
  if (gv_alg.getInt(lv_aRG + 7000) == 3) {
    lv_aRF = 0;
    do {
      if (lv_aRF > 11) {
        break;
      }
      if (lv_aRF < 6) {
        lv_aRI = UnitItemInSlot(gv_ale[lv_aRE], lv_aRF);
      } else {
        lv_aRI = UnitItemInSlot(gv_ale[lv_aRE + 8], lv_aRF - 6);
      }
      lv_aRH = GetItemTypeId(lv_aRI);
      if (lv_aRH == "I05W") {
        RemoveItem(lv_aRI);
        f_aKj(lv_aRG);
        SetPlayerHandicap(Player(8), 1.5);
        SetPlayerTechResearchedSwap("Rhme", 3, Player(8));
        DisplayTimedTextToForce(
          bj_FORCE_ALL_PLAYERS,
          20,
          S2S("   " + gv_alf[75]) +
            (GetUnitName(gv_ale[lv_aRG + 7000]) +
              " sings a song so powerful, Athenian troops are upgraded.")
        );
        lv_aRF = 13;
      }
      lv_aRF = lv_aRF + 1;
    } while (true);
  }
  lv_aRJ = null;
}
function f_aRK() {
  var lv_aRL = 0;
  var lv_aRM = 0;
  var lv_aRN = 0;
  var lv_aRO = GetTriggerUnit();
  var lv_aRP = GetRectCenter(gv_aeb);
  lv_aRL = f_aKp(lv_aRO);
  if (f_aKt(lv_aRO, lv_aRL) == false) {
    return;
  }
  lv_aRN = 34;
  if (gv_alg.getInt(lv_aRN + 7000) == 1) {
    f_aKb(lv_aRN, lv_aRL);
  }
  if (gv_alg.getInt(lv_aRN + 7000) == 3) {
    f_aKj(lv_aRN);
    f_aJZ(35);
  }
  lv_aRN = 35;
  if (gv_alg.getInt(lv_aRN + 7000) == 1) {
    f_aKb(lv_aRN, lv_aRL);
    if (gv_alg.getInt(lv_aRN + 7000) == 2) {
      lv_aRO = CreateUnitAtLoc(Player(9), "hbew", lv_aRP, 235);
      gv_ale[89] = lv_aRO;
      lv_aRP = GetRectCenter(gv_afn);
      lv_aRO = CreateUnitAtLoc(
        gv_amG,
        gv_alg.getInt(GetRandomInt(468, 487)),
        lv_aRP,
        0.0
      );
      lv_aRO = CreateUnitAtLoc(
        gv_amG,
        gv_alg.getInt(GetRandomInt(468, 487)),
        lv_aRP,
        0.0
      );
      lv_aRO = CreateUnitAtLoc(
        gv_amG,
        gv_alg.getInt(GetRandomInt(468, 487)),
        lv_aRP,
        0.0
      );
      lv_aRO = CreateUnitAtLoc(
        gv_amG,
        gv_alg.getInt(GetRandomInt(468, 487)),
        lv_aRP,
        0.0
      );
      lv_aRP = GetRectCenter(gv_afo);
      lv_aRO = CreateUnitAtLoc(
        gv_amG,
        gv_alg.getInt(GetRandomInt(468, 487)),
        lv_aRP,
        0.0
      );
      lv_aRO = CreateUnitAtLoc(
        gv_amG,
        gv_alg.getInt(GetRandomInt(468, 487)),
        lv_aRP,
        0.0
      );
      lv_aRO = CreateUnitAtLoc(
        gv_amG,
        gv_alg.getInt(GetRandomInt(468, 487)),
        lv_aRP,
        0.0
      );
      lv_aRP = GetRectCenter(gv_afp);
      lv_aRO = CreateUnitAtLoc(
        gv_amG,
        gv_alg.getInt(GetRandomInt(468, 487)),
        lv_aRP,
        0.0
      );
      lv_aRO = CreateUnitAtLoc(
        gv_amG,
        gv_alg.getInt(GetRandomInt(468, 487)),
        lv_aRP,
        0.0
      );
      lv_aRP = GetRectCenter(gv_aea);
      lv_aRO = CreateUnitAtLoc(
        gv_amG,
        gv_alg.getInt(GetRandomInt(468, 487)),
        lv_aRP,
        0.0
      );
    }
  }
  if (gv_alg.getInt(lv_aRN + 7000) == 3) {
    f_aKj(lv_aRN);
    f_aJZ(36);
  }
  lv_aRN = 36;
  if (gv_alg.getInt(lv_aRN + 7000) == 1) {
    f_aKb(lv_aRN, lv_aRL);
  }
  if (gv_alg.getInt(lv_aRN + 7000) == 3) {
    f_aKj(lv_aRN);
  }
  lv_aRO = null;
  RemoveLocation(lv_aRP);
  lv_aRP = null;
}
function f_aRQ() {
  var lv_aRR = 0;
  var lv_aRS = 0;
  var lv_aRT = 0;
  var lv_aRU = GetTriggerUnit();
  lv_aRR = f_aKp(lv_aRU);
  if (f_aKt(lv_aRU, lv_aRR) == false) {
    return;
  }
  lv_aRT = 37;
  if (gv_alg.getInt(lv_aRT + 7000) == 1) {
    f_aKb(lv_aRT, lv_aRR);
  }
  if (gv_alg.getInt(lv_aRT + 7000) == 3) {
    f_aKj(lv_aRT);
    f_aJZ(38);
  }
  lv_aRT = 38;
  if (gv_alg.getInt(lv_aRT + 7000) == 1) {
    f_aKb(lv_aRT, lv_aRR);
  }
  if (gv_alg.getInt(lv_aRT + 7000) == 3) {
    f_aKj(lv_aRT);
    f_aJZ(39);
    f_aJZ(40);
  }
  lv_aRT = 39;
  if (gv_alg.getInt(lv_aRT + 7000) == 1) {
    f_aKb(lv_aRT, lv_aRR);
  }
  if (gv_alg.getInt(lv_aRT + 7000) == 3) {
    f_aKj(lv_aRT);
  }
  lv_aRT = 40;
  if (gv_alg.getInt(lv_aRT + 7000) == 1) {
    f_aKb(lv_aRT, lv_aRR);
    if (gv_alg.getInt(lv_aRT + 7000) == 2) {
      SetUnitInvulnerable(gv_akM, false);
    }
  }
  if (gv_alg.getInt(lv_aRT + 7000) == 3) {
    f_aKj(lv_aRT);
  }
  lv_aRU = null;
}
function f_aRV() {
  var lv_aRW = 0;
  var lv_aRX = 0;
  var lv_aRY = 0;
  var lv_aRZ = 0;
  var lv_aSa;
  var lv_aSb = GetTriggerUnit();
  var lv_aSc = GetRectCenter(gv_acC);
  lv_aRW = f_aKp(lv_aSb);
  if (f_aKt(lv_aSb, lv_aRW) == false) {
    return;
  }
  lv_aRY = 41;
  if (gv_alg.getInt(lv_aRY + 7000) == 1) {
    f_aKb(lv_aRY, lv_aRW);
    gv_alh[lv_aRY + 7000] = AddSpecialEffectTarget(
      "Abilities\\Spells\\Other\\TalkToMe\\TalkToMe.mdl",
      gv_akd,
      "overhead"
    );
  }
  if (gv_alg.getInt(lv_aRY + 7000) == 3) {
    lv_aRX = 0;
    do {
      if (lv_aRX > 11) {
        break;
      }
      if (lv_aRX < 6) {
        lv_aSa = UnitItemInSlot(gv_ale[lv_aRW], lv_aRX);
      } else {
        lv_aSa = UnitItemInSlot(gv_ale[lv_aRW + 8], lv_aRX - 6);
      }
      lv_aRZ = GetItemTypeId(lv_aSa);
      if (lv_aRZ == "I05F") {
        RemoveItem(lv_aSa);
        f_aKj(lv_aRY);
        f_aJZ(42);
        lv_aRX = 13;
      }
      lv_aRX = lv_aRX + 1;
    } while (true);
  }
  lv_aRY = 42;
  if (gv_alg.getInt(lv_aRY + 7000) == 1) {
    f_aKb(lv_aRY, lv_aRW);
    if (gv_alg.getInt(lv_aRY + 7000) == 2) {
      lv_aSc = GetRectCenter(gv_acN);
      CreateItemLoc("I05G", lv_aSc);
      lv_aSc = GetRectCenter(gv_acO);
      CreateItemLoc("I05G", lv_aSc);
      lv_aSc = GetRectCenter(gv_acP);
      CreateItemLoc("I05G", lv_aSc);
      lv_aSc = GetRectCenter(gv_acQ);
      CreateItemLoc("I05G", lv_aSc);
      lv_aSc = GetRectCenter(gv_acR);
      CreateItemLoc("I05G", lv_aSc);
      lv_aSc = GetRectCenter(gv_acS);
      CreateItemLoc("I05G", lv_aSc);
      lv_aSc = GetRectCenter(gv_aem);
      CreateItemLoc("I05H", lv_aSc);
      lv_aSc = GetRectCenter(gv_aeo);
      CreateItemLoc("I05H", lv_aSc);
      lv_aSc = GetRectCenter(gv_aep);
      CreateItemLoc("I05H", lv_aSc);
      lv_aSc = GetRectCenter(gv_aeq);
      CreateItemLoc("I05H", lv_aSc);
      lv_aSc = GetRectCenter(gv_aer);
      CreateItemLoc("I05H", lv_aSc);
      lv_aSc = GetRectCenter(gv_aes);
      CreateItemLoc("I05H", lv_aSc);
      lv_aSc = GetRectCenter(gv_aet);
      CreateItemLoc("I05H", lv_aSc);
      lv_aSc = GetRectCenter(gv_aeu);
      CreateItemLoc("I05H", lv_aSc);
      lv_aSc = GetRectCenter(gv_aev);
      CreateItemLoc("I05H", lv_aSc);
      lv_aSc = GetRectCenter(gv_aen);
      CreateItemLoc("I05H", lv_aSc);
      lv_aSc = GetRectCenter(gv_acT);
      CreateItemLoc("I05I", lv_aSc);
      lv_aSc = GetRectCenter(gv_acU);
      CreateItemLoc("I05I", lv_aSc);
      lv_aSc = GetRectCenter(gv_acV);
      CreateItemLoc("I05I", lv_aSc);
    }
  }
  if (gv_alg.getInt(lv_aRY + 7000) == 3) {
    f_aKj(lv_aRY);
    f_aJZ(43);
  }
  lv_aRY = 43;
  if (gv_alg.getInt(lv_aRY + 7000) == 1) {
    f_aKb(lv_aRY, lv_aRW);
  }
  if (gv_alg.getInt(lv_aRY + 7000) == 3) {
    f_aKj(lv_aRY);
    f_aJZ(44);
  }
  lv_aRY = 44;
  if (gv_alg.getInt(lv_aRY + 7000) == 1) {
    f_aKb(lv_aRY, lv_aRW);
    if (gv_alg.getInt(lv_aRY + 7000) == 2) {
      UnitAddItemByIdSwapped("I05L", gv_ale[lv_aRW + 8]);
    }
  }
  if (gv_alg.getInt(lv_aRY + 7000) == 3) {
    f_aKj(lv_aRY);
  }
  lv_aSa = null;
  lv_aSb = null;
  RemoveLocation(lv_aSc);
  lv_aSc = null;
}
function f_aSd() {
  var lv_aSe = 0;
  var lv_aSf = 0;
  var lv_aSg = 0;
  var lv_aSh = GetTriggerUnit();
  var lv_aSi = GetRectCenter(gv_acC);
  lv_aSe = f_aKp(lv_aSh);
  if (f_aKt(lv_aSh, lv_aSe) == false) {
    return;
  }
  lv_aSg = 45;
  if (gv_alg.getInt(lv_aSg + 7000) == 1) {
    f_aKb(lv_aSg, lv_aSe);
  }
  if (gv_alg.getInt(lv_aSg + 7000) == 3) {
    f_aKj(lv_aSg);
    f_aJZ(46);
  }
  lv_aSg = 46;
  if (gv_alg.getInt(lv_aSg + 7000) == 1) {
    f_aKb(lv_aSg, lv_aSe);
    if (gv_alg.getInt(lv_aSg + 7000) == 2) {
      ShowUnit(gv_akH, true);
    }
  }
  if (gv_alg.getInt(lv_aSg + 7000) == 3) {
    f_aKj(lv_aSg);
    f_aJZ(47);
  }
  lv_aSg = 47;
  if (gv_alg.getInt(lv_aSg + 7000) == 1) {
    f_aKb(lv_aSg, lv_aSe);
  }
  if (gv_alg.getInt(lv_aSg + 7000) == 3) {
    f_aKj(lv_aSg);
    f_aJZ(48);
  }
  lv_aSg = 48;
  if (gv_alg.getInt(lv_aSg + 7000) == 1) {
    f_aKb(lv_aSg, lv_aSe);
    if (gv_alg.getInt(lv_aSg + 7000) == 2) {
      lv_aSi = GetRectCenter(gv_aeS);
      CreateNUnitsAtLoc(1, "nchr", Player(9), lv_aSi, 140);
      lv_aSi = GetRectCenter(gv_aeW);
      CreateNUnitsAtLoc(1, "nchg", Player(9), lv_aSi, 215);
      lv_aSi = GetRectCenter(gv_aeU);
      CreateNUnitsAtLoc(1, "nchw", Player(9), lv_aSi, 270);
      lv_aSi = GetRectCenter(gv_aeT);
      CreateNUnitsAtLoc(1, "oshm", Player(9), lv_aSi, 360);
      lv_aSi = GetRectCenter(gv_aeV);
      CreateNUnitsAtLoc(1, "nw2w", Player(9), lv_aSi, 325);
    }
  }
  if (gv_alg.getInt(lv_aSg + 7000) == 3) {
    f_aKj(lv_aSg);
  }
  lv_aSh = null;
  RemoveLocation(lv_aSi);
  lv_aSi = null;
}
function f_aSj() {
  var lv_aSk = 0;
  var lv_aSl = 0;
  var lv_aSm = 0;
  var lv_aSn = GetTriggerUnit();
  lv_aSk = f_aKp(lv_aSn);
  if (f_aKt(lv_aSn, lv_aSk) == false) {
    return;
  }
  lv_aSm = 56;
  if (gv_alg.getInt(lv_aSm + 7000) == 1) {
    f_aKb(lv_aSm, lv_aSk);
  }
  if (gv_alg.getInt(lv_aSm + 7000) == 3) {
    f_aKj(lv_aSm);
    UnitRemoveAbility(gv_ajW, "Abit");
  }
  lv_aSn = null;
}
function f_aSo() {
  var lv_aSp = 0;
  var lv_aSq = 0;
  var lv_aSr = 0;
  var lv_aSs = 0;
  var lv_aSt = GetTriggerUnit();
  var lv_aSu;
  lv_aSp = f_aKp(lv_aSt);
  if (f_aKt(lv_aSt, lv_aSp) == false) {
    return;
  }
  lv_aSs = 44;
  if (gv_alg.getInt(lv_aSs + 7000) == 2) {
    lv_aSq = 0;
    do {
      if (lv_aSq > 11) {
        break;
      }
      if (lv_aSq < 6) {
        lv_aSu = UnitItemInSlot(gv_ale[lv_aSp], lv_aSq);
      } else {
        lv_aSu = UnitItemInSlot(gv_ale[lv_aSp + 8], lv_aSq - 6);
      }
      lv_aSr = GetItemTypeId(lv_aSu);
      if (lv_aSr == "I05L") {
        RemoveItem(lv_aSu);
        f_aKh(lv_aSs);
        lv_aSq = 13;
      }
      lv_aSq = lv_aSq + 1;
    } while (true);
  }
  lv_aSs = 49;
  if (gv_alg.getInt(lv_aSs + 7000) == 1) {
    f_aKb(lv_aSs, lv_aSp);
  }
  if (gv_alg.getInt(lv_aSs + 7000) == 3) {
    f_aKj(lv_aSs);
    f_aJZ(50);
  }
  lv_aSs = 50;
  if (gv_alg.getInt(lv_aSs + 7000) == 1) {
    f_aKb(lv_aSs, lv_aSp);
    if (gv_alg.getInt(lv_aSs + 7000) == 2) {
      ShowUnit(gv_akI, true);
      ShowUnit(gv_aks, true);
      ShowUnit(gv_akx, true);
    }
  }
  if (gv_alg.getInt(lv_aSs + 7000) == 3) {
    f_aKj(lv_aSs);
    f_aJZ(51);
  }
  lv_aSs = 51;
  if (gv_alg.getInt(lv_aSs + 7000) == 1) {
    f_aKb(lv_aSs, lv_aSp);
    if (gv_alg.getInt(lv_aSs + 7000) == 2) {
      ModifyGateBJ(1, gv_ala);
      PingMinimapForForce(
        bj_FORCE_ALL_PLAYERS,
        GetUnitX(gv_akt),
        GetUnitY(gv_akt),
        3
      );
    }
  }
  if (gv_alg.getInt(lv_aSs + 7000) == 3) {
    f_aKj(lv_aSs);
    f_aJZ(52);
  }
  lv_aSs = 52;
  if (gv_alg.getInt(lv_aSs + 7000) == 1) {
    f_aKb(lv_aSs, lv_aSp);
  }
  if (gv_alg.getInt(lv_aSs + 7000) == 3) {
    f_aKj(lv_aSs);
  }
  lv_aSt = null;
}
function f_aSv() {
  var lv_aSw = 0;
  var lv_aSx = 0;
  var lv_aSy = GetTriggerUnit();
  lv_aSw = f_aKp(lv_aSy);
  if (f_aKt(lv_aSy, lv_aSw) == false) {
    return;
  }
  lv_aSx = 53;
  if (gv_alg.getInt(lv_aSx + 7000) == 1) {
    f_aKb(lv_aSx, lv_aSw);
  }
  lv_aSy = null;
}
function f_aSz() {
  var lv_aSA = 0;
  var lv_aSB = 0;
  var lv_aSC = 0;
  var lv_aSD = 0;
  var lv_aSE = GetTriggerUnit();
  lv_aSA = f_aKp(lv_aSE);
  if (f_aKt(lv_aSE, lv_aSA) == false) {
    return;
  }
  f_aKh(53);
  lv_aSB = 53;
  if (gv_alg.getInt(lv_aSB + 7000) == 3) {
    f_aKj(53);
    f_aJZ(54);
  }
  lv_aSB = 54;
  if (gv_alg.getInt(lv_aSB + 7000) == 1) {
    lv_aSD = 120 + GetRandomInt(0, 12);
    gv_alf[lv_aSB + 7300] = S2S(
      gv_alf[lv_aSD] +
        " Riddle me this. Tell me that. Answer me right and leon you may fight. Type 'the answer is' and then the solution."
    );
    lv_aSC = 0;
    do {
      if (lv_aSC > 7) {
        break;
      }
      TriggerRegisterPlayerChatEvent(
        gv_agu,
        Player(lv_aSC),
        S2S("the answer is " + gv_alf[lv_aSD + 15]),
        false
      );
      lv_aSC = lv_aSC + 1;
    } while (true);
    EnableTrigger(gv_agu);
    f_aKb(lv_aSB, lv_aSA);
  }
  if (gv_alg.getInt(lv_aSB + 7000) == 3) {
    f_aKj(lv_aSB);
    ShowUnit(gv_akw, true);
  }
  lv_aSB = 58;
  if (gv_alg.getInt(lv_aSB + 7000) == 1) {
    f_aKb(lv_aSB, lv_aSA);
    EnableTrigger(gv_aiM);
  }
  if (gv_alg.getInt(lv_aSB + 7000) == 3) {
    f_aKj(lv_aSB);
  }
  lv_aSE = null;
}
function f_aSF() {
  f_aKh(54);
  f_aJZ(58);
}
function f_aSG() {
  var lv_aSH = GetTriggerUnit();
  var lv_aSI = GetRectCenter(gv_aeO);
  if (GetUnitTypeId(lv_aSH) == "n000") {
    IssuePointOrderByIdLoc(lv_aSH, 851986, lv_aSI);
  }
  lv_aSH = null;
  RemoveLocation(lv_aSI);
  lv_aSI = null;
}
function f_aSJ() {
  var lv_aSK = GetTriggerUnit();
  var lv_aSL = GetRectCenter(gv_aeP);
  if (GetUnitTypeId(lv_aSK) == "n000") {
    IssuePointOrderByIdLoc(lv_aSK, 851986, lv_aSL);
  }
  lv_aSK = null;
  RemoveLocation(lv_aSL);
  lv_aSL = null;
}
function f_aSM() {
  var lv_aSN = GetTriggerUnit();
  var lv_aSO = GetRectCenter(gv_aeM);
  if (GetUnitTypeId(lv_aSN) == "n000") {
    IssuePointOrderByIdLoc(lv_aSN, 851986, lv_aSO);
  }
  lv_aSN = null;
  RemoveLocation(lv_aSO);
  lv_aSO = null;
}
function f_aSP() {
  var lv_aSQ = GetTriggerUnit();
  if (GetUnitTypeId(lv_aSQ) == "n000") {
    RemoveUnit(lv_aSQ);
    f_aKh(19);
  }
  lv_aSQ = null;
}
function f_aSR() {
  if (GetUnitTypeId(GetTriggerUnit()) == "hbew") {
    IssuePointOrderById(
      GetTriggerUnit(),
      851986,
      GetRectCenterX(gv_afn),
      GetRectCenterY(gv_afn)
    );
    SetUnitUserData(GetTriggerUnit(), 1);
  }
}
function f_aSS() {
  if (GetUnitTypeId(GetTriggerUnit()) == "hbew") {
    IssuePointOrderById(
      GetTriggerUnit(),
      851986,
      GetRectCenterX(gv_afo),
      GetRectCenterY(gv_afo)
    );
    SetUnitUserData(GetTriggerUnit(), 2);
  }
}
function f_aST() {
  if (GetUnitTypeId(GetTriggerUnit()) == "hbew") {
    IssuePointOrderById(
      GetTriggerUnit(),
      851986,
      GetRectCenterX(gv_afp),
      GetRectCenterY(gv_afp)
    );
    SetUnitUserData(GetTriggerUnit(), 3);
  }
}
function f_aSU() {
  if (GetUnitTypeId(GetTriggerUnit()) == "hbew") {
    IssuePointOrderById(
      GetTriggerUnit(),
      851986,
      GetRectCenterX(gv_aea),
      GetRectCenterY(gv_aea)
    );
    SetUnitUserData(GetTriggerUnit(), 4);
  }
}
function f_aSV() {
  var lv_aSW = GetTriggerUnit();
  if (GetUnitTypeId(lv_aSW) == "hbew") {
    RemoveUnit(lv_aSW);
    f_aKh(35);
  }
  lv_aSW = null;
}
function f_aSX() {
  var lv_aSY;
  var lv_aSZ = 7550;
  var lv_aTa = 0.0;
  var lv_aTb;
  lv_aSY = GetRandomInt(1, 3);
  if (lv_aSY == 2) {
    lv_aSZ = 5630;
    lv_aTa = 1340;
  }
  if (lv_aSY == 3) {
    lv_aSZ = 7930;
    lv_aTa = 1940;
  }
  if (GetUnitTypeId(gv_ale[89]) == "uabo") {
    if (gv_alg.getInt(169) == 25) {
      lv_aTb = CreateUnit(gv_amG, "nfov", lv_aSZ, lv_aTa, 0.0);
    } else {
      lv_aTb = CreateUnit(gv_amG, "nfgu", lv_aSZ, lv_aTa, 0.0);
    }
  } else {
    if (gv_alg.getInt(169) == 25) {
      lv_aTb = CreateUnit(gv_amG, "n009", lv_aSZ, lv_aTa, 0.0);
    } else {
      lv_aTb = CreateUnit(gv_amG, "n008", lv_aSZ, lv_aTa, 0.0);
    }
  }
  IssueTargetOrderById(lv_aTb, gv_aas, gv_ale[89]);
  gv_alg[169] = gv_alg.getInt(169) + 1;
  lv_aTb = null;
}
function f_aTc() {
  var lv_aTd = 0;
  DestroyTimerDialog(gv_alj[9]);
  DestroyTimer(gv_alE);
  DisableTrigger(gv_agE);
  do {
    if (lv_aTd > 7) {
      break;
    }
    if (RectContainsUnit(gv_adW, gv_ale[lv_aTd])) {
      DestroyEffect(
        AddSpecialEffectTarget(
          "Abilities\\Spells\\Human\\MassTeleport\\MassTeleportCaster.mdl",
          gv_ale[lv_aTd],
          "origin"
        )
      );
      SetUnitPosition(gv_ale[lv_aTd], -10176, -6928);
      PanCameraToTimedForPlayer(Player(lv_aTd), -10176, -6928, 0);
    }
    lv_aTd = lv_aTd + 1;
  } while (true);
  if (GetWidgetLife(gv_ale[89]) > 0.405) {
    SetUnitPosition(gv_ale[89], 8052.5, 9442.8);
  }
  ShowUnit(gv_ajW, true);
  f_aKh(56);
}
function f_aQC() {
  var lv_aTe;
  TimerStart(gv_alE, 3 * 60, false, f_aTc);
  gv_alj[9] = CreateTimerDialog(gv_alE);
  TimerDialogSetTitle(gv_alj[9], "Keep " + GetUnitName(gv_ale[89]) + " Alive");
  TimerDialogDisplay(gv_alj[9], true);
}
function f_aTf() {
  var lv_aTg = GetTriggerUnit();
  var lv_aTh = GetUnitTypeId(lv_aTg);
  if (
    lv_aTh == "nchr" ||
    lv_aTh == "nchg" ||
    lv_aTh == "nchw" ||
    lv_aTh == "oshm" ||
    lv_aTh == "nw2w"
  ) {
    if (gv_alg.getInt(48 + 7000) > 0 && GetUnitUserData(lv_aTg) != 10) {
      SetUnitUserData(lv_aTg, 10);
      f_aKh(48);
      DisplayTimedTextToForce(
        gv_alq,
        10,
        "   |cff47a1ee" +
          (GetUnitName(lv_aTg) +
            "|r - Yes, I will return immediately and prepare for battle.")
      );
      DestroyEffect(
        AddSpecialEffectTarget(
          "Abilities\\Spells\\Human\\MassTeleport\\MassTeleportCaster.mdl",
          lv_aTg,
          "origin"
        )
      );
      SetUnitPosition(lv_aTg, GetRectCenterX(gv_adY), GetRectCenterY(gv_adY));
    }
  }
  lv_aTg = null;
}
function f_aTi() {
  var lv_aTj = LoadInteger(gv_abL, 0, GetHandleId(GetExpiredTimer()));
  var lv_aTk = f_aNC(gv_acI, "x");
  var lv_aTl = f_aNC(gv_acI, "y");
  ReviveHero(gv_ale[lv_aTj], lv_aTk, lv_aTl, true);
  PanCameraToTimedForPlayer(Player(lv_aTj), lv_aTk, lv_aTl, 0.0);
  SetUnitPosition(gv_ale[8 + lv_aTj], lv_aTk, lv_aTl);
  SetUnitLifePercentBJ(gv_ale[lv_aTj], 15);
  SuspendHeroXP(gv_ale[lv_aTj], !true);
  SetUnitColor(gv_ale[lv_aTj], ConvertPlayerColor(lv_aTj));
}
function f_aTm() {
  var lv_aTn = LoadInteger(gv_abL, 0, GetHandleId(GetExpiredTimer()));
  var lv_aTo;
  var lv_aTp;
  ReviveHero(
    gv_ale[lv_aTn],
    GetUnitX(gv_ale[lv_aTn]),
    GetUnitY(gv_ale[lv_aTn]),
    true
  );
  SetUnitState(
    gv_ale[lv_aTn],
    UNIT_STATE_LIFE,
    GetUnitState(gv_ale[lv_aTn], UNIT_STATE_MAX_LIFE) * 0.4
  );
  SetUnitState(
    gv_ale[lv_aTn],
    UNIT_STATE_MANA,
    GetUnitState(gv_ale[lv_aTn], UNIT_STATE_MAX_MANA) * 0.2
  );
  DestroyTimerDialog(gv_alj[lv_aTn]);
  lv_aTo = 0;
  do {
    if (lv_aTo > 11) {
      break;
    }
    if (lv_aTo < 6) {
      lv_aTp = UnitItemInSlot(gv_ale[lv_aTn], lv_aTo);
    } else {
      lv_aTp = UnitItemInSlot(gv_ale[lv_aTn + 8], lv_aTo - 6);
    }
    if (GetItemTypeId(lv_aTp) == "ankh") {
      if (GetItemCharges(lv_aTp) > 1) {
        SetItemCharges(lv_aTp, GetItemCharges(lv_aTp) - 1);
      } else {
        RemoveItem(lv_aTp);
      }
      lv_aTo = 13;
    }
    lv_aTo = lv_aTo + 1;
  } while (true);
  lv_aTp = null;
}
function f_aTq() {
  var lv_aTr = LoadInteger(gv_abL, 0, GetHandleId(GetExpiredTimer()));
  gv_alg[240 + lv_aTr] = 0;
  f_aIM(GetExpiredTimer());
}
function f_aTs() {
  var lv_aTt = LoadInteger(gv_abL, 0, GetHandleId(GetExpiredTimer()));
  var lv_aTu = f_aIL();
  SaveInteger(gv_abL, 0, GetHandleId(lv_aTu), lv_aTt);
  TimerStart(lv_aTu, 300, false, f_aTq);
  gv_alg[240 + lv_aTt] = 1;
  ReviveHero(
    gv_ale[lv_aTt],
    GetUnitX(gv_ale[lv_aTt]),
    GetUnitY(gv_ale[lv_aTt]),
    true
  );
  SetUnitState(gv_ale[lv_aTt], UNIT_STATE_LIFE, 100000);
  SetUnitState(gv_ale[lv_aTt], UNIT_STATE_MANA, 100000);
  DestroyTimerDialog(gv_alj[lv_aTt]);
  lv_aTu = null;
}
function f_aTv() {
  var lv_aTw = LoadInteger(gv_abL, 0, GetHandleId(GetExpiredTimer()));
  ReviveHero(
    gv_ale[lv_aTw],
    GetUnitX(gv_ale[lv_aTw]),
    GetUnitY(gv_ale[lv_aTw]),
    true
  );
  SetUnitLifePercentBJ(gv_ale[lv_aTw], 50);
  SetUnitManaPercentBJ(gv_ale[lv_aTw], 50);
  DestroyTimerDialog(gv_alj[lv_aTw]);
}
function f_aTx() {
  var lv_aTy = GetRectCenterX(gv_adN);
  var lv_aTz = GetRectCenterY(gv_adN);
  var lv_aTA = LoadInteger(gv_abL, 0, GetHandleId(GetExpiredTimer()));
  var lv_aTB = GetOwningPlayer(gv_ale[lv_aTA]);
  gv_alg[150 + lv_aTA] = 0;
  f_aMp(gv_amf.getInt(lv_aTA));
  DestroyTimerDialog(gv_alj[lv_aTA]);
  if (GetHeroLevel(gv_ale[lv_aTA]) > 9) {
    lv_aTy = GetRectCenterX(gv_acC);
    lv_aTz = GetRectCenterY(gv_acC);
  }
  ReviveHero(gv_ale[lv_aTA], lv_aTy, lv_aTz, true);
  GroupRemoveUnit(gv_alo, gv_ale[lv_aTA]);
  PanCameraToTimedForPlayer(lv_aTB, lv_aTy, lv_aTz, 0.0);
  SetUnitPosition(gv_ale[8 + lv_aTA], lv_aTy, lv_aTz);
  lv_aTB = null;
}
function f_aTC() {
  var lv_aTD;
  var lv_aTE = GetTriggerUnit();
  var lv_aTF = GetOwningPlayer(lv_aTE);
  var lv_aTG = GetPlayerId(lv_aTF);
  var lv_aTH = GetKillingUnit();
  var lv_aTI = 0;
  var lv_aTJ = 0;
  var lv_aTK = 0;
  var lv_aTL;
  var lv_aTM;
  var lv_aTN = null;
  if (IsUnitType(lv_aTE, UNIT_TYPE_HERO)) {
    lv_aTI = 1;
  }
  if (GetUnitTypeId(lv_aTH) == "Ewar") {
    RemoveItem(UnitItemInSlot(lv_aTE, GetRandomInt(0, 5)));
  }
  if (lv_aTI == 1 && gv_alg.getInt(188) == 4) {
    if (gv_alg.getInt(180 + lv_aTG) == 1 || gv_alg.getInt(180 + lv_aTG) == 2) {
      lv_aTI = 0;
      gv_alg[180 + lv_aTG] = gv_alg.getInt(180 + lv_aTG) + 2;
      lv_aTK = 0;
      do {
        if (lv_aTK > 7) {
          break;
        }
        SetPlayerAllianceStateBJ(Player(lv_aTG), Player(lv_aTK), 3);
        SetPlayerAllianceStateBJ(Player(lv_aTK), Player(lv_aTG), 3);
        lv_aTK = lv_aTK + 1;
      } while (true);
      TimerStart(gv_ali[lv_aTG], 1, false, f_aTi);
      SaveInteger(gv_abL, 0, GetHandleId(gv_ali[lv_aTG]), lv_aTG);
    }
  }
  if (lv_aTI == 1) {
    if (
      !IsUnitInGroup(gv_ale[lv_aTG], gv_aln) &&
      GetInventoryIndexOfItemTypeBJ(gv_ale[lv_aTG], "ram3") +
        GetInventoryIndexOfItemTypeBJ(gv_ale[lv_aTG], "rugt") >
        0
    ) {
      lv_aTI = 0;
      MultiboardSetItemValueBJ(gv_aly, 1, lv_aTG + 2, "Bokor");
      MultiboardSetItemColorBJ(gv_aly, 1, lv_aTG + 2, 100, 0.0, 0.0, 0);
      TimerStart(gv_ali[lv_aTG], 7, false, f_aTv);
      SaveInteger(gv_abL, 0, GetHandleId(gv_ali[lv_aTG]), lv_aTG);
      gv_alj[lv_aTG] = CreateTimerDialogBJ(
        gv_ali[lv_aTG],
        GetPlayerName(lv_aTF) + " Revives"
      );
      bj_crippledTimer[100] = f_aIL();
      SaveInteger(gv_abL, 0, GetHandleId(bj_crippledTimer[100]), lv_aTG);
      GroupAddUnit(gv_aln, gv_ale[lv_aTG]);
      TimerStart(bj_crippledTimer[100], 180, false, f_aMl);
    }
  }
  if (lv_aTI == 1 && gv_alg.getInt(240 + lv_aTG) == 0) {
    if (GetInventoryIndexOfItemTypeBJ(gv_ale[lv_aTG], "I066") > 0) {
      lv_aTI = 0;
      MultiboardSetItemValueBJ(gv_aly, 1, lv_aTG + 2, "LoA");
      MultiboardSetItemColorBJ(gv_aly, 1, lv_aTG + 2, 100, 0.0, 0.0, 0);
      TimerStart(gv_ali[lv_aTG], 4, false, f_aTs);
      SaveInteger(gv_abL, 0, GetHandleId(gv_ali[lv_aTG]), lv_aTG);
      gv_alj[lv_aTG] = CreateTimerDialogBJ(
        gv_ali[lv_aTG],
        GetPlayerName(lv_aTF) + " Revives"
      );
    }
  }
  if (lv_aTI == 1) {
    if (
      GetInventoryIndexOfItemTypeBJ(gv_ale[lv_aTG], "ankh") > 0 ||
      GetInventoryIndexOfItemTypeBJ(gv_ale[lv_aTG + 8], "ankh") > 0
    ) {
      lv_aTI = 0;
      MultiboardSetItemValueBJ(gv_aly, 1, lv_aTG + 2, "Ankh");
      MultiboardSetItemColorBJ(gv_aly, 1, lv_aTG + 2, 100, 0.0, 0.0, 0);
      TimerStart(gv_ali[lv_aTG], 7, false, f_aTm);
      SaveInteger(gv_abL, 0, GetHandleId(gv_ali[lv_aTG]), lv_aTG);
      gv_alj[lv_aTG] = CreateTimerDialogBJ(
        gv_ali[lv_aTG],
        GetPlayerName(lv_aTF) + " Revives"
      );
    }
  }
  if (lv_aTI == 1) {
    gv_alg[150 + lv_aTG] = 1;
    if (GetWidgetLife(gv_ale[32 + lv_aTG]) > 0.405) {
      KillUnit(gv_ale[32 + lv_aTG]);
    }
    if (gv_alg.getInt(390 + lv_aTG) != 1) {
      lv_aTJ = R2I(
        (GetPlayerState(lv_aTF, PLAYER_STATE_RESOURCE_GOLD) *
          (0.15 + gv_aao[lv_aTG] / 100)) /
          f_azm(gv_ale[lv_aTG])
      );
      DisplayTextToForce(
        f_aBE(lv_aTF),
        "|cffff0000Death takes its toll of " + (I2S(lv_aTJ) + " gold.|r")
      );
      SetPlayerStateBJ(
        lv_aTF,
        PLAYER_STATE_RESOURCE_GOLD,
        GetPlayerState(lv_aTF, PLAYER_STATE_RESOURCE_GOLD) - lv_aTJ
      );
    } else {
      gv_alg[390 + lv_aTG] = 0;
    }
    MultiboardSetItemValueBJ(gv_aly, 1, lv_aTG + 2, "Dead");
    MultiboardSetItemColorBJ(gv_aly, 1, lv_aTG + 2, 100, 0.0, 0.0, 0);
    TimerStart(
      gv_ali[lv_aTG],
      (5 + IMinBJ(GetUnitLevel(gv_ale[lv_aTG]), 30) + gv_aao[lv_aTG] * 1.5) /
        f_azo(gv_ale[lv_aTG]),
      false,
      f_aTx
    );
    gv_aao[lv_aTG] = gv_aao[lv_aTG] + 5;
    gv_alj[lv_aTG] = CreateTimerDialogBJ(
      gv_ali[lv_aTG],
      GetPlayerName(lv_aTF) + " Revives"
    );
    SaveInteger(gv_abL, 0, GetHandleId(gv_ali[lv_aTG]), lv_aTG);
    GroupAddUnit(gv_alo, gv_ale[lv_aTG]);
    f_aMt(gv_amf.getInt(lv_aTG));
    if (gv_acw != null) {
      SetHeroStr(gv_acw, GetHeroStr(gv_acw, false) + 15, true);
      f_aLz(
        AddSpecialEffectTarget(
          "Abilities\\Spells\\NightElf\\Taunt\\TauntCaster.mdl",
          gv_acw,
          "origin"
        ),
        1
      );
      DisplayTimedTextToForce(
        gv_alq,
        5,
        "|cff00ff00Hades:|r You fool, your death only makes me more powerful!"
      );
    }
  }
  lv_aTH = null;
  lv_aTD = null;
  lv_aTE = null;
  lv_aTF = null;
  RemoveLocation(lv_aTN);
  lv_aTN = null;
}
function f_aTO() {
  var lv_aTP = GetTriggerUnit();
  var lv_aTQ = GetOwningPlayer(lv_aTP);
  MultiboardSetItemValueBJ(
    gv_aly,
    4,
    GetPlayerId(lv_aTQ) + 2,
    gv_alf[75] + I2S(GetHeroLevel(lv_aTP)) + "|r"
  );
  SetHeroStr(lv_aTP, GetHeroStr(lv_aTP, false) + 1, true);
  if (GetHeroLevel(lv_aTP) > 90) {
    UnitModifySkillPoints(lv_aTP, 2);
  }
  lv_aTP = null;
  lv_aTQ = null;
}
function f_aTR() {
  var lv_aTS = CreateTrigger();
  TriggerRegisterAnyUnitEventBJ(lv_aTS, EVENT_PLAYER_HERO_LEVEL);
  TriggerAddAction(lv_aTS, f_aTO);
}
function f_aTT() {
  IssueImmediateOrderById(GetAttacker(), 851972);
}
function f_aTU() {
  return IsUnitAlly(GetTriggerUnit(), GetOwningPlayer(GetAttacker()));
}
function f_aTV() {
  var lv_aTW = CreateTrigger();
  var lv_aTX = 0;
  do {
    if (lv_aTX > 9) {
      break;
    }
    TriggerRegisterPlayerUnitEvent(
      lv_aTW,
      Player(lv_aTX),
      EVENT_PLAYER_UNIT_ATTACKED,
      null
    );
    lv_aTX = lv_aTX + 1;
  } while (true);
  TriggerAddCondition(lv_aTW, Condition(f_aTU));
  TriggerAddAction(lv_aTW, f_aTT);
}
function f_aTY() {
  var lv_aTZ = GetTriggerUnit();
  var lv_aUa = GetOwningPlayer(lv_aTZ);
  var lv_aUb =
    GetHeroStr(lv_aTZ, false) +
    GetHeroAgi(lv_aTZ, false) +
    GetHeroInt(lv_aTZ, false);
  var lv_aUc = GetHeroLevel(lv_aTZ);
  var lv_aUd = R2I(0.01 * Pow(I2R(lv_aUc), 2) + 1.5 * lv_aUc + 50);
  var lv_aUe = 116 * 60 + GetPlayerId(GetOwningPlayer(lv_aTZ));
  UnitRemoveAbility(lv_aTZ, "Ansp");
  if (lv_aUb < lv_aUd) {
    SetHeroStr(lv_aTZ, GetHeroStr(lv_aTZ, false) + 1, true);
    gv_alg[lv_aUe] = gv_alg.getInt(lv_aUe) + 1;
  } else {
    DisplayTextToForce(
      f_aBE(lv_aUa),
      "|cffff0000Sorry, your hero may only have " +
        I2S(lv_aUd) +
        " total stats at level " +
        I2S(lv_aUc) +
        "."
    );
  }
  lv_aTZ = null;
  lv_aUa = null;
}
function f_aUf() {
  return GetLearnedSkill() == "Ansp";
}
function f_aUg() {
  var lv_aUh = CreateTrigger();
  TriggerRegisterAnyUnitEventBJ(lv_aUh, EVENT_PLAYER_HERO_SKILL);
  TriggerAddCondition(lv_aUh, Condition(f_aUf));
  TriggerAddAction(lv_aUh, f_aTY);
}
function f_aUi() {
  var lv_aUj = GetTriggerUnit();
  var lv_aUk = GetOwningPlayer(lv_aUj);
  var lv_aUl =
    GetHeroStr(lv_aUj, false) +
    GetHeroAgi(lv_aUj, false) +
    GetHeroInt(lv_aUj, false);
  var lv_aUm = GetHeroLevel(lv_aUj);
  var lv_aUn = R2I(0.01 * Pow(I2R(lv_aUm), 2) + 1.5 * lv_aUm + 50);
  var lv_aUo = 77 * 90 + GetPlayerId(GetOwningPlayer(lv_aUj));
  UnitRemoveAbility(lv_aUj, "Asb1");
  if (lv_aUl < lv_aUn) {
    SetHeroAgi(lv_aUj, GetHeroAgi(lv_aUj, false) + 1, true);
    gv_alg[lv_aUo] = gv_alg.getInt(lv_aUo) + 1;
  } else {
    DisplayTextToForce(
      f_aBE(lv_aUk),
      "|cffff0000Sorry, your hero may only have " +
        I2S(lv_aUn) +
        " total stats at level " +
        I2S(lv_aUm) +
        "."
    );
  }
  lv_aUj = null;
  lv_aUk = null;
}
function f_aUp() {
  return GetLearnedSkill() == "Asb1";
}
function f_aUq() {
  var lv_aUr = CreateTrigger();
  TriggerRegisterAnyUnitEventBJ(lv_aUr, EVENT_PLAYER_HERO_SKILL);
  TriggerAddCondition(lv_aUr, Condition(f_aUp));
  TriggerAddAction(lv_aUr, f_aUi);
}
function f_aUs() {
  var lv_aUt = GetTriggerUnit();
  var lv_aUu = GetOwningPlayer(lv_aUt);
  var lv_aUv =
    GetHeroStr(lv_aUt, false) +
    GetHeroAgi(lv_aUt, false) +
    GetHeroInt(lv_aUt, false);
  var lv_aUw = GetHeroLevel(lv_aUt);
  var lv_aUx = R2I(0.01 * Pow(I2R(lv_aUw), 2) + 1.5 * lv_aUw + 50);
  var lv_aUy = 150 * 46 + GetPlayerId(GetOwningPlayer(lv_aUt));
  UnitRemoveAbility(lv_aUt, "Asb2");
  if (lv_aUv < lv_aUx) {
    SetHeroInt(lv_aUt, GetHeroInt(lv_aUt, false) + 1, true);
    gv_alg[lv_aUy] = gv_alg.getInt(lv_aUy) + 1;
  } else {
    DisplayTextToForce(
      f_aBE(lv_aUu),
      "|cffff0000Sorry, your hero may only have " +
        I2S(lv_aUx) +
        " total stats at level " +
        I2S(lv_aUw) +
        "."
    );
  }
  lv_aUt = null;
  lv_aUu = null;
}
function f_aUz() {
  return GetLearnedSkill() == "Asb2";
}
function f_aUA() {
  var lv_aUB = CreateTrigger();
  TriggerRegisterAnyUnitEventBJ(lv_aUB, EVENT_PLAYER_HERO_SKILL);
  TriggerAddCondition(lv_aUB, Condition(f_aUz));
  TriggerAddAction(lv_aUB, f_aUs);
}
function f_aUC() {
  var lv_aUD = 0;
  var lv_aUE;
  var lv_aUF;
  var lv_aUG;
  var lv_aUH;
  do {
    if (lv_aUD > 7) {
      break;
    }
    if (GetPlayerSlotState(Player(lv_aUD)) == PLAYER_SLOT_STATE_PLAYING) {
      if (GetWidgetLife(gv_ale[lv_aUD]) > 0.405) {
        lv_aUH = GetUnitLifePercent(gv_ale[lv_aUD]);
        MultiboardSetItemValueBJ(gv_aly, 1, lv_aUD + 2, I2S(R2I(lv_aUH)) + "%");
        MultiboardSetItemColorBJ(
          gv_aly,
          1,
          lv_aUD + 2,
          100 - lv_aUH,
          lv_aUH,
          0.0,
          0
        );
        SetUnitLifePercentBJ(gv_ale[lv_aUD + 8], lv_aUH);
        SetUnitManaPercentBJ(
          gv_ale[lv_aUD + 8],
          GetUnitManaPercent(gv_ale[lv_aUD])
        );
        lv_aUE = GetUnitFacing(gv_ale[lv_aUD]) + 180;
        if (lv_aUE >= 360) {
          lv_aUE = lv_aUE - 360;
        }
        lv_aUF = GetUnitX(gv_ale[lv_aUD]) + 100 * Cos(lv_aUE * bj_DEGTORAD);
        lv_aUG = GetUnitY(gv_ale[lv_aUD]) + 100 * Sin(lv_aUE * bj_DEGTORAD);
        lv_aUE = f_aMe(
          GetUnitX(gv_ale[lv_aUD + 8]),
          GetUnitY(gv_ale[lv_aUD + 8]),
          lv_aUF,
          lv_aUG
        );
        if (lv_aUE > 400) {
          if (lv_aUE > 800) {
            SetUnitPosition(gv_ale[lv_aUD + 8], lv_aUF, lv_aUG);
          } else {
            IssuePointOrderById(gv_ale[lv_aUD + 8], 851986, lv_aUF, lv_aUG);
          }
        }
        if (gv_ale[lv_aUD + 40] != null) {
          if (IsUnitHidden(gv_ale[lv_aUD + 40]) == false) {
            if (
              f_aMe(
                GetUnitX(gv_ale[lv_aUD + 40]),
                GetUnitY(gv_ale[lv_aUD + 40]),
                GetUnitX(gv_ale[lv_aUD]),
                GetUnitY(gv_ale[lv_aUD])
              ) > 600
            ) {
              ShowUnit(gv_ale[lv_aUD + 40], false);
            }
          }
        }
        if (
          RectContainsUnit(gv_aeC, gv_ale[lv_aUD]) ||
          RectContainsUnit(gv_aeB, gv_ale[lv_aUD])
        ) {
          if (
            GetWidgetLife(gv_ale[lv_aUD]) > 0.405 &&
            !IsUnitPaused(gv_ale[lv_aUD])
          ) {
            SetWidgetLife(
              gv_ale[lv_aUD],
              GetUnitState(gv_ale[lv_aUD], UNIT_STATE_LIFE) -
                GetUnitState(gv_ale[lv_aUD], UNIT_STATE_MAX_LIFE) * 0.01
            );
          }
        }
      } else {
        lv_aUF = GetUnitX(gv_ale[lv_aUD]);
        lv_aUG = GetUnitY(gv_ale[lv_aUD]);
        lv_aUE = f_aMe(
          GetUnitX(gv_ale[lv_aUD + 8]),
          GetUnitY(gv_ale[lv_aUD + 8]),
          lv_aUF,
          lv_aUG
        );
        if (lv_aUE > 200) {
          SetUnitPosition(gv_ale[lv_aUD + 8], lv_aUF, lv_aUG);
        }
      }
    }
    lv_aUD = lv_aUD + 1;
  } while (true);
  if (gv_alg.getInt(57 + 7000) == 2 && gv_alg.getInt(168) > 7) {
    lv_aUD = gv_alg.getInt(168) - 8;
    if (
      f_aMe(
        GetUnitX(gv_ale[lv_aUD]),
        GetUnitY(gv_ale[lv_aUD]),
        GetUnitX(gv_akc),
        GetUnitY(gv_akc)
      ) > 1800
    ) {
      RemoveUnit(gv_akc);
      SetPlayerAllianceStateBJ(Player(lv_aUD), Player(9), 2);
      SetPlayerAllianceStateBJ(Player(9), Player(lv_aUD), 2);
      gv_alg[168] = 0;
      gv_alg[188] = 0;
    }
  }
}
function f_aUI() {
  var lv_aUJ = GetPlayerId(GetTriggerPlayer());
  var lv_aUK;
  var lv_aUL;
  if (gv_alx == 1) {
    gv_alx = 0;
  } else {
    if (gv_ale[lv_aUJ + 40] == null) {
      gv_ale[lv_aUJ + 40] = CreateUnit(
        Player(lv_aUJ),
        "hrdh",
        3550,
        10800,
        0.0
      );
    }
    lv_aUK =
      GetUnitX(gv_ale[lv_aUJ]) +
      100 * Cos(GetUnitFacing(gv_ale[lv_aUJ]) * bj_DEGTORAD);
    lv_aUL =
      GetUnitY(gv_ale[lv_aUJ]) +
      100 * Sin(GetUnitFacing(gv_ale[lv_aUJ]) * bj_DEGTORAD);
    SetUnitPosition(gv_ale[lv_aUJ + 40], lv_aUK, lv_aUL);
    SetUnitFacing(gv_ale[lv_aUJ + 40], GetUnitFacing(gv_ale[lv_aUJ]));
    ShowUnit(gv_ale[lv_aUJ + 40], true);
    if (Player(lv_aUJ) == GetLocalPlayer()) {
      ClearSelection();
      SelectUnit(gv_ale[lv_aUJ + 8], true);
    }
  }
}
function f_aUM() {
  if (GetEnumUnit() != gv_amt) {
    RemoveUnit(GetEnumUnit());
  }
}
function f_aUN() {
  var lv_aUO = GetTriggerPlayer();
  var lv_aUP = GetPlayerId(lv_aUO);
  DestroyTimerDialog(gv_alj[lv_aUP]);
  ForGroupBJ(f_aBC(lv_aUO), f_aUM);
  ForGroupBJ(f_aBC(lv_aUO), f_aUM);
  QuestMessageBJ(
    gv_alq,
    3,
    GetPlayerName(GetTriggerPlayer()) + " has left the game."
  );
  MultiboardSetItemValueBJ(gv_aly, 2, lv_aUP + 2, "... left ...");
  MultiboardSetItemColorBJ(gv_aly, 2, lv_aUP + 2, 50, 50, 50, 0);
  MultiboardSetItemColorBJ(gv_aly, 3, lv_aUP + 2, 50, 50, 50, 0);
  if (gv_alg.getInt(180 + lv_aUP) == 1 || gv_alg.getInt(180 + lv_aUP) == 2) {
    gv_alg[180 + lv_aUP] = gv_alg.getInt(180 + lv_aUP) + 2;
  }
  lv_aUO = null;
}
function f_aUQ() {
  var lv_aUR = GetExpiredTimer();
  var lv_aUS = LoadInteger(gv_abL, 0, GetHandleId(lv_aUR));
  var lv_aUT = Atan2(
    gv_apZ[lv_aUS] - GetUnitY(gv_aqb[lv_aUS]),
    gv_apY[lv_aUS] - GetUnitX(gv_aqb[lv_aUS])
  );
  SetUnitX(
    gv_aqb[lv_aUS],
    GetUnitX(gv_aqb[lv_aUS]) + Cos(lv_aUT) * gv_aqa[lv_aUS]
  );
  SetUnitY(
    gv_aqb[lv_aUS],
    GetUnitY(gv_aqb[lv_aUS]) + Sin(lv_aUT) * gv_aqa[lv_aUS]
  );
  if (
    IsUnitInRangeXY(
      gv_aqb[lv_aUS],
      gv_apY[lv_aUS],
      gv_apZ[lv_aUS],
      gv_aqa[lv_aUS]
    ) ||
    f_aGo(lv_aUS, lv_aUT)
  ) {
    f_aGt(lv_aUS);
    GroupRemoveUnit(gv_ack, gv_aqb[lv_aUS]);
    f_aIM(lv_aUR);
  }
  lv_aUR = null;
}
function f_aUU(lv_aUV, lv_aUW, lv_aUX) {
  gv_apY[lv_aUV] = lv_aUW;
  gv_apZ[lv_aUV] = lv_aUX;
}
function f_aUY(lv_aUZ, lv_aVa, lv_aVb, lv_aVc) {
  var lv_aVd = f_aGr();
  var lv_aVe = f_aIL();
  gv_aqb[lv_aVd] = lv_aUZ;
  gv_apY[lv_aVd] = lv_aVa;
  gv_apZ[lv_aVd] = lv_aVb;
  gv_aqa[lv_aVd] = lv_aVc * 0.025;
  GroupAddUnit(gv_ack, gv_aqb[lv_aVd]);
  SaveInteger(gv_abL, 0, GetHandleId(lv_aVe), lv_aVd);
  TimerStart(lv_aVe, 0.025, true, f_aUQ);
  lv_aVe = null;
  return lv_aVd;
}
function f_aVf() {
  var lv_aVg;
  var lv_aVh;
  var lv_aVi = GetUnitAbilityLevel(GetTriggerUnit(), "A076");
  if (GetSpellAbilityId() == "A076") {
    lv_aVh = GetPlayerId(GetOwningPlayer(GetTriggerUnit()));
    lv_aVg = f_aUY(
      CreateUnit(
        GetOwningPlayer(GetTriggerUnit()),
        "ehpr",
        GetUnitX(GetTriggerUnit()),
        GetUnitY(GetTriggerUnit()),
        GetUnitFacing(GetTriggerUnit())
      ),
      GetUnitX(GetSpellTargetUnit()),
      GetUnitY(GetSpellTargetUnit()),
      1137.5
    );
    gv_aqc[lv_aVg] = GetSpellTargetUnit();
    if (lv_aVi == 2) {
      gv_aqd[lv_aVg] =
        (GetHeroStr(GetTriggerUnit(), true) * 1.3 * f_azm(GetTriggerUnit()) +
          gv_ald[1885 + lv_aVi] +
          gv_ald[lv_aVh]) *
        f_azm(GetTriggerUnit());
    } else {
      gv_aqd[lv_aVg] =
        ((GetHeroStr(GetTriggerUnit(), true) * (3 + lv_aVi)) / 3 +
          gv_ald[1885 + lv_aVi] +
          gv_ald[lv_aVh]) *
        f_azo(GetTriggerUnit());
    }
    SetUnitExploded(gv_aqb[lv_aVg], true);
  }
  return false;
}
function f_aVj() {
  var lv_aVk = CreateUnit(Player(0), "ehpr", 0.0, 0.0, 0.0);
  SetUnitExploded(lv_aVk, true);
  UnitApplyTimedLife(lv_aVk, "BTLF", 2);
  gv_agL = CreateTrigger();
  TriggerRegisterAnyUnitEventBJ(gv_agL, EVENT_PLAYER_UNIT_SPELL_EFFECT);
  TriggerAddCondition(gv_agL, Condition(f_aVf));
  gv_ald[1886] = 60;
  gv_ald[1887] = 90;
  gv_ald[1888] = 135;
  gv_ald[1889] = 210;
  gv_ald[1890] = 325;
  gv_ald[1891] = 530;
  lv_aVk = null;
}
function f_aVl() {
  return GetSpellAbilityId() == "A070";
}
function f_aVm() {
  UnitDamageTarget(
    f_aIV(gv_acg, GetUnitX(GetEnumUnit()), GetUnitY(GetEnumUnit()), 1),
    GetEnumUnit(),
    gv_alw,
    false,
    false,
    ATTACK_TYPE_NORMAL,
    DAMAGE_TYPE_UNIVERSAL,
    null
  );
  DestroyEffect(
    AddSpecialEffectTarget(
      "Abilities\\Spells\\Human\\Feedback\\SpellBreakerAttack.mdl",
      GetEnumUnit(),
      "head"
    )
  );
}
function f_aVn() {
  var lv_aVo = GetPlayerId(GetOwningPlayer(GetTriggerUnit()));
  var lv_aVp = f_aIn();
  var lv_aVq = GetUnitAbilityLevel(GetTriggerUnit(), "A070");
  gv_alw =
    (gv_ald[1035 + lv_aVq] +
      ((GetHeroInt(GetTriggerUnit(), true) + gv_ald[lv_aVo + 8]) *
        (2 + lv_aVq)) /
        4) *
    f_azm(GetTriggerUnit());
  SetWidgetLife(
    GetSpellTargetUnit(),
    GetWidgetLife(GetSpellTargetUnit()) + gv_alw
  );
  gv_ach = GetUnitX(GetSpellTargetUnit());
  gv_aci = GetUnitY(GetSpellTargetUnit());
  gv_acj = 250;
  gv_acg = GetOwningPlayer(GetTriggerUnit());
  GroupEnumUnitsInRange(lv_aVp, gv_ach, gv_aci, 350, Condition(f_aLM));
  gv_alw = gv_alw * 0.5 * f_azo(GetTriggerUnit());
  if (GetSpellTargetUnit() == GetTriggerUnit()) {
    f_aBa(GetTriggerUnit(), 400);
  }
  ForGroup(lv_aVp, f_aVm);
  f_aIo(lv_aVp);
  lv_aVp = null;
}
function f_aVr(lv_aVs) {
  var lv_aVt = f_aIV(
    GetOwningPlayer(gv_aqi[lv_aVs]),
    GetUnitX(gv_aqi[lv_aVs]),
    GetUnitY(gv_aqi[lv_aVs]),
    2
  );
  var lv_aVu = f_aIn();
  if (gv_aqj[lv_aVs] > 0.0) {
    gv_aqk[lv_aVs] = gv_aqk[lv_aVs] - gv_aqj[lv_aVs];
  }
  DestroyEffect(
    AddSpecialEffect(
      "Abilities\\Spells\\Orc\\WarStomp\\WarStompCaster.mdl",
      GetUnitX(gv_aqi[lv_aVs]),
      GetUnitY(gv_aqi[lv_aVs])
    )
  );
  gv_ach = GetUnitX(gv_aqi[lv_aVs]);
  gv_aci = GetUnitY(gv_aqi[lv_aVs]);
  gv_acj = 450;
  gv_acg = GetOwningPlayer(gv_aqi[lv_aVs]);
  GroupEnumUnitsInRange(lv_aVu, gv_ach, gv_aci, 550, Condition(f_aLM));
  do {
    gv_alv = FirstOfGroup(lv_aVu);
    if (gv_alv == null) {
      break;
    }
    UnitDamageTarget(
      lv_aVt,
      gv_alv,
      gv_aqk[lv_aVs],
      false,
      false,
      ATTACK_TYPE_HERO,
      DAMAGE_TYPE_NORMAL,
      null
    );
    GroupRemoveUnit(lv_aVu, gv_alv);
  } while (true);
  f_aIo(lv_aVu);
  f_aLp(gv_aqh.getInt(lv_aVs));
  RemoveSavedInteger(gv_abH, gv_alK, GetHandleId(gv_aqi[lv_aVs]));
  GroupRemoveUnit(gv_alN, gv_aqi[lv_aVs]);
  lv_aVt = null;
  lv_aVu = null;
}
function f_aVv(lv_aVw) {
  if (lv_aVw == null) {
    return;
  } else {
    if (gv_aqg.getInt(lv_aVw) != -1) {
      return;
    }
  }
  f_aVr(lv_aVw);
  gv_aqg[lv_aVw] = gv_aqe;
  gv_aqe = lv_aVw;
}
function f_aVx() {
  var lv_aVy = LoadInteger(gv_abL, 0, GetHandleId(GetExpiredTimer()));
  if (gv_alf[GetPlayerId(GetOwningPlayer(gv_aqi[lv_aVy])) + 30] == "I") {
    gv_aoT[gv_aqh.getInt(lv_aVy)] = TextTagSize2Height(10);
  } else {
    gv_aoT[gv_aqh.getInt(lv_aVy)] = TextTagSize2Height(5.65);
  }
  if (
    GetUnitAbilityLevel(gv_aqi[lv_aVy], "B016") < 1 ||
    GetWidgetLife(gv_aqi[lv_aVy]) < 0.406
  ) {
    f_aIM(GetExpiredTimer());
    f_aVv(lv_aVy);
  }
}
function f_aVz() {
  var lv_aVA = LoadInteger(gv_abH, gv_alK, GetHandleId(GetTriggerUnit()));
  if (IsUnitInGroup(gv_aqi[lv_aVA], gv_alN)) {
    if (GetEventDamage() >= gv_aqj[lv_aVA]) {
      if (GetEventDamage() - gv_aqj[lv_aVA] < GetWidgetLife(gv_aqi[lv_aVA])) {
        UnitAddAbility(gv_aqi[lv_aVA], "A059");
        UnitRemoveAbility(gv_aqi[lv_aVA], "A059");
        SetWidgetLife(
          gv_aqi[lv_aVA],
          GetWidgetLife(gv_aqi[lv_aVA]) + GetEventDamage() - gv_aqj[lv_aVA]
        );
      }
      gv_aqj[lv_aVA] = gv_aqj[lv_aVA] - GetEventDamage();
      UnitRemoveAbility(gv_aqi[lv_aVA], "B016");
    } else {
      UnitAddAbility(gv_aqi[lv_aVA], "A059");
      gv_aqj[lv_aVA] = gv_aqj[lv_aVA] - GetEventDamage();
      f_aKF(gv_aqh.getInt(lv_aVA), (gv_aqj[lv_aVA] / gv_aqk[lv_aVA]) * 100);
      UnitRemoveAbility(gv_aqi[lv_aVA], "A059");
      SetWidgetLife(
        gv_aqi[lv_aVA],
        GetWidgetLife(gv_aqi[lv_aVA]) + GetEventDamage()
      );
    }
  }
  return false;
}
function f_aVB() {
  return GetSpellAbilityId() == "A07C";
}
function f_aVC() {
  var lv_aVD;
  var lv_aVE;
  var lv_aVF;
  var lv_aVG = GetPlayerId(GetOwningPlayer(GetTriggerUnit()));
  var lv_aVH;
  if (IsUnitInGroup(GetTriggerUnit(), gv_alN)) {
    lv_aVE = LoadInteger(gv_abH, gv_alK, GetHandleId(GetTriggerUnit()));
    if (GetUnitAbilityLevel(gv_aqi[lv_aVE], "B016") > 0) {
      IssueImmediateOrder(gv_aqi[lv_aVE], "stop");
    }
    UnitRemoveAbility(gv_aqi[lv_aVE], "B016");
    PolledWait(0.3);
    f_aVv(lv_aVE);
    UnitRemoveAbility(gv_aqi[lv_aVE], "B016");
    SetUnitState(
      gv_aqi[lv_aVE],
      UNIT_STATE_MANA,
      GetUnitState(gv_aqi[lv_aVE], UNIT_STATE_MANA) +
        BlzGetAbilityManaCost(
          "A07C",
          GetUnitAbilityLevel(gv_aqi[lv_aVE], "A07C") - 1
        )
    );
    BlzEndUnitAbilityCooldown(gv_aqi[lv_aVE], "A07C");
    return;
  }
  lv_aVD = f_aIL();
  lv_aVE = f_aGm();
  gv_aqi[lv_aVE] = GetTriggerUnit();
  lv_aVH = GetUnitAbilityLevel(gv_aqi[lv_aVE], "A07C");
  lv_aVF = (lv_aVH + 1) / 4;
  if (lv_aVH == 3) {
    lv_aVF = lv_aVF + 0.5;
  }
  f_aBa(GetTriggerUnit(), 650);
  gv_aqj[lv_aVE] =
    (gv_ald[1041 + lv_aVH] +
      gv_ald[lv_aVG + 8] +
      (GetHeroInt(gv_aqi[lv_aVE], true) + GetHeroStr(gv_aqi[lv_aVE], true)) *
        lv_aVF *
        f_azo(gv_aqi[lv_aVE])) *
    f_azm(gv_aqi[lv_aVE]);
  if (GetInventoryIndexOfItemTypeBJ(gv_aqi[lv_aVE], "rej4") > 0) {
    gv_aqj[lv_aVE] = gv_aqj[lv_aVE] * 1.2;
  }
  gv_aqk[lv_aVE] = gv_aqj[lv_aVE];
  f_azb(I2S(R2I(gv_aqj[lv_aVE])), GetTriggerUnit(), 2, 60, 0, 11, 0, 50, 80, 0);
  if (GetLocalPlayer() == Player(lv_aVG)) {
    SetTextTagVisibility(bj_lastCreatedTextTag, true);
  } else {
    SetTextTagVisibility(bj_lastCreatedTextTag, false);
  }
  SaveInteger(gv_abH, gv_alK, GetHandleId(gv_aqi[lv_aVE]), lv_aVE);
  GroupAddUnit(gv_alN, gv_aqi[lv_aVE]);
  gv_aqh[lv_aVE] = f_aLf(
    "'",
    40,
    10,
    GetUnitX(gv_aqi[lv_aVE]),
    GetUnitY(gv_aqi[lv_aVE]),
    0.0
  );
  if (gv_alf[lv_aVG + 30] == "I") {
    gv_aoT[gv_aqh.getInt(lv_aVE)] = TextTagSize2Height(10 * 1);
  } else {
    gv_aoT[gv_aqh.getInt(lv_aVE)] = TextTagSize2Height(5.65 * 1);
  }
  f_aKW(gv_aqh.getInt(lv_aVE), gv_aqi[lv_aVE], -25, 0.0, -120);
  f_aKT(gv_aqh.getInt(lv_aVE), gv_alL);
  f_aKQ(gv_aqh.getInt(lv_aVE), gv_alM);
  f_aKF(gv_aqh.getInt(lv_aVE), 100);
  SaveInteger(gv_abL, 0, GetHandleId(lv_aVD), lv_aVE);
  TimerStart(lv_aVD, 0.04, true, f_aVx);
  lv_aVD = null;
}
function f_aVI() {
  var lv_aVJ = f_aIV(
    GetOwningPlayer(GetTriggerUnit()),
    GetUnitX(GetEnumUnit()),
    GetUnitY(GetEnumUnit()),
    2
  );
  f_aJc(lv_aVJ, "A072", 0);
  IssueTargetOrderById(lv_aVJ, 852190, GetEnumUnit());
  UnitDamageTarget(
    lv_aVJ,
    GetEnumUnit(),
    gv_alw,
    false,
    false,
    ATTACK_TYPE_NORMAL,
    DAMAGE_TYPE_UNIVERSAL,
    null
  );
  lv_aVJ = null;
}
function f_aVK() {
  return GetSpellAbilityId() == "A071";
}
function f_aVL() {
  var lv_aVM = GetSpellTargetLoc();
  var lv_aVN = f_aIn();
  var lv_aVO = GetUnitAbilityLevel(GetTriggerUnit(), "A071");
  var lv_aVP = GetPlayerId(GetOwningPlayer(GetTriggerUnit()));
  gv_ach = GetLocationX(lv_aVM);
  gv_aci = GetLocationY(lv_aVM);
  gv_acj = 200 * f_azm(GetTriggerUnit());
  gv_acg = GetOwningPlayer(GetTriggerUnit());
  GroupEnumUnitsInRange(
    lv_aVN,
    gv_ach,
    gv_aci,
    300 * f_azm(GetTriggerUnit()),
    Condition(f_aLM)
  );
  gv_alw =
    (gv_ald[1023 + lv_aVO] +
      (gv_ald[lv_aVP] * (lv_aVO + 2)) / 3 +
      ((GetHeroInt(GetTriggerUnit(), true) * (lv_aVO + 5)) / 3) *
        gv_aam[lv_aVP]) *
    gv_aan[lv_aVP];
  ForGroup(lv_aVN, f_aVI);
  RemoveLocation(lv_aVM);
  f_aIo(lv_aVN);
  lv_aVN = null;
  lv_aVM = null;
}
function f_aVQ() {
  var lv_aVR = GetExpiredTimer();
  var lv_aVS = LoadInteger(gv_abL, 0, GetHandleId(lv_aVR));
  var lv_aVT = Atan2(
    gv_aqp[lv_aVS] - GetUnitY(gv_aqr[lv_aVS]),
    gv_aqo[lv_aVS] - GetUnitX(gv_aqr[lv_aVS])
  );
  SetUnitX(
    gv_aqr[lv_aVS],
    GetUnitX(gv_aqr[lv_aVS]) + Cos(lv_aVT) * gv_aqq[lv_aVS]
  );
  SetUnitY(
    gv_aqr[lv_aVS],
    GetUnitY(gv_aqr[lv_aVS]) + Sin(lv_aVT) * gv_aqq[lv_aVS]
  );
  if (
    IsUnitInRangeXY(
      gv_aqr[lv_aVS],
      gv_aqo[lv_aVS],
      gv_aqp[lv_aVS],
      gv_aqq[lv_aVS]
    ) ||
    f_aGf(lv_aVS, lv_aVT)
  ) {
    f_aGk(lv_aVS);
    GroupRemoveUnit(gv_ack, gv_aqr[lv_aVS]);
    f_aIM(lv_aVR);
  }
  lv_aVR = null;
}
function f_aVU(lv_aVV, lv_aVW, lv_aVX) {
  gv_aqo[lv_aVV] = lv_aVW;
  gv_aqp[lv_aVV] = lv_aVX;
}
function f_aVY(lv_aVZ, lv_aWa, lv_aWb, lv_aWc) {
  var lv_aWd = f_aGi();
  var lv_aWe = f_aIL();
  gv_aqr[lv_aWd] = lv_aVZ;
  gv_aqo[lv_aWd] = lv_aWa;
  gv_aqp[lv_aWd] = lv_aWb;
  gv_aqq[lv_aWd] = lv_aWc * 0.025;
  GroupAddUnit(gv_ack, gv_aqr[lv_aWd]);
  SaveInteger(gv_abL, 0, GetHandleId(lv_aWe), lv_aWd);
  TimerStart(lv_aWe, 0.025, true, f_aVQ);
  lv_aWe = null;
  return lv_aWd;
}
function f_aWf() {
  var lv_aWg;
  var lv_aWh;
  var lv_aWi = f_azm(GetTriggerUnit());
  if (GetSpellAbilityId() == "A03T") {
    lv_aWh =
      ((GetHeroStr(GetTriggerUnit(), true) *
        (GetUnitAbilityLevel(GetTriggerUnit(), "A03T") + 1)) /
        2) *
      lv_aWi;
    lv_aWg = f_aVY(
      GetTriggerUnit(),
      GetUnitX(GetSpellTargetUnit()),
      GetUnitY(GetSpellTargetUnit()),
      200 * lv_aWi
    );
    gv_aqs[lv_aWg] = 0;
    gv_aqt[lv_aWg] = GetSpellTargetUnit();
    gv_aqu[lv_aWg] =
      (gv_ald[1107 + GetUnitAbilityLevel(gv_aqr[lv_aWg], "A03T")] + lv_aWh) *
      lv_aWi;
    SetUnitAnimationByIndex(gv_aqr[lv_aWg], 5);
  }
  return false;
}
function f_aWj() {
  var lv_aWk = GetExpiredTimer();
  var lv_aWl = LoadInteger(gv_abL, 0, GetHandleId(lv_aWk));
  gv_aqA[lv_aWl] = gv_aqA.getInt(lv_aWl) - 1;
  if (gv_aqA.getInt(lv_aWl) < 1 || GetWidgetLife(gv_aqy[lv_aWl]) < 0.406) {
    UnitRemoveAbility(gv_aqy[lv_aWl], "A096");
    UnitRemoveAbility(gv_aqy[lv_aWl], "B018");
    f_aGd(lv_aWl);
    f_aIM(lv_aWk);
  } else {
    SetWidgetLife(
      gv_aqy[lv_aWl],
      GetWidgetLife(gv_aqy[lv_aWl]) + gv_aqz[lv_aWl]
    );
  }
  lv_aWk = null;
}
function f_aWm(lv_aWn) {
  var lv_aWo = f_aGb();
  var lv_aWp = f_aIL();
  var lv_aWq = GetPlayerId(GetOwningPlayer(GetEventDamageSource()));
  gv_aqy[lv_aWo] = GetEventDamageSource();
  gv_aqz[lv_aWo] = (lv_aWn * gv_aam[lv_aWq] * gv_aan[lv_aWq]) / 5;
  gv_aqA[lv_aWo] = R2I(5 * gv_aan[lv_aWq]);
  UnitAddAbility(gv_aqy[lv_aWo], "A096");
  SaveInteger(gv_abL, 0, GetHandleId(lv_aWp), lv_aWo);
  TimerStart(lv_aWp, 1, true, f_aWj);
  lv_aWp = null;
  return lv_aWo;
}
function f_aWr() {
  var lv_aWs;
  var lv_aWt = f_azm(GetEventDamageSource());
  if (GetUnitAbilityLevel(GetEventDamageSource(), "A04F") > 0) {
    UnitRemoveAbility(GetEventDamageSource(), "A04F");
    lv_aWs = R2I(
      GetEventDamage() *
        (4 + GetUnitAbilityLevel(GetEventDamageSource(), "A03R")) *
        0.5 +
        lv_aWt * GetHeroStr(GetEventDamageSource(), true)
    );
    f_aWm(lv_aWs);
    DisableTrigger(gv_abD);
    UnitDamageTarget(
      GetEventDamageSource(),
      GetTriggerUnit(),
      lv_aWs * lv_aWt,
      true,
      false,
      ATTACK_TYPE_HERO,
      DAMAGE_TYPE_UNKNOWN,
      null
    );
    EnableTrigger(gv_abD);
    f_aLR(
      GetOwningPlayer(GetEventDamageSource()),
      I2S(lv_aWs) + "!",
      255,
      3,
      3,
      GetUnitX(GetEventDamageSource()) - 16,
      GetUnitY(GetEventDamageSource()),
      0.077,
      0.0,
      3,
      12.5
    );
    DestroyEffect(
      AddSpecialEffectTarget(
        "Objects\\Spawnmodels\\Orc\\Orcblood\\BattrollBlood.mdl",
        GetTriggerUnit(),
        "chest"
      )
    );
  }
  return false;
}
function f_aWu() {
  var lv_aWv = LoadInteger(gv_abL, 0, GetHandleId(GetExpiredTimer()));
  if (GetUnitAbilityLevel(gv_ale[lv_aWv], "A04F") > 0) {
    UnitRemoveAbility(gv_ale[lv_aWv], "A04F");
  }
  f_aIM(GetExpiredTimer());
}
function f_aWw() {
  return GetSpellAbilityId() == "A03R";
}
function f_aWx() {
  var lv_aWy = f_aIL();
  UnitAddAbility(GetTriggerUnit(), "A04F");
  IssueTargetOrderById(GetTriggerUnit(), gv_aas, GetSpellTargetUnit());
  SaveInteger(
    gv_abL,
    0,
    GetHandleId(lv_aWy),
    GetPlayerId(GetOwningPlayer(GetTriggerUnit()))
  );
  TimerStart(lv_aWy, 1, false, f_aWu);
  lv_aWy = null;
}
function f_aWz() {
  if (
    GetUnitAbilityLevel(GetEnumUnit(), "B00G") > 0 &&
    !IsUnitInGroup(GetEnumUnit(), gv_alO)
  ) {
    GroupAddUnit(bj_groupAddGroupDest, GetEnumUnit());
    GroupAddUnit(gv_alO, GetEnumUnit());
  }
}
function f_aWA() {
  if (
    GetUnitAbilityLevel(GetEnumUnit(), "B00G") > 0 &&
    GetWidgetLife(GetEnumUnit()) > 0.405
  ) {
    IssueTargetOrderById(GetEnumUnit(), gv_aas, bj_ghoul[0]);
  } else {
    GroupRemoveUnit(gv_alO, GetEnumUnit());
    GroupRemoveUnit(bj_groupRemoveGroupDest, GetEnumUnit());
  }
}
function f_aWB() {
  var lv_aWC = LoadInteger(gv_abL, 0, GetHandleId(GetExpiredTimer()));
  var lv_aWD;
  gv_aqF[lv_aWC] = gv_aqF.getInt(lv_aWC) + 1;
  if (gv_aqF.getInt(lv_aWC) < 51 && GetWidgetLife(gv_aqE[lv_aWC]) > 0.405) {
    bj_ghoul[0] = gv_aqE[lv_aWC];
    bj_groupRemoveGroupDest = gv_aqG[lv_aWC];
    ForGroup(gv_aqG[lv_aWC], f_aWA);
    gv_aqG[lv_aWC] = bj_groupRemoveGroupDest;
  } else {
    f_aIo(gv_aqG[lv_aWC]);
    UnitRemoveAbility(gv_aqE[lv_aWC], "A097");
    UnitRemoveAbility(gv_aqE[lv_aWC], "A04W");
    UnitRemoveAbility(gv_aqE[lv_aWC], "B00F");
    f_aFZ(lv_aWC);
    f_aIM(GetExpiredTimer());
  }
  lv_aWD = null;
}
function f_aWE() {
  var lv_aWF = f_aFX();
  var lv_aWG = f_aIL();
  var lv_aWH = f_aIn();
  gv_aqE[lv_aWF] = GetTriggerUnit();
  gv_aqF[lv_aWF] = 0;
  gv_aqG[lv_aWF] = f_aIn();
  gv_acg = GetOwningPlayer(gv_aqE[lv_aWF]);
  gv_ach = GetUnitX(gv_aqE[lv_aWF]);
  gv_aci = GetUnitY(gv_aqE[lv_aWF]);
  gv_acj = 400;
  GroupEnumUnitsInRange(lv_aWH, gv_ach, gv_aci, 500, Condition(f_aLM));
  bj_groupAddGroupDest = gv_aqG[lv_aWF];
  ForGroup(lv_aWH, f_aWz);
  f_aIo(lv_aWH);
  UnitAddAbility(gv_aqE[lv_aWF], "A097");
  UnitAddAbility(gv_aqE[lv_aWF], "A04W");
  SetUnitAbilityLevel(
    gv_aqE[lv_aWF],
    "A04W",
    GetUnitAbilityLevel(gv_aqE[lv_aWF], "A04A")
  );
  SetUnitAbilityLevel(
    gv_aqE[lv_aWF],
    "A097",
    GetUnitAbilityLevel(gv_aqE[lv_aWF], "A04A")
  );
  SaveInteger(gv_abL, 0, GetHandleId(lv_aWG), lv_aWF);
  TimerStart(lv_aWG, 0.2, true, f_aWB);
  lv_aWG = null;
  lv_aWH = null;
  return lv_aWF;
}
function f_aWI() {
  return GetSpellAbilityId() == "A04A";
}
function f_aWJ() {
  var lv_aWK = GetEnumUnit();
  if (
    gv_alR ||
    ((GetWidgetLife(lv_aWK) < 0.406 ||
      GetUnitAbilityLevel(lv_aWK, "B008") < 1) &&
      !IsUnitInRange(lv_aWK, gv_alQ, 500) &&
      IsUnitInGroup(lv_aWK, gv_alP))
  ) {
    GroupRemoveUnit(gv_alP, lv_aWK);
    UnitRemoveAbility(lv_aWK, "A04P");
  }
  lv_aWK = null;
}
function f_aWL() {
  var lv_aWM = f_aFV();
  gv_aqK[lv_aWM] = GetOrderedUnit();
  gv_aqL[lv_aWM] = f_aIn();
  AddUnitAnimationProperties(gv_aqK[lv_aWM], "Defend", true);
  UnitAddAbility(gv_aqK[lv_aWM], "A04O");
  return lv_aWM;
}
function f_aWN(lv_aWO) {
  AddUnitAnimationProperties(gv_aqK[lv_aWO], "Defend", false);
  UnitRemoveAbility(gv_aqK[lv_aWO], "A04O");
  gv_alR = true;
  gv_alP = gv_aqL[lv_aWO];
  ForGroup(gv_aqL[lv_aWO], f_aWJ);
  gv_alR = false;
  f_aIl(gv_aqL[lv_aWO]);
  f_aIo(gv_aqL[lv_aWO]);
}
function f_aWP(lv_aWQ) {
  if (lv_aWQ == null) {
    return;
  } else {
    if (gv_aqJ.getInt(lv_aWQ) != -1) {
      return;
    }
  }
  f_aWN(lv_aWQ);
  gv_aqJ[lv_aWQ] = gv_aqH;
  gv_aqH = lv_aWQ;
}
function f_aWR() {
  var lv_aWS = GetExpiredTimer();
  var lv_aWT = LoadInteger(gv_abL, 0, GetHandleId(lv_aWS));
  var lv_aWU;
  var lv_aWV;
  if (
    GetWidgetLife(gv_aqK[lv_aWT]) < 406 ||
    GetUnitAbilityLevel(gv_aqK[lv_aWT], "B009") < 1
  ) {
    f_aWP(lv_aWT);
    f_aIM(lv_aWS);
  } else {
    lv_aWV = f_aIn();
    GroupEnumUnitsInRange(
      lv_aWV,
      GetUnitX(gv_aqK[lv_aWT]),
      GetUnitY(gv_aqK[lv_aWT]),
      600,
      null
    );
    do {
      lv_aWU = FirstOfGroup(lv_aWV);
      if (lv_aWU == null) {
        break;
      }
      if (
        !f_aLK(lv_aWU) &&
        GetWidgetLife(lv_aWU) > 0.405 &&
        IsUnitAlly(lv_aWU, GetOwningPlayer(gv_aqK[lv_aWT])) &&
        GetUnitAbilityLevel(lv_aWU, "B008") > 0 &&
        GetUnitAbilityLevel(lv_aWU, "A04P") < 1 &&
        !IsUnitInGroup(lv_aWU, gv_aqL[lv_aWT])
      ) {
        GroupAddUnit(gv_aqL[lv_aWT], lv_aWU);
        UnitAddAbility(lv_aWU, "A04P");
        SetUnitAbilityLevel(
          lv_aWU,
          "A04Q",
          GetUnitAbilityLevel(gv_aqK[lv_aWT], "A042") + R2I(f_ays(lv_aWU) / 2)
        );
      }
      GroupRemoveUnit(lv_aWV, lv_aWU);
    } while (true);
    gv_alP = gv_aqL[lv_aWT];
    gv_alQ = gv_aqK[lv_aWT];
    ForGroup(gv_aqL[lv_aWT], f_aWJ);
    f_aIo(lv_aWV);
  }
  lv_aWS = null;
  lv_aWV = null;
  lv_aWU = null;
}
function f_aWW() {
  return (
    GetIssuedOrderId() == 852177 &&
    GetUnitAbilityLevel(GetOrderedUnit(), "A042") > 0
  );
}
function f_aWX() {
  var lv_aWY = f_aIL();
  SaveInteger(gv_abL, 0, GetHandleId(lv_aWY), f_aWL());
  TimerStart(lv_aWY, 0.2, true, f_aWR);
  lv_aWY = null;
}
function f_aWZ() {
  var lv_aXa;
  var lv_aXb = GetEventDamageSource();
  if (
    GetUnitAbilityLevel(GetTriggerUnit(), "B00C") > 0 &&
    GetUnitAbilityLevel(lv_aXb, "A047") > 0
  ) {
    gv_aaj = f_aBf(
      lv_aXb,
      (GetHeroAgi(lv_aXb, true) + GetEventDamage()) * f_azo(lv_aXb) * 0.15
    );
    UnitDamageTarget(
      f_aIV(
        GetOwningPlayer(lv_aXb),
        GetUnitX(GetTriggerUnit()),
        GetUnitY(GetTriggerUnit()),
        1
      ),
      GetTriggerUnit(),
      gv_aaj * f_azm(lv_aXb),
      false,
      false,
      ATTACK_TYPE_NORMAL,
      DAMAGE_TYPE_UNIVERSAL,
      null
    );
    lv_aXa =
      (GetEventDamage() + gv_aaj) *
      gv_ald[1089 + GetUnitAbilityLevel(lv_aXb, "A047")];
    SetWidgetLife(lv_aXb, GetWidgetLife(lv_aXb) + lv_aXa * f_azm(lv_aXb));
    f_aLR(
      GetOwningPlayer(lv_aXb),
      "+" + I2S(R2I(lv_aXa + 0.5)),
      128,
      255,
      0,
      GetUnitX(lv_aXb) - 16,
      GetUnitY(lv_aXb),
      0.08,
      0.0,
      3,
      10
    );
    f_azL(lv_aXb);
  }
  lv_aXb = null;
  return false;
}
function f_aXc() {
  var lv_aXd = GetExpiredTimer();
  var lv_aXe = LoadInteger(gv_abL, 0, GetHandleId(lv_aXd));
  var lv_aXf = Atan2(
    gv_aqQ[lv_aXe] - GetUnitY(gv_aqS[lv_aXe]),
    gv_aqP[lv_aXe] - GetUnitX(gv_aqS[lv_aXe])
  );
  SetUnitX(
    gv_aqS[lv_aXe],
    GetUnitX(gv_aqS[lv_aXe]) + Cos(lv_aXf) * gv_aqR[lv_aXe]
  );
  SetUnitY(
    gv_aqS[lv_aXe],
    GetUnitY(gv_aqS[lv_aXe]) + Sin(lv_aXf) * gv_aqR[lv_aXe]
  );
  if (
    IsUnitInRangeXY(
      gv_aqS[lv_aXe],
      gv_aqP[lv_aXe],
      gv_aqQ[lv_aXe],
      gv_aqR[lv_aXe]
    ) ||
    f_aFO(lv_aXe, lv_aXf)
  ) {
    f_aFT(lv_aXe);
    GroupRemoveUnit(gv_ack, gv_aqS[lv_aXe]);
    f_aIM(lv_aXd);
  }
  lv_aXd = null;
}
function f_aXg(lv_aXh, lv_aXi, lv_aXj, lv_aXk) {
  var lv_aXl = f_aFR();
  var lv_aXm = f_aIL();
  gv_aqS[lv_aXl] = lv_aXh;
  gv_aqP[lv_aXl] = lv_aXi;
  gv_aqQ[lv_aXl] = lv_aXj;
  gv_aqR[lv_aXl] = lv_aXk * 0.025;
  GroupAddUnit(gv_ack, gv_aqS[lv_aXl]);
  SaveInteger(gv_abL, 0, GetHandleId(lv_aXm), lv_aXl);
  TimerStart(lv_aXm, 0.025, true, f_aXc);
  lv_aXm = null;
  return lv_aXl;
}
function f_aXn() {
  GroupClear(gv_alm[LoadInteger(gv_abL, 0, GetHandleId(GetExpiredTimer()))]);
  f_aIl(gv_alm[LoadInteger(gv_abL, 0, GetHandleId(GetExpiredTimer()))]);
  f_aIM(GetExpiredTimer());
}
function f_aXo() {
  return GetSpellAbilityId() == "A03Z";
}
function f_aXp() {
  var lv_aXq;
  var lv_aXr = GetTriggerUnit();
  var lv_aXs = 0;
  var lv_aXt = GetUnitAbilityLevel(lv_aXr, "A03Z");
  var lv_aXu = 0.0;
  var lv_aXv = 15.65 * bj_DEGTORAD;
  var lv_aXw = GetPlayerId(GetOwningPlayer(lv_aXr));
  if (lv_aXt == 4) {
    lv_aXt = 5;
  }
  gv_ald[44 + lv_aXw] =
    (gv_ald[1077 + GetUnitAbilityLevel(lv_aXr, "A03Z")] +
      (((lv_aXt + 3) / 2) * GetHeroInt(lv_aXr, true) +
        (lv_aXt / 3) * GetHeroAgi(lv_aXr, true)) *
        f_azo(lv_aXr) +
      gv_ald[lv_aXw]) *
    f_azm(lv_aXr);
  do {
    if (lv_aXs + 1 > 23) {
      break;
    }
    lv_aXq = f_aXg(
      CreateUnit(
        GetOwningPlayer(lv_aXr),
        "edry",
        GetUnitX(lv_aXr),
        GetUnitY(lv_aXr),
        lv_aXu * bj_RADTODEG
      ),
      GetUnitX(lv_aXr) + 600 * Cos(lv_aXu),
      GetUnitY(lv_aXr) + 600 * Sin(lv_aXu),
      375
    );
    gv_aqT[lv_aXq] = f_aIV(
      GetOwningPlayer(lv_aXr),
      GetUnitX(gv_aqS[lv_aXq]),
      GetUnitY(gv_aqS[lv_aXq]),
      0.0
    );
    gv_aqU[lv_aXq] = lv_aXw;
    SetUnitUserData(gv_aqS[lv_aXq], lv_aXs);
    f_aJc(gv_aqT[lv_aXq], "A04L", GetUnitAbilityLevel(lv_aXr, "A03Z"));
    lv_aXu = lv_aXu + lv_aXv;
    lv_aXs = lv_aXs + 1;
  } while (true);
  lv_aXr = null;
}
function f_aXx() {
  return GetSpellAbilityId() == "A03P";
}
function f_aXy() {
  var lv_aXz = GetSpellTargetUnit();
  var lv_aXA = GetUnitAbilityLevel(GetTriggerUnit(), "A03P");
  var lv_aXB;
  var lv_aXC;
  if (
    GetUnitAbilityLevel(lv_aXz, "B000") < 1 &&
    IsUnitInGroup(lv_aXz, gv_aaR) == false
  ) {
    lv_aXB =
      (GetHeroAgi(lv_aXz, true) + f_aAI(lv_aXz, BONUS_DAMAGE)) *
      gv_ald[1300 + lv_aXA] *
      f_azo(lv_aXz) *
      f_azq(GetTriggerUnit());
    lv_aXC =
      (gv_ald[1306 + lv_aXA] + f_aAI(lv_aXz, BONUS_ARMOR) * 0.25) *
      f_azo(lv_aXz) *
      f_azq(GetTriggerUnit());
    f_aAN(lv_aXz, BONUS_DAMAGE, R2I(lv_aXB));
    f_aAN(lv_aXz, BONUS_ARMOR, R2I(lv_aXC));
    GroupAddUnit(gv_aaR, lv_aXz);
    PolledWait(30);
    f_aAN(lv_aXz, BONUS_DAMAGE, -R2I(lv_aXB));
    f_aAN(lv_aXz, BONUS_ARMOR, -R2I(lv_aXC));
    UnitRemoveAbility(lv_aXz, "B000");
    GroupRemoveUnit(gv_aaR, lv_aXz);
  } else {
    DisplayTimedTextToPlayer(
      GetOwningPlayer(lv_aXz),
      0,
      0,
      5,
      "This unit is already buffed"
    );
  }
  lv_aXz = null;
}
function f_aXD() {
  return (
    GetIssuedOrderId() == 852067 &&
    GetUnitAbilityLevel(GetTriggerUnit(), "A03P") > 0
  );
}
function f_aXE() {
  IssueImmediateOrderById(
    gv_ale[LoadInteger(gv_abL, 0, GetHandleId(GetExpiredTimer()))],
    852068
  );
  f_aIM(GetExpiredTimer());
}
function f_aXF() {
  var lv_aXG = f_aIL();
  SaveInteger(
    gv_abL,
    0,
    GetHandleId(lv_aXG),
    GetPlayerId(GetOwningPlayer(GetTriggerUnit()))
  );
  TimerStart(lv_aXG, 0.0, false, f_aXE);
  lv_aXG = null;
}
function f_aXH() {
  return (
    (IsUnitType(GetAttacker(), UNIT_TYPE_ANCIENT) == false &&
      !IsUnitInGroup(GetTriggerUnit(), gv_aln) &&
      GetRandomReal(0.0, 100) < 15 * f_azm(GetTriggerUnit()) &&
      IsUnitEnemy(GetAttacker(), GetOwningPlayer(GetTriggerUnit())) &&
      GetUnitAbilityLevel(GetTriggerUnit(), "A03S") > 0) != null
  );
}
function f_aXI() {
  var lv_aXJ = f_aIV(
    GetOwningPlayer(GetTriggerUnit()),
    GetUnitX(GetEnumUnit()),
    GetUnitY(GetEnumUnit()),
    0.0
  );
  DestroyEffect(
    AddSpecialEffectTarget(
      "Abilities\\Spells\\Other\\Stampede\\StampedeMissileDeath.mdl",
      GetEnumUnit(),
      "chest"
    )
  );
  UnitDamageTarget(
    lv_aXJ,
    GetEnumUnit(),
    gv_aaj,
    false,
    false,
    ATTACK_TYPE_HERO,
    DAMAGE_TYPE_NORMAL,
    WEAPON_TYPE_METAL_HEAVY_SLICE
  );
  f_aIP(lv_aXJ);
  lv_aXJ = null;
}
function f_aXK() {
  var lv_aXL = f_aIL();
  var lv_aXM = f_aIn();
  GroupAddUnit(gv_aln, GetTriggerUnit());
  gv_acg = GetOwningPlayer(GetTriggerUnit());
  gv_ach = GetUnitX(GetTriggerUnit());
  gv_aci = GetUnitY(GetTriggerUnit());
  gv_acj = 250 * f_azm(GetTriggerUnit());
  SaveInteger(gv_abL, 0, GetHandleId(lv_aXL), GetPlayerId(gv_acg));
  GroupEnumUnitsInRange(
    lv_aXM,
    gv_ach,
    gv_aci,
    350 * f_azm(GetTriggerUnit()),
    Condition(f_aLM)
  );
  gv_aaj =
    (gv_ald[1083 + GetUnitAbilityLevel(GetTriggerUnit(), "A03S")] +
      GetHeroAgi(GetTriggerUnit(), true) * 3) *
    f_azm(GetTriggerUnit());
  ForGroup(lv_aXM, f_aXI);
  SetUnitAnimation(GetTriggerUnit(), "spell");
  QueueUnitAnimation(GetTriggerUnit(), "stand");
  TimerStart(lv_aXL, 0.25 / f_azm(GetTriggerUnit()), false, f_aMl);
  SetWidgetLife(
    GetTriggerUnit(),
    GetWidgetLife(GetTriggerUnit()) +
      (I2R(GetHeroAgi(GetTriggerUnit(), true)) / 2) * f_azm(GetTriggerUnit())
  );
  f_aIo(lv_aXM);
  lv_aXM = null;
  lv_aXL = null;
}
function f_aXN() {
  var lv_aXO = GetExpiredTimer();
  var lv_aXP = LoadInteger(gv_abL, 0, GetHandleId(lv_aXO));
  var lv_aXQ = Atan2(
    gv_aqZ[lv_aXP] - GetUnitY(gv_arb[lv_aXP]),
    gv_aqY[lv_aXP] - GetUnitX(gv_arb[lv_aXP])
  );
  SetUnitX(
    gv_arb[lv_aXP],
    GetUnitX(gv_arb[lv_aXP]) + Cos(lv_aXQ) * gv_ara[lv_aXP]
  );
  SetUnitY(
    gv_arb[lv_aXP],
    GetUnitY(gv_arb[lv_aXP]) + Sin(lv_aXQ) * gv_ara[lv_aXP]
  );
  if (
    IsUnitInRangeXY(
      gv_arb[lv_aXP],
      gv_aqY[lv_aXP],
      gv_aqZ[lv_aXP],
      gv_ara[lv_aXP]
    ) ||
    f_aFH(lv_aXP, lv_aXQ)
  ) {
    f_aFM(lv_aXP);
    GroupRemoveUnit(gv_ack, gv_arb[lv_aXP]);
    f_aIM(lv_aXO);
  }
  lv_aXO = null;
}
function f_aXR(lv_aXS, lv_aXT, lv_aXU) {
  gv_aqY[lv_aXS] = lv_aXT;
  gv_aqZ[lv_aXS] = lv_aXU;
}
function f_aXV(lv_aXW, lv_aXX, lv_aXY, lv_aXZ) {
  var lv_aYa = f_aFK();
  var lv_aYb = f_aIL();
  gv_arb[lv_aYa] = lv_aXW;
  gv_aqY[lv_aYa] = lv_aXX;
  gv_aqZ[lv_aYa] = lv_aXY;
  gv_ara[lv_aYa] = lv_aXZ * 0.025;
  GroupAddUnit(gv_ack, gv_arb[lv_aYa]);
  SaveInteger(gv_abL, 0, GetHandleId(lv_aYb), lv_aYa);
  TimerStart(lv_aYb, 0.025, true, f_aXN);
  lv_aYb = null;
  return lv_aYa;
}
function f_aYc() {
  var lv_aYd;
  var lv_aYe = GetUnitAbilityLevel(GetTriggerUnit(), "A046");
  if (GetSpellAbilityId() == "A046") {
    lv_aYd = f_aXV(
      GetTriggerUnit(),
      GetUnitX(GetSpellTargetUnit()),
      GetUnitY(GetSpellTargetUnit()),
      250
    );
    SetUnitAnimationByIndex(gv_arb[lv_aYd], 6);
    gv_ard[lv_aYd] = GetSpellTargetUnit();
    gv_arc[lv_aYd] = 0;
    gv_are[lv_aYd] =
      (gv_ald[1071 + lv_aYe] +
        (((lv_aYe + 3) * GetHeroStr(gv_arb[lv_aYd], true) +
          lv_aYe * GetHeroAgi(gv_arb[lv_aYd], true)) /
          3) *
          f_azo(gv_arb[lv_aYd])) *
      f_azm(gv_arb[lv_aYd]);
  }
  return false;
}
function f_aYf() {
  var lv_aYg = LoadInteger(gv_abL, 0, GetHandleId(GetExpiredTimer()));
  if (
    GetWidgetLife(gv_ari[lv_aYg]) < 0.406 ||
    GetUnitAbilityLevel(gv_ari[lv_aYg], "B015") < 1
  ) {
    UnitRemoveAbility(gv_ari[lv_aYg], "A05H");
    f_aFF(lv_aYg);
    f_aIM(GetExpiredTimer());
  }
}
function f_aYh() {
  return GetSpellAbilityId() == "A078";
}
function f_aYi() {
  var lv_aYj = f_aIL();
  var lv_aYk = f_aFD();
  gv_ari[lv_aYk] = GetTriggerUnit();
  UnitAddAbility(gv_ari[lv_aYk], "A05H");
  SaveInteger(gv_abL, 0, GetHandleId(lv_aYj), lv_aYk);
  TimerStart(lv_aYj, 0.3, true, f_aYf);
  lv_aYj = null;
}
function f_aYl() {
  var lv_aYm;
  var lv_aYn = GetUnitAbilityLevel(GetEventDamageSource(), "A078") + 2;
  if (GetUnitAbilityLevel(GetEventDamageSource(), "A05H") > 0) {
    lv_aYm = f_aIV(
      GetOwningPlayer(GetEventDamageSource()),
      GetUnitX(GetTriggerUnit()),
      GetUnitY(GetTriggerUnit()),
      2
    );
    f_aJc(lv_aYm, "A07B", 0);
    IssueTargetOrderById(lv_aYm, 852095, GetTriggerUnit());
    if (lv_aYn == 5) {
      lv_aYn = lv_aYn * f_azm(GetEventDamageSource()) * 0.5;
    } else {
      lv_aYn = lv_aYn * 0.5;
    }
    gv_aaj =
      (GetEventDamage() +
        GetHeroAgi(GetEventDamageSource(), true) *
          f_azo(GetEventDamageSource()) *
          0.2) *
      lv_aYn;
    UnitDamageTarget(
      lv_aYm,
      GetTriggerUnit(),
      gv_aaj * f_azm(GetEventDamageSource()),
      false,
      false,
      ATTACK_TYPE_CHAOS,
      DAMAGE_TYPE_UNIVERSAL,
      null
    );
    f_aLR(
      null,
      "+" + I2S(R2I(gv_aaj)),
      255,
      0,
      0,
      GetUnitX(GetEventDamageSource()),
      GetUnitY(GetEventDamageSource()),
      0.08,
      0.0,
      3,
      15
    );
    UnitRemoveAbility(GetEventDamageSource(), "B015");
  }
  lv_aYm = null;
  return false;
}
function f_aYo() {
  var lv_aYp = LoadInteger(gv_abL, 0, GetHandleId(GetExpiredTimer()));
  f_aIP(gv_arm[lv_aYp]);
  f_aFB(lv_aYp);
  f_aIM(GetExpiredTimer());
}
function f_aYq() {
  var lv_aYr = GetExpiredTimer();
  var lv_aYs = LoadInteger(gv_abL, 0, GetHandleId(lv_aYr));
  var lv_aYt = Atan2(
    gv_arr[lv_aYs] - GetUnitY(gv_art[lv_aYs]),
    gv_arq[lv_aYs] - GetUnitX(gv_art[lv_aYs])
  );
  SetUnitX(
    gv_art[lv_aYs],
    GetUnitX(gv_art[lv_aYs]) + Cos(lv_aYt) * gv_ars[lv_aYs]
  );
  SetUnitY(
    gv_art[lv_aYs],
    GetUnitY(gv_art[lv_aYs]) + Sin(lv_aYt) * gv_ars[lv_aYs]
  );
  if (
    IsUnitInRangeXY(
      gv_art[lv_aYs],
      gv_arq[lv_aYs],
      gv_arr[lv_aYs],
      gv_ars[lv_aYs]
    ) ||
    f_aFs(lv_aYs, lv_aYt)
  ) {
    f_aFx(lv_aYs);
    GroupRemoveUnit(gv_ack, gv_art[lv_aYs]);
    f_aIM(lv_aYr);
  }
  lv_aYr = null;
}
function f_aYu(lv_aYv, lv_aYw, lv_aYx, lv_aYy) {
  var lv_aYz = f_aFv();
  var lv_aYA = f_aIL();
  gv_art[lv_aYz] = lv_aYv;
  gv_arq[lv_aYz] = lv_aYw;
  gv_arr[lv_aYz] = lv_aYx;
  gv_ars[lv_aYz] = lv_aYy * 0.025;
  GroupAddUnit(gv_ack, gv_art[lv_aYz]);
  SaveInteger(gv_abL, 0, GetHandleId(lv_aYA), lv_aYz);
  TimerStart(lv_aYA, 0.025, true, f_aYq);
  lv_aYA = null;
  return lv_aYz;
}
function f_aYB() {
  UnitDamageTarget(
    f_aIV(gv_acg, gv_ach, gv_aci, 1),
    GetEnumUnit(),
    gv_alw,
    false,
    false,
    ATTACK_TYPE_HERO,
    DAMAGE_TYPE_NORMAL,
    null
  );
}
function f_aYC() {
  return GetSpellAbilityId() == "A04V";
}
function f_aYD() {
  var lv_aYE = GetSpellTargetLoc();
  var lv_aYF = f_aYu(
    CreateUnit(
      GetOwningPlayer(GetTriggerUnit()),
      "eshd",
      GetUnitX(GetTriggerUnit()),
      GetUnitY(GetTriggerUnit()),
      GetUnitFacing(GetTriggerUnit())
    ),
    GetLocationX(lv_aYE),
    GetLocationY(lv_aYE),
    900
  );
  gv_aru[lv_aYF] = GetTriggerUnit();
  if (GetUnitAbilityLevel(gv_aru[lv_aYF], "B015") > 0) {
    UnitRemoveAbility(gv_aru[lv_aYF], "B015");
  }
  RemoveLocation(lv_aYE);
  lv_aYE = null;
}
function f_aYG() {
  var lv_aYH = LoadInteger(gv_abL, 0, GetHandleId(GetExpiredTimer()));
  UnitDamageTarget(
    gv_ary[lv_aYH],
    gv_arz[lv_aYH],
    gv_arA[lv_aYH],
    false,
    false,
    ATTACK_TYPE_HERO,
    DAMAGE_TYPE_NORMAL,
    null
  );
  f_aLR(
    null,
    I2S(R2I(gv_arA[lv_aYH] + 0.5)),
    255,
    50,
    25,
    GetUnitX(gv_arz[lv_aYH]),
    GetUnitY(gv_arz[lv_aYH]),
    0.061,
    0.0,
    3,
    10
  );
  gv_arB[lv_aYH] = gv_arB.getInt(lv_aYH) - 1;
  if (
    gv_arB.getInt(lv_aYH) < 1 ||
    GetUnitAbilityLevel(gv_arz[lv_aYH], "B00D") < 1 ||
    GetWidgetLife(gv_arz[lv_aYH]) < 0.406
  ) {
    f_aIP(gv_ary[lv_aYH]);
    f_aFq(lv_aYH);
    f_aIM(GetExpiredTimer());
  }
}
function f_aYI() {
  return GetSpellAbilityId() == "A04U";
}
function f_aYJ() {
  var lv_aYK = f_aIL();
  var lv_aYL = f_aFo();
  var lv_aYM = GetUnitAbilityLevel(GetTriggerUnit(), "A04U");
  var lv_aYN = GetPlayerId(GetOwningPlayer(GetTriggerUnit()));
  if (GetUnitAbilityLevel(GetTriggerUnit(), "B015") > 0) {
    UnitRemoveAbility(GetTriggerUnit(), "B015");
  }
  gv_arz[lv_aYL] = GetSpellTargetUnit();
  gv_arB[lv_aYL] = 5;
  gv_ary[lv_aYL] = f_aIV(
    GetOwningPlayer(GetTriggerUnit()),
    GetUnitX(gv_arz[lv_aYL]),
    GetUnitY(gv_arz[lv_aYL]),
    0.0
  );
  gv_arA[lv_aYL] =
    ((gv_ald[1203 + lv_aYM] +
      gv_ald[lv_aYN] +
      ((3 + lv_aYM) * GetHeroStr(GetTriggerUnit(), true) * 0.5 +
        GetHeroAgi(GetTriggerUnit(), true) * 0.3) *
        gv_aam[lv_aYN]) /
      5) *
    gv_aan[lv_aYN];
  SaveInteger(gv_abL, 0, GetHandleId(lv_aYK), lv_aYL);
  TimerStart(lv_aYK, 1, true, f_aYG);
  lv_aYK = null;
}
function f_aYO() {
  var lv_aYP = LoadInteger(gv_abL, 0, GetHandleId(GetExpiredTimer()));
  RemoveUnit(gv_arF[lv_aYP]);
  f_aFm(lv_aYP);
  f_aIM(GetExpiredTimer());
}
function f_aYQ() {
  var lv_aYR;
  var lv_aYS;
  var lv_aYT;
  var lv_aYU;
  var lv_aYV;
  var lv_aYW = GetEventDamageSource();
  if (GetUnitAbilityLevel(lv_aYW, "A06Y") > 0) {
    lv_aYR = GetUnitAbilityLevel(lv_aYW, "A06Y") * 15 * f_azm(lv_aYW);
    lv_aYS = gv_ald[1113 + GetUnitAbilityLevel(lv_aYW, "A06Y")];
    lv_aYS =
      (1 -
        GetWidgetLife(GetTriggerUnit()) /
          GetUnitState(GetTriggerUnit(), UNIT_STATE_MAX_LIFE)) /
      lv_aYS;
    if (
      GetRandomReal(0.0, 100) < 10 * f_azm(lv_aYW) &&
      (UnitHasItemOfTypeBJ(lv_aYW, "mnsf") ||
        UnitHasItemOfTypeBJ(lv_aYW, "rej1"))
    ) {
      if (UnitHasItemOfTypeBJ(lv_aYW, "rej1")) {
        lv_aYR = lv_aYR * 5;
      } else {
        lv_aYR = lv_aYR * 3;
      }
    }
    UnitDamageTarget(
      f_aIV(
        GetOwningPlayer(lv_aYW),
        GetUnitX(GetTriggerUnit()),
        GetUnitY(GetTriggerUnit()),
        1
      ),
      GetTriggerUnit(),
      lv_aYS * lv_aYR,
      false,
      false,
      ATTACK_TYPE_HERO,
      DAMAGE_TYPE_NORMAL,
      null
    );
  }
  if (
    GetUnitAbilityLevel(lv_aYW, "A056") > 0 &&
    GetRandomReal(0.0, 100) <
      5 + 5 * f_azo(lv_aYW) * GetUnitAbilityLevel(lv_aYW, "A056") &&
    !IsUnitInGroup(lv_aYW, gv_aln)
  ) {
    lv_aYS =
      Atan2(
        GetUnitY(GetTriggerUnit()) - GetUnitY(lv_aYW),
        GetUnitX(GetTriggerUnit()) - GetUnitX(lv_aYW)
      ) - GetRandomReal(2.5, 4.8);
    lv_aYU = CreateUnit(
      GetOwningPlayer(lv_aYW),
      "efdr",
      GetUnitX(GetTriggerUnit()) + Cos(lv_aYS) * 100,
      GetUnitY(GetTriggerUnit()) + Sin(lv_aYS) * 100,
      lv_aYS * bj_RADTODEG + 180
    );
    lv_aYV = f_aFk();
    SetUnitVertexColor(lv_aYU, 0, 0, 255, 150);
    SetUnitExploded(lv_aYU, true);
    UnitRemoveAbility(lv_aYU, "Aloc");
    SetUnitAnimation(lv_aYU, "attack");
    UnitDamageTarget(
      lv_aYU,
      GetTriggerUnit(),
      GetEventDamage() * f_azm(lv_aYW),
      true,
      false,
      ATTACK_TYPE_CHAOS,
      DAMAGE_TYPE_UNKNOWN,
      WEAPON_TYPE_METAL_HEAVY_SLICE
    );
    f_azN(lv_aYW, GetEventDamage() * f_azm(lv_aYW));
    IssueTargetOrderById(GetTriggerUnit(), gv_aas, lv_aYU);
    lv_aYT = f_aIL();
    gv_arF[lv_aYV] = lv_aYU;
    SaveInteger(gv_abL, 0, GetHandleId(lv_aYT), lv_aYV);
    TimerStart(lv_aYT, 0.6, false, f_aYO);
    DestroyEffect(
      AddSpecialEffect(
        "Abilities\\Spells\\Items\\AIil\\AIilTarget.mdl",
        GetUnitX(lv_aYW),
        GetUnitY(lv_aYW)
      )
    );
    GroupAddUnit(gv_aln, lv_aYW);
    lv_aYT = f_aIL();
    SaveInteger(
      gv_abL,
      0,
      GetHandleId(lv_aYT),
      GetPlayerId(GetOwningPlayer(lv_aYW))
    );
    TimerStart(
      lv_aYT,
      (3.3 - GetUnitAbilityLevel(lv_aYW, "A056") * 0.3) / f_azm(lv_aYW),
      false,
      f_aMl
    );
  }
  lv_aYT = null;
  lv_aYU = null;
  lv_aYW = null;
  return false;
}
function f_aYX() {
  var lv_aYY = GetExpiredTimer();
  var lv_aYZ = LoadInteger(gv_abL, 0, GetHandleId(lv_aYY));
  if (
    GetUnitAbilityLevel(gv_arJ[lv_aYZ], "B007") < 1 ||
    GetWidgetLife(gv_arJ[lv_aYZ]) < 0.406
  ) {
    UnitRemoveAbility(gv_arJ[lv_aYZ], "A04M");
    f_aIM(lv_aYY);
    f_aFi(lv_aYZ);
  }
  lv_aYY = null;
}
function f_aZa() {
  var lv_aZb;
  var lv_aZc;
  var lv_aZd;
  var lv_aZe;
  var lv_aZf = GetEventDamageSource();
  if (
    GetUnitAbilityLevel(lv_aZf, "A03U") > 0 &&
    GetUnitAbilityLevel(GetTriggerUnit(), "B003") > 0
  ) {
    lv_aZb = f_aBf(
      lv_aZf,
      ((2 + GetUnitAbilityLevel(lv_aZf, "A03U")) / 100) *
        f_azq(lv_aZf) *
        GetRandomReal(0.9, 1.1)
    );
    if (
      UnitHasItemOfTypeBJ(lv_aZf, "ofir") ||
      UnitHasItemOfTypeBJ(lv_aZf, "ocor")
    ) {
      lv_aZb =
        GetUnitState(GetEventDamageSource(), UNIT_STATE_MANA) * lv_aZb * 1.2;
    } else {
      lv_aZb = GetUnitState(GetEventDamageSource(), UNIT_STATE_MANA) * lv_aZb;
    }
    SetUnitState(
      lv_aZf,
      UNIT_STATE_MANA,
      GetUnitState(lv_aZf, UNIT_STATE_MANA) - lv_aZb / 7
    );
    UnitDamageTarget(
      f_aIV(
        GetOwningPlayer(lv_aZf),
        GetUnitX(GetTriggerUnit()),
        GetUnitY(GetTriggerUnit()),
        1
      ),
      GetTriggerUnit(),
      lv_aZb * f_azm(lv_aZf),
      false,
      false,
      ATTACK_TYPE_NORMAL,
      DAMAGE_TYPE_UNIVERSAL,
      null
    );
    f_aLR(
      null,
      "+" + I2S(R2I(lv_aZb + 0.5)),
      0,
      0,
      255,
      GetUnitX(GetTriggerUnit()) - 16,
      GetUnitY(GetTriggerUnit()),
      0.08,
      0.0,
      3,
      12.5
    );
    f_azL(lv_aZf);
  }
  if (GetUnitAbilityLevel(GetEventDamageSource(), "A040") > 0) {
    lv_aZc = f_aIV(
      GetOwningPlayer(GetEventDamageSource()),
      GetUnitX(GetTriggerUnit()),
      GetUnitY(GetTriggerUnit()),
      1
    );
    f_aJc(
      lv_aZc,
      "A04X",
      GetUnitAbilityLevel(GetEventDamageSource(), "A040") +
        f_ays(GetEventDamageSource())
    );
    IssueTargetOrderById(lv_aZc, 852075, GetTriggerUnit());
    if (!IsUnitInGroup(GetTriggerUnit(), gv_alS)) {
      lv_aZd = f_aIL();
      lv_aZe = f_aFg();
      gv_arJ[lv_aZe] = GetTriggerUnit();
      UnitAddAbility(gv_arJ[lv_aZe], "A04M");
      SetUnitAbilityLevel(
        gv_arJ[lv_aZe],
        "A04M",
        GetUnitAbilityLevel(lv_aZc, "A04X")
      );
      SaveInteger(gv_abL, 0, GetHandleId(lv_aZd), lv_aZe);
      TimerStart(lv_aZd, 0.3, true, f_aYX);
    }
  }
  lv_aZd = null;
  lv_aZc = null;
  return false;
}
function f_aZg() {
  return GetSpellAbilityId() == "A048";
}
function f_aZh() {
  UnitDamageTarget(
    GetTriggerUnit(),
    GetEnumUnit(),
    gv_alw,
    false,
    false,
    ATTACK_TYPE_NORMAL,
    DAMAGE_TYPE_UNIVERSAL,
    null
  );
  f_aMP(
    GetEnumUnit(),
    Atan2(
      GetUnitY(GetEnumUnit()) - GetUnitY(GetTriggerUnit()),
      GetUnitX(GetEnumUnit()) - GetUnitX(GetTriggerUnit())
    )
  );
}
function f_aZi() {
  var lv_aZj = GetPlayerId(GetOwningPlayer(GetTriggerUnit()));
  var lv_aZk = f_aIn();
  var lv_aZl = GetUnitAbilityLevel(GetTriggerUnit(), "A048");
  gv_ach = GetUnitX(GetTriggerUnit());
  gv_aci = GetUnitY(GetTriggerUnit());
  gv_acg = GetOwningPlayer(GetTriggerUnit());
  gv_acj = 300 * f_azo(GetTriggerUnit());
  GroupEnumUnitsInRange(
    lv_aZk,
    gv_ach,
    gv_aci,
    400 * f_azo(GetTriggerUnit()),
    Condition(f_aLM)
  );
  gv_alw =
    gv_ald[999 + lv_aZl] +
    (((gv_ald[lv_aZj] + GetHeroInt(GetTriggerUnit(), true)) * (lv_aZl + 4)) /
      5) *
      f_azo(GetTriggerUnit());
  if (lv_aZl == 3) {
    gv_alw = gv_alw * f_azm(GetTriggerUnit());
  }
  ForGroup(lv_aZk, f_aZh);
  f_aIo(lv_aZk);
  lv_aZk = null;
}
function f_aZm() {
  var lv_aZn = GetExpiredTimer();
  var lv_aZo = LoadInteger(gv_abL, 0, GetHandleId(lv_aZn));
  var lv_aZp = Atan2(
    gv_arO[lv_aZo] - GetUnitY(gv_arQ[lv_aZo]),
    gv_arN[lv_aZo] - GetUnitX(gv_arQ[lv_aZo])
  );
  SetUnitX(
    gv_arQ[lv_aZo],
    GetUnitX(gv_arQ[lv_aZo]) + Cos(lv_aZp) * gv_arP[lv_aZo]
  );
  SetUnitY(
    gv_arQ[lv_aZo],
    GetUnitY(gv_arQ[lv_aZo]) + Sin(lv_aZp) * gv_arP[lv_aZo]
  );
  if (
    IsUnitInRangeXY(
      gv_arQ[lv_aZo],
      gv_arN[lv_aZo],
      gv_arO[lv_aZo],
      gv_arP[lv_aZo]
    ) ||
    f_aEZ(lv_aZo, lv_aZp)
  ) {
    f_aFe(lv_aZo);
    GroupRemoveUnit(gv_ack, gv_arQ[lv_aZo]);
    f_aIM(lv_aZn);
  }
  lv_aZn = null;
}
function f_aZq(lv_aZr, lv_aZs, lv_aZt) {
  gv_arN[lv_aZr] = lv_aZs;
  gv_arO[lv_aZr] = lv_aZt;
}
function f_aZu(lv_aZv, lv_aZw, lv_aZx, lv_aZy) {
  var lv_aZz = f_aFc();
  var lv_aZA = f_aIL();
  gv_arQ[lv_aZz] = lv_aZv;
  gv_arN[lv_aZz] = lv_aZw;
  gv_arO[lv_aZz] = lv_aZx;
  gv_arP[lv_aZz] = lv_aZy * 0.025;
  GroupAddUnit(gv_ack, gv_arQ[lv_aZz]);
  SaveInteger(gv_abL, 0, GetHandleId(lv_aZA), lv_aZz);
  TimerStart(lv_aZA, 0.025, true, f_aZm);
  lv_aZA = null;
  return lv_aZz;
}
function f_aZB() {
  var lv_aZC;
  var lv_aZD;
  var lv_aZE = GetUnitAbilityLevel(GetTriggerUnit(), "A041");
  if (GetSpellAbilityId() == "A041") {
    lv_aZD = GetPlayerId(GetOwningPlayer(GetTriggerUnit()));
    lv_aZC = f_aZu(
      CreateUnit(
        GetOwningPlayer(GetTriggerUnit()),
        "echm",
        GetUnitX(GetTriggerUnit()),
        GetUnitY(GetTriggerUnit()),
        GetUnitFacing(GetTriggerUnit())
      ),
      GetUnitX(GetSpellTargetUnit()),
      GetUnitY(GetSpellTargetUnit()),
      667
    );
    gv_arR[lv_aZC] =
      (gv_ald[1005 + lv_aZE] +
        ((GetHeroInt(GetTriggerUnit(), true) + gv_ald[lv_aZD]) * (lv_aZE + 2)) /
          3) *
      f_azm(GetTriggerUnit());
    gv_arS[lv_aZC] = GetSpellTargetUnit();
  }
  return false;
}
function f_aZF() {
  var lv_aZG = GetExpiredTimer();
  var lv_aZH = LoadInteger(gv_abL, 0, GetHandleId(lv_aZG));
  if (
    GetWidgetLife(gv_arW[lv_aZH]) < 0.406 ||
    GetUnitAbilityLevel(gv_arW[lv_aZH], "B00S") < 1
  ) {
    GroupRemoveUnit(gv_alT, gv_arW[lv_aZH]);
    UnitRemoveAbility(gv_arW[lv_aZH], "A05W");
    UnitRemoveAbility(gv_arW[lv_aZH], "A062");
    UnitRemoveAbility(gv_arW[lv_aZH], "A05W");
    RemoveSavedInteger(gv_abH, gv_alU, GetHandleId(gv_arW[lv_aZH]));
    f_aEX(lv_aZH);
    f_aIM(lv_aZG);
  }
  lv_aZG = null;
}
function f_aZI() {
  return GetSpellAbilityId() == "A064";
}
function f_aZJ() {
  var lv_aZK = GetPlayerId(GetOwningPlayer(GetTriggerUnit()));
  var lv_aZL;
  var lv_aZM;
  var lv_aZN = GetUnitAbilityLevel(GetTriggerUnit(), "A064");
  if (!IsUnitInGroup(GetTriggerUnit(), gv_alT)) {
    lv_aZL = f_aIL();
    lv_aZM = f_aEV();
    gv_arW[lv_aZM] = GetTriggerUnit();
    GroupAddUnit(gv_alT, gv_arW[lv_aZM]);
    UnitAddAbility(gv_arW[lv_aZM], "A05W");
    UnitAddAbility(gv_arW[lv_aZM], "A062");
    SetUnitAbilityLevel(
      gv_arW[lv_aZM],
      "A05W",
      lv_aZN + IMinBJ(f_ays(gv_arW[lv_aZM]), lv_aZN)
    );
    gv_arX[lv_aZM] =
      (gv_ald[1125 + lv_aZN] + gv_ald[lv_aZK] / 10) * f_azm(gv_arW[lv_aZM]);
    gv_arY[lv_aZM] = 1 - 1 / f_azm(gv_arW[lv_aZM]);
    SaveInteger(gv_abH, gv_alU, GetHandleId(gv_arW[lv_aZM]), lv_aZM);
    SaveInteger(gv_abL, 0, GetHandleId(lv_aZL), lv_aZM);
    TimerStart(lv_aZL, 0.3, true, f_aZF);
  } else {
    lv_aZN = lv_aZN + IMinBJ(f_ays(gv_arW[lv_aZM]), lv_aZN);
    lv_aZM = LoadInteger(gv_abH, gv_alU, GetHandleId(GetTriggerUnit()));
    if (lv_aZN > GetUnitAbilityLevel(gv_arW[lv_aZM], "A05W")) {
      SetUnitAbilityLevel(gv_arW[lv_aZM], "A05W", lv_aZN);
      gv_arX[lv_aZM] =
        (gv_ald[1125 + lv_aZN] + gv_ald[lv_aZK] / 10) * f_azm(gv_arW[lv_aZM]);
      gv_arY[lv_aZM] = 1 - 1 / f_azm(gv_arW[lv_aZM]);
    }
  }
  lv_aZL = null;
}
function f_aZO() {
  var lv_aZP = LoadInteger(gv_abH, gv_alU, GetHandleId(GetTriggerUnit()));
  var lv_aZQ;
  if (
    GetUnitAbilityLevel(GetTriggerUnit(), "B00S") > 0 &&
    IsUnitType(GetEventDamageSource(), UNIT_TYPE_ANCIENT) == false &&
    IsUnitType(GetEventDamageSource(), UNIT_TYPE_STRUCTURE) == false
  ) {
    DestroyEffect(
      AddSpecialEffectTarget(
        "Abilities\\Weapons\\DemolisherFireMissile\\DemolisherFireMissile.mdl",
        GetEventDamageSource(),
        "origin"
      )
    );
    if (
      IsUnitInGroup(GetEventDamageSource(), gv_alW) &&
      GetUnitAbilityLevel(GetEventDamageSource(), "B00K") > 0
    ) {
      lv_aZQ = LoadInteger(gv_abH, gv_alV, GetHandleId(GetEventDamageSource()));
      UnitDamageTarget(
        gv_asd[lv_aZQ],
        GetEventDamageSource(),
        gv_arX[lv_aZP] *
          (1 + gv_asf.getInt(lv_aZQ) * fdrop * f_azm(GetTriggerUnit())),
        false,
        false,
        ATTACK_TYPE_HERO,
        DAMAGE_TYPE_NORMAL,
        null
      );
    } else {
      UnitDamageTarget(
        f_aIV(
          GetOwningPlayer(gv_arW[lv_aZP]),
          GetUnitX(gv_arW[lv_aZP]),
          GetUnitY(gv_arW[lv_aZP]),
          1
        ),
        GetEventDamageSource(),
        gv_arX[lv_aZP],
        false,
        false,
        ATTACK_TYPE_HERO,
        DAMAGE_TYPE_NORMAL,
        null
      );
    }
    if (GetWidgetLife(GetTriggerUnit()) > 0.5) {
      SetWidgetLife(
        GetTriggerUnit(),
        GetWidgetLife(GetTriggerUnit()) + GetEventDamage() * gv_arY[lv_aZP]
      );
    }
  }
  return false;
}
function f_aZR() {
  var lv_aZS = LoadInteger(gv_abL, 0, GetHandleId(GetExpiredTimer()));
  if (
    GetWidgetLife(gv_asc[lv_aZS]) > 0.405 &&
    GetUnitAbilityLevel(gv_asc[lv_aZS], "B00K") > 0
  ) {
    UnitDamageTarget(
      gv_asd[lv_aZS],
      gv_asc[lv_aZS],
      gv_ase[lv_aZS] * f_azP(gv_asd[lv_aZS]),
      false,
      false,
      ATTACK_TYPE_NORMAL,
      DAMAGE_TYPE_UNIVERSAL,
      null
    );
  } else {
    f_aIP(gv_asd[lv_aZS]);
    GroupRemoveUnit(gv_alW, gv_asc[lv_aZS]);
    f_aET(lv_aZS);
    f_aIM(GetExpiredTimer());
  }
}
function f_aZT() {
  return GetSpellAbilityId() == "A065";
}
function f_aZU() {
  var lv_aZV;
  var lv_aZW;
  var lv_aZX = GetPlayerId(GetOwningPlayer(GetTriggerUnit()));
  var lv_aZY;
  var lv_aZZ = f_azm(GetTriggerUnit());
  var lv_baa = GetUnitAbilityLevel(GetTriggerUnit(), "A065");
  if (!IsUnitInGroup(GetSpellTargetUnit(), gv_alW)) {
    lv_aZV = f_aER();
    lv_aZW = f_aIL();
    gv_asf[lv_aZV] = lv_baa;
    lv_aZY = (gv_ald[1149 + gv_asf.getInt(lv_aZV)] + gv_ald[lv_aZX]) * lv_aZZ;
    gv_ase[lv_aZV] =
      ((gv_asf.getInt(lv_aZV) * 50 + gv_ald[lv_aZX]) / 7) * 0.2 * lv_aZZ;
    gv_asc[lv_aZV] = GetSpellTargetUnit();
    gv_asd[lv_aZV] = f_aIV(
      GetOwningPlayer(GetTriggerUnit()),
      GetUnitX(gv_asc[lv_aZV]),
      GetUnitY(gv_asc[lv_aZV]),
      0.0
    );
    SaveInteger(gv_abH, gv_alV, GetHandleId(gv_asc[lv_aZV]), lv_aZV);
    GroupAddUnit(gv_alW, gv_asc[lv_aZV]);
    SaveInteger(gv_abL, 0, GetHandleId(lv_aZW), lv_aZV);
    TimerStart(lv_aZW, 0.2, true, f_aZR);
  } else {
    lv_aZV = LoadInteger(gv_abH, gv_alV, GetHandleId(GetSpellTargetUnit()));
    lv_aZY = (gv_ald[1149 + lv_baa] + gv_ald[lv_aZX]) * lv_aZZ;
    gv_asf[lv_aZV] = lv_baa;
    gv_ase[lv_aZV] =
      ((gv_asf.getInt(lv_aZV) * 50 + gv_ald[lv_aZX]) / 7) * 0.2 * lv_aZZ;
  }
  if (
    IsUnitInGroup(gv_asc[lv_aZV], gv_alW) &&
    GetUnitAbilityLevel(gv_asc[lv_aZV], "B00K") > 0
  ) {
    lv_aZY = lv_aZY * (1 + gv_asf.getInt(lv_aZV) * fdrop * lv_aZZ);
    gv_ase[lv_aZV] = gv_ase[lv_aZV] * (1 + gv_asf.getInt(lv_aZV) * fdrop);
  }
  UnitDamageTarget(
    gv_asd[lv_aZV],
    gv_asc[lv_aZV],
    lv_aZY * f_azP(GetTriggerUnit()),
    false,
    false,
    ATTACK_TYPE_NORMAL,
    DAMAGE_TYPE_UNIVERSAL,
    null
  );
  lv_aZW = null;
}
function f_bab() {
  var lv_bac = LoadInteger(gv_abL, 0, GetHandleId(GetExpiredTimer()));
  gv_asm[lv_bac] = gv_asm[lv_bac] - 0.2;
  if (gv_asm[lv_bac] > 0.2 && GetWidgetLife(gv_asj[lv_bac]) > 0.405) {
    UnitDamageTarget(
      gv_ask[lv_bac],
      gv_asj[lv_bac],
      gv_asl[lv_bac] * f_azP(gv_ask[lv_bac]),
      false,
      false,
      ATTACK_TYPE_NORMAL,
      DAMAGE_TYPE_UNIVERSAL,
      null
    );
  } else {
    DestroyEffect(gv_asn[lv_bac]);
    RemoveSavedInteger(gv_abH, gv_alY, GetHandleId(gv_asj[lv_bac]));
    GroupRemoveUnit(gv_alX, gv_asj[lv_bac]);
    UnitRemoveAbility(gv_asj[lv_bac], "A06B");
    f_aIP(gv_ask[lv_bac]);
    f_aEP(lv_bac);
    f_aIM(GetExpiredTimer());
  }
}
function f_bad() {
  var lv_bae;
  var lv_baf;
  var lv_bag;
  if (!IsUnitInGroup(GetEnumUnit(), gv_alX)) {
    lv_bae = f_aEN();
    lv_baf = f_aIL();
    gv_asj[lv_bae] = GetEnumUnit();
    gv_ask[lv_bae] = f_aIV(
      GetOwningPlayer(GetTriggerUnit()),
      GetUnitX(gv_asj[lv_bae]),
      GetUnitY(gv_asj[lv_bae]),
      0.0
    );
    gv_asl[lv_bae] = gv_alw;
    gv_asm[lv_bae] = 8;
    gv_asn[lv_bae] = AddSpecialEffectTarget(
      "Environment\\SmallBuildingFire\\SmallBuildingFire2.mdl",
      gv_asj[lv_bae],
      "head"
    );
    SaveInteger(gv_abH, gv_alY, GetHandleId(gv_asj[lv_bae]), lv_bae);
    if (
      IsUnitInGroup(gv_asj[lv_bae], gv_alW) &&
      GetUnitAbilityLevel(gv_asj[lv_bae], "B00K") > 0
    ) {
      lv_bag = LoadInteger(gv_abH, gv_alV, GetHandleId(gv_asj[lv_bae]));
      gv_asl[lv_bae] = gv_asl[lv_bae] * (1 + gv_asf.getInt(lv_bag) * fdrop);
    }
    UnitAddAbility(gv_asj[lv_bae], "A06B");
    SetUnitAbilityLevel(gv_asj[lv_bae], "A06B", gv_alx);
    GroupAddUnit(gv_alX, gv_asj[lv_bae]);
    SaveInteger(gv_abL, 0, GetHandleId(lv_baf), lv_bae);
    UnitDamageTarget(
      gv_ask[lv_bae],
      gv_asj[lv_bae],
      gv_asl[lv_bae] * 20 * f_azP(gv_ask[lv_bae]),
      false,
      false,
      ATTACK_TYPE_NORMAL,
      DAMAGE_TYPE_UNIVERSAL,
      null
    );
    TimerStart(lv_baf, 0.2, true, f_bab);
  } else {
    lv_bae = LoadInteger(gv_abH, gv_alY, GetHandleId(GetEnumUnit()));
    gv_asm[lv_bae] = 8;
  }
  lv_baf = null;
}
function f_bah() {
  return GetSpellAbilityId() == "A068";
}
function f_bai() {
  var lv_baj = f_aIn();
  var lv_bak = GetSpellTargetLoc();
  var lv_bal = Atan2(
    GetLocationY(lv_bak) - GetUnitY(GetTriggerUnit()),
    GetLocationX(lv_bak) - GetUnitX(GetTriggerUnit())
  );
  var lv_bam = Cos(lv_bal) * 125;
  var lv_ban = Sin(lv_bal) * 125;
  var lv_bao = GetUnitX(GetTriggerUnit()) + Cos(lv_bal) * 62.5;
  var lv_bap = GetUnitY(GetTriggerUnit()) + Sin(lv_bal) * 62.5;
  var lv_baq = 62.5;
  var lv_bar = GetPlayerId(GetOwningPlayer(GetTriggerUnit()));
  gv_alx = GetUnitAbilityLevel(GetTriggerUnit(), "A068");
  gv_alw =
    ((gv_ald[1137 + gv_alx] + (gv_ald[lv_bar] * (gv_alx + 2)) / 3) / 10) *
    0.2 *
    f_azm(GetTriggerUnit());
  do {
    if (lv_baq > 1000) {
      break;
    }
    gv_ach = lv_bao;
    gv_aci = lv_bap;
    gv_acj = 175 * f_azo(GetTriggerUnit());
    gv_acg = GetOwningPlayer(GetTriggerUnit());
    GroupEnumUnitsInRange(
      lv_baj,
      gv_ach,
      gv_aci,
      300 * f_azo(GetTriggerUnit()),
      Condition(f_aLM)
    );
    f_aLz(AddSpecialEffect("MDX\\MagmaBurst.mdx", lv_bao, lv_bap), 1);
    ForGroup(lv_baj, f_bad);
    lv_bao = lv_bao + lv_bam;
    lv_bap = lv_bap + lv_ban;
    lv_baq = lv_baq + 125;
  } while (true);
  RemoveLocation(lv_bak);
  f_aIo(lv_baj);
  lv_bak = null;
  lv_baj = null;
}
function f_bas() {
  return GetSpellAbilityId() == "A067";
}
function f_bat() {
  var lv_bau;
  var lv_bav = f_aIn();
  var lv_baw = LoadInteger(gv_abL, 0, GetHandleId(GetExpiredTimer()));
  var lv_bax = gv_ale[100 + lv_baw];
  var lv_bay = gv_ale[108 + lv_baw];
  var lv_baz = GetUnitAbilityLevel(lv_bax, "A067");
  var lv_baA =
    (gv_ald[1131 + lv_baz] + (gv_ald[lv_baw] * (2 + lv_baz)) / 3) *
    f_azm(lv_bax);
  var lv_baB = f_aIV(
    GetOwningPlayer(lv_bax),
    GetUnitX(lv_bay),
    GetUnitY(lv_bay),
    2
  );
  if (
    IsUnitInGroup(lv_bay, gv_alW) &&
    GetUnitAbilityLevel(lv_bay, "B00K") > 0
  ) {
    lv_bau = LoadInteger(gv_abH, gv_alV, GetHandleId(lv_bay));
    lv_baA = lv_baA * (1 + gv_asf.getInt(lv_bau) * fdrop * f_azo(lv_bax));
  }
  f_aJc(lv_baB, "A061", 0);
  IssueTargetOrderById(lv_baB, 852095, lv_bay);
  UnitDamageTarget(
    lv_baB,
    lv_bay,
    lv_baA * 0.8 * f_azP(lv_bax),
    false,
    false,
    ATTACK_TYPE_NORMAL,
    DAMAGE_TYPE_UNIVERSAL,
    null
  );
  lv_baA = lv_baA * 0.6;
  gv_ach = GetUnitX(lv_bay);
  gv_aci = GetUnitY(lv_bay);
  gv_acj = 260 * f_azo(lv_bax);
  gv_acg = GetOwningPlayer(lv_bax);
  GroupEnumUnitsInRange(
    lv_bav,
    gv_ach,
    gv_aci,
    350 * f_azo(lv_bax),
    Condition(f_aLM)
  );
  do {
    lv_bay = FirstOfGroup(lv_bav);
    if (lv_bay == null) {
      break;
    }
    UnitDamageTarget(
      lv_baB,
      lv_bay,
      lv_baA * f_azP(lv_bax),
      false,
      false,
      ATTACK_TYPE_MAGIC,
      DAMAGE_TYPE_MAGIC,
      null
    );
    GroupRemoveUnit(lv_bav, lv_bay);
  } while (true);
  f_aIo(lv_bav);
  f_aIM(GetExpiredTimer());
  lv_bax = null;
  lv_baB = null;
  lv_bav = null;
  lv_bay = null;
}
function f_baC() {
  var lv_baD = f_aIL();
  var lv_baE = GetPlayerId(GetOwningPlayer(GetTriggerUnit()));
  gv_ale[100 + lv_baE] = GetTriggerUnit();
  gv_ale[108 + lv_baE] = GetSpellTargetUnit();
  DestroyEffect(
    AddSpecialEffectTarget(
      "MDX\\MeteorAttack.mdx",
      gv_ale[108 + lv_baE],
      "origin"
    )
  );
  SaveInteger(gv_abL, 0, GetHandleId(lv_baD), lv_baE);
  TimerStart(lv_baD, 0.4, false, f_bat);
  lv_baD = null;
}
function f_baF() {
  DestroyEffect(
    AddSpecialEffectTarget(
      "Abilities\\Spells\\Other\\Incinerate\\FireLordDeathExplode.mdl",
      GetEnumUnit(),
      "head"
    )
  );
  UnitDamageTarget(
    f_aIV(gv_acg, gv_ach, gv_aci, 1),
    GetEnumUnit(),
    gv_alw,
    false,
    false,
    ATTACK_TYPE_NORMAL,
    DAMAGE_TYPE_UNIVERSAL,
    null
  );
}
function f_baG() {
  var lv_baH = LoadInteger(gv_abL, 0, GetHandleId(GetExpiredTimer()));
  var lv_baI = f_aIn();
  gv_ach = GetUnitX(gv_asr[lv_baH]);
  gv_aci = GetUnitY(gv_asr[lv_baH]);
  gv_acj = 600 * f_azo(gv_asr[lv_baH]);
  gv_acg = GetOwningPlayer(gv_asr[lv_baH]);
  GroupEnumUnitsInRange(
    lv_baI,
    gv_ach,
    gv_aci,
    RMinBJ(700 * f_azo(gv_asr[lv_baH]), 980),
    Condition(f_aLM)
  );
  gv_alw = gv_ass[lv_baH] * f_azP(gv_asr[lv_baH]);
  ForGroup(lv_baI, f_baF);
  if (
    GetWidgetLife(gv_asr[lv_baH]) < 0.406 ||
    GetUnitCurrentOrder(gv_asr[lv_baH]) != 852184
  ) {
    GroupRemoveUnit(gv_alZ, gv_asr[lv_baH]);
    f_aEL(lv_baH);
    f_aIM(GetExpiredTimer());
  }
  f_aIo(lv_baI);
  lv_baI = null;
}
function f_baJ() {
  return (
    GetSpellAbilityId() == "A066" && !IsUnitInGroup(GetTriggerUnit(), gv_alZ)
  );
}
function f_baK() {
  var lv_baL = f_aIL();
  var lv_baM = f_aEJ();
  var lv_baN = GetPlayerId(GetOwningPlayer(GetTriggerUnit()));
  var lv_baO = GetUnitAbilityLevel(gv_asr[lv_baM], "A066");
  gv_asr[lv_baM] = GetTriggerUnit();
  gv_ass[lv_baM] =
    gv_ald[1143 + lv_baO] +
    (gv_ald[lv_baN] / (10 - lv_baO)) * f_azm(gv_asr[lv_baM]);
  GroupAddUnit(gv_alZ, gv_asr[lv_baM]);
  SaveInteger(gv_abL, 0, GetHandleId(lv_baL), lv_baM);
  TimerStart(lv_baL, 1, true, f_baG);
  lv_baL = null;
}
function f_baP() {
  var lv_baQ = GetExpiredTimer();
  var lv_baR = LoadInteger(gv_abL, 0, GetHandleId(lv_baQ));
  if (
    GetWidgetLife(gv_asw[lv_baR]) < 0.406 ||
    GetUnitAbilityLevel(gv_asw[lv_baR], "B00Y") < 1
  ) {
    GroupRemoveUnit(gv_ama, gv_asw[lv_baR]);
    UnitRemoveAbility(gv_asw[lv_baR], "A06H");
    UnitRemoveAbility(gv_asw[lv_baR], "A062");
    UnitRemoveAbility(gv_asw[lv_baR], "A06H");
    f_aIP(gv_asx[lv_baR]);
    RemoveSavedInteger(gv_abH, gv_amb, GetHandleId(gv_asw[lv_baR]));
    f_aEH(lv_baR);
    f_aIM(lv_baQ);
  }
  lv_baQ = null;
}
function f_baS() {
  var lv_baT;
  if (
    GetUnitAbilityLevel(GetTriggerUnit(), "B00Y") > 0 &&
    IsUnitType(GetEventDamageSource(), UNIT_TYPE_ANCIENT) == false &&
    IsUnitType(GetEventDamageSource(), UNIT_TYPE_STRUCTURE) == false
  ) {
    lv_baT = LoadInteger(gv_abH, gv_amb, GetHandleId(GetTriggerUnit()));
    IssueTargetOrderById(gv_asx[lv_baT], 852226, GetEventDamageSource());
  }
  return false;
}
function f_baU() {
  return GetSpellAbilityId() == "A06L";
}
function f_baV() {
  var lv_baW;
  var lv_baX;
  var lv_baY = GetUnitAbilityLevel(GetTriggerUnit(), "A06L");
  if (!IsUnitInGroup(GetTriggerUnit(), gv_ama)) {
    lv_baW = f_aIL();
    lv_baX = f_aEF();
    gv_asw[lv_baX] = GetTriggerUnit();
    GroupAddUnit(gv_ama, gv_asw[lv_baX]);
    UnitAddAbility(gv_asw[lv_baX], "A06H");
    UnitAddAbility(gv_asw[lv_baX], "A062");
    SetUnitAbilityLevel(
      gv_asw[lv_baX],
      "A06H",
      lv_baY + IMinBJ(f_ays(gv_asw[lv_baX]), lv_baY)
    );
    gv_asx[lv_baX] = f_aIV(
      GetOwningPlayer(gv_asw[lv_baX]),
      GetUnitX(gv_asw[lv_baX]),
      GetUnitY(gv_asw[lv_baX]),
      0.0
    );
    f_aJc(gv_asx[lv_baX], "A06J", 0);
    SaveInteger(gv_abH, gv_amb, GetHandleId(gv_asw[lv_baX]), lv_baX);
    SaveInteger(gv_abL, 0, GetHandleId(lv_baW), lv_baX);
    TimerStart(lv_baW, 0.3, true, f_baP);
  } else {
    lv_baX = LoadInteger(gv_abH, gv_amb, GetHandleId(GetTriggerUnit()));
    lv_baY = lv_baY + IMinBJ(f_ays(gv_asw[lv_baX]), lv_baY);
    if (lv_baY > GetUnitAbilityLevel(gv_asw[lv_baX], "A06H")) {
      SetUnitAbilityLevel(gv_asw[lv_baX], "A06H", lv_baY);
    }
  }
  lv_baW = null;
}
function f_baZ() {
  var lv_bba = GetExpiredTimer();
  var lv_bbb = LoadInteger(gv_abL, 0, GetHandleId(lv_bba));
  var lv_bbc = Atan2(
    gv_asC[lv_bbb] - GetUnitY(gv_asE[lv_bbb]),
    gv_asB[lv_bbb] - GetUnitX(gv_asE[lv_bbb])
  );
  SetUnitX(
    gv_asE[lv_bbb],
    GetUnitX(gv_asE[lv_bbb]) + Cos(lv_bbc) * gv_asD[lv_bbb]
  );
  SetUnitY(
    gv_asE[lv_bbb],
    GetUnitY(gv_asE[lv_bbb]) + Sin(lv_bbc) * gv_asD[lv_bbb]
  );
  if (
    IsUnitInRangeXY(
      gv_asE[lv_bbb],
      gv_asB[lv_bbb],
      gv_asC[lv_bbb],
      gv_asD[lv_bbb]
    ) ||
    f_aEy(lv_bbb, lv_bbc)
  ) {
    f_aED(lv_bbb);
    GroupRemoveUnit(gv_ack, gv_asE[lv_bbb]);
    f_aIM(lv_bba);
  }
  lv_bba = null;
}
function f_bbd(lv_bbe, lv_bbf, lv_bbg, lv_bbh) {
  var lv_bbi = f_aEB();
  var lv_bbj = f_aIL();
  gv_asE[lv_bbi] = lv_bbe;
  gv_asB[lv_bbi] = lv_bbf;
  gv_asC[lv_bbi] = lv_bbg;
  gv_asD[lv_bbi] = lv_bbh * 0.025;
  GroupAddUnit(gv_ack, gv_asE[lv_bbi]);
  SaveInteger(gv_abL, 0, GetHandleId(lv_bbj), lv_bbi);
  TimerStart(lv_bbj, 0.025, true, f_baZ);
  lv_bbj = null;
  return lv_bbi;
}
function f_bbk() {
  return GetSpellAbilityId() == "A06M";
}
function f_bbl() {
  var lv_bbm = LoadInteger(gv_abL, 0, GetHandleId(GetExpiredTimer()));
  var lv_bbn = f_aIn();
  var lv_bbo;
  var lv_bbp = f_aIV(
    GetOwningPlayer(gv_asJ[lv_bbm]),
    GetLocationX(gv_asK[lv_bbm]),
    GetLocationY(gv_asK[lv_bbm]),
    2
  );
  var lv_bbq =
    (1 + 0.24 * f_azm(gv_asJ[lv_bbm])) * SquareRoot(f_azo(gv_asJ[lv_bbm]));
  var gv_aaj;
  gv_acg = GetOwningPlayer(gv_asJ[lv_bbm]);
  gv_ach = GetLocationX(gv_asK[lv_bbm]);
  gv_aci = GetLocationY(gv_asK[lv_bbm]);
  gv_acj = 600;
  GroupEnumUnitsInRange(lv_bbn, gv_ach, gv_aci, 700, Condition(f_aLM));
  UnitApplyTimedLife(
    CreateUnitAtLoc(
      Player(PLAYER_NEUTRAL_PASSIVE),
      "nthr",
      gv_asK[lv_bbm],
      0.0
    ),
    "BTLF",
    1
  );
  do {
    lv_bbo = FirstOfGroup(lv_bbn);
    if (lv_bbo == null) {
      break;
    }
    gv_aaj = gv_asL[lv_bbm];
    if (GetUnitAbilityLevel(lv_bbo, "Bfro") > 0) {
      gv_aaj = gv_aaj * lv_bbq;
    }
    if (GetUnitAbilityLevel(lv_bbo, "B010") > 0) {
      gv_aaj = gv_aaj * lv_bbq;
    }
    UnitDamageTarget(
      lv_bbp,
      lv_bbo,
      gv_aaj,
      false,
      false,
      ATTACK_TYPE_NORMAL,
      DAMAGE_TYPE_UNIVERSAL,
      null
    );
    GroupRemoveUnit(lv_bbn, lv_bbo);
  } while (true);
  RemoveLocation(gv_asK[lv_bbm]);
  f_aEw(lv_bbm);
  f_aIM(GetExpiredTimer());
  f_aIo(lv_bbn);
  lv_bbn = null;
  lv_bbo = null;
  lv_bbp = null;
}
function f_bbr() {
  var lv_bbs;
  var lv_bbt = f_aEu();
  var lv_bbu = 0;
  var lv_bbv = 0.0;
  var lv_bbw = 15.65 * bj_DEGTORAD;
  var lv_bbx = GetPlayerId(GetOwningPlayer(GetTriggerUnit()));
  var lv_bby = f_aIL();
  var lv_bbz = GetUnitAbilityLevel(gv_asJ[lv_bbt], "A06M");
  gv_asJ[lv_bbt] = GetTriggerUnit();
  gv_asK[lv_bbt] = GetSpellTargetLoc();
  gv_asL[lv_bbt] =
    (gv_ald[1161 + lv_bbz] + (gv_ald[lv_bbx] * (3 + lv_bbz)) / 4) *
    f_azm(gv_asJ[lv_bbt]);
  if (lv_bbz == 3) {
    gv_asL[lv_bbt] = gv_asL[lv_bbt] * f_azo(gv_asJ[lv_bbt]);
  }
  do {
    if (lv_bbu + 1 > 23) {
      break;
    }
    lv_bbs = f_bbd(
      CreateUnit(
        GetOwningPlayer(gv_asJ[lv_bbt]),
        "enec",
        GetLocationX(gv_asK[lv_bbt]) + 600 * Cos(lv_bbv),
        GetLocationY(gv_asK[lv_bbt]) + 600 * Sin(lv_bbv),
        lv_bbv * bj_RADTODEG
      ),
      GetLocationX(gv_asK[lv_bbt]),
      GetLocationY(gv_asK[lv_bbt]),
      375
    );
    gv_asF[lv_bbs] = f_aIV(
      GetOwningPlayer(gv_asJ[lv_bbt]),
      GetUnitX(gv_asE[lv_bbs]),
      GetUnitY(gv_asE[lv_bbs]),
      0.0
    );
    f_aJc(gv_asF[lv_bbs], "A05G", 0);
    lv_bbv = lv_bbv + lv_bbw;
    lv_bbu = lv_bbu + 1;
  } while (true);
  SaveInteger(gv_abL, 0, GetHandleId(lv_bby), lv_bbt);
  TimerStart(lv_bby, 1.5, false, f_bbl);
  lv_bby = null;
}
function f_bbA() {
  var lv_bbB = f_aIV(gv_acg, gv_ach, gv_aci, 2);
  f_aJc(lv_bbB, "A06J", 0);
  IssueTargetOrderById(lv_bbB, 852226, GetEnumUnit());
  if (GetUnitAbilityLevel(GetEnumUnit(), "A04Y") > 0) {
    UnitDamageTarget(
      lv_bbB,
      GetEnumUnit(),
      gv_alw * 1.4 * f_azo(lv_bbB),
      false,
      false,
      ATTACK_TYPE_NORMAL,
      DAMAGE_TYPE_UNIVERSAL,
      null
    );
  } else {
    UnitDamageTarget(
      lv_bbB,
      GetEnumUnit(),
      gv_alw,
      false,
      false,
      ATTACK_TYPE_NORMAL,
      DAMAGE_TYPE_UNIVERSAL,
      null
    );
  }
  lv_bbB = null;
}
function f_bbC() {
  return GetSpellAbilityId() == "A06P";
}
function f_bbD() {
  var lv_bbE = GetSpellTargetLoc();
  var lv_bbF = f_aIn();
  var lv_bbG = GetPlayerId(GetOwningPlayer(GetTriggerUnit()));
  var lv_bbH = GetUnitAbilityLevel(GetTriggerUnit(), "A06P");
  gv_alw =
    (gv_ald[1167 + lv_bbH] + ((lv_bbH + 4) / 5) * gv_ald[lv_bbG]) *
    f_azm(GetTriggerUnit());
  gv_ach = GetLocationX(lv_bbE);
  gv_aci = GetLocationY(lv_bbE);
  gv_acj = 270 * f_azo(GetTriggerUnit());
  gv_acg = GetOwningPlayer(GetTriggerUnit());
  DestroyEffect(AddSpecialEffect("MDX\\WaterMagic.mdx", gv_ach, gv_aci));
  GroupEnumUnitsInRange(lv_bbF, gv_ach, gv_aci, 400, Condition(f_aLM));
  ForGroup(lv_bbF, f_bbA);
  RemoveLocation(lv_bbE);
  f_aIo(lv_bbF);
  lv_bbF = null;
  lv_bbE = null;
}
function f_bbI() {
  var lv_bbJ = f_aIV(gv_acg, gv_ach, gv_aci, 1);
  UnitDamageTarget(
    lv_bbJ,
    GetEnumUnit(),
    gv_alw,
    false,
    false,
    ATTACK_TYPE_NORMAL,
    DAMAGE_TYPE_UNIVERSAL,
    null
  );
  DestroyEffect(
    AddSpecialEffectTarget(
      "Abilities\\Spells\\Human\\Feedback\\ArcaneTowerAttack.mdl",
      GetEnumUnit(),
      "head"
    )
  );
  lv_bbJ = null;
}
function f_bbK(lv_bbL) {
  var lv_bbM;
  var lv_bbN = f_aIn();
  UnitRemoveAbility(gv_asP[lv_bbL], "A04Y");
  UnitRemoveAbility(gv_asP[lv_bbL], "B010");
  DestroyEffect(
    AddSpecialEffect(
      "MDX\\FreezingRing.mdx",
      GetUnitX(gv_asP[lv_bbL]),
      GetUnitY(gv_asP[lv_bbL])
    )
  );
  gv_ach = GetUnitX(gv_asP[lv_bbL]);
  gv_aci = GetUnitY(gv_asP[lv_bbL]);
  gv_acj = 300;
  gv_acg = GetOwningPlayer(gv_asQ[lv_bbL]);
  GroupEnumUnitsInRange(lv_bbN, gv_ach, gv_aci, 400, Condition(f_aLM));
  gv_alw = gv_asR[lv_bbL];
  ForGroup(lv_bbN, f_bbI);
  f_aIo(lv_bbN);
  lv_bbN = null;
}
function f_bbO(lv_bbP) {
  if (lv_bbP == null) {
    return;
  } else {
    if (gv_asO.getInt(lv_bbP) != -1) {
      return;
    }
  }
  f_bbK(lv_bbP);
  gv_asO[lv_bbP] = gv_asM;
  gv_asM = lv_bbP;
}
function f_bbQ() {
  var lv_bbR = LoadInteger(gv_abL, 0, GetHandleId(GetExpiredTimer()));
  if (
    GetWidgetLife(gv_asP[lv_bbR]) < 0.406 ||
    GetUnitAbilityLevel(gv_asP[lv_bbR], "A04Y") > 4
  ) {
    f_bbO(lv_bbR);
    f_aIM(GetExpiredTimer());
  }
  if (GetUnitAbilityLevel(gv_asP[lv_bbR], "A04Y") < 6) {
    SetUnitAbilityLevel(
      gv_asP[lv_bbR],
      "A04Y",
      GetUnitAbilityLevel(gv_asP[lv_bbR], "A04Y") + 1
    );
  }
}
function f_bbS() {
  return GetSpellAbilityId() == "A06Q";
}
function f_bbT() {
  var lv_bbU = f_aIL();
  var lv_bbV = f_aEs();
  var lv_bbW = GetPlayerId(GetOwningPlayer(GetTriggerUnit()));
  gv_asP[lv_bbV] = GetSpellTargetUnit();
  gv_asQ[lv_bbV] = GetTriggerUnit();
  gv_asR[lv_bbV] =
    (gv_ald[1155 + GetUnitAbilityLevel(gv_asQ[lv_bbV], "A06Q")] +
      ((GetUnitAbilityLevel(gv_asQ[lv_bbV], "A06Q") + 2) / 3) *
        gv_ald[lv_bbW]) *
    f_azm(GetTriggerUnit());
  UnitAddAbility(gv_asP[lv_bbV], "A04Y");
  SaveInteger(gv_abL, 0, GetHandleId(lv_bbU), lv_bbV);
  TimerStart(lv_bbU, 1, true, f_bbQ);
  lv_bbU = null;
}
function f_bbX() {
  var lv_bbY = f_aIn();
  var lv_bbZ;
  var lv_bca = LoadInteger(gv_abL, 0, GetHandleId(GetExpiredTimer()));
  var lv_bcb = f_aIV(gv_asY[lv_bca], gv_asV[lv_bca], gv_asW[lv_bca], 2);
  gv_ach = gv_asV[lv_bca];
  gv_aci = gv_asW[lv_bca];
  gv_acj = 225 * f_azo(lv_bcb);
  gv_acg = gv_asY[lv_bca];
  f_aJc(lv_bcb, "A06J", 0);
  GroupEnumUnitsInRange(
    lv_bbY,
    gv_ach,
    gv_aci,
    325 * f_azo(lv_bcb),
    Condition(f_aLM)
  );
  do {
    lv_bbZ = FirstOfGroup(lv_bbY);
    if (lv_bbZ == null) {
      break;
    }
    IssueTargetOrderById(lv_bcb, 852226, lv_bbZ);
    if (GetUnitAbilityLevel(lv_bbZ, "A04Y") > 0) {
      UnitDamageTarget(
        lv_bcb,
        lv_bbZ,
        gv_asX[lv_bca] * 1.3 * f_azm(lv_bcb),
        false,
        false,
        ATTACK_TYPE_NORMAL,
        DAMAGE_TYPE_UNIVERSAL,
        null
      );
    } else {
      UnitDamageTarget(
        lv_bcb,
        lv_bbZ,
        gv_asX[lv_bca],
        false,
        false,
        ATTACK_TYPE_NORMAL,
        DAMAGE_TYPE_UNIVERSAL,
        null
      );
    }
    GroupRemoveUnit(lv_bbY, lv_bbZ);
  } while (true);
  f_aEq(lv_bca);
  f_aIM(GetExpiredTimer());
  f_aIo(lv_bbY);
  lv_bbY = null;
  lv_bbZ = null;
  lv_bcb = null;
}
function f_bcc() {
  var lv_bcd = LoadInteger(gv_abL, 0, GetHandleId(GetExpiredTimer()));
  var lv_bce = f_aEo();
  var lv_bcf = f_aIL();
  gv_asX[lv_bce] = gv_ate[lv_bcd];
  gv_asY[lv_bce] = GetOwningPlayer(gv_atd[lv_bcd]);
  gv_asV[lv_bce] =
    GetLocationX(gv_atc[lv_bcd]) +
    Cos(GetRandomReal(-360, 360) * bj_DEGTORAD) * GetRandomReal(-450, 450);
  gv_asW[lv_bce] =
    GetLocationY(gv_atc[lv_bcd]) +
    Sin(GetRandomReal(-360, 360) * bj_DEGTORAD) * GetRandomReal(-450, 450);
  AddSpecialEffect(
    "MDX\\SnowyBlizzardTarget.mdx",
    gv_asV[lv_bce],
    gv_asW[lv_bce]
  );
  SaveInteger(gv_abL, 0, GetHandleId(lv_bcf), lv_bce);
  TimerStart(lv_bcf, 0.7, false, f_bbX);
  if (
    GetWidgetLife(gv_atd[lv_bcd]) < 0.406 ||
    GetUnitCurrentOrder(gv_atd[lv_bcd]) != 852600
  ) {
    RemoveLocation(gv_atc[lv_bcd]);
    f_aEm(lv_bcd);
    f_aIM(GetExpiredTimer());
  }
  lv_bcf = null;
}
function f_bcg() {
  return GetSpellAbilityId() == "A06K";
}
function f_bch() {
  var lv_bci = f_aIL();
  var lv_bcj = f_aEk();
  var lv_bck = GetPlayerId(GetOwningPlayer(GetTriggerUnit()));
  gv_atc[lv_bcj] = GetSpellTargetLoc();
  gv_atd[lv_bcj] = GetTriggerUnit();
  gv_ate[lv_bcj] =
    gv_ald[1173 + GetUnitAbilityLevel(gv_atd[lv_bcj], "A06K")] +
    (gv_ald[lv_bck] / (15 - GetUnitAbilityLevel(gv_atd[lv_bcj], "A06K"))) *
      f_azm(gv_atd[lv_bcj]);
  SaveInteger(gv_abL, 0, GetHandleId(lv_bci), lv_bcj);
  TimerStart(lv_bci, 0.2, true, f_bcc);
  lv_bci = null;
}
function f_bcl() {
  return GetSpellAbilityId() == "A05D";
}
function f_bcm() {
  var lv_bcn = GetUnitAbilityLevel(GetTriggerUnit(), "A05D") * 30 + 1;
  var lv_bco = GetPlayerId(GetOwningPlayer(GetTriggerUnit()));
  var lv_bcp = GetUnitAbilityLevel(GetTriggerUnit(), "A05D");
  var lv_bcq =
    (gv_ald[1179 + lv_bcp] + (gv_ald[lv_bco] * (2 + lv_bcp)) / 3) *
    f_azm(GetTriggerUnit());
  if (GetWidgetLife(GetTriggerUnit()) > lv_bcn) {
    SetWidgetLife(GetTriggerUnit(), GetWidgetLife(GetTriggerUnit()) - lv_bcn);
    UnitDamageTarget(
      f_aIV(
        GetOwningPlayer(GetTriggerUnit()),
        GetUnitX(GetSpellTargetUnit()),
        GetUnitY(GetSpellTargetUnit()),
        1
      ),
      GetSpellTargetUnit(),
      lv_bcq,
      false,
      false,
      ATTACK_TYPE_NORMAL,
      DAMAGE_TYPE_UNIVERSAL,
      null
    );
    SetWidgetLife(
      GetTriggerUnit(),
      GetWidgetLife(GetTriggerUnit()) +
        lv_bcq * 0.1 * GetUnitAbilityLevel(GetTriggerUnit(), "A05D")
    );
    f_aLz(
      AddSpecialEffectTarget(
        "Abilities\\Spells\\Orc\\Voodoo\\VoodooAuraTarget.mdl",
        GetSpellTargetUnit(),
        "chest"
      ),
      1
    );
    f_aLz(
      AddSpecialEffectTarget(
        "Abilities\\Spells\\Items\\StaffOfSanctuary\\Staff_Sanctuary_Target.mdl",
        GetTriggerUnit(),
        "chest"
      ),
      1
    );
  }
}
function f_bcr() {
  var lv_bcs;
  if (
    GetUnitAbilityLevel(GetTriggerUnit(), "A05D") > 0 &&
    GetIssuedOrderId() == 852119
  ) {
    lv_bcs = GetUnitAbilityLevel(GetTriggerUnit(), "A05D") * 30 + 1;
    if (GetWidgetLife(GetTriggerUnit()) < lv_bcs) {
      PauseUnit(GetTriggerUnit(), true);
      IssueImmediateOrderById(GetTriggerUnit(), 851972);
      PauseUnit(GetTriggerUnit(), false);
      f_aLO(
        GetOwningPlayer(GetTriggerUnit()),
        "You do not have enough life to cast Mojo!"
      );
    }
  }
  return false;
}
function f_bct() {
  var lv_bcu = LoadInteger(gv_abL, 0, GetHandleId(GetExpiredTimer()));
  var lv_bcv = 0.0;
  var lv_bcw;
  var lv_bcx;
  if (
    GetUnitCurrentOrder(gv_atj[lv_bcu]) == 852221 &&
    GetWidgetLife(gv_atj[lv_bcu]) > 0.405
  ) {
    lv_bcw = f_aIn();
    gv_ach = GetUnitX(gv_ati[lv_bcu]);
    gv_aci = GetUnitY(gv_ati[lv_bcu]);
    gv_acj = 600;
    gv_acg = GetOwningPlayer(gv_atj[lv_bcu]);
    GroupEnumUnitsInRange(lv_bcw, gv_ach, gv_aci, 700, Condition(f_aLM));
    do {
      lv_bcx = FirstOfGroup(lv_bcw);
      if (lv_bcx == null) {
        break;
      }
      lv_bcv = lv_bcv + gv_atk[lv_bcu];
      UnitDamageTarget(
        gv_ati[lv_bcu],
        lv_bcx,
        gv_atk[lv_bcu],
        false,
        false,
        ATTACK_TYPE_NORMAL,
        DAMAGE_TYPE_UNIVERSAL,
        null
      );
      IssueTargetOrderById(gv_ati[lv_bcu], 852230, lv_bcx);
      GroupRemoveUnit(lv_bcw, lv_bcx);
    } while (true);
    f_aIo(lv_bcw);
    lv_bcw = f_aIn();
    gv_ach = GetUnitX(gv_ati[lv_bcu]);
    gv_aci = GetUnitY(gv_ati[lv_bcu]);
    gv_acj = 600;
    gv_acg = GetOwningPlayer(gv_atj[lv_bcu]);
    GroupEnumUnitsInRange(lv_bcw, gv_ach, gv_aci, 700, Condition(f_aLN));
    bj_groupCountUnits = 0;
    ForGroup(lv_bcw, CountUnitsInGroupEnum);
    lv_bcv = lv_bcv / bj_groupCountUnits;
    do {
      lv_bcx = FirstOfGroup(lv_bcw);
      if (lv_bcx == null) {
        break;
      }
      SetWidgetLife(lv_bcx, GetWidgetLife(lv_bcx) + lv_bcv);
      f_aLz(
        AddSpecialEffectTarget(
          "Abilities\\Spells\\Items\\ResourceItems\\ResourceEffectTarget.mdl",
          lv_bcx,
          "origin"
        ),
        0.5
      );
      GroupRemoveUnit(lv_bcw, lv_bcx);
    } while (true);
    f_aIo(lv_bcw);
  } else {
    DestroyEffect(
      AddSpecialEffect(
        "Objects\\Spawnmodels\\Human\\HCancelDeath\\HCancelDeath.mdl",
        GetUnitX(gv_ati[lv_bcu]),
        GetUnitY(gv_ati[lv_bcu])
      )
    );
    RemoveUnit(gv_ati[lv_bcu]);
    f_aEi(lv_bcu);
    f_aIM(GetExpiredTimer());
  }
  lv_bcw = null;
  lv_bcx = null;
}
function f_bcy() {
  return GetSpellAbilityId() == "A05C";
}
function f_bcz() {
  var lv_bcA = f_aIL();
  var lv_bcB = f_aEg();
  var lv_bcC = GetPlayerId(GetOwningPlayer(GetTriggerUnit()));
  var lv_bcD = GetSpellTargetLoc();
  gv_atj[lv_bcB] = GetTriggerUnit();
  gv_ati[lv_bcB] = CreateUnit(
    GetOwningPlayer(gv_atj[lv_bcB]),
    "emtg",
    GetLocationX(lv_bcD),
    GetLocationY(lv_bcD),
    0.0
  );
  UnitAddAbility(gv_ati[lv_bcB], "A05F");
  gv_atk[lv_bcB] =
    (gv_ald[1191 + GetUnitAbilityLevel(gv_atj[lv_bcB], "A05C")] +
      gv_ald[lv_bcC] / (10 - GetUnitAbilityLevel(gv_atj[lv_bcB], "A05C"))) *
    f_azm(gv_atj[lv_bcB]);
  SaveInteger(gv_abL, 0, GetHandleId(lv_bcA), lv_bcB);
  TimerStart(lv_bcA, 1, true, f_bct);
  RemoveLocation(lv_bcD);
  lv_bcD = null;
  lv_bcA = null;
}
function f_bcE() {
  var lv_bcF = LoadInteger(gv_abL, 0, GetHandleId(GetExpiredTimer()));
  gv_atp[lv_bcF] = gv_atp[lv_bcF] - 0.25;
  if (GetWidgetLife(gv_ato[lv_bcF]) < 0.406 || gv_atp[lv_bcF] < 0.25) {
    UnitRemoveAbility(gv_ato[lv_bcF], "A06U");
    UnitRemoveAbility(gv_ato[lv_bcF], "B00P");
    f_aEe(lv_bcF);
    f_aIM(GetExpiredTimer());
  }
}
function f_bcG(lv_bcH, lv_bcI) {
  var lv_bcJ = f_aEc();
  var lv_bcK = f_aIL();
  gv_ato[lv_bcJ] = lv_bcH;
  gv_atp[lv_bcJ] = 9;
  UnitAddAbility(gv_ato[lv_bcJ], "A06U");
  SetUnitAbilityLevel(gv_ato[lv_bcJ], "A04B", lv_bcI);
  SaveInteger(gv_abL, 0, GetHandleId(lv_bcK), lv_bcJ);
  TimerStart(lv_bcK, 0.25, true, f_bcE);
  lv_bcK = null;
  return lv_bcJ;
}
function f_bcL() {
  var lv_bcM = GetExpiredTimer();
  var lv_bcN = LoadInteger(gv_abL, 0, GetHandleId(lv_bcM));
  var lv_bcO = Atan2(
    gv_atu[lv_bcN] - GetUnitY(gv_atw[lv_bcN]),
    gv_att[lv_bcN] - GetUnitX(gv_atw[lv_bcN])
  );
  SetUnitX(
    gv_atw[lv_bcN],
    GetUnitX(gv_atw[lv_bcN]) + Cos(lv_bcO) * gv_atv[lv_bcN]
  );
  SetUnitY(
    gv_atw[lv_bcN],
    GetUnitY(gv_atw[lv_bcN]) + Sin(lv_bcO) * gv_atv[lv_bcN]
  );
  if (
    IsUnitInRangeXY(
      gv_atw[lv_bcN],
      gv_att[lv_bcN],
      gv_atu[lv_bcN],
      gv_atv[lv_bcN]
    ) ||
    f_aDV(lv_bcN, lv_bcO)
  ) {
    f_aEa(lv_bcN);
    GroupRemoveUnit(gv_ack, gv_atw[lv_bcN]);
    f_aIM(lv_bcM);
  }
  lv_bcM = null;
}
function f_bcP(lv_bcQ, lv_bcR, lv_bcS, lv_bcT) {
  var lv_bcU = f_aDY();
  var lv_bcV = f_aIL();
  gv_atw[lv_bcU] = lv_bcQ;
  gv_att[lv_bcU] = lv_bcR;
  gv_atu[lv_bcU] = lv_bcS;
  gv_atv[lv_bcU] = lv_bcT * 0.025;
  GroupAddUnit(gv_ack, gv_atw[lv_bcU]);
  SaveInteger(gv_abL, 0, GetHandleId(lv_bcV), lv_bcU);
  TimerStart(lv_bcV, 0.025, true, f_bcL);
  lv_bcV = null;
  return lv_bcU;
}
function f_bcW() {
  var lv_bcX;
  var lv_bcY;
  var lv_bcZ = GetPlayerId(GetOwningPlayer(GetTriggerUnit()));
  if (GetSpellAbilityId() == "A05E" && GetWidgetLife(GetTriggerUnit()) > 75) {
    lv_bcY = GetSpellTargetLoc();
    gv_alw = Atan2(
      GetLocationY(lv_bcY) - GetUnitY(GetTriggerUnit()),
      GetLocationX(lv_bcY) - GetUnitX(GetTriggerUnit())
    );
    lv_bcX = f_bcP(
      CreateUnit(
        GetOwningPlayer(GetTriggerUnit()),
        "ensh",
        GetUnitX(GetTriggerUnit()),
        GetUnitY(GetTriggerUnit()),
        0.0
      ),
      GetUnitX(GetTriggerUnit()) + Cos(gv_alw) * 800,
      GetUnitY(GetTriggerUnit()) + Sin(gv_alw) * 800,
      750
    );
    gv_atx[lv_bcX] = f_aIn();
    gv_aty[lv_bcX] = GetUnitAbilityLevel(GetTriggerUnit(), "A05E");
    gv_atz[lv_bcX] =
      (((GetWidgetLife(GetTriggerUnit()) +
        gv_ald[lv_bcZ] * f_azo(GetTriggerUnit()) * 4) *
        (gv_aty.getInt(lv_bcX) * 5 + 5)) /
        100) *
      f_azm(GetTriggerUnit());
    SetWidgetLife(GetTriggerUnit(), GetWidgetLife(GetTriggerUnit()) - 75);
    RemoveLocation(lv_bcY);
  }
  lv_bcY = null;
  return false;
}
function f_bda() {
  if (
    GetUnitAbilityLevel(GetTriggerUnit(), "A05E") > 0 &&
    GetIssuedOrderId() == 852580
  ) {
    if (GetWidgetLife(GetTriggerUnit()) < 75 + 1) {
      PauseUnit(GetTriggerUnit(), true);
      IssueImmediateOrderById(GetTriggerUnit(), 851972);
      PauseUnit(GetTriggerUnit(), false);
      f_aLO(
        GetOwningPlayer(GetTriggerUnit()),
        "You do not have enough life to cast Wail of the Banshee!"
      );
    }
  }
  return false;
}
function f_bdb() {
  var lv_bdc = 1;
  var lv_bdd;
  var lv_bde = LoadInteger(gv_abL, 0, GetHandleId(GetExpiredTimer()));
  gv_atK[lv_bde] = gv_atK[lv_bde] - 0.75;
  gv_atJ[lv_bde] =
    GetWidgetLife(gv_atL[lv_bde]) *
    gv_ald[1222 + GetUnitAbilityLevel(gv_atL[lv_bde], "A05B")] *
    f_azo(gv_atL[lv_bde]);
  do {
    if (lv_bdc > 3) {
      break;
    }
    if (
      GetWidgetLife(gv_atD[gv_atE.getInt(lv_bde) + lv_bdc]) > 0.405 &&
      gv_atH.getInt(gv_atI.getInt(lv_bde) + lv_bdc) > 0
    ) {
      if (
        !IsUnitInRange(
          gv_atD[gv_atE.getInt(lv_bde) + lv_bdc],
          gv_atL[lv_bde],
          800
        )
      ) {
        SetUnitPosition(
          gv_atD[gv_atE.getInt(lv_bde) + lv_bdc],
          GetUnitX(gv_atL[lv_bde]),
          GetUnitY(gv_atL[lv_bde])
        );
      }
      if (
        GetWidgetLife(gv_atF[gv_atG.getInt(lv_bde) + lv_bdc]) > 0.405 &&
        IsUnitInRange(
          gv_atD[gv_atE.getInt(lv_bde) + lv_bdc],
          gv_atF[gv_atG.getInt(lv_bde) + lv_bdc],
          300
        )
      ) {
        DestroyEffect(
          AddSpecialEffectTarget(
            "Abilities\\Spells\\Undead\\AnimateDead\\AnimateDeadTarget.mdl",
            gv_atF[gv_atG.getInt(lv_bde) + lv_bdc],
            "origin"
          )
        );
        UnitDamageTarget(
          gv_atD[gv_atE.getInt(lv_bde) + lv_bdc],
          gv_atF[gv_atG.getInt(lv_bde) + lv_bdc],
          gv_atJ[lv_bde],
          false,
          false,
          ATTACK_TYPE_NORMAL,
          DAMAGE_TYPE_UNIVERSAL,
          null
        );
        gv_atH[gv_atI.getInt(lv_bde) + lv_bdc] =
          gv_atH.getInt(gv_atI.getInt(lv_bde) + lv_bdc) - 1;
        gv_atF[gv_atG.getInt(lv_bde) + lv_bdc] = null;
      } else {
        if (GetWidgetLife(gv_atF[gv_atG.getInt(lv_bde) + lv_bdc]) < 0.406) {
          gv_atF[gv_atG.getInt(lv_bde) + lv_bdc] = null;
        }
        if (
          !IsUnitInRange(
            gv_atD[gv_atE.getInt(lv_bde) + lv_bdc],
            gv_atF[gv_atG.getInt(lv_bde) + lv_bdc],
            570
          )
        ) {
          gv_atF[gv_atG.getInt(lv_bde) + lv_bdc] = null;
        }
      }
      if (gv_atF[gv_atG.getInt(lv_bde) + lv_bdc] == null) {
        gv_ach = GetUnitX(gv_atD[gv_atE.getInt(lv_bde) + lv_bdc]);
        gv_aci = GetUnitY(gv_atD[gv_atE.getInt(lv_bde) + lv_bdc]);
        gv_acj = 500;
        gv_acg = GetOwningPlayer(gv_atD[gv_atE.getInt(lv_bde) + lv_bdc]);
        lv_bdd = f_aIn();
        GroupEnumUnitsInRange(lv_bdd, gv_ach, gv_aci, 580, Condition(f_aLM));
        bj_groupRandomConsidered = 0;
        bj_groupRandomCurrentPick = null;
        ForGroup(lv_bdd, GroupPickRandomUnitEnum);
        gv_atF[gv_atG.getInt(lv_bde) + lv_bdc] = bj_groupRandomCurrentPick;
        f_aIo(lv_bdd);
      }
      if (gv_atF[gv_atG.getInt(lv_bde) + lv_bdc] == null) {
        IssuePointOrderById(
          gv_atD[gv_atE.getInt(lv_bde) + lv_bdc],
          851986,
          GetUnitX(gv_atL[lv_bde]) + GetRandomReal(-400, 400),
          GetUnitY(gv_atL[lv_bde]) + GetRandomReal(-450, 450)
        );
      } else {
        IssuePointOrderById(
          gv_atD[gv_atE.getInt(lv_bde) + lv_bdc],
          851986,
          GetUnitX(gv_atF[gv_atG.getInt(lv_bde) + lv_bdc]),
          GetUnitY(gv_atF[gv_atG.getInt(lv_bde) + lv_bdc])
        );
      }
      if (gv_atH.getInt(gv_atI.getInt(lv_bde) + lv_bdc) < 1) {
        KillUnit(gv_atD[gv_atE.getInt(lv_bde) + lv_bdc]);
        gv_atM[lv_bde] = gv_atM.getInt(lv_bde) - 1;
      }
    }
    lv_bdc = lv_bdc + 1;
  } while (true);
  if (
    GetWidgetLife(gv_atL[lv_bde]) < 0.406 ||
    gv_atK[lv_bde] < 0.5 ||
    gv_atM.getInt(lv_bde) < 1
  ) {
    if (gv_atM.getInt(lv_bde) > 0) {
      lv_bdc = 1;
      do {
        if (lv_bdc > 3) {
          break;
        }
        if (GetWidgetLife(gv_atD[gv_atE.getInt(lv_bde) + lv_bdc]) > 0.405) {
          KillUnit(gv_atD[gv_atE.getInt(lv_bde) + lv_bdc]);
        }
        lv_bdc = lv_bdc + 1;
      } while (true);
    }
    f_aDT(lv_bde);
    f_aIM(GetExpiredTimer());
  }
  lv_bdd = null;
}
function f_bdf() {
  return GetSpellAbilityId() == "A05B";
}
function f_bdg() {
  var lv_bdh = f_aDR();
  var lv_bdi = 1;
  var lv_bdj = f_aIL();
  if (
    GetWidgetLife(GetTriggerUnit()) >
    GetUnitAbilityLevel(GetTriggerUnit(), "A05B") * 90 + 1
  ) {
    gv_atL[lv_bdh] = GetTriggerUnit();
    SetWidgetLife(
      gv_atL[lv_bdh],
      GetWidgetLife(gv_atL[lv_bdh]) -
        GetUnitAbilityLevel(gv_atL[lv_bdh], "A05B") * 90
    );
    gv_atJ[lv_bdh] =
      GetWidgetLife(gv_atL[lv_bdh]) *
      gv_ald[1222 + GetUnitAbilityLevel(gv_atL[lv_bdh], "A05B")] *
      f_azm(gv_atL[lv_bdh]);
    gv_atK[lv_bdh] = 15 + I2R(f_ays(GetTriggerUnit())) * 1.5;
    gv_atM[lv_bdh] = 3;
    do {
      if (lv_bdi > gv_atM.getInt(lv_bdh)) {
        break;
      }
      gv_atD[gv_atE.getInt(lv_bdh) + lv_bdi] = CreateUnit(
        GetOwningPlayer(gv_atL[lv_bdh]),
        "nssn",
        GetUnitX(gv_atL[lv_bdh]),
        GetUnitY(gv_atL[lv_bdh]),
        0.0
      );
      gv_atF[gv_atG.getInt(lv_bdh) + lv_bdi] = null;
      gv_atH[gv_atI.getInt(lv_bdh) + lv_bdi] = R2I(4 * f_azo(gv_atL[lv_bdh]));
      lv_bdi = lv_bdi + 1;
    } while (true);
    SaveInteger(gv_abL, 0, GetHandleId(lv_bdj), lv_bdh);
    TimerStart(lv_bdj, 0.75, true, f_bdb);
  } else {
    f_aIM(lv_bdj);
  }
  lv_bdj = null;
}
function f_bdk() {
  var lv_bdl;
  if (
    GetUnitAbilityLevel(GetTriggerUnit(), "A05B") > 0 &&
    GetIssuedOrderId() == 852526
  ) {
    lv_bdl = GetUnitAbilityLevel(GetTriggerUnit(), "A05B") * 90;
    if (GetWidgetLife(GetTriggerUnit()) < lv_bdl + 1) {
      PauseUnit(GetTriggerUnit(), true);
      IssueImmediateOrderById(GetTriggerUnit(), 851972);
      PauseUnit(GetTriggerUnit(), false);
      f_aLO(
        GetOwningPlayer(GetTriggerUnit()),
        "You do not have enough life to cast Grave Dance!"
      );
    }
  }
  return false;
}
function f_bdm() {
  var lv_bdn = LoadInteger(gv_abL, 0, GetHandleId(GetExpiredTimer()));
  UnitDamageTarget(
    gv_atQ[lv_bdn],
    gv_atR[lv_bdn],
    gv_atT[lv_bdn],
    false,
    false,
    ATTACK_TYPE_HERO,
    DAMAGE_TYPE_NORMAL,
    null
  );
  gv_atS[lv_bdn] = gv_atS.getInt(lv_bdn) - 1;
  if (
    gv_atS.getInt(lv_bdn) < 1 ||
    GetUnitAbilityLevel(gv_atR[lv_bdn], "B002") < 1 ||
    GetWidgetLife(gv_atR[lv_bdn]) < 0.406
  ) {
    f_aIP(gv_atQ[lv_bdn]);
    f_aDP(lv_bdn);
    f_aIM(GetExpiredTimer());
  }
}
function f_bdo() {
  return GetSpellAbilityId() == "A05I";
}
function f_bdp() {
  var lv_bdq = f_aIL();
  var lv_bdr = f_aDN();
  var lv_bds = GetPlayerId(GetOwningPlayer(GetTriggerUnit()));
  gv_atR[lv_bdr] = GetSpellTargetUnit();
  gv_atT[lv_bdr] =
    (gv_ald[1215 + GetUnitAbilityLevel(GetTriggerUnit(), "A05I")] +
      gv_ald[lv_bds]) *
    gv_aam[lv_bds];
  gv_atS[lv_bdr] = 5 + R2I(f_ays(GetTriggerUnit()) / 3);
  gv_atQ[lv_bdr] = f_aIV(
    GetOwningPlayer(GetTriggerUnit()),
    GetUnitX(gv_atR[lv_bdr]),
    GetUnitY(gv_atR[lv_bdr]),
    0.0
  );
  SaveInteger(gv_abL, 0, GetHandleId(lv_bdq), lv_bdr);
  TimerStart(lv_bdq, 1, true, f_bdm);
  lv_bdq = null;
}
function f_bdt() {
  var lv_bdu = LoadInteger(gv_abL, 0, GetHandleId(GetExpiredTimer()));
  if (
    GetUnitAbilityLevel(gv_atX[lv_bdu], "B00U") < 1 ||
    gv_atZ.getInt(lv_bdu) < 1 ||
    GetWidgetLife(gv_atX[lv_bdu]) < 0.406
  ) {
    f_aIM(GetExpiredTimer());
    f_aDL(lv_bdu);
  } else {
    gv_atZ[lv_bdu] = gv_atZ.getInt(lv_bdu) - 1;
    SetWidgetLife(
      gv_atX[lv_bdu],
      GetWidgetLife(gv_atX[lv_bdu]) + gv_atY[lv_bdu]
    );
  }
}
function f_bdv() {
  return GetSpellAbilityId() == "A06F";
}
function f_bdw() {
  var lv_bdx = f_aIL();
  var lv_bdy = f_aDJ();
  var lv_bdz = GetPlayerId(GetOwningPlayer(GetTriggerUnit()));
  var lv_bdA = GetUnitAbilityLevel(GetTriggerUnit(), "A06F");
  gv_atX[lv_bdy] = GetSpellTargetUnit();
  gv_atY[lv_bdy] =
    ((lv_bdA * 200 +
      100 +
      ((gv_ald[lv_bdz + 8] + GetHeroInt(gv_ale[lv_bdz], true)) * (lv_bdA + 2)) /
        4) *
      f_azm(GetTriggerUnit())) /
    40;
  gv_atZ[lv_bdy] = R2I(
    (40 + lv_bdA) * f_azq(GetTriggerUnit()) * f_azq(GetSpellTargetUnit())
  );
  SaveInteger(gv_abL, 0, GetHandleId(lv_bdx), lv_bdy);
  TimerStart(lv_bdx, 0.2, true, f_bdt);
  lv_bdx = null;
}
function f_bdB() {
  var lv_bdC = LoadInteger(gv_abL, 0, GetHandleId(GetExpiredTimer()));
  gv_aue[lv_bdC] = gv_aue[lv_bdC] - 0.2;
  if (
    gv_aue[lv_bdC] < 0.0 ||
    GetUnitAbilityLevel(gv_aud[lv_bdC], "B00V") < 1 ||
    GetWidgetLife(gv_aud[lv_bdC]) < 0.406
  ) {
    UnitRemoveAbility(gv_aud[lv_bdC], "B00V");
    GroupRemoveUnit(gv_amd, gv_aud[lv_bdC]);
    UnitRemoveAbility(gv_aud[lv_bdC], "A06A");
    RemoveSavedInteger(gv_abH, gv_amc, GetHandleId(gv_aud[lv_bdC]));
    f_aDH(lv_bdC);
    f_aIM(GetExpiredTimer());
  } else {
    UnitDamageTarget(
      gv_aud[lv_bdC + 100],
      gv_aud[lv_bdC],
      gv_auf[lv_bdC],
      false,
      false,
      ATTACK_TYPE_NORMAL,
      DAMAGE_TYPE_UNIVERSAL,
      null
    );
  }
}
function f_bdD() {
  return GetSpellAbilityId() == "A06E";
}
function f_bdE() {
  var lv_bdF = GetPlayerId(GetOwningPlayer(GetTriggerUnit()));
  var lv_bdG;
  var lv_bdH;
  var lv_bdI = GetUnitAbilityLevel(GetTriggerUnit(), "A06E");
  var lv_bdJ = 0;
  var lv_bdK = GetRandomReal(1, 3) + lv_bdI;
  if (IsUnitType(GetSpellTargetUnit(), UNIT_TYPE_HERO)) {
    lv_bdK = lv_bdK / 2;
  } else {
    if (IsUnitType(GetSpellTargetUnit(), UNIT_TYPE_GIANT)) {
      lv_bdK = lv_bdK / 1.66;
    }
  }
  if (UnitHasItemOfTypeBJ(GetTriggerUnit(), "ccmd")) {
    lv_bdK = lv_bdK * 1.2;
  } else {
    if (UnitHasItemOfTypeBJ(GetTriggerUnit(), "rots")) {
      lv_bdK = lv_bdK * 1.4;
    }
  }
  if (lv_bdK > 8) {
    lv_bdK = 8;
  }
  if (!IsUnitInGroup(GetSpellTargetUnit(), gv_amd)) {
    lv_bdG = f_aDF();
    lv_bdH = f_aIL();
    gv_aud[lv_bdG] = GetSpellTargetUnit();
    gv_aud[lv_bdG + 100] = GetTriggerUnit();
    SaveInteger(gv_abH, gv_amc, GetHandleId(gv_aud[lv_bdG]), lv_bdG);
    GroupAddUnit(gv_amd, gv_aud[lv_bdG]);
    UnitAddAbility(gv_aud[lv_bdG], "A06A");
    SaveInteger(gv_abL, 0, GetHandleId(lv_bdH), lv_bdG);
    TimerStart(lv_bdH, 0.2, true, f_bdB);
  } else {
    lv_bdG = LoadInteger(gv_abH, gv_amc, GetHandleId(GetSpellTargetUnit()));
  }
  SetUnitAbilityLevel(gv_aud[lv_bdG], "A06A", lv_bdI);
  f_aLR(
    null,
    I2S(R2I(lv_bdK + 0.5)) + "!",
    50,
    255,
    200,
    GetUnitX(gv_aud[lv_bdG]),
    GetUnitY(gv_aud[lv_bdG]),
    0.039,
    0.457,
    1.5,
    20
  );
  gv_auf[lv_bdG] =
    ((20 +
      5 * lv_bdI * lv_bdI +
      5 * lv_bdI +
      ((gv_ald[lv_bdF] + GetHeroInt(gv_aud[lv_bdG + 100], true)) *
        (lv_bdI + 2)) /
        3 /
        (5 - lv_bdJ)) /
      5) *
    f_azm(gv_aud[lv_bdG + 100]);
  gv_aue[lv_bdG] = lv_bdK * f_azo(gv_aud[lv_bdG + 100]);
  lv_bdH = null;
}
function f_bdL() {
  var lv_bdM = LoadInteger(gv_abL, 0, GetHandleId(GetExpiredTimer()));
  var lv_bdN;
  DestroyEffect(
    AddSpecialEffectTarget(
      "Abilities\\Weapons\\Bolt\\BoltImpact.mdl",
      gv_auj[lv_bdM],
      "origin"
    )
  );
  UnitDamageTarget(
    gv_auk[lv_bdM],
    gv_auj[lv_bdM],
    gv_aul[lv_bdM],
    false,
    false,
    ATTACK_TYPE_NORMAL,
    DAMAGE_TYPE_UNIVERSAL,
    null
  );
  gv_aun[lv_bdM] = gv_aun.getInt(lv_bdM) - 1;
  if (gv_aun.getInt(lv_bdM) < 1 || gv_auj[lv_bdM] == null) {
    DestroyLightning(gv_aum[lv_bdM]);
    f_aIP(gv_auk[lv_bdM]);
    f_aDD(lv_bdM);
    f_aIM(GetExpiredTimer());
  } else {
    gv_ach = GetUnitX(gv_auj[lv_bdM]);
    gv_aci = GetUnitY(gv_auj[lv_bdM]);
    gv_acj = 500;
    gv_acg = GetOwningPlayer(gv_auk[lv_bdM]);
    lv_bdN = f_aIn();
    GroupEnumUnitsInRange(
      lv_bdN,
      GetUnitX(gv_auj[lv_bdM]),
      GetUnitY(gv_auj[lv_bdM]),
      600,
      Condition(f_aLM)
    );
    GroupRemoveUnit(lv_bdN, gv_auj[lv_bdM]);
    bj_groupRandomConsidered = 0;
    bj_groupRandomCurrentPick = null;
    ForGroup(lv_bdN, GroupPickRandomUnitEnum);
    MoveLightning(
      gv_aum[lv_bdM],
      false,
      GetUnitX(gv_auj[lv_bdM]),
      GetUnitY(gv_auj[lv_bdM]),
      GetUnitX(bj_groupRandomCurrentPick),
      GetUnitY(bj_groupRandomCurrentPick)
    );
    gv_auj[lv_bdM] = bj_groupRandomCurrentPick;
    gv_aul[lv_bdM] = gv_aul[lv_bdM] * 0.95;
    f_aIo(lv_bdN);
  }
  lv_bdN = null;
}
function f_bdO() {
  return GetSpellAbilityId() == "A06D";
}
function f_bdP() {
  var lv_bdQ = f_aIL();
  var lv_bdR = f_aDB();
  var lv_bdS = GetPlayerId(GetOwningPlayer(GetTriggerUnit()));
  var lv_bdT = GetUnitAbilityLevel(GetTriggerUnit(), "A06D");
  gv_auk[lv_bdR] = f_aIV(
    GetOwningPlayer(GetTriggerUnit()),
    GetUnitX(GetTriggerUnit()),
    GetUnitY(GetTriggerUnit()),
    0.0
  );
  gv_auj[lv_bdR] = GetSpellTargetUnit();
  gv_aum[lv_bdR] = AddLightning(
    "CLPB",
    false,
    GetUnitX(GetTriggerUnit()),
    GetUnitY(GetTriggerUnit()),
    GetUnitX(gv_auj[lv_bdR]),
    GetUnitY(gv_auj[lv_bdR])
  );
  gv_aul[lv_bdR] =
    (gv_ald[1101 + lv_bdT] +
      ((gv_ald[lv_bdS] + GetHeroInt(GetTriggerUnit(), true)) * (2 + lv_bdT)) /
        4) *
    gv_aam[lv_bdS];
  gv_aun[lv_bdR] = (8 + lv_bdT) / 2 + f_ays(GetTriggerUnit());
  SaveInteger(gv_abL, 0, GetHandleId(lv_bdQ), lv_bdR);
  TimerStart(lv_bdQ, 0.45, true, f_bdL);
  lv_bdQ = null;
}
function f_bdU() {
  SetWidgetLife(GetEnumUnit(), GetWidgetLife(GetEnumUnit()) + gv_alw);
}
function f_bdV() {
  var lv_bdW = GetExpiredTimer();
  var lv_bdX;
  var lv_bdY = LoadInteger(gv_abL, 0, GetHandleId(lv_bdW));
  gv_auu[lv_bdY] = gv_auu.getInt(lv_bdY) + 1;
  if (gv_auu.getInt(lv_bdY) + 1 > 5) {
    gv_auu[lv_bdY] = 0;
    lv_bdX = f_aIn();
    gv_ach = GetUnitX(gv_aur[lv_bdY]);
    gv_aci = GetUnitY(gv_aur[lv_bdY]);
    gv_acg = GetOwningPlayer(gv_aur[lv_bdY]);
    gv_acj = 800;
    GroupEnumUnitsInRange(lv_bdX, gv_ach, gv_aci, 900, Condition(f_aLM));
    bj_groupRandomConsidered = 0;
    bj_groupRandomCurrentPick = null;
    ForGroup(lv_bdX, GroupPickRandomUnitEnum);
    UnitDamageTarget(
      f_aIV(
        GetOwningPlayer(gv_aur[lv_bdY]),
        GetUnitX(bj_groupRandomCurrentPick),
        GetUnitY(bj_groupRandomCurrentPick),
        1
      ),
      bj_groupRandomCurrentPick,
      gv_aus[lv_bdY],
      false,
      true,
      ATTACK_TYPE_NORMAL,
      DAMAGE_TYPE_UNIVERSAL,
      null
    );
    DestroyEffect(
      AddSpecialEffectTarget(
        "MDX\\LightningWrath.mdx",
        bj_groupRandomCurrentPick,
        "origin"
      )
    );
  }
  f_aIo(lv_bdX);
  lv_bdX = f_aIn();
  GroupEnumUnitsInRange(
    lv_bdX,
    gv_ach,
    gv_aci,
    750 * f_azo(gv_aur[lv_bdY]),
    Condition(f_aLN)
  );
  gv_alw = gv_aut[lv_bdY];
  ForGroup(lv_bdX, f_bdU);
  if (
    GetUnitCurrentOrder(gv_aur[lv_bdY]) != 852184 ||
    GetWidgetLife(gv_aur[lv_bdY]) < 0.406
  ) {
    GroupRemoveUnit(gv_ame, gv_aur[lv_bdY]);
    f_aDz(lv_bdY);
    f_aIM(lv_bdW);
  }
  lv_bdW = null;
}
function f_bdZ() {
  if (
    IsUnitEnemy(GetEventDamageSource(), GetOwningPlayer(GetTriggerUnit())) &&
    IsUnitType(GetEventDamageSource(), UNIT_TYPE_MELEE_ATTACKER) &&
    IsUnitInGroup(GetTriggerUnit(), gv_ame)
  ) {
    f_aMP(
      GetEventDamageSource(),
      Atan2(
        GetUnitY(GetEventDamageSource()) - GetUnitY(GetTriggerUnit()),
        GetUnitX(GetEventDamageSource()) - GetUnitX(GetTriggerUnit())
      )
    );
  }
  return false;
}
function f_bea() {
  return (
    GetSpellAbilityId() == "A06G" && !IsUnitInGroup(GetTriggerUnit(), gv_ame)
  );
}
function f_beb() {
  var lv_bec = f_aIL();
  var lv_bed = f_aDx();
  var lv_bee = GetPlayerId(GetOwningPlayer(GetTriggerUnit()));
  var lv_bef = GetUnitAbilityLevel(gv_aur[lv_bed], "A06G");
  gv_aur[lv_bed] = GetTriggerUnit();
  GroupAddUnit(gv_ame, gv_aur[lv_bed]);
  gv_aus[lv_bed] =
    (gv_ald[1095 + lv_bef] + (gv_ald[lv_bee] * (lv_bef + 3)) / 4) *
    gv_aam[lv_bee];
  gv_aut[lv_bed] =
    ((5 * lv_bef * lv_bef +
      30 +
      ((GetHeroInt(GetTriggerUnit(), true) + gv_ald[lv_bee + 8]) *
        (lv_bef + 3)) /
        25) *
      gv_aam[lv_bee]) /
    5;
  gv_auu[lv_bed] = 1;
  SaveInteger(gv_abL, 0, GetHandleId(lv_bec), lv_bed);
  TimerStart(lv_bec, 0.2 / gv_aan[lv_bee], true, f_bdV);
  lv_bec = null;
}
function f_beg() {
  return GetSpellAbilityId() == "A053";
}
function f_beh() {
  var lv_bei = GetPlayerId(GetOwningPlayer(GetTriggerUnit()));
  SetWidgetLife(
    GetSpellTargetUnit(),
    GetWidgetLife(GetSpellTargetUnit()) +
      (GetHeroInt(GetTriggerUnit(), true) * f_azm(GetTriggerUnit()) +
        gv_ald[1059 + GetUnitAbilityLevel(GetTriggerUnit(), "A053")] +
        gv_ald[lv_bei + 8]) *
        f_azo(GetTriggerUnit())
  );
}
function f_bej() {
  var lv_bek = GetPlayerId(GetOwningPlayer(GetEventDamageSource()));
  var lv_bel;
  var lv_bem = GetUnitAbilityLevel(gv_ale[lv_bek], "A052");
  if (GetUnitAbilityLevel(GetTriggerUnit(), "B00L") > 0 && lv_bem > 0) {
    lv_bel = f_aIn();
    gv_ach = GetUnitX(GetTriggerUnit());
    gv_aci = GetUnitY(GetTriggerUnit());
    gv_acg = GetOwningPlayer(gv_ale[lv_bek]);
    gv_acj = 300 * f_azm(gv_ale[lv_bek]);
    GroupEnumUnitsInRange(
      lv_bel,
      gv_ach,
      gv_aci,
      400 * f_azm(gv_ale[lv_bek]),
      Condition(f_aLN)
    );
    if (
      UnitHasItemOfTypeBJ(gv_ale[lv_bek], "sor1") ||
      UnitHasItemOfTypeBJ(gv_ale[lv_bek], "sora")
    ) {
      gv_alw =
        (GetEventDamage() +
          GetHeroInt(gv_ale[lv_bek], true) / 3 +
          gv_ald[lv_bek + 8] * 0.7) *
        gv_ald[1047 + lv_bem] *
        gv_aam[lv_bek];
    } else {
      gv_alw =
        (GetEventDamage() + GetHeroInt(gv_ale[lv_bek], true) / 4) *
        gv_ald[1047 + lv_bem] *
        gv_aam[lv_bek];
    }
    ForGroup(lv_bel, f_bdU);
    f_aLz(
      AddSpecialEffect(
        "MDX\\HolyBlessing.mdx",
        GetUnitX(GetTriggerUnit()),
        GetUnitY(GetTriggerUnit())
      ),
      0.5
    );
    f_aIo(lv_bel);
  }
  lv_bel = null;
  return false;
}
function f_ben() {
  return GetSpellAbilityId() == "A051";
}
function f_beo() {
  var lv_bep = f_aIV(
    GetOwningPlayer(GetTriggerUnit()),
    GetUnitX(GetEnumUnit()),
    GetUnitX(GetEnumUnit()),
    2
  );
  f_aJc(
    lv_bep,
    "A058",
    GetUnitAbilityLevel(GetTriggerUnit(), "A051") + f_ays(GetTriggerUnit())
  );
  UnitDamageTarget(
    lv_bep,
    GetEnumUnit(),
    gv_alw,
    false,
    false,
    ATTACK_TYPE_NORMAL,
    DAMAGE_TYPE_UNIVERSAL,
    null
  );
  IssueTargetOrderById(lv_bep, 852075, GetEnumUnit());
  lv_bep = null;
}
function f_beq() {
  if (GetWidgetLife(GetEnumUnit()) > 0.405) {
    SetWidgetLife(GetEnumUnit(), GetWidgetLife(GetEnumUnit()) + gv_alw);
  }
}
function f_ber() {
  var lv_bes = GetSpellTargetLoc();
  var lv_bet = GetPlayerId(GetOwningPlayer(GetTriggerUnit()));
  var lv_beu = f_aIn();
  var lv_bev = GetUnitAbilityLevel(GetTriggerUnit(), "A051");
  gv_ach = GetLocationX(lv_bes);
  gv_aci = GetLocationY(lv_bes);
  gv_acg = GetOwningPlayer(GetTriggerUnit());
  gv_acj = 250 * f_azm(GetTriggerUnit());
  DestroyEffect(
    AddSpecialEffect(
      "Abilities\\Spells\\Human\\Resurrect\\ResurrectCaster.mdl",
      gv_ach,
      gv_aci
    )
  );
  GroupEnumUnitsInRange(
    lv_beu,
    gv_ach,
    gv_aci,
    350 * f_azm(GetTriggerUnit()),
    Condition(f_aLM)
  );
  gv_alw =
    (gv_ald[1065 + lv_bev] +
      ((lv_bev + 1) / 2) * gv_ald[lv_bet] * gv_aan[lv_bet]) *
    gv_aam[lv_bet];
  ForGroup(lv_beu, f_beo);
  f_aIo(lv_beu);
  gv_aaQ = GetUnitsInRangeOfLocMatching(gv_acj, lv_bes, Condition(f_aAv));
  gv_alw =
    (gv_ald[1065 + lv_bev] +
      ((lv_bev + 1) / 4) * gv_ald[lv_bet + 8] * gv_aan[lv_bet]) *
    gv_aam[lv_bet];
  ForGroup(gv_aaQ, f_beq);
  DestroyGroup(gv_aaQ);
  RemoveLocation(lv_bes);
  lv_beu = null;
  lv_bes = null;
}
function f_bew() {
  var lv_bex = LoadInteger(gv_abH, gv_auz, GetHandleId(GetTriggerUnit()));
  var lv_bey = GetEventDamage();
  var lv_bez;
  if (GetUnitAbilityLevel(gv_auA[lv_bex], "A055") > 0) {
    lv_bez = f_aIL();
    if (lv_bey > GetWidgetLife(gv_auA[lv_bex]) && lv_bey < gv_auB[lv_bex]) {
      UnitAddAbility(gv_auA[lv_bex], "A059");
      UnitRemoveAbility(gv_auA[lv_bex], "A059");
      SetWidgetLife(gv_auA[lv_bex], GetWidgetLife(gv_auA[lv_bex]));
    } else {
      if (lv_bey < GetWidgetLife(gv_auA[lv_bex]) && lv_bey > gv_auB[lv_bex]) {
        SetWidgetLife(
          gv_auA[lv_bex],
          GetWidgetLife(gv_auA[lv_bex]) + gv_auB[lv_bex]
        );
      }
    }
  }
  lv_bez = null;
  return false;
}
function f_beA() {
  var lv_beB = GetExpiredTimer();
  var lv_beC = LoadInteger(gv_abL, 0, GetHandleId(lv_beB));
  if (
    GetWidgetLife(gv_auA[lv_beC]) < 0.406 ||
    GetUnitAbilityLevel(gv_auA[lv_beC], "B00M") < 1
  ) {
    RemoveSavedInteger(gv_abH, gv_auz, GetHandleId(gv_auA[lv_beC]));
    GroupRemoveUnit(gv_auy, gv_auA[lv_beC]);
    UnitRemoveAbility(gv_auA[lv_beC], "A055");
    f_aDv(lv_beC);
    f_aIM(lv_beB);
  } else {
    SetWidgetLife(
      gv_auA[lv_beC],
      GetWidgetLife(gv_auA[lv_beC]) + gv_auC[lv_beC]
    );
  }
  lv_beB = null;
}
function f_beD() {
  return GetSpellAbilityId() == "A050";
}
function f_beE() {
  var lv_beF;
  var lv_beG;
  var lv_beH =
    GetUnitAbilityLevel(GetTriggerUnit(), "A050") + f_ays(GetTriggerUnit());
  if (!IsUnitInGroup(GetSpellTargetUnit(), gv_auy)) {
    lv_beF = f_aIL();
    lv_beG = f_aDt();
    gv_auA[lv_beG] = GetSpellTargetUnit();
    gv_auB[lv_beG] = 10 * (1 + lv_beH);
    gv_auC[lv_beG] =
      ((GetHeroInt(GetTriggerUnit(), true) * f_azm(GetSpellTargetUnit()) +
        gv_ald[GetPlayerId(GetOwningPlayer(GetTriggerUnit())) + 8]) *
        f_azm(GetSpellTargetUnit())) /
      (63 - 5 * lv_beH);
    SaveInteger(gv_abH, gv_auz, GetHandleId(gv_auA[lv_beG]), lv_beG);
    UnitAddAbility(gv_auA[lv_beG], "A055");
    SetUnitAbilityLevel(gv_auA[lv_beG], "A055", lv_beH);
    GroupAddUnit(gv_auy, gv_auA[lv_beG]);
    SaveInteger(gv_abL, 0, GetHandleId(lv_beF), lv_beG);
    TimerStart(lv_beF, 0.3, true, f_beA);
  } else {
    lv_beG = LoadInteger(gv_abH, gv_auz, GetHandleId(GetSpellTargetUnit()));
    if (lv_beH != GetUnitAbilityLevel(gv_auA[lv_beG], "A055")) {
      SetUnitAbilityLevel(gv_auA[lv_beG], "A055", lv_beH);
      gv_auB[lv_beG] = 20;
    }
  }
  lv_beF = null;
}
function f_beI() {
  var lv_beJ = 0;
  do {
    if (lv_beJ > 7) {
      break;
    }
    if (GetSpellAbilityId() == gv_amf.getInt(lv_beJ)) {
      return true;
    }
    lv_beJ = lv_beJ + 1;
  } while (true);
  return false;
}
function f_beK() {
  var lv_beL = 0;
  var lv_beM = GetTriggerUnit();
  var lv_beN = GetPlayerId(GetOwningPlayer(GetTriggerUnit()));
  var lv_beO;
  do {
    if (lv_beL > 7) {
      break;
    }
    if (GetSpellAbilityId() == gv_amf.getInt(lv_beL)) {
      lv_beO = Player(lv_beL);
      f_aMp(gv_amf.getInt(lv_beL));
      DestroyTimerDialog(gv_alj[lv_beL]);
      PauseTimer(gv_ali[lv_beL]);
      ReviveHero(
        gv_ale[lv_beL],
        GetUnitX(lv_beM) + 50,
        GetUnitY(lv_beM) + 10,
        true
      );
      GroupRemoveUnit(gv_alo, gv_ale[lv_beL]);
      SetUnitX(gv_ale[8 + lv_beL], GetUnitX(lv_beM));
      SetUnitY(gv_ale[8 + lv_beL], GetUnitY(lv_beM));
      SetWidgetLife(
        gv_ale[lv_beL],
        GetWidgetLife(gv_ale[lv_beL]) *
          gv_ald[1053 + GetUnitAbilityLevel(lv_beM, "A05A")]
      );
      SetUnitState(
        gv_ale[lv_beL],
        UNIT_STATE_MANA,
        GetUnitState(gv_ale[lv_beL], UNIT_STATE_MAX_MANA) *
          gv_ald[1053 + GetUnitAbilityLevel(lv_beM, "A05A")]
      );
      SetUnitState(
        lv_beM,
        UNIT_STATE_MANA,
        GetUnitState(lv_beM, UNIT_STATE_MANA) -
          100 -
          50 * GetUnitAbilityLevel(lv_beM, "A05A")
      );
      gv_alx = 1;
      if (GetLocalPlayer() == lv_beO) {
        PanCameraToTimed(GetUnitX(lv_beM), GetUnitY(lv_beM), 0.0);
        ForceUICancel();
      }
      lv_beL = 8;
    }
    lv_beL = lv_beL + 1;
  } while (true);
  lv_beO = null;
  lv_beM = null;
}
function f_beP() {
  var lv_beQ = 0;
  gv_ahz = CreateTrigger();
  TriggerRegisterAnyUnitEventBJ(gv_ahz, EVENT_PLAYER_UNIT_SPELL_EFFECT);
  TriggerAddCondition(gv_ahz, Condition(f_beI));
  TriggerAddAction(gv_ahz, f_beK);
  gv_amf[0] = "A04Z";
  gv_amf[1] = "A05J";
  gv_amf[2] = "A05K";
  gv_amf[3] = "A05L";
  gv_amf[4] = "A05M";
  gv_amf[5] = "A05N";
  gv_amf[6] = "A05R";
  gv_amf[7] = "A05S";
  do {
    if (lv_beQ > 7) {
      break;
    }
    f_aMp(gv_amf.getInt(lv_beQ));
    lv_beQ = lv_beQ + 1;
  } while (true);
  gv_ald[1054] = 0.15;
  gv_ald[1055] = 0.25;
  gv_ald[1056] = 0.35;
  gv_ald[1057] = 0.5;
  gv_ald[1058] = 0.65;
  gv_ald[1059] = 0.8;
}
function f_beR() {
  var lv_beS;
  var lv_beT;
  var lv_beU;
  var lv_beV = GetEventDamageSource();
  if (
    IsUnitEnemy(GetTriggerUnit(), GetOwningPlayer(lv_beV)) &&
    GetRandomReal(0, 100) < 17 * f_azo(lv_beV) &&
    GetUnitAbilityLevel(lv_beV, "A045") > 0 &&
    !IsUnitInGroup(lv_beV, gv_aln)
  ) {
    lv_beT = f_aIL();
    lv_beU = f_aIV(
      GetOwningPlayer(lv_beV),
      GetUnitX(GetTriggerUnit()),
      GetUnitY(GetTriggerUnit()),
      2
    );
    f_aJc(lv_beU, "A069", GetUnitAbilityLevel(lv_beV, "A045") + f_ays(lv_beV));
    IssueTargetOrderById(lv_beU, 852095, GetTriggerUnit());
    GroupAddUnit(gv_aln, lv_beV);
    SaveInteger(
      gv_abL,
      0,
      GetHandleId(lv_beT),
      GetPlayerId(GetOwningPlayer(lv_beV))
    );
    TimerStart(lv_beT, 3 / f_azo(lv_beV), false, f_aMl);
    f_aMP(
      GetTriggerUnit(),
      Atan2(
        GetUnitY(GetTriggerUnit()) - GetUnitY(lv_beV),
        GetUnitX(GetTriggerUnit()) - GetUnitX(lv_beV)
      )
    );
  }
  if (
    IsUnitEnemy(GetTriggerUnit(), GetOwningPlayer(lv_beV)) &&
    GetRandomReal(0.0, 100) < 17 * f_azm(lv_beV) &&
    GetUnitAbilityLevel(lv_beV, "A044") > 0
  ) {
    lv_beS =
      GetEventDamage() *
      0.3 *
      GetUnitAbilityLevel(lv_beV, "A044") *
      f_azo(lv_beV);
    f_azN(lv_beV, lv_beS);
    UnitDamageTarget(
      f_aIV(
        GetOwningPlayer(lv_beV),
        GetUnitX(GetTriggerUnit()),
        GetUnitY(GetTriggerUnit()),
        1
      ),
      GetTriggerUnit(),
      lv_beS * f_azm(lv_beV),
      false,
      false,
      ATTACK_TYPE_CHAOS,
      DAMAGE_TYPE_NORMAL,
      null
    );
    f_aLR(
      null,
      I2S(R2I(lv_beS + 0.5)) + "!",
      255,
      0,
      0,
      GetUnitX(lv_beV),
      GetUnitY(lv_beV),
      0.08,
      0.0,
      3,
      10
    );
  }
  if (
    GetUnitAbilityLevel(lv_beV, "A049") > 0 &&
    GetUnitAbilityLevel(GetTriggerUnit(), "B00E") > 0
  ) {
    lv_beS =
      f_aMe(
        GetUnitX(lv_beV),
        GetUnitY(lv_beV),
        GetUnitX(GetTriggerUnit()),
        GetUnitY(GetTriggerUnit())
      ) *
      (0.1 + 0.07 * GetUnitAbilityLevel(lv_beV, "A049")) *
      f_azq(lv_beV) *
      GetRandomReal(0.85, 1.15);
    if (
      UnitHasItemOfTypeBJ(lv_beV, "sor6") ||
      UnitHasItemOfTypeBJ(lv_beV, "sor5")
    ) {
      lv_beS = lv_beS * GetRandomReal(1.4, 1.65);
    }
    lv_beS = f_aBf(lv_beV, lv_beS);
    UnitDamageTarget(
      f_aIV(
        GetOwningPlayer(lv_beV),
        GetUnitX(GetTriggerUnit()),
        GetUnitY(GetTriggerUnit()),
        1
      ),
      GetTriggerUnit(),
      lv_beS * f_azm(lv_beV),
      false,
      false,
      ATTACK_TYPE_NORMAL,
      DAMAGE_TYPE_UNIVERSAL,
      null
    );
    f_aLR(
      null,
      "+" + I2S(R2I(lv_beS + 0.5)),
      28,
      230,
      185,
      GetUnitX(GetTriggerUnit()),
      GetUnitY(GetTriggerUnit()),
      0.08,
      0.0,
      3,
      15
    );
    f_azL(lv_beV);
  }
  lv_beT = null;
  lv_beU = null;
  lv_beV = null;
  return false;
}
function f_beW() {
  f_aIw(Condition(f_beR));
}
function f_beX() {
  return GetSpellAbilityId() == "A03X";
}
function f_beY() {
  var lv_beZ = LoadInteger(gv_abL, 0, GetHandleId(GetExpiredTimer()));
  if (
    GetUnitAbilityLevel(gv_auG[lv_beZ], "B005") < 1 ||
    GetWidgetLife(gv_auG[lv_beZ]) < 0.406
  ) {
    UnitRemoveAbility(gv_auG[lv_beZ], "A05T");
    UnitRemoveAbility(gv_auG[lv_beZ], "B004");
    f_aAN(
      gv_auG[lv_beZ],
      BONUS_DAMAGE,
      -LoadInteger(gv_abL, 1, GetHandleId(GetExpiredTimer()))
    );
    f_aDr(lv_beZ);
    f_aIM(GetExpiredTimer());
  }
}
function f_bfa() {
  var lv_bfb = f_aIL();
  var lv_bfc = f_aDp();
  var lv_bfd = f_aIV(
    GetOwningPlayer(GetTriggerUnit()),
    GetUnitX(GetTriggerUnit()),
    GetUnitY(GetTriggerUnit()),
    2
  );
  var lv_bfe = GetUnitAbilityLevel(GetTriggerUnit(), "A03X");
  var lv_bff = 0.32 - 0.05 * lv_bfe;
  var lv_bfg;
  gv_auG[lv_bfc] = GetTriggerUnit();
  lv_bfe = lv_bfe + f_ays(gv_auG[lv_bfc]);
  if (
    GetUnitState(gv_auG[lv_bfc], UNIT_STATE_MANA) /
      GetUnitState(gv_auG[lv_bfc], UNIT_STATE_MAX_MANA) <
    lv_bff
  ) {
    SetUnitState(gv_auG[lv_bfc], UNIT_STATE_MANA, 0.0);
  } else {
    SetUnitState(
      gv_auG[lv_bfc],
      UNIT_STATE_MANA,
      GetUnitState(gv_auG[lv_bfc], UNIT_STATE_MANA) -
        GetUnitState(gv_auG[lv_bfc], UNIT_STATE_MAX_MANA) * lv_bff
    );
  }
  f_aJc(lv_bfd, "A04K", lv_bfe + f_ays(gv_auG[lv_bfc]));
  UnitAddAbility(gv_auG[lv_bfc], "A05T");
  lv_bfg = R2I(
    (GetHeroAgi(gv_auG[lv_bfc], true) +
      12 +
      R2I(f_aAI(gv_auG[lv_bfc], BONUS_DAMAGE) / 2)) *
      (3 + lv_bfe) *
      0.07
  );
  f_aAN(gv_auG[lv_bfc], BONUS_DAMAGE, lv_bfg);
  IssueTargetOrderById(lv_bfd, 852190, gv_auG[lv_bfc]);
  SaveInteger(gv_abL, 0, GetHandleId(lv_bfb), lv_bfc);
  SaveInteger(gv_abL, 1, GetHandleId(lv_bfb), lv_bfg);
  TimerStart(lv_bfb, 0.3, true, f_beY);
  lv_bfb = null;
  lv_bfd = null;
}
function f_bfh() {
  var lv_bfi = LoadInteger(gv_abL, 0, GetHandleId(GetExpiredTimer()));
  if (gv_auN.getInt(lv_bfi) > 0 && GetWidgetLife(gv_auK[lv_bfi]) > 0.405) {
    if (gv_auN.getInt(lv_bfi) > 6) {
      IssuePointOrderById(
        gv_auK[lv_bfi],
        851986,
        GetRandomReal(
          GetUnitX(gv_auK[lv_bfi]) - 300,
          GetUnitX(gv_auK[lv_bfi]) + 300
        ),
        GetRandomReal(
          GetUnitY(gv_auK[lv_bfi]) - 300,
          GetUnitY(gv_auK[lv_bfi]) + 300
        )
      );
    }
    UnitDamageTarget(
      gv_auL[lv_bfi],
      gv_auK[lv_bfi],
      gv_auM[lv_bfi],
      false,
      false,
      ATTACK_TYPE_NORMAL,
      DAMAGE_TYPE_UNIVERSAL,
      null
    );
    gv_auN[lv_bfi] = gv_auN.getInt(lv_bfi) - 1;
  } else {
    DestroyEffect(gv_auO[lv_bfi]);
    f_aIP(gv_auL[lv_bfi]);
    f_aDn(lv_bfi);
    f_aIM(GetExpiredTimer());
  }
}
function f_bfj(lv_bfk, lv_bfl, lv_bfm) {
  var lv_bfn = f_aDl();
  var lv_bfo = f_aIL();
  gv_auK[lv_bfn] = lv_bfk;
  gv_auL[lv_bfn] = f_aIV(
    lv_bfl,
    GetUnitX(gv_auK[lv_bfn]),
    GetUnitY(gv_auK[lv_bfn]),
    0.0
  );
  gv_auN[lv_bfn] = 8;
  gv_auM[lv_bfn] = lv_bfm;
  gv_auO[lv_bfn] = AddSpecialEffectTarget(
    "Abilities\\Spells\\Other\\SoulBurn\\SoulBurnbuff.mdl",
    gv_auK[lv_bfn],
    "overhead"
  );
  SaveInteger(gv_abL, 0, GetHandleId(lv_bfo), lv_bfn);
  TimerStart(lv_bfo, 1, true, f_bfh);
  return lv_bfn;
}
function f_bfp() {
  var lv_bfq = GetExpiredTimer();
  var lv_bfr = LoadInteger(gv_abL, 0, GetHandleId(lv_bfq));
  var lv_bfs = Atan2(
    gv_auT[lv_bfr] - GetUnitY(gv_auV[lv_bfr]),
    gv_auS[lv_bfr] - GetUnitX(gv_auV[lv_bfr])
  );
  SetUnitX(
    gv_auV[lv_bfr],
    GetUnitX(gv_auV[lv_bfr]) + Cos(lv_bfs) * gv_auU[lv_bfr]
  );
  SetUnitY(
    gv_auV[lv_bfr],
    GetUnitY(gv_auV[lv_bfr]) + Sin(lv_bfs) * gv_auU[lv_bfr]
  );
  if (
    IsUnitInRangeXY(
      gv_auV[lv_bfr],
      gv_auS[lv_bfr],
      gv_auT[lv_bfr],
      gv_auU[lv_bfr]
    ) ||
    f_aDe(lv_bfr, lv_bfs)
  ) {
    f_aDj(lv_bfr);
    GroupRemoveUnit(gv_ack, gv_auV[lv_bfr]);
    f_aIM(lv_bfq);
  }
  lv_bfq = null;
}
function f_bft(lv_bfu, lv_bfv, lv_bfw, lv_bfx) {
  var lv_bfy = f_aDh();
  var lv_bfz = f_aIL();
  gv_auV[lv_bfy] = lv_bfu;
  gv_auS[lv_bfy] = lv_bfv;
  gv_auT[lv_bfy] = lv_bfw;
  gv_auU[lv_bfy] = lv_bfx * 0.025;
  GroupAddUnit(gv_ack, gv_auV[lv_bfy]);
  SaveInteger(gv_abL, 0, GetHandleId(lv_bfz), lv_bfy);
  TimerStart(lv_bfz, 0.025, true, f_bfp);
  lv_bfz = null;
  return lv_bfy;
}
function f_bfA() {
  var lv_bfB;
  var lv_bfC;
  var lv_bfD;
  if (GetSpellAbilityId() == "A03V") {
    lv_bfD = GetSpellTargetLoc();
    lv_bfC = GetPlayerId(GetOwningPlayer(GetTriggerUnit()));
    lv_bfB = f_bft(
      CreateUnit(
        GetOwningPlayer(GetTriggerUnit()),
        "ehip",
        GetUnitX(GetTriggerUnit()),
        GetUnitY(GetTriggerUnit()),
        GetUnitFacing(GetTriggerUnit())
      ),
      GetLocationX(lv_bfD),
      GetLocationY(lv_bfD),
      500
    );
    gv_auW[lv_bfB] =
      ((gv_ald[1119 + GetUnitAbilityLevel(GetTriggerUnit(), "A03V")] +
        3 * GetHeroInt(GetTriggerUnit(), true) +
        GetHeroAgi(GetTriggerUnit(), true) +
        gv_ald[lv_bfC]) /
        8) *
      f_azm(GetTriggerUnit());
    RemoveLocation(lv_bfD);
  }
  lv_bfD = null;
  return false;
}
function f_bfE() {
  var lv_bfF;
  var lv_bfG = GetEventDamageSource();
  if (
    GetUnitAbilityLevel(lv_bfG, "A05O") > 0 &&
    GetUnitAbilityLevel(GetTriggerUnit(), "B00X") > 0
  ) {
    lv_bfF = f_aBf(
      lv_bfG,
      GetHeroInt(lv_bfG, true) *
        (0.22 + 0.23 * f_azq(lv_bfG) * GetUnitAbilityLevel(lv_bfG, "A05O")) *
        GetRandomReal(0.9, 1.1)
    );
    if (
      GetInventoryIndexOfItemTypeBJ(lv_bfG, "shcw") +
        GetInventoryIndexOfItemTypeBJ(lv_bfG, "shtm") >
      0
    ) {
      lv_bfF = lv_bfF * 1.2;
    }
    UnitDamageTarget(
      f_aIV(
        GetOwningPlayer(lv_bfG),
        GetUnitX(GetTriggerUnit()),
        GetUnitY(GetTriggerUnit()),
        1
      ),
      GetTriggerUnit(),
      lv_bfF * f_azm(lv_bfG),
      false,
      false,
      ATTACK_TYPE_NORMAL,
      DAMAGE_TYPE_UNIVERSAL,
      null
    );
    f_aLR(
      null,
      "+" + I2S(R2I(lv_bfF + 0.5)),
      0,
      100,
      150,
      GetUnitX(GetTriggerUnit()),
      GetUnitY(GetTriggerUnit()),
      0.08,
      0.0,
      3,
      15
    );
    f_azL(lv_bfG);
  }
  lv_bfG = null;
  return false;
}
function f_bfH() {
  f_aIw(Condition(f_bfE));
}
function f_bfI() {
  var lv_bfJ = LoadInteger(gv_abL, 0, GetHandleId(GetExpiredTimer()));
  do {
    gv_alv = FirstOfGroup(gv_avb[lv_bfJ]);
    if (gv_alv == null) {
      break;
    }
    if (GetWidgetLife(gv_alv) > 0.405) {
      SetUnitPosition(gv_avc[lv_bfJ], GetUnitX(gv_alv), GetUnitY(gv_alv));
      UnitDamageTarget(
        gv_avc[lv_bfJ],
        gv_alv,
        gv_ava[lv_bfJ],
        false,
        false,
        ATTACK_TYPE_NORMAL,
        DAMAGE_TYPE_UNIVERSAL,
        null
      );
    }
    GroupRemoveUnit(gv_avb[lv_bfJ], gv_alv);
  } while (true);
  f_aIP(gv_avc[lv_bfJ]);
  f_aIo(gv_avb[lv_bfJ]);
  f_aDc(lv_bfJ);
  f_aIM(GetExpiredTimer());
}
function f_bfK() {
  var lv_bfL = GetExpiredTimer();
  var lv_bfM = LoadInteger(gv_abL, 0, GetHandleId(lv_bfL));
  var lv_bfN = Atan2(
    gv_avh[lv_bfM] - GetUnitY(gv_avj[lv_bfM]),
    gv_avg[lv_bfM] - GetUnitX(gv_avj[lv_bfM])
  );
  SetUnitX(
    gv_avj[lv_bfM],
    GetUnitX(gv_avj[lv_bfM]) + Cos(lv_bfN) * gv_avi[lv_bfM]
  );
  SetUnitY(
    gv_avj[lv_bfM],
    GetUnitY(gv_avj[lv_bfM]) + Sin(lv_bfN) * gv_avi[lv_bfM]
  );
  if (
    IsUnitInRangeXY(
      gv_avj[lv_bfM],
      gv_avg[lv_bfM],
      gv_avh[lv_bfM],
      gv_avi[lv_bfM]
    ) ||
    f_aCT(lv_bfM, lv_bfN)
  ) {
    f_aCY(lv_bfM);
    GroupRemoveUnit(gv_ack, gv_avj[lv_bfM]);
    f_aIM(lv_bfL);
  }
  lv_bfL = null;
}
function f_bfO(lv_bfP, lv_bfQ, lv_bfR, lv_bfS) {
  var lv_bfT = f_aCW();
  var lv_bfU = f_aIL();
  gv_avj[lv_bfT] = lv_bfP;
  gv_avg[lv_bfT] = lv_bfQ;
  gv_avh[lv_bfT] = lv_bfR;
  gv_avi[lv_bfT] = lv_bfS * 0.025;
  GroupAddUnit(gv_ack, gv_avj[lv_bfT]);
  SaveInteger(gv_abL, 0, GetHandleId(lv_bfU), lv_bfT);
  TimerStart(lv_bfU, 0.025, true, f_bfK);
  lv_bfU = null;
  return lv_bfT;
}
function f_bfV() {
  if (GetWidgetLife(GetEnumUnit()) > 0.405) {
    DestroyEffect(
      AddSpecialEffectTarget(
        "Abilities\\Spells\\NightElf\\Starfall\\StarfallTarget.mdl",
        GetEnumUnit(),
        "origin"
      )
    );
  } else {
    GroupRemoveUnit(bj_groupRemoveGroupDest, GetEnumUnit());
  }
}
function f_bfW() {
  var lv_bfX;
  var lv_bfY;
  var lv_bfZ;
  var lv_bga;
  var lv_bgb = GetTriggerUnit();
  if (GetSpellAbilityId() == "A06R") {
    lv_bga = GetUnitAbilityLevel(lv_bgb, "A06R");
    lv_bfY = GetSpellTargetLoc();
    lv_bfZ = GetPlayerId(GetOwningPlayer(lv_bgb));
    lv_bfX = f_bfO(
      CreateUnit(
        GetOwningPlayer(lv_bgb),
        "ebal",
        GetUnitX(lv_bgb),
        GetUnitY(lv_bgb),
        GetUnitFacing(lv_bgb)
      ),
      GetLocationX(lv_bfY),
      GetLocationY(lv_bfY),
      750
    );
    gv_avk[lv_bfX] =
      gv_ald[1011 + lv_bga] +
      ((gv_ald[lv_bfZ] + GetHeroInt(lv_bgb, true)) * (lv_bga + 1)) / 3;
    RemoveLocation(lv_bfY);
  }
  lv_bgb = null;
  lv_bfY = null;
  return false;
}
function f_bgc() {
  if (GetWidgetLife(GetEnumUnit()) > 0.405) {
    SetWidgetLife(GetEnumUnit(), GetWidgetLife(GetEnumUnit()) + gv_alw);
  } else {
    GroupRemoveUnit(bj_groupRemoveGroupDest, GetEnumUnit());
  }
}
function f_bgd() {
  var lv_bge = GetExpiredTimer();
  var lv_bgf = LoadInteger(gv_abL, 0, GetHandleId(lv_bge));
  gv_alw = gv_avp[lv_bgf];
  bj_groupRemoveGroupDest = gv_avo[lv_bgf];
  ForGroup(gv_avo[lv_bgf], f_bgc);
  gv_avo[lv_bgf] = bj_groupRemoveGroupDest;
  gv_avq[lv_bgf] = gv_avq.getInt(lv_bgf) - 1;
  bj_groupCountUnits = 0;
  ForGroup(gv_avo[lv_bgf], CountUnitsInGroupEnum);
  if (gv_avq.getInt(lv_bgf) < 1 || bj_groupCountUnits < 1) {
    f_aIM(lv_bge);
    f_aIo(gv_avo[lv_bgf]);
    f_aCR(lv_bgf);
  }
  lv_bge = null;
}
function f_bgg() {
  return GetSpellAbilityId() == "A074";
}
function f_bgh() {
  var lv_bgi = GetSpellTargetLoc();
  var lv_bgj;
  var lv_bgk = f_aCP();
  var lv_bgl = f_aIL();
  var lv_bgm = f_aIn();
  var lv_bgn = GetPlayerId(GetOwningPlayer(GetTriggerUnit()));
  var lv_bgo = GetUnitAbilityLevel(GetTriggerUnit(), "A074");
  gv_ach = GetLocationX(lv_bgi);
  gv_aci = GetLocationY(lv_bgi);
  gv_acg = GetOwningPlayer(GetTriggerUnit());
  gv_acj = 200 * f_azm(GetTriggerUnit());
  GroupEnumUnitsInRangeOfLoc(
    lv_bgm,
    lv_bgi,
    300 * f_azm(GetTriggerUnit()),
    Condition(f_aAv)
  );
  gv_avp[lv_bgk] =
    ((gv_ald[1017 + lv_bgo] +
      (0.3 + 0.15 * lv_bgo) *
        (GetHeroInt(GetTriggerUnit(), true) + gv_ald[lv_bgn + 8] / 1.6)) /
      8) *
    gv_aam[lv_bgn];
  gv_avo[lv_bgk] = f_aIn();
  gv_avq[lv_bgk] = 8;
  if (lv_bgo == 2) {
    gv_avp[lv_bgk] = gv_avp[lv_bgk] * f_azo(GetTriggerUnit());
  }
  do {
    lv_bgj = FirstOfGroup(lv_bgm);
    if (lv_bgj == null) {
      break;
    }
    GroupAddUnit(gv_avo[lv_bgk], lv_bgj);
    f_aLz(
      AddSpecialEffectTarget(
        "Abilities\\Spells\\Items\\HealingSalve\\HealingSalveTarget.mdl",
        lv_bgj,
        "head"
      ),
      4
    );
    GroupRemoveUnit(lv_bgm, lv_bgj);
  } while (true);
  f_aIo(lv_bgm);
  SaveInteger(gv_abL, 0, GetHandleId(lv_bgl), lv_bgk);
  TimerStart(lv_bgl, 0.49, true, f_bgd);
  RemoveLocation(lv_bgi);
  lv_bgl = null;
  lv_bgi = null;
  lv_bgm = null;
  lv_bgj = null;
}
function f_bgp() {
  var lv_bgq = GetExpiredTimer();
  var lv_bgr = LoadInteger(gv_abL, 0, GetHandleId(lv_bgq));
  if (
    GetUnitAbilityLevel(gv_avu[lv_bgr], "B001") < 1 ||
    GetWidgetLife(gv_avu[lv_bgr]) < 0.406
  ) {
    GroupRemoveUnit(gv_amg, gv_avu[lv_bgr]);
    UnitRemoveAbility(gv_avu[lv_bgr], "A04G");
    RemoveSavedInteger(gv_abH, gv_amh, GetHandleId(gv_avu[lv_bgr]));
    f_aIM(lv_bgq);
    f_aCN(lv_bgr);
  }
  lv_bgq = null;
}
function f_bgs() {
  return GetSpellAbilityId() == "A03Q";
}
function f_bgt() {
  var lv_bgu;
  var lv_bgv;
  if (!IsUnitInGroup(GetTriggerUnit(), gv_amg)) {
    lv_bgv = f_aCL();
    gv_avu[lv_bgv] = GetTriggerUnit();
    UnitAddAbility(gv_avu[lv_bgv], "A04G");
    GroupAddUnit(gv_amg, gv_avu[lv_bgv]);
    SaveInteger(gv_abH, gv_amh, GetHandleId(gv_avu[lv_bgv]), lv_bgv);
    lv_bgu = f_aIL();
    SaveInteger(gv_abL, 0, GetHandleId(lv_bgu), lv_bgv);
    TimerStart(lv_bgu, 0.3, true, f_bgp);
  } else {
    lv_bgv = LoadInteger(gv_abH, gv_amh, GetHandleId(GetTriggerUnit()));
  }
  lv_bgu = null;
}
function f_bgw() {
  var lv_bgx = GetExpiredTimer();
  var lv_bgy = LoadInteger(gv_abL, 0, GetHandleId(lv_bgx));
  SetUnitPositionLoc(gv_ale[lv_bgy], gv_all[60 + lv_bgy]);
  PanCameraToTimedLocForPlayer(Player(lv_bgy), gv_all[60 + lv_bgy], 0);
  DestroyEffect(
    AddSpecialEffectTarget(
      "Abilities\\Spells\\Human\\MassTeleport\\MassTeleportTarget.mdl",
      gv_ale[lv_bgy],
      "origin"
    )
  );
  PauseUnit(gv_ale[lv_bgy], false);
  f_aIM(lv_bgx);
  lv_bgx = null;
}
function f_bgz() {
  var lv_bgA = GetPlayerId(GetOwningPlayer(GetTriggerUnit()));
  var lv_bgB = GetPlayerState(Player(lv_bgA), PLAYER_STATE_RESOURCE_FOOD_USED);
  var lv_bgC = GetSpellAbilityId();
  var lv_bgD = 0;
  var lv_bgE = 0;
  var lv_bgF;
  if (lv_bgC == "A07T") {
    lv_bgD = 20;
    lv_bgE = 100;
  }
  if (lv_bgC == "A07S") {
    lv_bgD = 30;
    if (gv_ale[lv_bgA] != null) {
      gv_all[50 + lv_bgA] = GetUnitLoc(gv_ale[lv_bgA]);
      DisplayTimedTextToPlayer(
        Player(lv_bgA),
        0,
        0,
        20,
        S2S(gv_alf[82] + "Favor Teleport Beacon set to current location.")
      );
    } else {
      gv_all[50 + lv_bgA] = GetRectCenter(gv_adY);
    }
    lv_bgE = 100;
  }
  gv_all[60 + lv_bgA] = gv_all[50 + lv_bgA];
  if (lv_bgC == "A07E") {
    lv_bgD = 18;
    gv_all[60 + lv_bgA] = GetRectCenter(gv_adY);
  }
  if (lv_bgC == "A07F") {
    lv_bgD = 20;
    gv_all[60 + lv_bgA] = GetRectCenter(gv_adf);
    lv_bgE = 30;
  }
  if (lv_bgC == "A07G") {
    lv_bgD = 22;
    gv_all[60 + lv_bgA] = GetRectCenter(gv_adl);
    lv_bgE = 55;
  }
  if (lv_bgC == "A07H") {
    lv_bgD = 24;
    gv_all[60 + lv_bgA] = GetRectCenter(gv_aeR);
    lv_bgE = 85;
  }
  if (GetHeroLevel(gv_ale[lv_bgA]) < lv_bgE) {
    f_aLO(
      Player(lv_bgA),
      "You are too weak to pray this level " + I2S(lv_bgE) + " prayer."
    );
    lv_bgD = 0;
  }
  if (lv_bgB < lv_bgD) {
    f_aLO(
      Player(lv_bgA),
      "You need " +
        I2S(lv_bgD - lv_bgB) +
        " more favor to have that prayer answered."
    );
    lv_bgD = 0;
  }
  if (lv_bgD > 0) {
    SetPlayerState(
      Player(lv_bgA),
      PLAYER_STATE_RESOURCE_FOOD_USED,
      lv_bgB - lv_bgD
    );
    if (GetWidgetLife(gv_ale[lv_bgA]) > 0.405) {
      PauseUnit(gv_ale[lv_bgA], true);
      DestroyEffect(
        AddSpecialEffectTarget(
          "Abilities\\Spells\\Human\\MassTeleport\\MassTeleportCaster.mdl",
          gv_ale[lv_bgA],
          "origin"
        )
      );
      lv_bgF = f_aIL();
      SaveInteger(gv_abL, 0, GetHandleId(lv_bgF), lv_bgA);
      TimerStart(lv_bgF, 1, false, f_bgw);
    }
  }
  lv_bgF = null;
}
function f_bgG() {
  var lv_bgH = LoadInteger(gv_abL, 0, GetHandleId(GetExpiredTimer()));
  gv_ald[lv_bgH] = gv_ald[lv_bgH] - 250;
  gv_ald[lv_bgH + 8] = gv_ald[lv_bgH + 8] - 250;
  UnitRemoveAbility(gv_ale[lv_bgH], "A08C");
  UnitRemoveAbility(gv_ale[lv_bgH], "B01E");
  f_aIM(GetExpiredTimer());
}
function f_bgI() {
  return GetSpellAbilityId() == "A07I";
}
function f_bgJ() {
  var lv_bgK;
  var lv_bgL = GetOwningPlayer(GetTriggerUnit());
  var lv_bgM = GetPlayerId(lv_bgL);
  if (GetPlayerState(lv_bgL, PLAYER_STATE_RESOURCE_FOOD_USED) < 75) {
    f_aLO(
      lv_bgL,
      "You need " +
        I2S(75 - GetPlayerState(lv_bgL, PLAYER_STATE_RESOURCE_FOOD_USED)) +
        " more favor to have that prayer answered."
    );
  } else {
    SetPlayerState(
      lv_bgL,
      PLAYER_STATE_RESOURCE_FOOD_USED,
      GetPlayerState(lv_bgL, PLAYER_STATE_RESOURCE_FOOD_USED) - 75
    );
    gv_ald[lv_bgM] = gv_ald[lv_bgM] + 250;
    gv_ald[lv_bgM + 8] = gv_ald[lv_bgM + 8] + 250;
    UnitAddAbility(gv_ale[lv_bgM], "A08C");
    lv_bgK = f_aIL();
    SaveInteger(gv_abL, 0, GetHandleId(lv_bgK), lv_bgM);
    TimerStart(lv_bgK, 30, false, f_bgG);
  }
  lv_bgL = null;
  lv_bgK = null;
}
function f_bgN() {
  var lv_bgO = LoadInteger(gv_abL, 0, GetHandleId(GetExpiredTimer()));
  UnitRemoveAbility(gv_ale[lv_bgO], "A08D");
  UnitRemoveAbility(gv_ale[lv_bgO], "B01F");
  f_aIM(GetExpiredTimer());
}
function f_bgP() {
  return GetSpellAbilityId() == "A07J";
}
function f_bgQ() {
  var lv_bgR;
  var lv_bgS = GetOwningPlayer(GetTriggerUnit());
  var lv_bgT = GetPlayerId(lv_bgS);
  if (GetPlayerState(lv_bgS, PLAYER_STATE_RESOURCE_FOOD_USED) < 75) {
    f_aLO(
      lv_bgS,
      "You need " +
        I2S(75 - GetPlayerState(lv_bgS, PLAYER_STATE_RESOURCE_FOOD_USED)) +
        " more favor to have that prayer answered."
    );
  } else {
    SetPlayerState(
      lv_bgS,
      PLAYER_STATE_RESOURCE_FOOD_USED,
      GetPlayerState(lv_bgS, PLAYER_STATE_RESOURCE_FOOD_USED) - 75
    );
    UnitAddAbility(gv_ale[lv_bgT], "A08D");
    lv_bgR = f_aIL();
    SaveInteger(gv_abL, 0, GetHandleId(lv_bgR), lv_bgT);
    TimerStart(lv_bgR, 30, false, f_bgN);
  }
  lv_bgS = null;
  lv_bgR = null;
}
function f_bgU() {
  var lv_bgV;
  if (GetUnitAbilityLevel(GetEventDamageSource(), "A08D") > 0) {
    lv_bgV = f_aIV(
      GetOwningPlayer(GetEventDamageSource()),
      GetUnitX(GetTriggerUnit()),
      GetUnitY(GetTriggerUnit()),
      1
    );
    UnitDamageTarget(
      lv_bgV,
      GetTriggerUnit(),
      GetEventDamage() * 0.25 * f_azm(GetEventDamageSource()),
      false,
      false,
      ATTACK_TYPE_CHAOS,
      DAMAGE_TYPE_NORMAL,
      null
    );
    f_aLR(
      GetOwningPlayer(GetEventDamageSource()),
      "+" +
        I2S(R2I(GetEventDamage() * 0.25 * f_azo(GetEventDamageSource()))) +
        "!",
      255,
      3,
      3,
      GetUnitX(GetEventDamageSource()) - 16,
      GetUnitY(GetEventDamageSource()),
      0.077,
      0.0,
      3,
      12.5
    );
  }
  lv_bgV = null;
  return false;
}
function f_bgW() {
  var lv_bgX = GetExpiredTimer();
  var lv_bgY = LoadInteger(gv_abL, 0, GetHandleId(lv_bgX));
  UnitRemoveAbility(gv_ale[lv_bgY], "A07L");
  UnitRemoveAbility(gv_ale[lv_bgY], "A06I");
  UnitRemoveAbility(gv_ale[lv_bgY], "A08E");
  f_aIM(lv_bgX);
  lv_bgX = null;
}
function f_bgZ() {
  return GetSpellAbilityId() == "A07K";
}
function f_bha() {
  var lv_bhb;
  var lv_bhc = GetOwningPlayer(GetTriggerUnit());
  var lv_bhd = GetPlayerId(lv_bhc);
  if (GetPlayerState(lv_bhc, PLAYER_STATE_RESOURCE_FOOD_USED) < 75) {
    f_aLO(
      lv_bhc,
      "You need " +
        I2S(75 - GetPlayerState(lv_bhc, PLAYER_STATE_RESOURCE_FOOD_USED)) +
        " more favor to have that prayer answered."
    );
  } else {
    SetPlayerState(
      lv_bhc,
      PLAYER_STATE_RESOURCE_FOOD_USED,
      GetPlayerState(lv_bhc, PLAYER_STATE_RESOURCE_FOOD_USED) - 75
    );
    UnitAddAbility(gv_ale[lv_bhd], "A07L");
    UnitAddAbility(gv_ale[lv_bhd], "A06I");
    UnitAddAbility(gv_ale[lv_bhd], "A08E");
    lv_bhb = f_aIL();
    SaveInteger(gv_abL, 0, GetHandleId(lv_bhb), lv_bhd);
    TimerStart(lv_bhb, 30, false, f_bgW);
  }
  lv_bhc = null;
  lv_bhb = null;
}
function f_bhe() {
  return GetSpellAbilityId() == "A06S";
}
function f_bhf() {
  var lv_bhg = GetOwningPlayer(GetTriggerUnit());
  var lv_bhh = GetPlayerId(lv_bhg);
  if (GetPlayerState(lv_bhg, PLAYER_STATE_RESOURCE_FOOD_USED) < 100) {
    f_aLO(
      lv_bhg,
      "You need " +
        I2S(100 - GetPlayerState(lv_bhg, PLAYER_STATE_RESOURCE_FOOD_USED)) +
        " more favor to have that prayer answered."
    );
  } else {
    SetPlayerState(
      lv_bhg,
      PLAYER_STATE_RESOURCE_FOOD_USED,
      GetPlayerState(lv_bhg, PLAYER_STATE_RESOURCE_FOOD_USED) - 100
    );
    SetUnitLifePercentBJ(gv_ale[lv_bhh], 100);
    SetUnitManaPercentBJ(gv_ale[lv_bhh], 100);
    DestroyEffect(
      AddSpecialEffectTarget(
        "Abilities\\Spells\\Items\\AIre\\AIreTarget.mdl",
        gv_ale[lv_bhh],
        "origin"
      )
    );
  }
  lv_bhg = null;
}
function f_bhi() {
  return GetSpellAbilityId() == "A06W";
}
function f_bhj() {
  var lv_bhk = GetOwningPlayer(GetTriggerUnit());
  var lv_bhl = GetPlayerState(lv_bhk, PLAYER_STATE_RESOURCE_FOOD_USED);
  var lv_bhm;
  if (lv_bhl < 100) {
    f_aLO(
      lv_bhk,
      "You need " +
        I2S(100 - lv_bhl) +
        " more favor to have that prayer answered."
    );
  } else {
    SetPlayerState(lv_bhk, PLAYER_STATE_RESOURCE_FOOD_USED, lv_bhl - 100);
    lv_bhl = 0;
    do {
      if (lv_bhl > 7) {
        break;
      }
      lv_bhm = 0.5 * GetUnitState(gv_ale[lv_bhl], UNIT_STATE_MAX_LIFE);
      SetUnitState(
        gv_ale[lv_bhl],
        UNIT_STATE_LIFE,
        GetUnitState(gv_ale[lv_bhl], UNIT_STATE_LIFE) + lv_bhm
      );
      DestroyEffect(
        AddSpecialEffectTarget(
          "Abilities\\Spells\\Orc\\HealingWave\\HealingWaveTarget.mdl",
          gv_ale[lv_bhl],
          "origin"
        )
      );
      lv_bhl = lv_bhl + 1;
    } while (true);
  }
  lv_bhk = null;
}
function f_bhn() {
  var lv_bho = GetExpiredTimer();
  var lv_bhp = 0;
  do {
    if (lv_bhp > 7) {
      break;
    }
    UnitRemoveAbility(gv_ale[lv_bhp], "A07P");
    UnitRemoveAbility(gv_ale[lv_bhp], "A07Q");
    UnitRemoveAbility(gv_ale[lv_bhp], "A08F");
    lv_bhp = lv_bhp + 1;
  } while (true);
  f_aIM(lv_bho);
  lv_bho = null;
}
function f_bhq() {
  return GetSpellAbilityId() == "A06V";
}
function f_bhr() {
  var lv_bhs;
  var lv_bht = GetOwningPlayer(GetTriggerUnit());
  var lv_bhu = GetPlayerState(lv_bht, PLAYER_STATE_RESOURCE_FOOD_USED);
  if (lv_bhu < 100) {
    f_aLO(
      lv_bht,
      "You need " +
        I2S(100 - lv_bhu) +
        " more favor to have that prayer answered."
    );
  } else {
    SetPlayerState(lv_bht, PLAYER_STATE_RESOURCE_FOOD_USED, lv_bhu - 100);
    lv_bhu = 0;
    do {
      if (lv_bhu > 7) {
        break;
      }
      UnitAddAbility(gv_ale[lv_bhu], "A07P");
      UnitAddAbility(gv_ale[lv_bhu], "A07Q");
      UnitAddAbility(gv_ale[lv_bhu], "A08F");
      lv_bhu = lv_bhu + 1;
    } while (true);
    lv_bhs = f_aIL();
    TimerStart(lv_bhs, 25, false, f_bhn);
  }
  lv_bht = null;
  lv_bhs = null;
}
function f_bhv() {
  if (GetUnitAbilityLevel(GetEventDamageSource(), "A08F") > 0) {
    SetWidgetLife(
      GetEventDamageSource(),
      GetWidgetLife(GetEventDamageSource()) +
        GetEventDamage() * 0.1 * f_azm(GetEventDamageSource())
    );
    f_aLz(
      AddSpecialEffectTarget(
        "Abilities\\Spells\\Undead\\VampiricAura\\VampiricAuraTarget.mdl",
        GetEventDamageSource(),
        "chest"
      ),
      0.1
    );
  }
  return false;
}
function f_bhw() {
  var lv_bhx = GetExpiredTimer();
  var lv_bhy;
  var lv_bhz;
  var lv_bhA = 0;
  do {
    if (lv_bhA > 7) {
      break;
    }
    lv_bhy = GetUnitState(gv_ale[lv_bhA], UNIT_STATE_LIFE);
    lv_bhz = 0.75 * GetUnitState(gv_ale[lv_bhA], UNIT_STATE_MAX_LIFE);
    SetUnitState(gv_ale[lv_bhA], UNIT_STATE_LIFE, lv_bhy + lv_bhz);
    SetUnitInvulnerable(gv_ale[lv_bhA], false);
    DestroyEffect(gv_alh[200 + lv_bhA]);
    lv_bhA = lv_bhA + 1;
  } while (true);
  f_aIM(lv_bhx);
  lv_bhx = null;
}
function f_bhB() {
  return GetSpellAbilityId() == "A06X";
}
function f_bhC() {
  var lv_bhD;
  var lv_bhE = GetOwningPlayer(GetTriggerUnit());
  var lv_bhF = GetPlayerState(lv_bhE, PLAYER_STATE_RESOURCE_FOOD_USED);
  if (lv_bhF < 150) {
    f_aLO(
      lv_bhE,
      "You need " +
        I2S(150 - lv_bhF) +
        " more favor to have that prayer answered."
    );
  } else {
    SetPlayerState(lv_bhE, PLAYER_STATE_RESOURCE_FOOD_USED, lv_bhF - 150);
    lv_bhF = 0;
    do {
      if (lv_bhF > 7) {
        break;
      }
      SetUnitInvulnerable(gv_ale[lv_bhF], true);
      DestroyEffect(gv_alh[200 + lv_bhF]);
      gv_alh[200 + lv_bhF] = AddSpecialEffectTarget(
        "Abilities\\Spells\\Human\\DivineShield\\DivineShieldTarget.mdl",
        gv_ale[lv_bhF],
        "origin"
      );
      lv_bhF = lv_bhF + 1;
    } while (true);
    lv_bhD = f_aIL();
    TimerStart(lv_bhD, 3, false, f_bhw);
  }
  lv_bhE = null;
  lv_bhD = null;
}
function f_bhG() {
  return IsUnitType(GetTriggerUnit(), UNIT_TYPE_HERO) != null;
}
function f_bhH() {
  gv_acz = GetRectCenter(gv_adc);
  SetUnitPositionLoc(GetTriggerUnit(), gv_acz);
  PanCameraToTimedLocForPlayer(GetOwningPlayer(GetTriggerUnit()), gv_acz, 0);
  RemoveLocation(gv_acz);
}
function f_bhI() {
  return IsUnitType(GetTriggerUnit(), UNIT_TYPE_HERO) != null;
}
function f_bhJ() {
  gv_acz = GetRectCenter(gv_add);
  SetUnitPositionLoc(GetTriggerUnit(), gv_acz);
  PanCameraToTimedLocForPlayer(GetOwningPlayer(GetTriggerUnit()), gv_acz, 0);
  RemoveLocation(gv_acz);
}
function f_bhK() {
  return IsUnitType(GetTriggerUnit(), UNIT_TYPE_HERO) != null;
}
function f_bhL() {
  gv_acz = GetRectCenter(gv_adL);
  SetUnitPositionLoc(GetTriggerUnit(), gv_acz);
  PanCameraToTimedLocForPlayer(GetOwningPlayer(GetTriggerUnit()), gv_acz, 0);
  RemoveLocation(gv_acz);
}
function f_bhM() {
  return IsUnitType(GetTriggerUnit(), UNIT_TYPE_HERO) != null;
}
function f_bhN() {
  gv_acz = GetRectCenter(gv_afl);
  SetUnitPositionLoc(GetTriggerUnit(), gv_acz);
  PanCameraToTimedLocForPlayer(GetOwningPlayer(GetTriggerUnit()), gv_acz, 0);
  RemoveLocation(gv_acz);
}
function f_bhO() {
  return IsUnitType(GetTriggerUnit(), UNIT_TYPE_HERO) != null;
}
function f_bhP() {
  gv_acz = GetRectCenter(gv_adq);
  SetUnitPositionLoc(GetTriggerUnit(), gv_acz);
  PanCameraToTimedLocForPlayer(GetOwningPlayer(GetTriggerUnit()), gv_acz, 0);
  RemoveLocation(gv_acz);
}
function f_bhQ() {
  return IsUnitType(GetTriggerUnit(), UNIT_TYPE_HERO) != null;
}
function f_bhR() {
  gv_acz = GetRectCenter(gv_ads);
  SetUnitPositionLoc(GetTriggerUnit(), gv_acz);
  PanCameraToTimedLocForPlayer(GetOwningPlayer(GetTriggerUnit()), gv_acz, 0);
  RemoveLocation(gv_acz);
}
function f_bhS() {
  return IsUnitDeadBJ(gv_ajX) && IsUnitDeadBJ(gv_akj) && IsUnitDeadBJ(gv_ajP);
}
function f_bhT() {
  return f_bhS();
}
function f_bhU() {
  ModifyGateBJ(1, gv_alb);
  gv_acz = GetRectCenter(gv_aey);
  PingMinimapLocForForce(bj_FORCE_ALL_PLAYERS, gv_acz, 3);
  RemoveLocation(gv_acz);
}
function f_bhV() {
  gv_acz = GetDestructableLoc(gv_alc);
  ModifyGateBJ(1, gv_alc);
  PingMinimapLocForForce(bj_FORCE_ALL_PLAYERS, gv_acz, 3);
  RemoveLocation(gv_acz);
}
function f_bhW() {
  var lv_bhX = GetEventDamageSource();
  var lv_bhY = GetTriggerUnit();
  var lv_bhZ = GetRandomReal(0.0, 100);
  if (
    (GetInventoryIndexOfItemTypeBJ(lv_bhX, "tbar") > 0 && 5 > lv_bhZ) ||
    (GetInventoryIndexOfItemTypeBJ(lv_bhX, "tbsm") > 0 && 10 > lv_bhZ)
  ) {
    SetUnitX(gv_amo, GetUnitX(lv_bhY));
    SetUnitY(gv_amo, GetUnitY(lv_bhY));
    IssueTargetOrderById(gv_amo, 852190, lv_bhY);
  }
  lv_bhX = null;
  lv_bhY = null;
  return false;
}
function f_bia() {
  var lv_bib = GetEventDamageSource();
  if (GetInventoryIndexOfItemTypeBJ(lv_bib, "bzbf") > 0) {
    SetUnitState(
      lv_bib,
      UNIT_STATE_MANA,
      GetUnitState(lv_bib, UNIT_STATE_MANA) + GetEventDamage() * 0.15
    );
    DestroyEffect(AddSpecialEffectTarget(gv_amj, lv_bib, "origin"));
  }
  lv_bib = null;
  return false;
}
function f_bic() {
  var lv_bid = GetEventDamageSource();
  if (
    GetInventoryIndexOfItemTypeBJ(lv_bid, "btst") > 0 &&
    GetRandomInt(0, 100) < 11 * f_azo(lv_bid)
  ) {
    UnitDamageTarget(
      lv_bid,
      GetTriggerUnit(),
      400 * f_azm(lv_bid),
      true,
      false,
      ATTACK_TYPE_HERO,
      DAMAGE_TYPE_NORMAL,
      null
    );
    f_aLR(
      null,
      "400",
      255,
      50,
      25,
      GetUnitX(GetTriggerUnit()),
      GetUnitY(GetTriggerUnit()),
      0.061,
      0.0,
      3,
      9
    );
    DestroyEffect(AddSpecialEffectTarget(gv_amk, GetTriggerUnit(), "origin"));
    f_azN(lv_bid, 400 * f_azo(lv_bid));
  }
  lv_bid = null;
  return false;
}
function f_bie() {
  var lv_bif = GetTriggerUnit();
  var lv_big = GetSpellAbilityId();
  f_aBp(0.1);
  if (
    lv_big == "A047" ||
    lv_big == "A03U" ||
    lv_big == "A049" ||
    lv_big == "A05O"
  ) {
    if (f_ays(lv_bif) < 3) {
      f_azL(lv_bif);
      lv_bif = null;
      return;
    }
  }
  if (GetInventoryIndexOfItemTypeBJ(lv_bif, "bfhr") > 0) {
    DestroyEffect(AddSpecialEffectTarget(gv_aml, lv_bif, "origin"));
    SetUnitState(
      lv_bif,
      UNIT_STATE_MANA,
      GetUnitState(lv_bif, UNIT_STATE_MANA) +
        GetUnitState(lv_bif, UNIT_STATE_MAX_MANA) * 0.025
    );
  }
  if (GetInventoryIndexOfItemTypeBJ(lv_bif, "tmsc") > 0) {
    DestroyEffect(AddSpecialEffectTarget(gv_aml, lv_bif, "origin"));
    SetUnitState(
      lv_bif,
      UNIT_STATE_MANA,
      GetUnitState(lv_bif, UNIT_STATE_MANA) +
        GetUnitState(lv_bif, UNIT_STATE_MAX_MANA) * 0.04 * f_azm(lv_bif)
    );
  }
  if (GetInventoryIndexOfItemTypeBJ(lv_bif, "tgxp") > 0) {
    DestroyEffect(AddSpecialEffectTarget(gv_aml, lv_bif, "origin"));
    SetUnitState(
      lv_bif,
      UNIT_STATE_MANA,
      GetUnitState(lv_bif, UNIT_STATE_MANA) +
        GetUnitState(lv_bif, UNIT_STATE_MAX_MANA) * 0.025 * f_azm(lv_bif)
    );
  }
  if (GetInventoryIndexOfItemTypeBJ(lv_bif, "jpnt") > 0) {
    DestroyEffect(AddSpecialEffectTarget(gv_aml, lv_bif, "origin"));
    SetUnitState(
      lv_bif,
      UNIT_STATE_MANA,
      GetUnitState(lv_bif, UNIT_STATE_MANA) +
        GetUnitState(lv_bif, UNIT_STATE_MAX_MANA) * 0.03 * f_azm(lv_bif)
    );
  }
  lv_bif = null;
}
function f_bih() {
  var lv_bii = GetTriggerUnit();
  if (GetInventoryIndexOfItemTypeBJ(lv_bii, "fwss") > 0) {
    DestroyEffect(AddSpecialEffectTarget(gv_amm, lv_bii, "origin"));
    IssueTargetOrderById(gv_amo, 852075, GetAttacker());
    SetUnitPosition(gv_amo, GetUnitX(GetAttacker()), GetUnitY(GetAttacker()));
  }
  lv_bii = null;
  return false;
}
function f_bij() {
  var lv_bik = GetEventDamageSource();
  if (
    GetInventoryIndexOfItemTypeBJ(lv_bik, "ches") > 0 &&
    GetRandomInt(0, 100) < 11 * f_azm(lv_bik)
  ) {
    UnitDamageTarget(
      lv_bik,
      GetTriggerUnit(),
      450 * f_azm(lv_bik),
      true,
      false,
      ATTACK_TYPE_HERO,
      DAMAGE_TYPE_NORMAL,
      null
    );
    DestroyEffect(AddSpecialEffectTarget(gv_amn, GetTriggerUnit(), "origin"));
  }
  lv_bik = null;
  return false;
}
function f_bil() {
  var lv_bim = GetEventDamageSource();
  var gv_aaj;
  if (
    GetInventoryIndexOfItemTypeBJ(lv_bim, "bzbe") > 0 &&
    GetRandomInt(0, 100) < 10 * f_azm(lv_bim)
  ) {
    gv_aaj = 800 * f_azo(lv_bim);
    if (GetUnitAbilityLevel(lv_bim, "A056") > 0) {
      gv_aaj =
        gv_aaj *
        (1 +
          0.06 *
            GetUnitAbilityLevel(lv_bim, "A056") *
            f_azm(lv_bim) *
            f_azm(lv_bim));
    }
    if (
      GetInventoryIndexOfItemTypeBJ(lv_bim, "mnsf") +
        GetInventoryIndexOfItemTypeBJ(lv_bim, "rej1") +
        GetInventoryIndexOfItemTypeBJ(lv_bim, "stre") +
        GetInventoryIndexOfItemTypeBJ(lv_bim, "stwa") >
      0
    ) {
      gv_aaj = gv_aaj * 1.3 * f_azq(lv_bim);
    }
    f_aLR(
      null,
      "800",
      255,
      50,
      25,
      GetUnitX(GetTriggerUnit()),
      GetUnitY(GetTriggerUnit()),
      0.061,
      0.0,
      3,
      9
    );
    UnitDamageTarget(
      lv_bim,
      GetTriggerUnit(),
      gv_aaj * f_azo(lv_bim),
      true,
      false,
      ATTACK_TYPE_HERO,
      DAMAGE_TYPE_NORMAL,
      null
    );
    f_azN(lv_bim, gv_aaj * f_azo(lv_bim));
    DestroyEffect(AddSpecialEffectTarget(gv_ami, GetTriggerUnit(), "origin"));
  }
  lv_bim = null;
  return false;
}
function f_bin() {
  var lv_bio = GetTriggerUnit();
  var lv_bip = GetPlayerId(GetOwningPlayer(GetAttacker()));
  if (
    GetInventoryIndexOfItemTypeBJ(lv_bio, "wolg") +
      GetInventoryIndexOfItemTypeBJ(lv_bio, "I018") +
      GetInventoryIndexOfItemTypeBJ(lv_bio, "I01A") +
      GetInventoryIndexOfItemTypeBJ(lv_bio, "I01B") +
      GetInventoryIndexOfItemTypeBJ(lv_bio, "I015") >
    0
  ) {
    DestroyEffect(AddSpecialEffectTarget(gv_ams, lv_bio, "origin"));
    SetUnitPosition(gv_amt, GetUnitX(GetAttacker()), GetUnitY(GetAttacker()));
    IssueTargetOrderById(gv_amt, 852075, GetAttacker());
  }
  if (lv_bip < 9 && GetAttacker() == gv_ale[lv_bip]) {
    gv_aaT[lv_bip] = GetTriggerUnit();
  }
  lv_bio = null;
  return false;
}
function f_biq() {
  var lv_bir = GetEventDamageSource();
  if (
    GetRandomReal(0.0, 100) < 7 * f_azo(lv_bir) &&
    (UnitHasItemOfTypeBJ(lv_bir, "ccmd") ||
      UnitHasItemOfTypeBJ(lv_bir, "rots")) &&
    1 == 0
  ) {
    SetUnitAbilityLevel(gv_amo, "A06E", GetUnitAbilityLevel(lv_bir, "A06E"));
    SetUnitOwner(gv_amo, GetOwningPlayer(lv_bir), false);
    SetUnitX(gv_amo, GetUnitX(GetTriggerUnit()));
    SetUnitY(gv_amo, GetUnitY(GetTriggerUnit()));
    IssueTargetOrderById(gv_amo, 852171, GetTriggerUnit());
    UnitResetCooldown(gv_amo);
    f_aLz(AddSpecialEffectTarget(gv_amp, lv_bir, "origin"), 0.1);
  }
  lv_bir = null;
  return false;
}
function f_bis() {
  var lv_bit = GetEventDamageSource();
  if (
    GetRandomReal(0.0, 100) < 7.5 * f_azm(lv_bit) &&
    GetInventoryIndexOfItemTypeBJ(lv_bit, "oslo") +
      GetInventoryIndexOfItemTypeBJ(lv_bit, "oven") >
      0
  ) {
    SetUnitX(gv_amo, GetUnitX(GetTriggerUnit()));
    SetUnitY(gv_amo, GetUnitY(GetTriggerUnit()));
    IssueTargetOrderById(gv_amo, 852231, GetTriggerUnit());
    f_aLz(AddSpecialEffectTarget(gv_amq, lv_bit, "origin"), 0.1);
    if (f_aMn(GetEventDamage() * 1.5) > 0.0) {
      UnitDamageTarget(
        gv_amt,
        GetTriggerUnit(),
        GetEventDamage() * 1.25 * f_azo(lv_bit),
        true,
        true,
        ATTACK_TYPE_HERO,
        DAMAGE_TYPE_NORMAL,
        null
      );
      f_aLR(
        null,
        I2S(f_aMn(GetEventDamage() * 1.5)) + "!",
        255,
        0,
        0,
        GetUnitX(lv_bit),
        GetUnitY(lv_bit),
        0.077,
        0.0,
        3,
        12.5
      );
    }
  }
  lv_bit = null;
  return false;
}
function f_biu() {
  var lv_biv = GetEventDamageSource();
  var lv_biw = 2.5;
  if (
    GetRandomReal(0.0, 100) < 7 * f_azm(lv_biv) &&
    (UnitHasItemOfTypeBJ(lv_biv, "mnsf") || UnitHasItemOfTypeBJ(lv_biv, "rej1"))
  ) {
    if (UnitHasItemOfTypeBJ(lv_biv, "rej1")) {
      lv_biw = 4;
    }
    UnitDamageTarget(
      gv_amt,
      GetTriggerUnit(),
      GetEventDamage() * lv_biw * f_azm(lv_biv),
      true,
      true,
      ATTACK_TYPE_CHAOS,
      DAMAGE_TYPE_NORMAL,
      null
    );
    f_azN(lv_biv, GetEventDamage() * lv_biw * f_azm(lv_biv));
    f_aLR(
      null,
      I2S(f_aMn(GetEventDamage() * lv_biw)) + "!",
      255,
      0,
      0,
      GetUnitX(lv_biv),
      GetUnitY(lv_biv),
      0.077,
      0.0,
      3,
      12.5
    );
  }
  lv_biv = null;
  return false;
}
function f_bix() {
  var lv_biy = GetEventDamageSource();
  var lv_biz;
  if (
    GetInventoryIndexOfItemTypeBJ(lv_biy, "shcw") +
      GetInventoryIndexOfItemTypeBJ(lv_biy, "shtm") >
    0
  ) {
    if (
      (GetTimeOfDay() > 18 && GetTimeOfDay() < 0.24) ||
      (GetTimeOfDay() > 0.0 && GetTimeOfDay() < 0.8)
    ) {
      if (GetRandomReal(0.0, 100) < 4 * f_azm(lv_biy)) {
        BlzEndUnitAbilityCooldown(lv_biy, "A03Q");
        BlzEndUnitAbilityCooldown(lv_biy, "A06R");
        BlzEndUnitAbilityCooldown(lv_biy, "A074");
        f_aLz(AddSpecialEffectTarget(gv_amr, lv_biy, "overhead"), 0.2);
      }
    } else {
      if (GetRandomReal(0.0, 100) < 2 * f_azm(lv_biy)) {
        BlzEndUnitAbilityCooldown(lv_biy, "A03Q");
        BlzEndUnitAbilityCooldown(lv_biy, "A06R");
        BlzEndUnitAbilityCooldown(lv_biy, "A074");
        f_aLz(AddSpecialEffectTarget(gv_amr, lv_biy, "overhead"), 0.2);
      }
    }
  }
  lv_biy = null;
  return false;
}
function f_biA() {
  var lv_biB = GetEventDamageSource();
  var lv_biC = 1 * f_azo(lv_biB);
  if (UnitHasItemOfTypeBJ(lv_biB, "I061")) {
    if (
      IsUnitType(GetTriggerUnit(), UNIT_TYPE_HERO) == false &&
      IsUnitType(GetTriggerUnit(), UNIT_TYPE_GIANT) == false
    ) {
      lv_biC = lv_biC * 2.5;
    }
    if (GetRandomReal(0, 100) < 2 * lv_biC) {
      SetUnitState(
        GetTriggerUnit(),
        UNIT_STATE_LIFE,
        GetUnitState(GetTriggerUnit(), UNIT_STATE_LIFE) * (1 - 0.05 * lv_biC)
      );
    }
  }
  lv_biB = null;
  return false;
}
function f_biD() {
  var lv_biE = GetEventDamageSource();
  if (UnitHasItemOfTypeBJ(lv_biE, "I065")) {
    UnitDamageTarget(
      gv_amt,
      GetTriggerUnit(),
      GetWidgetLife(lv_biE) * 0.035 * f_azm(lv_biE),
      true,
      false,
      ATTACK_TYPE_HERO,
      DAMAGE_TYPE_NORMAL,
      null
    );
    f_azN(lv_biE, GetWidgetLife(lv_biE) * 0.035 * f_azm(lv_biE));
    f_aLR(
      null,
      "+" + I2S(f_aMn(GetWidgetLife(lv_biE) * 0.035)),
      255,
      25,
      25,
      GetUnitX(lv_biE) + 50,
      GetUnitY(lv_biE),
      0.077,
      0.0,
      3,
      12.5
    );
  }
  lv_biE = null;
  return false;
}
function f_biF() {
  var lv_biG = GetTriggerUnit();
  if (GetUnitAbilityLevel(lv_biG, "Buhf") > 0) {
    SetWidgetLife(lv_biG, GetWidgetLife(lv_biG) - GetEventDamage() * 0.4);
  }
  lv_biG = null;
  return false;
}
function f_biH() {
  var lv_biI = 0;
  var lv_biJ;
  var lv_biK;
  var lv_biL;
  var lv_biM;
  do {
    if (lv_biI > 7) {
      break;
    }
    if (f_aJz(lv_biI, "I04U")) {
      if (GetRandomInt(1, 12) == 1) {
        lv_biJ = 1;
        do {
          if (lv_biJ > 12) {
            break;
          }
          if (lv_biI < 8) {
            lv_biK = GetUnitX(gv_ale[lv_biI]);
            lv_biL = GetUnitY(gv_ale[lv_biI]);
            lv_biM = CreateUnit(Player(lv_biI), "n00T", lv_biK, lv_biL, 0.0);
          } else {
            lv_biK = GetUnitX(gv_ale[lv_biI - 8]);
            lv_biL = GetUnitY(gv_ale[lv_biI - 8]);
            lv_biM = CreateUnit(
              Player(lv_biI - 8),
              "n00T",
              lv_biK,
              lv_biL,
              0.0
            );
          }
          UnitApplyTimedLife(lv_biM, "BTLF", I2R(GetRandomInt(20, 30)));
          lv_biK =
            lv_biK +
            GetRandomInt(200, 300) *
              Cos(lv_biJ * GetRandomInt(45, 75) * bj_DEGTORAD);
          lv_biL =
            lv_biL +
            GetRandomInt(200, 300) *
              Sin(lv_biJ * GetRandomInt(45, 75) * bj_DEGTORAD);
          IssuePointOrderById(lv_biM, gv_aas, lv_biK, lv_biL);
          lv_biJ = lv_biJ + 1;
        } while (true);
      }
    }
    if (f_aJz(lv_biI, "I06C")) {
      if (GetRandomInt(1, 12) == 1) {
        lv_biJ = GetRandomInt(1, 3);
        if (lv_biJ == 1) {
          DestroyEffect(
            AddSpecialEffectTarget(
              "Objects\\Spawnmodels\\Demon\\InfernalMeteor\\InfernalMeteor.mdl",
              gv_ale[lv_biI],
              "origin"
            )
          );
        }
        if (lv_biJ == 2) {
          DestroyEffect(
            AddSpecialEffectTarget(
              "Objects\\Spawnmodels\\Demon\\InfernalMeteor\\InfernalMeteor2.mdl",
              gv_ale[lv_biI],
              "origin"
            )
          );
        }
        if (lv_biJ == 3) {
          DestroyEffect(
            AddSpecialEffectTarget(
              "Objects\\Spawnmodels\\Demon\\InfernalMeteor\\InfernalMeteor3.mdl",
              gv_ale[lv_biI],
              "origin"
            )
          );
        }
      }
    }
    lv_biI = lv_biI + 1;
  } while (true);
  lv_biM = null;
}
function f_biN() {
  SetUnitPosition(gv_amv, GetUnitX(GetEnumUnit()), GetUnitY(GetEnumUnit()));
  IssueTargetOrderById(gv_amv, 852095, GetEnumUnit());
  UnitDamageTarget(
    gv_amv,
    GetEnumUnit(),
    gv_aaj,
    false,
    true,
    ATTACK_TYPE_CHAOS,
    DAMAGE_TYPE_UNIVERSAL,
    null
  );
}
function f_biO() {
  return (
    GetWidgetLife(GetFilterUnit()) > 0.405 &&
    IsUnitEnemy(GetFilterUnit(), GetOwningPlayer(GetAttacker()))
  );
}
function f_biP() {
  var lv_biQ = GetAttacker();
  var lv_biR = 0;
  if (UnitHasItemOfTypeBJ(lv_biQ, "klmm")) {
    lv_biR = 4;
  } else {
    if (UnitHasItemOfTypeBJ(lv_biQ, "rej2")) {
      lv_biR = 6;
    }
  }
  if (GetRandomReal(0.0, 100) < lv_biR * f_azo(lv_biQ)) {
    SetUnitOwner(gv_amv, GetOwningPlayer(lv_biQ), false);
    f_aLz(AddSpecialEffect(gv_amw, GetUnitX(lv_biQ), GetUnitY(lv_biQ)), 1);
    GroupClear(gv_abu);
    gv_aaj = 300 * f_azo(lv_biQ);
    GroupEnumUnitsInRange(
      gv_abu,
      GetUnitX(lv_biQ),
      GetUnitY(lv_biQ),
      200 * f_azo(lv_biQ),
      Condition(f_biO)
    );
    ForGroup(gv_abu, f_biN);
    f_aIl(gv_abu);
  }
  lv_biQ = null;
  return false;
}
function f_biS() {
  var lv_biT = CreateTrigger();
  TriggerRegisterAnyUnitEventBJ(lv_biT, EVENT_PLAYER_UNIT_ATTACKED);
  TriggerAddCondition(lv_biT, Condition(f_biP));
  gv_amv = CreateUnit(Player(0), gv_acf, 0.0, 0.0, 0.0);
  UnitAddAbility(gv_amv, "A08Y");
  Preload(gv_amw);
}
function f_biU() {
  return (
    IsUnitInRange(GetFilterUnit(), bj_ghoul[26], 200) &&
    GetWidgetLife(GetFilterUnit()) > 0.405 &&
    !IsUnitInGroup(GetFilterUnit(), bj_randomSubGroupGroup) &&
    IsUnitEnemy(GetFilterUnit(), GetOwningPlayer(bj_ghoul[26]))
  );
}
function f_biV() {
  var lv_biW = GetEventDamageSource();
  var lv_biX = GetUnitFacing(lv_biW) * bj_DEGTORAD;
  var lv_biY = GetUnitX(lv_biW) + 900 * Cos(lv_biX);
  var lv_biZ = GetUnitY(lv_biW) + 900 * Sin(lv_biX);
  var lv_bja = f_aHr(
    CreateUnit(
      GetOwningPlayer(lv_biW),
      "h00I",
      GetUnitX(lv_biW),
      GetUnitY(lv_biW),
      GetUnitFacing(lv_biW)
    ),
    lv_biY,
    lv_biZ,
    22,
    0.02
  );
  gv_avv[lv_bja] = f_aIn();
  if (1 == 1) {
  } else {
    if (gv_aaT[GetPlayerId(GetOwningPlayer(lv_biW))] == GetTriggerUnit()) {
      gv_avw[lv_bja] =
        (GetEventDamage() + GetHeroStr(lv_biW, true)) * 1.5 * f_azm(lv_biW);
      DisplayTimedTextToPlayer(GetOwningPlayer(lv_biW), 0, 0, 3, "atk-d");
    } else {
      gv_avw[lv_bja] =
        (GetEventDamage() + GetHeroStr(lv_biW, true) * 0.2) *
        1.5 *
        f_azm(lv_biW);
      DisplayTimedTextToPlayer(GetOwningPlayer(lv_biW), 0, 0, 3, "reflect-d");
    }
  }
  lv_biW = null;
  return lv_bja;
}
function f_bjb() {
  var lv_bjc = GetEventDamageSource();
  if (
    GetRandomReal(0.0, 100) < 9 * f_azo(lv_bjc) &&
    (UnitHasItemOfTypeBJ(lv_bjc, "flag") || UnitHasItemOfTypeBJ(lv_bjc, "sfog"))
  ) {
    f_aLz(
      AddSpecialEffect(
        "Abilities\\Spells\\Other\\HowlOfTerror\\HowlCaster.mdl",
        GetUnitX(lv_bjc),
        GetUnitY(lv_bjc)
      ),
      1
    );
    f_biV();
  }
  lv_bjc = null;
  return false;
}
function f_bjd(lv_bje) {
  var lv_bjf = f_aHz(
    CreateUnit(
      GetOwningPlayer(GetEventDamageSource()),
      "h00J",
      GetUnitX(GetTriggerUnit()),
      GetUnitY(GetTriggerUnit()),
      0.0
    ),
    GetUnitX(lv_bje),
    GetUnitY(lv_bje),
    15,
    0.02
  );
  gv_avx[lv_bjf] = lv_bje;
  return lv_bjf;
}
function f_bjg() {
  return (
    !f_aLK(GetFilterUnit()) &&
    IsUnitEnemy(GetFilterUnit(), GetOwningPlayer(GetEventDamageSource())) &&
    GetWidgetLife(GetFilterUnit()) > 0.405 &&
    IsUnitInRange(GetFilterUnit(), GetTriggerUnit(), 600)
  );
}
function f_bjh() {
  var lv_bji;
  var lv_bjj = GetPlayerId(GetOwningPlayer(GetEventDamageSource()));
  if (lv_bjj > 8) {
    return false;
  } else {
    if (GetEventDamageSource() == gv_amx) {
      return false;
    }
  }
  if (UnitHasItemOfTypeBJ(gv_ale[lv_bjj], "rde0")) {
    lv_bji = GetRandomInt(0, 100);
  } else {
    if (UnitHasItemOfTypeBJ(gv_ale[lv_bjj], "rnsp")) {
      lv_bji = GetRandomInt(0, 70);
    } else {
      return false;
    }
  }
  if (lv_bji < 7.5 * gv_aan[lv_bjj]) {
    SetUnitPosition(
      gv_amx,
      GetUnitX(GetTriggerUnit()),
      GetUnitY(GetTriggerUnit())
    );
    SetUnitOwner(gv_amx, Player(lv_bjj), false);
    IssueTargetOrderById(gv_amx, 852226, GetTriggerUnit());
    GroupClear(gv_abu);
    GroupEnumUnitsInRange(
      gv_abu,
      GetUnitX(GetTriggerUnit()),
      GetUnitY(GetTriggerUnit()),
      700,
      Condition(f_bjg)
    );
    bj_groupRandomConsidered = 0;
    bj_groupRandomCurrentPick = null;
    ForGroup(gv_abu, GroupPickRandomUnitEnum);
    if (bj_groupRandomCurrentPick != null) {
      f_bjd(bj_groupRandomCurrentPick);
    }
    f_aIl(gv_abu);
  }
  return false;
}
function f_bjk() {
  var lv_bjl = LoadInteger(gv_abL, 0, GetHandleId(GetExpiredTimer()));
  gv_ald[gv_avD.getInt(lv_bjl)] =
    gv_ald[gv_avD.getInt(lv_bjl)] - gv_avB[lv_bjl];
  gv_ald[gv_avD.getInt(lv_bjl) + 8] =
    gv_ald[gv_avD.getInt(lv_bjl) + 8] - gv_avC[lv_bjl];
  f_aIM(GetExpiredTimer());
  f_aCD(lv_bjl);
}
function f_bjm() {
  return GetSpellAbilityId() == "A08Z";
}
function f_bjn() {
  var lv_bjo = f_aCB();
  var lv_bjp = f_aIL();
  gv_avD[lv_bjo] = GetPlayerId(GetOwningPlayer(GetTriggerUnit()));
  gv_avB[lv_bjo] =
    gv_ald[gv_avD.getInt(lv_bjo)] * 0.4 * gv_aan[gv_avD.getInt(lv_bjo)];
  gv_avC[lv_bjo] =
    gv_ald[gv_avD.getInt(lv_bjo) + 8] * 0.4 * gv_aan[gv_avD.getInt(lv_bjo)];
  gv_ald[gv_avD.getInt(lv_bjo)] =
    gv_ald[gv_avD.getInt(lv_bjo)] + gv_avB[lv_bjo];
  gv_ald[gv_avD.getInt(lv_bjo) + 8] =
    gv_ald[gv_avD.getInt(lv_bjo) + 8] + gv_avC[lv_bjo];
  SaveInteger(gv_abL, 0, GetHandleId(lv_bjp), lv_bjo);
  TimerStart(lv_bjp, 30 * gv_aan[gv_avD.getInt(lv_bjo)], false, f_bjk);
  lv_bjp = null;
}
function f_bjq() {
  return GetIssuedOrderId() > 852001 && GetIssuedOrderId() < 852008;
}
function f_bjr() {
  var lv_bjs = GetItemCharges(GetOrderTargetItem());
  var lv_bjt = GetIssuedOrderId() - 852002;
  var lv_bju = GetOrderedUnit();
  var lv_bjv;
  if (GetOrderTargetItem() == UnitItemInSlot(lv_bju, lv_bjt)) {
    if (lv_bjs > 1) {
      lv_bjs = R2I(lv_bjs / 2);
      SetItemCharges(
        GetOrderTargetItem(),
        GetItemCharges(GetOrderTargetItem()) - lv_bjs
      );
      gv_alg[380 + GetPlayerId(GetOwningPlayer(lv_bju))] = 1;
      lv_bjv = UnitAddItemByIdSwapped(
        GetItemTypeId(GetOrderTargetItem()),
        lv_bju
      );
      SetItemPlayer(lv_bjv, GetOwningPlayer(lv_bju), false);
      gv_alg[380 + GetPlayerId(GetOwningPlayer(lv_bju))] = 0;
      SetItemCharges(lv_bjv, lv_bjs);
    }
  } else {
    if (
      lv_bjs > 0 &&
      GetItemTypeId(GetOrderTargetItem()) ==
        GetItemTypeId(UnitItemInSlot(lv_bju, lv_bjt))
    ) {
      lv_bjs =
        GetItemCharges(GetOrderTargetItem()) +
        GetItemCharges(UnitItemInSlot(lv_bju, lv_bjt));
      if (lv_bjs < 8) {
        SetItemCharges(GetOrderTargetItem(), lv_bjs);
        RemoveItem(UnitItemInSlot(lv_bju, lv_bjt));
      } else {
        SetItemCharges(GetOrderTargetItem(), 7);
        SetItemCharges(UnitItemInSlot(lv_bju, lv_bjt), lv_bjs - 7);
      }
    }
  }
  lv_bju = null;
  lv_bjv = null;
}
function f_bjw() {
  var lv_bjx = GetExpiredTimer();
  var lv_bjy = LoadInteger(gv_abL, 0, GetHandleId(lv_bjx));
  var lv_bjz = CreateItem(
    gv_alg.getInt(lv_bjy + 160),
    GetUnitX(gv_ale[lv_bjy]),
    GetUnitY(gv_ale[lv_bjy])
  );
  DisplayTextToPlayer(
    GetOwningPlayer(gv_ale[lv_bjy]),
    0,
    0,
    "|cffffcc00It's a success!"
  );
  PauseUnit(gv_ale[lv_bjy], false);
  SetItemPlayer(lv_bjz, Player(lv_bjy), false);
  UnitAddItem(gv_ale[lv_bjy], lv_bjz);
  SetItemUserData(lv_bjz, lv_bjy + 1);
  f_aIM(lv_bjx);
  lv_bjx = null;
  lv_bjz = null;
}
function f_bjA() {
  var lv_bjB = GetOwningPlayer(GetTriggerUnit());
  var lv_bjC = GetPlayerId(lv_bjB);
  var lv_bjD = [];
  var lv_bjE =
    S2I(SubString(GetItemName(GetManipulatedItem()), 3, 6)) * 34 + 966;
  var lv_bjF = 0;
  var lv_bjG = 0;
  var lv_bjH = gv_alg.getInt(lv_bjE + 30);
  var lv_bjI = true;
  var lv_bjJ = false;
  var lv_bjK;
  var lv_bjL = 0;
  var lv_bjM = false;
  var lv_bjN = 0;
  var lv_bjO = [];
  var lv_bjP = [];
  lv_bjD[1] = gv_ale[lv_bjC];
  lv_bjD[2] = gv_ale[8 + lv_bjC];
  lv_bjD[3] = gv_ale[40 + lv_bjC];
  do {
    if (lv_bjG == lv_bjH || lv_bjI == false) {
      break;
    }
    lv_bjL = gv_alg.getInt(lv_bjE + lv_bjG);
    lv_bjM = gv_alg.getInt(lv_bjE + lv_bjG + 10) == 1;
    lv_bjN = gv_alg.getInt(lv_bjE + lv_bjG + 20);
    lv_bjG = lv_bjG + 1;
    lv_bjJ = false;
    do {
      if (lv_bjF > 5 || lv_bjJ) {
        break;
      }
      lv_bjK = UnitItemInSlot(lv_bjD[1], lv_bjF);
      if (GetItemTypeId(lv_bjK) == lv_bjL) {
        if (!lv_bjM) {
          lv_bjO[lv_bjG] = lv_bjK;
          lv_bjP[lv_bjG] = lv_bjD[1];
          UnitRemoveItem(lv_bjD[1], lv_bjK);
          lv_bjJ = true;
          if (true) {
            break;
          }
        } else {
          if (GetItemCharges(lv_bjK) >= lv_bjN) {
            lv_bjO[lv_bjG] = lv_bjK;
            lv_bjP[lv_bjG] = lv_bjD[1];
            UnitRemoveItem(lv_bjD[1], lv_bjK);
            lv_bjJ = true;
            if (true) {
              break;
            }
          }
        }
      }
      lv_bjF = lv_bjF + 1;
    } while (true);
    lv_bjF = 0;
    do {
      if (lv_bjF > 5 || lv_bjJ) {
        break;
      }
      lv_bjK = UnitItemInSlot(lv_bjD[2], lv_bjF);
      if (GetItemTypeId(lv_bjK) == lv_bjL) {
        if (!lv_bjM) {
          lv_bjO[lv_bjG] = lv_bjK;
          lv_bjP[lv_bjG] = lv_bjD[2];
          UnitRemoveItem(lv_bjD[2], lv_bjK);
          lv_bjJ = true;
          if (true) {
            break;
          }
        } else {
          if (GetItemCharges(lv_bjK) >= lv_bjN) {
            lv_bjO[lv_bjG] = lv_bjK;
            lv_bjP[lv_bjG] = lv_bjD[2];
            UnitRemoveItem(lv_bjD[2], lv_bjK);
            lv_bjJ = true;
            if (true) {
              break;
            }
          }
        }
      }
      lv_bjF = lv_bjF + 1;
    } while (true);
    lv_bjF = 0;
    do {
      if (lv_bjF > 5 || lv_bjJ) {
        break;
      }
      lv_bjK = UnitItemInSlot(lv_bjD[3], lv_bjF);
      if (GetItemTypeId(lv_bjK) == lv_bjL) {
        if (!lv_bjM) {
          lv_bjO[lv_bjG] = lv_bjK;
          lv_bjP[lv_bjG] = lv_bjD[3];
          UnitRemoveItem(lv_bjD[3], lv_bjK);
          lv_bjJ = true;
          if (true) {
            break;
          }
        } else {
          if (GetItemCharges(lv_bjK) >= lv_bjN) {
            lv_bjO[lv_bjG] = lv_bjK;
            lv_bjP[lv_bjG] = lv_bjD[3];
            UnitRemoveItem(lv_bjD[3], lv_bjK);
            lv_bjJ = true;
            if (true) {
              break;
            }
          }
        }
      }
      lv_bjF = lv_bjF + 1;
    } while (true);
    lv_bjF = 0;
    lv_bjI = lv_bjJ;
  } while (true);
  if (!lv_bjI) {
    f_aLO(lv_bjB, "You are missing components.");
    lv_bjG = 1;
    do {
      if (lv_bjG > lv_bjH) {
        break;
      }
      UnitAddItem(lv_bjP[lv_bjG], lv_bjO[lv_bjG]);
      lv_bjG = lv_bjG + 1;
    } while (true);
    SetPlayerState(
      lv_bjB,
      PLAYER_STATE_RESOURCE_GOLD,
      GetPlayerState(gv_alu, PLAYER_STATE_RESOURCE_GOLD) +
        LoadInteger(
          gv_abH,
          gv_abX,
          StringHash(GetItemName(GetManipulatedItem()))
        )
    );
    SetPlayerState(
      lv_bjB,
      PLAYER_STATE_RESOURCE_LUMBER,
      GetPlayerState(gv_alu, PLAYER_STATE_RESOURCE_LUMBER) +
        LoadInteger(
          gv_abH,
          gv_abY,
          StringHash(GetItemName(GetManipulatedItem()))
        )
    );
  } else {
    lv_bjG = 1;
    do {
      if (lv_bjG > lv_bjH) {
        break;
      }
      if (GetItemType(lv_bjO[lv_bjG]) != ITEM_TYPE_CHARGED) {
        RemoveItem(lv_bjO[lv_bjG]);
      } else {
        lv_bjN = gv_alg.getInt(lv_bjE + lv_bjG + 19);
        if (GetItemCharges(lv_bjO[lv_bjG]) == lv_bjN) {
          RemoveItem(lv_bjO[lv_bjG]);
        } else {
          SetItemCharges(
            lv_bjO[lv_bjG],
            GetItemCharges(lv_bjO[lv_bjG]) - lv_bjN
          );
          UnitAddItem(lv_bjP[lv_bjG], lv_bjO[lv_bjG]);
        }
      }
      lv_bjG = lv_bjG + 1;
    } while (true);
    PauseUnit(lv_bjD[1], true);
    gv_amy = CreateSound(
      "Buildings\\Human\\Blacksmith\\BlacksmithWhat1.wav",
      false,
      true,
      true,
      10,
      10,
      "SpellsEAX"
    );
    SetSoundChannel(gv_amy, 5);
    SetSoundDistances(gv_amy, 1000, 5000);
    SetSoundDistanceCutoff(gv_amy, 5000);
    SetSoundPosition(gv_amy, GetUnitX(lv_bjD[1]), GetUnitY(lv_bjD[1]), 0.0);
    SetSoundVolume(gv_amy, 127);
    StartSound(gv_amy);
    KillSoundWhenDone(gv_amy);
    gv_amz = f_aIL();
    SaveInteger(gv_abL, 0, GetHandleId(gv_amz), lv_bjC);
    gv_alg[lv_bjC + 160] = gv_alg.getInt(lv_bjE + 31);
    TimerStart(gv_amz, 2, false, f_bjw);
  }
  lv_bjG = 1;
  do {
    if (lv_bjG > lv_bjH) {
      break;
    }
    lv_bjO[lv_bjG] = null;
    lv_bjP[lv_bjG] = null;
    lv_bjG = lv_bjG + 1;
  } while (true);
  lv_bjB = null;
  lv_bjD[1] = null;
  lv_bjD[2] = null;
  lv_bjD[3] = null;
  lv_bjK = null;
}
function f_bjQ() {
  var lv_bjR = GetItemName(GetManipulatedItem());
  var lv_bjS = SubString(lv_bjR, 6, 7);
  var lv_bjT = S2I(SubString(lv_bjR, 7, 10));
  var lv_bjU = S2I(SubString(lv_bjR, 3, 6)) * 34 + 966;
  gv_alu = GetOwningPlayer(GetTriggerUnit());
  gv_alv = gv_ale[GetPlayerId(gv_alu)];
  if (GetItemType(GetManipulatedItem()) != ITEM_TYPE_PURCHASABLE) {
    return false;
  }
  if (lv_bjS != "A" && lv_bjS != SubString(GetUnitName(gv_alv), 2, 3)) {
    f_aLO(gv_alu, "You can't use this item.");
    SetPlayerState(
      gv_alu,
      PLAYER_STATE_RESOURCE_GOLD,
      GetPlayerState(gv_alu, PLAYER_STATE_RESOURCE_GOLD) +
        LoadInteger(
          gv_abH,
          gv_abX,
          StringHash(GetItemName(GetManipulatedItem()))
        )
    );
    SetPlayerState(
      gv_alu,
      PLAYER_STATE_RESOURCE_LUMBER,
      GetPlayerState(gv_alu, PLAYER_STATE_RESOURCE_LUMBER) +
        LoadInteger(
          gv_abH,
          gv_abY,
          StringHash(GetItemName(GetManipulatedItem()))
        )
    );
    return false;
  }
  if (GetHeroLevel(gv_alv) < lv_bjT) {
    f_aLO(gv_alu, "You are not experienced enough to use this item.");
    SetPlayerState(
      gv_alu,
      PLAYER_STATE_RESOURCE_GOLD,
      GetPlayerState(gv_alu, PLAYER_STATE_RESOURCE_GOLD) +
        LoadInteger(
          gv_abH,
          gv_abX,
          StringHash(GetItemName(GetManipulatedItem()))
        )
    );
    SetPlayerState(
      gv_alu,
      PLAYER_STATE_RESOURCE_LUMBER,
      GetPlayerState(gv_alu, PLAYER_STATE_RESOURCE_LUMBER) +
        LoadInteger(
          gv_abH,
          gv_abY,
          StringHash(GetItemName(GetManipulatedItem()))
        )
    );
    return false;
  }
  return true;
}
function f_bjV() {
  var lv_bjW = CreateTrigger();
  TriggerRegisterAnyUnitEventBJ(lv_bjW, EVENT_PLAYER_UNIT_PICKUP_ITEM);
  TriggerAddCondition(lv_bjW, Condition(f_bjQ));
  TriggerAddAction(lv_bjW, f_bjA);
}
function f_aPS() {
  gv_alg[1000] = "cnob";
  gv_alg[1001] = "wild";
  gv_alg[1011] = 1;
  gv_alg[1021] = 1;
  gv_alg[1002] = "srrc";
  gv_alg[1012] = 1;
  gv_alg[1022] = 1;
  gv_alg[1030] = 3;
  gv_alg[1031] = "rde1";
  gv_alg[1032] = 0;
  gv_alg[1033] = 0;
  gv_alg[1034] = "rat6";
  gv_alg[1035] = "fgsk";
  gv_alg[1045] = 1;
  gv_alg[1055] = 1;
  gv_alg[1036] = "srrc";
  gv_alg[1046] = 1;
  gv_alg[1056] = 1;
  gv_alg[1064] = 3;
  gv_alg[1065] = "rde2";
  gv_alg[1066] = 0;
  gv_alg[1067] = 0;
  gv_alg[1068] = "ratc";
  gv_alg[1069] = "fgdg";
  gv_alg[1079] = 1;
  gv_alg[1089] = 1;
  gv_alg[1070] = "srrc";
  gv_alg[1080] = 1;
  gv_alg[1090] = 1;
  gv_alg[1098] = 3;
  gv_alg[1099] = "rde3";
  gv_alg[1100] = 0;
  gv_alg[1101] = 0;
  gv_alg[1102] = "rde3";
  gv_alg[1103] = "wild";
  gv_alg[1113] = 1;
  gv_alg[1123] = 1;
  gv_alg[1104] = "srrc";
  gv_alg[1114] = 1;
  gv_alg[1124] = 1;
  gv_alg[1105] = "wswd";
  gv_alg[1115] = 1;
  gv_alg[1125] = 1;
  gv_alg[1132] = 4;
  gv_alg[1133] = "rlif";
  gv_alg[1134] = 0;
  gv_alg[1135] = 0;
  gv_alg[1136] = "rde1";
  gv_alg[1137] = "fgsk";
  gv_alg[1147] = 1;
  gv_alg[1157] = 1;
  gv_alg[1138] = "srrc";
  gv_alg[1148] = 1;
  gv_alg[1158] = 1;
  gv_alg[1139] = "wswd";
  gv_alg[1149] = 1;
  gv_alg[1159] = 1;
  gv_alg[1166] = 4;
  gv_alg[1167] = "ciri";
  gv_alg[1168] = 0;
  gv_alg[1169] = 0;
  gv_alg[1170] = "rde2";
  gv_alg[1171] = "fgdg";
  gv_alg[1181] = 1;
  gv_alg[1191] = 1;
  gv_alg[1172] = "srrc";
  gv_alg[1182] = 1;
  gv_alg[1192] = 1;
  gv_alg[1173] = "wswd";
  gv_alg[1183] = 1;
  gv_alg[1193] = 1;
  gv_alg[1200] = 4;
  gv_alg[1201] = "brac";
  gv_alg[1202] = 0;
  gv_alg[1203] = 0;
  gv_alg[1204] = "rlif";
  gv_alg[1205] = "wild";
  gv_alg[1215] = 1;
  gv_alg[1225] = 1;
  gv_alg[1206] = "fgsk";
  gv_alg[1216] = 1;
  gv_alg[1226] = 1;
  gv_alg[1207] = "srrc";
  gv_alg[1217] = 1;
  gv_alg[1227] = 1;
  gv_alg[1208] = "wswd";
  gv_alg[1218] = 1;
  gv_alg[1228] = 1;
  gv_alg[1209] = "fgrg";
  gv_alg[1219] = 1;
  gv_alg[1229] = 1;
  gv_alg[1234] = 6;
  gv_alg[1235] = "sbch";
  gv_alg[1236] = 0;
  gv_alg[1237] = 0;
  gv_alg[1238] = "ciri";
  gv_alg[1239] = "fgdg";
  gv_alg[1249] = 1;
  gv_alg[1259] = 1;
  gv_alg[1240] = "fgsk";
  gv_alg[1250] = 1;
  gv_alg[1260] = 1;
  gv_alg[1241] = "srrc";
  gv_alg[1251] = 1;
  gv_alg[1261] = 1;
  gv_alg[1242] = "wswd";
  gv_alg[1252] = 1;
  gv_alg[1262] = 1;
  gv_alg[1243] = "fgrg";
  gv_alg[1253] = 1;
  gv_alg[1263] = 1;
  gv_alg[1268] = 6;
  gv_alg[1269] = "rag1";
  gv_alg[1270] = 0;
  gv_alg[1271] = 0;
  gv_alg[1272] = "brac";
  gv_alg[1273] = "fgdg";
  gv_alg[1283] = 1;
  gv_alg[1293] = 1;
  gv_alg[1274] = "wild";
  gv_alg[1284] = 1;
  gv_alg[1294] = 1;
  gv_alg[1275] = "srrc";
  gv_alg[1285] = 1;
  gv_alg[1295] = 1;
  gv_alg[1276] = "wswd";
  gv_alg[1286] = 1;
  gv_alg[1296] = 1;
  gv_alg[1277] = "fgrg";
  gv_alg[1287] = 1;
  gv_alg[1297] = 1;
  gv_alg[1302] = 6;
  gv_alg[1303] = "rwiz";
  gv_alg[1304] = 0;
  gv_alg[1305] = 0;
  gv_alg[1306] = "hcun";
  gv_alg[1307] = "fgdg";
  gv_alg[1317] = 1;
  gv_alg[1327] = 1;
  gv_alg[1308] = "srrc";
  gv_alg[1318] = 1;
  gv_alg[1328] = 1;
  gv_alg[1336] = 3;
  gv_alg[1337] = "evtl";
  gv_alg[1338] = 0;
  gv_alg[1339] = 0;
  gv_alg[1340] = "gcel";
  gv_alg[1341] = "fgsk";
  gv_alg[1351] = 1;
  gv_alg[1361] = 1;
  gv_alg[1342] = "srrc";
  gv_alg[1352] = 1;
  gv_alg[1362] = 1;
  gv_alg[1370] = 3;
  gv_alg[1371] = "ssil";
  gv_alg[1372] = 0;
  gv_alg[1373] = 0;
  gv_alg[1374] = "gcel";
  gv_alg[1375] = "wild";
  gv_alg[1385] = 1;
  gv_alg[1395] = 1;
  gv_alg[1376] = "srrc";
  gv_alg[1386] = 1;
  gv_alg[1396] = 1;
  gv_alg[1404] = 3;
  gv_alg[1405] = "stel";
  gv_alg[1406] = 0;
  gv_alg[1407] = 0;
  gv_alg[1408] = "stel";
  gv_alg[1409] = "wild";
  gv_alg[1419] = 1;
  gv_alg[1429] = 1;
  gv_alg[1410] = "srrc";
  gv_alg[1420] = 1;
  gv_alg[1430] = 1;
  gv_alg[1411] = "wswd";
  gv_alg[1421] = 1;
  gv_alg[1431] = 1;
  gv_alg[1438] = 4;
  gv_alg[1439] = "lhst";
  gv_alg[1440] = 0;
  gv_alg[1441] = 0;
  gv_alg[1442] = "ssil";
  gv_alg[1443] = "fgsk";
  gv_alg[1453] = 1;
  gv_alg[1463] = 1;
  gv_alg[1444] = "srrc";
  gv_alg[1454] = 1;
  gv_alg[1464] = 1;
  gv_alg[1445] = "wswd";
  gv_alg[1455] = 1;
  gv_alg[1465] = 1;
  gv_alg[1472] = 4;
  gv_alg[1473] = "ward";
  gv_alg[1474] = 0;
  gv_alg[1475] = 0;
  gv_alg[1476] = "evtl";
  gv_alg[1477] = "fgsk";
  gv_alg[1487] = 1;
  gv_alg[1497] = 1;
  gv_alg[1478] = "srrc";
  gv_alg[1488] = 1;
  gv_alg[1498] = 1;
  gv_alg[1479] = "wswd";
  gv_alg[1489] = 1;
  gv_alg[1499] = 1;
  gv_alg[1506] = 4;
  gv_alg[1507] = "I000";
  gv_alg[1508] = 0;
  gv_alg[1509] = 0;
  gv_alg[1510] = "I000";
  gv_alg[1511] = "wild";
  gv_alg[1521] = 1;
  gv_alg[1531] = 1;
  gv_alg[1512] = "fgdg";
  gv_alg[1522] = 1;
  gv_alg[1532] = 1;
  gv_alg[1513] = "srrc";
  gv_alg[1523] = 1;
  gv_alg[1533] = 1;
  gv_alg[1514] = "wswd";
  gv_alg[1524] = 1;
  gv_alg[1534] = 1;
  gv_alg[1515] = "fgrg";
  gv_alg[1525] = 1;
  gv_alg[1535] = 1;
  gv_alg[1540] = 6;
  gv_alg[1541] = "I001";
  gv_alg[1542] = 0;
  gv_alg[1543] = 0;
  gv_alg[1544] = "ward";
  gv_alg[1545] = "fgsk";
  gv_alg[1555] = 1;
  gv_alg[1565] = 1;
  gv_alg[1546] = "fgdg";
  gv_alg[1556] = 1;
  gv_alg[1566] = 1;
  gv_alg[1547] = "srrc";
  gv_alg[1557] = 1;
  gv_alg[1567] = 1;
  gv_alg[1548] = "wswd";
  gv_alg[1558] = 1;
  gv_alg[1568] = 1;
  gv_alg[1549] = "fgrg";
  gv_alg[1559] = 1;
  gv_alg[1569] = 1;
  gv_alg[1574] = 6;
  gv_alg[1575] = "I002";
  gv_alg[1576] = 0;
  gv_alg[1577] = 0;
  gv_alg[1578] = "lhst";
  gv_alg[1579] = "fgsk";
  gv_alg[1589] = 1;
  gv_alg[1599] = 1;
  gv_alg[1580] = "wild";
  gv_alg[1590] = 1;
  gv_alg[1600] = 1;
  gv_alg[1581] = "srrc";
  gv_alg[1591] = 1;
  gv_alg[1601] = 1;
  gv_alg[1582] = "wswd";
  gv_alg[1592] = 1;
  gv_alg[1602] = 1;
  gv_alg[1583] = "fgrg";
  gv_alg[1593] = 1;
  gv_alg[1603] = 1;
  gv_alg[1608] = 6;
  gv_alg[1609] = "I003";
  gv_alg[1610] = 0;
  gv_alg[1611] = 0;
  gv_alg[1612] = "wild";
  gv_alg[1622] = 1;
  gv_alg[1632] = 1;
  gv_alg[1613] = "srrc";
  gv_alg[1623] = 1;
  gv_alg[1633] = 1;
  gv_alg[1614] = "pmna";
  gv_alg[1642] = 3;
  gv_alg[1643] = "I004";
  gv_alg[1644] = 0;
  gv_alg[1645] = 0;
  gv_alg[1646] = "fgsk";
  gv_alg[1656] = 1;
  gv_alg[1666] = 1;
  gv_alg[1647] = "srrc";
  gv_alg[1657] = 1;
  gv_alg[1667] = 1;
  gv_alg[1648] = "penr";
  gv_alg[1676] = 3;
  gv_alg[1677] = "I005";
  gv_alg[1678] = 0;
  gv_alg[1679] = 0;
  gv_alg[1680] = "fgdg";
  gv_alg[1690] = 1;
  gv_alg[1700] = 1;
  gv_alg[1681] = "srrc";
  gv_alg[1691] = 1;
  gv_alg[1701] = 1;
  gv_alg[1682] = "prvt";
  gv_alg[1710] = 3;
  gv_alg[1711] = "I006";
  gv_alg[1712] = 0;
  gv_alg[1713] = 0;
  gv_alg[1714] = "wild";
  gv_alg[1724] = 1;
  gv_alg[1734] = 1;
  gv_alg[1715] = "srrc";
  gv_alg[1725] = 1;
  gv_alg[1735] = 1;
  gv_alg[1716] = "wswd";
  gv_alg[1726] = 1;
  gv_alg[1736] = 1;
  gv_alg[1717] = "I004";
  gv_alg[1744] = 4;
  gv_alg[1745] = "I007";
  gv_alg[1746] = 0;
  gv_alg[1747] = 0;
  gv_alg[1748] = "fgsk";
  gv_alg[1758] = 1;
  gv_alg[1768] = 1;
  gv_alg[1749] = "srrc";
  gv_alg[1759] = 1;
  gv_alg[1769] = 1;
  gv_alg[1750] = "wswd";
  gv_alg[1760] = 1;
  gv_alg[1770] = 1;
  gv_alg[1751] = "I006";
  gv_alg[1778] = 4;
  gv_alg[1779] = "I008";
  gv_alg[1780] = 0;
  gv_alg[1781] = 0;
  gv_alg[1782] = "fgdg";
  gv_alg[1792] = 1;
  gv_alg[1802] = 1;
  gv_alg[1783] = "srrc";
  gv_alg[1793] = 1;
  gv_alg[1803] = 1;
  gv_alg[1784] = "wswd";
  gv_alg[1794] = 1;
  gv_alg[1804] = 1;
  gv_alg[1785] = "I005";
  gv_alg[1812] = 4;
  gv_alg[1813] = "I009";
  gv_alg[1814] = 0;
  gv_alg[1815] = 0;
  gv_alg[1816] = "wild";
  gv_alg[1820] = 1;
  gv_alg[1836] = 1;
  gv_alg[1817] = "fgsk";
  gv_alg[1827] = 1;
  gv_alg[1837] = 1;
  gv_alg[1818] = "srrc";
  gv_alg[1828] = 1;
  gv_alg[1838] = 1;
  gv_alg[1819] = "wswd";
  gv_alg[1829] = 1;
  gv_alg[1839] = 1;
  gv_alg[1820] = "fgrg";
  gv_alg[1830] = 1;
  gv_alg[1840] = 1;
  gv_alg[1821] = "I007";
  gv_alg[1846] = 6;
  gv_alg[1847] = "I00A";
  gv_alg[1848] = 0;
  gv_alg[1849] = 0;
  gv_alg[1850] = "fgdg";
  gv_alg[1860] = 1;
  gv_alg[1870] = 1;
  gv_alg[1851] = "fgsk";
  gv_alg[1861] = 1;
  gv_alg[1871] = 1;
  gv_alg[1852] = "srrc";
  gv_alg[1862] = 1;
  gv_alg[1872] = 1;
  gv_alg[1853] = "wswd";
  gv_alg[1863] = 1;
  gv_alg[1873] = 1;
  gv_alg[1854] = "fgrg";
  gv_alg[1864] = 1;
  gv_alg[1874] = 1;
  gv_alg[1855] = "I008";
  gv_alg[1880] = 6;
  gv_alg[1881] = "I00B";
  gv_alg[1882] = 0;
  gv_alg[1883] = 0;
  gv_alg[1884] = "fgdg";
  gv_alg[1894] = 1;
  gv_alg[1904] = 1;
  gv_alg[1885] = "wild";
  gv_alg[1895] = 1;
  gv_alg[1905] = 1;
  gv_alg[1886] = "srrc";
  gv_alg[1896] = 1;
  gv_alg[1906] = 1;
  gv_alg[1887] = "wswd";
  gv_alg[1897] = 1;
  gv_alg[1907] = 1;
  gv_alg[1888] = "fgrg";
  gv_alg[1898] = 1;
  gv_alg[1908] = 1;
  gv_alg[1889] = "I009";
  gv_alg[1914] = 6;
  gv_alg[1915] = "I00C";
  gv_alg[1916] = 0;
  gv_alg[1917] = 0;
  gv_alg[1918] = "sbch";
  gv_alg[1919] = "sand";
  gv_alg[1929] = 1;
  gv_alg[1939] = 1;
  gv_alg[1920] = "totw";
  gv_alg[1930] = 1;
  gv_alg[1940] = 2;
  gv_alg[1921] = "will";
  gv_alg[1931] = 1;
  gv_alg[1941] = 1;
  gv_alg[1948] = 4;
  gv_alg[1949] = "I00D";
  gv_alg[1950] = 0;
  gv_alg[1951] = 0;
  gv_alg[1952] = "rag1";
  gv_alg[1953] = "hlst";
  gv_alg[1963] = 1;
  gv_alg[1973] = 1;
  gv_alg[1954] = "totw";
  gv_alg[1964] = 1;
  gv_alg[1974] = 2;
  gv_alg[1955] = "will";
  gv_alg[1965] = 1;
  gv_alg[1975] = 1;
  gv_alg[1982] = 4;
  gv_alg[1983] = "I00E";
  gv_alg[1984] = 0;
  gv_alg[1985] = 0;
  gv_alg[1986] = "rwiz";
  gv_alg[1987] = "sand";
  gv_alg[1997] = 1;
  gv_alg[2007] = 1;
  gv_alg[1988] = "totw";
  gv_alg[1998] = 1;
  gv_alg[2008] = 2;
  gv_alg[1989] = "will";
  gv_alg[1999] = 1;
  gv_alg[2009] = 1;
  gv_alg[2016] = 4;
  gv_alg[2017] = "I00F";
  gv_alg[2018] = 0;
  gv_alg[2019] = 0;
  gv_alg[2020] = "I00E";
  gv_alg[2021] = "sand";
  gv_alg[2031] = 1;
  gv_alg[2041] = 1;
  gv_alg[2022] = "whwd";
  gv_alg[2032] = 1;
  gv_alg[2042] = 1;
  gv_alg[2023] = "will";
  gv_alg[2033] = 1;
  gv_alg[2043] = 2;
  gv_alg[2024] = "wlsd";
  gv_alg[2034] = 1;
  gv_alg[2044] = 1;
  gv_alg[2050] = 5;
  gv_alg[2051] = "I00M";
  gv_alg[2052] = 0;
  gv_alg[2053] = 0;
  gv_alg[2054] = "I00D";
  gv_alg[2055] = "sand";
  gv_alg[2065] = 1;
  gv_alg[2075] = 1;
  gv_alg[2056] = "whwd";
  gv_alg[2066] = 1;
  gv_alg[2076] = 1;
  gv_alg[2057] = "will";
  gv_alg[2067] = 1;
  gv_alg[2077] = 2;
  gv_alg[2058] = "wlsd";
  gv_alg[2068] = 1;
  gv_alg[2078] = 1;
  gv_alg[2084] = 5;
  gv_alg[2085] = "I00N";
  gv_alg[2086] = 0;
  gv_alg[2087] = 0;
  gv_alg[2088] = "I00F";
  gv_alg[2089] = "hlst";
  gv_alg[2099] = 1;
  gv_alg[2109] = 1;
  gv_alg[2090] = "whwd";
  gv_alg[2100] = 1;
  gv_alg[2110] = 1;
  gv_alg[2091] = "will";
  gv_alg[2101] = 1;
  gv_alg[2111] = 2;
  gv_alg[2092] = "wlsd";
  gv_alg[2102] = 1;
  gv_alg[2112] = 1;
  gv_alg[2118] = 5;
  gv_alg[2119] = "I00O";
  gv_alg[2120] = 0;
  gv_alg[2121] = 0;
  gv_alg[2122] = "I00M";
  gv_alg[2123] = "sand";
  gv_alg[2133] = 1;
  gv_alg[2143] = 2;
  gv_alg[2124] = "whwd";
  gv_alg[2134] = 1;
  gv_alg[2144] = 1;
  gv_alg[2125] = "I01H";
  gv_alg[2135] = 1;
  gv_alg[2145] = 1;
  gv_alg[2126] = "wlsd";
  gv_alg[2136] = 1;
  gv_alg[2146] = 2;
  gv_alg[2127] = "woms";
  gv_alg[2137] = 1;
  gv_alg[2147] = 1;
  gv_alg[2152] = 6;
  gv_alg[2153] = "I00V";
  gv_alg[2154] = 0;
  gv_alg[2155] = 0;
  gv_alg[2156] = "I00O";
  gv_alg[2157] = "sand";
  gv_alg[2167] = 1;
  gv_alg[2177] = 2;
  gv_alg[2158] = "whwd";
  gv_alg[2168] = 1;
  gv_alg[2178] = 1;
  gv_alg[2159] = "I01H";
  gv_alg[2169] = 1;
  gv_alg[2179] = 1;
  gv_alg[2160] = "wlsd";
  gv_alg[2170] = 1;
  gv_alg[2180] = 2;
  gv_alg[2161] = "woms";
  gv_alg[2171] = 1;
  gv_alg[2181] = 1;
  gv_alg[2186] = 6;
  gv_alg[2187] = "I00W";
  gv_alg[2188] = 0;
  gv_alg[2189] = 0;
  gv_alg[2190] = "I00N";
  gv_alg[2191] = "sand";
  gv_alg[2201] = 1;
  gv_alg[2211] = 2;
  gv_alg[2192] = "whwd";
  gv_alg[2202] = 1;
  gv_alg[2212] = 1;
  gv_alg[2193] = "I01H";
  gv_alg[2203] = 1;
  gv_alg[2213] = 1;
  gv_alg[2194] = "wlsd";
  gv_alg[2204] = 1;
  gv_alg[2214] = 2;
  gv_alg[2195] = "woms";
  gv_alg[2205] = 1;
  gv_alg[2215] = 1;
  gv_alg[2220] = 6;
  gv_alg[2221] = "I00X";
  gv_alg[2222] = 0;
  gv_alg[2223] = 0;
  gv_alg[2224] = "I001";
  gv_alg[2225] = "rej3";
  gv_alg[2235] = 1;
  gv_alg[2245] = 1;
  gv_alg[2226] = "totw";
  gv_alg[2236] = 1;
  gv_alg[2246] = 2;
  gv_alg[2227] = "will";
  gv_alg[2237] = 1;
  gv_alg[2247] = 1;
  gv_alg[2254] = 4;
  gv_alg[2255] = "I00H";
  gv_alg[2256] = 0;
  gv_alg[2257] = 0;
  gv_alg[2258] = "I002";
  gv_alg[2259] = "sand";
  gv_alg[2269] = 1;
  gv_alg[2279] = 1;
  gv_alg[2260] = "totw";
  gv_alg[2270] = 1;
  gv_alg[2280] = 2;
  gv_alg[2261] = "will";
  gv_alg[2271] = 1;
  gv_alg[2281] = 1;
  gv_alg[2288] = 4;
  gv_alg[2289] = "I00G";
  gv_alg[2290] = 0;
  gv_alg[2291] = 0;
  gv_alg[2292] = "I003";
  gv_alg[2293] = "sres";
  gv_alg[2303] = 1;
  gv_alg[2313] = 1;
  gv_alg[2294] = "totw";
  gv_alg[2304] = 1;
  gv_alg[2314] = 2;
  gv_alg[2295] = "will";
  gv_alg[2305] = 1;
  gv_alg[2315] = 1;
  gv_alg[2322] = 4;
  gv_alg[2323] = "I00I";
  gv_alg[2324] = 0;
  gv_alg[2325] = 0;
  gv_alg[2326] = "I00G";
  gv_alg[2327] = "sand";
  gv_alg[2337] = 1;
  gv_alg[2347] = 1;
  gv_alg[2328] = "whwd";
  gv_alg[2338] = 1;
  gv_alg[2348] = 1;
  gv_alg[2329] = "will";
  gv_alg[2339] = 1;
  gv_alg[2349] = 2;
  gv_alg[2330] = "wlsd";
  gv_alg[2340] = 1;
  gv_alg[2350] = 1;
  gv_alg[2356] = 5;
  gv_alg[2357] = "I00P";
  gv_alg[2358] = 0;
  gv_alg[2359] = 0;
  gv_alg[2360] = "I00I";
  gv_alg[2361] = "sres";
  gv_alg[2371] = 1;
  gv_alg[2381] = 1;
  gv_alg[2362] = "whwd";
  gv_alg[2372] = 1;
  gv_alg[2382] = 1;
  gv_alg[2363] = "will";
  gv_alg[2373] = 1;
  gv_alg[2383] = 2;
  gv_alg[2364] = "wlsd";
  gv_alg[2374] = 1;
  gv_alg[2384] = 1;
  gv_alg[2390] = 5;
  gv_alg[2391] = "I00Q";
  gv_alg[2392] = 0;
  gv_alg[2393] = 0;
  gv_alg[2394] = "I00H";
  gv_alg[2395] = "sand";
  gv_alg[2405] = 1;
  gv_alg[2415] = 1;
  gv_alg[2396] = "whwd";
  gv_alg[2406] = 1;
  gv_alg[2416] = 1;
  gv_alg[2397] = "will";
  gv_alg[2407] = 1;
  gv_alg[2417] = 2;
  gv_alg[2398] = "wlsd";
  gv_alg[2408] = 1;
  gv_alg[2418] = 1;
  gv_alg[2424] = 5;
  gv_alg[2425] = "I00R";
  gv_alg[2426] = 0;
  gv_alg[2427] = 0;
  gv_alg[2428] = "I00P";
  gv_alg[2429] = "sand";
  gv_alg[2439] = 1;
  gv_alg[2449] = 1;
  gv_alg[2430] = "hlst";
  gv_alg[2440] = 1;
  gv_alg[2450] = 1;
  gv_alg[2431] = "whwd";
  gv_alg[2441] = 1;
  gv_alg[2451] = 1;
  gv_alg[2432] = "I01H";
  gv_alg[2442] = 1;
  gv_alg[2452] = 1;
  gv_alg[2433] = "wlsd";
  gv_alg[2443] = 1;
  gv_alg[2453] = 2;
  gv_alg[2434] = "woms";
  gv_alg[2444] = 1;
  gv_alg[2454] = 1;
  gv_alg[2458] = 7;
  gv_alg[2459] = "I00Y";
  gv_alg[2460] = 0;
  gv_alg[2461] = 0;
  gv_alg[2462] = "I00R";
  gv_alg[2463] = "sand";
  gv_alg[2473] = 1;
  gv_alg[2483] = 1;
  gv_alg[2464] = "sres";
  gv_alg[2474] = 1;
  gv_alg[2484] = 1;
  gv_alg[2465] = "whwd";
  gv_alg[2475] = 1;
  gv_alg[2485] = 1;
  gv_alg[2466] = "I01H";
  gv_alg[2476] = 1;
  gv_alg[2486] = 1;
  gv_alg[2467] = "wlsd";
  gv_alg[2477] = 1;
  gv_alg[2487] = 2;
  gv_alg[2468] = "woms";
  gv_alg[2478] = 1;
  gv_alg[2488] = 1;
  gv_alg[2492] = 7;
  gv_alg[2493] = "I00Z";
  gv_alg[2494] = 0;
  gv_alg[2495] = 0;
  gv_alg[2496] = "I00Q";
  gv_alg[2497] = "sand";
  gv_alg[2507] = 1;
  gv_alg[2517] = 2;
  gv_alg[2498] = "whwd";
  gv_alg[2508] = 1;
  gv_alg[2518] = 1;
  gv_alg[2499] = "I01H";
  gv_alg[2509] = 1;
  gv_alg[2519] = 1;
  gv_alg[2500] = "wlsd";
  gv_alg[2510] = 1;
  gv_alg[2520] = 2;
  gv_alg[2501] = "woms";
  gv_alg[2511] = 1;
  gv_alg[2521] = 1;
  gv_alg[2526] = 6;
  gv_alg[2527] = "I010";
  gv_alg[2528] = 0;
  gv_alg[2529] = 0;
  gv_alg[2530] = "I00A";
  gv_alg[2531] = "hlst";
  gv_alg[2541] = 1;
  gv_alg[2551] = 1;
  gv_alg[2532] = "totw";
  gv_alg[2542] = 1;
  gv_alg[2552] = 2;
  gv_alg[2533] = "will";
  gv_alg[2543] = 1;
  gv_alg[2553] = 1;
  gv_alg[2560] = 4;
  gv_alg[2561] = "I00J";
  gv_alg[2562] = 0;
  gv_alg[2563] = 0;
  gv_alg[2564] = "I00B";
  gv_alg[2565] = "rej3";
  gv_alg[2575] = 1;
  gv_alg[2585] = 1;
  gv_alg[2566] = "totw";
  gv_alg[2576] = 1;
  gv_alg[2586] = 2;
  gv_alg[2567] = "will";
  gv_alg[2577] = 1;
  gv_alg[2587] = 1;
  gv_alg[2594] = 4;
  gv_alg[2595] = "I00L";
  gv_alg[2596] = 0;
  gv_alg[2597] = 0;
  gv_alg[2598] = "I00C";
  gv_alg[2599] = "rej3";
  gv_alg[2609] = 1;
  gv_alg[2619] = 1;
  gv_alg[2600] = "totw";
  gv_alg[2610] = 1;
  gv_alg[2620] = 2;
  gv_alg[2601] = "will";
  gv_alg[2611] = 1;
  gv_alg[2621] = 1;
  gv_alg[2628] = 4;
  gv_alg[2629] = "I00K";
  gv_alg[2630] = 0;
  gv_alg[2631] = 0;
  gv_alg[2632] = "I00J";
  gv_alg[2633] = "hlst";
  gv_alg[2643] = 1;
  gv_alg[2653] = 1;
  gv_alg[2634] = "whwd";
  gv_alg[2644] = 1;
  gv_alg[2654] = 1;
  gv_alg[2635] = "will";
  gv_alg[2645] = 1;
  gv_alg[2655] = 2;
  gv_alg[2636] = "wlsd";
  gv_alg[2646] = 1;
  gv_alg[2656] = 1;
  gv_alg[2662] = 5;
  gv_alg[2663] = "I00S";
  gv_alg[2664] = 0;
  gv_alg[2665] = 0;
  gv_alg[2666] = "I00L";
  gv_alg[2667] = "rej3";
  gv_alg[2677] = 1;
  gv_alg[2687] = 1;
  gv_alg[2668] = "whwd";
  gv_alg[2678] = 1;
  gv_alg[2688] = 1;
  gv_alg[2669] = "will";
  gv_alg[2679] = 1;
  gv_alg[2689] = 2;
  gv_alg[2670] = "wlsd";
  gv_alg[2680] = 1;
  gv_alg[2690] = 1;
  gv_alg[2696] = 5;
  gv_alg[2697] = "I00T";
  gv_alg[2698] = 0;
  gv_alg[2699] = 0;
  gv_alg[2700] = "I00K";
  gv_alg[2701] = "hlst";
  gv_alg[2711] = 1;
  gv_alg[2721] = 1;
  gv_alg[2702] = "whwd";
  gv_alg[2712] = 1;
  gv_alg[2722] = 1;
  gv_alg[2703] = "will";
  gv_alg[2713] = 1;
  gv_alg[2723] = 2;
  gv_alg[2704] = "wlsd";
  gv_alg[2714] = 1;
  gv_alg[2724] = 1;
  gv_alg[2730] = 5;
  gv_alg[2731] = "I00U";
  gv_alg[2732] = 0;
  gv_alg[2733] = 0;
  gv_alg[2734] = "I00S";
  gv_alg[2735] = "hlst";
  gv_alg[2745] = 1;
  gv_alg[2755] = 1;
  gv_alg[2736] = "rej3";
  gv_alg[2746] = 1;
  gv_alg[2756] = 1;
  gv_alg[2737] = "whwd";
  gv_alg[2747] = 1;
  gv_alg[2757] = 1;
  gv_alg[2738] = "I01H";
  gv_alg[2748] = 1;
  gv_alg[2758] = 1;
  gv_alg[2739] = "wlsd";
  gv_alg[2749] = 1;
  gv_alg[2759] = 2;
  gv_alg[2740] = "woms";
  gv_alg[2750] = 1;
  gv_alg[2760] = 1;
  gv_alg[2764] = 7;
  gv_alg[2765] = "I011";
  gv_alg[2766] = 0;
  gv_alg[2767] = 0;
  gv_alg[2768] = "I00T";
  gv_alg[2769] = "rej3";
  gv_alg[2779] = 1;
  gv_alg[2789] = 2;
  gv_alg[2770] = "whwd";
  gv_alg[2780] = 1;
  gv_alg[2790] = 1;
  gv_alg[2771] = "I01H";
  gv_alg[2781] = 1;
  gv_alg[2791] = 1;
  gv_alg[2772] = "wlsd";
  gv_alg[2782] = 1;
  gv_alg[2792] = 2;
  gv_alg[2773] = "woms";
  gv_alg[2783] = 1;
  gv_alg[2793] = 1;
  gv_alg[2798] = 6;
  gv_alg[2799] = "I012";
  gv_alg[2800] = 0;
  gv_alg[2801] = 0;
  gv_alg[2802] = "I00U";
  gv_alg[2803] = "hlst";
  gv_alg[2813] = 1;
  gv_alg[2823] = 2;
  gv_alg[2804] = "whwd";
  gv_alg[2814] = 1;
  gv_alg[2824] = 1;
  gv_alg[2805] = "I01H";
  gv_alg[2815] = 1;
  gv_alg[2825] = 1;
  gv_alg[2806] = "wlsd";
  gv_alg[2816] = 1;
  gv_alg[2826] = 2;
  gv_alg[2807] = "woms";
  gv_alg[2817] = 1;
  gv_alg[2827] = 1;
  gv_alg[2832] = 6;
  gv_alg[2833] = "I013";
  gv_alg[2834] = 0;
  gv_alg[2835] = 0;
  gv_alg[2836] = "amrc";
  gv_alg[2837] = "bfhr";
  gv_alg[2838] = "I00A";
  gv_alg[2839] = "hlst";
  gv_alg[2849] = 1;
  gv_alg[2859] = 1;
  gv_alg[2840] = "shar";
  gv_alg[2850] = 1;
  gv_alg[2860] = 1;
  gv_alg[2841] = "whwd";
  gv_alg[2851] = 1;
  gv_alg[2861] = 1;
  gv_alg[2842] = "I01H";
  gv_alg[2852] = 1;
  gv_alg[2862] = 1;
  gv_alg[2843] = "I01C";
  gv_alg[2866] = 8;
  gv_alg[2867] = "tgxp";
  gv_alg[2868] = 0;
  gv_alg[2869] = 0;
  gv_alg[2870] = "arsh";
  gv_alg[2871] = "bfhr";
  gv_alg[2872] = "I00C";
  gv_alg[2873] = "rej3";
  gv_alg[2883] = 1;
  gv_alg[2893] = 1;
  gv_alg[2874] = "shar";
  gv_alg[2884] = 1;
  gv_alg[2894] = 1;
  gv_alg[2875] = "whwd";
  gv_alg[2885] = 1;
  gv_alg[2895] = 1;
  gv_alg[2876] = "I01H";
  gv_alg[2886] = 1;
  gv_alg[2896] = 1;
  gv_alg[2877] = "I01C";
  gv_alg[2900] = 8;
  gv_alg[2901] = "tmsc";
  gv_alg[2902] = 0;
  gv_alg[2903] = 0;
  gv_alg[2904] = "anfg";
  gv_alg[2905] = "asbl";
  gv_alg[2906] = "rag1";
  gv_alg[2907] = "sand";
  gv_alg[2917] = 1;
  gv_alg[2927] = 2;
  gv_alg[2908] = "whwd";
  gv_alg[2918] = 1;
  gv_alg[2928] = 1;
  gv_alg[2909] = "I01H";
  gv_alg[2919] = 1;
  gv_alg[2929] = 1;
  gv_alg[2910] = "I01C";
  gv_alg[2934] = 7;
  gv_alg[2935] = "tmmt";
  gv_alg[2936] = 0;
  gv_alg[2937] = 0;
  gv_alg[2938] = "axas";
  gv_alg[2939] = "blba";
  gv_alg[2940] = "I002";
  gv_alg[2941] = "sand";
  gv_alg[2951] = 1;
  gv_alg[2961] = 1;
  gv_alg[2942] = "shar";
  gv_alg[2952] = 1;
  gv_alg[2962] = 1;
  gv_alg[2943] = "whwd";
  gv_alg[2953] = 1;
  gv_alg[2963] = 1;
  gv_alg[2944] = "I01H";
  gv_alg[2954] = 1;
  gv_alg[2964] = 1;
  gv_alg[2945] = "I01C";
  gv_alg[2968] = 8;
  gv_alg[2969] = "uflg";
  gv_alg[2970] = 0;
  gv_alg[2971] = 0;
  gv_alg[2972] = "arsc";
  gv_alg[2973] = "blba";
  gv_alg[2974] = "I003";
  gv_alg[2975] = "shar";
  gv_alg[2985] = 1;
  gv_alg[2995] = 1;
  gv_alg[2976] = "sres";
  gv_alg[2986] = 1;
  gv_alg[2996] = 1;
  gv_alg[2977] = "whwd";
  gv_alg[2987] = 1;
  gv_alg[2997] = 1;
  gv_alg[2978] = "I01H";
  gv_alg[2988] = 1;
  gv_alg[2998] = 1;
  gv_alg[2979] = "I01C";
  gv_alg[3002] = 8;
  gv_alg[3003] = "vddl";
  gv_alg[3004] = 0;
  gv_alg[3005] = 0;
  gv_alg[3006] = "pams";
  gv_alg[3007] = "arsc";
  gv_alg[3008] = "sbch";
  gv_alg[3009] = "sand";
  gv_alg[3019] = 1;
  gv_alg[3029] = 1;
  gv_alg[3010] = "sres";
  gv_alg[3020] = 1;
  gv_alg[3030] = 1;
  gv_alg[3011] = "whwd";
  gv_alg[3021] = 1;
  gv_alg[3031] = 1;
  gv_alg[3012] = "I01H";
  gv_alg[3022] = 1;
  gv_alg[3032] = 1;
  gv_alg[3013] = "I01C";
  gv_alg[3036] = 8;
  gv_alg[3037] = "kybl";
  gv_alg[3038] = 0;
  gv_alg[3039] = 0;
  gv_alg[3040] = "btst";
  gv_alg[3041] = "asbl";
  gv_alg[3042] = "rwiz";
  gv_alg[3043] = "shar";
  gv_alg[3053] = 1;
  gv_alg[3063] = 1;
  gv_alg[3044] = "sand";
  gv_alg[3054] = 1;
  gv_alg[3064] = 1;
  gv_alg[3045] = "whwd";
  gv_alg[3055] = 1;
  gv_alg[3065] = 1;
  gv_alg[3046] = "I01H";
  gv_alg[3056] = 1;
  gv_alg[3066] = 1;
  gv_alg[3047] = "I01C";
  gv_alg[3070] = 8;
  gv_alg[3071] = "ches";
  gv_alg[3072] = 0;
  gv_alg[3073] = 0;
  gv_alg[3074] = "pams";
  gv_alg[3075] = "btst";
  gv_alg[3076] = "I001";
  gv_alg[3077] = "shar";
  gv_alg[3087] = 1;
  gv_alg[3097] = 1;
  gv_alg[3078] = "sres";
  gv_alg[3088] = 1;
  gv_alg[3098] = 1;
  gv_alg[3079] = "whwd";
  gv_alg[3089] = 1;
  gv_alg[3099] = 1;
  gv_alg[3080] = "I01H";
  gv_alg[3090] = 1;
  gv_alg[3100] = 1;
  gv_alg[3081] = "I01C";
  gv_alg[3104] = 8;
  gv_alg[3105] = "bzbe";
  gv_alg[3106] = 0;
  gv_alg[3107] = 0;
  gv_alg[3108] = "amrc";
  gv_alg[3109] = "arsh";
  gv_alg[3110] = "I00B";
  gv_alg[3111] = "hlst";
  gv_alg[3121] = 1;
  gv_alg[3131] = 1;
  gv_alg[3112] = "sand";
  gv_alg[3122] = 1;
  gv_alg[3132] = 1;
  gv_alg[3113] = "whwd";
  gv_alg[3123] = 1;
  gv_alg[3133] = 1;
  gv_alg[3114] = "I01H";
  gv_alg[3124] = 1;
  gv_alg[3134] = 1;
  gv_alg[3115] = "I01C";
  gv_alg[3138] = 8;
  gv_alg[3139] = "engs";
  gv_alg[3140] = 0;
  gv_alg[3141] = 0;
  gv_alg[3142] = "cosl";
  gv_alg[3143] = "I00P";
  gv_alg[3144] = "I00I";
  gv_alg[3145] = "hlst";
  gv_alg[3155] = 1;
  gv_alg[3165] = 1;
  gv_alg[3146] = "sand";
  gv_alg[3156] = 1;
  gv_alg[3166] = 1;
  gv_alg[3147] = "sres";
  gv_alg[3157] = 1;
  gv_alg[3167] = 1;
  gv_alg[3148] = "whwd";
  gv_alg[3158] = 1;
  gv_alg[3168] = 1;
  gv_alg[3149] = "I01H";
  gv_alg[3159] = 1;
  gv_alg[3169] = 2;
  gv_alg[3150] = "I01C";
  gv_alg[3151] = "I01D";
  gv_alg[3161] = 1;
  gv_alg[3171] = 1;
  gv_alg[3172] = 10;
  gv_alg[3173] = "gopr";
  gv_alg[3174] = 0;
  gv_alg[3175] = 0;
  gv_alg[3176] = "cosl";
  gv_alg[3177] = "I00O";
  gv_alg[3178] = "I00G";
  gv_alg[3179] = "sand";
  gv_alg[3189] = 1;
  gv_alg[3199] = 3;
  gv_alg[3180] = "whwd";
  gv_alg[3190] = 1;
  gv_alg[3200] = 1;
  gv_alg[3181] = "I01H";
  gv_alg[3191] = 1;
  gv_alg[3201] = 2;
  gv_alg[3182] = "I01C";
  gv_alg[3183] = "I01D";
  gv_alg[3193] = 1;
  gv_alg[3203] = 1;
  gv_alg[3206] = 8;
  gv_alg[3207] = "azhr";
  gv_alg[3208] = 0;
  gv_alg[3209] = 0;
  gv_alg[3210] = "rat3";
  gv_alg[3211] = "I00N";
  gv_alg[3212] = "kybl";
  gv_alg[3213] = "sand";
  gv_alg[3223] = 1;
  gv_alg[3233] = 2;
  gv_alg[3214] = "shar";
  gv_alg[3224] = 1;
  gv_alg[3234] = 1;
  gv_alg[3215] = "whwd";
  gv_alg[3225] = 1;
  gv_alg[3235] = 1;
  gv_alg[3216] = "I01H";
  gv_alg[3226] = 1;
  gv_alg[3236] = 2;
  gv_alg[3217] = "I01C";
  gv_alg[3218] = "I01D";
  gv_alg[3228] = 1;
  gv_alg[3238] = 1;
  gv_alg[3240] = 9;
  gv_alg[3241] = "cnhn";
  gv_alg[3242] = 0;
  gv_alg[3243] = 0;
  gv_alg[3244] = "crdt";
  gv_alg[3245] = "I00M";
  gv_alg[3246] = "tmmt";
  gv_alg[3247] = "rej3";
  gv_alg[3257] = 1;
  gv_alg[3267] = 1;
  gv_alg[3248] = "sand";
  gv_alg[3258] = 1;
  gv_alg[3268] = 2;
  gv_alg[3249] = "whwd";
  gv_alg[3259] = 1;
  gv_alg[3269] = 1;
  gv_alg[3250] = "I01H";
  gv_alg[3260] = 1;
  gv_alg[3270] = 2;
  gv_alg[3251] = "I01C";
  gv_alg[3252] = "I01D";
  gv_alg[3262] = 1;
  gv_alg[3272] = 1;
  gv_alg[3274] = 9;
  gv_alg[3275] = "dkfw";
  gv_alg[3276] = 0;
  gv_alg[3277] = 0;
  gv_alg[3278] = "brag";
  gv_alg[3279] = "I00Q";
  gv_alg[3280] = "I00F";
  gv_alg[3281] = "hlst";
  gv_alg[3291] = 1;
  gv_alg[3301] = 1;
  gv_alg[3282] = "shar";
  gv_alg[3292] = 1;
  gv_alg[3302] = 1;
  gv_alg[3283] = "sand";
  gv_alg[3293] = 1;
  gv_alg[3303] = 1;
  gv_alg[3284] = "whwd";
  gv_alg[3294] = 1;
  gv_alg[3304] = 1;
  gv_alg[3285] = "I01H";
  gv_alg[3295] = 1;
  gv_alg[3305] = 2;
  gv_alg[3286] = "I01C";
  gv_alg[3287] = "I01D";
  gv_alg[3297] = 1;
  gv_alg[3307] = 1;
  gv_alg[3308] = 10;
  gv_alg[3309] = "k3m3";
  gv_alg[3310] = 0;
  gv_alg[3311] = 0;
  gv_alg[3312] = "crdt";
  gv_alg[3313] = "I00R";
  gv_alg[3314] = "kybl";
  gv_alg[3315] = "shar";
  gv_alg[3325] = 1;
  gv_alg[3335] = 1;
  gv_alg[3316] = "rej3";
  gv_alg[3326] = 1;
  gv_alg[3336] = 2;
  gv_alg[3317] = "whwd";
  gv_alg[3327] = 1;
  gv_alg[3337] = 1;
  gv_alg[3318] = "I01H";
  gv_alg[3328] = 1;
  gv_alg[3338] = 2;
  gv_alg[3319] = "I01C";
  gv_alg[3320] = "I01D";
  gv_alg[3330] = 1;
  gv_alg[3340] = 1;
  gv_alg[3342] = 9;
  gv_alg[3343] = "mgtk";
  gv_alg[3344] = 0;
  gv_alg[3345] = 0;
  gv_alg[3346] = "rat3";
  gv_alg[3347] = "I00S";
  gv_alg[3348] = "engs";
  gv_alg[3349] = "hlst";
  gv_alg[3359] = 1;
  gv_alg[3369] = 1;
  gv_alg[3350] = "rej3";
  gv_alg[3360] = 1;
  gv_alg[3370] = 2;
  gv_alg[3351] = "whwd";
  gv_alg[3361] = 1;
  gv_alg[3371] = 1;
  gv_alg[3352] = "I01H";
  gv_alg[3362] = 1;
  gv_alg[3372] = 2;
  gv_alg[3353] = "I01C";
  gv_alg[3354] = "I01D";
  gv_alg[3364] = 1;
  gv_alg[3374] = 1;
  gv_alg[3376] = 9;
  gv_alg[3377] = "mort";
  gv_alg[3378] = 0;
  gv_alg[3379] = 0;
  gv_alg[3380] = "brag";
  gv_alg[3381] = "I00S";
  gv_alg[3382] = "engs";
  gv_alg[3383] = "hlst";
  gv_alg[3393] = 1;
  gv_alg[3403] = 2;
  gv_alg[3384] = "shar";
  gv_alg[3394] = 1;
  gv_alg[3404] = 1;
  gv_alg[3385] = "whwd";
  gv_alg[3395] = 1;
  gv_alg[3405] = 1;
  gv_alg[3386] = "I01H";
  gv_alg[3396] = 1;
  gv_alg[3406] = 2;
  gv_alg[3387] = "I01C";
  gv_alg[3388] = "I01D";
  gv_alg[3398] = 1;
  gv_alg[3408] = 1;
  gv_alg[3410] = 9;
  gv_alg[3411] = "kymn";
  gv_alg[3412] = 0;
  gv_alg[3413] = 0;
  gv_alg[3414] = "stpg";
  gv_alg[3415] = "I00U";
  gv_alg[3416] = "I00K";
  gv_alg[3417] = "hlst";
  gv_alg[3427] = 1;
  gv_alg[3437] = 1;
  gv_alg[3418] = "shar";
  gv_alg[3428] = 1;
  gv_alg[3438] = 1;
  gv_alg[3419] = "rej3";
  gv_alg[3429] = 1;
  gv_alg[3439] = 1;
  gv_alg[3420] = "whwd";
  gv_alg[3430] = 1;
  gv_alg[3440] = 1;
  gv_alg[3421] = "I01H";
  gv_alg[3431] = 1;
  gv_alg[3441] = 2;
  gv_alg[3422] = "I01C";
  gv_alg[3423] = "I01D";
  gv_alg[3433] = 1;
  gv_alg[3443] = 1;
  gv_alg[3444] = 10;
  gv_alg[3445] = "k3m1";
  gv_alg[3446] = 0;
  gv_alg[3447] = 0;
  gv_alg[3448] = "stpg";
  gv_alg[3449] = "I00T";
  gv_alg[3450] = "tmsc";
  gv_alg[3451] = "shar";
  gv_alg[3461] = 1;
  gv_alg[3471] = 2;
  gv_alg[3452] = "rej3";
  gv_alg[3462] = 1;
  gv_alg[3472] = 1;
  gv_alg[3453] = "whwd";
  gv_alg[3463] = 1;
  gv_alg[3473] = 1;
  gv_alg[3454] = "I01H";
  gv_alg[3464] = 1;
  gv_alg[3474] = 2;
  gv_alg[3455] = "I01C";
  gv_alg[3456] = "I01D";
  gv_alg[3466] = 1;
  gv_alg[3476] = 1;
  gv_alg[3478] = 9;
  gv_alg[3479] = "jpnt";
  gv_alg[3480] = 0;
  gv_alg[3481] = 0;
  gv_alg[3482] = "drph";
  gv_alg[3483] = "I00Z";
  gv_alg[3484] = "I00W";
  gv_alg[3485] = "sand";
  gv_alg[3495] = 1;
  gv_alg[3505] = 4;
  gv_alg[3486] = "wlsd";
  gv_alg[3496] = 1;
  gv_alg[3506] = 3;
  gv_alg[3487] = "I01D";
  gv_alg[3497] = 1;
  gv_alg[3507] = 2;
  gv_alg[3488] = "whwd";
  gv_alg[3498] = 1;
  gv_alg[3508] = 2;
  gv_alg[3489] = "I01H";
  gv_alg[3499] = 1;
  gv_alg[3509] = 3;
  gv_alg[3512] = 8;
  gv_alg[3513] = "phlt";
  gv_alg[3514] = 0;
  gv_alg[3515] = 0;
  gv_alg[3516] = "drph";
  gv_alg[3517] = "I010";
  gv_alg[3518] = "I00Y";
  gv_alg[3519] = "sand";
  gv_alg[3529] = 1;
  gv_alg[3539] = 4;
  gv_alg[3520] = "whwd";
  gv_alg[3530] = 1;
  gv_alg[3540] = 2;
  gv_alg[3521] = "I01H";
  gv_alg[3531] = 1;
  gv_alg[3541] = 3;
  gv_alg[3522] = "wlsd";
  gv_alg[3532] = 1;
  gv_alg[3542] = 3;
  gv_alg[3523] = "I01D";
  gv_alg[3533] = 1;
  gv_alg[3543] = 2;
  gv_alg[3546] = 8;
  gv_alg[3547] = "sclp";
  gv_alg[3548] = 0;
  gv_alg[3549] = 0;
  gv_alg[3550] = "drph";
  gv_alg[3551] = "I00V";
  gv_alg[3552] = "I00W";
  gv_alg[3553] = "sand";
  gv_alg[3563] = 1;
  gv_alg[3573] = 4;
  gv_alg[3554] = "whwd";
  gv_alg[3564] = 1;
  gv_alg[3574] = 2;
  gv_alg[3555] = "I01H";
  gv_alg[3565] = 1;
  gv_alg[3575] = 3;
  gv_alg[3556] = "wlsd";
  gv_alg[3566] = 1;
  gv_alg[3576] = 3;
  gv_alg[3557] = "I01D";
  gv_alg[3567] = 1;
  gv_alg[3577] = 2;
  gv_alg[3580] = 8;
  gv_alg[3581] = "sorf";
  gv_alg[3582] = 0;
  gv_alg[3583] = 0;
  gv_alg[3584] = "shen";
  gv_alg[3585] = "I00Z";
  gv_alg[3586] = "I012";
  gv_alg[3587] = "rej3";
  gv_alg[3597] = 1;
  gv_alg[3607] = 4;
  gv_alg[3588] = "whwd";
  gv_alg[3598] = 1;
  gv_alg[3608] = 2;
  gv_alg[3589] = "I01H";
  gv_alg[3599] = 1;
  gv_alg[3609] = 3;
  gv_alg[3590] = "woms";
  gv_alg[3600] = 1;
  gv_alg[3610] = 3;
  gv_alg[3591] = "I01D";
  gv_alg[3601] = 1;
  gv_alg[3611] = 2;
  gv_alg[3614] = 8;
  gv_alg[3615] = "shwd";
  gv_alg[3616] = 0;
  gv_alg[3617] = 0;
  gv_alg[3618] = "shen";
  gv_alg[3619] = "I00Y";
  gv_alg[3620] = "I013";
  gv_alg[3621] = "rej3";
  gv_alg[3631] = 1;
  gv_alg[3641] = 4;
  gv_alg[3622] = "whwd";
  gv_alg[3632] = 1;
  gv_alg[3642] = 2;
  gv_alg[3623] = "I01H";
  gv_alg[3633] = 1;
  gv_alg[3643] = 3;
  gv_alg[3624] = "woms";
  gv_alg[3634] = 1;
  gv_alg[3644] = 3;
  gv_alg[3625] = "I01D";
  gv_alg[3635] = 1;
  gv_alg[3655] = 2;
  gv_alg[3648] = 8;
  gv_alg[3649] = "skrt";
  gv_alg[3650] = 0;
  gv_alg[3651] = 0;
  gv_alg[3652] = "shen";
  gv_alg[3653] = "I011";
  gv_alg[3654] = "I013";
  gv_alg[3655] = "rej3";
  gv_alg[3665] = 1;
  gv_alg[3675] = 4;
  gv_alg[3656] = "whwd";
  gv_alg[3666] = 1;
  gv_alg[3676] = 2;
  gv_alg[3657] = "I01H";
  gv_alg[3667] = 1;
  gv_alg[3677] = 3;
  gv_alg[3658] = "woms";
  gv_alg[3668] = 1;
  gv_alg[3678] = 3;
  gv_alg[3659] = "I01D";
  gv_alg[3669] = 1;
  gv_alg[3679] = 2;
  gv_alg[3682] = 9;
  gv_alg[3683] = "glsk";
  gv_alg[3684] = 0;
  gv_alg[3685] = 0;
  gv_alg[3686] = "envl";
  gv_alg[3687] = "I00Z";
  gv_alg[3688] = "I00X";
  gv_alg[3689] = "shar";
  gv_alg[3699] = 1;
  gv_alg[3709] = 4;
  gv_alg[3690] = "whwd";
  gv_alg[3700] = 1;
  gv_alg[3710] = 2;
  gv_alg[3691] = "I01H";
  gv_alg[3701] = 1;
  gv_alg[3711] = 3;
  gv_alg[3692] = "will";
  gv_alg[3702] = 1;
  gv_alg[3712] = 3;
  gv_alg[3693] = "I01D";
  gv_alg[3703] = 1;
  gv_alg[3713] = 2;
  gv_alg[3716] = 8;
  gv_alg[3717] = "kysn";
  gv_alg[3718] = 0;
  gv_alg[3719] = 0;
  gv_alg[3720] = "envl";
  gv_alg[3721] = "I010";
  gv_alg[3722] = "I00Y";
  gv_alg[3723] = "shar";
  gv_alg[3733] = 1;
  gv_alg[3743] = 4;
  gv_alg[3724] = "whwd";
  gv_alg[3734] = 1;
  gv_alg[3744] = 2;
  gv_alg[3725] = "I01H";
  gv_alg[3735] = 1;
  gv_alg[3745] = 3;
  gv_alg[3726] = "will";
  gv_alg[3736] = 1;
  gv_alg[3746] = 3;
  gv_alg[3727] = "I01D";
  gv_alg[3737] = 1;
  gv_alg[3747] = 2;
  gv_alg[3750] = 8;
  gv_alg[3751] = "sehr";
  gv_alg[3752] = 0;
  gv_alg[3753] = 0;
  gv_alg[3754] = "envl";
  gv_alg[3755] = "I00V";
  gv_alg[3756] = "I00X";
  gv_alg[3757] = "shar";
  gv_alg[3767] = 1;
  gv_alg[3777] = 4;
  gv_alg[3758] = "whwd";
  gv_alg[3768] = 1;
  gv_alg[3778] = 2;
  gv_alg[3759] = "I01H";
  gv_alg[3769] = 1;
  gv_alg[3779] = 3;
  gv_alg[3760] = "will";
  gv_alg[3770] = 1;
  gv_alg[3780] = 3;
  gv_alg[3761] = "I01D";
  gv_alg[3771] = 1;
  gv_alg[3781] = 2;
  gv_alg[3784] = 8;
  gv_alg[3785] = "thle";
  gv_alg[3786] = 0;
  gv_alg[3787] = 0;
  gv_alg[3788] = "rej3";
  gv_alg[3798] = 1;
  gv_alg[3808] = 3;
  gv_alg[3789] = "whwd";
  gv_alg[3799] = 1;
  gv_alg[3809] = 2;
  gv_alg[3790] = "I01H";
  gv_alg[3800] = 1;
  gv_alg[3810] = 2;
  gv_alg[3791] = "I01E";
  gv_alg[3818] = 4;
  gv_alg[3819] = "bzbf";
  gv_alg[3820] = 0;
  gv_alg[3821] = 0;
  gv_alg[3822] = "sand";
  gv_alg[3832] = 1;
  gv_alg[3842] = 3;
  gv_alg[3823] = "whwd";
  gv_alg[3833] = 1;
  gv_alg[3843] = 2;
  gv_alg[3824] = "I01H";
  gv_alg[3834] = 1;
  gv_alg[3844] = 2;
  gv_alg[3825] = "I01E";
  gv_alg[3852] = 4;
  gv_alg[3853] = "gmfr";
  gv_alg[3854] = 0;
  gv_alg[3855] = 0;
  gv_alg[3856] = "shar";
  gv_alg[3866] = 1;
  gv_alg[3876] = 3;
  gv_alg[3857] = "whwd";
  gv_alg[3867] = 1;
  gv_alg[3877] = 2;
  gv_alg[3858] = "I01H";
  gv_alg[3868] = 1;
  gv_alg[3878] = 2;
  gv_alg[3859] = "I01E";
  gv_alg[3886] = 4;
  gv_alg[3887] = "ledg";
  gv_alg[3888] = 0;
  gv_alg[3889] = 0;
  gv_alg[3890] = "sres";
  gv_alg[3900] = 1;
  gv_alg[3910] = 3;
  gv_alg[3891] = "whwd";
  gv_alg[3901] = 1;
  gv_alg[3911] = 2;
  gv_alg[3892] = "I01H";
  gv_alg[3902] = 1;
  gv_alg[3912] = 2;
  gv_alg[3893] = "I01E";
  gv_alg[3920] = 4;
  gv_alg[3921] = "kygh";
  gv_alg[3922] = 0;
  gv_alg[3923] = 0;
  gv_alg[3924] = "sand";
  gv_alg[3934] = 1;
  gv_alg[3944] = 5;
  gv_alg[3925] = "whwd";
  gv_alg[3935] = 1;
  gv_alg[3945] = 3;
  gv_alg[3926] = "I01H";
  gv_alg[3936] = 1;
  gv_alg[3946] = 3;
  gv_alg[3927] = "I01X";
  gv_alg[3954] = 4;
  gv_alg[3955] = "k3m2";
  gv_alg[3956] = 0;
  gv_alg[3957] = 0;
  gv_alg[3958] = "hlst";
  gv_alg[3968] = 1;
  gv_alg[3978] = 5;
  gv_alg[3959] = "whwd";
  gv_alg[3969] = 1;
  gv_alg[3979] = 3;
  gv_alg[3960] = "I01H";
  gv_alg[3970] = 1;
  gv_alg[3980] = 3;
  gv_alg[3961] = "I01X";
  gv_alg[3988] = 4;
  gv_alg[3989] = "dphe";
  gv_alg[3990] = 0;
  gv_alg[3991] = 0;
  gv_alg[3992] = "sand";
  gv_alg[4002] = 1;
  gv_alg[4012] = 5;
  gv_alg[3993] = "whwd";
  gv_alg[4003] = 1;
  gv_alg[4013] = 3;
  gv_alg[3994] = "I01H";
  gv_alg[4004] = 1;
  gv_alg[4014] = 4;
  gv_alg[3995] = "I01Y";
  gv_alg[4022] = 4;
  gv_alg[4023] = "dthb";
  gv_alg[4024] = 0;
  gv_alg[4025] = 0;
  gv_alg[4026] = "hlst";
  gv_alg[4036] = 1;
  gv_alg[4046] = 5;
  gv_alg[4027] = "whwd";
  gv_alg[4037] = 1;
  gv_alg[4047] = 3;
  gv_alg[4028] = "I01H";
  gv_alg[4038] = 1;
  gv_alg[4048] = 4;
  gv_alg[4029] = "I01Y";
  gv_alg[4056] = 4;
  gv_alg[4057] = "ktrm";
  gv_alg[4058] = 0;
  gv_alg[4059] = 0;
  gv_alg[4060] = "sand";
  gv_alg[4070] = 1;
  gv_alg[4080] = 5;
  gv_alg[4061] = "whwd";
  gv_alg[4071] = 1;
  gv_alg[4081] = 3;
  gv_alg[4062] = "I01H";
  gv_alg[4072] = 1;
  gv_alg[4082] = 5;
  gv_alg[4063] = "I01Z";
  gv_alg[4090] = 4;
  gv_alg[4091] = "wtlg";
  gv_alg[4092] = 0;
  gv_alg[4093] = 0;
  gv_alg[4094] = "hlst";
  gv_alg[4104] = 1;
  gv_alg[4114] = 5;
  gv_alg[4095] = "whwd";
  gv_alg[4105] = 1;
  gv_alg[4115] = 3;
  gv_alg[4096] = "I01H";
  gv_alg[4106] = 1;
  gv_alg[4116] = 5;
  gv_alg[4097] = "I01Z";
  gv_alg[4124] = 4;
  gv_alg[4125] = "wolg";
  gv_alg[4126] = 0;
  gv_alg[4127] = 0;
  gv_alg[4128] = "k3m2";
  gv_alg[4129] = "dthb";
  gv_alg[4130] = "wtlg";
  gv_alg[4131] = "sand";
  gv_alg[4141] = 1;
  gv_alg[4151] = 5;
  gv_alg[4132] = "whwd";
  gv_alg[4142] = 1;
  gv_alg[4152] = 5;
  gv_alg[4133] = "I01H";
  gv_alg[4143] = 1;
  gv_alg[4153] = 7;
  gv_alg[4158] = 6;
  gv_alg[4159] = "I014";
  gv_alg[4160] = 0;
  gv_alg[4161] = 0;
  gv_alg[4162] = "k3m2";
  gv_alg[4163] = "dthb";
  gv_alg[4164] = "wolg";
  gv_alg[4165] = "sand";
  gv_alg[4175] = 1;
  gv_alg[4185] = 4;
  gv_alg[4166] = "shar";
  gv_alg[4176] = 1;
  gv_alg[4186] = 1;
  gv_alg[4167] = "whwd";
  gv_alg[4177] = 1;
  gv_alg[4187] = 5;
  gv_alg[4168] = "I01H";
  gv_alg[4178] = 1;
  gv_alg[4188] = 7;
  gv_alg[4192] = 7;
  gv_alg[4193] = "I015";
  gv_alg[4194] = 0;
  gv_alg[4195] = 0;
  gv_alg[4196] = "k3m2";
  gv_alg[4197] = "ktrm";
  gv_alg[4198] = "wtlg";
  gv_alg[4199] = "sand";
  gv_alg[4209] = 1;
  gv_alg[4219] = 2;
  gv_alg[4200] = "hlst";
  gv_alg[4210] = 1;
  gv_alg[4220] = 1;
  gv_alg[4201] = "rej3";
  gv_alg[4211] = 1;
  gv_alg[4221] = 1;
  gv_alg[4202] = "shar";
  gv_alg[4212] = 1;
  gv_alg[4222] = 1;
  gv_alg[4203] = "whwd";
  gv_alg[4213] = 1;
  gv_alg[4223] = 5;
  gv_alg[4204] = "I01H";
  gv_alg[4214] = 1;
  gv_alg[4224] = 7;
  gv_alg[4226] = 9;
  gv_alg[4227] = "I016";
  gv_alg[4228] = 0;
  gv_alg[4229] = 0;
  gv_alg[4230] = "dphe";
  gv_alg[4231] = "dthb";
  gv_alg[4232] = "wtlg";
  gv_alg[4233] = "sand";
  gv_alg[4243] = 1;
  gv_alg[4253] = 3;
  gv_alg[4234] = "hlst";
  gv_alg[4244] = 1;
  gv_alg[4254] = 1;
  gv_alg[4235] = "rej3";
  gv_alg[4245] = 1;
  gv_alg[4255] = 1;
  gv_alg[4236] = "whwd";
  gv_alg[4246] = 1;
  gv_alg[4256] = 5;
  gv_alg[4237] = "I01H";
  gv_alg[4247] = 1;
  gv_alg[4257] = 7;
  gv_alg[4260] = 8;
  gv_alg[4261] = "I017";
  gv_alg[4262] = 0;
  gv_alg[4263] = 0;
  gv_alg[4264] = "dphe";
  gv_alg[4265] = "ktrm";
  gv_alg[4266] = "wolg";
  gv_alg[4267] = "hlst";
  gv_alg[4277] = 1;
  gv_alg[4287] = 5;
  gv_alg[4268] = "whwd";
  gv_alg[4278] = 1;
  gv_alg[4288] = 5;
  gv_alg[4269] = "I01H";
  gv_alg[4279] = 1;
  gv_alg[4289] = 7;
  gv_alg[4294] = 6;
  gv_alg[4295] = "I018";
  gv_alg[4296] = 0;
  gv_alg[4297] = 0;
  gv_alg[4298] = "dphe";
  gv_alg[4299] = "ktrm";
  gv_alg[4300] = "wtlg";
  gv_alg[4301] = "hlst";
  gv_alg[4311] = 1;
  gv_alg[4321] = 2;
  gv_alg[4302] = "shar";
  gv_alg[4312] = 1;
  gv_alg[4322] = 1;
  gv_alg[4303] = "rej3";
  gv_alg[4313] = 1;
  gv_alg[4323] = 2;
  gv_alg[4304] = "whwd";
  gv_alg[4314] = 1;
  gv_alg[4324] = 5;
  gv_alg[4305] = "I01H";
  gv_alg[4315] = 1;
  gv_alg[4325] = 7;
  gv_alg[4328] = 8;
  gv_alg[4329] = "I019";
  gv_alg[4330] = 0;
  gv_alg[4331] = 0;
  gv_alg[4332] = "dphe";
  gv_alg[4333] = "dthb";
  gv_alg[4334] = "wolg";
  gv_alg[4335] = "hlst";
  gv_alg[4345] = 1;
  gv_alg[4355] = 1;
  gv_alg[4336] = "shar";
  gv_alg[4346] = 1;
  gv_alg[4356] = 3;
  gv_alg[4337] = "rej3";
  gv_alg[4347] = 1;
  gv_alg[4357] = 1;
  gv_alg[4338] = "whwd";
  gv_alg[4348] = 1;
  gv_alg[4358] = 5;
  gv_alg[4339] = "I01H";
  gv_alg[4349] = 1;
  gv_alg[4359] = 7;
  gv_alg[4362] = 8;
  gv_alg[4363] = "I01A";
  gv_alg[4364] = 0;
  gv_alg[4365] = 0;
  gv_alg[4366] = "k3m2";
  gv_alg[4367] = "ktrm";
  gv_alg[4368] = "wolg";
  gv_alg[4369] = "hlst";
  gv_alg[4379] = 1;
  gv_alg[4389] = 2;
  gv_alg[4370] = "shar";
  gv_alg[4380] = 1;
  gv_alg[4390] = 1;
  gv_alg[4371] = "rej3";
  gv_alg[4381] = 1;
  gv_alg[4391] = 2;
  gv_alg[4372] = "whwd";
  gv_alg[4382] = 1;
  gv_alg[4392] = 5;
  gv_alg[4373] = "I01H";
  gv_alg[4383] = 1;
  gv_alg[4393] = 7;
  gv_alg[4396] = 8;
  gv_alg[4397] = "I01B";
  gv_alg[4398] = 0;
  gv_alg[4399] = 0;
  gv_alg[4400] = "wild";
  gv_alg[4410] = 1;
  gv_alg[4420] = 1;
  gv_alg[4401] = "fgsk";
  gv_alg[4411] = 1;
  gv_alg[4421] = 1;
  gv_alg[4402] = "fgdg";
  gv_alg[4412] = 1;
  gv_alg[4422] = 1;
  gv_alg[4403] = "whwd";
  gv_alg[4413] = 1;
  gv_alg[4423] = 1;
  gv_alg[4430] = 4;
  gv_alg[4431] = "gobm";
  gv_alg[4432] = 0;
  gv_alg[4433] = 0;
  gv_alg[4434] = "gvsm";
  gv_alg[4435] = "gobm";
  gv_alg[4436] = "gemt";
  gv_alg[4437] = "whwd";
  gv_alg[4447] = 1;
  gv_alg[4457] = 1;
  gv_alg[4438] = "I01I";
  gv_alg[4464] = 5;
  gv_alg[4465] = "tels";
  gv_alg[4466] = 0;
  gv_alg[4467] = 0;
  gv_alg[4468] = "tels";
  gv_alg[4469] = "whwd";
  gv_alg[4479] = 1;
  gv_alg[4489] = 2;
  gv_alg[4470] = "I01H";
  gv_alg[4480] = 1;
  gv_alg[4490] = 1;
  gv_alg[4471] = "I01V";
  gv_alg[4498] = 4;
  gv_alg[4499] = "rej4";
  gv_alg[4500] = 0;
  gv_alg[4501] = 0;
  gv_alg[4502] = "wild";
  gv_alg[4512] = 1;
  gv_alg[4522] = 1;
  gv_alg[4503] = "fgsk";
  gv_alg[4513] = 1;
  gv_alg[4523] = 1;
  gv_alg[4504] = "fgdg";
  gv_alg[4514] = 1;
  gv_alg[4524] = 1;
  gv_alg[4505] = "whwd";
  gv_alg[4515] = 1;
  gv_alg[4525] = 1;
  gv_alg[4532] = 4;
  gv_alg[4533] = "hbth";
  gv_alg[4534] = 0;
  gv_alg[4535] = 0;
  gv_alg[4536] = "rej6";
  gv_alg[4537] = "hbth";
  gv_alg[4538] = "grsl";
  gv_alg[4539] = "whwd";
  gv_alg[4549] = 1;
  gv_alg[4559] = 1;
  gv_alg[4540] = "I01J";
  gv_alg[4566] = 5;
  gv_alg[4567] = "sfog";
  gv_alg[4568] = 0;
  gv_alg[4569] = 0;
  gv_alg[4570] = "sfog";
  gv_alg[4571] = "whwd";
  gv_alg[4581] = 1;
  gv_alg[4591] = 2;
  gv_alg[4572] = "I01H";
  gv_alg[4582] = 1;
  gv_alg[4592] = 1;
  gv_alg[4573] = "I01V";
  gv_alg[4600] = 4;
  gv_alg[4601] = "flag";
  gv_alg[4602] = 0;
  gv_alg[4603] = 0;
  gv_alg[4604] = "wild";
  gv_alg[4614] = 1;
  gv_alg[4624] = 1;
  gv_alg[4605] = "fgsk";
  gv_alg[4615] = 1;
  gv_alg[4625] = 1;
  gv_alg[4606] = "fgdg";
  gv_alg[4616] = 1;
  gv_alg[4626] = 1;
  gv_alg[4607] = "whwd";
  gv_alg[4617] = 1;
  gv_alg[4627] = 1;
  gv_alg[4634] = 4;
  gv_alg[4635] = "jdrn";
  gv_alg[4636] = 0;
  gv_alg[4637] = 0;
  gv_alg[4638] = "jdrn";
  gv_alg[4639] = "iwbr";
  gv_alg[4640] = "kgal";
  gv_alg[4641] = "whwd";
  gv_alg[4651] = 1;
  gv_alg[4661] = 1;
  gv_alg[4642] = "I01K";
  gv_alg[4668] = 5;
  gv_alg[4669] = "klmm";
  gv_alg[4670] = 0;
  gv_alg[4671] = 0;
  gv_alg[4672] = "klmm";
  gv_alg[4673] = "whwd";
  gv_alg[4683] = 1;
  gv_alg[4693] = 2;
  gv_alg[4674] = "I01H";
  gv_alg[4684] = 1;
  gv_alg[4694] = 1;
  gv_alg[4675] = "I01V";
  gv_alg[4702] = 4;
  gv_alg[4703] = "rej2";
  gv_alg[4704] = 0;
  gv_alg[4705] = 0;
  gv_alg[4706] = "wild";
  gv_alg[4716] = 1;
  gv_alg[4726] = 1;
  gv_alg[4707] = "fgsk";
  gv_alg[4717] = 1;
  gv_alg[4727] = 1;
  gv_alg[4708] = "fgdg";
  gv_alg[4718] = 1;
  gv_alg[4728] = 1;
  gv_alg[4709] = "whwd";
  gv_alg[4719] = 1;
  gv_alg[4729] = 1;
  gv_alg[4736] = 4;
  gv_alg[4737] = "mlst";
  gv_alg[4738] = 0;
  gv_alg[4739] = 0;
  gv_alg[4740] = "lnrn";
  gv_alg[4741] = "mlst";
  gv_alg[4742] = "rej5";
  gv_alg[4743] = "whwd";
  gv_alg[4753] = 1;
  gv_alg[4763] = 1;
  gv_alg[4744] = "I01L";
  gv_alg[4770] = 5;
  gv_alg[4771] = "mnsf";
  gv_alg[4772] = 0;
  gv_alg[4773] = 0;
  gv_alg[4774] = "mnsf";
  gv_alg[4775] = "whwd";
  gv_alg[4785] = 1;
  gv_alg[4795] = 2;
  gv_alg[4776] = "I01H";
  gv_alg[4786] = 1;
  gv_alg[4796] = 1;
  gv_alg[4777] = "I01V";
  gv_alg[4804] = 4;
  gv_alg[4805] = "rej1";
  gv_alg[4806] = 0;
  gv_alg[4807] = 0;
  gv_alg[4808] = "wild";
  gv_alg[4818] = 1;
  gv_alg[4828] = 1;
  gv_alg[4809] = "fgsk";
  gv_alg[4819] = 1;
  gv_alg[4829] = 1;
  gv_alg[4810] = "fgdg";
  gv_alg[4820] = 1;
  gv_alg[4830] = 1;
  gv_alg[4811] = "whwd";
  gv_alg[4821] = 1;
  gv_alg[4831] = 1;
  gv_alg[4838] = 4;
  gv_alg[4839] = "lure";
  gv_alg[4840] = 0;
  gv_alg[4841] = 0;
  gv_alg[4842] = "lure";
  gv_alg[4843] = "nspi";
  gv_alg[4844] = "nflg";
  gv_alg[4845] = "whwd";
  gv_alg[4855] = 1;
  gv_alg[4865] = 1;
  gv_alg[4846] = "I01M";
  gv_alg[4872] = 5;
  gv_alg[4873] = "ocor";
  gv_alg[4874] = 0;
  gv_alg[4875] = 0;
  gv_alg[4876] = "ocor";
  gv_alg[4877] = "whwd";
  gv_alg[4887] = 1;
  gv_alg[4897] = 2;
  gv_alg[4878] = "I01H";
  gv_alg[4888] = 1;
  gv_alg[4898] = 1;
  gv_alg[4879] = "I01V";
  gv_alg[4906] = 4;
  gv_alg[4907] = "ofir";
  gv_alg[4908] = 0;
  gv_alg[4909] = 0;
  gv_alg[4910] = "wild";
  gv_alg[4920] = 1;
  gv_alg[4930] = 1;
  gv_alg[4911] = "fgsk";
  gv_alg[4921] = 1;
  gv_alg[4931] = 1;
  gv_alg[4912] = "fgdg";
  gv_alg[4922] = 1;
  gv_alg[4932] = 1;
  gv_alg[4913] = "whwd";
  gv_alg[4923] = 1;
  gv_alg[4933] = 1;
  gv_alg[4940] = 4;
  gv_alg[4941] = "gldo";
  gv_alg[4942] = 0;
  gv_alg[4943] = 0;
  gv_alg[4944] = "olig";
  gv_alg[4945] = "gldo";
  gv_alg[4946] = "oli2";
  gv_alg[4947] = "whwd";
  gv_alg[4957] = 1;
  gv_alg[4967] = 1;
  gv_alg[4948] = "I01N";
  gv_alg[4974] = 5;
  gv_alg[4975] = "oslo";
  gv_alg[4976] = 0;
  gv_alg[4977] = 0;
  gv_alg[4978] = "oslo";
  gv_alg[4979] = "whwd";
  gv_alg[4989] = 1;
  gv_alg[4999] = 2;
  gv_alg[4980] = "I01H";
  gv_alg[4990] = 1;
  gv_alg[5000] = 1;
  gv_alg[4981] = "I01V";
  gv_alg[5008] = 4;
  gv_alg[5009] = "oven";
  gv_alg[5010] = 0;
  gv_alg[5011] = 0;
  gv_alg[5012] = "wild";
  gv_alg[5022] = 1;
  gv_alg[5032] = 1;
  gv_alg[5013] = "fgsk";
  gv_alg[5023] = 1;
  gv_alg[5033] = 1;
  gv_alg[5014] = "fgdg";
  gv_alg[5024] = 1;
  gv_alg[5034] = 1;
  gv_alg[5015] = "whwd";
  gv_alg[5025] = 1;
  gv_alg[5035] = 1;
  gv_alg[5042] = 4;
  gv_alg[5043] = "pgin";
  gv_alg[5044] = 0;
  gv_alg[5045] = 0;
  gv_alg[5046] = "oflg";
  gv_alg[5047] = "pspd";
  gv_alg[5048] = "pgin";
  gv_alg[5049] = "whwd";
  gv_alg[5059] = 1;
  gv_alg[5069] = 1;
  gv_alg[5050] = "I01O";
  gv_alg[5076] = 5;
  gv_alg[5077] = "rde0";
  gv_alg[5078] = 0;
  gv_alg[5079] = 0;
  gv_alg[5080] = "rde0";
  gv_alg[5081] = "whwd";
  gv_alg[5091] = 1;
  gv_alg[5101] = 2;
  gv_alg[5082] = "I01H";
  gv_alg[5092] = 1;
  gv_alg[5102] = 1;
  gv_alg[5083] = "I01V";
  gv_alg[5110] = 4;
  gv_alg[5111] = "rnsp";
  gv_alg[5112] = 0;
  gv_alg[5113] = 0;
  gv_alg[5114] = "wild";
  gv_alg[5124] = 1;
  gv_alg[5134] = 1;
  gv_alg[5115] = "fgsk";
  gv_alg[5125] = 1;
  gv_alg[5135] = 1;
  gv_alg[5116] = "fgdg";
  gv_alg[5126] = 1;
  gv_alg[5136] = 1;
  gv_alg[5117] = "whwd";
  gv_alg[5127] = 1;
  gv_alg[5137] = 1;
  gv_alg[5144] = 4;
  gv_alg[5145] = "ram1";
  gv_alg[5146] = 0;
  gv_alg[5147] = 0;
  gv_alg[5148] = "ram4";
  gv_alg[5149] = "ram1";
  gv_alg[5150] = "ram2";
  gv_alg[5151] = "whwd";
  gv_alg[5161] = 1;
  gv_alg[5171] = 1;
  gv_alg[5152] = "I01P";
  gv_alg[5178] = 5;
  gv_alg[5179] = "ram3";
  gv_alg[5180] = 0;
  gv_alg[5181] = 0;
  gv_alg[5182] = "ram3";
  gv_alg[5183] = "whwd";
  gv_alg[5193] = 1;
  gv_alg[5203] = 2;
  gv_alg[5184] = "I01H";
  gv_alg[5194] = 1;
  gv_alg[5204] = 1;
  gv_alg[5185] = "I01V";
  gv_alg[5212] = 4;
  gv_alg[5213] = "rugt";
  gv_alg[5214] = 0;
  gv_alg[5215] = 0;
  gv_alg[5216] = "wild";
  gv_alg[5226] = 1;
  gv_alg[5236] = 1;
  gv_alg[5217] = "fgsk";
  gv_alg[5227] = 1;
  gv_alg[5237] = 1;
  gv_alg[5218] = "fgdg";
  gv_alg[5228] = 1;
  gv_alg[5238] = 1;
  gv_alg[5219] = "whwd";
  gv_alg[5229] = 1;
  gv_alg[5239] = 1;
  gv_alg[5246] = 4;
  gv_alg[5247] = "schl";
  gv_alg[5248] = 0;
  gv_alg[5249] = 0;
  gv_alg[5250] = "rump";
  gv_alg[5251] = "horl";
  gv_alg[5252] = "schl";
  gv_alg[5253] = "whwd";
  gv_alg[5263] = 1;
  gv_alg[5273] = 1;
  gv_alg[5254] = "I01Q";
  gv_alg[5280] = 5;
  gv_alg[5281] = "ccmd";
  gv_alg[5282] = 0;
  gv_alg[5283] = 0;
  gv_alg[5284] = "ccmd";
  gv_alg[5285] = "whwd";
  gv_alg[5295] = 1;
  gv_alg[5305] = 2;
  gv_alg[5286] = "I01H";
  gv_alg[5296] = 1;
  gv_alg[5306] = 1;
  gv_alg[5287] = "I01V";
  gv_alg[5314] = 4;
  gv_alg[5315] = "rots";
  gv_alg[5316] = 0;
  gv_alg[5317] = 0;
  gv_alg[5318] = "wild";
  gv_alg[5328] = 1;
  gv_alg[5338] = 1;
  gv_alg[5319] = "fgsk";
  gv_alg[5329] = 1;
  gv_alg[5339] = 1;
  gv_alg[5320] = "fgdg";
  gv_alg[5330] = 1;
  gv_alg[5340] = 1;
  gv_alg[5321] = "whwd";
  gv_alg[5331] = 1;
  gv_alg[5341] = 1;
  gv_alg[5348] = 4;
  gv_alg[5349] = "scul";
  gv_alg[5350] = 0;
  gv_alg[5351] = 0;
  gv_alg[5352] = "scul";
  gv_alg[5353] = "srtl";
  gv_alg[5354] = "srbd";
  gv_alg[5355] = "whwd";
  gv_alg[5365] = 1;
  gv_alg[5375] = 1;
  gv_alg[5356] = "I01R";
  gv_alg[5382] = 5;
  gv_alg[5383] = "sor1";
  gv_alg[5384] = 0;
  gv_alg[5385] = 0;
  gv_alg[5386] = "sor1";
  gv_alg[5387] = "whwd";
  gv_alg[5397] = 1;
  gv_alg[5407] = 2;
  gv_alg[5388] = "I01H";
  gv_alg[5398] = 1;
  gv_alg[5408] = 1;
  gv_alg[5389] = "I01V";
  gv_alg[5416] = 4;
  gv_alg[5417] = "sora";
  gv_alg[5418] = 0;
  gv_alg[5419] = 0;
  gv_alg[5420] = "wild";
  gv_alg[5430] = 1;
  gv_alg[5440] = 1;
  gv_alg[5421] = "fgsk";
  gv_alg[5431] = 1;
  gv_alg[5441] = 1;
  gv_alg[5422] = "fgdg";
  gv_alg[5432] = 1;
  gv_alg[5442] = 1;
  gv_alg[5423] = "whwd";
  gv_alg[5433] = 1;
  gv_alg[5443] = 1;
  gv_alg[5450] = 4;
  gv_alg[5451] = "sor2";
  gv_alg[5452] = 0;
  gv_alg[5453] = 0;
  gv_alg[5454] = "sor4";
  gv_alg[5455] = "sor3";
  gv_alg[5456] = "sor2";
  gv_alg[5457] = "whwd";
  gv_alg[5467] = 1;
  gv_alg[5477] = 1;
  gv_alg[5458] = "I01S";
  gv_alg[5484] = 5;
  gv_alg[5485] = "sor5";
  gv_alg[5486] = 0;
  gv_alg[5487] = 0;
  gv_alg[5488] = "sor5";
  gv_alg[5489] = "whwd";
  gv_alg[5499] = 1;
  gv_alg[5509] = 2;
  gv_alg[5490] = "I01H";
  gv_alg[5500] = 1;
  gv_alg[5510] = 1;
  gv_alg[5491] = "I01V";
  gv_alg[5518] = 4;
  gv_alg[5519] = "sor6";
  gv_alg[5520] = 0;
  gv_alg[5521] = 0;
  gv_alg[5522] = "wild";
  gv_alg[5532] = 1;
  gv_alg[5542] = 1;
  gv_alg[5523] = "fgsk";
  gv_alg[5533] = 1;
  gv_alg[5543] = 1;
  gv_alg[5524] = "fgdg";
  gv_alg[5534] = 1;
  gv_alg[5544] = 1;
  gv_alg[5525] = "whwd";
  gv_alg[5535] = 1;
  gv_alg[5545] = 1;
  gv_alg[5552] = 4;
  gv_alg[5553] = "sor8";
  gv_alg[5554] = 0;
  gv_alg[5555] = 0;
  gv_alg[5556] = "sor9";
  gv_alg[5557] = "sor8";
  gv_alg[5558] = "sor7";
  gv_alg[5559] = "whwd";
  gv_alg[5569] = 1;
  gv_alg[5579] = 1;
  gv_alg[5560] = "I01T";
  gv_alg[5586] = 5;
  gv_alg[5587] = "shcw";
  gv_alg[5588] = 0;
  gv_alg[5589] = 0;
  gv_alg[5590] = "shcw";
  gv_alg[5591] = "whwd";
  gv_alg[5601] = 1;
  gv_alg[5611] = 2;
  gv_alg[5592] = "I01H";
  gv_alg[5602] = 1;
  gv_alg[5612] = 1;
  gv_alg[5593] = "I01V";
  gv_alg[5620] = 4;
  gv_alg[5621] = "shtm";
  gv_alg[5622] = 0;
  gv_alg[5623] = 0;
  gv_alg[5624] = "hlst";
  gv_alg[5634] = 1;
  gv_alg[5644] = 1;
  gv_alg[5625] = "whwd";
  gv_alg[5635] = 1;
  gv_alg[5645] = 1;
  gv_alg[5654] = 2;
  gv_alg[5655] = "gsou";
  gv_alg[5656] = 0;
  gv_alg[5657] = 0;
  gv_alg[5658] = "gsou";
  gv_alg[5659] = "hlst";
  gv_alg[5669] = 1;
  gv_alg[5679] = 3;
  gv_alg[5660] = "whwd";
  gv_alg[5670] = 1;
  gv_alg[5680] = 2;
  gv_alg[5661] = "I01H";
  gv_alg[5671] = 1;
  gv_alg[5681] = 1;
  gv_alg[5662] = "I01D";
  gv_alg[5672] = 1;
  gv_alg[5682] = 1;
  gv_alg[5663] = "I01W";
  gv_alg[5688] = 6;
  gv_alg[5689] = "sbok";
  gv_alg[5690] = 0;
  gv_alg[5691] = 0;
  gv_alg[5692] = "shar";
  gv_alg[5702] = 1;
  gv_alg[5712] = 1;
  gv_alg[5693] = "whwd";
  gv_alg[5703] = 1;
  gv_alg[5713] = 1;
  gv_alg[5722] = 2;
  gv_alg[5723] = "sprn";
  gv_alg[5724] = 0;
  gv_alg[5725] = 0;
  gv_alg[5726] = "sprn";
  gv_alg[5727] = "shar";
  gv_alg[5737] = 1;
  gv_alg[5747] = 3;
  gv_alg[5728] = "whwd";
  gv_alg[5738] = 1;
  gv_alg[5748] = 2;
  gv_alg[5729] = "I01H";
  gv_alg[5739] = 1;
  gv_alg[5749] = 1;
  gv_alg[5730] = "I01D";
  gv_alg[5740] = 1;
  gv_alg[5750] = 1;
  gv_alg[5731] = "I01W";
  gv_alg[5756] = 6;
  gv_alg[5757] = "spre";
  gv_alg[5758] = 0;
  gv_alg[5759] = 0;
  gv_alg[5760] = "sand";
  gv_alg[5770] = 1;
  gv_alg[5780] = 1;
  gv_alg[5761] = "whwd";
  gv_alg[5771] = 1;
  gv_alg[5781] = 1;
  gv_alg[5790] = 2;
  gv_alg[5791] = "stre";
  gv_alg[5792] = 0;
  gv_alg[5793] = 0;
  gv_alg[5794] = "stre";
  gv_alg[5795] = "sand";
  gv_alg[5805] = 1;
  gv_alg[5815] = 3;
  gv_alg[5796] = "whwd";
  gv_alg[5806] = 1;
  gv_alg[5816] = 2;
  gv_alg[5797] = "I01H";
  gv_alg[5807] = 1;
  gv_alg[5817] = 1;
  gv_alg[5798] = "I01D";
  gv_alg[5808] = 1;
  gv_alg[5818] = 1;
  gv_alg[5799] = "I01W";
  gv_alg[5824] = 6;
  gv_alg[5825] = "stwa";
  gv_alg[5826] = 0;
  gv_alg[5827] = 0;
  gv_alg[5828] = "sand";
  gv_alg[5838] = 1;
  gv_alg[5848] = 1;
  gv_alg[5829] = "whwd";
  gv_alg[5839] = 1;
  gv_alg[5849] = 1;
  gv_alg[5858] = 2;
  gv_alg[5859] = "thdm";
  gv_alg[5860] = 0;
  gv_alg[5861] = 0;
  gv_alg[5862] = "thdm";
  gv_alg[5863] = "sand";
  gv_alg[5873] = 1;
  gv_alg[5883] = 3;
  gv_alg[5864] = "whwd";
  gv_alg[5874] = 1;
  gv_alg[5884] = 2;
  gv_alg[5865] = "I01H";
  gv_alg[5875] = 1;
  gv_alg[5885] = 1;
  gv_alg[5866] = "I01D";
  gv_alg[5876] = 1;
  gv_alg[5886] = 1;
  gv_alg[5867] = "I01W";
  gv_alg[5892] = 6;
  gv_alg[5893] = "tbak";
  gv_alg[5894] = 0;
  gv_alg[5895] = 0;
  gv_alg[5896] = "sres";
  gv_alg[5906] = 1;
  gv_alg[5916] = 1;
  gv_alg[5897] = "whwd";
  gv_alg[5907] = 1;
  gv_alg[5917] = 1;
  gv_alg[5926] = 2;
  gv_alg[5927] = "tbar";
  gv_alg[5928] = 0;
  gv_alg[5929] = 0;
  gv_alg[5930] = "tbar";
  gv_alg[5931] = "sres";
  gv_alg[5941] = 1;
  gv_alg[5951] = 3;
  gv_alg[5932] = "whwd";
  gv_alg[5942] = 1;
  gv_alg[5952] = 2;
  gv_alg[5933] = "I01H";
  gv_alg[5943] = 1;
  gv_alg[5953] = 1;
  gv_alg[5934] = "I01D";
  gv_alg[5944] = 1;
  gv_alg[5954] = 1;
  gv_alg[5935] = "I01W";
  gv_alg[5960] = 6;
  gv_alg[5961] = "tbsm";
  gv_alg[5962] = 0;
  gv_alg[5963] = 0;
  gv_alg[5964] = "rej3";
  gv_alg[5974] = 1;
  gv_alg[5984] = 1;
  gv_alg[5965] = "whwd";
  gv_alg[5975] = 1;
  gv_alg[5985] = 1;
  gv_alg[5994] = 2;
  gv_alg[5995] = "tfar";
  gv_alg[5996] = 0;
  gv_alg[5997] = 0;
  gv_alg[5998] = "tfar";
  gv_alg[5999] = "rej3";
  gv_alg[6009] = 1;
  gv_alg[6019] = 3;
  gv_alg[6000] = "whwd";
  gv_alg[6010] = 1;
  gv_alg[6020] = 2;
  gv_alg[6001] = "I01H";
  gv_alg[6011] = 1;
  gv_alg[6021] = 1;
  gv_alg[6002] = "I01D";
  gv_alg[6012] = 1;
  gv_alg[6022] = 1;
  gv_alg[6003] = "I01W";
  gv_alg[6028] = 6;
  gv_alg[6029] = "tlum";
  gv_alg[6030] = 0;
  gv_alg[6031] = 0;
}
function f_bjX() {
  var lv_bjY = GetManipulatingUnit();
  var lv_bjZ = GetManipulatedItem();
  var lv_bka = GetOwningPlayer(lv_bjY);
  var lv_bkb = GetPlayerId(lv_bka);
  var lv_bkc = 0;
  var lv_bkd = GetItemTypeId(lv_bjZ);
  if (IsUnitType(lv_bjY, UNIT_TYPE_HERO)) {
    if (LoadInteger(gv_abH, gv_abV, StringHash(GetItemName(lv_bjZ))) > 0) {
      gv_ald[GetPlayerId(lv_bka)] =
        gv_ald[GetPlayerId(lv_bka)] -
        LoadInteger(gv_abH, gv_abV, StringHash(GetItemName(lv_bjZ)));
    }
    if (LoadInteger(gv_abH, gv_abW, StringHash(GetItemName(lv_bjZ))) > 0) {
      gv_ald[GetPlayerId(lv_bka) + 8] =
        gv_ald[GetPlayerId(lv_bka) + 8] -
        LoadInteger(gv_abH, gv_abW, StringHash(GetItemName(lv_bjZ)));
    }
    if (GetItemTypeId(lv_bjZ) == "I066") {
      f_aPl(gv_ale[lv_bkb]);
    }
    if (lv_bjY == gv_ale[lv_bkb]) {
      do {
        if (lv_bkc > gv_aaE.getInt(1)) {
          break;
        }
        if (lv_bkd == gv_aav.getInt(lv_bkc)) {
          f_aAN(lv_bjY, BONUS_ARMOR, -gv_aaw.getInt(lv_bkc));
          f_aAN(lv_bjY, BONUS_DAMAGE, -gv_aax.getInt(lv_bkc));
          f_aAN(lv_bjY, BONUS_HERO_STR, -gv_aay.getInt(lv_bkc));
          f_aAN(lv_bjY, BONUS_HERO_AGI, -gv_aaz.getInt(lv_bkc));
          f_aAN(lv_bjY, BONUS_HERO_INT, -gv_aaA.getInt(lv_bkc));
          f_aAN(lv_bjY, BONUS_LIFE_REGEN, -gv_aaB.getInt(lv_bkc));
          lv_bkc = gv_aaE.getInt(1);
        }
        lv_bkc = lv_bkc + 1;
      } while (true);
    }
  }
  lv_bjY = null;
  lv_bjZ = null;
  lv_bka = null;
}
function f_bke() {
  var lv_bkf = GetTriggerUnit();
  var lv_bkg = GetPlayerId(GetOwningPlayer(lv_bkf));
  var lv_bkh = GetManipulatedItem();
  var lv_bki = GetItemTypeId(lv_bkh);
  var lv_bkj = UnitItemInSlot(gv_ale[lv_bkg], 5);
  var lv_bkk = 0;
  var lv_bkl;
  var lv_bkm;
  gv_acg = GetOwningPlayer(lv_bkf);
  if (lv_bki == "I05M") {
    UnitModifySkillPoints(gv_ale[lv_bkg], 1);
  } else {
    if (lv_bki == "I062" || lv_bki == "I063" || lv_bki == "I05X") {
      SetItemDroppable(lv_bkh, false);
      PolledWait(60);
      SetItemDroppable(lv_bkh, true);
    } else {
      do {
        if (lv_bkk > gv_aaE.getInt(2)) {
          break;
        }
        if (lv_bki == gv_aaF.getInt(lv_bkk)) {
          if (lv_bkk < 10) {
            SetUnitState(
              gv_ale[lv_bkg],
              UNIT_STATE_LIFE,
              GetUnitState(gv_ale[lv_bkg], UNIT_STATE_LIFE) +
                gv_aaG.getInt(lv_bkk) * gv_aan[lv_bkg]
            );
          } else {
            if (lv_bkk < 20) {
              SetUnitState(
                gv_ale[lv_bkg],
                UNIT_STATE_MANA,
                GetUnitState(gv_ale[lv_bkg], UNIT_STATE_MANA) +
                  gv_aaH.getInt(lv_bkk) * gv_aan[lv_bkg]
              );
            } else {
              if (lv_bki == "shas") {
                SetUnitX(gv_ale[lv_bkg + 8], GetUnitX(gv_ale[lv_bkg]));
                SetUnitY(gv_ale[lv_bkg + 8], GetUnitY(gv_ale[lv_bkg]));
              } else {
                lv_bkl = CreateGroup();
                GroupEnumUnitsInRange(
                  lv_bkl,
                  GetUnitX(gv_ale[lv_bkg]),
                  GetUnitY(gv_ale[lv_bkg]),
                  600 * gv_aam[lv_bkg],
                  Condition(f_aAw)
                );
                do {
                  lv_bkm = FirstOfGroup(lv_bkl);
                  if (lv_bkm == null) {
                    break;
                  }
                  SetUnitState(
                    lv_bkm,
                    UNIT_STATE_LIFE,
                    GetUnitState(lv_bkm, UNIT_STATE_LIFE) +
                      gv_aaG.getInt(lv_bkk) * f_azo(lv_bkm)
                  );
                  SetUnitState(
                    lv_bkm,
                    UNIT_STATE_MANA,
                    GetUnitState(lv_bkm, UNIT_STATE_MANA) +
                      gv_aaH.getInt(lv_bkk) * f_azo(lv_bkm)
                  );
                  GroupRemoveUnit(lv_bkl, lv_bkm);
                  lv_bkm = null;
                } while (true);
                DestroyGroup(lv_bkl);
              }
            }
          }
          lv_bkk = 50;
        } else {
          lv_bkk = lv_bkk + 1;
        }
      } while (true);
      if (
        lv_bkk < 50 &&
        GetUnitTypeId(lv_bkf) == "e000" &&
        GetWidgetLife(gv_ale[lv_bkg]) > 0.405
      ) {
        if (lv_bki == "stwp") {
          SetUnitPosition(gv_ale[lv_bkg], GetUnitX(lv_bkf), GetUnitX(lv_bkf));
        }
        if (lv_bkj != null) {
          UnitRemoveItem(gv_ale[lv_bkg], lv_bkj);
        }
        gv_alg[8106 + lv_bkg] = 1;
        lv_bkh = UnitAddItemById(gv_ale[lv_bkg], lv_bki);
        gv_alg[8106 + lv_bkg] = 0;
        UnitUseItem(gv_ale[lv_bkg], lv_bkh);
        if (lv_bkh != null) {
          RemoveItem(lv_bkh);
        }
        if (lv_bkj != null) {
          UnitAddItem(gv_ale[lv_bkg], lv_bkj);
        }
      }
    }
  }
  lv_bkf = null;
  lv_bkh = null;
  lv_bkj = null;
  lv_bkl = null;
}
function f_bkn() {
  var lv_bko = GetTriggerPlayer();
  var lv_bkp = GetPlayerId(lv_bko);
  var lv_bkq;
  if (f_aJz(lv_bkp, "I06A")) {
    lv_bkq = "Atlas, Avatar of Earth";
    gv_all[50 + lv_bkp] = Location(3650, 14400);
    if (gv_alg.getInt(2 + 7000) == 2) {
      lv_bkq = "Themus, Avatar of Justice";
      gv_all[50 + lv_bkp] = Location(-11850, 3150);
    }
    if (gv_alg.getInt(3 + 7000) == 2) {
      lv_bkq = "Uranus, Avatar of Air";
      gv_all[50 + lv_bkp] = Location(-8400, 12500);
    }
    if (gv_alg.getInt(4 + 7000) == 2) {
      lv_bkq = "Oceanus, Avatar of Water";
      gv_all[50 + lv_bkp] = Location(3100, -8150);
    }
    if (gv_alg.getInt(5 + 7000) == 2) {
      lv_bkq = "Rhea, Mistress of Pain";
      gv_all[50 + lv_bkp] = Location(-8150, -2600);
    }
    if (gv_alg.getInt(6 + 7000) == 2) {
      lv_bkq = "Thea, Avatar of Nature";
      gv_all[50 + lv_bkp] = Location(-2700, -5100);
    }
    if (gv_alg.getInt(7 + 7000) == 2) {
      lv_bkq = "Gaea, Avatar of the Elements";
      gv_all[50 + lv_bkp] = Location(-2450, -13300);
    }
    if (gv_alg.getInt(8 + 7000) == 2) {
      lv_bkq = "Cronus, Avatar of Death";
      gv_all[50 + lv_bkp] = Location(-12500, -1500);
    }
    if (gv_alg.getInt(9 + 7000) == 2) {
      lv_bkq = "Persephone, Queen of the Underworld";
      gv_all[50 + lv_bkp] = Location(-13500, 13000);
    }
    DisplayTimedTextToPlayer(
      lv_bko,
      0,
      0,
      20,
      S2S(gv_alf[82] + "Favor Teleport Beacon set to: ") + lv_bkq
    );
  }
  lv_bko = null;
}
function f_bkr() {
  var lv_bks = GetTriggerPlayer();
  var lv_bkt = GetPlayerId(lv_bks);
  var lv_bku;
  if (f_aJz(lv_bkt, "I06B")) {
    if (gv_alg.getInt(280 + lv_bkt) != 1) {
      gv_alg[280 + lv_bkt] = 1;
      UnitResetCooldown(gv_ale[lv_bkt]);
      DisplayTimedTextToPlayer(
        lv_bks,
        0,
        0,
        20,
        S2S(gv_alf[82] + "Your hero experiences a rapid cooldown.")
      );
    } else {
      DisplayTimedTextToPlayer(
        lv_bks,
        0,
        0,
        20,
        S2S(gv_alf[82] + "The primal mana seems to still be charging.")
      );
    }
  }
  lv_bks = null;
}
function f_bkv() {
  var lv_bkw = GetPlayerId(GetOwningPlayer(GetTriggerUnit()));
  var lv_bkx = 0;
  var lv_bky = GetItemTypeId(GetManipulatedItem());
  var lv_bkz;
  var lv_bkA;
  if (lv_bky == "rhe3") {
    PingMinimapForForce(
      bj_FORCE_ALL_PLAYERS,
      GetUnitX(gv_ajU),
      GetUnitY(gv_ajU),
      3
    );
    PingMinimapForForce(
      bj_FORCE_ALL_PLAYERS,
      GetUnitX(gv_ajV),
      GetUnitY(gv_ajV),
      3
    );
    PingMinimapForForce(
      bj_FORCE_ALL_PLAYERS,
      GetUnitX(gv_ajO),
      GetUnitY(gv_ajO),
      3
    );
    PingMinimapForForce(
      bj_FORCE_ALL_PLAYERS,
      GetUnitX(gv_ajT),
      GetUnitY(gv_ajT),
      3
    );
    PingMinimapForForce(
      bj_FORCE_ALL_PLAYERS,
      GetUnitX(gv_akb),
      GetUnitY(gv_akb),
      3
    );
  }
  if (lv_bky == "rma2") {
    PingMinimapForForce(
      bj_FORCE_ALL_PLAYERS,
      GetRectCenterX(gv_adA),
      GetRectCenterY(gv_adA),
      3
    );
  }
  if (lv_bky == "rre2") {
    PingMinimapForForce(
      bj_FORCE_ALL_PLAYERS,
      GetRectCenterX(gv_acH),
      GetRectCenterY(gv_acH),
      3
    );
  }
  if (lv_bky == "I03F") {
    lv_bkz = GetRectCenterX(gv_adY);
    lv_bkA = GetRectCenterY(gv_adY);
    lv_bkx = 1;
  }
  if (lv_bky == "I03E") {
    lv_bkz = GetRectCenterX(gv_adf);
    lv_bkA = GetRectCenterY(gv_adf);
    lv_bkx = 30;
  }
  if (lv_bky == "I03H") {
    lv_bkz = GetRectCenterX(gv_adl);
    lv_bkA = GetRectCenterY(gv_adl);
    lv_bkx = 55;
  }
  if (lv_bky == "I03G") {
    lv_bkz = GetRectCenterX(gv_aeR);
    lv_bkA = GetRectCenterY(gv_aeR);
    lv_bkx = 85;
  }
  if (lv_bkx > 0 && GetHeroLevel(gv_ale[lv_bkw]) >= lv_bkx) {
    SetUnitPosition(gv_ale[lv_bkw], lv_bkz, lv_bkA);
    PanCameraToTimedForPlayer(Player(lv_bkw), lv_bkz, lv_bkA, 0.0);
    DestroyEffect(
      AddSpecialEffectTarget(
        "Abilities\\Spells\\Human\\MassTeleport\\MassTeleportCaster.mdl",
        gv_ale[lv_bkw],
        "origin"
      )
    );
  } else {
    if (lv_bkx == 30) {
      SetPlayerState(
        GetOwningPlayer(GetTriggerUnit()),
        PLAYER_STATE_RESOURCE_GOLD,
        GetPlayerState(
          GetOwningPlayer(GetTriggerUnit()),
          PLAYER_STATE_RESOURCE_GOLD
        ) + 250
      );
      f_aLO(
        GetOwningPlayer(GetTriggerUnit()),
        "You need to be level 30 to teleport to Sparta."
      );
    }
    if (lv_bkx == 55) {
      SetPlayerState(
        GetOwningPlayer(GetTriggerUnit()),
        PLAYER_STATE_RESOURCE_GOLD,
        GetPlayerState(
          GetOwningPlayer(GetTriggerUnit()),
          PLAYER_STATE_RESOURCE_GOLD
        ) + 500
      );
      f_aLO(
        GetOwningPlayer(GetTriggerUnit()),
        "You need to be level 55 to teleport to Sparta."
      );
    }
    if (lv_bkx == 85) {
      SetPlayerState(
        GetOwningPlayer(GetTriggerUnit()),
        PLAYER_STATE_RESOURCE_GOLD,
        GetPlayerState(
          GetOwningPlayer(GetTriggerUnit()),
          PLAYER_STATE_RESOURCE_GOLD
        ) + 1000
      );
      f_aLO(
        GetOwningPlayer(GetTriggerUnit()),
        "You need to be level 85 to teleport to Sparta."
      );
    }
  }
}
function f_bkB() {
  var lv_bkC = 0;
  var lv_bkD = 0;
  var lv_bkE = 0;
  var lv_bkF = 0;
  var lv_bkG = GetTriggerUnit();
  var lv_bkH = GetPlayerId(GetOwningPlayer(lv_bkG));
  var lv_bkI = GetManipulatedItem();
  var lv_bkJ = GetItemTypeId(lv_bkI);
  var lv_bkK = GetItemCharges(lv_bkI);
  do {
    lv_bkD = lv_bkD + 1;
    if (lv_bkD > 2) {
      break;
    }
    do {
      if (lv_bkC > 5) {
        break;
      }
      gv_amA = UnitItemInSlot(lv_bkG, lv_bkC);
      lv_bkE = GetItemCharges(gv_amA);
      if (lv_bkE < 7 && gv_amA != lv_bkI && GetItemTypeId(gv_amA) == lv_bkJ) {
        lv_bkF = 7 - lv_bkE;
        if (lv_bkK > lv_bkF) {
          SetItemCharges(gv_amA, 7);
          lv_bkK = lv_bkK - lv_bkF;
          SetItemCharges(lv_bkI, lv_bkK);
        } else {
          SetItemCharges(gv_amA, lv_bkE + lv_bkK);
          RemoveItem(lv_bkI);
          lv_bkG = null;
          lv_bkI = null;
          return;
        }
      }
      lv_bkC = lv_bkC + 1;
    } while (true);
    if (lv_bkG == gv_ale[lv_bkC]) {
      lv_bkG = gv_ale[lv_bkC + 8];
    } else {
      lv_bkG = gv_ale[lv_bkC];
    }
    lv_bkC = 0;
  } while (true);
  lv_bkG = null;
  lv_bkI = null;
}
function f_bkL(lv_bkM) {
  if (lv_bkM == "4") {
    return "a Dryad";
  } else {
    if (lv_bkM == "6") {
      return "a Javalineer";
    } else {
      if (lv_bkM == "E") {
        return "an Assassin";
      } else {
        if (lv_bkM == "D") {
          return "an Amazon";
        } else {
          if (lv_bkM == "3") {
            return "a Bokor";
          } else {
            if (lv_bkM == "B") {
              return "a Temple Guardian";
            } else {
              if (lv_bkM == "1") {
                return "a Pyromancer";
              } else {
                if (lv_bkM == "2") {
                  return "a Hydromancer";
                } else {
                  if (lv_bkM == "5") {
                    return "a Priestess";
                  } else {
                    if (lv_bkM == "7") {
                      return "an Arcane Ranger";
                    } else {
                      if (lv_bkM == "F") {
                        return "a Spell Blade";
                      } else {
                        if (lv_bkM == "C") {
                          return "a Spartan Warrior";
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }
  return "All Classes";
}
function f_bkN(lv_bkO, lv_bkP, lv_bkQ, lv_bkR) {
  var lv_bkS = GetItemTypeId(lv_bkR);
  var lv_bkT = GetPlayerId(lv_bkP) * 5 + 200;
  RemoveItem(lv_bkR);
  if (!f_aMx(lv_bkO)) {
    f_aMz(lv_bkO);
    gv_alg[lv_bkT + 4] = 1;
  } else {
    f_aLO(lv_bkP, "You already have your ultimate skill");
    CreateItem(
      lv_bkS,
      GetUnitX(lv_bkQ) + GetRandomReal(-20, 20),
      GetUnitY(lv_bkQ) + GetRandomReal(-20, 20)
    );
  }
}
function f_bkU(lv_bkV, lv_bkW) {
  var lv_bkX = 0;
  var lv_bkY = 0;
  do {
    if (lv_bkX > 5) {
      break;
    }
    if (
      SubString(GetItemName(UnitItemInSlot(lv_bkV, lv_bkX)), 9, 10) == lv_bkW
    ) {
      lv_bkY = lv_bkY + 1;
    }
    lv_bkX = lv_bkX + 1;
  } while (true);
  lv_bkX = 0;
  return lv_bkY;
}
function f_bkZ() {
  var lv_bla = GetItemTypeId(GetManipulatedItem());
  var lv_blb = 0;
  var lv_blc = false;
  do {
    if (lv_blb > 6) {
      break;
    }
    if (
      GetItemTypeId(UnitItemInSlot(GetManipulatingUnit(), lv_blb)) == lv_bla &&
      UnitItemInSlot(GetManipulatingUnit(), lv_blb) != GetManipulatedItem()
    ) {
      lv_blb = 6;
      UnitRemoveItemSwapped(GetManipulatedItem(), GetManipulatingUnit());
      DisplayTimedTextToPlayer(
        GetOwningPlayer(GetManipulatingUnit()),
        0,
        0,
        10.0,
        "You can't have 2 of these items."
      );
    }
    lv_blb = lv_blb + 1;
  } while (true);
}
function f_bld() {
  var lv_ble = GetManipulatingUnit();
  var lv_blf = GetManipulatedItem();
  var lv_blg = 0;
  var lv_blh = GetPlayerId(GetOwningPlayer(lv_ble));
  var lv_bli = GetItemName(lv_blf);
  var lv_blj = GetHeroLevel(gv_ale[lv_blh]);
  var lv_blk = false;
  var lv_bll = SubString(lv_bli, 9, 10);
  var lv_blm = f_bkL(SubString(lv_bli, 4, 5));
  var lv_bln = GetItemTypeId(lv_blf);
  if (
    GetItemUserData(lv_blf) == 3 ||
    gv_alg.getInt(8106 + lv_blh) == 1 ||
    GetItemType(lv_blf) == ITEM_TYPE_POWERUP ||
    GetItemType(lv_blf) == ITEM_TYPE_PURCHASABLE
  ) {
    lv_blk = true;
  }
  if (
    GetItemPlayer(lv_blf) != Player(PLAYER_NEUTRAL_PASSIVE) &&
    GetItemPlayer(lv_blf) != GetOwningPlayer(lv_ble)
  ) {
    UnitRemoveItem(lv_ble, lv_blf);
    f_aLO(
      GetOwningPlayer(lv_ble),
      "Sorry, that item is owned by " +
        GetPlayerName(GetItemPlayer(lv_blf)) +
        "."
    );
  } else {
    if (
      GetItemType(lv_blf) == ITEM_TYPE_CHARGED &&
      lv_blk == false &&
      gv_alg.getInt(380 + lv_blh) != 1 &&
      lv_bln != "ankh"
    ) {
      f_bkB();
    }
  }
  if (lv_ble == gv_ale[lv_blh + 8] || lv_ble == gv_ale[lv_blh + 40]) {
    lv_blj = lv_blj + 5;
  }
  if (S2I(SubString(lv_bli, 5, 8)) > lv_blj && lv_blk == false) {
    lv_blk = true;
    UnitRemoveItem(lv_ble, lv_blf);
    f_aLO(
      GetOwningPlayer(lv_ble),
      "You are too weak to hold this level " +
        I2S(S2I(SubString(lv_bli, 5, 8))) +
        " " +
        lv_bli
    );
  }
  if (
    SubString(GetUnitName(gv_ale[lv_blh]), 2, 3) != SubString(lv_bli, 4, 5) &&
    lv_blm != "All Classes" &&
    lv_blk == false
  ) {
    lv_blk = true;
    f_aLO(GetOwningPlayer(lv_ble), S2S("This belongs to " + lv_blm) + "!");
    UnitRemoveItem(lv_ble, lv_blf);
  }
  if (SubString(lv_bli, 8, 9) == "3" && lv_blk == false) {
    f_aBX(1, gv_ale[lv_blh], GetOwningPlayer(lv_ble), lv_ble, lv_blf);
  }
  if (
    SubString(lv_bli, 8, 9) == "2" &&
    (lv_ble == gv_ale[lv_blh + 8] || lv_ble == gv_ale[lv_blh + 40]) &&
    lv_blk == false
  ) {
    UnitRemoveItem(lv_ble, lv_blf);
    f_aLO(
      GetOwningPlayer(lv_ble),
      "Your backpack cannot hold this item, only your hero or your horse can."
    );
    lv_blk = true;
  }
  if (lv_ble != gv_ale[lv_blh] && lv_ble != gv_ale[lv_blh + 8]) {
    lv_blk = true;
  }
  if (lv_ble == gv_ale[lv_blh]) {
    lv_blg = 0;
    do {
      if (lv_blg > gv_aaE.getInt(1)) {
        break;
      }
      if (lv_bln == gv_aav.getInt(lv_blg)) {
        f_aAN(lv_ble, BONUS_ARMOR, gv_aaw.getInt(lv_blg));
        f_aAN(lv_ble, BONUS_DAMAGE, gv_aax.getInt(lv_blg));
        f_aAN(lv_ble, BONUS_HERO_STR, gv_aay.getInt(lv_blg));
        f_aAN(lv_ble, BONUS_HERO_AGI, gv_aaz.getInt(lv_blg));
        f_aAN(lv_ble, BONUS_HERO_INT, gv_aaA.getInt(lv_blg));
        f_aAN(lv_ble, BONUS_LIFE_REGEN, gv_aaB.getInt(lv_blg));
        lv_blg = gv_aaE.getInt(1);
      }
      lv_blg = lv_blg + 1;
    } while (true);
  }
  lv_blg = 0;
  do {
    if (lv_blg > 18) {
      break;
    }
    if (lv_bln == gv_aau.getInt(lv_blg)) {
      f_bkZ();
    }
    lv_blg = lv_blg + 1;
  } while (true);
  if (lv_bll == "2" && lv_blk == false) {
    if (
      f_bkU(lv_ble, "b") > 0 ||
      f_bkU(lv_ble, "c") > 0 ||
      f_bkU(lv_ble, "d") > 0 ||
      f_bkU(lv_ble, "e") > 0
    ) {
      lv_blk = true;
      UnitRemoveItem(lv_ble, lv_blf);
      f_aLO(
        GetOwningPlayer(lv_ble),
        "You still wear one of your class items !"
      );
    } else {
      if (f_bkU(lv_ble, "2") > 1) {
        lv_blk = true;
        UnitRemoveItem(lv_ble, lv_blf);
        f_aLO(
          GetOwningPlayer(lv_ble),
          "You already wear your classes Gear/Equipment !"
        );
      }
    }
  }
  if (lv_bll == "3" && lv_blk == false) {
    if (f_bkU(lv_ble, "3") > 1) {
      lv_blk = true;
      UnitRemoveItem(lv_ble, lv_blf);
      f_aLO(GetOwningPlayer(lv_ble), "You already wear a relic!");
    }
  }
  if (lv_bll == "4" && lv_blk == false) {
    if (f_bkU(lv_ble, "4") > 1) {
      lv_blk = true;
      UnitRemoveItem(lv_ble, lv_blf);
      f_aLO(GetOwningPlayer(lv_ble), "You already wear a dragonscale item!");
    }
  }
  if (lv_bll == "5" && lv_blk == false) {
    if (f_bkU(lv_ble, "8") > 0) {
      lv_blk = true;
      UnitRemoveItem(lv_ble, lv_blf);
      DisplayTimedTextToPlayer(
        GetOwningPlayer(lv_ble),
        0,
        0,
        60,
        "You already wear an olympian regalia!"
      );
    } else {
      if (f_bkU(lv_ble, "5") > 1) {
        lv_blk = true;
        UnitRemoveItem(lv_ble, lv_blf);
        DisplayTimedTextToPlayer(
          GetOwningPlayer(lv_ble),
          0,
          0,
          60,
          "You already wear an olympian sword!"
        );
      }
    }
  }
  if (lv_bll == "6" && lv_blk == false) {
    if (f_bkU(lv_ble, "8") > 0) {
      lv_blk = true;
      UnitRemoveItem(lv_ble, lv_blf);
      DisplayTimedTextToPlayer(
        GetOwningPlayer(lv_ble),
        0,
        0,
        60,
        "You already wear an olympian regalia!"
      );
    } else {
      if (f_bkU(lv_ble, "6") > 1) {
        lv_blk = true;
        UnitRemoveItem(lv_ble, lv_blf);
        DisplayTimedTextToPlayer(
          GetOwningPlayer(lv_ble),
          0,
          0,
          60,
          "You already wear an olympian helmet!"
        );
      }
    }
  }
  if (lv_bll == "7" && lv_blk == false) {
    if (f_bkU(lv_ble, "8") > 0) {
      lv_blk = true;
      UnitRemoveItem(lv_ble, lv_blf);
      DisplayTimedTextToPlayer(
        GetOwningPlayer(lv_ble),
        0,
        0,
        60,
        "You already wear an olympian regalia!"
      );
    } else {
      if (f_bkU(lv_ble, "7") > 1) {
        lv_blk = true;
        UnitRemoveItem(lv_ble, lv_blf);
        DisplayTimedTextToPlayer(
          GetOwningPlayer(lv_ble),
          0,
          0,
          60,
          "You already wear an olympian armor!"
        );
      }
    }
  }
  if (lv_bll == "8" && lv_blk == false) {
    if (
      f_bkU(lv_ble, "5") > 0 ||
      f_bkU(lv_ble, "6") > 0 ||
      f_bkU(lv_ble, "7") > 0
    ) {
      lv_blk = true;
      UnitRemoveItem(lv_ble, lv_blf);
      DisplayTimedTextToPlayer(
        GetOwningPlayer(lv_ble),
        0,
        0,
        60,
        "You still wear a part of the regalia!"
      );
    } else {
      if (f_bkU(lv_ble, "8") > 1) {
        lv_blk = true;
        UnitRemoveItem(lv_ble, lv_blf);
        DisplayTimedTextToPlayer(
          GetOwningPlayer(lv_ble),
          0,
          0,
          60,
          "You already wear an olympian regalia item!"
        );
      }
    }
  }
  if (lv_bll == "9" && lv_blk == false) {
    if (f_bkU(lv_ble, "9") > 1) {
      lv_blk = true;
      UnitRemoveItem(lv_ble, lv_blf);
      f_aLO(GetOwningPlayer(lv_ble), "You already wear a lion item!");
    }
  }
  if (lv_bll == "a" && lv_blk == false) {
    if (f_bkU(lv_ble, "a") > 1) {
      lv_blk = true;
      UnitRemoveItem(lv_ble, lv_blf);
      f_aLO(GetOwningPlayer(lv_ble), "You already wear a god item!");
    }
  }
  if (lv_bll == "b" && lv_blk == false) {
    if (f_bkU(lv_ble, "2") > 0) {
      lv_blk = true;
      UnitRemoveItem(lv_ble, lv_blf);
      f_aLO(GetOwningPlayer(lv_ble), "You already wear your complete gear !");
    } else {
      if (f_bkU(lv_ble, "b") > 1) {
        lv_blk = true;
        UnitRemoveItem(lv_ble, lv_blf);
        f_aLO(
          GetOwningPlayer(lv_ble),
          S2S("You already wear " + lv_bli) + " !"
        );
      }
    }
  }
  if (lv_bll == "c" && lv_blk == false) {
    if (f_bkU(lv_ble, "2") > 0) {
      lv_blk = true;
      UnitRemoveItem(lv_ble, lv_blf);
      f_aLO(GetOwningPlayer(lv_ble), "You already wear your complete gear !");
    } else {
      if (f_bkU(lv_ble, "c") > 1) {
        lv_blk = true;
        UnitRemoveItem(lv_ble, lv_blf);
        f_aLO(
          GetOwningPlayer(lv_ble),
          S2S("You already wear " + lv_bli) + " !"
        );
      }
    }
  }
  if (lv_bll == "d" && lv_blk == false) {
    if (f_bkU(lv_ble, "2") > 0) {
      lv_blk = true;
      UnitRemoveItem(lv_ble, lv_blf);
      f_aLO(GetOwningPlayer(lv_ble), "You already wear your complete gear !");
    } else {
      if (f_bkU(lv_ble, "d") > 1) {
        lv_blk = true;
        UnitRemoveItem(lv_ble, lv_blf);
        f_aLO(
          GetOwningPlayer(lv_ble),
          S2S("You already wear " + lv_bli) + " !"
        );
      }
    }
  }
  if (lv_bll == "e" && lv_blk == false) {
    if (f_bkU(lv_ble, "2") > 0) {
      lv_blk = true;
      UnitRemoveItem(lv_ble, lv_blf);
      f_aLO(GetOwningPlayer(lv_ble), "You already wear your complete gear !");
    } else {
      if (f_bkU(lv_ble, "e") > 1) {
        lv_blk = true;
        UnitRemoveItem(lv_ble, lv_blf);
        f_aLO(
          GetOwningPlayer(lv_ble),
          S2S("You already wear " + lv_bli) + " !"
        );
      }
    }
  }
  if (IsUnitType(lv_ble, UNIT_TYPE_HERO)) {
    if (LoadInteger(gv_abH, gv_abV, StringHash(GetItemName(lv_blf))) > 0) {
      gv_ald[lv_blh] =
        gv_ald[lv_blh] +
        LoadInteger(gv_abH, gv_abV, StringHash(GetItemName(lv_blf)));
    }
    if (LoadInteger(gv_abH, gv_abW, StringHash(GetItemName(lv_blf))) > 0) {
      gv_ald[lv_blh + 8] =
        gv_ald[lv_blh + 8] +
        LoadInteger(gv_abH, gv_abW, StringHash(GetItemName(lv_blf)));
    }
    if (lv_bln == "I066") {
      f_aPi(gv_ale[lv_blh]);
    }
  }
  if (lv_bln == "I05Q" || lv_bln == "I05R" || lv_bln == "I05S") {
    lv_blk = true;
    if (GetHeroLevel(gv_ale[lv_blh]) > 64) {
      if (lv_bln == "I05Q" && GetHeroStr(gv_ale[lv_blh], false) > 3) {
        SetHeroStr(gv_ale[lv_blh], GetHeroStr(gv_ale[lv_blh], false) - 3, true);
        lv_blk = false;
      }
      if (lv_bln == "I05S" && GetHeroInt(gv_ale[lv_blh], false) > 3) {
        SetHeroInt(gv_ale[lv_blh], GetHeroInt(gv_ale[lv_blh], false) - 3, true);
        lv_blk = false;
      }
      if (lv_bln == "I05R" && GetHeroAgi(gv_ale[lv_blh], false) > 3) {
        SetHeroAgi(gv_ale[lv_blh], GetHeroAgi(gv_ale[lv_blh], false) - 3, true);
        lv_blk = false;
      }
      if (lv_blk) {
        SetPlayerState(
          GetOwningPlayer(lv_ble),
          PLAYER_STATE_RESOURCE_GOLD,
          GetPlayerState(GetOwningPlayer(lv_ble), PLAYER_STATE_RESOURCE_GOLD) +
            25000
        );
        SetPlayerState(
          GetOwningPlayer(lv_ble),
          PLAYER_STATE_RESOURCE_LUMBER,
          GetPlayerState(
            GetOwningPlayer(lv_ble),
            PLAYER_STATE_RESOURCE_LUMBER
          ) + 1
        );
        f_aLO(
          GetOwningPlayer(lv_ble),
          "You cannot retrain a stat if it has less than 3 points!"
        );
      } else {
        UnitModifySkillPoints(gv_ale[lv_blh], 2);
      }
    } else {
      SetPlayerState(
        GetOwningPlayer(lv_ble),
        PLAYER_STATE_RESOURCE_GOLD,
        GetPlayerState(GetOwningPlayer(lv_ble), PLAYER_STATE_RESOURCE_GOLD) +
          25000
      );
      SetPlayerState(
        GetOwningPlayer(lv_ble),
        PLAYER_STATE_RESOURCE_LUMBER,
        GetPlayerState(GetOwningPlayer(lv_ble), PLAYER_STATE_RESOURCE_LUMBER) +
          1
      );
      f_aLO(
        GetOwningPlayer(lv_ble),
        "You cannot use retraining tomes till level 65!"
      );
    }
  }
  lv_ble = null;
  lv_blf = null;
}
function f_blo() {
  SetItemPlayer(GetSoldItem(), GetOwningPlayer(GetBuyingUnit()), true);
}
function f_blp() {
  var lv_blq = GetEnteringUnit();
  var lv_blr = true;
  if (IsUnitAlly(lv_blq, Player(8)) || IsUnitType(lv_blq, UNIT_TYPE_GIANT)) {
    lv_blr = false;
  } else {
    if (
      GetOwningPlayer(lv_blq) == Player(10) ||
      GetOwningPlayer(lv_blq) == Player(11)
    ) {
      lv_blr = false;
    } else {
      if (
        lv_blq == gv_akr ||
        lv_blq == gv_ake ||
        lv_blq == gv_akL ||
        lv_blq == gv_akg ||
        lv_blq == gv_aki ||
        lv_blq == gv_akn
      ) {
        lv_blr = false;
      } else {
        if (
          lv_blq == gv_akv ||
          lv_blq == gv_akI ||
          lv_blq == gv_aks ||
          lv_blq == gv_akx ||
          lv_blq == gv_ajY ||
          lv_blq == gv_akM ||
          lv_blq == gv_akH
        ) {
          lv_blr = false;
        }
      }
    }
  }
  lv_blq = null;
  return lv_blr;
}
function f_bls() {
  KillUnit(GetEnteringUnit());
}
function f_blt() {
  var lv_blu = GetOwningPlayer(GetTriggerUnit());
  var lv_blv = GetPlayerId(lv_blu);
  if (gv_alf[lv_blv] != "Athens") {
    if (lv_blu == GetLocalPlayer()) {
      StartSound(gv_afL);
    }
    DisplayTextToPlayer(
      lv_blu,
      0.0,
      0.0,
      "|cffff8000Entered: |r|cff0080ffAthens|r"
    );
    gv_alf[lv_blv] = "Athens";
  }
  lv_blu = null;
}
function f_blw() {
  return IsUnitType(GetTriggerUnit(), UNIT_TYPE_HERO) != null;
}
function f_blx() {
  var lv_bly = CreateRegion();
  var lv_blz = CreateTrigger();
  RegionAddRect(lv_bly, gv_acC);
  TriggerRegisterEnterRegion(lv_blz, lv_bly, null);
  TriggerAddCondition(lv_blz, Condition(f_blw));
  TriggerAddAction(lv_blz, f_blt);
  lv_bly = null;
}
function f_blA() {
  var lv_blB = GetOwningPlayer(GetTriggerUnit());
  var lv_blC = GetPlayerId(lv_blB);
  if (gv_alf[lv_blC] != "Goblins") {
    gv_amD = gv_amD + 1;
    ForceAddPlayer(gv_amF, lv_blB);
    if (lv_blB == GetLocalPlayer()) {
      StartSound(gv_afL);
    }
    DisplayTextToPlayer(
      lv_blB,
      0.0,
      0.0,
      "|cffff8000Entered: |r|cff0080ffAthen's Fields (Western)|r"
    );
    gv_alf[lv_blC] = "Goblins";
  }
  if (!gv_amC) {
    gv_amC = true;
    EnableTrigger(gv_aii);
    ExecuteFunc("f_blD");
  }
  lv_blB = null;
}
function f_blE() {
  return IsUnitType(GetTriggerUnit(), UNIT_TYPE_HERO) != null;
}
function f_blF() {
  var lv_blG = CreateRegion();
  var lv_blH = CreateTrigger();
  RegionAddRect(lv_blG, gv_adN);
  RegionAddRect(lv_blG, gv_adO);
  TriggerRegisterEnterRegion(lv_blH, lv_blG, null);
  TriggerAddCondition(lv_blH, Condition(f_blE));
  TriggerAddAction(lv_blH, f_blA);
  lv_blG = null;
}
function f_blI() {
  var lv_blJ = GetEnumPlayer();
  if (gv_alf[GetPlayerId(lv_blJ)] != "Goblins") {
    ForceRemovePlayer(gv_amF, lv_blJ);
    gv_amD = gv_amD - 1;
  }
  lv_blJ = null;
}
function f_blK() {
  var lv_blL = GetEnumUnit();
  GroupRemoveUnit(gv_amB, lv_blL);
  RemoveUnit(lv_blL);
  lv_blL = null;
}
function f_blM() {
  var lv_blN = GetEnumUnit();
  if (GetWidgetLife(lv_blN) < 0.406) {
    GroupRemoveUnit(gv_amB, lv_blN);
  } else {
    gv_amE = gv_amE + 1;
    if (RectContainsCoords(gv_adO, GetUnitX(lv_blN), GetUnitY(lv_blN))) {
      IssuePointOrderById(
        lv_blN,
        gv_aar,
        GetRandomReal(1600, 5024),
        GetRandomReal(8512, 12960)
      );
    } else {
      IssuePointOrderById(
        lv_blN,
        gv_aar,
        GetRandomReal(3328, 5312),
        GetRandomReal(12288, 14912)
      );
    }
  }
  lv_blN = null;
}
function f_blD() {
  var lv_blO = 0;
  var lv_blP;
  ForForce(gv_amF, f_blI);
  if (gv_amD == 0) {
    DisableTrigger(gv_aii);
    ForGroup(gv_amB, f_blK);
    gv_amE = 0;
    gv_amC = false;
    return false;
  }
  gv_amE = 0;
  ForGroup(gv_amB, f_blM);
  do {
    if (lv_blO > gv_amD) {
      break;
    }
    if (gv_amE >= GO) {
      if (true) {
        break;
      }
    }
    lv_blP = CreateUnit(
      gv_amG,
      gv_alg.getInt(GetRandomInt(400, 414)),
      GetRandomReal(1664, 4864),
      GetRandomReal(9056, 12736),
      0.0
    );
    IssuePointOrderById(
      lv_blP,
      gv_aar,
      GetRandomReal(3328, 5312),
      GetRandomReal(12288, 14912)
    );
    GroupAddUnit(gv_amB, lv_blP);
    lv_blP = CreateUnit(
      gv_amG,
      gv_alg.getInt(GetRandomInt(400, 414)),
      GetRandomReal(3200, 5152),
      GetRandomReal(13792, 14752),
      0.0
    );
    IssuePointOrderById(
      lv_blP,
      gv_aar,
      GetRandomReal(3328, 5312),
      GetRandomReal(12288, 14912)
    );
    GroupAddUnit(gv_amB, lv_blP);
    gv_amE = gv_amE + 2;
    lv_blO = lv_blO + 1;
  } while (true);
  lv_blP = null;
  return false;
}
function f_blQ() {
  var lv_blR = GetOwningPlayer(GetTriggerUnit());
  var lv_blS = GetPlayerId(lv_blR);
  if (gv_alf[lv_blS] != "Bandits") {
    gv_amJ = gv_amJ + 1;
    ForceAddPlayer(gv_amL, lv_blR);
    if (lv_blR == GetLocalPlayer()) {
      StartSound(gv_afL);
    }
    DisplayTextToPlayer(
      lv_blR,
      0.0,
      0.0,
      "|cffff8000Entered: |r|cff0080ffAthen's Fields (Southern)|r"
    );
    gv_alf[lv_blS] = "Bandits";
  }
  if (!gv_amI) {
    gv_amI = true;
    EnableTrigger(gv_aij);
    ExecuteFunc("f_blT");
  }
  lv_blR = null;
}
function f_blU() {
  return IsUnitType(GetTriggerUnit(), UNIT_TYPE_HERO) != null;
}
function f_blV() {
  var lv_blW = CreateRegion();
  var lv_blX = CreateTrigger();
  RegionAddRect(lv_blW, gv_acE);
  RegionAddRect(lv_blW, gv_acF);
  RegionAddRect(lv_blW, gv_acG);
  TriggerRegisterEnterRegion(lv_blX, lv_blW, null);
  TriggerAddCondition(lv_blX, Condition(f_blU));
  TriggerAddAction(lv_blX, f_blQ);
  lv_blW = null;
}
function f_blY() {
  var lv_blZ = GetEnumPlayer();
  if (gv_alf[GetPlayerId(lv_blZ)] != "Bandits") {
    ForceRemovePlayer(gv_amL, lv_blZ);
    gv_amJ = gv_amJ - 1;
  }
  lv_blZ = null;
}
function f_bma() {
  var lv_bmb = GetEnumUnit();
  GroupRemoveUnit(gv_amH, lv_bmb);
  RemoveUnit(lv_bmb);
  lv_bmb = null;
}
function f_bmc() {
  var lv_bmd = GetEnumUnit();
  if (GetWidgetLife(lv_bmd) < 0.406) {
    GroupRemoveUnit(gv_amH, lv_bmd);
  } else {
    gv_amK = gv_amK + 1;
    if (
      RectContainsCoords(gv_acE, GetUnitX(lv_bmd), GetUnitY(lv_bmd)) ||
      RectContainsCoords(gv_acF, GetUnitX(lv_bmd), GetUnitY(lv_bmd))
    ) {
      IssuePointOrderById(
        lv_bmd,
        gv_aar,
        GetRandomReal(2912, 8224),
        GetRandomReal(3456, 7968)
      );
    } else {
      if (RectContainsCoords(gv_acG, GetUnitX(lv_bmd), GetUnitY(lv_bmd))) {
        IssuePointOrderById(
          lv_bmd,
          gv_aar,
          GetRandomReal(1824, 2912),
          GetRandomReal(1600, 4032)
        );
      } else {
        IssuePointOrderById(
          lv_bmd,
          gv_aar,
          GetRandomReal(3253, 5386.67),
          GetRandomReal(2560, 6645.33)
        );
      }
    }
  }
  lv_bmd = null;
}
function f_blT() {
  var lv_bme = 1;
  var lv_bmf;
  ForForce(gv_amL, f_blY);
  if (gv_amJ == 0) {
    DisableTrigger(gv_aij);
    ForGroup(gv_amH, f_bma);
    gv_amK = 0;
    gv_amI = false;
    return false;
  }
  gv_amK = 0;
  ForGroup(gv_amH, f_bmc);
  do {
    if (lv_bme > gv_amJ) {
      break;
    }
    if (gv_amK >= 20) {
      if (true) {
        break;
      }
    }
    lv_bmf = CreateUnit(
      gv_amG,
      gv_alg.getInt(GetRandomInt(416, 435)),
      GetRandomReal(3328, 5024),
      GetRandomReal(3624, 7072),
      0.0
    );
    IssuePointOrderById(
      lv_bmf,
      gv_aar,
      GetRandomReal(3253, 5386.67),
      GetRandomReal(2560, 6645.33)
    );
    GroupAddUnit(gv_amH, lv_bmf);
    lv_bmf = CreateUnit(
      gv_amG,
      gv_alg.getInt(GetRandomInt(416, 435)),
      GetRandomReal(5024, 7776),
      GetRandomReal(3456, 7936),
      0.0
    );
    IssuePointOrderById(
      lv_bmf,
      gv_aar,
      GetRandomReal(3253, 5386.67),
      GetRandomReal(2560, 6645.33)
    );
    GroupAddUnit(gv_amH, lv_bmf);
    gv_amK = gv_amK + 2;
    lv_bme = lv_bme + 1;
  } while (true);
  lv_bmf = null;
  return false;
}
function f_bmg() {
  return GetUnitTypeId(GetEnteringUnit()) == "nwlt";
}
function f_bmh() {
  gv_alv = GetEnteringUnit();
  GroupRemoveUnit(gv_amM, gv_alv);
  RemoveUnit(gv_alv);
}
function f_bmi() {
  var lv_bmj = GetOwningPlayer(GetTriggerUnit());
  var lv_bmk = GetPlayerId(lv_bmj);
  if (gv_alf[lv_bmk] != "Wolves") {
    gv_amO = gv_amO + 1;
    ForceAddPlayer(gv_amQ, lv_bmj);
    if (lv_bmj == GetLocalPlayer()) {
      StartSound(gv_afL);
    }
    DisplayTextToPlayer(
      lv_bmj,
      0.0,
      0.0,
      "|cffff8000Entered: |r|cff0080ffAthen's Fields (Eastern)|r"
    );
    gv_alf[lv_bmk] = "Wolves";
  }
  if (!gv_amN) {
    gv_amN = true;
    EnableTrigger(gv_ail);
    ExecuteFunc("f_bml");
  }
  lv_bmj = null;
}
function f_bmm() {
  return IsUnitType(GetTriggerUnit(), UNIT_TYPE_HERO) != null;
}
function f_bmn() {
  var lv_bmo = CreateRegion();
  var lv_bmp = CreateTrigger();
  RegionAddRect(lv_bmo, gv_afr);
  RegionAddRect(lv_bmo, gv_afs);
  RegionAddRect(lv_bmo, gv_aft);
  RegionAddRect(lv_bmo, gv_afu);
  RegionAddRect(lv_bmo, gv_afv);
  TriggerRegisterEnterRegion(lv_bmp, lv_bmo, null);
  TriggerAddCondition(lv_bmp, Condition(f_bmm));
  TriggerAddAction(lv_bmp, f_bmi);
  lv_bmo = null;
}
function f_bmq() {
  var lv_bmr = GetEnumPlayer();
  if (gv_alf[GetPlayerId(lv_bmr)] != "Wolves") {
    ForceRemovePlayer(gv_amQ, lv_bmr);
    gv_amO = gv_amO - 1;
  }
  lv_bmr = null;
}
function f_bms() {
  var lv_bmt = GetEnumUnit();
  GroupRemoveUnit(gv_amM, lv_bmt);
  RemoveUnit(lv_bmt);
  lv_bmt = null;
}
function f_bmu() {
  var lv_bmv = GetEnumUnit();
  if (GetWidgetLife(lv_bmv) < 0.406) {
    GroupRemoveUnit(gv_amM, lv_bmv);
  } else {
    gv_amP = gv_amP + 1;
    if (
      RectContainsCoords(gv_afr, GetUnitX(lv_bmv), GetUnitY(lv_bmv)) ||
      RectContainsCoords(gv_afs, GetUnitX(lv_bmv), GetUnitY(lv_bmv))
    ) {
      IssuePointOrderById(
        lv_bmv,
        gv_aar,
        GetRandomReal(10336, 11616),
        GetRandomReal(11136, 13184)
      );
    } else {
      if (
        RectContainsCoords(gv_aft, GetUnitX(lv_bmv), GetUnitY(lv_bmv)) ||
        RectContainsCoords(gv_afu, GetUnitX(lv_bmv), GetUnitY(lv_bmv)) ||
        RectContainsCoords(gv_afv, GetUnitX(lv_bmv), GetUnitY(lv_bmv))
      ) {
        IssuePointOrderById(
          lv_bmv,
          gv_aar,
          GetRandomReal(11616, 13504),
          GetRandomReal(11968, 14432)
        );
      } else {
        IssuePointOrderById(
          lv_bmv,
          gv_aar,
          GetRandomReal(11436.8, 12505.6),
          GetRandomReal(12288, 9834.67)
        );
      }
    }
  }
  lv_bmv = null;
}
function f_bml() {
  var lv_bmw = 0;
  var lv_bmx;
  ForForce(gv_amQ, f_bmq);
  if (gv_amO == 0) {
    DisableTrigger(gv_ail);
    ForGroup(gv_amM, f_bms);
    gv_amP = 0;
    gv_amN = false;
    return false;
  }
  gv_amP = 0;
  ForGroup(gv_amM, f_bmu);
  do {
    if (lv_bmw > gv_amO) {
      break;
    }
    if (gv_amP >= PO) {
      if (true) {
        break;
      }
    }
    lv_bmx = CreateUnit(
      gv_amG,
      gv_alg.getInt(415),
      GetRandomReal(12480, 14208),
      GetRandomReal(13760, 14432),
      0.0
    );
    IssuePointOrderById(
      lv_bmx,
      gv_aar,
      GetRandomReal(11436.8, 12505.6),
      GetRandomReal(12288, 9834.67)
    );
    GroupAddUnit(gv_amM, lv_bmx);
    lv_bmx = CreateUnit(
      gv_amG,
      gv_alg.getInt(415),
      GetRandomReal(10912, 12512),
      GetRandomReal(12352, 12832),
      0.0
    );
    IssuePointOrderById(
      lv_bmx,
      gv_aar,
      GetRandomReal(11436.8, 12505.6),
      GetRandomReal(12288, 9834.67)
    );
    GroupAddUnit(gv_amM, lv_bmx);
    gv_amP = gv_amP + 2;
    lv_bmw = lv_bmw + 1;
  } while (true);
  lv_bmx = null;
  return false;
}
function f_bmy() {
  var lv_bmz = GetOwningPlayer(GetTriggerUnit());
  var lv_bmA = GetPlayerId(lv_bmz);
  if (GetHeroLevel(GetTriggerUnit()) > 24) {
    if (gv_alf[lv_bmA] != "Trolls") {
      gv_amT = gv_amT + 1;
      ForceAddPlayer(gv_amV, lv_bmz);
      if (lv_bmz == GetLocalPlayer()) {
        StartSound(gv_afL);
      }
      DisplayTextToPlayer(
        lv_bmz,
        0.0,
        0.0,
        "|cffff8000Entered: |r|cff0080ffTroll Foothills|r"
      );
      gv_alf[lv_bmA] = "Trolls";
    }
    if (!gv_amS) {
      gv_amS = true;
      EnableTrigger(gv_aim);
      ExecuteFunc("f_bmB");
    }
  } else {
    DisplayTimedTextToPlayer(
      lv_bmz,
      0.0,
      0.0,
      5,
      S2S(gv_alf[77] + "You are too weak to enter this level 25 area!")
    );
    gv_alv = f_aIV(
      Player(PLAYER_NEUTRAL_PASSIVE),
      GetUnitX(GetTriggerUnit()),
      GetUnitY(GetTriggerUnit()),
      2
    );
    f_aJc(gv_alv, "A077", 0);
    IssueTargetOrderById(gv_alv, 852095, GetTriggerUnit());
    f_aMP(
      GetTriggerUnit(),
      bj_DEGTORAD * (GetUnitFacing(GetTriggerUnit()) - 180)
    );
  }
  lv_bmz = null;
}
function f_bmC() {
  return (
    (IsUnitType(GetTriggerUnit(), UNIT_TYPE_HERO) &&
      IsUnitInGroup(GetTriggerUnit(), gv_ack) == false) != null
  );
}
function f_bmD() {
  var lv_bmE = CreateRegion();
  var lv_bmF = CreateTrigger();
  RegionAddRect(lv_bmE, gv_afc);
  RegionAddRect(lv_bmE, gv_afd);
  RegionAddRect(lv_bmE, gv_afe);
  RegionAddRect(lv_bmE, gv_aff);
  RegionAddRect(lv_bmE, gv_afg);
  RegionAddRect(lv_bmE, gv_afh);
  RegionAddRect(lv_bmE, gv_afi);
  RegionAddRect(lv_bmE, gv_afj);
  TriggerRegisterEnterRegion(lv_bmF, lv_bmE, null);
  TriggerAddCondition(lv_bmF, Condition(f_bmC));
  TriggerAddAction(lv_bmF, f_bmy);
  lv_bmE = null;
}
function f_bmG() {
  var lv_bmH = GetEnumPlayer();
  if (gv_alf[GetPlayerId(lv_bmH)] != "Trolls") {
    ForceRemovePlayer(gv_amV, lv_bmH);
    gv_amT = gv_amT - 1;
  }
  lv_bmH = null;
}
function f_bmI() {
  var lv_bmJ = GetEnumUnit();
  GroupRemoveUnit(gv_amR, lv_bmJ);
  RemoveUnit(lv_bmJ);
  lv_bmJ = null;
}
function f_bmK() {
  var lv_bmL = GetEnumUnit();
  if (GetWidgetLife(lv_bmL) < 0.406) {
    GroupRemoveUnit(gv_amR, lv_bmL);
  } else {
    gv_amU = gv_amU + 1;
    if (RectContainsCoords(gv_afc, GetUnitX(lv_bmL), GetUnitY(lv_bmL))) {
      IssuePointOrderById(
        lv_bmL,
        gv_aar,
        GetRandomReal(-10715, -3840),
        GetRandomReal(96, 3424)
      );
    } else {
      if (
        RectContainsCoords(gv_afd, GetUnitX(lv_bmL), GetUnitY(lv_bmL)) ||
        RectContainsCoords(gv_afj, GetUnitX(lv_bmL), GetUnitY(lv_bmL))
      ) {
        IssuePointOrderById(
          lv_bmL,
          gv_aar,
          GetRandomReal(-10144, -960),
          GetRandomReal(3424, 5344)
        );
      } else {
        if (
          RectContainsCoords(gv_afe, GetUnitX(lv_bmL), GetUnitY(lv_bmL)) ||
          RectContainsCoords(gv_aff, GetUnitX(lv_bmL), GetUnitY(lv_bmL)) ||
          RectContainsCoords(gv_afg, GetUnitX(lv_bmL), GetUnitY(lv_bmL))
        ) {
          IssuePointOrderById(
            lv_bmL,
            gv_aar,
            GetRandomReal(-4608, 1600),
            GetRandomReal(6240, 9376)
          );
        } else {
          if (
            RectContainsCoords(gv_afh, GetUnitX(lv_bmL), GetUnitY(lv_bmL)) ||
            RectContainsCoords(gv_afi, GetUnitX(lv_bmL), GetUnitY(lv_bmL))
          ) {
            IssuePointOrderById(
              lv_bmL,
              gv_aar,
              GetRandomReal(-2208, 1152),
              GetRandomReal(8448, 10080)
            );
          } else {
            IssuePointOrderById(
              lv_bmL,
              gv_aar,
              GetRandomReal(-5848, 576),
              GetRandomReal(5536, 6940)
            );
          }
        }
      }
    }
  }
  lv_bmL = null;
}
function f_bmB() {
  var lv_bmM = 0;
  var lv_bmN;
  ForForce(gv_amV, f_bmG);
  if (gv_amT == 0) {
    DisableTrigger(gv_aim);
    ForGroup(gv_amR, f_bmI);
    gv_amU = 0;
    gv_amS = false;
    return false;
  }
  gv_amU = 0;
  ForGroup(gv_amR, f_bmK);
  do {
    if (lv_bmM > gv_amT) {
      break;
    }
    if (gv_amU >= TO) {
      if (true) {
        break;
      }
    }
    lv_bmN = CreateUnit(
      gv_amG,
      gv_alg.getInt(GetRandomInt(436, 450)),
      GetRandomReal(-9184, -3712),
      GetRandomReal(1536, 2560),
      0.0
    );
    IssuePointOrderById(
      lv_bmN,
      gv_aar,
      GetRandomReal(-5848, 576),
      GetRandomReal(5536, 6940)
    );
    GroupAddUnit(gv_amR, lv_bmN);
    lv_bmN = CreateUnit(
      gv_amG,
      gv_alg.getInt(GetRandomInt(436, 450)),
      GetRandomReal(-5568, -5024),
      GetRandomReal(4352, 7296),
      0.0
    );
    IssuePointOrderById(
      lv_bmN,
      gv_aar,
      GetRandomReal(-5848, 576),
      GetRandomReal(5536, 6940)
    );
    GroupAddUnit(gv_amR, lv_bmN);
    lv_bmN = CreateUnit(
      gv_amG,
      gv_alg.getInt(GetRandomInt(436, 450)),
      GetRandomReal(-2560, -1376),
      GetRandomReal(6592, 9632),
      0.0
    );
    IssuePointOrderById(
      lv_bmN,
      gv_aar,
      GetRandomReal(-5848, 576),
      GetRandomReal(5536, 6940)
    );
    GroupAddUnit(gv_amR, lv_bmN);
    lv_bmN = CreateUnit(
      gv_amG,
      gv_alg.getInt(GetRandomInt(436, 450)),
      GetRandomReal(-3584, 96),
      GetRandomReal(5408, 6592),
      0.0
    );
    IssuePointOrderById(
      lv_bmN,
      gv_aar,
      GetRandomReal(-5848, 576),
      GetRandomReal(5536, 6940)
    );
    GroupAddUnit(gv_amR, lv_bmN);
    gv_amU = gv_amU + 4;
    lv_bmM = lv_bmM + 1;
  } while (true);
  lv_bmN = null;
  return false;
}
function f_bmO() {
  var lv_bmP = GetOwningPlayer(GetTriggerUnit());
  var lv_bmQ = GetPlayerId(lv_bmP);
  if (gv_alf[lv_bmQ] != "Corinth") {
    if (lv_bmP == GetLocalPlayer()) {
      StartSound(gv_afL);
    }
    DisplayTextToPlayer(
      lv_bmP,
      0.0,
      0.0,
      "|cffff8000Entered: |r|cff0080ffCorinth|r"
    );
    gv_alf[lv_bmQ] = "Corinth";
  }
  lv_bmP = null;
}
function f_bmR() {
  return IsUnitType(GetTriggerUnit(), UNIT_TYPE_HERO) != null;
}
function f_bmS() {
  var lv_bmT = CreateRegion();
  var lv_bmU = CreateTrigger();
  RegionAddRect(lv_bmT, gv_ade);
  TriggerRegisterEnterRegion(lv_bmU, lv_bmT, null);
  TriggerAddCondition(lv_bmU, Condition(f_bmR));
  TriggerAddAction(lv_bmU, f_bmO);
  lv_bmT = null;
}
function f_bmV() {
  return (
    (IsUnitType(GetTriggerUnit(), UNIT_TYPE_HERO) &&
      IsUnitInGroup(GetTriggerUnit(), gv_ack) == false) != null
  );
}
function f_bmW() {
  var lv_bmX = GetOwningPlayer(GetTriggerUnit());
  var lv_bmY = GetPlayerId(lv_bmX);
  if (GetHeroLevel(GetTriggerUnit()) > 39) {
    if (gv_alf[lv_bmY] != "MinotaurB") {
      if (lv_bmX == GetLocalPlayer()) {
        StartSound(gv_afL);
      }
      DisplayTextToPlayer(
        lv_bmX,
        0.0,
        0.0,
        "|cffff8000Entered: |r|cff0080ffMinotaur Mountains (Base)|r"
      );
      gv_alf[lv_bmY] = "MinotaurB";
    }
  } else {
    if (lv_bmY < 9) {
      DisplayTimedTextToPlayer(
        lv_bmX,
        0.0,
        0.0,
        5,
        S2S(gv_alf[77] + "You are too weak to enter this level 40 area!")
      );
      SetUnitPositionLoc(GetTriggerUnit(), gv_aaP[2]);
      PanCameraToTimedForPlayer(
        lv_bmX,
        GetUnitX(GetTriggerUnit()),
        GetUnitY(GetTriggerUnit()),
        0.0
      );
    }
  }
  lv_bmX = null;
}
function f_bmZ() {
  var lv_bna = CreateRegion();
  var lv_bnb = CreateTrigger();
  RegionAddRect(lv_bna, gv_aef);
  RegionAddRect(lv_bna, gv_aeg);
  TriggerRegisterEnterRegion(lv_bnb, lv_bna, null);
  TriggerAddCondition(lv_bnb, Condition(f_bmV));
  TriggerAddAction(lv_bnb, f_bmW);
  lv_bna = null;
}
function f_bnc() {
  return (
    (IsUnitType(GetTriggerUnit(), UNIT_TYPE_HERO) &&
      IsUnitInGroup(GetTriggerUnit(), gv_ack) == false) != null
  );
}
function f_bnd() {
  var lv_bne = GetOwningPlayer(GetTriggerUnit());
  var lv_bnf = GetPlayerId(lv_bne);
  if (GetHeroLevel(GetTriggerUnit()) > 34) {
    if (gv_alf[lv_bnf] != "Harpies") {
      gv_amY = gv_amY + 1;
      ForceAddPlayer(gv_ana, lv_bne);
      if (lv_bne == GetLocalPlayer()) {
        StartSound(gv_afL);
      }
      DisplayTextToPlayer(
        lv_bne,
        0.0,
        0.0,
        "|cffff8000Entered: |r|cff0080ffMinotaur Mountains (Crest)|r"
      );
      gv_alf[lv_bnf] = "Harpies";
    }
    if (!gv_amX) {
      gv_amX = true;
      EnableTrigger(gv_ain);
      ExecuteFunc("f_bng");
    }
  } else {
    if (lv_bnf < 9) {
      DisplayTimedTextToPlayer(
        lv_bne,
        0.0,
        0.0,
        10,
        S2S(gv_alf[77] + "You are too weak to enter this level 35 area!")
      );
      gv_alv = f_aIV(
        Player(PLAYER_NEUTRAL_PASSIVE),
        GetUnitX(GetTriggerUnit()),
        GetUnitY(GetTriggerUnit()),
        2
      );
      f_aJc(gv_alv, "A077", 0);
      IssueTargetOrderById(gv_alv, 852095, GetTriggerUnit());
      f_aMP(
        GetTriggerUnit(),
        bj_DEGTORAD * (GetUnitFacing(GetTriggerUnit()) - 180)
      );
    }
  }
  lv_bne = null;
}
function f_bnh() {
  var lv_bni = CreateTrigger();
  var lv_bnj = CreateRegion();
  RegionAddRect(lv_bnj, gv_aec);
  RegionAddRect(lv_bnj, gv_aed);
  RegionAddRect(lv_bnj, gv_aee);
  TriggerRegisterEnterRegion(lv_bni, lv_bnj, null);
  TriggerAddCondition(lv_bni, Condition(f_bnc));
  TriggerAddAction(lv_bni, f_bnd);
  lv_bnj = null;
}
function f_bnk() {
  var lv_bnl = GetEnumPlayer();
  if (gv_alf[GetPlayerId(lv_bnl)] != "Harpies") {
    ForceRemovePlayer(gv_ana, lv_bnl);
    gv_amY = gv_amY - 1;
  }
  lv_bnl = null;
}
function f_bnm() {
  var lv_bnn = GetEnumUnit();
  GroupRemoveUnit(gv_amW, lv_bnn);
  RemoveUnit(lv_bnn);
  lv_bnn = null;
}
function f_bno() {
  var lv_bnp = GetEnumUnit();
  if (GetWidgetLife(lv_bnp) < 0.406) {
    GroupRemoveUnit(gv_amW, lv_bnp);
  } else {
    gv_amZ = gv_amZ + 1;
    if (
      RectContainsCoords(gv_aec, GetUnitX(lv_bnp), GetUnitY(lv_bnp)) ||
      RectContainsCoords(gv_aed, GetUnitX(lv_bnp), GetUnitY(lv_bnp))
    ) {
      IssuePointOrderById(
        lv_bnp,
        gv_aar,
        GetRandomReal(-8864, -5600),
        GetRandomReal(6752, 9184)
      );
    } else {
      if (RectContainsCoords(gv_aee, GetUnitX(lv_bnp), GetUnitY(lv_bnp))) {
        IssuePointOrderById(
          lv_bnp,
          gv_aar,
          GetRandomReal(-8832, -7008),
          GetRandomReal(6080, 6752)
        );
      } else {
        IssuePointOrderById(
          lv_bnp,
          gv_aar,
          GetRandomReal(-8850.67, -5888),
          GetRandomReal(6752, 7786.67)
        );
      }
    }
  }
  lv_bnp = null;
}
function f_bng() {
  var lv_bnq = 0;
  var lv_bnr;
  ForForce(gv_ana, f_bnk);
  if (gv_amY == 0) {
    DisableTrigger(gv_ain);
    ForGroup(gv_amW, f_bnm);
    gv_amZ = 0;
    gv_amX = false;
    return false;
  }
  gv_amZ = 0;
  ForGroup(gv_amW, f_bno);
  do {
    if (lv_bnq > gv_amY) {
      break;
    }
    if (gv_amZ >= YO) {
      if (true) {
        break;
      }
    }
    lv_bnr = CreateUnit(
      gv_amG,
      gv_alg.getInt(451),
      GetRandomReal(-8448, -6816),
      GetRandomReal(6368, 8128),
      0.0
    );
    IssuePointOrderById(
      lv_bnr,
      gv_aar,
      GetRandomReal(-8850.67, -5888),
      GetRandomReal(6752, 7786.67)
    );
    GroupAddUnit(gv_amW, lv_bnr);
    lv_bnr = CreateUnit(
      gv_amG,
      gv_alg.getInt(451),
      GetRandomReal(-6688, -5056),
      GetRandomReal(7424, 9184),
      0.0
    );
    IssuePointOrderById(
      lv_bnr,
      gv_aar,
      GetRandomReal(-8850.67, -5888),
      GetRandomReal(6752, 7786.67)
    );
    GroupAddUnit(gv_amW, lv_bnr);
    gv_amZ = gv_amZ + 2;
    lv_bnq = lv_bnq + 1;
  } while (true);
  lv_bnr = null;
  return false;
}
function f_bns() {
  return (
    (IsUnitType(GetTriggerUnit(), UNIT_TYPE_HERO) &&
      IsUnitInGroup(GetTriggerUnit(), gv_ack) == false) != null
  );
}
function f_bnt() {
  var lv_bnu = GetOwningPlayer(GetTriggerUnit());
  var lv_bnv = GetPlayerId(lv_bnu);
  if (GetHeroLevel(GetTriggerUnit()) > 39) {
    if (gv_alf[lv_bnv] != "Peak") {
      gv_and = gv_and + 1;
      ForceAddPlayer(gv_anf, lv_bnu);
      if (lv_bnu == GetLocalPlayer()) {
        StartSound(gv_afL);
      }
      DisplayTextToPlayer(
        lv_bnu,
        0.0,
        0.0,
        "|cffff8000Entered: |r|cff0080ffMinotaur Mountains (Peak)|r"
      );
      gv_alf[lv_bnv] = "Peak";
    }
    if (!gv_anc) {
      gv_anc = true;
      EnableTrigger(gv_aio);
      ExecuteFunc("f_bnw");
    }
  } else {
    if (lv_bnv < 9) {
      DisplayTimedTextToPlayer(
        lv_bnu,
        0.0,
        0.0,
        10,
        S2S(gv_alf[77] + "You are too weak to enter this level 40 area!")
      );
      gv_alv = f_aIV(
        Player(PLAYER_NEUTRAL_PASSIVE),
        GetUnitX(GetTriggerUnit()),
        GetUnitY(GetTriggerUnit()),
        2
      );
      f_aJc(gv_alv, "A077", 0);
      IssueTargetOrderById(gv_alv, 852095, GetTriggerUnit());
      SetUnitPositionLoc(GetTriggerUnit(), gv_aaP[2]);
      PanCameraToTimedForPlayer(
        lv_bnu,
        GetUnitX(GetTriggerUnit()),
        GetUnitY(GetTriggerUnit()),
        0.0
      );
    }
  }
  lv_bnu = null;
}
function f_bnx() {
  var lv_bny = CreateTrigger();
  var lv_bnz = CreateRegion();
  RegionAddRect(lv_bnz, gv_aeh);
  RegionAddRect(lv_bnz, gv_aei);
  TriggerRegisterEnterRegion(lv_bny, lv_bnz, null);
  TriggerAddCondition(lv_bny, Condition(f_bns));
  TriggerAddAction(lv_bny, f_bnt);
}
function f_bnA() {
  var lv_bnB = GetEnumPlayer();
  if (gv_alf[GetPlayerId(lv_bnB)] != "Peak") {
    ForceRemovePlayer(gv_anf, lv_bnB);
    gv_and = gv_and - 1;
  }
  lv_bnB = null;
}
function f_bnC() {
  var lv_bnD = GetEnumUnit();
  GroupRemoveUnit(gv_anb, lv_bnD);
  RemoveUnit(lv_bnD);
  lv_bnD = null;
}
function f_bnE() {
  var lv_bnF = GetEnumUnit();
  if (GetWidgetLife(lv_bnF) < 0.406) {
    GroupRemoveUnit(gv_anb, lv_bnF);
  } else {
    gv_ane = gv_ane + 1;
    if (RectContainsCoords(gv_aeh, GetUnitX(lv_bnF), GetUnitY(lv_bnF))) {
      IssuePointOrderById(
        lv_bnF,
        gv_aar,
        GetRandomReal(-14560, -8832),
        GetRandomReal(6304, 12320)
      );
    } else {
      if (RectContainsCoords(gv_aei, GetUnitX(lv_bnF), GetUnitY(lv_bnF))) {
        IssuePointOrderById(
          lv_bnF,
          gv_aar,
          GetRandomReal(-14752, -11264),
          GetRandomReal(12320, 13376)
        );
      } else {
        IssuePointOrderById(
          lv_bnF,
          gv_aar,
          GetRandomReal(-14656, -10047),
          GetRandomReal(9312, 12848)
        );
      }
    }
  }
  lv_bnF = null;
}
function f_bnw() {
  var lv_bnG = 0;
  var lv_bnH;
  ForForce(gv_anf, f_bnA);
  if (gv_and == 0) {
    DisableTrigger(gv_aio);
    ForGroup(gv_anb, f_bnC);
    gv_ane = 0;
    gv_anc = false;
    return false;
  }
  gv_ane = 0;
  ForGroup(gv_anb, f_bnE);
  do {
    if (lv_bnG > gv_and) {
      break;
    }
    if (gv_ane >= oR) {
      if (true) {
        break;
      }
    }
    lv_bnH = CreateUnit(
      gv_amG,
      gv_alg.getInt(452),
      GetRandomReal(-11712, -9344),
      GetRandomReal(10784, 11712),
      0.0
    );
    IssuePointOrderById(
      lv_bnH,
      gv_aar,
      GetRandomReal(-14656, -10047),
      GetRandomReal(9312, 12848)
    );
    GroupAddUnit(gv_anb, lv_bnH);
    lv_bnH = CreateUnit(
      gv_amG,
      gv_alg.getInt(452),
      GetRandomReal(-14592, -13824),
      GetRandomReal(9152, 10240),
      0.0
    );
    IssuePointOrderById(
      lv_bnH,
      gv_aar,
      GetRandomReal(-14656, -10047),
      GetRandomReal(9312, 12848)
    );
    GroupAddUnit(gv_anb, lv_bnH);
    lv_bnH = CreateUnit(
      gv_amG,
      gv_alg.getInt(452),
      GetRandomReal(-12288, -10048),
      GetRandomReal(6624, 7520),
      0.0
    );
    IssuePointOrderById(
      lv_bnH,
      gv_aar,
      GetRandomReal(-14656, -10047),
      GetRandomReal(9312, 12848)
    );
    GroupAddUnit(gv_anb, lv_bnH);
    gv_ane = gv_ane + 3;
    lv_bnG = lv_bnG + 1;
  } while (true);
  lv_bnH = null;
  return false;
}
function f_bnI() {
  return IsUnitType(GetTriggerUnit(), UNIT_TYPE_HERO) != null;
}
function f_bnJ() {
  var lv_bnK = GetOwningPlayer(GetTriggerUnit());
  var lv_bnL = GetPlayerId(lv_bnK);
  if (GetHeroLevel(GetTriggerUnit()) > 54) {
    if (gv_alf[lv_bnL] != "CreteT") {
      if (lv_bnK == GetLocalPlayer()) {
        StartSound(gv_afL);
      }
      DisplayTextToPlayer(
        lv_bnK,
        0.0,
        0.0,
        "|cffff8000Entered: |r|cff0080ffIsle of Crete|r"
      );
      gv_alf[lv_bnL] = "CreteT";
    }
  } else {
    if (lv_bnL < 9) {
      DisplayTimedTextToPlayer(
        lv_bnK,
        0.0,
        0.0,
        10,
        S2S(
          gv_alf[77] +
            "You are too weak to enter this level 55 area, you are transported to Athens!"
        )
      );
      SetUnitPositionLoc(GetTriggerUnit(), gv_aaP[1]);
      PanCameraToTimedForPlayer(
        lv_bnK,
        GetUnitX(GetTriggerUnit()),
        GetUnitY(GetTriggerUnit()),
        0.0
      );
    }
  }
  lv_bnK = null;
}
function f_bnM() {
  var lv_bnN = CreateRegion();
  var lv_bnO = CreateTrigger();
  RegionAddRect(lv_bnN, gv_adk);
  TriggerRegisterEnterRegion(lv_bnO, lv_bnN, null);
  TriggerAddCondition(lv_bnO, Condition(f_bnI));
  TriggerAddAction(lv_bnO, f_bnJ);
  lv_bnN = null;
}
function f_bnP() {
  return (
    (IsUnitType(GetTriggerUnit(), UNIT_TYPE_HERO) &&
      IsUnitInGroup(GetTriggerUnit(), gv_ack) == false) != null
  );
}
function f_bnQ() {
  var lv_bnR = GetOwningPlayer(GetTriggerUnit());
  var lv_bnS = GetPlayerId(lv_bnR);
  if (GetHeroLevel(GetTriggerUnit()) > 54) {
    if (gv_alf[lv_bnS] != "Naga") {
      gv_ani = gv_ani + 1;
      ForceAddPlayer(gv_ank, lv_bnR);
      if (lv_bnR == GetLocalPlayer()) {
        StartSound(gv_afL);
      }
      DisplayTextToPlayer(
        lv_bnR,
        0.0,
        0.0,
        "|cffff8000Entered: |r|cff0080ffCrete Wilderness|r"
      );
      gv_alf[lv_bnS] = "Naga";
    }
    if (!gv_anh) {
      gv_anh = true;
      EnableTrigger(gv_aip);
      ExecuteFunc("f_bnT");
    }
  } else {
    if (lv_bnS < 9) {
      DisplayTimedTextToPlayer(
        lv_bnR,
        0.0,
        0.0,
        10,
        S2S(gv_alf[77] + "You are too weak to enter this level 55 area!")
      );
      SetUnitPositionLoc(GetTriggerUnit(), gv_aaP[2]);
      PanCameraToTimedForPlayer(
        lv_bnR,
        GetUnitX(GetTriggerUnit()),
        GetUnitY(GetTriggerUnit()),
        0.0
      );
    }
  }
  lv_bnR = null;
}
function f_bnU() {
  var lv_bnV = CreateTrigger();
  var lv_bnW = CreateRegion();
  RegionAddRect(lv_bnW, gv_adg);
  RegionAddRect(lv_bnW, gv_adh);
  RegionAddRect(lv_bnW, gv_adi);
  RegionAddRect(lv_bnW, gv_adj);
  TriggerRegisterEnterRegion(lv_bnV, lv_bnW, null);
  TriggerAddCondition(lv_bnV, Condition(f_bnP));
  TriggerAddAction(lv_bnV, f_bnQ);
}
function f_bnX() {
  var lv_bnY = GetEnumPlayer();
  if (gv_alf[GetPlayerId(lv_bnY)] != "Naga") {
    ForceRemovePlayer(gv_ank, lv_bnY);
    gv_ani = gv_ani - 1;
  }
  lv_bnY = null;
}
function f_bnZ() {
  var lv_boa = GetEnumUnit();
  GroupRemoveUnit(gv_ang, lv_boa);
  RemoveUnit(lv_boa);
  lv_boa = null;
}
function f_bob() {
  var lv_boc = GetEnumUnit();
  if (GetWidgetLife(lv_boc) < 0.406) {
    GroupRemoveUnit(gv_ang, lv_boc);
  } else {
    gv_anj = gv_anj + 1;
    if (
      RectContainsCoords(gv_adg, GetUnitX(lv_boc), GetUnitY(lv_boc)) ||
      RectContainsCoords(gv_adh, GetUnitX(lv_boc), GetUnitY(lv_boc))
    ) {
      IssuePointOrderById(
        lv_boc,
        gv_aar,
        GetRandomReal(1792, 6048),
        GetRandomReal(-6592, -3616)
      );
    } else {
      if (
        RectContainsCoords(gv_adi, GetUnitX(lv_boc), GetUnitY(lv_boc)) ||
        RectContainsCoords(gv_adj, GetUnitX(lv_boc), GetUnitY(lv_boc))
      ) {
        IssuePointOrderById(
          lv_boc,
          gv_aar,
          GetRandomReal(2944, 5152),
          GetRandomReal(-8480, -6592)
        );
      } else {
        IssuePointOrderById(
          lv_boc,
          gv_aar,
          GetRandomReal(2592, 4592),
          GetRandomReal(-7376, -5016)
        );
      }
    }
  }
  lv_boc = null;
}
function f_bnT() {
  var lv_bod = 0;
  var lv_boe;
  ForForce(gv_ank, f_bnX);
  if (gv_ani == 0) {
    DisableTrigger(gv_aip);
    ForGroup(gv_ang, f_bnZ);
    gv_anj = 0;
    gv_anh = false;
    return false;
  }
  gv_anj = 0;
  ForGroup(gv_ang, f_bob);
  do {
    if (lv_bod > gv_ani) {
      break;
    }
    if (gv_anj >= ER) {
      if (true) {
        break;
      }
    }
    lv_boe = CreateUnit(
      gv_amG,
      gv_alg.getInt(GetRandomInt(453, 467)),
      GetRandomReal(3584, 4224),
      GetRandomReal(-7392, -6336),
      0.0
    );
    IssuePointOrderById(
      lv_boe,
      gv_aar,
      GetRandomReal(2592, 4592),
      GetRandomReal(-7376, -5016)
    );
    GroupAddUnit(gv_ang, lv_boe);
    lv_boe = CreateUnit(
      gv_amG,
      gv_alg.getInt(GetRandomInt(453, 467)),
      GetRandomReal(2880, 5184),
      GetRandomReal(-3648, -3424),
      0.0
    );
    IssuePointOrderById(
      lv_boe,
      gv_aar,
      GetRandomReal(2592, 4592),
      GetRandomReal(-7376, -5016)
    );
    GroupAddUnit(gv_ang, lv_boe);
    gv_anj = gv_anj + 2;
    lv_bod = lv_bod + 1;
  } while (true);
  lv_boe = null;
  return false;
}
function f_bof() {
  return (
    (IsUnitType(GetTriggerUnit(), UNIT_TYPE_HERO) &&
      IsUnitInGroup(GetTriggerUnit(), gv_ack) == false) != null
  );
}
function f_bog() {
  var lv_boh = GetOwningPlayer(GetTriggerUnit());
  var lv_boi = GetPlayerId(lv_boh);
  if (GetHeroLevel(GetTriggerUnit()) > 74) {
    if (gv_alf[lv_boi] != "Satyr") {
      gv_ann = gv_ann + 1;
      ForceAddPlayer(gv_anp, lv_boh);
      if (lv_boh == GetLocalPlayer()) {
        StartSound(gv_afL);
      }
      DisplayTextToPlayer(
        lv_boh,
        0.0,
        0.0,
        "|cffff8000Entered: |r|cff0080ffSatyr Woodlands|r"
      );
      gv_alf[lv_boi] = "Satyr";
    }
    if (!gv_anm) {
      gv_anm = true;
      EnableTrigger(gv_aiq);
      ExecuteFunc("f_boj");
    }
  } else {
    if (lv_boi < 9) {
      DisplayTimedTextToPlayer(
        lv_boh,
        0.0,
        0.0,
        10,
        S2S(gv_alf[77] + "You are too weak to enter this level 75 area!")
      );
      SetUnitPositionLoc(GetTriggerUnit(), gv_aaP[2]);
      PanCameraToTimedForPlayer(
        lv_boh,
        GetUnitX(GetTriggerUnit()),
        GetUnitY(GetTriggerUnit()),
        0.0
      );
    }
  }
  lv_boh = null;
}
function f_bok() {
  var lv_bol = CreateTrigger();
  var lv_bom = CreateRegion();
  RegionAddRect(lv_bom, gv_aeG);
  RegionAddRect(lv_bom, gv_aeH);
  RegionAddRect(lv_bom, gv_aeI);
  RegionAddRect(lv_bom, gv_aeJ);
  TriggerRegisterEnterRegion(lv_bol, lv_bom, null);
  TriggerAddCondition(lv_bol, Condition(f_bof));
  TriggerAddAction(lv_bol, f_bog);
}
function f_bon() {
  var lv_boo = GetEnumPlayer();
  if (gv_alf[GetPlayerId(lv_boo)] != "Satyr") {
    ForceRemovePlayer(gv_anp, lv_boo);
    gv_ann = gv_ann - 1;
  }
  lv_boo = null;
}
function f_bop() {
  var lv_boq = GetEnumUnit();
  GroupRemoveUnit(gv_anl, lv_boq);
  RemoveUnit(lv_boq);
  lv_boq = null;
}
function f_bor() {
  var lv_bos = GetEnumUnit();
  if (GetWidgetLife(lv_bos) < 0.406) {
    GroupRemoveUnit(gv_anl, lv_bos);
  } else {
    gv_ano = gv_ano + 1;
    if (RectContainsCoords(gv_aeG, GetUnitX(lv_bos), GetUnitY(lv_bos))) {
      IssuePointOrderById(
        lv_bos,
        gv_aar,
        GetRandomReal(-10880, -4832),
        GetRandomReal(-4512, -3296)
      );
    } else {
      if (
        RectContainsCoords(gv_aeH, GetUnitX(lv_bos), GetUnitY(lv_bos)) ||
        RectContainsCoords(gv_aeH, GetUnitX(lv_bos), GetUnitY(lv_bos))
      ) {
        IssuePointOrderById(
          lv_bos,
          gv_aar,
          GetRandomReal(-7808, -3552),
          GetRandomReal(-3296, -571)
        );
      } else {
        if (RectContainsCoords(gv_aeI, GetUnitX(lv_bos), GetUnitY(lv_bos))) {
          IssuePointOrderById(
            lv_bos,
            gv_aar,
            GetRandomReal(-3584, -488),
            GetRandomReal(-1568, -367)
          );
        } else {
          IssuePointOrderById(
            lv_bos,
            gv_aar,
            GetRandomReal(-6784, -3434),
            GetRandomReal(-3168, -720)
          );
        }
      }
    }
  }
  lv_bos = null;
}
function f_boj() {
  var lv_bot = 0;
  var lv_bou;
  ForForce(gv_anp, f_bon);
  if (gv_ann == 0) {
    DisableTrigger(gv_aiq);
    ForGroup(gv_anl, f_bop);
    gv_ano = 0;
    gv_anm = false;
    return false;
  }
  gv_ano = 0;
  ForGroup(gv_anl, f_bor);
  do {
    if (lv_bot > gv_ann) {
      break;
    }
    if (gv_ano >= 20) {
      if (true) {
        break;
      }
    }
    lv_bou = CreateUnit(
      gv_amG,
      gv_alg.getInt(GetRandomInt(468, 487)),
      GetRandomReal(-8736, -7872),
      GetRandomReal(-4640, -3584),
      0.0
    );
    IssuePointOrderById(
      lv_bou,
      gv_aar,
      GetRandomReal(-6784, -3434),
      GetRandomReal(-3168, -720)
    );
    GroupAddUnit(gv_anl, lv_bou);
    lv_bou = CreateUnit(
      gv_amG,
      gv_alg.getInt(GetRandomInt(468, 487)),
      GetRandomReal(-7296, -6528),
      GetRandomReal(-1536, -384),
      0.0
    );
    IssuePointOrderById(
      lv_bou,
      gv_aar,
      GetRandomReal(-6784, -3434),
      GetRandomReal(-3168, -720)
    );
    GroupAddUnit(gv_anl, lv_bou);
    lv_bou = CreateUnit(
      gv_amG,
      gv_alg.getInt(GetRandomInt(468, 487)),
      GetRandomReal(-2432, -1920),
      GetRandomReal(-1600, 0.0),
      0.0
    );
    IssuePointOrderById(
      lv_bou,
      gv_aar,
      GetRandomReal(-6784, -3434),
      GetRandomReal(-3168, -720)
    );
    GroupAddUnit(gv_anl, lv_bou);
    gv_ano = gv_ano + 3;
    lv_bot = lv_bot + 1;
  } while (true);
  lv_bou = null;
  return false;
}
function f_bov() {
  return (
    (IsUnitType(GetTriggerUnit(), UNIT_TYPE_HERO) &&
      IsUnitInGroup(GetTriggerUnit(), gv_ack) == false) != null
  );
}
function f_bow() {
  var lv_box = GetOwningPlayer(GetTriggerUnit());
  var lv_boy = GetPlayerId(lv_box);
  if (GetHeroLevel(GetTriggerUnit()) > 84) {
    if (gv_alf[lv_boy] != "Treant") {
      gv_ans = gv_ans + 1;
      ForceAddPlayer(gv_anu, lv_box);
      if (lv_box == GetLocalPlayer()) {
        StartSound(gv_afL);
      }
      DisplayTextToPlayer(
        lv_box,
        0.0,
        0.0,
        "|cffff8000Entered: |r|cff0080ffEvil Forest|r"
      );
      gv_alf[lv_boy] = "Treant";
    }
    if (!gv_anr) {
      gv_anr = true;
      EnableTrigger(gv_air);
      ExecuteFunc("f_boz");
    }
  } else {
    if (lv_boy < 9) {
      DisplayTimedTextToPlayer(
        lv_box,
        0.0,
        0.0,
        10,
        S2S(gv_alf[77] + "You are too weak to enter this level 85 area!")
      );
      SetUnitPositionLoc(GetTriggerUnit(), gv_aaP[2]);
      PanCameraToTimedForPlayer(
        lv_box,
        GetUnitX(GetTriggerUnit()),
        GetUnitY(GetTriggerUnit()),
        0.0
      );
    }
  }
  lv_box = null;
}
function f_boA() {
  var lv_boB = CreateTrigger();
  var lv_boC = CreateRegion();
  RegionAddRect(lv_boC, gv_adv);
  RegionAddRect(lv_boC, gv_adw);
  RegionAddRect(lv_boC, gv_adx);
  RegionAddRect(lv_boC, gv_ady);
  RegionAddRect(lv_boC, gv_adz);
  TriggerRegisterEnterRegion(lv_boB, lv_boC, null);
  TriggerAddCondition(lv_boB, Condition(f_bov));
  TriggerAddAction(lv_boB, f_bow);
}
function f_boD() {
  var lv_boE = GetEnumPlayer();
  if (gv_alf[GetPlayerId(lv_boE)] != "Treant") {
    ForceRemovePlayer(gv_anu, lv_boE);
    gv_ans = gv_ans - 1;
  }
  lv_boE = null;
}
function f_boF() {
  var lv_boG = GetEnumUnit();
  GroupRemoveUnit(gv_anq, lv_boG);
  RemoveUnit(lv_boG);
  lv_boG = null;
}
function f_boH() {
  var lv_boI = GetEnumUnit();
  if (GetWidgetLife(lv_boI) < 0.406) {
    GroupRemoveUnit(gv_anq, lv_boI);
  } else {
    gv_ant = gv_ant + 1;
    if (RectContainsCoords(gv_adv, GetUnitX(lv_boI), GetUnitY(lv_boI))) {
      IssuePointOrderById(
        lv_boI,
        gv_aar,
        GetRandomReal(-13024, -11136),
        GetRandomReal(-4960, -2126)
      );
    } else {
      if (RectContainsCoords(gv_adw, GetUnitX(lv_boI), GetUnitY(lv_boI))) {
        IssuePointOrderById(
          lv_boI,
          gv_aar,
          GetRandomReal(-12416, -9216),
          GetRandomReal(-6048, -4608)
        );
      } else {
        if (
          RectContainsCoords(gv_adx, GetUnitX(lv_boI), GetUnitY(lv_boI)) ||
          RectContainsCoords(gv_adz, GetUnitX(lv_boI), GetUnitY(lv_boI))
        ) {
          IssuePointOrderById(
            lv_boI,
            gv_aar,
            GetRandomReal(-4960, -3456),
            GetRandomReal(-7680, -4512)
          );
        } else {
          if (RectContainsCoords(gv_ady, GetUnitX(lv_boI), GetUnitY(lv_boI))) {
            IssuePointOrderById(
              lv_boI,
              gv_aar,
              GetRandomReal(-8556.8, -3456),
              GetRandomReal(-9888, -5348)
            );
          } else {
            IssuePointOrderById(
              lv_boI,
              gv_aar,
              GetRandomReal(-8556.8, -5256),
              GetRandomReal(-6764.8, -5268)
            );
          }
        }
      }
    }
  }
  lv_boI = null;
}
function f_boz() {
  var lv_boJ = 0;
  var lv_boK;
  ForForce(gv_anu, f_boD);
  if (gv_ans == 0) {
    DisableTrigger(gv_air);
    ForGroup(gv_anq, f_boF);
    gv_ant = 0;
    gv_anr = false;
    return false;
  }
  gv_ant = 0;
  ForGroup(gv_anq, f_boH);
  do {
    if (lv_boJ > gv_ans) {
      break;
    }
    if (gv_ant >= 20) {
      if (true) {
        break;
      }
    }
    lv_boK = CreateUnit(
      gv_amG,
      gv_alg.getInt(GetRandomInt(488, 501)),
      GetRandomReal(-12928, -12384),
      GetRandomReal(-3424, -2240),
      0.0
    );
    IssuePointOrderById(
      lv_boK,
      gv_aar,
      GetRandomReal(-8556.8, -5256),
      GetRandomReal(-6764.8, -5268)
    );
    GroupAddUnit(gv_anq, lv_boK);
    lv_boK = CreateUnit(
      gv_amG,
      gv_alg.getInt(GetRandomInt(488, 501)),
      GetRandomReal(-2912, -2368),
      GetRandomReal(-6080, -4800),
      0.0
    );
    IssuePointOrderById(
      lv_boK,
      gv_aar,
      GetRandomReal(-8556.8, -5256),
      GetRandomReal(-6764.8, -5268)
    );
    GroupAddUnit(gv_anq, lv_boK);
    lv_boK = CreateUnit(
      gv_amG,
      gv_alg.getInt(GetRandomInt(488, 501)),
      GetRandomReal(-7360, -6720),
      GetRandomReal(-8128, -6944),
      0.0
    );
    IssuePointOrderById(
      lv_boK,
      gv_aar,
      GetRandomReal(-8556.8, -5256),
      GetRandomReal(-6764.8, -5268)
    );
    GroupAddUnit(gv_anq, lv_boK);
    lv_boK = CreateUnit(
      gv_amG,
      gv_alg.getInt(GetRandomInt(488, 501)),
      GetRandomReal(-5824, -5440),
      GetRandomReal(-9664, -8512),
      0.0
    );
    IssuePointOrderById(
      lv_boK,
      gv_aar,
      GetRandomReal(-8556.8, -5256),
      GetRandomReal(-6764.8, -5268)
    );
    GroupAddUnit(gv_anq, lv_boK);
    gv_ant = gv_ant + 4;
    lv_boJ = lv_boJ + 1;
  } while (true);
  lv_boK = null;
  return false;
}
function f_boL() {
  return (
    (IsUnitType(GetTriggerUnit(), UNIT_TYPE_HERO) &&
      IsUnitInGroup(GetTriggerUnit(), gv_ack) == false) != null
  );
}
function f_boM() {
  var lv_boN = GetOwningPlayer(GetTriggerUnit());
  var lv_boO = GetPlayerId(lv_boN);
  if (GetHeroLevel(GetTriggerUnit()) > 84) {
    if (gv_alf[lv_boO] != "Sparta") {
      if (lv_boN == GetLocalPlayer()) {
        StartSound(gv_afL);
      }
      DisplayTextToPlayer(
        lv_boN,
        0.0,
        0.0,
        "|cffff8000Entered: |r|cff0080ffSparta|r"
      );
      gv_alf[lv_boO] = "Sparta";
    }
  } else {
    if (lv_boO < 9) {
      DisplayTimedTextToPlayer(
        lv_boN,
        0.0,
        0.0,
        10,
        S2S(gv_alf[77] + "You are too weak to enter this level 85 area!")
      );
      SetUnitPositionLoc(GetTriggerUnit(), gv_aaP[2]);
      PanCameraToTimedForPlayer(
        lv_boN,
        GetUnitX(GetTriggerUnit()),
        GetUnitY(GetTriggerUnit()),
        0.0
      );
    }
  }
  lv_boN = null;
}
function f_boP() {
  var lv_boQ = CreateRegion();
  var lv_boR = CreateTrigger();
  RegionAddRect(lv_boQ, gv_aeQ);
  TriggerRegisterEnterRegion(lv_boR, lv_boQ, null);
  TriggerAddCondition(lv_boR, Condition(f_boL));
  TriggerAddAction(lv_boR, f_boM);
  lv_boQ = null;
}
function f_boS() {
  return (
    (IsUnitType(GetTriggerUnit(), UNIT_TYPE_HERO) &&
      IsUnitInGroup(GetTriggerUnit(), gv_ack) == false) != null
  );
}
function f_boT() {
  var lv_boU = GetOwningPlayer(GetTriggerUnit());
  var lv_boV = GetPlayerId(lv_boU);
  if (GetHeroLevel(GetTriggerUnit()) > 99) {
    if (gv_alf[lv_boV] != "Centaurs") {
      gv_anx = gv_anx + 1;
      ForceAddPlayer(gv_anz, lv_boU);
      if (lv_boU == GetLocalPlayer()) {
        StartSound(gv_afL);
      }
      DisplayTextToPlayer(
        lv_boU,
        0.0,
        0.0,
        "|cffff8000Entered: |r|cff0080ffCentaurian Canyons|r"
      );
      gv_alf[lv_boV] = "Centaurs";
    }
    if (!gv_anw) {
      gv_anw = true;
      EnableTrigger(gv_ais);
      ExecuteFunc("f_boW");
    }
  } else {
    if (lv_boV < 9) {
      DisplayTimedTextToPlayer(
        lv_boU,
        0.0,
        0.0,
        10,
        S2S(gv_alf[77] + "You are too weak to enter this level 100 area!")
      );
      SetUnitPositionLoc(GetTriggerUnit(), gv_aaP[4]);
      PanCameraToTimedForPlayer(
        lv_boU,
        GetUnitX(GetTriggerUnit()),
        GetUnitY(GetTriggerUnit()),
        0.0
      );
    }
  }
  lv_boU = null;
}
function f_boX() {
  var lv_boY = CreateTrigger();
  var lv_boZ = CreateRegion();
  RegionAddRect(lv_boZ, gv_acW);
  RegionAddRect(lv_boZ, gv_acX);
  RegionAddRect(lv_boZ, gv_acY);
  RegionAddRect(lv_boZ, gv_acZ);
  TriggerRegisterEnterRegion(lv_boY, lv_boZ, null);
  TriggerAddCondition(lv_boY, Condition(f_boS));
  TriggerAddAction(lv_boY, f_boT);
}
function f_bpa() {
  var lv_bpb = GetEnumPlayer();
  if (gv_alf[GetPlayerId(lv_bpb)] != "Centaurs") {
    ForceRemovePlayer(gv_anz, lv_bpb);
    gv_anx = gv_anx - 1;
  }
  lv_bpb = null;
}
function f_bpc() {
  var lv_bpd = GetEnumUnit();
  GroupRemoveUnit(gv_anv, lv_bpd);
  RemoveUnit(lv_bpd);
  lv_bpd = null;
}
function f_bpe() {
  var lv_bpf = GetEnumUnit();
  if (GetWidgetLife(lv_bpf) < 0.406) {
    GroupRemoveUnit(gv_anv, lv_bpf);
  } else {
    gv_any = gv_any + 1;
    if (
      RectContainsCoords(gv_acW, GetUnitX(lv_bpf), GetUnitY(lv_bpf)) ||
      RectContainsCoords(gv_acZ, GetUnitX(lv_bpf), GetUnitY(lv_bpf))
    ) {
      IssuePointOrderById(
        lv_bpf,
        gv_aar,
        GetRandomReal(-13152, -1024),
        GetRandomReal(-11648, -9888)
      );
    } else {
      if (RectContainsCoords(gv_acY, GetUnitX(lv_bpf), GetUnitY(lv_bpf))) {
        IssuePointOrderById(
          lv_bpf,
          gv_aar,
          GetRandomReal(-10752, -2144),
          GetRandomReal(-13920, -11616)
        );
      } else {
        IssuePointOrderById(
          lv_bpf,
          gv_aar,
          GetRandomReal(-9632, -3865),
          GetRandomReal(-12000, -10480)
        );
      }
    }
  }
  lv_bpf = null;
}
function f_boW() {
  var lv_bpg = 0;
  var lv_bph;
  ForForce(gv_anz, f_bpa);
  if (gv_anx == 0) {
    DisableTrigger(gv_ais);
    ForGroup(gv_anv, f_bpc);
    gv_any = 0;
    gv_anw = false;
    return false;
  }
  gv_any = 0;
  ForGroup(gv_anv, f_bpe);
  do {
    if (lv_bpg > gv_anx) {
      break;
    }
    if (gv_any >= 20) {
      if (true) {
        break;
      }
    }
    lv_bph = CreateUnit(
      gv_amG,
      gv_alg.getInt(GetRandomInt(502, 515)),
      GetRandomReal(-6272, -4096),
      GetRandomReal(-11648, -11008),
      0.0
    );
    IssuePointOrderById(
      lv_bph,
      gv_aar,
      GetRandomReal(-9632, -3865),
      GetRandomReal(-12000, -10480)
    );
    GroupAddUnit(gv_anv, lv_bph);
    lv_bph = CreateUnit(
      gv_amG,
      gv_alg.getInt(GetRandomInt(502, 515)),
      GetRandomReal(-12704, -11712),
      GetRandomReal(-12352, -10624),
      0.0
    );
    IssuePointOrderById(
      lv_bph,
      gv_aar,
      GetRandomReal(-9632, -3865),
      GetRandomReal(-12000, -10480)
    );
    GroupAddUnit(gv_anv, lv_bph);
    lv_bph = CreateUnit(
      gv_amG,
      gv_alg.getInt(GetRandomInt(502, 515)),
      GetRandomReal(-3328, -906),
      GetRandomReal(-12640, -12384),
      0.0
    );
    IssuePointOrderById(
      lv_bph,
      gv_aar,
      GetRandomReal(-9632, -3865),
      GetRandomReal(-12000, -10480)
    );
    GroupAddUnit(gv_anv, lv_bph);
    gv_any = gv_any + 3;
    lv_bpg = lv_bpg + 1;
  } while (true);
  lv_bph = null;
  return false;
}
function f_bpi() {
  return (
    GetUnitTypeId(GetEnteringUnit()) == "nfor" &&
    GetUnitTypeId(GetEnteringUnit()) == "ngh2" &&
    GetUnitTypeId(GetEnteringUnit()) == "ngh1"
  );
}
function f_bpj() {
  gv_alv = GetEnteringUnit();
  GroupRemoveUnit(gv_anA, gv_alv);
  RemoveUnit(gv_alv);
}
function f_bpk() {
  return (
    (IsUnitType(GetTriggerUnit(), UNIT_TYPE_HERO) &&
      IsUnitInGroup(GetTriggerUnit(), gv_ack) == false) != null
  );
}
function f_bpl() {
  var lv_bpm = GetOwningPlayer(GetTriggerUnit());
  var lv_bpn = GetPlayerId(lv_bpm);
  if (GetHeroLevel(GetTriggerUnit()) > 109) {
    if (gv_alf[lv_bpn] != "Undead") {
      gv_anC = gv_anC + 1;
      ForceAddPlayer(gv_anE, lv_bpm);
      if (lv_bpm == GetLocalPlayer()) {
        StartSound(gv_afL);
      }
      DisplayTextToPlayer(
        lv_bpm,
        0.0,
        0.0,
        "|cffff8000Entered: |r|cff0080ffThe Rhodes|r"
      );
      gv_alf[lv_bpn] = "Undead";
    }
    if (!gv_anB) {
      gv_anB = true;
      EnableTrigger(gv_aiu);
      ExecuteFunc("f_bpo");
    }
  } else {
    if (lv_bpn < 9) {
      DisplayTimedTextToPlayer(
        lv_bpm,
        0.0,
        0.0,
        10,
        S2S(
          gv_alf[77] +
            "You are too weak to enter this level 110 area, you are transported to the Evil Forest!"
        )
      );
      SetUnitPosition(GetTriggerUnit(), -12864, -1376);
      PanCameraToTimedForPlayer(
        lv_bpm,
        GetUnitX(GetTriggerUnit()),
        GetUnitY(GetTriggerUnit()),
        0.0
      );
    }
  }
  lv_bpm = null;
}
function f_bpp() {
  var lv_bpq = CreateTrigger();
  var lv_bpr = CreateRegion();
  RegionAddRect(lv_bpr, gv_aeC);
  RegionAddRect(lv_bpr, gv_aeD);
  RegionAddRect(lv_bpr, gv_aeB);
  RegionAddRect(lv_bpr, gv_aeA);
  TriggerRegisterEnterRegion(lv_bpq, lv_bpr, null);
  TriggerAddCondition(lv_bpq, Condition(f_bpk));
  TriggerAddAction(lv_bpq, f_bpl);
}
function f_bps() {
  var lv_bpt = GetEnumPlayer();
  if (gv_alf[GetPlayerId(lv_bpt)] != "Undead") {
    ForceRemovePlayer(gv_anE, lv_bpt);
    gv_anC = gv_anC - 1;
  }
  lv_bpt = null;
}
function f_bpu() {
  var lv_bpv = GetEnumUnit();
  GroupRemoveUnit(gv_anA, lv_bpv);
  RemoveUnit(lv_bpv);
  lv_bpv = null;
}
function f_bpw() {
  var lv_bpx = GetEnumUnit();
  if (GetWidgetLife(lv_bpx) < 0.406) {
    GroupRemoveUnit(gv_anA, lv_bpx);
  } else {
    gv_anD = gv_anD + 1;
    if (GetUnitUserData(lv_bpx) == 1) {
      IssuePointOrderById(
        lv_bpx,
        gv_aar,
        GetRectCenterX(gv_afD),
        GetRectCenterY(gv_afD)
      );
      if (RectContainsCoords(gv_afD, GetUnitX(lv_bpx), GetUnitY(lv_bpx))) {
        SetUnitUserData(lv_bpx, 5);
      }
    } else {
      if (GetUnitUserData(lv_bpx) == 5) {
        IssuePointOrderById(
          lv_bpx,
          gv_aar,
          GetRectCenterX(gv_afz),
          GetRectCenterY(gv_afz)
        );
        if (RectContainsCoords(gv_afz, GetUnitX(lv_bpx), GetUnitY(lv_bpx))) {
          SetUnitUserData(lv_bpx, 1);
        }
      } else {
        if (GetUnitUserData(lv_bpx) == 2) {
          IssuePointOrderById(
            lv_bpx,
            gv_aar,
            GetRectCenterX(gv_afD),
            GetRectCenterY(gv_afD)
          );
          if (RectContainsCoords(gv_afD, GetUnitX(lv_bpx), GetUnitY(lv_bpx))) {
            SetUnitUserData(lv_bpx, 6);
          }
        } else {
          if (GetUnitUserData(lv_bpx) == 6) {
            IssuePointOrderById(
              lv_bpx,
              gv_aar,
              GetRectCenterX(gv_afC),
              GetRectCenterY(gv_afC)
            );
            if (
              RectContainsCoords(gv_afC, GetUnitX(lv_bpx), GetUnitY(lv_bpx))
            ) {
              SetUnitUserData(lv_bpx, 2);
            }
          } else {
            if (GetUnitUserData(lv_bpx) == 3) {
              IssuePointOrderById(
                lv_bpx,
                gv_aar,
                GetRectCenterX(gv_afE),
                GetRectCenterY(gv_afE)
              );
              if (
                RectContainsCoords(gv_afE, GetUnitX(lv_bpx), GetUnitY(lv_bpx))
              ) {
                SetUnitUserData(lv_bpx, 7);
              }
            } else {
              if (GetUnitUserData(lv_bpx) == 7) {
                IssuePointOrderById(
                  lv_bpx,
                  gv_aar,
                  GetRectCenterX(gv_afA),
                  GetRectCenterY(gv_afA)
                );
                if (
                  RectContainsCoords(gv_afA, GetUnitX(lv_bpx), GetUnitY(lv_bpx))
                ) {
                  SetUnitUserData(lv_bpx, 3);
                }
              } else {
                if (GetUnitUserData(lv_bpx) == 4) {
                  IssuePointOrderById(
                    lv_bpx,
                    gv_aar,
                    GetRectCenterX(gv_afF),
                    GetRectCenterY(gv_afF)
                  );
                  if (
                    RectContainsCoords(
                      gv_afF,
                      GetUnitX(lv_bpx),
                      GetUnitY(lv_bpx)
                    )
                  ) {
                    SetUnitUserData(lv_bpx, 8);
                  }
                } else {
                  if (GetUnitUserData(lv_bpx) == 8) {
                    IssuePointOrderById(
                      lv_bpx,
                      gv_aar,
                      GetRectCenterX(gv_afB),
                      GetRectCenterY(gv_afB)
                    );
                    if (
                      RectContainsCoords(
                        gv_afB,
                        GetUnitX(lv_bpx),
                        GetUnitY(lv_bpx)
                      )
                    ) {
                      SetUnitUserData(lv_bpx, 4);
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }
  lv_bpx = null;
}
function f_bpo() {
  var lv_bpy = 0;
  var lv_bpz;
  ForForce(gv_anE, f_bps);
  if (gv_anC == 0) {
    DisableTrigger(gv_aiu);
    ForGroup(gv_anA, f_bpu);
    gv_anD = 0;
    gv_anB = false;
    return false;
  }
  gv_anD = 0;
  ForGroup(gv_anA, f_bpw);
  do {
    if (lv_bpy > gv_anC) {
      break;
    }
    if (gv_anD >= kR) {
      if (true) {
        break;
      }
    }
    lv_bpz = CreateUnit(
      gv_amG,
      gv_alg.getInt(GetRandomInt(516, 530)),
      GetRectCenterX(gv_afz),
      GetRectCenterY(gv_afz),
      0.0
    );
    IssuePointOrderById(
      lv_bpz,
      gv_aar,
      GetRectCenterX(gv_afD),
      GetRectCenterY(gv_afD)
    );
    GroupAddUnit(gv_anA, lv_bpz);
    SetUnitUserData(lv_bpz, 1);
    f_aLz(
      AddSpecialEffectTarget(
        "Abilities\\Spells\\Undead\\Darksummoning\\DarkSummonTarget.mdl",
        lv_bpz,
        "origin"
      ),
      1
    );
    lv_bpz = CreateUnit(
      gv_amG,
      gv_alg.getInt(GetRandomInt(516, 530)),
      GetRectCenterX(gv_afC),
      GetRectCenterY(gv_afC),
      0.0
    );
    IssuePointOrderById(
      lv_bpz,
      gv_aar,
      GetRectCenterX(gv_afD),
      GetRectCenterY(gv_afD)
    );
    GroupAddUnit(gv_anA, lv_bpz);
    SetUnitUserData(lv_bpz, 2);
    f_aLz(
      AddSpecialEffectTarget(
        "Abilities\\Spells\\Undead\\Darksummoning\\DarkSummonTarget.mdl",
        lv_bpz,
        "origin"
      ),
      1
    );
    lv_bpz = CreateUnit(
      gv_amG,
      gv_alg.getInt(GetRandomInt(516, 530)),
      GetRectCenterX(gv_afA),
      GetRectCenterY(gv_afA),
      0.0
    );
    IssuePointOrderById(
      lv_bpz,
      gv_aar,
      GetRectCenterX(gv_afE),
      GetRectCenterY(gv_afE)
    );
    GroupAddUnit(gv_anA, lv_bpz);
    SetUnitUserData(lv_bpz, 3);
    f_aLz(
      AddSpecialEffectTarget(
        "Abilities\\Spells\\Undead\\Darksummoning\\DarkSummonTarget.mdl",
        lv_bpz,
        "origin"
      ),
      1
    );
    lv_bpz = CreateUnit(
      gv_amG,
      gv_alg.getInt(GetRandomInt(516, 530)),
      GetRectCenterX(gv_afB),
      GetRectCenterY(gv_afB),
      0.0
    );
    IssuePointOrderById(
      lv_bpz,
      gv_aar,
      GetRectCenterX(gv_afF),
      GetRectCenterY(gv_afF)
    );
    GroupAddUnit(gv_anA, lv_bpz);
    SetUnitUserData(lv_bpz, 4);
    f_aLz(
      AddSpecialEffectTarget(
        "Abilities\\Spells\\Undead\\Darksummoning\\DarkSummonTarget.mdl",
        lv_bpz,
        "origin"
      ),
      1
    );
    gv_anD = gv_anD + 4;
    lv_bpy = lv_bpy + 1;
  } while (true);
  lv_bpz = null;
  return false;
}
function f_bpA() {
  return (
    (IsUnitType(GetTriggerUnit(), UNIT_TYPE_HERO) &&
      IsUnitInGroup(GetTriggerUnit(), gv_ack) == false) != null
  );
}
function f_bpB() {
  var lv_bpC = GetOwningPlayer(GetTriggerUnit());
  var lv_bpD = GetPlayerId(lv_bpC);
  if (GetHeroLevel(GetTriggerUnit()) > 129) {
    if (gv_alf[lv_bpD] != "Citadel") {
      gv_anH = gv_anH + 1;
      ForceAddPlayer(gv_anJ, lv_bpC);
      if (lv_bpC == GetLocalPlayer()) {
        StartSound(gv_afL);
      }
      DisplayTextToPlayer(
        lv_bpC,
        0.0,
        0.0,
        "|cffff8000Entered: |r|cff0080ffThe Frozen Citadel|r"
      );
      gv_alf[lv_bpD] = "Citadel";
    }
    if (!gv_anG) {
      gv_anG = true;
      EnableTrigger(gv_aiv);
      ExecuteFunc("f_bpE");
    }
  } else {
    if (lv_bpD < 9) {
      DisplayTimedTextToPlayer(
        lv_bpC,
        0.0,
        0.0,
        10,
        S2S(
          gv_alf[77] +
            "You are too weak to enter this level 130 area, you are transported to Draco's Encampment!"
        )
      );
      SetUnitPosition(GetTriggerUnit(), -13024, 13600);
      PanCameraToTimedForPlayer(
        lv_bpC,
        GetUnitX(GetTriggerUnit()),
        GetUnitY(GetTriggerUnit()),
        0.0
      );
    }
  }
  lv_bpC = null;
}
function f_bpF() {
  var lv_bpG = CreateTrigger();
  var lv_bpH = CreateRegion();
  RegionAddRect(lv_bpH, gv_adB);
  TriggerRegisterEnterRegion(lv_bpG, lv_bpH, null);
  TriggerAddCondition(lv_bpG, Condition(f_bpA));
  TriggerAddAction(lv_bpG, f_bpB);
}
function f_bpI() {
  var lv_bpJ = GetEnumPlayer();
  if (gv_alf[GetPlayerId(lv_bpJ)] != "Citadel") {
    ForceRemovePlayer(gv_anJ, lv_bpJ);
    gv_anH = gv_anH - 1;
  }
  lv_bpJ = null;
}
function f_bpK() {
  var lv_bpL = GetEnumUnit();
  GroupRemoveUnit(gv_anF, lv_bpL);
  RemoveUnit(lv_bpL);
  lv_bpL = null;
}
function f_bpM() {
  var lv_bpN = GetEnumUnit();
  if (GetWidgetLife(lv_bpN) < 0.405) {
    GroupRemoveUnit(gv_anF, lv_bpN);
  } else {
    gv_anI = gv_anI + 1;
    if (GetUnitUserData(lv_bpN) == 4) {
      IssuePointOrderById(
        lv_bpN,
        gv_aar,
        GetRectCenterX(gv_adC),
        GetRectCenterY(gv_adC)
      );
      if (RectContainsCoords(gv_adC, GetUnitX(lv_bpN), GetUnitY(lv_bpN))) {
        SetUnitUserData(lv_bpN, 1);
      }
    } else {
      if (GetUnitUserData(lv_bpN) == 1) {
        IssuePointOrderById(
          lv_bpN,
          gv_aar,
          GetRectCenterX(gv_adD),
          GetRectCenterY(gv_adD)
        );
        if (RectContainsCoords(gv_adD, GetUnitX(lv_bpN), GetUnitY(lv_bpN))) {
          SetUnitUserData(lv_bpN, 4);
        }
      } else {
        if (GetUnitUserData(lv_bpN) == 5) {
          IssuePointOrderById(
            lv_bpN,
            gv_aar,
            GetRectCenterX(gv_adE),
            GetRectCenterY(gv_adE)
          );
          if (RectContainsCoords(gv_adE, GetUnitX(lv_bpN), GetUnitY(lv_bpN))) {
            SetUnitUserData(lv_bpN, 2);
          }
        } else {
          if (GetUnitUserData(lv_bpN) == 2) {
            IssuePointOrderById(
              lv_bpN,
              gv_aar,
              GetRectCenterX(gv_adF),
              GetRectCenterY(gv_adF)
            );
            if (
              RectContainsCoords(gv_adF, GetUnitX(lv_bpN), GetUnitY(lv_bpN))
            ) {
              SetUnitUserData(lv_bpN, 5);
            }
          } else {
            if (GetUnitUserData(lv_bpN) == 6) {
              IssuePointOrderById(
                lv_bpN,
                gv_aar,
                GetRectCenterX(gv_adG),
                GetRectCenterY(gv_adG)
              );
              if (
                RectContainsCoords(gv_adG, GetUnitX(lv_bpN), GetUnitY(lv_bpN))
              ) {
                SetUnitUserData(lv_bpN, 3);
              }
            } else {
              if (GetUnitUserData(lv_bpN) == 3) {
                IssuePointOrderById(
                  lv_bpN,
                  gv_aar,
                  GetRectCenterX(gv_adH),
                  GetRectCenterY(gv_adH)
                );
                if (
                  RectContainsCoords(gv_adH, GetUnitX(lv_bpN), GetUnitY(lv_bpN))
                ) {
                  SetUnitUserData(lv_bpN, 6);
                }
              }
            }
          }
        }
      }
    }
  }
  lv_bpN = null;
}
function f_bpE() {
  var lv_bpO;
  ForForce(gv_anJ, f_bpI);
  if (gv_anH == 0) {
    DisableTrigger(gv_aiv);
    DisableTrigger(gv_aiF);
    ForGroup(gv_anA, f_bpK);
    gv_anI = 0;
    gv_anG = false;
    return false;
  }
  gv_anI = 0;
  ForGroup(gv_anF, f_bpM);
  if (gv_anI <= 20) {
    if (gv_anK) {
      lv_bpO = CreateUnit(
        gv_amG,
        gv_alg.getInt(GetRandomInt(531, 533)),
        GetRectCenterX(gv_adC),
        GetRectCenterY(gv_adC),
        0.0
      );
      IssuePointOrderById(
        lv_bpO,
        gv_aar,
        GetRectCenterX(gv_adD),
        GetRectCenterY(gv_adD)
      );
      GroupAddUnit(gv_anF, lv_bpO);
      SetUnitUserData(lv_bpO, 1);
      f_aLz(
        AddSpecialEffectTarget(
          "Abilities\\Spells\\Undead\\FrostNova\\FrostNovaTarget.mdl",
          lv_bpO,
          "origin"
        ),
        1
      );
      lv_bpO = CreateUnit(
        gv_amG,
        gv_alg.getInt(GetRandomInt(531, 533)),
        GetRectCenterX(gv_adG),
        GetRectCenterY(gv_adG),
        0.0
      );
      IssuePointOrderById(
        lv_bpO,
        gv_aar,
        GetRectCenterX(gv_adH),
        GetRectCenterY(gv_adH)
      );
      GroupAddUnit(gv_anF, lv_bpO);
      SetUnitUserData(lv_bpO, 3);
      f_aLz(
        AddSpecialEffectTarget(
          "Abilities\\Spells\\Undead\\FrostNova\\FrostNovaTarget.mdl",
          lv_bpO,
          "origin"
        ),
        1
      );
      gv_anI = gv_anI + 2;
      if (gv_anL) {
        lv_bpO = CreateUnit(
          gv_amG,
          gv_alg.getInt(GetRandomInt(531, 533)),
          GetRectCenterX(gv_adE),
          GetRectCenterY(gv_adE),
          0.0
        );
        IssuePointOrderById(
          lv_bpO,
          gv_aar,
          GetRectCenterX(gv_adF),
          GetRectCenterY(gv_adF)
        );
        GroupAddUnit(gv_anF, lv_bpO);
        SetUnitUserData(lv_bpO, 2);
        f_aLz(
          AddSpecialEffectTarget(
            "Abilities\\Spells\\Undead\\FrostNova\\FrostNovaTarget.mdl",
            lv_bpO,
            "origin"
          ),
          1
        );
        gv_anI = gv_anI + 1;
      }
    }
  }
  lv_bpO = null;
  return false;
}
function f_bpP() {
  var lv_bpQ = f_aIV(
    Player(11),
    GetUnitX(GetEnumUnit()),
    GetUnitY(GetEnumUnit()),
    2
  );
  f_aJc(lv_bpQ, "A057", 0);
  f_aJc(lv_bpQ, "A043", 0);
  IssueTargetOrderById(lv_bpQ, 852190, GetEnumUnit());
  IssueTargetOrderById(lv_bpQ, 852075, GetEnumUnit());
  if (GetUnitAbilityLevel(GetEnumUnit(), "B00I") > 0) {
    UnitDamageTarget(
      gv_aaU[1],
      GetEnumUnit(),
      GetUnitState(GetEnumUnit(), UNIT_STATE_MAX_LIFE) * 0.1,
      false,
      false,
      ATTACK_TYPE_HERO,
      DAMAGE_TYPE_NORMAL,
      null
    );
  }
  lv_bpQ = null;
}
function f_bpR() {
  if (GetWidgetLife(gv_aaU[1]) < 0.406) {
    DisplayTimedTextToForce(
      gv_alq,
      5,
      "|cff00ff00Atlas:|r No... How can this be?! You haven't seen the last of me mortal!"
    );
    f_aIM(gv_anM);
  } else {
    SaveInteger(
      gv_abL,
      0,
      GetHandleId(gv_anM),
      LoadInteger(gv_abL, 0, GetHandleId(gv_anM)) + 1
    );
    if (LoadInteger(gv_abL, 0, GetHandleId(gv_anM)) < 15) {
      if (!gv_anN) {
        DisplayTimedTextToForce(
          gv_alq,
          3,
          "|cffff8a08The Earth begins to shatter..."
        );
        gv_anN = true;
      }
      GroupClear(gv_abu);
      GroupEnumUnitsInRange(
        gv_abu,
        GetUnitX(gv_aaU[1]),
        GetUnitY(gv_aaU[1]),
        800,
        Condition(f_aNQ)
      );
      f_aLz(
        AddSpecialEffect(
          "Abilities\\Spells\\Orc\\EarthQuake\\EarthQuakeTarget.mdl",
          GetUnitX(gv_aaU[1]),
          GetUnitY(gv_aaU[1])
        ),
        1
      );
      ForGroup(gv_abu, f_bpP);
      f_aIl(gv_abu);
    } else {
      if (gv_anN) {
        DisplayTimedTextToForce(
          gv_alq,
          3,
          "|cffff8a08The Earth remains still..."
        );
        gv_anN = false;
      }
    }
    if (LoadInteger(gv_abL, 0, GetHandleId(gv_anM)) == 30) {
      SaveInteger(gv_abL, 0, GetHandleId(gv_anM), 0);
    }
    if (!RectContainsUnit(gv_acD, gv_aaU[1])) {
      gv_acu = GetUnitName(gv_aaU[1]);
      SetUnitPosition(
        gv_aaU[1],
        LoadInteger(gv_abH, gv_act, StringHash(S2S(gv_acu + "_X"))),
        LoadInteger(gv_abH, gv_act, StringHash(S2S(gv_acu + "_Y")))
      );
    }
    if (f_aNx(gv_acD) < 1) {
      PauseTimer(gv_anM);
      f_aBS(1, gv_aaU[1], gv_acD, gv_aiw);
    }
  }
}
function f_bpS() {
  DisplayTimedTextToForce(
    gv_alq,
    5,
    "|cff00ff00Altas:|r So you dare challege me? Well prepare to feel the earth shatter!"
  );
  SaveInteger(gv_abL, 0, GetHandleId(gv_anM), 0);
  gv_anN = false;
  TimerStart(gv_anM, 1, true, f_bpR);
  DisableTrigger(gv_aiw);
}
function f_bpT() {
  if (GetWidgetLife(gv_aaU[2]) < 0.406) {
    DisplayTimedTextToForce(
      gv_alq,
      5,
      "|cff00ff00Themus:|r So justice does also lies in our enemies..."
    );
    f_aIM(gv_anO);
  } else {
    if (!RectContainsUnit(gv_afa, gv_aaU[2])) {
      gv_acu = GetUnitName(gv_aaU[2]);
      SetUnitPosition(
        gv_aaU[2],
        LoadInteger(gv_abH, gv_act, StringHash(S2S(gv_acu + "_X"))),
        LoadInteger(gv_abH, gv_act, StringHash(S2S(gv_acu + "_Y")))
      );
    }
    if (f_aNx(gv_afa) < 1) {
      PauseTimer(gv_anO);
      f_aBS(1, gv_aaU[2], gv_afa, gv_aix);
    }
  }
}
function f_bpU() {
  DisplayTimedTextToForce(
    gv_alq,
    5,
    "|cff00ff00Themus:|r You lack the power of Justice! In this stage you won't even come near to defeating Hades."
  );
  IssueImmediateOrderById(gv_aaU[2], 852123);
  TimerStart(gv_anO, 1, true, f_bpT);
  DisableTrigger(gv_aix);
}
function f_bpV() {
  UnitDamageTarget(
    gv_aaU[3],
    GetEnumUnit(),
    1100 / f_azo(GetEnumUnit()),
    true,
    true,
    ATTACK_TYPE_NORMAL,
    DAMAGE_TYPE_UNIVERSAL,
    null
  );
}
function f_bpW() {
  var lv_bpX = GetEventDamageSource();
  if (
    !gv_anQ &&
    IsUnitType(lv_bpX, UNIT_TYPE_HERO) &&
    GetTriggerUnit() == gv_aaU[3] &&
    gv_aak == 0
  ) {
  } else {
    if (
      IsUnitType(lv_bpX, UNIT_TYPE_HERO) &&
      GetRandomReal(0.0, 100) < 8 &&
      GetTriggerUnit() == gv_aaU[3] &&
      LoadInteger(gv_abL, 2, GetHandleId(gv_anP)) > 2
    ) {
      SaveInteger(
        gv_abL,
        2,
        GetHandleId(gv_anP),
        LoadInteger(gv_abL, 2, GetHandleId(gv_anP)) - 6
      );
      SetUnitPosition(gv_anR, GetUnitX(lv_bpX), GetUnitY(lv_bpX));
      IssueTargetOrderById(gv_anR, 852144, lv_bpX);
      DisplayTimedTextToForce(
        gv_alq,
        5,
        "|cff00ff00Uranus:|r The skies are bent to my will!"
      );
    }
  }
  lv_bpX = null;
  return false;
}
function f_bpY() {
  if (GetWidgetLife(gv_aaU[3]) < 0.406) {
    DisplayTimedTextToForce(
      gv_alq,
      5,
      "|cff00ff00Uranus:|r Fear the skies for you shall no longer see one soon..."
    );
    f_aIM(gv_anP);
  } else {
    SaveInteger(
      gv_abL,
      0,
      GetHandleId(gv_anP),
      LoadInteger(gv_abL, 0, GetHandleId(gv_anP)) + 1
    );
    SaveInteger(
      gv_abL,
      2,
      GetHandleId(gv_anP),
      IMinBJ(LoadInteger(gv_abL, 2, GetHandleId(gv_anP)) + 1, 5)
    );
    if (LoadInteger(gv_abL, 0, GetHandleId(gv_anP)) == 5) {
      GroupClear(gv_abu);
      GroupEnumUnitsInRect(gv_abu, gv_afm, Condition(f_aNQ));
      bj_groupRandomConsidered = 0;
      bj_groupRandomCurrentPick = null;
      ForGroup(gv_abu, GroupPickRandomUnitEnum);
      f_aIl(gv_abu);
      DisplayTimedTextToForce(gv_alq, 3, "|cffff8a08Energy gathers...");
      gv_ald[40] = GetUnitX(bj_groupRandomCurrentPick);
      gv_ald[41] = GetUnitY(bj_groupRandomCurrentPick);
      f_aLz(
        AddSpecialEffect(
          "Abilities\\Spells\\Human\\FlameStrike\\FlameStrikeTarget.mdl",
          gv_ald[40],
          gv_ald[41]
        ),
        3
      );
    }
    if (LoadInteger(gv_abL, 0, GetHandleId(gv_anP)) == 8) {
      GroupClear(gv_abu);
      GroupEnumUnitsInRange(
        gv_abu,
        gv_ald[40],
        gv_ald[41],
        300,
        Condition(f_aNQ)
      );
      f_aLz(
        AddSpecialEffect("MDX\\LightningWrath.mdx", gv_ald[40], gv_ald[41]),
        1
      );
      ForGroup(gv_abu, f_bpV);
      f_aIl(gv_abu);
    }
    if (LoadInteger(gv_abL, 0, GetHandleId(gv_anP)) == 15) {
      SaveInteger(gv_abL, 0, GetHandleId(gv_anP), 0);
    }
    if (!RectContainsUnit(gv_afm, gv_aaU[3])) {
      gv_acu = GetUnitName(gv_aaU[3]);
      SetUnitPosition(
        gv_aaU[3],
        LoadInteger(gv_abH, gv_act, StringHash(S2S(gv_acu + "_X"))),
        LoadInteger(gv_abH, gv_act, StringHash(S2S(gv_acu + "_Y")))
      );
    }
    if (f_aNx(gv_afm) < 1) {
      PauseTimer(gv_anP);
      f_aBS(1, gv_aaU[3], gv_afm, gv_aiy);
    }
  }
}
function f_bpZ() {
  DisplayTimedTextToForce(
    gv_alq,
    5,
    "|cff00ff00Uranus:|r So you really did defeat Atlas huh? I heard him but you shall scream louder!"
  );
  TimerStart(gv_anP, 1, true, f_bpY);
  gv_anQ = false;
  SaveInteger(gv_abL, 0, GetHandleId(gv_anP), 0);
  SaveInteger(gv_abL, 2, GetHandleId(gv_anP), 0);
  DisableTrigger(gv_aiy);
}
function f_bqa() {
  if (GetWidgetLife(gv_aaU[4]) < 0.406) {
    DisplayTimedTextToForce(
      gv_alq,
      5,
      "|cff00ff00Oceanus:|r I am the ocean! I can never die..."
    );
    f_aIM(gv_anS);
    ForGroup(gv_anT, f_aNR);
    f_aIo(gv_anT);
  } else {
    SaveInteger(
      gv_abL,
      0,
      GetHandleId(gv_anS),
      LoadInteger(gv_abL, 0, GetHandleId(gv_anS)) + 1
    );
    if (LoadInteger(gv_abL, 0, GetHandleId(gv_anS)) == 5) {
      DisplayTimedTextToForce(
        gv_alq,
        5,
        "|cff00ff00Oceanus:|r Rise! Those consumed by the sea!"
      );
      GroupAddUnit(
        gv_anT,
        CreateUnit(
          Player(11),
          "u001",
          GetUnitX(gv_aaU[4]) + GetRandomReal(400, 600),
          GetUnitY(gv_aaU[4]) + GetRandomReal(400, 600),
          0.0
        )
      );
      GroupAddUnit(
        gv_anT,
        CreateUnit(
          Player(11),
          "u001",
          GetUnitX(gv_aaU[4]) - GetRandomReal(400, 600),
          GetUnitY(gv_aaU[4]) - GetRandomReal(400, 600),
          0.0
        )
      );
    }
    if (LoadInteger(gv_abL, 0, GetHandleId(gv_anS)) == 25) {
      DisplayTimedTextToForce(
        gv_alq,
        5,
        "|cff00ff00Oceanus:|r Come forth thundering tides!"
      );
      SetUnitAnimation(gv_aaU[4], "death");
      GroupClear(gv_abu);
      GroupEnumUnitsInRange(
        gv_abu,
        GetUnitX(gv_aaU[4]),
        GetUnitY(gv_aaU[4]),
        400,
        Condition(f_aNQ)
      );
      do {
        bj_ghoul[23] = FirstOfGroup(gv_abu);
        if (bj_ghoul[23] == null) {
          break;
        }
        f_aNg(
          bj_ghoul[23],
          "Abilities\\Weapons\\ZigguratFrostMissile\\ZigguratFrostMissile.mdl",
          500,
          14,
          0.2,
          0.02
        );
        DestroyEffect(
          AddSpecialEffectTarget(
            "Objects\\Spawnmodels\\NightElf\\NECancelDeath\\NECancelDeath.mdl",
            bj_ghoul[23],
            "head"
          )
        );
        UnitDamageTarget(
          gv_aaU[4],
          bj_ghoul[23],
          100,
          false,
          false,
          ATTACK_TYPE_NORMAL,
          DAMAGE_TYPE_UNIVERSAL,
          null
        );
        GroupRemoveUnit(gv_abu, bj_ghoul[23]);
      } while (true);
      f_aIl(gv_abu);
      SaveInteger(gv_abL, 0, GetHandleId(gv_anS), 0);
    }
    if (!RectContainsUnit(gv_ael, gv_aaU[4])) {
      gv_acu = GetUnitName(gv_aaU[4]);
      SetUnitPosition(
        gv_aaU[4],
        LoadInteger(gv_abH, gv_act, StringHash(S2S(gv_acu + "_X"))),
        LoadInteger(gv_abH, gv_act, StringHash(S2S(gv_acu + "_Y")))
      );
    }
    if (f_aNx(gv_ael) < 1) {
      PauseTimer(gv_anS);
      ForGroup(gv_anT, f_aNR);
      GroupClear(gv_anT);
      f_aBS(1, gv_aaU[4], gv_ael, gv_aiz);
    }
  }
}
function f_bqb() {
  DisplayTimedTextToForce(
    gv_alq,
    5,
    "|cff00ff00Oceanus:|r Imbecile, you are in my domain now. Death shall come swiftly upon these waves."
  );
  TimerStart(gv_anS, 1, true, f_bqa);
  SaveInteger(gv_abL, 0, GetHandleId(gv_anS), 0);
  DisableTrigger(gv_aiz);
}
function f_bqc() {
  if (GetWidgetLife(GetEnumUnit()) > 0.405) {
    IssuePointOrderById(
      GetEnumUnit(),
      851986,
      GetRectCenterX(gv_aeF),
      GetRectCenterY(gv_aeF)
    );
  } else {
    GroupRemoveUnit(gv_anX, GetEnumUnit());
  }
}
function f_bqd() {
  ForGroup(gv_anX, f_aNR);
  GroupClear(gv_anX);
  gv_anV = 200;
  SetUnitScalePercent(gv_aaU[5], gv_anV, gv_anV, gv_anV);
  SetHeroStr(gv_aaU[5], 25, false);
  PauseTimer(gv_anU);
  DisableTrigger(gv_anW);
  if (GetWidgetLife(gv_ako) > 0.405) {
    SetUnitState(gv_ako, UNIT_STATE_LIFE, 999999);
    SetUnitState(gv_ako, UNIT_STATE_MANA, 999999);
  } else {
    gv_ako = CreateUnit(
      Player(10),
      "n007",
      LoadInteger(gv_abH, gv_act, StringHash(S2S(gv_acu + "_X"))),
      LoadInteger(gv_abH, gv_act, StringHash(S2S(gv_acu + "_Y"))),
      0.0
    );
  }
  gv_acu = GetUnitName(gv_ako);
  SetUnitPosition(
    gv_ako,
    LoadInteger(gv_abH, gv_act, StringHash(S2S(gv_acu + "_X"))),
    LoadInteger(gv_abH, gv_act, StringHash(S2S(gv_acu + "_Y")))
  );
  SetUnitFacing(
    gv_ako,
    LoadInteger(gv_abH, gv_act, StringHash(S2S(gv_acu + "_A")))
  );
  if (GetWidgetLife(gv_akp) > 0.405) {
    SetUnitState(gv_akp, UNIT_STATE_LIFE, 999999);
    SetUnitState(gv_akp, UNIT_STATE_MANA, 999999);
  } else {
    gv_akp = CreateUnit(
      Player(10),
      "n00I",
      LoadInteger(gv_abH, gv_act, StringHash(S2S(gv_acu + "_X"))),
      LoadInteger(gv_abH, gv_act, StringHash(S2S(gv_acu + "_Y"))),
      0.0
    );
  }
  gv_acu = GetUnitName(gv_akp);
  SetUnitPosition(
    gv_akp,
    LoadInteger(gv_abH, gv_act, StringHash(S2S(gv_acu + "_X"))),
    LoadInteger(gv_abH, gv_act, StringHash(S2S(gv_acu + "_Y")))
  );
  SetUnitFacing(
    gv_akp,
    LoadInteger(gv_abH, gv_act, StringHash(S2S(gv_acu + "_A")))
  );
  f_aBS(1, gv_aaU[5], gv_aez, gv_aiA);
}
function f_bqe() {
  if (GetWidgetLife(gv_aaU[5]) < 0.406) {
    DisplayTimedTextToForce(
      gv_alq,
      5,
      "|cff00ff00Rhea:|r Chronos, why have you forsaken me my husband?"
    );
    ForGroup(gv_anX, f_aNR);
    if (GetWidgetLife(gv_ako) > 0.405) {
      KillUnit(gv_ako);
    }
    if (GetWidgetLife(gv_akp) > 0.405) {
      KillUnit(gv_akp);
    }
    f_aIM(gv_anU);
  } else {
    SaveInteger(
      gv_abL,
      0,
      GetHandleId(gv_anU),
      LoadInteger(gv_abL, 0, GetHandleId(gv_anU)) + 1
    );
    if (LoadInteger(gv_abL, 0, GetHandleId(gv_anU)) == 5) {
      GroupAddUnit(gv_anX, CreateUnit(Player(11), "u002", -9344, -416, 0.0));
      ForGroup(gv_anX, f_bqc);
    }
    if (LoadInteger(gv_abL, 0, GetHandleId(gv_anU)) == 10) {
      GroupAddUnit(gv_anX, CreateUnit(Player(11), "u002", -8724, -1380, 0.0));
      ForGroup(gv_anX, f_bqc);
    }
    if (LoadInteger(gv_abL, 0, GetHandleId(gv_anU)) == 15) {
      GroupAddUnit(gv_anX, CreateUnit(Player(11), "u002", -10434, -2015, 0.0));
      ForGroup(gv_anX, f_bqc);
      SaveInteger(gv_abL, 0, GetHandleId(gv_anU), 0);
    }
    if (!RectContainsUnit(gv_aez, gv_aaU[5])) {
      gv_acu = GetUnitName(gv_aaU[5]);
      SetUnitPosition(
        gv_aaU[5],
        LoadInteger(gv_abH, gv_act, StringHash(S2S(gv_acu + "_X"))),
        LoadInteger(gv_abH, gv_act, StringHash(S2S(gv_acu + "_Y")))
      );
    }
    if (!RectContainsUnit(gv_aez, gv_ako)) {
      gv_acu = GetUnitName(gv_ako);
      SetUnitPosition(
        gv_ako,
        LoadInteger(gv_abH, gv_act, StringHash(S2S(gv_acu + "_X"))),
        LoadInteger(gv_abH, gv_act, StringHash(S2S(gv_acu + "_Y")))
      );
    }
    if (!RectContainsUnit(gv_aez, gv_akp)) {
      gv_acu = GetUnitName(gv_akp);
      SetUnitPosition(
        gv_akp,
        LoadInteger(gv_abH, gv_act, StringHash(S2S(gv_acu + "_X"))),
        LoadInteger(gv_abH, gv_act, StringHash(S2S(gv_acu + "_Y")))
      );
    }
    ForGroup(gv_anX, f_bqc);
    if (f_aNx(gv_aez) < 1) {
      f_bqd();
    }
  }
}
function f_bqf() {
  DisplayTimedTextToForce(
    gv_alq,
    5,
    "|cff00ff00Rhea:|r I am Rhea, mother of the Gods, you cannot defeat me.\n          I will slay you where you stand, mortal!"
  );
  SaveInteger(gv_abL, 0, GetHandleId(gv_anU), 0);
  EnableTrigger(gv_anW);
  TimerStart(gv_anU, 1, true, f_bqe);
  DisableTrigger(gv_aiA);
}
function f_bqg() {
  return IsUnitInGroup(GetEnteringUnit(), gv_anX);
}
function f_bqh() {
  var lv_bqi = GetTriggerUnit();
  GroupRemoveUnit(gv_anX, lv_bqi);
  SetUnitExploded(lv_bqi, true);
  KillUnit(lv_bqi);
  gv_anV = gv_anV + 20;
  SetUnitScalePercent(gv_aaU[5], gv_anV, gv_anV, gv_anV);
  SetHeroStr(gv_aaU[5], GetHeroStr(gv_aaU[5], false) + 50, false);
  f_aLz(
    AddSpecialEffectTarget(
      "Abilities\\Spells\\NightElf\\Taunt\\TauntCaster.mdl",
      gv_aaU[5],
      "origin"
    ),
    1
  );
  DisplayTimedTextToForce(
    gv_alq,
    5,
    "|cff00ff00Rhea:|r I feel the power flowing through me!"
  );
}
function f_bqj() {
  var lv_bqk = GetUnitFacing(gv_aaU[6]);
  var lv_bql = CreateUnit(
    Player(11),
    "h007",
    GetUnitX(gv_aaU[6]),
    GetUnitY(gv_aaU[6]),
    lv_bqk
  );
  var lv_bqm = f_aHH(
    lv_bql,
    GetUnitX(gv_aaU[6]) + CosBJ(lv_bqk) * 600,
    GetUnitY(gv_aaU[6]) + SinBJ(lv_bqk) * 600,
    17.5,
    0.02
  );
  gv_avE[lv_bqm] = 0;
  lv_bql = null;
  return lv_bqm;
}
function f_bqn() {
  var lv_bqo = GetExpiredTimer();
  var lv_bqp = LoadInteger(gv_abL, 0, GetHandleId(lv_bqo));
  gv_avJ[lv_bqp] = gv_avJ[lv_bqp] + 0.1;
  gv_avK[lv_bqp] = gv_avK[lv_bqp] + 0.02;
  SetUnitScale(gv_avI[lv_bqp], gv_avK[lv_bqp], gv_avK[lv_bqp], gv_avK[lv_bqp]);
  if (gv_avJ[lv_bqp] > 3 || GetWidgetLife(gv_avI[lv_bqp]) < 0.406) {
    f_aCw(lv_bqp);
    f_aIM(lv_bqo);
  }
  lv_bqo = null;
}
function f_bqq(lv_bqr) {
  var lv_bqs = f_aCu();
  var lv_bqt = f_aIL();
  gv_avI[lv_bqs] = lv_bqr;
  gv_avK[lv_bqs] = 0.1;
  gv_avJ[lv_bqs] = 0.1;
  SaveInteger(gv_abL, 0, GetHandleId(lv_bqt), lv_bqs);
  TimerStart(lv_bqt, 0.1, true, f_bqn);
  lv_bqt = null;
  return lv_bqs;
}
function f_bqu() {
  if (GetWidgetLife(gv_aaU[6]) < 0.406) {
    DisplayTimedTextToForce(
      gv_alq,
      5,
      "|cff00ff00Thea:|r ...Is this my legend? Even the deadly forest and shining sun could not stop you, Champion.\n           I will return to the sky..."
    );
    f_aIM(gv_anY);
    ForGroup(gv_anZ, f_aNR);
  } else {
    SaveInteger(
      gv_abL,
      0,
      GetHandleId(gv_anY),
      LoadInteger(gv_abL, 0, GetHandleId(gv_anY)) + 1
    );
    if (LoadInteger(gv_abL, 0, GetHandleId(gv_anY)) == 10) {
      DisplayTimedTextToForce(gv_alq, 3, "|cffff8a08Roots shatter the ground");
      f_bqj();
    }
    if (LoadInteger(gv_abL, 0, GetHandleId(gv_anY)) == 20) {
      DisplayTimedTextToForce(
        gv_alq,
        5,
        "|cff00ff00Thea:|r Forest bend to my will! Root and branch, limb and vine, ensnare and pierce the intruder!"
      );
      GroupClear(gv_abu);
      GroupEnumUnitsInRect(gv_abu, gv_aeZ, Condition(f_aNQ));
      do {
        gv_alv = FirstOfGroup(gv_abu);
        if (gv_alv == null) {
          break;
        }
        SetUnitPosition(gv_aoa, GetUnitX(gv_alv), GetUnitY(gv_alv));
        IssueTargetOrderById(gv_aoa, 852527, gv_alv);
        bj_ghoul[26] = CreateUnit(
          Player(11),
          "hpea",
          GetUnitX(gv_alv),
          GetUnitY(gv_alv),
          0.0
        );
        SetUnitScale(bj_ghoul[26], 2, 2, 2);
        f_aLz(
          AddSpecialEffectTarget(
            "Abilities\\Weapons\\TreantMissile\\TreantMissile.mdl",
            bj_ghoul[26],
            "origin"
          ),
          1
        );
        GroupRemoveUnit(gv_abu, gv_alv);
      } while (true);
      f_aIl(gv_abu);
    }
    if (LoadInteger(gv_abL, 0, GetHandleId(gv_anY)) == 30) {
      DisplayTimedTextToForce(
        gv_alq,
        3,
        "|cffff8a08You hear something breaking up the ground"
      );
      bj_ghoul[26] = CreateUnit(
        Player(11),
        "e004",
        GetUnitX(gv_aaU[6]) + GetRandomReal(-200, 200),
        GetUnitY(gv_aaU[6]) + GetRandomReal(-200, 200),
        0.0
      );
      SetUnitInvulnerable(bj_ghoul[26], true);
      GroupAddUnit(gv_anZ, bj_ghoul[26]);
      f_bqq(bj_ghoul[26]);
      SetUnitExploded(bj_ghoul[26], true);
      SaveInteger(gv_abL, 0, GetHandleId(gv_anY), 0);
    }
    if (!RectContainsUnit(gv_aeZ, gv_aaU[6])) {
      gv_acu = GetUnitName(gv_aaU[6]);
      SetUnitPosition(
        gv_aaU[6],
        LoadInteger(gv_abH, gv_act, StringHash(S2S(gv_acu + "_X"))),
        LoadInteger(gv_abH, gv_act, StringHash(S2S(gv_acu + "_Y")))
      );
    }
    if (f_aNx(gv_aeZ) < 1) {
      PauseTimer(gv_anY);
      ForGroup(gv_anZ, f_aNR);
      GroupClear(gv_anZ);
      f_aBS(1, gv_aaU[6], gv_aeZ, gv_aiB);
    }
  }
}
function f_bqv() {
  DisplayTimedTextToForce(
    gv_alq,
    10,
    "|cff00ff00Thea:|r Legend has it an ancient and terrible Deity dwells deep in the heart of the forest...\n         Have you come looking for me, Champion of Greece?\n         You shall not escape these woods alive. "
  );
  SaveInteger(gv_abL, 0, GetHandleId(gv_anY), 0);
  TimerStart(gv_anY, 1, true, f_bqu);
  DisableTrigger(gv_aiB);
}
function f_bqw() {
  if (
    GetWidgetLife(gv_aaU[6]) > 0.405 &&
    IsUnitInGroup(GetTriggerUnit(), gv_anZ)
  ) {
    SetWidgetLife(gv_aaU[6], GetWidgetLife(gv_aaU[6]) + 500);
    DisplayTimedTextToForce(
      gv_alq,
      5,
      "|cff00ff00Thea:|r How dare you slay my child!? \n        Return to the earth and let the shining rays grant me your energy!"
    );
    f_aLz(
      AddSpecialEffectTarget(
        "Abilities\\Spells\\Human\\ReviveHuman\\ReviveHuman.mdl",
        gv_aaU[6],
        "origin"
      ),
      1
    );
  }
  return false;
}
function f_bqx() {
  var lv_bqy = CreateTrigger();
  TriggerRegisterAnyUnitEventBJ(lv_bqy, EVENT_PLAYER_UNIT_DEATH);
  TriggerAddCondition(lv_bqy, Condition(f_bqw));
  gv_aiB = CreateTrigger();
  TriggerRegisterEnterRectSimple(gv_aiB, gv_aeZ);
  TriggerAddCondition(gv_aiB, Condition(f_aNP));
  TriggerAddAction(gv_aiB, f_bqv);
  gv_aoa = CreateUnit(Player(11), "hpea", 0.0, 0.0, 0.0);
  UnitAddAbility(gv_aoa, "A07U");
  UnitAddAbility(gv_aoa, "A07V");
  gv_anY = f_aIL();
  gv_anZ = f_aIn();
  SuspendHeroXP(gv_aaU[6], true);
  Preload(
    "Abilities\\Spells\\NightElf\\EntanglingRoots\\EntanglingRootsTarget.mdl"
  );
  Preload("Abilities\\Weapons\\TreantMissile\\TreantMissile.mdl");
  Preload("Abilities\\Spells\\Human\\ReviveHuman\\ReviveHuman.mdl");
}
function f_bqz(lv_bqA) {
  DisplayTimedTextToForce(
    gv_alq,
    5,
    "|cff00ff00Gaea:|r Searing flames, heat and lava come to my aid!"
  );
  f_aLz(
    AddSpecialEffectTarget(
      "Abilities\\Spells\\Other\\Incinerate\\FireLordDeathExplode.mdl",
      lv_bqA,
      "origin"
    ),
    1
  );
  UnitDamageTarget(
    gv_aaU[7],
    lv_bqA,
    1250,
    false,
    true,
    ATTACK_TYPE_NORMAL,
    DAMAGE_TYPE_UNIVERSAL,
    null
  );
}
function f_bqB() {
  if (GetWidgetLife(gv_aaU[7]) < 0.406) {
    if (GetWidgetLife(gv_aob) > 0.405) {
      KillUnit(gv_aob);
    }
    DisplayTimedTextToForce(
      gv_alq,
      5,
      "|cff00ff00Gaea:|r I am the earth, and with me goes the fate of the land...\n          soon you shall all perish in the flames of vengeance."
    );
    f_aIM(gv_aoc);
  } else {
    if (
      GetWidgetLife(gv_aob) < 0.405 &&
      GetUnitLifePercent(gv_aaU[7]) < 100 - 25 * (gv_aaL.getInt(7) + 1)
    ) {
      SaveInteger(gv_abL, 0, GetHandleId(gv_aoc), 29);
      gv_aaL[7] = gv_aaL.getInt(7) + 1;
    }
    SaveInteger(
      gv_abL,
      0,
      GetHandleId(gv_aoc),
      LoadInteger(gv_abL, 0, GetHandleId(gv_aoc)) + 1
    );
    if (LoadInteger(gv_abL, 0, GetHandleId(gv_aoc)) == 1) {
      gv_aob = CreateUnitAtLoc(
        Player(11),
        gv_aod.getInt(GetUnitUserData(gv_aaU[7])),
        gv_all[GetRandomInt(80, 85)],
        0.0
      );
      UnitApplyTimedLife(gv_aob, "BTLF", 30);
      if (GetUnitTypeId(gv_aob) == "u003") {
        UnitRemoveAbility(gv_aaU[7], "Alit");
        UnitAddAbility(gv_aaU[7], "A085");
      }
      if (GetUnitTypeId(gv_aob) == "u004") {
        UnitAddAbility(gv_aaU[7], "A086");
        UnitAddAbility(gv_aaU[7], "A087");
      }
      DisplayTimedTextToForce(
        gv_alq,
        5,
        "|cff00ff00Gaea:|r Arise mighty " +
          GetUnitName(gv_aob) +
          " and give me strength!"
      );
      SetUnitUserData(gv_aaU[7], GetUnitUserData(gv_aaU[7]) + 1);
      if (GetUnitUserData(gv_aaU[7]) > 3) {
        SetUnitUserData(gv_aaU[7], 0);
      }
    }
    if (ModuloInteger(LoadInteger(gv_abL, 0, GetHandleId(gv_aoc)), 5) == 0) {
      GroupClear(gv_abu);
      GroupEnumUnitsInRange(
        gv_abu,
        GetUnitX(gv_aaU[7]),
        GetUnitY(gv_aaU[7]),
        275,
        Condition(f_aNQ)
      );
      bj_groupCountUnits = 0;
      ForGroup(gv_abu, CountUnitsInGroupEnum);
      f_aIl(gv_abu);
      if (bj_groupCountUnits == 0) {
        GroupClear(gv_abu);
        bj_forLoopAIndex = 0;
        do {
          if (bj_forLoopAIndex > 7) {
            break;
          }
          if (
            RectContainsUnit(gv_adJ, gv_ale[bj_forLoopAIndex]) &&
            GetWidgetLife(gv_ale[bj_forLoopAIndex]) > 0.405
          ) {
            GroupAddUnit(gv_abu, gv_ale[bj_forLoopAIndex]);
          }
          bj_forLoopAIndex = bj_forLoopAIndex + 1;
        } while (true);
        bj_groupRandomConsidered = 0;
        bj_groupRandomCurrentPick = null;
        ForGroup(gv_abu, GroupPickRandomUnitEnum);
        f_aIl(gv_abu);
        f_bqz(bj_groupRandomCurrentPick);
      }
    }
    if (
      ModuloInteger(LoadInteger(gv_abL, 0, GetHandleId(gv_aoc)), 3) == 0 &&
      GetUnitTypeId(gv_aob) == "u004"
    ) {
      GroupClear(gv_abu);
      GroupEnumUnitsInRect(gv_abu, gv_adJ, Condition(f_aNQ));
      bj_groupRandomConsidered = 0;
      bj_groupRandomCurrentPick = null;
      ForGroup(gv_abu, GroupPickRandomUnitEnum);
      f_aIl(gv_abu);
      DisplayTimedTextToForce(
        gv_alq,
        5,
        "|cff00ff00Gaea:|r Searing lightning immobilize my foe!"
      );
      UnitAddAbility(gv_aaU[7], "A088");
      UnitAddAbility(gv_aaU[7], "A089");
      IssueTargetOrderById(gv_aaU[7], 852230, bj_groupRandomCurrentPick);
      IssueTargetOrderById(gv_aaU[7], 852075, bj_groupRandomCurrentPick);
      UnitDamageTarget(
        gv_aaU[7],
        bj_groupRandomCurrentPick,
        300,
        true,
        true,
        ATTACK_TYPE_NORMAL,
        DAMAGE_TYPE_UNIVERSAL,
        null
      );
      if (GetUnitState(bj_groupRandomCurrentPick, UNIT_STATE_MANA) > 1) {
        if (GetUnitState(bj_groupRandomCurrentPick, UNIT_STATE_MANA) > 300) {
          UnitDamageTarget(
            gv_aaU[7],
            bj_groupRandomCurrentPick,
            300,
            false,
            false,
            ATTACK_TYPE_NORMAL,
            DAMAGE_TYPE_UNIVERSAL,
            null
          );
          f_aLR(
            null,
            "-" + I2S(f_aMn(300)),
            128,
            255,
            0,
            GetUnitX(bj_groupRandomCurrentPick),
            GetUnitY(bj_groupRandomCurrentPick),
            0.029,
            0.0,
            3,
            10
          );
        } else {
          UnitDamageTarget(
            gv_aaU[7],
            bj_groupRandomCurrentPick,
            GetUnitState(bj_groupRandomCurrentPick, UNIT_STATE_MANA),
            false,
            false,
            ATTACK_TYPE_MAGIC,
            DAMAGE_TYPE_MAGIC,
            null
          );
          f_aLR(
            null,
            "-" +
              I2S(
                f_aMn(GetUnitState(bj_groupRandomCurrentPick, UNIT_STATE_MANA))
              ),
            128,
            255,
            0,
            GetUnitX(bj_groupRandomCurrentPick),
            GetUnitY(bj_groupRandomCurrentPick),
            0.029,
            0.0,
            3,
            10
          );
        }
        SetUnitState(
          bj_groupRandomCurrentPick,
          UNIT_STATE_MANA,
          GetUnitState(bj_groupRandomCurrentPick, UNIT_STATE_MANA) - 300
        );
      }
      UnitRemoveAbility(gv_aaU[7], "A088");
      UnitRemoveAbility(gv_aaU[7], "A089");
    }
    if (LoadInteger(gv_abL, 0, GetHandleId(gv_aoc)) == 30) {
      SaveInteger(gv_abL, 0, GetHandleId(gv_aoc), 0);
    }
    if (!RectContainsUnit(gv_adJ, gv_aaU[7])) {
      gv_acu = GetUnitName(gv_aaU[7]);
      SetUnitPosition(
        gv_aaU[7],
        LoadInteger(gv_abH, gv_act, StringHash(S2S(gv_acu + "_X"))),
        LoadInteger(gv_abH, gv_act, StringHash(S2S(gv_acu + "_Y")))
      );
    }
    if (f_aNx(gv_adJ) < 1) {
      if (GetWidgetLife(gv_aob) > 0.405) {
        KillUnit(gv_aob);
      }
      PauseTimer(gv_aoc);
      f_aBS(1, gv_aaU[7], gv_adJ, gv_aiC);
      gv_aaL[7] = 0;
    }
  }
}
function f_bqC() {
  DisplayTimedTextToForce(
    gv_alq,
    5,
    "|cff00ff00Gaea:|r You stand on hallowed ground, brave warrior. \n          But I am the Earth, and you cannot defeat me here."
  );
  SaveInteger(gv_abL, 0, GetHandleId(gv_aoc), 0);
  SetUnitUserData(gv_aaU[7], 0);
  f_bqz(GetTriggerUnit());
  TimerStart(gv_aoc, 1, true, f_bqB);
  gv_aaL[7] = 0;
  DisableTrigger(gv_aiC);
}
function f_bqD() {
  if (GetTriggerUnit() == gv_aob && GetWidgetLife(gv_aaU[7]) > 0.405) {
    if (GetUnitTypeId(gv_aob) == "u003") {
      UnitAddAbility(gv_aaU[7], "Alit");
      UnitRemoveAbility(gv_aaU[7], "A085");
    }
    if (GetUnitTypeId(gv_aob) == "u004") {
      UnitRemoveAbility(gv_aaU[7], "A086");
      UnitRemoveAbility(gv_aaU[7], "A087");
    }
  }
  return false;
}
function f_bqE() {
  var lv_bqF = Atan2(
    GetUnitY(GetEnumUnit()) - GetUnitY(gv_aof),
    GetUnitX(GetEnumUnit()) - GetUnitX(gv_aof)
  );
  var lv_bqG =
    f_aMe(
      GetUnitX(gv_aof),
      GetUnitY(gv_aof),
      GetUnitX(GetEnumUnit()),
      GetUnitY(GetEnumUnit())
    ) - 5;
  var lv_bqH = GetUnitX(gv_aof) + lv_bqG * Cos(lv_bqF);
  var lv_bqI = GetUnitY(gv_aof) + lv_bqG * Sin(lv_bqF);
  SetUnitPosition(GetEnumUnit(), lv_bqH, lv_bqI);
  PauseUnit(GetEnumUnit(), true);
  IssueImmediateOrderById(GetEnumUnit(), 851972);
  PauseUnit(GetEnumUnit(), false);
  UnitDamageTarget(
    gv_aof,
    GetEnumUnit(),
    GetWidgetLife(GetEnumUnit()) * 0.002,
    false,
    false,
    ATTACK_TYPE_CHAOS,
    DAMAGE_TYPE_UNIVERSAL,
    null
  );
}
function f_bqJ() {
  var lv_bqK = GetExpiredTimer();
  if (GetWidgetLife(gv_aof) < 0.406) {
    f_aIM(lv_bqK);
    GroupClear(gv_abu);
    GroupEnumUnitsInRange(
      gv_abu,
      GetUnitX(gv_aof),
      GetUnitY(gv_aof),
      400,
      Condition(f_aNQ)
    );
    do {
      gv_alv = FirstOfGroup(gv_abu);
      if (gv_alv == null) {
        break;
      }
      UnitDamageTarget(
        gv_aof,
        gv_alv,
        500,
        false,
        false,
        ATTACK_TYPE_CHAOS,
        DAMAGE_TYPE_UNIVERSAL,
        null
      );
      GroupRemoveUnit(gv_abu, gv_alv);
    } while (true);
    f_aIl(gv_abu);
  } else {
    GroupClear(gv_abu);
    GroupEnumUnitsInRect(gv_abu, gv_adm, Condition(f_aNQ));
    ForGroup(gv_abu, f_bqE);
    f_aIl(gv_abu);
  }
  lv_bqK = null;
}
function f_bqL() {
  var lv_bqM = GetExpiredTimer();
  if (GetWidgetLife(gv_aoh) < 0.406) {
    f_aIM(lv_bqM);
    PauseUnit(gv_aog, false);
    ShowUnit(gv_aog, true);
    DestroyEffect(gv_aoi);
    if (GetUnitUserData(gv_aoh) == 1) {
      SetWidgetLife(gv_aog, 2000);
    }
  } else {
    SaveInteger(
      gv_abL,
      0,
      GetHandleId(lv_bqM),
      LoadInteger(gv_abL, 0, GetHandleId(lv_bqM)) - 1
    );
    f_aLR(
      null,
      I2S(LoadInteger(gv_abL, 0, GetHandleId(lv_bqM))) + "!",
      255,
      255,
      255,
      GetUnitX(gv_aog),
      GetUnitY(gv_aog),
      0.077,
      0.0,
      3,
      12.5
    );
    if (
      GetWidgetLife(gv_aog) >
      GetUnitState(gv_aog, UNIT_STATE_MAX_LIFE) * 0.1
    ) {
      UnitDamageTarget(
        gv_aaU[8],
        gv_aog,
        GetUnitState(gv_aog, UNIT_STATE_MAX_LIFE) * 0.1,
        false,
        false,
        ATTACK_TYPE_CHAOS,
        DAMAGE_TYPE_UNIVERSAL,
        null
      );
    } else {
      if (GetUnitUserData(gv_aoh) != 1) {
        SetUnitUserData(gv_aoh, 1);
        f_aLR(
          null,
          "Your ally is on the verge of death but is still clinging to life!",
          255,
          255,
          255,
          GetUnitX(gv_aog),
          GetUnitY(gv_aog),
          0.034,
          0.0,
          5,
          12.5
        );
      }
    }
    if (LoadInteger(gv_abL, 0, GetHandleId(lv_bqM)) < 1) {
      f_aIM(lv_bqM);
      PauseUnit(gv_aog, false);
      ShowUnit(gv_aog, true);
      KillUnit(gv_aog);
      DisplayTimedTextToForce(
        gv_alq,
        5,
        "|cff00ff00Cronus:|r Be reincarnated my new found warrior!"
      );
      GroupAddUnit(
        gv_aoj,
        CreateUnit(Player(11), "n00J", GetUnitX(gv_aoh), GetUnitY(gv_aoh), 0.0)
      );
      KillUnit(gv_aoh);
      DestroyEffect(gv_aoi);
    }
  }
}
function f_bqN() {
  if (GetWidgetLife(gv_aaU[8]) < 0.406) {
    DisplayTimedTextToForce(
      gv_alq,
      5,
      "|cff00ff00Cronus:|r Like the sands of an hourglass, I shall last forever.\n            You have not seen the last of me, mortal..."
    );
    f_aIM(gv_aoe);
    if (GetWidgetLife(gv_aof) > 0.405) {
      KillUnit(gv_aof);
    }
    if (GetWidgetLife(gv_aoh) > 0.405) {
      KillUnit(gv_aoh);
    }
    ForGroup(gv_aoj, f_aNR);
    f_aIo(gv_aoj);
    f_aIl(gv_aoj);
  } else {
    SaveInteger(
      gv_abL,
      0,
      GetHandleId(gv_aoe),
      LoadInteger(gv_abL, 0, GetHandleId(gv_aoe)) + 1
    );
    if (LoadInteger(gv_abL, 0, GetHandleId(gv_aoe)) == 3) {
      DisplayTimedTextToForce(
        gv_alq,
        5,
        "|cff00ff00Cronus:|r May the fabrics of time pull you to your demise!"
      );
    }
    if (LoadInteger(gv_abL, 0, GetHandleId(gv_aoe)) == 5) {
      GroupClear(gv_abu);
      GroupEnumUnitsInRect(gv_abu, gv_adn, Condition(f_aNQ));
      bj_groupRandomConsidered = 0;
      bj_groupRandomCurrentPick = null;
      ForGroup(gv_abu, GroupPickRandomUnitEnum);
      f_aIl(gv_abu);
      gv_aof = CreateUnit(
        Player(11),
        "u005",
        RMaxBJ(GetUnitX(bj_groupRandomCurrentPick), 13440),
        GetUnitY(bj_groupRandomCurrentPick),
        0.0
      );
      UnitApplyTimedLife(gv_aof, "BTLF", 5);
      TimerStart(f_aIL(), 0.1, true, f_bqJ);
    }
    if (LoadInteger(gv_abL, 0, GetHandleId(gv_aoe)) == 10) {
      GroupClear(gv_abu);
      GroupEnumUnitsInRect(gv_abu, gv_adn, Condition(f_aNQ));
      bj_groupRandomConsidered = 0;
      bj_groupRandomCurrentPick = null;
      ForGroup(gv_abu, GroupPickRandomUnitEnum);
      f_aIl(gv_abu);
      gv_aog = bj_groupRandomCurrentPick;
      if (bj_groupRandomCurrentPick == null) {
        SetUnitState(
          gv_aaU[8],
          UNIT_STATE_LIFE,
          GetUnitState(gv_aaU[8], UNIT_STATE_LIFE) +
            GetUnitState(gv_aaU[8], UNIT_STATE_MAX_LIFE) * 0.3
        );
        DisplayTimedTextToForce(
          gv_alq,
          5,
          "|cff00ff00Cronus:|r failed to find a target and healed 30% instead"
        );
      } else {
        DisplayTimedTextToForce(
          gv_alq,
          5,
          "|cff00ff00Cronus:|r " +
            GetPlayerName(GetOwningPlayer(gv_aog)) +
            " your grave calls..."
        );
      }
    }
    if (LoadInteger(gv_abL, 0, GetHandleId(gv_aoe)) == 15) {
      DisplayTimedTextToForce(
        gv_alq,
        5,
        "|cff00ff00Cronus:|r You shall be reincarnated into my service!"
      );
      PauseUnit(gv_aog, true);
      ShowUnit(gv_aog, false);
      gv_aoh = CreateUnit(
        Player(11),
        "u006",
        GetUnitX(gv_aog),
        GetUnitY(gv_aog),
        0.0
      );
      gv_aoi = AddSpecialEffect(
        "Abilities\\Spells\\Undead\\UnholyAura\\UnholyAura.mdl",
        GetUnitX(gv_aoh),
        GetUnitY(gv_aoh)
      );
      bj_crippledTimer[10] = f_aIL();
      TimerStart(bj_crippledTimer[10], 1, true, f_bqL);
      f_aLR(
        null,
        "10!",
        255,
        255,
        255,
        GetUnitX(gv_aog),
        GetUnitY(gv_aog),
        0.077,
        0.0,
        3,
        12.5
      );
      SaveInteger(gv_abL, 0, GetHandleId(bj_crippledTimer[10]), 10);
    }
    if (LoadInteger(gv_abL, 0, GetHandleId(gv_aoe)) == 30) {
      SaveInteger(gv_abL, 0, GetHandleId(gv_aoe), 0);
    }
    if (!RectContainsUnit(gv_adm, gv_aaU[8])) {
      gv_acu = GetUnitName(gv_aaU[8]);
      SetUnitPosition(
        gv_aaU[8],
        LoadInteger(gv_abH, gv_act, StringHash(S2S(gv_acu + "_X"))),
        LoadInteger(gv_abH, gv_act, StringHash(S2S(gv_acu + "_Y")))
      );
    }
    if (f_aNx(gv_adm) < 1) {
      if (GetWidgetLife(gv_aof) > 0.405) {
        KillUnit(gv_aof);
      }
      if (GetWidgetLife(gv_aoh) > 0.405) {
        KillUnit(gv_aoh);
      }
      ForGroup(gv_aoj, f_aNR);
      PauseTimer(gv_aoe);
      f_aBS(1, gv_aaU[8], gv_adm, gv_aiD);
    }
  }
}
function f_bqO() {
  DisplayTimedTextToForce(
    gv_alq,
    5,
    "|cff00ff00Cronus:|r You have come far mortal, but your journey ends here! I am Cronus,\n             Father of Time and god of death. Your bones will litter the ground beneath me!"
  );
  SaveInteger(gv_abL, 0, GetHandleId(gv_aoe), 0);
  TimerStart(gv_aoe, 1, true, f_bqN);
  DisableTrigger(gv_aiD);
}
function f_bqP() {
  if (!IsUnitInGroup(GetEnumUnit(), gv_avL)) {
    GroupAddUnit(gv_avL, GetEnumUnit());
    GroupAddUnit(bj_randomSubGroupGroup, GetEnumUnit());
  }
}
function f_bqQ() {
  SetUnitX(GetEnumUnit(), GetUnitX(gv_alv));
  SetUnitY(GetEnumUnit(), GetUnitY(gv_alv));
  IssueImmediateOrderById(GetEnumUnit(), 851972);
}
function f_bqR() {
  GroupRemoveUnit(gv_avL, GetEnumUnit());
}
function f_bqS() {
  var lv_bqT = GetRandomInt(86, 90);
  var lv_bqU = CreateUnitAtLoc(Player(11), "h00H", gv_all[lv_bqT], 0.0);
  var lv_bqV = f_aHb(
    lv_bqU,
    GetLocationX(gv_all[lv_bqT + 5]),
    GetLocationY(gv_all[lv_bqT + 5]),
    15,
    0.02
  );
  gv_avM[lv_bqV] = lv_bqT + 5;
  gv_avN[lv_bqV] = f_aIn();
  lv_bqU = null;
  return lv_bqV;
}
function f_bqW() {
  DisplayTimedTextToPlayer(
    GetOwningPlayer(GetTriggerUnit()),
    0.0,
    0.0,
    10,
    S2S(gv_alf[77] + "Mystical magics push you back...")
  );
  f_aNg(
    GetTriggerUnit(),
    "Objects\\Spawnmodels\\Undead\\ImpaleTargetDust\\ImpaleTargetDust.mdl",
    200,
    15,
    0.1,
    0.02
  );
}
function f_bqX() {
  f_aLz(
    AddSpecialEffectTarget("MDX\\iceberg.mdx", GetEnumUnit(), "overhead"),
    1
  );
  UnitDamageTarget(
    gv_akj,
    GetEnumUnit(),
    1000,
    false,
    false,
    ATTACK_TYPE_NORMAL,
    DAMAGE_TYPE_UNIVERSAL,
    null
  );
}
function f_bqY() {
  if (GetWidgetLife(gv_akj) < 0.406) {
    DisplayTimedTextToForce(
      gv_alq,
      5,
      "|cffff8a08The Ice Queen has been alerted to your presence, expect her to give you a rather cold reception in her halls."
    );
    f_aIM(gv_aok);
    StartSound(gv_afP);
  } else {
    SaveInteger(
      gv_abL,
      0,
      GetHandleId(gv_aok),
      LoadInteger(gv_abL, 0, GetHandleId(gv_aok)) + 1
    );
    if (LoadInteger(gv_abL, 0, GetHandleId(gv_aok)) == 10) {
      DisplayTimedTextToForce(gv_alq, 5, "|cffff8a08Ice falls!");
      GroupClear(gv_abu);
      GroupEnumUnitsInRect(gv_abu, gv_afy, Condition(f_aNQ));
      ForGroup(gv_abu, f_bqX);
      f_aIl(gv_abu);
      SaveInteger(gv_abL, 0, GetHandleId(gv_aok), 0);
    }
    if (!RectContainsUnit(gv_afy, gv_akj)) {
      gv_acu = GetUnitName(gv_akj);
      SetUnitPosition(
        gv_akj,
        LoadInteger(gv_abH, gv_act, StringHash(S2S(gv_acu + "_X"))),
        LoadInteger(gv_abH, gv_act, StringHash(S2S(gv_acu + "_Y")))
      );
    }
    if (f_aNx(gv_afy) < 1) {
      PauseTimer(gv_aok);
      f_aBS(1, gv_akj, gv_afy, gv_aiH);
    }
  }
}
function f_bqZ() {
  DisplayTimedTextToForce(
    gv_alq,
    5,
    "|cffff8a08You have climbed the hill, now look ahead..."
  );
  StartSound(gv_afO);
  SaveInteger(gv_abL, 0, GetHandleId(gv_aok), 0);
  TimerStart(gv_aok, 1, true, f_bqY);
  DisableTrigger(gv_aiH);
}
function f_bra() {
  var lv_brb = GetExpiredTimer();
  var lv_brc = LoadInteger(gv_abL, 0, GetHandleId(lv_brb));
  IssuePointOrderById(gv_avR[lv_brc], 852488, gv_avS[lv_brc], gv_avT[lv_brc]);
  gv_avS[lv_brc] =
    gv_avS[lv_brc] + Cos(GetUnitFacing(gv_ajP) * bj_DEGTORAD) * 150;
  gv_avT[lv_brc] =
    gv_avT[lv_brc] + Sin(GetUnitFacing(gv_ajP) * bj_DEGTORAD) * 150;
  gv_avU[lv_brc] = gv_avU.getInt(lv_brc) + 1;
  if (gv_avU.getInt(lv_brc) > 5) {
    f_aIM(lv_brb);
    f_aCq(lv_brc);
  }
  lv_brb = null;
}
function f_brd() {
  var lv_bre = f_aCo();
  var lv_brf = f_aIL();
  SaveInteger(gv_abL, 0, GetHandleId(lv_brf), lv_bre);
  TimerStart(lv_brf, 1, true, f_bra);
  gv_avR[lv_bre] = CreateUnit(
    Player(11),
    gv_acf,
    GetUnitX(gv_ajP),
    GetUnitY(gv_ajP),
    0.0
  );
  UnitAddAbility(gv_avR[lv_bre], "A08J");
  gv_avS[lv_bre] =
    GetUnitX(gv_ajP) + Cos(GetUnitFacing(gv_ajP) * bj_DEGTORAD) * 100;
  gv_avT[lv_bre] =
    GetUnitY(gv_ajP) + Sin(GetUnitFacing(gv_ajP) * bj_DEGTORAD) * 100;
  gv_avU[lv_bre] = 0;
  lv_brf = null;
  return lv_bre;
}
function f_brg() {
  if (GetWidgetLife(gv_ajP) < 0.406) {
    DisplayTimedTextToForce(
      gv_alq,
      5,
      "|cffff8a08Flames burst ahead... a slope stands  before you. Take a quick walk?"
    );
    f_aLz(
      AddSpecialEffect(
        "Abilities\\Spells\\Human\\FlameStrike\\FlameStrike1.mdl",
        9505,
        -1140
      ),
      3
    );
    f_aLz(
      AddSpecialEffect(
        "Abilities\\Spells\\Human\\FlameStrike\\FlameStrike1.mdl",
        10168,
        -840
      ),
      3
    );
    f_aLz(
      AddSpecialEffect(
        "Abilities\\Spells\\Human\\FlameStrike\\FlameStrike1.mdl",
        9505,
        -500
      ),
      3
    );
    f_aIM(gv_aol);
  } else {
    SaveInteger(
      gv_abL,
      0,
      GetHandleId(gv_aol),
      LoadInteger(gv_abL, 0, GetHandleId(gv_aol)) + 1
    );
    if (LoadInteger(gv_abL, 0, GetHandleId(gv_aol)) == 10) {
      DisplayTimedTextToForce(
        gv_alq,
        5,
        "|cffff8a08You hear crackles of flame..."
      );
      f_brd();
      SaveInteger(gv_abL, 0, GetHandleId(gv_aol), 0);
    }
    if (!RectContainsUnit(gv_afJ, gv_ajP)) {
      gv_acu = GetUnitName(gv_ajP);
      SetUnitPosition(
        gv_ajP,
        LoadInteger(gv_abH, gv_act, StringHash(S2S(gv_acu + "_X"))),
        LoadInteger(gv_abH, gv_act, StringHash(S2S(gv_acu + "_Y")))
      );
    }
    if (f_aNx(gv_afJ) < 1) {
      PauseTimer(gv_aol);
      f_aBS(1, gv_ajP, gv_afJ, gv_aiI);
    }
  }
}
function f_brh() {
  DisplayTimedTextToForce(
    gv_alq,
    5,
    "|cffff8a08You hear the hissing of a dragon..."
  );
  StartSound(gv_afQ);
  SaveInteger(gv_abL, 0, GetHandleId(gv_aol), 0);
  TimerStart(gv_aol, 1, true, f_brg);
  DisableTrigger(gv_aiI);
}
function f_bri() {
  var lv_brj =
    450 -
    f_aMe(
      GetUnitX(GetEnumUnit()),
      GetUnitY(GetEnumUnit()),
      gv_ald[42],
      gv_ald[43]
    );
  if (lv_brj > 0) {
    f_aNg(
      GetEnumUnit(),
      "Objects\\Spawnmodels\\Undead\\ImpaleTargetDust\\ImpaleTargetDust.mdl",
      400,
      10,
      0.1,
      0.02
    );
  }
}
function f_brk() {
  var lv_brl;
  var lv_brm;
  var lv_brn;
  var lv_bro;
  var lv_brp = 0;
  do {
    if (lv_brp > 7) {
      break;
    }
    lv_brn = GetUnitX(gv_ale[lv_brp]);
    lv_bro = GetUnitY(gv_ale[lv_brp]);
    if (RectContainsCoords(gv_adb, lv_brn, lv_bro)) {
      lv_brn = lv_brn + 10 * Cos(GetUnitFacing(gv_ale[lv_brp]) * bj_DEGTORAD);
      lv_bro = lv_bro + 10 * Sin(GetUnitFacing(gv_ale[lv_brp]) * bj_DEGTORAD);
      SetUnitPosition(gv_ale[lv_brp], lv_brn, lv_bro);
    }
    lv_brp = lv_brp + 1;
  } while (true);
  if (LoadInteger(gv_abL, 0, GetHandleId(gv_aom)) > 7) {
    lv_brp = 0;
    do {
      if (lv_brp > 7) {
        break;
      }
      lv_brn = GetUnitX(gv_ale[lv_brp]);
      lv_bro = GetUnitY(gv_ale[lv_brp]);
      lv_brm = (450 - f_aMe(lv_brn, lv_bro, gv_ald[42], gv_ald[43])) / 20;
      if (lv_brm > 0) {
        lv_brl = bj_RADTODEG * Atan2(lv_bro - gv_ald[43], lv_brn - gv_ald[42]);
        lv_brn = lv_brn + lv_brm * Cos(lv_brl * bj_DEGTORAD);
        lv_bro = lv_bro + lv_brm * Sin(lv_brl * bj_DEGTORAD);
        SetUnitPosition(gv_ale[lv_brp], lv_brn, lv_bro);
      }
      lv_brp = lv_brp + 1;
    } while (true);
    lv_brn = GetUnitX(gv_ajX);
    lv_bro = GetUnitY(gv_ajX);
    lv_brm = (450 - f_aMe(lv_brn, lv_bro, gv_ald[42], gv_ald[43])) / 20;
    if (lv_brm > 0) {
      lv_brl = bj_RADTODEG * Atan2(lv_bro - gv_ald[43], lv_brn - gv_ald[42]);
      lv_brn = lv_brn + lv_brm * Cos(lv_brl * bj_DEGTORAD);
      lv_bro = lv_bro + lv_brm * Sin(lv_brl * bj_DEGTORAD);
      SetUnitPosition(gv_ajX, lv_brn, lv_bro);
    }
  }
}
function f_brq() {
  var lv_brr;
  var lv_brs;
  if (GetWidgetLife(gv_ajX) < 0.406) {
    DisplayTimedTextToForce(
      gv_alq,
      5,
      "|cffff8a08The cold feeling lifts away... an even larger gate opens..."
    );
    StartSound(gv_afP);
    f_aIM(gv_aom);
    f_aIM(gv_aon);
    ForGroup(gv_aoo, f_aNR);
    f_aIo(gv_aoo);
    if (gv_alh[128] != null) {
      DestroyEffect(gv_alh[128]);
    }
  } else {
    if (LoadInteger(gv_abL, 0, GetHandleId(gv_aom)) == 0) {
      gv_alv = CreateUnitAtLoc(
        Player(11),
        "n00H",
        gv_all[GetRandomInt(96, 98)],
        0
      );
      DestroyEffect(
        AddSpecialEffect(
          "Abilities\\Spells\\Demon\\DarkPortal\\DarkPortalTarget.mdl",
          GetUnitX(gv_alv),
          GetUnitY(gv_alv)
        )
      );
      IssuePointOrderById(gv_alv, gv_aas, GetUnitX(gv_ajX), GetUnitY(gv_ajX));
      GroupAddUnit(gv_aoo, gv_alv);
      GroupClear(gv_abu);
      GroupEnumUnitsInRange(
        gv_abu,
        GetUnitX(gv_ajX),
        GetUnitY(gv_ajX),
        1000,
        Condition(f_aNQ)
      );
      bj_groupRandomConsidered = 0;
      bj_groupRandomCurrentPick = null;
      ForGroup(gv_abu, GroupPickRandomUnitEnum);
      f_aIl(gv_abu);
      if (bj_groupRandomCurrentPick != null) {
        gv_aop = bj_groupRandomCurrentPick;
        SetUnitAnimation(gv_ajX, "spell");
        SetUnitFacingTimed(
          gv_ajX,
          Atan2(
            GetUnitY(gv_ajX) - GetUnitY(gv_aop),
            GetUnitX(gv_ajX) - GetUnitX(gv_aop)
          ) * bj_RADTODEG,
          1
        );
        f_aLz(
          AddSpecialEffect(
            "Abilities\\Spells\\Human\\ControlMagic\\ControlMagicTarget.mdl",
            GetUnitX(gv_aop),
            GetUnitY(gv_aop)
          ),
          3
        );
      } else {
        SaveInteger(gv_abL, 0, GetHandleId(gv_aom), 6);
      }
    }
    if (5 - LoadInteger(gv_abL, 0, GetHandleId(gv_aom)) > 0) {
      f_aLR(
        null,
        I2S(5 - LoadInteger(gv_abL, 0, GetHandleId(gv_aom))),
        200,
        100,
        50,
        GetUnitX(gv_aop),
        GetUnitY(gv_aop),
        0.077,
        0.0,
        1,
        15
      );
      SetUnitFacingTimed(
        gv_ajX,
        Atan2(
          GetUnitY(gv_ajX) - GetUnitY(gv_aop),
          GetUnitX(gv_ajX) - GetUnitX(gv_aop)
        ) * bj_RADTODEG,
        1
      );
    }
    if (LoadInteger(gv_abL, 0, GetHandleId(gv_aom)) == 4) {
      gv_ald[42] = GetUnitX(gv_aop);
      gv_ald[43] = GetUnitY(gv_aop);
      gv_alh[128] = AddSpecialEffect(
        "Abilities\\Spells\\Human\\FlameStrike\\FlameStrikeTarget.mdl",
        gv_ald[42],
        gv_ald[43]
      );
    }
    if (LoadInteger(gv_abL, 0, GetHandleId(gv_aom)) == 5) {
      DestroyEffect(gv_alh[128]);
      gv_alh[128] = AddSpecialEffect(
        "Units\\Demon\\Infernal\\InfernalBirth.mdl",
        gv_ald[42],
        gv_ald[43]
      );
      lv_brr = 0;
      do {
        if (lv_brr > 7) {
          break;
        }
        lv_brs =
          450 -
          f_aMe(
            GetUnitX(gv_ale[lv_brr]),
            GetUnitY(gv_ale[lv_brr]),
            gv_ald[42],
            gv_ald[43]
          );
        if (lv_brs > 0) {
          UnitDamageTarget(
            gv_ajX,
            gv_ale[lv_brr],
            lv_brs * 13,
            true,
            false,
            ATTACK_TYPE_NORMAL,
            DAMAGE_TYPE_MAGIC,
            WEAPON_TYPE_WHOKNOWS
          );
          f_aNg(
            gv_ale[lv_brr],
            "Objects\\Spawnmodels\\Undead\\ImpaleTargetDust\\ImpaleTargetDust.mdl",
            400,
            10,
            0.1,
            0.02
          );
        }
        lv_brr = lv_brr + 1;
      } while (true);
      lv_brs =
        450 - f_aMe(GetUnitX(gv_ajX), GetUnitY(gv_ajX), gv_ald[42], gv_ald[43]);
      if (lv_brs > 0) {
        f_aNg(
          gv_ajX,
          "Objects\\Spawnmodels\\Undead\\ImpaleTargetDust\\ImpaleTargetDust.mdl",
          400,
          10,
          0.1,
          0.02
        );
      }
      ForGroup(gv_aoo, f_bri);
    }
    SaveInteger(
      gv_abL,
      0,
      GetHandleId(gv_aom),
      LoadInteger(gv_abL, 0, GetHandleId(gv_aom)) + 1
    );
    if (LoadInteger(gv_abL, 0, GetHandleId(gv_aom)) > 7) {
      DestroyEffect(gv_alh[128]);
      SaveInteger(gv_abL, 0, GetHandleId(gv_aom), 0);
    }
  }
  if (f_aNx(gv_afx) == 0) {
    if (gv_alh[128] != null) {
      DestroyEffect(gv_alh[128]);
    }
    ForGroup(gv_aoo, f_aNR);
    PauseTimer(gv_aom);
    PauseTimer(gv_aon);
    f_aBS(1, gv_ajX, gv_afx, gv_aiJ);
  }
}
function f_brt() {
  DisplayTimedTextToForce(
    gv_alq,
    5,
    "|cffff8a08Magics are at work, an intense chill covers you..."
  );
  StartSound(gv_afN);
  SaveInteger(gv_abL, 0, GetHandleId(gv_aom), 0);
  TimerStart(gv_aom, 1, true, f_brq);
  TimerStart(gv_aon, 0.02, true, f_brk);
  DisableTrigger(gv_aiJ);
}
function f_bru() {
  if (GetWidgetLife(GetEnumUnit()) > 0.405) {
    IssuePointOrderById(
      GetEnumUnit(),
      gv_aas,
      GetUnitX(gv_aaU[9]) + GetRandomReal(-800, 800),
      GetUnitY(gv_aaU[9]) + GetRandomReal(-800, 800)
    );
  }
}
function f_brv() {
  f_aNg(
    GetEnumUnit(),
    "Objects\\Spawnmodels\\Undead\\ImpaleTargetDust\\ImpaleTargetDust.mdl",
    -200,
    10,
    0.1,
    0.02
  );
}
function f_brw() {
  var lv_brx = 0;
  var lv_bry;
  var lv_brz;
  var lv_brA;
  var lv_brB;
  if (LoadInteger(gv_abL, 0, GetHandleId(gv_aor)) == 1 && gv_aox < 490) {
    gv_aow = gv_aow + 15;
    gv_aox = gv_aox + 5;
    gv_aou = gv_aou + gv_aox * Cos(gv_aow * bj_DEGTORAD);
    gv_aov = gv_aov + gv_aox * Sin(gv_aow * bj_DEGTORAD);
    DestroyEffect(
      AddSpecialEffect(
        "Abilities\\Weapons\\FrostWyrmMissile\\FrostWyrmMissile.mdl",
        gv_aou,
        gv_aov
      )
    );
  }
  do {
    if (lv_brx > 7) {
      break;
    }
    lv_bry = GetUnitX(gv_ale[lv_brx]);
    lv_brz = GetUnitY(gv_ale[lv_brx]);
    if (gv_aox < 490) {
      if (
        f_aMe(lv_bry, lv_brz, gv_aou, gv_aov) < 200 &&
        !IsUnitInGroup(gv_ale[lv_brx], gv_aot)
      ) {
        UnitDamageTarget(
          gv_aaU[9],
          gv_ale[lv_brx],
          1500 - GetHeroStr(gv_ale[lv_brx], true),
          true,
          false,
          ATTACK_TYPE_NORMAL,
          DAMAGE_TYPE_UNIVERSAL,
          WEAPON_TYPE_WHOKNOWS
        );
        GroupAddUnit(gv_aot, gv_ale[lv_brx]);
      }
    }
    if (RectContainsCoords(gv_aey, lv_bry, lv_brz)) {
      lv_brB = f_aMe(lv_bry, lv_brz, GetUnitX(gv_aaU[9]), GetUnitY(gv_aaU[9]));
      if (lv_brB > 380 && lv_brB < 850) {
        lv_bry =
          lv_bry + 11.25 * Cos(GetUnitFacing(gv_ale[lv_brx]) * bj_DEGTORAD);
        lv_brz =
          lv_brz + 11.25 * Sin(GetUnitFacing(gv_ale[lv_brx]) * bj_DEGTORAD);
        SetUnitPosition(gv_ale[lv_brx], lv_bry, lv_brz);
      }
      if (gv_aox < 300 && lv_brB < 380) {
        lv_brA =
          180 +
          bj_RADTODEG *
            Atan2(GetUnitY(gv_aaU[9]) - lv_brz, GetUnitX(gv_aaU[9]) - lv_bry);
        lv_bry = lv_bry + 11.25 * Cos(lv_brA * bj_DEGTORAD);
        lv_brz = lv_brz + 11.25 * Sin(lv_brA * bj_DEGTORAD);
        SetUnitPosition(gv_ale[lv_brx], lv_bry, lv_brz);
        DestroyEffect(
          AddSpecialEffect(
            "Abilities\\Weapons\\GryphonRiderMissile\\GryphonRiderMissileTarget.mdl",
            lv_bry,
            lv_brz
          )
        );
      }
    }
    lv_brx = lv_brx + 1;
  } while (true);
  if (gv_aox > 490 || LoadInteger(gv_abL, 0, GetHandleId(gv_aor)) == 2) {
    SaveInteger(gv_abL, 0, GetHandleId(gv_aor), 0);
    GroupClear(gv_aot);
    f_aIo(gv_aot);
  }
}
function f_brC() {
  if (GetWidgetLife(gv_aaU[9]) < 0.406) {
    DisplayTimedTextToForce(
      gv_alq,
      5,
      "|cff00ff00Persephone:|r Hades, Lord of Hell awaits you now Mortal. My husband is not \n                    as forgiving as I, and you will not see tomorrows sunrise!"
    );
    f_aIM(gv_aoq);
    f_aIM(gv_aor);
    ForGroup(gv_aos, f_aNR);
  } else {
    SaveInteger(
      gv_abL,
      0,
      GetHandleId(gv_aoq),
      LoadInteger(gv_abL, 0, GetHandleId(gv_aoq)) + 1
    );
    if (LoadInteger(gv_abL, 0, GetHandleId(gv_aoq)) == 7) {
      DisplayTimedTextToForce(
        gv_alq,
        5,
        "|cffff8a08Persephone begins chanting in the tongue of the Underworld!"
      );
      GroupClear(gv_abu);
      GroupEnumUnitsInRange(
        gv_abu,
        GetUnitX(gv_aaU[9]),
        GetUnitY(gv_aaU[9]),
        450,
        Condition(f_aNQ)
      );
      ForGroup(gv_abu, f_brv);
      f_aIl(gv_abu);
    }
    if (LoadInteger(gv_abL, 0, GetHandleId(gv_aoq)) == 9) {
      DisplayTimedTextToForce(
        gv_alq,
        5,
        "|cff00ff00Persephone:|r Vex Lo Ber Jah Ko... Ring of Frozen Death, destroy them!"
      );
      gv_aot = f_aIn();
      SaveInteger(gv_abL, 0, GetHandleId(gv_aor), 1);
      gv_aou = GetUnitX(gv_aaU[9]) - 200;
      gv_aov = GetUnitY(gv_aaU[9]) + GetRandomInt(0, 200) - 100;
      gv_aow = 225;
      gv_aox = 100;
    }
    if (LoadInteger(gv_abL, 0, GetHandleId(gv_aoq)) == 15) {
      SaveInteger(gv_abL, 0, GetHandleId(gv_aoq), 0);
      gv_alv = CreateUnitAtLoc(
        Player(11),
        gv_alg.getInt(GetRandomInt(540, 542)),
        gv_all[GetRandomInt(99, 102)],
        0.0
      );
      DestroyEffect(
        AddSpecialEffectTarget(
          "Abilities\\Spells\\Demon\\DarkPortal\\DarkPortalTarget.mdl",
          gv_alv,
          "overhead"
        )
      );
      GroupAddUnit(gv_aos, gv_alv);
      gv_alv = CreateUnitAtLoc(
        Player(11),
        gv_alg.getInt(GetRandomInt(540, 542)),
        gv_all[GetRandomInt(99, 102)],
        0.0
      );
      DestroyEffect(
        AddSpecialEffectTarget(
          "Abilities\\Spells\\Demon\\DarkPortal\\DarkPortalTarget.mdl",
          gv_alv,
          "overhead"
        )
      );
      GroupAddUnit(gv_aos, gv_alv);
    }
    ForGroup(gv_aos, f_bru);
    if (!RectContainsUnit(gv_aey, gv_aaU[9])) {
      gv_acu = GetUnitName(gv_aaU[9]);
      SetUnitPosition(
        gv_aaU[9],
        LoadInteger(gv_abH, gv_act, StringHash(S2S(gv_acu + "_X"))),
        LoadInteger(gv_abH, gv_act, StringHash(S2S(gv_acu + "_Y")))
      );
    }
    if (f_aNx(gv_aey) < 1) {
      SaveInteger(gv_abL, 0, GetHandleId(gv_aoq), 2);
      PauseTimer(gv_aoq);
      PauseTimer(gv_aor);
      ForGroup(gv_aos, f_aNR);
      GroupClear(gv_aos);
      f_aBS(1, gv_aaU[9], gv_aey, gv_aiK);
    }
  }
}
function f_brD() {
  DisplayTimedTextToForce(
    gv_alq,
    5,
    "|cff00ff00Persephone:|r Your journey ends here, warrior.\n              You will not escape the frozen realm of Persephone!"
  );
  SaveInteger(gv_abL, 0, GetHandleId(gv_aoq), 0);
  TimerStart(gv_aoq, 1, true, f_brC);
  TimerStart(gv_aor, 0.03, true, f_brw);
  DisableTrigger(gv_aiK);
}
function f_brE() {
  var lv_brF = f_aCm();
  gv_avY[lv_brF] = GetEventDamageSource();
  gv_avZ[lv_brF] = GetTriggerUnit();
  PauseUnit(gv_avZ[lv_brF], true);
  PauseUnit(gv_avY[lv_brF], true);
  return lv_brF;
}
function f_brG(lv_brH) {
  PauseUnit(gv_avZ[lv_brH], false);
  PauseUnit(gv_avY[lv_brH], false);
  f_aNg(
    gv_avZ[lv_brH],
    "Objects\\Spawnmodels\\Undead\\ImpaleTargetDust\\ImpaleTargetDust.mdl",
    400,
    30,
    1,
    0.02
  );
}
function f_brI(lv_brJ) {
  if (lv_brJ == null) {
    return;
  } else {
    if (gv_avX.getInt(lv_brJ) != -1) {
      return;
    }
  }
  f_brG(lv_brJ);
  gv_avX[lv_brJ] = gv_avV;
  gv_avV = lv_brJ;
}
function f_brK() {
  var lv_brL = GetExpiredTimer();
  var lv_brM;
  var lv_brN;
  var lv_brO = LoadInteger(gv_abL, 0, GetHandleId(lv_brL));
  if (
    GetRandomInt(0, 100) == 1 ||
    GetWidgetLife(gv_avY[lv_brO]) < 0.406 ||
    GetWidgetLife(gv_avZ[lv_brO]) < 0.406
  ) {
    f_aIM(lv_brL);
    f_brI(lv_brO);
  } else {
    SetUnitFacing(gv_avY[lv_brO], GetUnitFacing(gv_avY[lv_brO]) + gv_aoz);
    lv_brM =
      GetUnitX(gv_avY[lv_brO]) +
      100 * Cos(GetUnitFacing(gv_avY[lv_brO]) * bj_DEGTORAD);
    lv_brN =
      GetUnitY(gv_avY[lv_brO]) +
      100 * Sin(GetUnitFacing(gv_avY[lv_brO]) * bj_DEGTORAD);
    SetUnitX(gv_avZ[lv_brO], lv_brM);
    SetUnitY(gv_avZ[lv_brO], lv_brN);
  }
  lv_brL = null;
}
function f_brP() {
  var lv_brQ = GetEventDamageSource();
  var lv_brR;
  if (
    !IsUnitPaused(GetTriggerUnit()) &&
    GetRandomInt(0, 100) < 9 &&
    (GetUnitTypeId(lv_brQ) == "n00L" ||
      GetUnitTypeId(lv_brQ) == "n00K" ||
      GetUnitTypeId(lv_brQ) == "narg")
  ) {
    lv_brR = f_aIL();
    SaveInteger(gv_abL, 0, GetHandleId(lv_brR), f_brE());
    TimerStart(lv_brR, 0.02, true, f_brK);
  }
  lv_brR = null;
  lv_brQ = null;
  return false;
}
function f_brS() {
  var lv_brT;
  PauseTimer(gv_aoy);
  lv_brT = 1;
  do {
    if (lv_brT > 12) {
      break;
    }
    if (!(gv_alh[lv_brT] == null)) {
      DestroyEffect(gv_alh[lv_brT]);
    }
    lv_brT = lv_brT + 1;
  } while (true);
  if (GetWidgetLife(gv_aku) > 0.405) {
    SetUnitState(gv_aku, UNIT_STATE_LIFE, 999999);
    SetUnitState(gv_aku, UNIT_STATE_MANA, 999999);
  } else {
    gv_aku = CreateUnit(
      Player(10),
      "narg",
      LoadInteger(gv_abH, gv_act, StringHash(S2S(gv_acu + "_X"))),
      LoadInteger(gv_abH, gv_act, StringHash(S2S(gv_acu + "_Y"))),
      0.0
    );
  }
  gv_acu = GetUnitName(gv_aku);
  SetUnitPosition(
    gv_aku,
    LoadInteger(gv_abH, gv_act, StringHash(S2S(gv_acu + "_X"))),
    LoadInteger(gv_abH, gv_act, StringHash(S2S(gv_acu + "_Y")))
  );
  SetUnitFacing(
    gv_aku,
    LoadInteger(gv_abH, gv_act, StringHash(S2S(gv_acu + "_A")))
  );
  if (GetWidgetLife(gv_akq) > 0.405) {
    SetUnitState(gv_akq, UNIT_STATE_LIFE, 999999);
    SetUnitState(gv_akq, UNIT_STATE_MANA, 999999);
  } else {
    gv_akq = CreateUnit(
      Player(10),
      "n00L",
      LoadInteger(gv_abH, gv_act, StringHash(S2S(gv_acu + "_X"))),
      LoadInteger(gv_abH, gv_act, StringHash(S2S(gv_acu + "_Y"))),
      0.0
    );
  }
  gv_acu = GetUnitName(gv_akq);
  SetUnitPosition(
    gv_akq,
    LoadInteger(gv_abH, gv_act, StringHash(S2S(gv_acu + "_X"))),
    LoadInteger(gv_abH, gv_act, StringHash(S2S(gv_acu + "_Y")))
  );
  SetUnitFacing(
    gv_akq,
    LoadInteger(gv_abH, gv_act, StringHash(S2S(gv_acu + "_A")))
  );
  if (GetWidgetLife(gv_akh) > 0.405) {
    SetUnitState(gv_akh, UNIT_STATE_LIFE, 999999);
    SetUnitState(gv_akh, UNIT_STATE_MANA, 999999);
  } else {
    gv_akh = CreateUnit(
      Player(10),
      "n00K",
      LoadInteger(gv_abH, gv_act, StringHash(S2S(gv_acu + "_X"))),
      LoadInteger(gv_abH, gv_act, StringHash(S2S(gv_acu + "_Y"))),
      0.0
    );
  }
  gv_acu = GetUnitName(gv_akh);
  SetUnitPosition(
    gv_akh,
    LoadInteger(gv_abH, gv_act, StringHash(S2S(gv_acu + "_X"))),
    LoadInteger(gv_abH, gv_act, StringHash(S2S(gv_acu + "_Y")))
  );
  SetUnitFacing(
    gv_akh,
    LoadInteger(gv_abH, gv_act, StringHash(S2S(gv_acu + "_A")))
  );
  f_aBS(1, gv_akt, gv_adZ, gv_aiL);
}
function f_brU() {
  var lv_brV;
  var lv_brW;
  var lv_brX;
  var lv_brY;
  var lv_brZ;
  if (GetWidgetLife(gv_akt) < 0.406) {
    PauseTimer(gv_aoy);
    if (GetWidgetLife(gv_aku) > 0.405) {
      KillUnit(gv_aku);
    }
    if (GetWidgetLife(gv_akq) > 0.405) {
      KillUnit(gv_akq);
    }
    if (GetWidgetLife(gv_akh) > 0.405) {
      KillUnit(gv_akh);
    }
    lv_brW = 1;
    do {
      if (lv_brW > 12) {
        break;
      }
      if (gv_alh[lv_brW] != null) {
        DestroyEffect(gv_alh[lv_brW]);
      }
      lv_brW = lv_brW + 1;
    } while (true);
    DisplayTimedTextToForce(
      gv_alq,
      5,
      "|cff00ff00Medusa:|r You have escaped death..."
    );
  } else {
    if (LoadInteger(gv_abL, 0, GetHandleId(gv_aoy)) > 0) {
      if (GetRandomInt(1, 200) == 1) {
        if (gv_aoz == 6.5) {
          gv_aoz = -6.5;
        } else {
          gv_aoz = 6.5;
        }
      }
      SetUnitFacing(gv_akt, GetUnitFacing(gv_akt) + gv_aoz);
      lv_brX = 25;
      lv_brW = 1;
      do {
        if (lv_brW > 12) {
          break;
        }
        lv_brY =
          GetUnitX(gv_akt) + lv_brX * Cos(GetUnitFacing(gv_akt) * bj_DEGTORAD);
        lv_brZ =
          GetUnitY(gv_akt) + lv_brX * Sin(GetUnitFacing(gv_akt) * bj_DEGTORAD);
        DestroyEffect(gv_alh[lv_brW]);
        gv_alh[lv_brW] = AddSpecialEffect(
          "Abilities\\Spells\\Human\\FlameStrike\\FlameStrikeDamageTarget.mdl",
          lv_brY,
          lv_brZ
        );
        lv_brV = 0;
        do {
          if (lv_brV > 7) {
            break;
          }
          if (GetPlayerSlotState(Player(lv_brV)) == PLAYER_SLOT_STATE_PLAYING) {
            if (
              f_aMe(
                GetUnitX(gv_ale[lv_brV]),
                GetUnitY(gv_ale[lv_brV]),
                lv_brY,
                lv_brZ
              ) < 50
            ) {
              KillUnit(gv_ale[lv_brV]);
            }
          }
          lv_brV = lv_brV + 1;
        } while (true);
        lv_brX = lv_brX + 50;
        lv_brW = lv_brW + 1;
      } while (true);
    }
  }
  if (f_aNx(gv_adZ) < 1) {
    f_brS();
  }
}
function f_bsa() {
  DisplayTimedTextToForce(
    gv_alq,
    5,
    "|cff00ff00Medusa:|r Time is short mortal..."
  );
  StartSound(gv_afR);
  gv_aoz = 6.5;
  SaveInteger(gv_abL, 0, GetHandleId(gv_aoy), 1);
  TimerStart(gv_aoy, 0.05, true, f_brU);
  DisableTrigger(gv_aiL);
}
function f_bsb() {
  var lv_bsc = GetExpiredTimer();
  var lv_bsd = LoadInteger(gv_abL, 0, GetHandleId(lv_bsc));
  gv_aoB = gv_aoB + 0.03;
  if (
    gv_aoB > 6 ||
    GetWidgetLife(gv_awg[lv_bsd]) < 0.406 ||
    GetWidgetLife(gv_akw) < 0.406
  ) {
    gv_aoC = true;
  } else {
    if (IsUnitInRange(gv_awg[lv_bsd], gv_akw, 150)) {
      KillUnit(gv_awg[lv_bsd]);
      gv_aoC = true;
    } else {
      SetUnitPosition(
        gv_awg[lv_bsd],
        GetUnitX(gv_awg[lv_bsd]) - gv_awh[lv_bsd],
        GetUnitY(gv_awg[lv_bsd]) - gv_awi[lv_bsd]
      );
      IssueImmediateOrderById(gv_awg[lv_bsd], 851972);
    }
  }
  if (gv_aoC) {
    gv_aoC = false;
    f_aIM(lv_bsc);
    f_aCk(lv_bsd);
  }
}
function f_bse(lv_bsf) {
  var lv_bsg = f_aIL();
  var lv_bsh = f_aCi();
  var lv_bsi = GetUnitX(gv_akw);
  var lv_bsj = GetUnitY(gv_akw);
  var lv_bsk = Atan2(
    GetUnitY(lv_bsf) - GetUnitY(gv_akw),
    GetUnitX(lv_bsf) - GetUnitX(gv_akw)
  );
  gv_awh[lv_bsh] = 10 * Cos(lv_bsk);
  gv_awi[lv_bsh] = 10 * Sin(lv_bsk);
  gv_awg[lv_bsh] = lv_bsf;
  gv_awf[lv_bsh] = 0;
  gv_aoB = 0.0;
  do {
    if (IsUnitInRangeXY(lv_bsf, lv_bsi, lv_bsj, 10)) {
      break;
    }
    lv_bsi = lv_bsi + gv_awh[lv_bsh];
    lv_bsj = lv_bsj + gv_awi[lv_bsh];
    gv_awd[gv_awe.getInt(lv_bsh) + gv_awf.getInt(lv_bsh)] = AddSpecialEffect(
      "Abilities\\Spells\\Human\\FlameStrike\\FlameStrikeEmbers.mdl",
      lv_bsi,
      lv_bsj
    );
    gv_awf[lv_bsh] = gv_awf.getInt(lv_bsh) + 1;
  } while (true);
  IssueImmediateOrderById(gv_akw, 851993);
  SetUnitFacingTimed(gv_akw, lv_bsk * bj_RADTODEG, 0);
  SaveInteger(gv_abL, 0, GetHandleId(lv_bsg), lv_bsh);
  TimerStart(lv_bsg, 0.03, true, f_bsb);
  lv_bsg = null;
  return lv_bsh;
}
function f_bsl() {
  var lv_bsm = 0;
  if (GetWidgetLife(gv_akw) < 0.406) {
    DisplayTimedTextToForce(
      gv_alq,
      5,
      "|cffff8a08You have defeated the mighty lion, what remains?"
    );
    f_aIM(gv_aoA);
  } else {
    SaveInteger(
      gv_abL,
      0,
      GetHandleId(gv_aoA),
      LoadInteger(gv_abL, 0, GetHandleId(gv_aoA)) + 1
    );
    if (LoadInteger(gv_abL, 0, GetHandleId(gv_aoA)) == 10) {
      SaveInteger(gv_abL, 0, GetHandleId(gv_aoA), 0);
      GroupClear(gv_abu);
      do {
        if (lv_bsm > 7) {
          break;
        }
        if (
          IsUnitInRange(gv_ale[lv_bsm], gv_akw, 800) &&
          GetWidgetLife(gv_ale[lv_bsm]) > 0.405
        ) {
          GroupAddUnit(gv_abu, gv_ale[lv_bsm]);
        }
        lv_bsm = lv_bsm + 1;
      } while (true);
      bj_groupRandomConsidered = 0;
      bj_groupRandomCurrentPick = null;
      ForGroup(gv_abu, GroupPickRandomUnitEnum);
      if (bj_groupRandomCurrentPick != null) {
        f_bse(bj_groupRandomCurrentPick);
        DisplayTimedTextToForce(
          gv_alq,
          5,
          "|cffff8a08Nemean Lion sets his eyes on " +
            GetPlayerName(GetOwningPlayer(bj_groupRandomCurrentPick)) +
            "!"
        );
      }
    }
    if (!RectContainsUnit(gv_afI, gv_akw)) {
      gv_acu = GetUnitName(gv_akw);
      SetUnitPosition(
        gv_akw,
        LoadInteger(gv_abH, gv_act, StringHash(S2S(gv_acu + "_X"))),
        LoadInteger(gv_abH, gv_act, StringHash(S2S(gv_acu + "_Y")))
      );
    }
    if (f_aNx(gv_afI) < 1) {
      PauseTimer(gv_aoA);
      f_aBS(1, gv_akw, gv_afI, gv_aiM);
    }
  }
}
function f_bsn() {
  DisplayTimedTextToForce(gv_alq, 5, "|cffff8a08You hear a loud roar...");
  SaveInteger(gv_abL, 0, GetHandleId(gv_aoA), 0);
  StartSound(gv_afM);
  TimerStart(gv_aoA, 1, true, f_bsl);
  DisableTrigger(gv_aiM);
}
function f_bso() {
  var lv_bsp;
  var lv_bsq;
  var lv_bsr;
  if (GetWidgetLife(gv_akr) < 0.406) {
    DisplayTimedTextToForce(
      gv_alq,
      5,
      "|cffff8a08You have defeated the Ladon... What is that burning, pulsing object on the ground?"
    );
    PauseTimer(gv_aoD);
  } else {
    SaveInteger(gv_abL, 0, GetHandleId(gv_aoD), 0);
    if (LoadInteger(gv_abL, 0, GetHandleId(gv_aoD)) == 1) {
      lv_bsq = 0;
      do {
        if (lv_bsq > 6) {
          break;
        }
        DestroyEffect(gv_alh[120 + lv_bsq]);
        lv_bsq = lv_bsq + 1;
      } while (true);
      lv_bsp = f_aNq(GetUnitX(gv_akr), GetUnitY(gv_akr), 1000);
      if (lv_bsp < 8) {
        IssueImmediateOrderById(gv_akr, 851993);
        gv_aoE = GetUnitX(gv_ale[lv_bsp]);
        gv_aoF = GetUnitY(gv_ale[lv_bsp]);
        lv_bsr =
          bj_RADTODEG *
          Atan2(gv_aoF - GetUnitY(gv_akr), gv_aoE - GetUnitX(gv_akr));
        SetUnitFacingTimed(gv_akr, lv_bsr, 0);
        gv_alh[127] = AddSpecialEffect(
          "Abilities\\Spells\\Human\\FlameStrike\\FlameStrikeTarget.mdl",
          gv_aoE,
          gv_aoF
        );
      } else {
        SaveInteger(gv_abL, 0, GetHandleId(gv_aoD), 3);
      }
    }
    if (LoadInteger(gv_abL, 0, GetHandleId(gv_aoD)) == 2) {
      DestroyEffect(gv_alh[127]);
      gv_alh[120] = AddSpecialEffect(
        "Abilities\\Spells\\Human\\FlameStrike\\FlameStrike1.mdl",
        gv_aoE,
        gv_aoF
      );
      lv_bsq = 1;
      do {
        if (lv_bsq > 6) {
          break;
        }
        lv_bsr = lv_bsq * 60;
        gv_alh[120 + lv_bsq] = AddSpecialEffect(
          "Abilities\\Spells\\Human\\FlameStrike\\FlameStrike1.mdl",
          gv_aoE + 200 * Cos(lv_bsr * bj_DEGTORAD),
          gv_aoF + 200 * Sin(lv_bsr * bj_DEGTORAD)
        );
        lv_bsq = lv_bsq + 1;
      } while (true);
      lv_bsq = 0;
      do {
        if (lv_bsq > 7) {
          break;
        }
        if (
          f_aMe(
            gv_aoE,
            gv_aoF,
            GetUnitX(gv_ale[lv_bsq]),
            GetUnitY(gv_ale[lv_bsq])
          ) < 800
        ) {
          UnitDamageTarget(
            gv_akr,
            gv_ale[lv_bsq],
            2000 + I2R(GetRandomInt(0, 10) * 100),
            true,
            false,
            ATTACK_TYPE_NORMAL,
            DAMAGE_TYPE_MAGIC,
            WEAPON_TYPE_WHOKNOWS
          );
        }
        lv_bsq = lv_bsq + 1;
      } while (true);
      IssueImmediateOrderById(gv_akr, 851972);
    }
    if (
      LoadInteger(gv_abL, 0, GetHandleId(gv_aoD)) == 3 ||
      LoadInteger(gv_abL, 0, GetHandleId(gv_aoD)) == 6
    ) {
      lv_bsp = f_aNq(GetUnitX(gv_akr), GetUnitY(gv_akr), 700);
      if (lv_bsp < 8) {
        IssueTargetOrderById(gv_akr, 852189, gv_ale[lv_bsp]);
        UnitDamageTarget(
          gv_akr,
          gv_ale[lv_bsp],
          400,
          true,
          false,
          ATTACK_TYPE_NORMAL,
          DAMAGE_TYPE_MAGIC,
          WEAPON_TYPE_WHOKNOWS
        );
      }
    }
    if (LoadInteger(gv_abL, 0, GetHandleId(gv_aoD)) == 4) {
      lv_bsp = f_aNq(GetUnitX(gv_akr), GetUnitY(gv_akr), 600);
      if (lv_bsp < 8) {
        IssueTargetOrderById(gv_akr, 852171, gv_ale[lv_bsp]);
      }
    }
    if (LoadInteger(gv_abL, 0, GetHandleId(gv_aoD)) == 8) {
      SaveInteger(gv_abL, 0, GetHandleId(gv_aoD), 0);
    }
    if (!RectContainsUnit(gv_adX, gv_akr)) {
      SetUnitPosition(gv_akr, -11095, 7177);
    }
    if (f_aNx(gv_adX) < 1) {
      PauseTimer(gv_aoD);
      f_aBS(1, gv_akr, gv_adX, gv_aiN);
    }
  }
}
function f_bss() {
  DisplayTimedTextToForce(
    gv_alq,
    5,
    "|cffff8a08You hear the great dragon Ladon..."
  );
  SaveInteger(gv_abL, 0, GetHandleId(gv_aoD), 0);
  StartSound(gv_afS);
  TimerStart(gv_aoD, 1.5, true, f_bso);
  DisableTrigger(gv_aiN);
}
function f_bst() {
  var lv_bsu;
  var lv_bsv;
  var lv_bsw;
  if (GetWidgetLife(gv_akr) > 0.405) {
    lv_bsu = f_aNC(gv_adX, "x");
    lv_bsv = f_aNC(gv_adX, "y");
    IssuePointOrderById(gv_akr, gv_aar, lv_bsu, lv_bsv);
  }
  if (GetWidgetLife(gv_akk) > 0.405) {
    IssuePointOrderById(gv_akk, 851986, 8052.5, 9442.8);
  }
  if (GetWidgetLife(gv_akf) > 0.405) {
    lv_bsu = f_aNC(gv_acC, "x");
    lv_bsv = f_aNC(gv_acC, "y");
    IssuePointOrderById(gv_akf, 851986, lv_bsu, lv_bsv);
  }
  if (gv_alg.getInt(35 + 7000) == 2) {
    if (gv_ale[89] != null && GetWidgetLife(gv_ale[89]) > 0.405) {
      lv_bsw = GetUnitUserData(gv_ale[89]);
      if (lv_bsw == 1) {
        lv_bsu = GetRectCenterX(gv_afn);
        lv_bsv = GetRectCenterY(gv_afn);
      }
      if (lv_bsw == 2) {
        lv_bsu = GetRectCenterX(gv_afo);
        lv_bsv = GetRectCenterY(gv_afo);
      }
      if (lv_bsw == 3) {
        lv_bsu = GetRectCenterX(gv_afp);
        lv_bsv = GetRectCenterY(gv_afp);
      }
      if (lv_bsw == 4) {
        lv_bsu = GetRectCenterX(gv_aea);
        lv_bsv = GetRectCenterY(gv_aea);
      }
      IssuePointOrderById(gv_ale[89], 851986, lv_bsu, lv_bsv);
    }
  }
}
function f_bsx() {
  AddHeroXP(GetEnumUnit(), gv_alx, true);
}
function f_bsy() {
  var lv_bsz = GetEnumPlayer();
  var lv_bsA = R2I(gv_alx * f_azo(gv_ale[GetPlayerId(lv_bsz)]));
  if (f_aJz(GetPlayerId(lv_bsz), "I06E")) {
    if (f_aJz(GetPlayerId(lv_bsz), "I06D")) {
      lv_bsA = R2I(
        lv_bsA *
          (1 +
            0.25 *
              f_azm(gv_ale[GetPlayerId(lv_bsz)]) *
              f_azo(gv_ale[GetPlayerId(lv_bsz)]))
      );
    } else {
      lv_bsA = R2I(lv_bsA * (1 + 0.25 * f_azm(gv_ale[GetPlayerId(lv_bsz)])));
    }
  }
  SetPlayerState(
    lv_bsz,
    PLAYER_STATE_RESOURCE_GOLD,
    GetPlayerState(lv_bsz, PLAYER_STATE_RESOURCE_GOLD) + lv_bsA
  );
  lv_bsz = null;
}
function f_bsB() {
  gv_alv = GetFilterUnit();
  if (
    GetHeroLevel(gv_alv) >= gv_alx &&
    IsUnitType(gv_alv, UNIT_TYPE_HERO) &&
    IsUnitAlly(gv_alv, gv_alu)
  ) {
    gv_alr = gv_alr - 0.075;
    gv_als = gv_als - 0.1;
    ForceAddPlayer(gv_alt, GetOwningPlayer(gv_alv));
    return true;
  }
  return false;
}
function f_bsC() {
  var lv_bsD = GetTriggerUnit();
  var lv_bsE = GetUnitLevel(lv_bsD);
  var lv_bsF = CreateTextTag();
  var lv_bsG = CreateTextTag();
  var lv_bsH = CreateGroup();
  var lv_bsI = GetUnitX(lv_bsD);
  var lv_bsJ = GetUnitY(lv_bsD);
  gv_alu = GetOwningPlayer(GetKillingUnit());
  gv_alx = lv_bsE - 5;
  gv_alr = 1;
  gv_als = 1;
  GroupEnumUnitsInRange(lv_bsH, lv_bsI, lv_bsJ, 1000, Condition(f_bsB));
  if (lv_bsE > 72) {
    gv_alx =
      R2I((gv_alg.getInt(72) + 6 * (150 - lv_bsE)) * gv_alr + 0.5) +
      GetRandomInt(-1, 2);
  } else {
    gv_alx = R2I(gv_alg.getInt(lv_bsE) * gv_alr + 0.5) + GetRandomInt(-1, 2);
  }
  gv_alx = R2I(gv_alx * 0.5 * gv_aak);
  SetTextTagText(lv_bsG, "|cff900090+" + I2S(gv_alx) + " exp", 0.021);
  SetTextTagPos(lv_bsG, lv_bsI + 5, lv_bsJ, 50);
  SetTextTagVelocity(lv_bsG, 0.0, 0.036);
  SetTextTagPermanent(lv_bsG, false);
  SetTextTagLifespan(lv_bsG, 3);
  SetTextTagVisibility(lv_bsG, IsPlayerInForce(GetLocalPlayer(), gv_alt));
  ForGroup(lv_bsH, f_bsx);
  if (lv_bsE > 72) {
    gv_alx =
      R2I((gv_alg.getInt(144) + 12 * (150 - lv_bsE)) * gv_alr + 0.5) +
      GetRandomInt(-1, 4);
  } else {
    gv_alx =
      R2I(gv_alg.getInt(lv_bsE + 72) * gv_alr + 0.5) + GetRandomInt(-1, 6);
  }
  gv_alx = R2I(gv_alx * 0.5 * gv_aak);
  DestroyEffect(
    AddSpecialEffectTarget(
      "UI\\Feedback\\GoldCredit\\GoldCredit.mdl",
      lv_bsD,
      "origin"
    )
  );
  SetTextTagText(lv_bsF, "|cffffcc00+" + I2S(gv_alx) + " g", 0.021);
  SetTextTagPos(lv_bsF, lv_bsI, lv_bsJ, 0.0);
  SetTextTagVelocity(lv_bsF, 0.0, 0.036);
  SetTextTagPermanent(lv_bsF, false);
  SetTextTagLifespan(lv_bsF, 3);
  SetTextTagVisibility(lv_bsF, IsPlayerInForce(GetLocalPlayer(), gv_alt));
  ForForce(gv_alt, f_bsy);
  ForceClear(gv_alt);
  DestroyGroup(lv_bsH);
  lv_bsH = null;
  lv_bsD = null;
  lv_bsF = null;
  lv_bsG = null;
}
function f_bsK() {
  var lv_bsL = CreateTrigger();
  TriggerRegisterPlayerUnitEvent(
    lv_bsL,
    Player(10),
    EVENT_PLAYER_UNIT_DEATH,
    null
  );
  TriggerRegisterPlayerUnitEvent(
    lv_bsL,
    Player(11),
    EVENT_PLAYER_UNIT_DEATH,
    null
  );
  TriggerAddAction(lv_bsL, f_bsC);
}
function f_bsM() {
  var lv_bsN = GetDyingUnit();
  var lv_bsO = GetUnitTypeId(lv_bsN);
  var lv_bsP = GetKillingUnit();
  var lv_bsQ = GetOwningPlayer(lv_bsP);
  var lv_bsR = GetUnitX(lv_bsN);
  var lv_bsS = GetUnitY(lv_bsN);
  var lv_bsT = 0;
  var lv_bsU = GetRandomInt(1, 100);
  var lv_bsV;
  var lv_bsW = S2I(SubString(GetUnitName(lv_bsN), 5, 8));
  if (IsUnitType(lv_bsN, UNIT_TYPE_ANCIENT)) {
    return;
  }
  gv_alg[196] = gv_alg.getInt(196) + 1;
  if (gv_alg.getInt(196) > gv_alg.getInt(195)) {
    gv_alg[196] = gv_alg.getInt(196) - gv_alg.getInt(195);
    do {
      if (lv_bsT > 7) {
        break;
      }
      if (
        GetPlayerState(Player(lv_bsT), PLAYER_STATE_RESOURCE_FOOD_USED) < 200
      ) {
        lv_bsV = 1;
        if (GetUnitLevel(lv_bsN) > 50) {
          lv_bsV = lv_bsV + 1;
        } else {
          if (GetUnitLevel(lv_bsN) > 29 && GetRandomInt(1, 2) == 1) {
            lv_bsV = lv_bsV + 1;
          }
        }
        if (f_aJz(lv_bsT, "I06D")) {
          lv_bsV = lv_bsV + 1;
          lv_bsV = R2I(lv_bsV * f_azm(gv_ale[lv_bsT]));
        } else {
          lv_bsV = R2I(lv_bsV * f_azo(gv_ale[lv_bsT]));
        }
        SetPlayerState(
          Player(lv_bsT),
          PLAYER_STATE_RESOURCE_FOOD_USED,
          GetPlayerState(Player(lv_bsT), PLAYER_STATE_RESOURCE_FOOD_USED) +
            lv_bsV
        );
      }
      if (
        GetPlayerState(Player(lv_bsT), PLAYER_STATE_RESOURCE_FOOD_USED) > 200
      ) {
        SetPlayerState(Player(lv_bsT), PLAYER_STATE_RESOURCE_FOOD_USED, 200);
      }
      lv_bsT = lv_bsT + 1;
    } while (true);
  }
  if (lv_bsO == "nkob") {
    f_aKh(11);
    f_aKh(13);
  }
  if (lv_bsO == "nkot") {
    if (lv_bsU <= 5) {
      CreateItem(30 + gv_alJ.getInt(GetRandomInt(0, 8)), lv_bsR, lv_bsS);
    }
  }
  if (lv_bsO == "nkog") {
    f_aKh(12);
    f_aKh(13);
  }
  if (lv_bsO == "nkol") {
    f_aKh(12);
    f_aKh(13);
  }
  if (lv_bsO == "nban") {
    f_aKh(14);
    f_aKh(15);
    if (lv_bsU <= 5) {
      CreateItem(40 + gv_alJ.getInt(GetRandomInt(0, 8)), lv_bsR, lv_bsS);
    }
    lv_bsV = GetRandomInt(1, 60);
    if (lv_bsV == 1) {
      CreateItem("fgsk", lv_bsR, lv_bsS);
    } else {
      if (lv_bsV == 2) {
        CreateItem("wild", lv_bsR, lv_bsS);
      } else {
        if (lv_bsV == 3) {
          CreateItem("fgdg", lv_bsR, lv_bsS);
        }
      }
    }
  }
  if (lv_bsO == "nass") {
    f_aKh(14);
    f_aKh(15);
    lv_bsV = GetRandomInt(1, 60);
    if (lv_bsV == 1) {
      CreateItem("fgsk", lv_bsR, lv_bsS);
    } else {
      if (lv_bsV == 2) {
        CreateItem("wild", lv_bsR, lv_bsS);
      } else {
        if (lv_bsV == 3) {
          CreateItem("fgdg", lv_bsR, lv_bsS);
        }
      }
    }
  }
  if (lv_bsO == "ntn2") {
    gv_alg[14 + 7400] = gv_alg.getInt(14 + 7400) + 99;
    if (gv_alg.getInt(14 + 7000) != 2) {
      gv_alg[14 + 7400] = gv_alg.getInt(14 + 7400) + 1;
    }
    f_aKh(14);
  }
  if (lv_bsO == "nbld") {
    f_aKh(16);
    lv_bsV = GetRandomInt(1, 30);
    if (lv_bsV == 1) {
      CreateItem("fgsk", lv_bsR, lv_bsS);
    } else {
      if (lv_bsV == 2) {
        CreateItem("wild", lv_bsR, lv_bsS);
      } else {
        if (lv_bsV == 3) {
          CreateItem("fgdg", lv_bsR, lv_bsS);
        }
      }
    }
  }
  if (lv_bsO == "nwlt") {
    lv_bsV = GetRandomInt(1, 30);
    if (lv_bsV == 1) {
      CreateItem("fgsk", lv_bsR, lv_bsS);
    } else {
      if (lv_bsV == 2) {
        CreateItem("wild", lv_bsR, lv_bsS);
      } else {
        if (lv_bsV == 3) {
          CreateItem("fgdg", lv_bsR, lv_bsS);
        }
      }
    }
  }
  if (lv_bsO == "nqbh") {
    if (lv_bsU <= 5) {
      CreateItem(gv_alJ.getInt(50 + GetRandomInt(0, 8)), lv_bsR, lv_bsS);
    }
  }
  if (lv_bsO == "nftt") {
    f_aKh(21);
    lv_bsV = GetRandomInt(1, 25);
    if (lv_bsV == 1) {
      CreateItem("fgsk", lv_bsR, lv_bsS);
    } else {
      if (lv_bsV == 2) {
        CreateItem("wild", lv_bsR, lv_bsS);
      } else {
        if (lv_bsV == 3) {
          CreateItem("fgdg", lv_bsR, lv_bsS);
        } else {
          if (lv_bsV == 4) {
            CreateItem("srrc", lv_bsR, lv_bsS);
          }
        }
      }
    }
  }
  if (lv_bsO == "nftb") {
    f_aKh(21);
    lv_bsV = GetRandomInt(1, 25);
    if (lv_bsV == 1) {
      CreateItem("fgsk", lv_bsR, lv_bsS);
    } else {
      if (lv_bsV == 2) {
        CreateItem("wild", lv_bsR, lv_bsS);
      } else {
        if (lv_bsV == 3) {
          CreateItem("fgdg", lv_bsR, lv_bsS);
        } else {
          if (lv_bsV == 4) {
            CreateItem("srrc", lv_bsR, lv_bsS);
          }
        }
      }
    }
  }
  if (lv_bsO == "nfsp") {
    if (lv_bsU <= 5) {
      CreateItem(gv_alJ.getInt(60 + GetRandomInt(0, 8)), lv_bsR, lv_bsS);
    }
  }
  if (lv_bsO == "ngnv") {
    if (lv_bsU <= 5) {
      CreateItem(gv_alJ.getInt(60 + GetRandomInt(0, 8)), lv_bsR, lv_bsS);
    }
  }
  if (lv_bsO == "nftk") {
    CreateItem(gv_alJ.getInt(600 + GetRandomInt(0, 2)), lv_bsR, lv_bsS);
    CreateItem("srrc", lv_bsR, lv_bsS);
    CreateItem("whwd", lv_bsR, lv_bsS);
    f_aKh(22);
    PolledWait(200 / gv_aal);
    if (gv_akL == null || true) {
      gv_akL = CreateUnit(Player(10), "nftk", -10192, 1709, 22);
      DisplayTimedTextToForce(gv_alq, 5, "Troll Chieftain has revived.");
    }
  }
  if (lv_bsO == "nhrr") {
    f_aKh(23);
    if (lv_bsU <= 5) {
      CreateItem("wswd", lv_bsR, lv_bsS);
    }
  }
  if (lv_bsO == "nhns") {
    gv_alg[23 + 7400] = gv_alg.getInt(23 + 7400) + 99;
    if (gv_alg.getInt(23 + 7000) != 2) {
      gv_alg[23 + 7400] = gv_alg.getInt(23 + 7400) + 1;
    }
    f_aKh(23);
  }
  if (lv_bsO == "nhrq") {
    CreateItem("wswd", lv_bsR, lv_bsS);
  }
  if (lv_bsO == "nhrh") {
    f_aKh(25);
    CreateItem("wswd", lv_bsR, lv_bsS);
  }
  if (lv_bsO == "nbdo" || lv_bsO == "nbda" || lv_bsO == "nbdw") {
    if (gv_alg.getInt(26 + 7000) != 2) {
      gv_alg[26 + 7400] = gv_alg.getInt(26 + 7400) + 1;
    }
    f_aKh(26);
  }
  if (lv_bsO == "nbdw") {
    CreateItem(gv_alJ.getInt(70 + GetRandomInt(0, 3)), lv_bsR, lv_bsS);
    PolledWait(200 / gv_aal);
    CreateUnit(Player(10), "nbdw", -650, 14283, 212);
    CreateUnit(Player(10), "nbdo", -800, 14283, 212);
    CreateUnit(Player(10), "nbdo", -500, 14283, 212);
    CreateUnit(Player(10), "nbdo", -650, 14170, 212);
    CreateUnit(Player(10), "nbdo", -650, 14390, 212);
    CreateUnit(Player(10), "nbda", -550, 14450, 212);
    CreateUnit(Player(10), "nbda", -400, 14350, 212);
    DisplayTimedTextToForce(gv_alq, 5, "Minotaur Chieftain has revived.");
  }
  if (lv_bsO == "ofrt" || lv_bsO == "ntnt" || lv_bsO == "ntt2") {
    gv_alg[26 + 7400] = gv_alg.getInt(26 + 7400) + 99;
    if (gv_alg.getInt(26 + 7000) != 2) {
      gv_alg[26 + 7400] = gv_alg.getInt(26 + 7400) + 1;
    }
    f_aKh(26);
  }
  if (lv_bsO == "nbzd") {
    f_aKh(30);
    CreateItem(gv_alJ.getInt(185 + GetRandomInt(0, 2)), lv_bsR, lv_bsS);
    CreateItem("I01X", lv_bsR, lv_bsS);
    CreateItem("I01D", lv_bsR, lv_bsS);
    RemoveUnit(gv_akr);
    f_aJF(gv_akr, 1);
    SaveInteger(gv_abL, 0, GetHandleId(gv_aoD), 0);
    PolledWait(900 / gv_aal);
    gv_akr = CreateUnit(Player(10), "nbzd", -11094, 7053, 270);
    DisplayTimedTextToForce(gv_alq, 7, "|cffff8a08Ladon|r has revived.");
    ResumeTimer(gv_aoD);
  }
  if (lv_bsO == "nmrr") {
    f_aKh(31);
    f_aKh(33);
    if (GetRandomInt(1, 40) <= 1) {
      CreateItem("fgrg", lv_bsR, lv_bsS);
    }
  }
  if (lv_bsO == "nmmu") {
    f_aKh(31);
    f_aKh(33);
    if (lv_bsU <= 5) {
      CreateItem("fgrg", lv_bsR, lv_bsS);
    }
  }
  if (lv_bsO == "nmrm") {
    f_aKh(31);
    f_aKh(33);
    if (lv_bsU <= 10) {
      CreateItem("fgrg", lv_bsR, lv_bsS);
    }
  }
  if (lv_bsO == "nmg0" || lv_bsO == "nmg1") {
    gv_alg[31 + 7400] = gv_alg.getInt(31 + 7400) + 99;
    if (gv_alg.getInt(31 + 7000) != 2) {
      gv_alg[31 + 7400] = gv_alg.getInt(31 + 7400) + 1;
    }
    f_aKh(31);
  }
  if (lv_bsO == "nahy") {
    if (gv_alg.getInt(32 + 7000) < 3) {
      lv_bsV = 1;
    } else {
      lv_bsV = 4;
    }
    if (GetRandomInt(1, lv_bsV) < 3) {
      CreateItem("I01C", lv_bsR, lv_bsS);
    }
    if (GetRandomInt(1, lv_bsV) == 1) {
      CreateItem("I05M", lv_bsR, lv_bsS);
    }
    f_aKh(32);
    PolledWait(400 / gv_aal);
    gv_aki = CreateUnit(Player(10), "nahy", 5890, -9701, 109.55);
    DisplayTimedTextToForce(gv_alq, 5, "The Hydra has revived.");
  }
  if (lv_bsO == "nsat") {
    f_aKh(34);
    if (GetRandomInt(1, 40) <= 1) {
      CreateItem("totw", lv_bsR, lv_bsS);
    }
  }
  if (lv_bsO == "nstl") {
    f_aKh(34);
    if (GetRandomInt(1, 20) <= 1) {
      CreateItem("totw", lv_bsR, lv_bsS);
    }
  }
  if (lv_bsO == "nsth") {
    f_aKh(34);
    if (GetRandomInt(1, 10) <= 1) {
      CreateItem("totw", lv_bsR, lv_bsS);
    }
  }
  if (lv_bsO == "nfrl") {
    f_aKh(37);
    f_aKh(39);
    if (GetRandomInt(1, 40) <= 1) {
      CreateItem("will", lv_bsR, lv_bsS);
    }
  }
  if (lv_bsO == "nfrb") {
    f_aKh(37);
    f_aKh(39);
    if (lv_bsU <= 5) {
      CreateItem("will", lv_bsR, lv_bsS);
    }
  }
  if (lv_bsO == "nfrg") {
    f_aKh(38);
    if (lv_bsU <= 10) {
      CreateItem("will", lv_bsR, lv_bsS);
    }
  }
  if (lv_bsO == "nsqa") {
    f_aKh(40);
    CreateItem(gv_alJ.getInt(120 + GetRandomInt(0, 2)), lv_bsR, lv_bsS);
    CreateItem("will", lv_bsR, lv_bsS);
    EnableTrigger(gv_ahP);
    gv_akM = null;
    PolledWait(400 / gv_aal);
    if (gv_akM == null) {
      gv_akM = CreateUnit(Player(10), "nsqa", -11814, -1684, 236);
      DisplayTimedTextToForce(gv_alq, 5, "The Blackspot Raven has revived.");
    }
  }
  if (lv_bsO == "ncks") {
    f_aKh(45);
  }
  if (lv_bsO == "ncim") {
    f_aKh(45);
  }
  if (lv_bsO == "ncnt" || lv_bsO == "nct1" || lv_bsO == "nct2") {
    gv_alg[45 + 7400] = gv_alg.getInt(45 + 7400) + 99;
    if (gv_alg.getInt(45 + 7000) != 2) {
      gv_alg[45 + 7400] = gv_alg.getInt(45 + 7400) + 1;
    }
    f_aKh(45);
  }
  if (lv_bsO == "ncnk") {
    f_aKh(46);
    if (lv_bsN == gv_akH) {
      CreateItem("I01H", lv_bsR, lv_bsS);
    }
  }
  if (lv_bsO == "ndrd") {
    CreateItem(gv_alJ.getInt(90 + GetRandomInt(0, 2)), lv_bsR, lv_bsS);
    if (gv_alg.getInt(29 + 7000) < 3) {
      CreateItem("I05D", lv_bsR, lv_bsS);
    }
    PolledWait(400 / gv_aal);
    CreateUnit(Player(10), "ndrd", 14255, 6527, 245);
    DisplayTimedTextToForce(gv_alq, 5, "The Cyclops has revived.");
  }
  if (lv_bsO == "nfor") {
    f_aKh(49);
    f_aKh(52);
    if (GetRandomInt(1, 40) <= 1) {
      CreateItem("wlsd", lv_bsR, lv_bsS);
    }
  }
  if (lv_bsO == "ngh2") {
    f_aKh(49);
    f_aKh(52);
    if (lv_bsU <= 5) {
      CreateItem("wlsd", lv_bsR, lv_bsS);
    }
  }
  if (lv_bsO == "ngh1") {
    f_aKh(49);
    f_aKh(52);
    if (lv_bsU <= 10) {
      CreateItem("wlsd", lv_bsR, lv_bsS);
    }
  }
  if (lv_bsO == "n004") {
    f_aKh(50);
  }
  if (lv_bsO == "nowb") {
    f_aKh(50);
  }
  if (lv_bsO == "nwns") {
    f_aKh(50);
  }
  if (lv_bsO == "ntks") {
    if (GetRandomInt(1, 40) <= 1) {
      CreateItem("woms", lv_bsR, lv_bsS);
    }
  }
  if (lv_bsO == "nmgd") {
    if (lv_bsU <= 5) {
      CreateItem("woms", lv_bsR, lv_bsS);
    }
  }
  if (lv_bsO == "nrvs") {
    if (lv_bsU <= 10) {
      CreateItem("woms", lv_bsR, lv_bsS);
    }
  }
  if (lv_bsO == "ndqt") {
    f_aKh(51);
    CreateItem(gv_alJ.getInt(150 + GetRandomInt(0, 4)), lv_bsR, lv_bsS);
    KillDestructable(gv_akX);
    ShowUnit(gv_akA, true);
    f_aJZ(53);
    PolledWait(400 / gv_aal);
    gv_akt = CreateUnit(Player(10), "ndqt", 3931, -14074, 28);
    f_brS();
    DisplayTimedTextToForce(gv_alq, 5, "Medusa has revived.");
  }
  if (lv_bsO == "nanw") {
    CreateItem(gv_alJ.getInt(180), lv_bsR, lv_bsS);
    f_aKh(58);
  }
  if (lv_bsO == "nwld") {
    CreateItem(gv_alJ.getInt(202 + GetRandomInt(0, 4)), lv_bsR, lv_bsS);
    gv_anK = true;
    DisableTrigger(gv_aiF);
  }
  if (lv_bsO == "nbdm") {
    CreateItem(gv_alJ.getInt(202 + GetRandomInt(0, 4)), lv_bsR, lv_bsS);
    gv_anL = true;
  }
  if (lv_bsO == "npfm") {
    CreateItem(gv_alJ.getInt(202 + GetRandomInt(0, 4)), lv_bsR, lv_bsS);
    DisableTrigger(gv_aiG);
  }
  if (lv_bsO == "n006") {
    gv_alg[197] = gv_alg.getInt(197) + 1;
    if (gv_alg.getInt(197) > 2) {
      f_aKh(55);
      CreateItem("I05W", lv_bsR, lv_bsS);
    }
  }
  if (lv_bsW > 30) {
    if (GetRandomInt(1, 100) <= 1) {
      CreateItem("whwd", lv_bsR, lv_bsS);
    }
  }
  if (lv_bsW > 45) {
    if (GetRandomInt(1, 300) <= 1) {
      CreateItem("I06E", lv_bsR, lv_bsS);
    }
  }
  if (lv_bsW > 60) {
    if (GetRandomInt(1, 400) <= 1) {
      CreateItem("I06D", lv_bsR, lv_bsS);
    }
  }
  if (lv_bsW > 80) {
    if (GetRandomInt(1, 800) == 1) {
      CreateItem("I064", lv_bsR, lv_bsS);
    }
    if (GetRandomInt(1, 800) == 1) {
      CreateItem("I067", lv_bsR, lv_bsS);
    }
    if (GetRandomInt(1, 1000) == 1) {
      CreateItem("I06B", lv_bsR, lv_bsS);
    }
  }
  if (lv_bsW > 100) {
    if (SubString(GetUnitName(lv_bsN), 4, 5) == "A") {
      if (GetRandomInt(1, 100) <= 10) {
        CreateItem("I01H", lv_bsR, lv_bsS);
      }
    } else {
      if (GetRandomInt(1, 100) <= 1) {
        CreateItem("I01H", lv_bsR, lv_bsS);
      }
    }
  }
  lv_bsN = null;
  lv_bsP = null;
  lv_bsQ = null;
}
function f_bsX() {
  var lv_bsY = GetTriggerUnit();
  var lv_bsZ = 400 / gv_aal;
  var lv_bta = 0;
  do {
    if (lv_bta > 8) {
      break;
    }
    if (lv_bsY == gv_aaU[lv_bta]) {
      lv_bta = 12;
    }
    lv_bta = lv_bta + 1;
  } while (true);
  if (lv_bta == 13) {
    PolledWait(lv_bsZ);
    ReviveHero(lv_bsY, GetUnitX(lv_bsY), GetUnitY(lv_bsY), false);
    if (lv_bsY == gv_aaU[1]) {
      f_aBS(1, gv_aaU[1], gv_acD, gv_aiw);
    } else {
      if (lv_bsY == gv_aaU[2]) {
        f_aBS(1, gv_aaU[2], gv_afa, gv_aix);
      } else {
        if (lv_bsY == gv_aaU[3]) {
          f_aBS(1, gv_aaU[3], gv_afm, gv_aiy);
        } else {
          if (lv_bsY == gv_aaU[4]) {
            PauseTimer(gv_anS);
            f_aBS(1, gv_aaU[4], gv_ael, gv_aiz);
          } else {
            if (lv_bsY == gv_aaU[5]) {
              f_bqd();
            } else {
              if (lv_bsY == gv_aaU[6]) {
                PauseTimer(gv_anY);
                ForGroup(gv_anZ, f_aNR);
                GroupClear(gv_anZ);
                f_aBS(1, gv_aaU[6], gv_aeZ, gv_aiB);
              } else {
                if (lv_bsY == gv_aaU[7]) {
                  if (GetWidgetLife(gv_aob) > 0.405) {
                    KillUnit(gv_aob);
                  }
                  PauseTimer(gv_aoc);
                  f_aBS(1, gv_aaU[7], gv_adJ, gv_aiC);
                } else {
                  if (lv_bsY == gv_aaU[8]) {
                    if (GetWidgetLife(gv_aof) > 0.405) {
                      KillUnit(gv_aof);
                    }
                    if (GetWidgetLife(gv_aoh) > 0.405) {
                      KillUnit(gv_aoh);
                    }
                    PauseTimer(gv_aoe);
                    f_aBS(1, gv_aaU[8], gv_adm, gv_aiD);
                  } else {
                    if (lv_bsY == gv_aaU[9]) {
                      SaveInteger(gv_abL, 0, GetHandleId(gv_aoq), 2);
                      PauseTimer(gv_aoq);
                      PauseTimer(gv_aor);
                      ForGroup(gv_aos, f_aNR);
                      GroupClear(gv_aos);
                      f_aBS(1, gv_aaU[9], gv_aey, gv_aiK);
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
    DisplayTextToPlayer(
      GetLocalPlayer(),
      0,
      0,
      GetUnitName(lv_bsY) + " has revived"
    );
  }
  lv_bsY = null;
}
function f_btb() {
  var lv_btc = GetDyingUnit();
  var lv_btd = GetKillingUnit();
  var lv_bte = GetOwningPlayer(lv_btd);
  var lv_btf = 0;
  var lv_btg = GetUnitX(lv_btc);
  var lv_bth = GetUnitY(lv_btc);
  var lv_bti = GetPlayerId(lv_bte);
  var lv_btj = 10;
  if (GetUnitTypeId(lv_btc) == "Nalc") {
    CreateItem(gv_alJ.getInt(350 + GetRandomInt(0, 11)), lv_btg, lv_bth);
    lv_btf = 1;
  }
  if (GetUnitTypeId(lv_btc) == "Nbst") {
    if (lv_btc == gv_aaU[2]) {
      CreateItem(gv_alJ.getInt(260 + GetRandomInt(0, 11)), lv_btg, lv_bth);
      lv_btf = 2;
    }
  }
  if (GetUnitTypeId(lv_btc) == "Obla") {
    CreateItem(gv_alJ.getInt(515 + GetRandomInt(0, 11)), lv_btg, lv_bth);
    CreateItem(gv_alJ.getInt(260 + GetRandomInt(0, 11)), lv_btg, lv_bth);
    lv_btf = 3;
  }
  if (GetUnitTypeId(lv_btc) == "Nbrn") {
    CreateItem(gv_alJ.getInt(275 + GetRandomInt(0, 11)), lv_btg, lv_bth);
    CreateItem(gv_alJ.getInt(335 + GetRandomInt(0, 11)), lv_btg, lv_bth);
    lv_btf = 4;
  }
  if (GetUnitTypeId(lv_btc) == "Hmkg") {
    CreateItem(gv_alJ.getInt(260 + GetRandomInt(0, 11)), lv_btg, lv_bth);
    CreateItem(gv_alJ.getInt(275 + GetRandomInt(0, 11)), lv_btg, lv_bth);
    CreateItem(gv_alJ.getInt(335 + GetRandomInt(0, 11)), lv_btg, lv_bth);
    lv_btf = 5;
  }
  if (GetUnitTypeId(lv_btc) == "Npbm") {
    if (GetRandomInt(1, 50) == 1) {
      CreateItem(gv_alJ.getInt(155), lv_btg, lv_bth);
    }
    CreateItem(gv_alJ.getInt(260 + GetRandomInt(0, 11)), lv_btg, lv_bth);
    CreateItem(gv_alJ.getInt(275 + GetRandomInt(0, 11)), lv_btg, lv_bth);
    CreateItem(gv_alJ.getInt(130 + GetRandomInt(0, 8)), lv_btg, lv_bth);
    f_aJF(lv_btc, 1);
    lv_btf = 6;
  }
  if (GetUnitTypeId(lv_btc) == "Nngs") {
    if (GetRandomInt(1, 50) == 1) {
      CreateItem(gv_alJ.getInt(155), lv_btg, lv_bth);
    }
    if (
      UnitHasItemOfTypeBJ(gv_ale[lv_bti], "tbar") ||
      UnitHasItemOfTypeBJ(gv_ale[lv_bti], "tfar")
    ) {
      lv_btj = R2I(10 * f_azm(gv_ale[lv_bti]));
    }
    if (GetRandomInt(0, 100) < lv_btj) {
      CreateItem(gv_alJ.getInt(209), lv_btg, lv_bth);
    }
    CreateItem("I05M", lv_btg, lv_bth);
    CreateItem("I05M", lv_btg, lv_bth);
    f_aJF(lv_btc, 1);
    lv_btf = 7;
  }
  if (GetUnitTypeId(lv_btc) == "Nplh") {
    if (GetRandomInt(1, 50) == 1) {
      CreateItem(gv_alJ.getInt(155), lv_btg, lv_bth);
    }
    if (f_aym(gv_ale[lv_bti])) {
      lv_btj = R2I(13 * f_azo(gv_ale[lv_bti]));
    }
    if (GetRandomInt(0, 100) < lv_btj) {
      CreateItem(gv_alJ.getInt(181), lv_btg, lv_bth);
    }
    CreateItem("I05M", lv_btg, lv_bth);
    CreateItem("I05M", lv_btg, lv_bth);
    f_aJF(lv_btc, 1);
    lv_btf = 8;
  }
  if (GetUnitTypeId(lv_btc) == "Ntin") {
    CreateItem("I01Y", lv_btg, lv_bth);
    CreateItem("woms", lv_btg, lv_bth);
    if (GetRandomInt(1, 20) == 1) {
      CreateItem(gv_alJ.getInt(365 + GetRandomInt(0, 5)), lv_btg, lv_bth);
    }
    lv_btf = 9;
  }
  if (lv_btf > 5) {
    if (GetRandomInt(1, 4) == 1) {
      CreateItem("I01H", lv_btg, lv_bth);
    }
  }
  if (lv_btf > 0) {
    if (lv_btf > 4) {
      if (f_aJz(lv_bti, "I06F") == false) {
        if (GetRandomInt(1, R2I(23 / f_azm(gv_ale[lv_bti]))) == 1) {
          SetItemPlayer(
            CreateItem("I06F", lv_btg, lv_bth),
            GetOwningPlayer(lv_btd),
            false
          );
        }
      } else {
        if (GetRandomInt(1, 35) == 1) {
          CreateItem("I06F", lv_btg, lv_bth);
        }
      }
    }
    gv_alf[lv_btf + 7000] =
      S2S(gv_alf[lv_btf + 7000] + " -- |cffffd700") +
      GetPlayerName(GetOwningPlayer(lv_btd)) +
      "|r";
    f_aKh(lv_btf);
    gv_alg[7000] = gv_alg.getInt(7000) + 1;
    lv_bti = 0;
    do {
      if (lv_bti > 7) {
        break;
      }
      if (
        GetPlayerState(Player(lv_bti), PLAYER_STATE_RESOURCE_FOOD_USED) < 181
      ) {
        SetPlayerState(
          Player(lv_bti),
          PLAYER_STATE_RESOURCE_FOOD_USED,
          GetPlayerState(Player(lv_bti), PLAYER_STATE_RESOURCE_FOOD_USED) + 20
        );
      } else {
        SetPlayerState(Player(lv_bti), PLAYER_STATE_RESOURCE_FOOD_USED, 200);
      }
      lv_bti = lv_bti + 1;
    } while (true);
  }
  lv_btc = null;
  lv_btd = null;
  lv_bte = null;
}
function f_btk() {
  var lv_btl = CreateTrigger();
  TriggerRegisterPlayerUnitEvent(
    lv_btl,
    Player(11),
    EVENT_PLAYER_UNIT_DEATH,
    null
  );
  TriggerAddAction(lv_btl, f_btb);
}
function f_btm() {
  var lv_btn = GetDyingUnit();
  var lv_bto = GetKillingUnit();
  var lv_btp = GetUnitTypeId(lv_btn);
  var lv_btq = GetUnitX(lv_btn);
  var lv_btr = GetUnitY(lv_btn);
  if (IsUnitType(lv_btn, UNIT_TYPE_ANCIENT)) {
    return;
  }
  if (gv_alg.getInt(17 + 7000) == 2) {
    if (lv_btp == "nwlt") {
      if (GetRandomInt(1, 2) <= 1) {
        CreateItem("I057", lv_btq, lv_btr);
      }
    }
  }
  if (gv_alg.getInt(24 + 7000) == 2) {
    if (lv_btp == "nhrr") {
      if (GetRandomInt(1, 2) <= 1) {
        CreateItem("I05B", lv_btq, lv_btr);
      }
    }
  }
  if (gv_alg.getInt(28 + 7000) == 2) {
    if (lv_btp == "nmgw") {
      if (GetRandomInt(1, 2) <= 1) {
        CreateItem("I05C", lv_btq, lv_btr);
      }
    }
  }
  if (gv_alg.getInt(36 + 7000) == 2) {
    if (lv_btp == "nsat" || lv_btp == "nstl" || lv_btp == "nsth") {
      if (GetRandomInt(1, 10) <= 3) {
        CreateItem("I05E", lv_btq, lv_btr);
      }
    }
  }
  if (gv_alg.getInt(43 + 7000) == 2) {
    if (lv_btp == "nfrl" || lv_btp == "nfrb" || lv_btp == "nfrg") {
      if (GetRandomInt(1, 10) <= 3) {
        CreateItem("I05J", lv_btq, lv_btr);
      }
    }
  }
  if (gv_alg.getInt(47 + 7000) == 2) {
    if (lv_btp == "ncks" || lv_btp == "ncim") {
      if (GetRandomInt(1, 10) <= 3) {
        CreateItem("I05K", lv_btq, lv_btr);
      }
    }
  }
  if (gv_alg.getInt(35 + 7000) == 2 || gv_alg.getInt(35 + 7000) == 1) {
    if (lv_btp == "hbew") {
      DisplayTimedTextToPlayer(
        Player(0),
        0,
        0,
        10,
        "caravan died " + I2S(gv_alg.getInt(35 + 7000))
      );
      DestroyQuest(gv_alk[35]);
      gv_alg[35 + 7000] = 0;
      f_aJZ(35);
    }
  }
  lv_btn = null;
  lv_bto = null;
}
function f_bts() {
  var lv_btt = I2R(GetRandomInt(8, 14) * 30);
  f_aBt("Abilities\\Spells\\Human\\CallToArms\\HumanCallToArmsWhat1.wav");
  TimerStart(gv_alC, lv_btt, false, null);
  TriggerRegisterTimerExpireEvent(gv_aiT, gv_alC);
  TimerStart(gv_alD, lv_btt - 60, false, null);
  TriggerRegisterTimerExpireEvent(gv_aiS, gv_alD);
  DestroyTimerDialog(gv_alj[8]);
  gv_alj[8] = CreateTimerDialog(gv_alC);
  TimerDialogSetTitle(gv_alj[8], "Next Attack");
  TimerDialogDisplay(gv_alj[8], true);
  DestroyTrigger(gv_aiR);
}
function f_btu() {
  var lv_btv = GetEnumUnit();
  if (GetWidgetLife(lv_btv) < 0.405) {
    GroupRemoveUnit(gv_alp, lv_btv);
  } else {
    IssuePointOrderById(
      lv_btv,
      851986,
      GetRandomReal(6848, 8000),
      GetRandomReal(12160, 12544)
    );
    SetUnitLifePercentBJ(lv_btv, 100);
  }
  lv_btv = null;
}
function f_btw() {
  var lv_btx = 0;
  do {
    if (lv_btx > 7) {
      break;
    }
    gv_alg[280 + lv_btx] = 0;
    lv_btx = lv_btx + 1;
  } while (true);
  f_aBt("Abilities\\Spells\\Human\\CallToArms\\HumanCallToArmsWhat1.wav");
  DisplayTimedTextToForce(
    gv_alq,
    20,
    S2S("   " + gv_alf[75]) + "Serius|r - " + gv_alf[90 + GetRandomInt(0, 4)]
  );
  ForGroup(gv_alp, f_btu);
}
function f_bty() {
  var lv_btz = R2I(gv_alg.getInt(194) / 15) + 900;
  var lv_btA = 7392;
  var lv_btB = 14432;
  f_aNG(4, gv_alJ.getInt(lv_btz), Player(11), lv_btA, lv_btB, bj_UNIT_FACING);
  f_aNG(
    3,
    gv_alJ.getInt(lv_btz + 1),
    Player(11),
    lv_btA,
    lv_btB,
    bj_UNIT_FACING
  );
  f_aNG(
    2,
    gv_alJ.getInt(lv_btz + 2),
    Player(11),
    lv_btA,
    lv_btB,
    bj_UNIT_FACING
  );
  TriggerSleepAction(8);
}
function f_btC() {
  var lv_btD = 0;
  var lv_btE = 0;
  var lv_btF = 0;
  var lv_btG = 0;
  var lv_btH = 0.0;
  gv_alg[194] = 0;
  do {
    if (lv_btF > 7) {
      break;
    }
    if (
      GetPlayerController(Player(lv_btF)) == MAP_CONTROL_USER &&
      GetPlayerSlotState(Player(lv_btF)) == PLAYER_SLOT_STATE_PLAYING
    ) {
      if (GetHeroLevel(gv_ale[lv_btF]) > lv_btG) {
        lv_btG = GetHeroLevel(gv_ale[lv_btF]);
      }
      lv_btD = lv_btD + GetHeroLevel(gv_ale[lv_btF]);
      lv_btE = lv_btE + 1;
    }
    lv_btF = lv_btF + 1;
  } while (true);
  gv_alg[194] = R2I(lv_btD / lv_btE);
  gv_alg[195] = lv_btE;
  if (lv_btG < 1) {
    lv_btG = 10;
  }
  DestroyTimerDialog(gv_alj[8]);
  QuestMessageBJ(
    gv_alq,
    1,
    "Hades has unleashed a horde of demons to attack Athens. |cffff0000Threat Level: " +
      I2S(gv_alg.getInt(194)) +
      "|r"
  );
  PingMinimapForForce(gv_alq, 7392, 14432, 15);
  f_bty();
  f_bty();
  f_bty();
  gv_alI = CreateUnit(Player(11), "E003", 7392, 14432, bj_UNIT_FACING);
  SetHeroLevel(gv_alI, lv_btG, false);
  lv_btF = 4;
  do {
    if (lv_btF > 7) {
      break;
    }
    if (
      GetPlayerController(Player(lv_btF)) == MAP_CONTROL_USER &&
      GetPlayerSlotState(Player(lv_btF)) == PLAYER_SLOT_STATE_PLAYING
    ) {
      gv_alg[194] = GetHeroLevel(gv_ale[lv_btF]);
      f_bty();
    }
    lv_btF = lv_btF + 1;
  } while (true);
  DestroyTimerDialog(gv_alj[8]);
  lv_btH = I2R(GetRandomInt(599 + R2I(lv_btD / lv_btE) * 3, 1200));
  TimerStart(gv_alC, lv_btH, false, null);
  TimerStart(gv_alD, lv_btH - 60, false, null);
  gv_alj[8] = CreateTimerDialog(gv_alC);
  TimerDialogSetTitle(gv_alj[8], "Next Attack");
  TimerDialogDisplay(gv_alj[8], true);
}
function f_btI() {
  var lv_btJ = GetTriggerUnit();
  if (GetOwningPlayer(lv_btJ) == Player(11)) {
    IssuePointOrderById(lv_btJ, gv_aas, GetUnitX(gv_ajS), GetUnitY(gv_ajS));
  }
  lv_btJ = null;
}
function f_btK() {
  var lv_btL = GetEnumUnit();
  IssuePointOrderById(lv_btL, gv_aas, GetUnitX(gv_ajS), GetUnitY(gv_ajS));
  lv_btL = null;
}
function f_btM() {
  ForGroupBJ(f_aBz(Rect(5824, 8352, 9088, 14656), Player(11)), f_btK);
}
function f_btN() {
  var lv_btO = 0;
  do {
    if (lv_btO > 7) {
      break;
    }
    DestroyTimerDialog(gv_alj[lv_btO]);
    lv_btO = lv_btO + 1;
  } while (true);
  ClearTextMessagesBJ(f_aBE(GetTriggerPlayer()));
  DisplayTextToForce(
    gv_alq,
    "Athens has been destroyed!  All is lost in the West!  Evil has triumphed!"
  );
  DisplayTextToForce(gv_alq, "    ");
  DisplayTextToForce(
    gv_alq,
    "    Save your character!  The game will end in two minutes."
  );
  TriggerSleepAction(120);
  lv_btO = 0;
  do {
    if (lv_btO > 7) {
      break;
    }
    CustomDefeatBJ(Player(-1 + bj_forLoopAIndex), "Defeat!");
    lv_btO = lv_btO + 1;
  } while (true);
}
function f_btP() {
  var lv_btQ = GetTriggerUnit();
  var lv_btR = GetOwningPlayer(lv_btQ);
  var lv_btS = GetUnitTypeId(lv_btQ);
  var lv_btT = 0;
  if (lv_btR == Player(8)) {
    if (lv_btS == "hcth") {
      gv_alg[8100] = gv_alg.getInt(8100) - 1;
    }
    if (lv_btS == "nhea") {
      gv_alg[8101] = gv_alg.getInt(8101) - 1;
    }
    if (lv_btS == "hmil") {
      gv_alg[8102] = gv_alg.getInt(8102) - 1;
    }
    if (lv_btS == "hgry") {
      gv_alg[8103] = gv_alg.getInt(8103) - 1;
    }
    if (lv_btS == "uabo" || lv_btS == "edot") {
      do {
        if (lv_btT > 7) {
          break;
        }
        if (
          RectContainsCoords(
            gv_adW,
            GetUnitX(gv_ale[lv_btT]),
            GetUnitY(gv_ale[lv_btT])
          )
        ) {
          SetUnitPosition(gv_ale[lv_btT], -10176, -6928);
          PanCameraToTimedForPlayer(Player(lv_btT), -10176, -6928, 0);
          KillUnit(gv_ale[lv_btT]);
        }
        lv_btT = lv_btT + 1;
      } while (true);
      gv_alg[56 + 7100] = 0;
      gv_alg[56 + 7200] = 0;
      DestroyTimerDialog(gv_alj[9]);
      DestroyTimer(gv_alE);
      DisableTrigger(gv_agE);
      f_aKh(56);
    }
  }
  if (lv_btR == Player(9)) {
    if (IsUnitType(lv_btQ, UNIT_TYPE_HERO)) {
      if (
        (lv_btS == "Ewar" && gv_alg.getInt(57 + 7000) != 2) ||
        lv_btS == "Harf"
      ) {
        PolledWait(300);
      }
      ReviveHero(lv_btQ, 13632, 14240, true);
      IssuePointOrderById(lv_btQ, 851986, 8052.5, 9442.8);
    }
    if (lv_btS == "Ewar" && gv_alg.getInt(57 + 7000) == 2) {
      UnitRemoveAbility(lv_btQ, "A08Q");
      lv_btT = gv_alg.getInt(168) - 8;
      SetPlayerAllianceStateBJ(Player(lv_btT), Player(9), 2);
      SetPlayerAllianceStateBJ(Player(9), Player(lv_btT), 2);
      SetUnitPosition(gv_ale[lv_btT], 11041, 6050);
      SetUnitPosition(gv_ale[lv_btT + 8], 10900, 6200);
      PanCameraToTimedForPlayer(Player(lv_btT), 11041, 6050, 0);
      UnitAddItemByIdSwapped("I060", gv_ale[lv_btT + 8]);
      f_aKh(57);
      gv_alg[168] = 0;
      gv_alg[188] = 0;
    }
  }
  lv_btQ = null;
  lv_btR = null;
}
function f_btU() {
  var lv_btV;
  var lv_btW;
  var lv_btX = null;
  var lv_btY = 0;
  var lv_btZ = null;
  if (gv_alg.getInt(8100) < 5) {
    lv_btY = "hcth";
    gv_alg[8100] = gv_alg.getInt(8100) + 1;
  } else {
    if (gv_alg.getInt(8101) < 3) {
      lv_btY = "nhea";
      gv_alg[8101] = gv_alg.getInt(8101) + 1;
    } else {
      if (gv_alg.getInt(8102) < 9) {
        lv_btY = "hmil";
        gv_alg[8102] = gv_alg.getInt(8102) + 1;
      } else {
        if (gv_alg.getInt(8103) < 8) {
          lv_btY = "hgry";
          gv_alg[8103] = gv_alg.getInt(8103) + 1;
        }
      }
    }
  }
  lv_btZ = f_aBz(gv_adP, Player(8));
  lv_btX = GroupPickRandomUnit(lv_btZ);
  lv_btV = f_aNC(gv_acC, "x");
  lv_btW = f_aNC(gv_acC, "y");
  IssuePointOrderById(lv_btX, 851986, lv_btV, lv_btW);
  if (lv_btY != 0) {
    lv_btX = CreateUnit(Player(8), lv_btY, 10200, 8500, 0.0);
    GroupAddUnit(gv_alp, lv_btX);
    lv_btV = f_aNC(gv_acC, "x");
    lv_btW = f_aNC(gv_acC, "y");
    IssuePointOrderById(lv_btX, 851986, lv_btV, lv_btW);
  }
  lv_btZ = f_aBz(gv_acC, Player(8));
  lv_btX = GroupPickRandomUnit(lv_btZ);
  if (GetRandomInt(1, 10) == 1) {
    lv_btV = f_aNC(gv_ade, "x");
    lv_btW = f_aNC(gv_ade, "y");
    IssuePointOrderById(lv_btX, 851986, lv_btV, lv_btW);
  }
  if (GetRandomInt(1, 10) == 1) {
    lv_btZ = f_aBz(gv_ade, Player(8));
    lv_btX = GroupPickRandomUnit(lv_btZ);
    lv_btV = f_aNC(gv_acC, "x");
    lv_btW = f_aNC(gv_acC, "y");
    IssuePointOrderById(lv_btX, 851986, lv_btV, lv_btW);
  }
  lv_btX = null;
  DestroyGroup(lv_btZ);
}
function f_bua() {
  var lv_bub = GetRandomInt(0, 4);
  DestroyEffect(gv_alh[108 + lv_bub]);
  gv_all[108 + lv_bub] = GetRandomLocInRect(Rect(6752, 12768, 7968, 13920));
  gv_alh[108 + lv_bub] = AddSpecialEffectLoc(
    "Abilities\\Spells\\Orc\\CommandAura\\CommandAura.mdl",
    gv_all[108 + lv_bub]
  );
}
function f_buc() {
  var lv_bud = 0;
  var lv_bue = 0;
  var lv_buf;
  var lv_bug;
  do {
    if (lv_bud > 4) {
      break;
    }
    lv_bue = 0;
    do {
      if (lv_bue > 7) {
        break;
      }
      if (GetPlayerSlotState(Player(lv_bue)) == PLAYER_SLOT_STATE_PLAYING) {
        lv_buf = GetUnitX(gv_ale[lv_bue]);
        lv_bug = GetUnitY(gv_ale[lv_bue]);
        if (
          f_aMe(
            GetLocationX(gv_all[108 + lv_bud]),
            GetLocationY(gv_all[108 + lv_bud]),
            lv_buf,
            lv_bug
          ) < 150
        ) {
          UnitDamageTarget(
            gv_ale[lv_bue],
            gv_ale[lv_bue],
            GetUnitStateSwap(UNIT_STATE_MAX_LIFE, gv_ale[lv_bue]) * 0.1,
            true,
            false,
            ATTACK_TYPE_NORMAL,
            DAMAGE_TYPE_MAGIC,
            WEAPON_TYPE_WHOKNOWS
          );
          DestroyEffect(
            AddSpecialEffectTarget(
              "Abilities\\Spells\\Undead\\Impale\\ImpaleHitTarget.mdl",
              gv_ale[lv_bue],
              "overhead"
            )
          );
        }
      }
      lv_bue = lv_bue + 1;
    } while (true);
    lv_bud = lv_bud + 1;
  } while (true);
}
function f_buh() {
  var lv_bui = GetRectCenterX(gv_afq);
  var lv_buj = GetRectCenterY(gv_afq);
  var lv_buk;
  var lv_bul;
  var lv_bum = GetRandomReal(6688, 8128);
  var lv_bun = 12500;
  var lv_buo;
  var lv_bup;
  var lv_buq;
  var lv_bur;
  do {
    if (lv_buj < lv_bun) {
      break;
    }
    lv_buo = 1;
    do {
      if (lv_buo > 3) {
        break;
      }
      if (lv_buo == 3) {
        lv_bup = bj_RADTODEG * Atan2(lv_bun - lv_buj, lv_bum - lv_bui);
        lv_buq = 100;
      } else {
        lv_bup = 20 * lv_buo * lv_buo + GetRandomInt(113, 117) * lv_buo;
        lv_buq = GetRandomReal(75, 125);
      }
      lv_buk = lv_bui + lv_buq * Cos(lv_bup * bj_DEGTORAD);
      lv_bul = lv_buj + lv_buq * Sin(lv_bup * bj_DEGTORAD);
      gv_alh[100 + lv_buo] = AddSpecialEffect(
        "Abilities\\Spells\\Human\\FlameStrike\\FlameStrikeEmbers.mdl",
        lv_buk,
        lv_bul
      );
      lv_bur = 0;
      do {
        if (lv_bur > 7) {
          break;
        }
        if (
          f_aMe(
            lv_buk,
            lv_bul,
            GetUnitX(gv_ale[lv_bur]),
            GetUnitY(gv_ale[lv_bur])
          ) < 200
        ) {
          UnitDamageTarget(
            gv_ale[lv_bur],
            gv_ale[lv_bur],
            ((lv_buk - lv_bum) / 100) *
              (GetUnitStateSwap(UNIT_STATE_MAX_LIFE, gv_ale[lv_bur]) * 0.1),
            true,
            false,
            ATTACK_TYPE_NORMAL,
            DAMAGE_TYPE_MAGIC,
            WEAPON_TYPE_WHOKNOWS
          );
        }
        lv_bur = lv_bur + 1;
      } while (true);
      if (lv_buo == 3) {
        lv_bui = lv_buk;
      }
      lv_buo = lv_buo + 1;
    } while (true);
    TriggerSleepAction(0.05);
    DestroyEffect(gv_alh[101]);
    DestroyEffect(gv_alh[102]);
    DestroyEffect(gv_alh[103]);
    lv_buj = lv_buj - 75;
  } while (true);
}
function f_bus() {
  var lv_but = GetTriggerUnit();
  if (IsUnitType(lv_but, UNIT_TYPE_HERO)) {
    EnableTrigger(gv_ajd);
    ExecuteFunc("f_buu");
  }
  lv_but = null;
}
function f_buu() {
  var lv_buv = GetRandomInt(0, 3);
  var lv_buw = GetRandomReal(7040, 7936);
  var lv_bux = GetRandomReal(13920, 14208);
  var lv_buy = 0;
  var lv_buz = 0;
  DestroyEffect(gv_alh[104 + lv_buv]);
  gv_alh[104 + lv_buv] = AddSpecialEffect(
    "Abilities\\Spells\\Human\\FlameStrike\\FlameStrike1.mdl",
    lv_buw,
    lv_bux
  );
  lv_buy = 0;
  do {
    if (lv_buy > 7) {
      break;
    }
    if (GetPlayerSlotState(Player(lv_buy)) == PLAYER_SLOT_STATE_PLAYING) {
      if (
        f_aMe(
          GetUnitX(gv_ale[lv_buy]),
          GetUnitY(gv_ale[lv_buy]),
          lv_buw,
          lv_bux
        ) < 250
      ) {
        UnitDamageTarget(
          gv_ale[lv_buy],
          gv_ale[lv_buy],
          250,
          true,
          false,
          ATTACK_TYPE_NORMAL,
          DAMAGE_TYPE_MAGIC,
          WEAPON_TYPE_WHOKNOWS
        );
      }
      if (RectContainsUnit(gv_adK, gv_ale[lv_buy])) {
        lv_buz = 1;
      }
    }
    lv_buy = lv_buy + 1;
  } while (true);
  if (lv_buz == 0) {
    DisableTrigger(gv_ajd);
  }
}
function f_buA() {
  var lv_buB = GetTriggerUnit();
  var lv_buC = GetUnitX(lv_buB);
  var lv_buD = GetUnitY(lv_buB);
  if (IsUnitType(lv_buB, UNIT_TYPE_HERO)) {
    if (gv_alg.getInt(198) == 0) {
      gv_alg[198] = 1;
      lv_buB = CreateUnit(
        gv_amG,
        gv_alJ.getInt(920 + GetRandomInt(0, 3)),
        lv_buC,
        lv_buD + 100,
        270
      );
      IssuePointOrderById(lv_buB, gv_aas, GetUnitX(gv_ajS), GetUnitY(gv_ajS));
      TriggerSleepAction(2);
      gv_alg[198] = 0;
    }
  }
  lv_buB = null;
}
function f_buE() {
  var lv_buF = GetExpiredTimer();
  SetUnitOwner(gv_akJ, Player(9), true);
  f_aIM(lv_buF);
  lv_buF = null;
}
function f_buG() {
  var lv_buH = GetExpiredTimer();
  var lv_buI = gv_akJ;
  var lv_buJ = CreateTextTag();
  var lv_buK = GetUnitX(lv_buI);
  var lv_buL = GetUnitY(lv_buI);
  SetTextTagText(
    lv_buJ,
    I2S(
      R2I(
        GetUnitState(lv_buI, UNIT_STATE_MAX_LIFE) -
          GetUnitState(lv_buI, UNIT_STATE_LIFE)
      )
    ) + " Total Damage",
    0.023
  );
  SetTextTagPos(lv_buJ, lv_buK + 5, lv_buL, 50);
  SetTextTagVelocity(lv_buJ, 0.0, 0.036);
  SetTextTagPermanent(lv_buJ, false);
  SetTextTagLifespan(lv_buJ, 5);
  SetTextTagVisibility(lv_buJ, true);
  SetWidgetLife(lv_buI, GetUnitState(lv_buI, UNIT_STATE_MAX_LIFE));
  SetUnitOwner(lv_buI, Player(14), true);
  f_aIM(lv_buH);
  gv_alg[178] = 0;
  lv_buI = null;
  lv_buJ = null;
  lv_buH = null;
}
function f_buM() {
  if (gv_alg.getInt(178) == 0) {
    gv_alg[178] = 1;
    TimerStart(f_aIL(), 1, false, f_buE);
    TimerStart(f_aIL(), 2, false, f_buG);
  }
}
function f_buN() {
  var lv_buO = GetExpiredTimer();
  SetUnitOwner(gv_ajR, Player(9), true);
  f_aIM(lv_buO);
  lv_buO = null;
}
function f_buP() {
  var lv_buQ = gv_ajR;
  var lv_buR = CreateTextTag();
  var lv_buS = GetUnitX(lv_buQ);
  var lv_buT = GetUnitY(lv_buQ);
  SetTextTagText(
    lv_buR,
    I2S(
      R2I(
        GetUnitState(lv_buQ, UNIT_STATE_MAX_LIFE) -
          GetUnitState(lv_buQ, UNIT_STATE_LIFE)
      )
    ) + " Damage",
    0.023
  );
  SetTextTagPos(lv_buR, lv_buS + 5, lv_buT, 50);
  SetTextTagVelocity(lv_buR, 0.0, 0.036);
  SetTextTagPermanent(lv_buR, false);
  SetTextTagLifespan(lv_buR, 5);
  SetTextTagVisibility(lv_buR, true);
  SetWidgetLife(lv_buQ, GetUnitState(lv_buQ, UNIT_STATE_MAX_LIFE));
  SetUnitOwner(lv_buQ, Player(14), true);
  gv_alg[179] = 0;
  lv_buQ = null;
  lv_buR = null;
}
function f_buU() {
  if (gv_alg.getInt(179) == 0) {
    gv_alg[179] = 1;
    TimerStart(f_aIL(), 1, false, f_buN);
    TimerStart(f_aIL(), 2, false, f_buP);
  }
}
function f_buV() {
  gv_alA = CreateMultiboard();
  MultiboardSetColumnCount(gv_alA, 2);
  MultiboardSetTitleText(gv_alA, "Battle Arena Duel");
}
function f_buW() {
  var lv_buX = 10;
  var lv_buY = 0;
  var lv_buZ = null;
  DestroyTimerDialog(gv_alj[9]);
  if (gv_alg.getInt(188) == 1 || gv_alg.getInt(188) == 2) {
    QuestMessageBJ(
      gv_alq,
      1,
      "|cffff0000No duel.  Team " +
        I2S(gv_alg.getInt(188)) +
        " did not enter the battle arena.|r"
    );
    gv_alg[188] = 0;
    gv_alg[189] = 10;
    gv_alg[190] = 10;
    lv_buZ = GetRectCenter(gv_acH);
    PingMinimapLocForForce(gv_alq, lv_buZ, 5);
    lv_buY = 0;
    do {
      if (lv_buY > 7) {
        break;
      }
      if (gv_alg.getInt(180 + lv_buY) > 0) {
        gv_alg[180 + lv_buY] = 0;
        lv_buZ = GetRandomLocInRect(gv_acI);
        SetUnitColor(gv_ale[lv_buY], ConvertPlayerColor(lv_buY));
        SetUnitPositionLoc(gv_ale[lv_buY], lv_buZ);
        PanCameraToTimedLocForPlayer(Player(lv_buY), lv_buZ, 0);
      }
      lv_buY = lv_buY + 1;
    } while (true);
    MultiboardDisplay(gv_alA, false);
    MultiboardDisplay(gv_aly, false);
    MultiboardDisplay(gv_alz, true);
    MultiboardMinimize(gv_alz, true);
    lv_buZ = null;
    RemoveLocation(lv_buZ);
    return;
  }
  gv_alg[188] = 4;
  QuestMessageBJ(
    gv_alq,
    1,
    "|cffff0000  FIGHT NOW!!|r -- TEAM 1 with " +
      GetPlayerName(Player(gv_alg.getInt(189))) +
      " vs TEAM 2 with " +
      GetPlayerName(Player(gv_alg.getInt(190))) +
      "."
  );
  lv_buY = 0;
  do {
    if (lv_buY > 7) {
      break;
    }
    lv_buX = 0;
    do {
      if (lv_buX > 7) {
        break;
      }
      if (lv_buY != lv_buX) {
        if (gv_alg.getInt(180 + lv_buY) == gv_alg.getInt(180 + lv_buX)) {
          SetPlayerAllianceStateBJ(Player(lv_buY), Player(lv_buX), 2);
        }
        if (
          gv_alg.getInt(180 + lv_buY) > 0 &&
          gv_alg.getInt(180 + lv_buX) == 0
        ) {
          SetPlayerAllianceStateBJ(Player(lv_buY), Player(lv_buX), 6);
        }
        if (
          gv_alg.getInt(180 + lv_buY) == 0 &&
          gv_alg.getInt(180 + lv_buX) > 0
        ) {
          SetPlayerAllianceStateBJ(Player(lv_buY), Player(lv_buX), 6);
        }
        if (
          gv_alg.getInt(180 + lv_buY) == 1 &&
          gv_alg.getInt(180 + lv_buX) == 2
        ) {
          SetPlayerAllianceStateBJ(Player(lv_buY), Player(lv_buX), 0);
        }
        if (
          gv_alg.getInt(180 + lv_buY) == 2 &&
          gv_alg.getInt(180 + lv_buX) == 1
        ) {
          SetPlayerAllianceStateBJ(Player(lv_buY), Player(lv_buX), 0);
        }
      }
      lv_buX = lv_buX + 1;
    } while (true);
    if (gv_alg.getInt(180 + lv_buY) > 0) {
      SuspendHeroXP(gv_ale[lv_buY], !false);
    }
    lv_buY = lv_buY + 1;
  } while (true);
  lv_buZ = null;
  RemoveLocation(lv_buZ);
}
function f_bva() {
  var lv_bvb = GetTriggerUnit();
  var lv_bvc = GetTriggerPlayer();
  var lv_bvd = GetPlayerId(lv_bvc);
  var lv_bve = null;
  var lv_bvf = 0;
  if (
    GetItemTypeId(GetManipulatedItem()) != "I05N" &&
    GetItemTypeId(GetManipulatedItem()) != "I05O"
  ) {
    RemoveLocation(lv_bve);
    return;
  }
  if (gv_alg.getInt(188) == 4) {
    DisplayTextToForce(
      f_aBE(lv_bvc),
      "|cffff0000The battle arena is busy at the moment.|r"
    );
    RemoveLocation(lv_bve);
    return;
  }
  if (gv_alg.getInt(188) == 0) {
    lv_bvf = 0;
    do {
      if (lv_bvf > 7) {
        break;
      }
      gv_alg[180 + lv_bvf] = 0;
      lv_bvf = lv_bvf + 1;
    } while (true);
    gv_alg[189] = 10;
    gv_alg[190] = 10;
    lv_bvf = 0;
  }
  if (GetItemTypeId(GetManipulatedItem()) == "I05N") {
    lv_bvf = 1;
    lv_bve = GetRandomLocInRect(gv_aeX);
    if (gv_alg.getInt(188) == 2) {
      gv_alg[188] = 3;
    }
  }
  if (GetItemTypeId(GetManipulatedItem()) == "I05O") {
    lv_bvf = 2;
    lv_bve = GetRandomLocInRect(gv_aeY);
    if (gv_alg.getInt(188) == 1) {
      gv_alg[188] = 3;
    }
  }
  if (gv_alg.getInt(188 + lv_bvf) == 10) {
    gv_alg[188 + lv_bvf] = lv_bvd;
    QuestMessageBJ(
      gv_alq,
      1,
      GetPlayerName(lv_bvc) +
        " is leading TEAM " +
        I2S(lv_bvf) +
        " in the duel!"
    );
  } else {
    QuestMessageBJ(
      gv_alq,
      1,
      GetPlayerName(lv_bvc) +
        " has joined TEAM " +
        I2S(lv_bvf) +
        " in the duel!"
    );
  }
  gv_alg[180 + lv_bvd] = lv_bvf;
  SetUnitColor(lv_bvb, ConvertPlayerColor(gv_alg.getInt(188 + lv_bvf)));
  SetUnitPositionLoc(lv_bvb, lv_bve);
  PanCameraToTimedLocForPlayer(lv_bvc, lv_bve, 0);
  if (gv_alg.getInt(188) == 0) {
    gv_alg[188] = lv_bvf;
    TimerStart(gv_ali[9], 30, false, f_buW);
    gv_alj[9] = CreateTimerDialogBJ(gv_ali[9], "Battle begins in");
    SaveInteger(gv_abL, 0, GetHandleId(gv_ali[9]), 9);
    TimerDialogDisplay(gv_alj[9], true);
    MultiboardSetRowCount(gv_alA, 11);
    MultiboardDisplay(gv_alz, false);
    MultiboardDisplay(gv_aly, false);
    MultiboardDisplay(gv_alA, true);
    MultiboardMinimize(gv_alA, false);
    EnableTrigger(gv_ajj);
    ExecuteFunc("f_bvg");
  }
  lv_bvb = null;
  lv_bvc = null;
  lv_bve = null;
  RemoveLocation(lv_bve);
}
function f_bvh(lv_bvi, lv_bvj) {
  var lv_bvk = 0;
  var lv_bvl = "";
  MultiboardSetItemValueBJ(gv_alA, 1, lv_bvj, GetPlayerName(Player(lv_bvi)));
  MultiboardSetItemStyleBJ(gv_alA, 1, lv_bvj, true, false);
  MultiboardSetItemWidthBJ(gv_alA, 1, lv_bvj, 10);
  MultiboardSetItemColorBJ(gv_alA, 1, lv_bvj, 100, 100, 100, 0);
  do {
    if (lv_bvk > R2I(GetUnitLifePercent(gv_ale[lv_bvi]) / 5)) {
      break;
    }
    lv_bvl = S2S(lv_bvl + "Â§");
    lv_bvk = lv_bvk + 1;
  } while (true);
  MultiboardSetItemColorBJ(
    gv_alA,
    2,
    lv_bvj,
    100 - GetUnitLifePercent(gv_ale[lv_bvi]),
    GetUnitLifePercent(gv_ale[lv_bvi]),
    0.0,
    0
  );
  if (gv_alg.getInt(180 + lv_bvi) > 2) {
    lv_bvl = " -=- eliminated -=- ";
    MultiboardSetItemColorBJ(gv_alA, 2, lv_bvj, 100, 0.0, 0.0, 0);
  }
  if (gv_alg.getInt(180 + lv_bvi) == 0) {
    lv_bvl = " ";
  }
  MultiboardSetItemValueBJ(gv_alA, 2, lv_bvj, lv_bvl);
  MultiboardSetItemStyleBJ(gv_alA, 2, lv_bvj, true, false);
  MultiboardSetItemWidthBJ(gv_alA, 2, lv_bvj, 10);
}
function f_bvg() {
  var lv_bvm = 0;
  var lv_bvn = 0;
  var lv_bvo = 0;
  var lv_bvp = 0;
  var lv_bvq = 0;
  var lv_bvr;
  var lv_bvs;
  var lv_bvt;
  if (gv_alg.getInt(188) == 0) {
    DisableTrigger(gv_ajj);
    return;
  }
  lv_bvm = 0;
  lv_bvn = 3;
  do {
    if (lv_bvm > 7) {
      break;
    }
    if (gv_alg.getInt(180 + lv_bvm) > 0) {
      lv_bvn = lv_bvn + 1;
    }
    lv_bvm = lv_bvm + 1;
  } while (true);
  MultiboardSetRowCount(gv_alA, lv_bvn);
  lv_bvn = 1;
  MultiboardSetItemValueBJ(gv_alA, 1, lv_bvn, "    ..-= TEAM ONE =-..");
  MultiboardSetItemWidthBJ(gv_alA, 1, lv_bvn, 10);
  MultiboardSetItemStyleBJ(gv_alA, 1, lv_bvn, true, false);
  MultiboardSetItemColorBJ(gv_alA, 1, lv_bvn, 28, 63, 93, 0);
  MultiboardSetItemValueBJ(gv_alA, 2, lv_bvn, "Life");
  MultiboardSetItemWidthBJ(gv_alA, 2, lv_bvn, 10);
  MultiboardSetItemStyleBJ(gv_alA, 2, lv_bvn, true, false);
  MultiboardSetItemColorBJ(gv_alA, 2, lv_bvn, 28, 63, 93, 0);
  lv_bvm = 0;
  do {
    if (lv_bvm > 7) {
      break;
    }
    if (gv_alg.getInt(180 + lv_bvm) == 1) {
      lv_bvn = lv_bvn + 1;
      f_bvh(lv_bvm, lv_bvn);
      lv_bvo = lv_bvo + 1;
    }
    if (gv_alg.getInt(180 + lv_bvm) == 3) {
      lv_bvn = lv_bvn + 1;
      f_bvh(lv_bvm, lv_bvn);
    }
    lv_bvm = lv_bvm + 1;
  } while (true);
  lv_bvn = lv_bvn + 1;
  MultiboardSetItemValueBJ(gv_alA, 1, lv_bvn, " ");
  MultiboardSetItemWidthBJ(gv_alA, 1, lv_bvn, 10);
  MultiboardSetItemStyleBJ(gv_alA, 1, lv_bvn, true, false);
  MultiboardSetItemColorBJ(gv_alA, 1, lv_bvn, 28, 63, 93, 0);
  MultiboardSetItemValueBJ(gv_alA, 2, lv_bvn, " ");
  MultiboardSetItemWidthBJ(gv_alA, 2, lv_bvn, 10);
  MultiboardSetItemStyleBJ(gv_alA, 2, lv_bvn, true, false);
  MultiboardSetItemColorBJ(gv_alA, 2, lv_bvn, 28, 63, 93, 0);
  lv_bvn = lv_bvn + 1;
  MultiboardSetItemValueBJ(gv_alA, 1, lv_bvn, "    ..-= TEAM TWO =-..");
  MultiboardSetItemWidthBJ(gv_alA, 1, lv_bvn, 10);
  MultiboardSetItemStyleBJ(gv_alA, 1, lv_bvn, true, false);
  MultiboardSetItemColorBJ(gv_alA, 1, lv_bvn, 28, 63, 93, 0);
  MultiboardSetItemValueBJ(gv_alA, 2, lv_bvn, "Life");
  MultiboardSetItemWidthBJ(gv_alA, 2, lv_bvn, 10);
  MultiboardSetItemStyleBJ(gv_alA, 2, lv_bvn, true, false);
  MultiboardSetItemColorBJ(gv_alA, 2, lv_bvn, 28, 63, 93, 0);
  lv_bvm = 0;
  do {
    if (lv_bvm > 7) {
      break;
    }
    if (gv_alg.getInt(180 + lv_bvm) == 2) {
      lv_bvn = lv_bvn + 1;
      f_bvh(lv_bvm, lv_bvn);
      lv_bvp = lv_bvp + 1;
    }
    if (gv_alg.getInt(180 + lv_bvm) == 4) {
      lv_bvn = lv_bvn + 1;
      f_bvh(lv_bvm, lv_bvn);
    }
    lv_bvm = lv_bvm + 1;
  } while (true);
  if (gv_alg.getInt(188) == 4) {
    if (lv_bvo == 0 && lv_bvp == 0) {
      QuestMessageBJ(
        gv_alq,
        1,
        "|cffff0000ARENA TIE:|r TEAM 1 with " +
          GetPlayerName(Player(gv_alg.getInt(189))) +
          " ties with TEAM 2 with " +
          GetPlayerName(Player(gv_alg.getInt(190))) +
          "."
      );
      lv_bvq = 3;
    } else {
      if (lv_bvo == 0) {
        QuestMessageBJ(
          gv_alq,
          1,
          "|cffff0000ARENA WINNER:|r TEAM 2 with " +
            GetPlayerName(Player(gv_alg.getInt(190))) +
            " defeats TEAM 1 with " +
            GetPlayerName(Player(gv_alg.getInt(189))) +
            "."
        );
        lv_bvq = 2;
      }
      if (lv_bvp == 0) {
        QuestMessageBJ(
          gv_alq,
          1,
          "|cffff0000ARENA WINNER:|r TEAM 1 with " +
            GetPlayerName(Player(gv_alg.getInt(189))) +
            " defeats TEAM 2 with " +
            GetPlayerName(Player(gv_alg.getInt(190))) +
            "."
        );
        lv_bvq = 1;
      }
    }
  }
  if (lv_bvq > 0) {
    gv_alg[188] = 5;
    lv_bvn = 0;
    do {
      if (lv_bvn > 7) {
        break;
      }
      SetPlayerAllianceStateBJ(Player(lv_bvn), Player(0), 3);
      SetPlayerAllianceStateBJ(Player(lv_bvn), Player(1), 3);
      SetPlayerAllianceStateBJ(Player(lv_bvn), Player(2), 3);
      SetPlayerAllianceStateBJ(Player(lv_bvn), Player(3), 3);
      SetPlayerAllianceStateBJ(Player(lv_bvn), Player(4), 3);
      SetPlayerAllianceStateBJ(Player(lv_bvn), Player(5), 3);
      SetPlayerAllianceStateBJ(Player(lv_bvn), Player(6), 3);
      SetPlayerAllianceStateBJ(Player(lv_bvn), Player(7), 3);
      SetUnitColor(gv_ale[lv_bvn], ConvertPlayerColor(lv_bvn));
      SuspendHeroXP(gv_ale[lv_bvn], !true);
      if (
        RectContainsCoords(
          gv_acH,
          GetUnitX(gv_ale[lv_bvn]),
          GetUnitY(gv_ale[lv_bvn])
        )
      ) {
        lv_bvs = f_aNC(gv_acI, "x");
        lv_bvt = f_aNC(gv_acI, "y");
        SetUnitPosition(gv_ale[lv_bvn], lv_bvs, lv_bvt);
        PanCameraToTimedForPlayer(Player(lv_bvn), lv_bvs, lv_bvt, 0);
        SetUnitLifePercentBJ(gv_ale[lv_bvn], 100);
      }
      lv_bvn = lv_bvn + 1;
    } while (true);
    TriggerSleepAction(5);
    lv_bvn = 0;
    do {
      if (lv_bvn > 7) {
        break;
      }
      gv_alg[180 + lv_bvn] = 0;
      lv_bvn = lv_bvn + 1;
    } while (true);
    MultiboardDisplay(gv_alA, false);
    MultiboardDisplay(gv_aly, false);
    MultiboardDisplay(gv_alz, true);
    MultiboardMinimize(gv_alz, false);
    gv_alg[188] = 0;
    gv_alg[189] = 10;
    gv_alg[190] = 10;
  }
}
function f_bvu() {
  var lv_bvv = GetTriggerUnit();
  var lv_bvw = GetPlayerId(GetOwningPlayer(lv_bvv));
  if (gv_alg.getInt(180 + lv_bvw) > 0 && gv_alg.getInt(180 + lv_bvw) < 3) {
    gv_alg[180 + lv_bvw] = gv_alg.getInt(180 + lv_bvw) + 2;
  }
  lv_bvv = null;
}
function f_bvx() {
  var lv_bvy = 0;
  var lv_bvz = 10;
  do {
    if (lv_bvy > 7) {
      break;
    }
    if (
      GetPlayerController(Player(lv_bvy)) == MAP_CONTROL_USER &&
      GetPlayerSlotState(Player(lv_bvy)) == PLAYER_SLOT_STATE_PLAYING
    ) {
      lv_bvz = lv_bvy;
      lv_bvy = 10;
    }
    lv_bvy = lv_bvy + 1;
  } while (true);
  if (gv_alg.getInt(192) != lv_bvz) {
    gv_alg[192] = lv_bvz;
    DisplayTimedTextToForce(
      bj_FORCE_ALL_PLAYERS,
      15,
      S2S("   " + gv_alf[60 + lv_bvz]) +
        GetPlayerName(Player(lv_bvz)) +
        "|r now has access to the hosting commands."
    );
  }
}
function f_bvA() {
  var lv_bvB = GetExpiredTimer();
  var lv_bvC = LoadInteger(gv_abL, 0, GetHandleId(lv_bvB));
  SetUnitPosition(
    gv_ale[lv_bvC],
    GetUnitX(gv_ale[90 + lv_bvC]),
    GetUnitY(gv_ale[90 + lv_bvC])
  );
  RemoveUnit(gv_ale[90 + lv_bvC]);
  ShowUnit(gv_ale[lv_bvC], true);
  if (Player(lv_bvC) == GetLocalPlayer()) {
    ClearSelection();
    SelectUnit(gv_ale[lv_bvC], true);
  }
  DestroyEffect(
    AddSpecialEffectTarget(
      "Abilities\\Spells\\Human\\Polymorph\\PolyMorphDoneGround.mdl",
      gv_ale[lv_bvC],
      "origin"
    )
  );
  gv_alg[170 + lv_bvC] = 0;
  f_aIM(lv_bvB);
  lv_bvB = null;
}
function f_bvD() {
  var lv_bvE = GetTriggerPlayer();
  var lv_bvF = f_aNN(
    SubStringBJ(StringCase(GetEventPlayerChatString(), false), 6, 11)
  );
  var lv_bvG;
  if (
    GetWidgetLife(gv_ale[lv_bvF]) > 0.405 &&
    gv_alg.getInt(192) == GetPlayerId(lv_bvE) &&
    gv_alg.getInt(170 + lv_bvF) != 1 &&
    lv_bvF < 8
  ) {
    gv_alg[170 + lv_bvF] = 1;
    ShowUnit(gv_ale[lv_bvF], false);
    gv_ale[90 + lv_bvF] = CreateUnit(
      Player(lv_bvF),
      gv_alJ.getInt(800 + GetRandomInt(0, 12)),
      GetUnitX(gv_ale[lv_bvF]),
      GetUnitY(gv_ale[lv_bvF]),
      GetRandomReal(0, 360)
    );
    UnitApplyTimedLife(gv_ale[90 + lv_bvF], "BOhx", 5);
    if (lv_bvE == GetLocalPlayer()) {
      ClearSelection();
      SelectUnit(gv_ale[90 + lv_bvF], true);
    }
    DestroyEffect(
      AddSpecialEffectTarget(
        "Abilities\\Spells\\Human\\Polymorph\\PolyMorphDoneGround.mdl",
        gv_ale[90 + lv_bvF],
        "origin"
      )
    );
    lv_bvG = f_aIL();
    TimerStart(lv_bvG, 5, false, f_bvA);
    SaveInteger(gv_abL, 0, GetHandleId(lv_bvG), lv_bvF);
  }
  lv_bvE = null;
  lv_bvG = null;
}
function f_bvH() {
  var lv_bvI = GetPlayerId(GetTriggerPlayer());
  var lv_bvJ = f_aNN(
    SubStringBJ(StringCase(GetEventPlayerChatString(), false), 7, 12)
  );
  var lv_bvK = 0.0;
  if (gv_alg.getInt(192) != lv_bvI) {
    return;
  }
  if (lv_bvJ < 8 && gv_alg.getInt(180 + lv_bvJ) == 0) {
    lv_bvK = GetUnitStateSwap(UNIT_STATE_LIFE, gv_ale[lv_bvJ]) / 1 - 1;
    DestroyEffect(
      AddSpecialEffectTarget(
        "Units\\Demon\\Infernal\\InfernalBirth.mdl",
        gv_ale[lv_bvJ],
        "origin"
      )
    );
    UnitDamageTargetBJ(
      gv_ale[lv_bvJ],
      gv_ale[lv_bvJ],
      lv_bvK,
      ATTACK_TYPE_NORMAL,
      DAMAGE_TYPE_MAGIC
    );
    CameraSetEQNoiseForPlayer(Player(lv_bvJ), 3);
    CameraClearNoiseForPlayer(Player(lv_bvJ));
  }
}
function f_bvL() {
  var lv_bvM = GetPlayerId(GetTriggerPlayer());
  var lv_bvN = f_aNN(
    SubStringBJ(StringCase(GetEventPlayerChatString(), false), 7, 12)
  );
  if (gv_alg.getInt(192) != lv_bvM) {
    return;
  }
  if (lv_bvN < 8 && gv_alg.getInt(180 + lv_bvN) == 0) {
    gv_alg[390 + lv_bvN] = 1;
    if (GetWidgetLife(gv_ale[lv_bvN]) > 0.405) {
      KillUnit(gv_ale[lv_bvN]);
      CameraSetEQNoiseForPlayer(Player(lv_bvN), 5);
      CameraClearNoiseForPlayer(Player(lv_bvN));
    }
  }
}
function f_bvO() {
  var lv_bvP = GetPlayerId(GetTriggerPlayer());
  var lv_bvQ = f_aNN(
    SubStringBJ(StringCase(GetEventPlayerChatString(), false), 7, 12)
  );
  if (gv_alg.getInt(192) != lv_bvP) {
    return;
  }
  if (lv_bvQ < 8) {
    CustomDefeatBJ(
      Player(lv_bvQ),
      "You have been booted by " + GetPlayerName(Player(lv_bvP))
    );
    ForGroupBJ(f_aBC(Player(lv_bvQ)), f_aUM);
  }
}
function f_bvR() {
  if (GetLocalPlayer() == GetTriggerPlayer()) {
    MultiboardDisplay(gv_aly, false);
    MultiboardDisplay(gv_alA, false);
    MultiboardDisplay(gv_alz, true);
    MultiboardMinimize(gv_alz, false);
  }
}
function f_bvS() {
  if (GetLocalPlayer() == GetTriggerPlayer()) {
    MultiboardDisplay(gv_alz, false);
    MultiboardDisplay(gv_alA, false);
    MultiboardDisplay(gv_aly, true);
    MultiboardMinimize(gv_aly, false);
  }
}
function f_bvT() {
  var lv_bvU = GetPlayerId(GetTriggerPlayer());
  if (GetWidgetLife(gv_ale[lv_bvU]) > 0.405) {
    SetUnitExploded(gv_ale[lv_bvU], true);
    KillUnit(gv_ale[lv_bvU]);
    CameraSetEQNoiseForPlayer(Player(lv_bvU), 5);
    CameraClearNoiseForPlayer(Player(lv_bvU));
  }
}
function f_bvV() {
  if (GetPlayerId(GetLocalPlayer()) == GetPlayerId(GetTriggerPlayer())) {
    ClearTextMessages();
  }
}
function f_bvW() {
  var lv_bvX = GetEnumItem();
  var lv_bvY = GetItemPlayer(lv_bvX);
  var lv_bvZ = GetPlayerId(lv_bvY);
  if (lv_bvZ < 8) {
    if (gv_ale[lv_bvZ] == null) {
      RemoveItem(lv_bvX);
    }
  }
  lv_bvY = null;
  lv_bvX = null;
}
function f_bwa() {
  var lv_bwb = GetTriggerPlayer();
  var lv_bwc = GetPlayerId(lv_bwb);
  var lv_bwd = 0;
  var lv_bwe = gv_ale[lv_bwc + 8];
  if (gv_alg.getInt(150 + lv_bwc) > 0) {
    lv_bwe = null;
    return;
  }
  do {
    if (lv_bwd > 5) {
      break;
    }
    gv_amA = UnitItemInSlot(gv_ale[lv_bwc], lv_bwd);
    if (gv_amA != null) {
      RemoveItem(gv_amA);
    }
    gv_amA = UnitItemInSlot(lv_bwe, lv_bwd);
    if (gv_amA != null) {
      RemoveItem(gv_amA);
    }
    lv_bwd = lv_bwd + 1;
  } while (true);
  RemoveUnit(gv_ale[lv_bwc]);
  RemoveUnit(gv_ale[lv_bwc + 8]);
  SetPlayerState(lv_bwb, PLAYER_STATE_RESOURCE_GOLD, 0);
  SetPlayerState(lv_bwb, PLAYER_STATE_RESOURCE_LUMBER, 0);
  gv_ale[lv_bwc] = null;
  gv_alu = Player(PLAYER_NEUTRAL_PASSIVE);
  SetPlayerAlliance(gv_alu, lv_bwb, ALLIANCE_SHARED_CONTROL, true);
  SetPlayerAlliance(gv_alu, lv_bwb, ALLIANCE_SHARED_VISION, true);
  if (lv_bwb == GetLocalPlayer()) {
    SetCameraBoundsToRect(gv_adR);
    PanCameraToTimed(-14200, -15000, 0.0);
  }
  SetPlayerAlliance(Player(9), lv_bwb, ALLIANCE_SHARED_VISION, false);
  EnumItemsInRect(bj_mapInitialPlayableArea, null, f_bvW);
  lv_bwb = null;
  lv_bwe = null;
}
function f_bwf() {
  var lv_bwg = GetPlayerId(GetTriggerPlayer());
  return gv_ale[lv_bwg] != null && gv_alg.getInt(6890 + lv_bwg) != 1;
}
function f_bwh() {
  var lv_bwi = 0;
  var lv_bwj = CreateTrigger();
  do {
    if (lv_bwi > 7) {
      break;
    }
    TriggerRegisterPlayerChatEvent(lv_bwj, Player(lv_bwi), "-repick", true);
    lv_bwi = lv_bwi + 1;
  } while (true);
  TriggerAddCondition(lv_bwj, Condition(f_bwf));
  TriggerAddAction(lv_bwj, f_bwa);
}
function f_bwk() {
  DestroyLeaderboard(gv_alB);
  gv_alg[199] = 0;
}
function f_bwl() {
  var lv_bwm = GetTriggerPlayer();
  var lv_bwn = GetPlayerId(lv_bwm);
  var lv_bwo = GetEventPlayerChatString();
  var lv_bwp = 0;
  var lv_bwq;
  if (lv_bwo == "-roll" || lv_bwo == "-roll  ") {
    if (gv_alg.getInt(199) == 0) {
      gv_alg[199] = 1;
      gv_alB = CreateLeaderboardBJ(gv_alq, lv_bwo);
      do {
        if (lv_bwp > 7) {
          break;
        }
        gv_alg[270 + lv_bwp] = 0;
        lv_bwp = lv_bwp + 1;
      } while (true);
      LeaderboardSetStyle(gv_alB, true, true, true, false);
      LeaderboardDisplayBJ(true, gv_alB);
      lv_bwq = f_aIL();
      TimerStart(lv_bwq, 25, false, f_bwk);
    }
    if (gv_alg.getInt(199) > 0 && gv_alg.getInt(270 + lv_bwn) == 0) {
      gv_alg[270 + lv_bwn] = 1;
      if (lv_bwo == "-roll  ") {
        lv_bwp = 50;
      } else {
        lv_bwp = 0;
      }
      LeaderboardAddItemBJ(
        Player(lv_bwn),
        gv_alB,
        GetPlayerName(Player(lv_bwn)),
        GetRandomInt(lv_bwp, 100)
      );
      LeaderboardSortItemsBJ(gv_alB, 0, false);
    }
  }
  lv_bwm = null;
  lv_bwq = null;
}
function f_bwr() {
  SetCameraFieldForPlayer(
    GetTriggerPlayer(),
    CAMERA_FIELD_TARGET_DISTANCE,
    1600,
    1
  );
  gv_alf[GetPlayerId(GetTriggerPlayer()) + 30] = "I";
}
function f_bws() {
  SetCameraFieldForPlayer(
    GetTriggerPlayer(),
    CAMERA_FIELD_TARGET_DISTANCE,
    2850,
    1
  );
  gv_alf[GetPlayerId(GetTriggerPlayer()) + 30] = "O";
}
function f_bwt() {
  var lv_bwu = GetExpiredTimer();
  var lv_bwv = LoadInteger(gv_abL, 0, GetHandleId(lv_bwu));
  var lv_bww = "** Your Hero has";
  lv_bww =
    S2S(lv_bww + "  |cff00ff00Speed:|r ") +
    I2S(R2I(GetUnitMoveSpeed(gv_ale[lv_bwv])));
  lv_bww =
    S2S(lv_bww + ", |cffffd700HP Regen:|r ") +
    I2S(R2I(GetUnitStateSwap(UNIT_STATE_LIFE, gv_ale[lv_bwv])));
  lv_bww =
    S2S(lv_bww + ", |cff47a1eeMana Regen:|r ") +
    I2S(R2I(GetUnitStateSwap(UNIT_STATE_MANA, gv_ale[lv_bwv])));
  lv_bww =
    S2S(lv_bww + "\n|cffffffffExtra Spell |cff00ff00Damage:|r ") +
    I2S(R2I(gv_ald[lv_bwv]));
  lv_bww =
    S2S(lv_bww + ", |cffffd700xHealing:|r ") + I2S(R2I(gv_ald[lv_bwv + 8]));
  lv_bww =
    S2S(lv_bww + ", Copies: ") +
    I2S(gv_aat.getInt(lv_bwv)) +
    "\n|cff00ff00Evasion|r: " +
    I2S(IMaxBJ(GetUnitAbilityLevel(gv_ale[lv_bwv], "A09M") - 1, 0));
  DisplayTimedTextToPlayer(Player(lv_bwv), 0.4, -0.6, 13, lv_bww);
  SetUnitState(gv_ale[lv_bwv], UNIT_STATE_LIFE, gv_ald[20 + lv_bwv]);
  SetUnitState(gv_ale[lv_bwv], UNIT_STATE_MANA, gv_ald[30 + lv_bwv]);
  f_aIM(lv_bwu);
  lv_bwu = null;
}
function f_bwx() {
  var lv_bwy;
  var lv_bwz = GetTriggerPlayer();
  var lv_bwA = GetPlayerId(lv_bwz);
  var lv_bwB = 1;
  var lv_bwC;
  if (gv_aam[lv_bwA] > 1.5) {
    do {
      if (lv_bwB > gv_aaI.getInt(0) || lv_bwB > 0) {
        break;
      }
      lv_bwC = GetUnitAbilityLevel(gv_ale[lv_bwA], gv_aaI.getInt(lv_bwB));
      if (lv_bwC > 0) {
        BlzSetUnitAbilityCooldown(
          gv_ale[lv_bwA],
          gv_aaI.getInt(lv_bwB),
          lv_bwC,
          BlzGetAbilityCooldown(gv_aaI.getInt(lv_bwB), lv_bwC) / gv_aan[lv_bwA]
        );
      }
      lv_bwB = lv_bwB + 1;
    } while (true);
  }
  gv_ald[20 + lv_bwA] = GetUnitStateSwap(UNIT_STATE_LIFE, gv_ale[lv_bwA]);
  gv_ald[30 + lv_bwA] = GetUnitStateSwap(UNIT_STATE_MANA, gv_ale[lv_bwA]);
  SetUnitState(gv_ale[lv_bwA], UNIT_STATE_LIFE, 1);
  SetUnitState(gv_ale[lv_bwA], UNIT_STATE_MANA, 1);
  lv_bwy = f_aIL();
  TimerStart(lv_bwy, 1, false, f_bwt);
  SaveInteger(gv_abL, 0, GetHandleId(lv_bwy), lv_bwA);
  lv_bwz = null;
  lv_bwy = null;
}
function f_bwD() {
  var lv_bwE = GetPlayerId(GetTriggerPlayer());
  var lv_bwF = f_aNN(
    SubStringBJ(StringCase(GetEventPlayerChatString(), false), 7, 12)
  );
  if (lv_bwF < 8) {
    PingMinimapForPlayer(
      Player(lv_bwE),
      GetUnitX(gv_ale[lv_bwF]),
      GetUnitY(gv_ale[lv_bwF]),
      5
    );
    if (lv_bwE == lv_bwF) {
      PanCameraToTimedForPlayer(
        Player(lv_bwE),
        GetUnitX(gv_ale[lv_bwF]),
        GetUnitY(gv_ale[lv_bwF]),
        0.0
      );
    }
  }
}
function f_bwG() {
  var lv_bwH = GetTriggerPlayer();
  var lv_bwI = GetPlayerId(lv_bwH);
  var lv_bwJ = S2S(gv_alf[80] + "Display quest text on screen set to: ");
  if (gv_alg.getInt(250 + lv_bwI) == 1) {
    gv_alg[250 + lv_bwI] = 0;
    lv_bwJ = S2S(lv_bwJ + gv_alf[77]) + "OFF";
  } else {
    gv_alg[250 + lv_bwI] = 1;
    lv_bwJ = S2S(lv_bwJ + gv_alf[74]) + "ON";
  }
  DisplayTimedTextToPlayer(Player(lv_bwI), 0.4, -0.6, 10, lv_bwJ);
  lv_bwH = null;
}
function f_bwK() {
  gv_alJ[1] = "pghe";
  gv_alJ[2] = "pgma";
  gv_alJ[3] = "stwp";
  gv_alJ[5] = "shea";
  gv_alJ[6] = "sman";
  gv_alJ[7] = "shas";
  gv_alJ[9] = "spro";
  gv_alJ[10] = "sror";
  gv_alJ[11] = "pomn";
  gv_alJ[12] = "pnvu";
  gv_alJ[14] = "pres";
  gv_alJ[15] = "pdiv";
  gv_alJ[17] = "ankh";
  gv_alJ[18] = "fgrd";
  gv_alJ[19] = "mnst";
  gv_alJ[21] = "fgfh";
  gv_alJ[22] = "infs";
  gv_alJ[30] = "kpin";
  gv_alJ[31] = "rhth";
  gv_alJ[32] = "lgdh";
  gv_alJ[33] = "ajen";
  gv_alJ[34] = "rat9";
  gv_alJ[35] = "clfm";
  gv_alJ[36] = "clsd";
  gv_alJ[37] = "afac";
  gv_alJ[38] = "spsh";
  gv_alJ[40] = "mcou";
  gv_alJ[41] = "bgst";
  gv_alJ[42] = "bspd";
  gv_alJ[43] = "rin1";
  gv_alJ[44] = "belv";
  gv_alJ[45] = "odef";
  gv_alJ[46] = "crys";
  gv_alJ[47] = "rst1";
  gv_alJ[48] = "dsum";
  gv_alJ[50] = "hcun";
  gv_alJ[51] = "rat6";
  gv_alJ[52] = "cnob";
  gv_alJ[53] = "penr";
  gv_alJ[54] = "gcel";
  gv_alJ[55] = "hval";
  gv_alJ[56] = "ratc";
  gv_alJ[57] = "prvt";
  gv_alJ[58] = "pmna";
  gv_alJ[59] = "whwd";
  gv_alJ[60] = "rde1";
  gv_alJ[61] = "stel";
  gv_alJ[62] = "rde3";
  gv_alJ[63] = "rde2";
  gv_alJ[64] = "ssil";
  gv_alJ[65] = "evtl";
  gv_alJ[66] = "I006";
  gv_alJ[67] = "I004";
  gv_alJ[68] = "I005";
  gv_alJ[70] = "anfg";
  gv_alJ[71] = "amrc";
  gv_alJ[72] = "axas";
  gv_alJ[73] = "pams";
  gv_alJ[80] = "gsou";
  gv_alJ[81] = "stre";
  gv_alJ[82] = "sprn";
  gv_alJ[83] = "thdm";
  gv_alJ[84] = "tbar";
  gv_alJ[85] = "tfar";
  gv_alJ[86] = "I068";
  gv_alJ[87] = "I069";
  gv_alJ[90] = "arsh";
  gv_alJ[91] = "arsc";
  gv_alJ[92] = "asbl";
  gv_alJ[99] = "I06E";
  gv_alJ[100] = "ciri";
  gv_alJ[101] = "lhst";
  gv_alJ[102] = "rlif";
  gv_alJ[103] = "brac";
  gv_alJ[104] = "ward";
  gv_alJ[105] = "I000";
  gv_alJ[106] = "I009";
  gv_alJ[107] = "I008";
  gv_alJ[108] = "I007";
  gv_alJ[110] = "sbch";
  gv_alJ[111] = "rag1";
  gv_alJ[112] = "rwiz";
  gv_alJ[113] = "I003";
  gv_alJ[114] = "I002";
  gv_alJ[115] = "I001";
  gv_alJ[116] = "I00A";
  gv_alJ[117] = "I00B";
  gv_alJ[118] = "I00C";
  gv_alJ[120] = "blba";
  gv_alJ[121] = "bfhr";
  gv_alJ[122] = "btst";
  gv_alJ[123] = "I06D";
  gv_alJ[124] = "I06F";
  gv_alJ[130] = "I00J";
  gv_alJ[131] = "I00I";
  gv_alJ[132] = "I00E";
  gv_alJ[133] = "I00F";
  gv_alJ[134] = "I00G";
  gv_alJ[135] = "I00H";
  gv_alJ[136] = "I00L";
  gv_alJ[137] = "I00D";
  gv_alJ[138] = "I00K";
  gv_alJ[139] = "uflg";
  gv_alJ[140] = "tmsc";
  gv_alJ[141] = "bzbe";
  gv_alJ[142] = "tmmt";
  gv_alJ[143] = "vddl";
  gv_alJ[144] = "ches";
  gv_alJ[145] = "tgxp";
  gv_alJ[146] = "kybl";
  gv_alJ[147] = "engs";
  gv_alJ[148] = "I01H";
  gv_alJ[149] = "I01D";
  gv_alJ[150] = "rat3";
  gv_alJ[151] = "brag";
  gv_alJ[152] = "cosl";
  gv_alJ[153] = "stpg";
  gv_alJ[154] = "crdt";
  gv_alJ[155] = "I06A";
  gv_alJ[160] = "I00N";
  gv_alJ[161] = "I00U";
  gv_alJ[162] = "I00Q";
  gv_alJ[163] = "I00O";
  gv_alJ[164] = "I00R";
  gv_alJ[165] = "I00T";
  gv_alJ[166] = "I00P";
  gv_alJ[167] = "I00S";
  gv_alJ[168] = "I00M";
  gv_alJ[170] = "sbok";
  gv_alJ[171] = "stwa";
  gv_alJ[172] = "spre";
  gv_alJ[173] = "tbak";
  gv_alJ[174] = "tbsm";
  gv_alJ[175] = "tlum";
  gv_alJ[176] = "ledg";
  gv_alJ[177] = "kygh";
  gv_alJ[178] = "bzbf";
  gv_alJ[179] = "gmfr";
  gv_alJ[180] = "I01E";
  gv_alJ[181] = "I01V";
  gv_alJ[185] = "envl";
  gv_alJ[186] = "drph";
  gv_alJ[187] = "shen";
  gv_alJ[188] = "I064";
  gv_alJ[189] = "I067";
  gv_alJ[190] = "dkfw";
  gv_alJ[191] = "jpnt";
  gv_alJ[192] = "cnhn";
  gv_alJ[193] = "mgtk";
  gv_alJ[194] = "mort";
  gv_alJ[195] = "k3m1";
  gv_alJ[196] = "gopr";
  gv_alJ[197] = "kymn";
  gv_alJ[198] = "azhr";
  gv_alJ[199] = "k3m3";
  gv_alJ[200] = "k3m2";
  gv_alJ[201] = "dphe";
  gv_alJ[202] = "frhg";
  gv_alJ[203] = "fgun";
  gv_alJ[204] = "fwss";
  gv_alJ[205] = "esaz";
  gv_alJ[206] = "frgd";
  gv_alJ[208] = "I01X";
  gv_alJ[209] = "I01W";
  gv_alJ[208] = "I011";
  gv_alJ[212] = "I010";
  gv_alJ[213] = "I00Z";
  gv_alJ[214] = "I013";
  gv_alJ[215] = "I012";
  gv_alJ[216] = "I00Y";
  gv_alJ[217] = "I00W";
  gv_alJ[218] = "I00X";
  gv_alJ[219] = "I00V";
  gv_alJ[220] = "I06B";
  gv_alJ[226] = "I01Y";
  gv_alJ[230] = "sehr";
  gv_alJ[231] = "thle";
  gv_alJ[232] = "kysn";
  gv_alJ[233] = "sclp";
  gv_alJ[234] = "sorf";
  gv_alJ[235] = "phlt";
  gv_alJ[236] = "skrt";
  gv_alJ[237] = "glsk";
  gv_alJ[238] = "shwd";
  gv_alJ[239] = "dthb";
  gv_alJ[240] = "ktrm";
  gv_alJ[245] = "I01Z";
  gv_alJ[246] = "wtlg";
  gv_alJ[247] = "wolg";
  gv_alJ[248] = "I04U";
  gv_alJ[249] = "I06C";
  gv_alJ[250] = "I018";
  gv_alJ[251] = "I017";
  gv_alJ[252] = "I014";
  gv_alJ[253] = "I01A";
  gv_alJ[254] = "I015";
  gv_alJ[255] = "I019";
  gv_alJ[256] = "I01B";
  gv_alJ[257] = "I016";
  gv_alJ[260] = "olig";
  gv_alJ[261] = "oflg";
  gv_alJ[262] = "rump";
  gv_alJ[263] = "ram4";
  gv_alJ[264] = "srbd";
  gv_alJ[265] = "sor3";
  gv_alJ[266] = "sor7";
  gv_alJ[267] = "gvsm";
  gv_alJ[268] = "rej6";
  gv_alJ[269] = "iwbr";
  gv_alJ[270] = "rej5";
  gv_alJ[271] = "nspi";
  gv_alJ[272] = "shhn";
  gv_alJ[275] = "oli2";
  gv_alJ[276] = "pspd";
  gv_alJ[277] = "horl";
  gv_alJ[278] = "ram2";
  gv_alJ[279] = "srtl";
  gv_alJ[280] = "sor4";
  gv_alJ[281] = "sor9";
  gv_alJ[282] = "gemt";
  gv_alJ[283] = "grsl";
  gv_alJ[284] = "kgal";
  gv_alJ[285] = "lnrn";
  gv_alJ[286] = "nflg";
  gv_alJ[287] = "shdt";
  gv_alJ[290] = "gldo";
  gv_alJ[291] = "pgin";
  gv_alJ[292] = "schl";
  gv_alJ[293] = "ram1";
  gv_alJ[294] = "scul";
  gv_alJ[295] = "sor2";
  gv_alJ[296] = "sor8";
  gv_alJ[297] = "gobm";
  gv_alJ[298] = "hbth";
  gv_alJ[299] = "jdrn";
  gv_alJ[300] = "mlst";
  gv_alJ[301] = "lure";
  gv_alJ[302] = "shrs";
  gv_alJ[305] = "oslo";
  gv_alJ[306] = "rde0";
  gv_alJ[307] = "ccmd";
  gv_alJ[308] = "ram3";
  gv_alJ[309] = "sor1";
  gv_alJ[310] = "sor5";
  gv_alJ[311] = "shcw";
  gv_alJ[312] = "tels";
  gv_alJ[313] = "sfog";
  gv_alJ[314] = "klmm";
  gv_alJ[315] = "mnsf";
  gv_alJ[316] = "ocor";
  gv_alJ[317] = "sksh";
  gv_alJ[320] = "oven";
  gv_alJ[321] = "rnsp";
  gv_alJ[322] = "rots";
  gv_alJ[323] = "rugt";
  gv_alJ[324] = "sora";
  gv_alJ[325] = "sor6";
  gv_alJ[326] = "shtm";
  gv_alJ[327] = "rej4";
  gv_alJ[328] = "flag";
  gv_alJ[329] = "rej2";
  gv_alJ[330] = "rej1";
  gv_alJ[331] = "ofir";
  gv_alJ[332] = "soul";
  gv_alJ[335] = "I01N";
  gv_alJ[336] = "I01O";
  gv_alJ[337] = "I01Q";
  gv_alJ[338] = "I01P";
  gv_alJ[339] = "I01R";
  gv_alJ[340] = "I01S";
  gv_alJ[341] = "I01T";
  gv_alJ[342] = "I01I";
  gv_alJ[343] = "I01J";
  gv_alJ[344] = "I01K";
  gv_alJ[345] = "I01L";
  gv_alJ[346] = "I01M";
  gv_alJ[347] = "I01U";
  gv_alJ[350] = "I04V";
  gv_alJ[351] = "I04W";
  gv_alJ[352] = "I04X";
  gv_alJ[353] = "I04Y";
  gv_alJ[354] = "I04Z";
  gv_alJ[355] = "I050";
  gv_alJ[356] = "I051";
  gv_alJ[357] = "I052";
  gv_alJ[358] = "I053";
  gv_alJ[359] = "I054";
  gv_alJ[360] = "I055";
  gv_alJ[361] = "I056";
  gv_alJ[365] = "I05X";
  gv_alJ[366] = "I061";
  gv_alJ[367] = "I062";
  gv_alJ[368] = "I063";
  gv_alJ[369] = "I065";
  gv_alJ[370] = "I066";
  gv_alJ[512] = "Udre";
  gv_alJ[513] = "Edem";
  gv_alJ[514] = "Ekee";
  gv_alJ[515] = "Hblm";
  gv_alJ[516] = "Emoo";
  gv_alJ[517] = "Hamg";
  gv_alJ[518] = "Oshd";
  gv_alJ[519] = "Ulic";
  gv_alJ[520] = "Udea";
  gv_alJ[521] = "Hant";
  gv_alJ[522] = "Hpal";
  gv_alJ[523] = "Hjai";
  gv_alJ[524] = "Ofar";
  gv_alJ[600] = "fgsk";
  gv_alJ[601] = "wild";
  gv_alJ[602] = "fgdg";
  gv_alJ[700] = "A05O";
  gv_alJ[701] = "A06R";
  gv_alJ[702] = "A074";
  gv_alJ[703] = "A03Q";
  gv_alJ[704] = "A07D";
  gv_alJ[705] = "A078";
  gv_alJ[706] = "A04V";
  gv_alJ[707] = "A04U";
  gv_alJ[708] = "A06Y";
  gv_alJ[709] = "A056";
  gv_alJ[710] = "A06F";
  gv_alJ[711] = "A06E";
  gv_alJ[712] = "A06C";
  gv_alJ[713] = "A06D";
  gv_alJ[714] = "A06G";
  gv_alJ[715] = "A06L";
  gv_alJ[716] = "A06M";
  gv_alJ[717] = "A06P";
  gv_alJ[718] = "A06Q";
  gv_alJ[719] = "A06K";
  gv_alJ[720] = "A049";
  gv_alJ[721] = "A03X";
  gv_alJ[722] = "A045";
  gv_alJ[723] = "A044";
  gv_alJ[724] = "A03V";
  gv_alJ[725] = "A05C";
  gv_alJ[726] = "A05D";
  gv_alJ[727] = "A05E";
  gv_alJ[728] = "A05B";
  gv_alJ[729] = "A05I";
  gv_alJ[730] = "A053";
  gv_alJ[731] = "A052";
  gv_alJ[732] = "A051";
  gv_alJ[733] = "A050";
  gv_alJ[734] = "A05A";
  gv_alJ[735] = "A064";
  gv_alJ[736] = "A065";
  gv_alJ[737] = "A068";
  gv_alJ[738] = "A067";
  gv_alJ[739] = "A066";
  gv_alJ[740] = "A04E";
  gv_alJ[741] = "A03T";
  gv_alJ[742] = "A03R";
  gv_alJ[743] = "A04A";
  gv_alJ[744] = "A042";
  gv_alJ[745] = "A03U";
  gv_alJ[746] = "A048";
  gv_alJ[747] = "A08H";
  gv_alJ[748] = "A041";
  gv_alJ[749] = "A040";
  gv_alJ[750] = "A076";
  gv_alJ[751] = "A070";
  gv_alJ[752] = "A07C";
  gv_alJ[753] = "A06Z";
  gv_alJ[754] = "A071";
  gv_alJ[755] = "A047";
  gv_alJ[756] = "A03Z";
  gv_alJ[757] = "A03P";
  gv_alJ[758] = "A03S";
  gv_alJ[759] = "A046";
  gv_alJ[800] = "npig";
  gv_alJ[801] = "nsea";
  gv_alJ[802] = "ncrb";
  gv_alJ[803] = "nhmc";
  gv_alJ[804] = "nrat";
  gv_alJ[805] = "nfro";
  gv_alJ[806] = "necr";
  gv_alJ[807] = "nrac";
  gv_alJ[808] = "npng";
  gv_alJ[809] = "nskk";
  gv_alJ[810] = "nder";
  gv_alJ[811] = "nfbr";
  gv_alJ[812] = "ndwm";
  gv_alJ[900] = "n038";
  gv_alJ[901] = "n01T";
  gv_alJ[902] = "n00A";
  gv_alJ[903] = "n00C";
  gv_alJ[904] = "n00F";
  gv_alJ[905] = "n00G";
  gv_alJ[906] = "n00O";
  gv_alJ[907] = "n00E";
  gv_alJ[908] = "n00R";
  gv_alJ[909] = "n00P";
  gv_alJ[910] = "n039";
  gv_alJ[911] = "n00Q";
  gv_alJ[912] = "n00S";
  gv_alJ[920] = "n034";
  gv_alJ[921] = "n035";
  gv_alJ[922] = "n036";
  gv_alJ[923] = "n037";
  DestroyTrigger(gv_ajA);
}
function f_bwL(lv_bwM, lv_bwN) {
  var lv_bwO = 0;
  var lv_bwP = 0;
  var lv_bwQ = 0;
  lv_bwQ = GetItemTypeId(UnitItemInSlot(lv_bwM, lv_bwN));
  do {
    if (lv_bwP > 450) {
      break;
    }
    if (gv_alJ.getInt(lv_bwP) == lv_bwQ) {
      lv_bwO = 0 + lv_bwP * 500;
      lv_bwP = 501;
    }
    lv_bwP = lv_bwP + 1;
  } while (true);
  if (lv_bwP < 500) {
    UnitRemoveItemSwapped(UnitItemInSlot(lv_bwM, lv_bwN), lv_bwM);
  }
  lv_bwP = 0;
  lv_bwQ = GetItemTypeId(UnitItemInSlot(lv_bwM, lv_bwN + 1));
  do {
    if (lv_bwP > 450) {
      break;
    }
    if (gv_alJ.getInt(lv_bwP) == lv_bwQ) {
      lv_bwO = lv_bwO + lv_bwP;
      lv_bwP = 501;
    }
    lv_bwP = lv_bwP + 1;
  } while (true);
  if (lv_bwP < 500) {
    UnitRemoveItemSwapped(UnitItemInSlot(lv_bwM, lv_bwN + 1), lv_bwM);
  }
  return lv_bwO;
}
function f_bwR(lv_bwS, lv_bwT, lv_bwU, lv_bwV) {
  var lv_bwW = 0;
  var lv_bwX = 4;
  do {
    if (lv_bwX < 0) {
      break;
    }
    if (lv_bwX == 4) {
      lv_bwW = R2I(lv_bwV / 17850625);
      lv_bwV = lv_bwV - lv_bwW * 17850625;
    }
    if (lv_bwX == 3) {
      lv_bwW = R2I(lv_bwV / 274625);
      lv_bwV = lv_bwV - lv_bwW * 274625;
    }
    if (lv_bwX == 2) {
      lv_bwW = R2I(lv_bwV / 4225);
      lv_bwV = lv_bwV - lv_bwW * 4225;
    }
    if (lv_bwX == 1) {
      lv_bwW = R2I(lv_bwV / 65);
      lv_bwV = lv_bwV - lv_bwW * 65;
    }
    if (lv_bwX == 0) {
      lv_bwW = lv_bwV;
    }
    if (lv_bwX == lv_bwU) {
      lv_bwX = 0;
    }
    lv_bwX = lv_bwX - 1;
  } while (true);
  gv_alf[lv_bwS + 150] = SubString(
    S2S(lv_bwT + lv_bwT),
    lv_bwS + lv_bwW,
    lv_bwS + lv_bwW + 1
  );
}
function f_bwY(lv_bwZ) {
  if (lv_bwZ == "!") {
    return 33;
  }
  if (lv_bwZ == "#") {
    return 35;
  }
  if (lv_bwZ == "$") {
    return 36;
  }
  if (lv_bwZ == "%") {
    return 37;
  }
  if (lv_bwZ == "&") {
    return 38;
  }
  if (lv_bwZ == "(") {
    return 40;
  }
  if (lv_bwZ == ")") {
    return 41;
  }
  if (lv_bwZ == "+") {
    return 43;
  }
  if (lv_bwZ == "-") {
    return 45;
  }
  if (lv_bwZ == ".") {
    return 46;
  }
  if (lv_bwZ == "/") {
    return 47;
  }
  if (lv_bwZ == "0") {
    return 48;
  }
  if (lv_bwZ == "1") {
    return 49;
  }
  if (lv_bwZ == "2") {
    return 50;
  }
  if (lv_bwZ == "3") {
    return 51;
  }
  if (lv_bwZ == "4") {
    return 52;
  }
  if (lv_bwZ == "5") {
    return 53;
  }
  if (lv_bwZ == "6") {
    return 54;
  }
  if (lv_bwZ == "7") {
    return 55;
  }
  if (lv_bwZ == "8") {
    return 56;
  }
  if (lv_bwZ == "9") {
    return 57;
  }
  if (lv_bwZ == ":") {
    return 58;
  }
  if (lv_bwZ == ";") {
    return 59;
  }
  if (lv_bwZ == "<") {
    return 60;
  }
  if (lv_bwZ == "=") {
    return 61;
  }
  if (lv_bwZ == ">") {
    return 62;
  }
  if (lv_bwZ == "?") {
    return 63;
  }
  if (lv_bwZ == "@") {
    return 64;
  }
  if (lv_bwZ == "A") {
    return 65;
  }
  if (lv_bwZ == "B") {
    return 66;
  }
  if (lv_bwZ == "C") {
    return 67;
  }
  if (lv_bwZ == "D") {
    return 68;
  }
  if (lv_bwZ == "E") {
    return 69;
  }
  if (lv_bwZ == "F") {
    return 70;
  }
  if (lv_bwZ == "G") {
    return 71;
  }
  if (lv_bwZ == "H") {
    return 72;
  }
  if (lv_bwZ == "I") {
    return 73;
  }
  if (lv_bwZ == "J") {
    return 74;
  }
  if (lv_bwZ == "K") {
    return 75;
  }
  if (lv_bwZ == "L") {
    return 76;
  }
  if (lv_bwZ == "M") {
    return 77;
  }
  if (lv_bwZ == "N") {
    return 78;
  }
  if (lv_bwZ == "O") {
    return 79;
  }
  if (lv_bwZ == "P") {
    return 80;
  }
  if (lv_bwZ == "Q") {
    return 81;
  }
  if (lv_bwZ == "R") {
    return 82;
  }
  if (lv_bwZ == "S") {
    return 83;
  }
  if (lv_bwZ == "T") {
    return 84;
  }
  if (lv_bwZ == "U") {
    return 85;
  }
  if (lv_bwZ == "V") {
    return 86;
  }
  if (lv_bwZ == "W") {
    return 87;
  }
  if (lv_bwZ == "X") {
    return 88;
  }
  if (lv_bwZ == "Y") {
    return 89;
  }
  if (lv_bwZ == "Z") {
    return 90;
  }
  if (lv_bwZ == "[") {
    return 91;
  }
  if (lv_bwZ == "]") {
    return 93;
  }
  if (lv_bwZ == "^") {
    return 94;
  }
  if (lv_bwZ == "_") {
    return 95;
  }
  if (lv_bwZ == "`") {
    return 96;
  }
  if (lv_bwZ == "a") {
    return 97;
  }
  if (lv_bwZ == "b") {
    return 98;
  }
  if (lv_bwZ == "c") {
    return 99;
  }
  if (lv_bwZ == "d") {
    return 100;
  }
  if (lv_bwZ == "e") {
    return 101;
  }
  if (lv_bwZ == "f") {
    return 102;
  }
  if (lv_bwZ == "g") {
    return 103;
  }
  if (lv_bwZ == "h") {
    return 104;
  }
  if (lv_bwZ == "i") {
    return 105;
  }
  if (lv_bwZ == "j") {
    return 106;
  }
  if (lv_bwZ == "k") {
    return 107;
  }
  if (lv_bwZ == "l") {
    return 108;
  }
  if (lv_bwZ == "m") {
    return 109;
  }
  if (lv_bwZ == "n") {
    return 110;
  }
  if (lv_bwZ == "o") {
    return 111;
  }
  if (lv_bwZ == "p") {
    return 112;
  }
  if (lv_bwZ == "q") {
    return 113;
  }
  if (lv_bwZ == "r") {
    return 114;
  }
  if (lv_bwZ == "s") {
    return 115;
  }
  if (lv_bwZ == "t") {
    return 116;
  }
  if (lv_bwZ == "u") {
    return 117;
  }
  if (lv_bwZ == "v") {
    return 118;
  }
  if (lv_bwZ == "w") {
    return 119;
  }
  if (lv_bwZ == "x") {
    return 120;
  }
  if (lv_bwZ == "y") {
    return 121;
  }
  if (lv_bwZ == "z") {
    return 122;
  }
  if (lv_bwZ == "{") {
    return 123;
  }
  if (lv_bwZ == "|") {
    return 124;
  }
  if (lv_bwZ == "}") {
    return 125;
  }
  if (lv_bwZ == "~") {
    return 126;
  }
  return 32;
}
function f_bxa() {
  var lv_bxb = "Mark";
  var lv_bxc = GetTriggerPlayer();
  var lv_bxd = GetPlayerName(lv_bxc);
  var lv_bxe = GetPlayerId(lv_bxc);
  var lv_bxf = gv_alf[59];
  var lv_bxg = StringLength(lv_bxf);
  var lv_bxh = S2S(gv_alf[75] + "Now saving: ");
  var lv_bxi = "|cffffffff-load |r";
  var lv_bxj = "\r\n\r\n-load ";
  var lv_bxk = [];
  var lv_bxl = 0;
  var lv_bxm = 0;
  var lv_bxn = 0;
  var lv_bxo;
  var lv_bxp;
  var lv_bxq = 0;
  var lv_bxr;
  var lv_bxs;
  if (IsUnitType(gv_ale[lv_bxe], UNIT_TYPE_HERO) == false) {
    return;
  }
  lv_bxm = 0 + 150;
  do {
    if (lv_bxm > 49 + 150) {
      break;
    }
    gv_alf[lv_bxm] = "*";
    lv_bxm = lv_bxm + 1;
  } while (true);
  lv_bxl = GetRandomInt(0, lv_bxg - 1);
  f_bwR(0, lv_bxf, 0, lv_bxl);
  lv_bxf = S2S(lv_bxf + lv_bxf);
  lv_bxf = SubString(lv_bxf, lv_bxl, lv_bxl + lv_bxg);
  f_bwR(22, lv_bxf, 0, GetUnitPointValue(gv_ale[lv_bxe]));
  lv_bxh = lv_bxh + GetUnitName(gv_ale[lv_bxe]) + ", lvl ";
  lv_bxh = lv_bxh + I2S(GetHeroLevel(gv_ale[lv_bxe])) + ", exp ";
  lv_bxh = lv_bxh + I2S(GetHeroXP(gv_ale[lv_bxe])) + ", ";
  lv_bxh = S2S(lv_bxh + lv_bxd);
  if (gv_alg.getInt(260 + lv_bxe) == 0) {
    if (GetHeroLevel(gv_ale[lv_bxe]) > 98) {
      lv_bxq = lv_bxq + 10;
    }
    if (GetPlayerState(lv_bxc, PLAYER_STATE_RESOURCE_GOLD) > 200000) {
      lv_bxq = lv_bxq + 20;
    }
  }
  lv_bxl = GetPlayerState(lv_bxc, PLAYER_STATE_RESOURCE_GOLD);
  if (lv_bxl > 1000000) {
    lv_bxl = 1000000;
  }
  lv_bxl = R2I(lv_bxl / 5);
  f_bwR(37, lv_bxf, 2, lv_bxl);
  f_bwR(19, lv_bxf, 1, lv_bxl);
  f_bwR(18, lv_bxf, 0, lv_bxl);
  lv_bxl = GetPlayerState(lv_bxc, PLAYER_STATE_RESOURCE_LUMBER);
  if (lv_bxl > 10000) {
    lv_bxl = 10000;
  }
  f_bwR(21, lv_bxf, 2, lv_bxl);
  f_bwR(45, lv_bxf, 1, lv_bxl);
  f_bwR(17, lv_bxf, 0, lv_bxl);
  lv_bxl = GetHeroXP(gv_ale[lv_bxe]);
  if (lv_bxl > 3345580) {
    lv_bxl = 3345580;
  }
  f_bwR(40, lv_bxf, 3, lv_bxl);
  f_bwR(6, lv_bxf, 2, lv_bxl);
  f_bwR(30, lv_bxf, 1, lv_bxl);
  f_bwR(23, lv_bxf, 0, lv_bxl);
  lv_bxl = 0 + GetHeroStr(gv_ale[lv_bxe], false) * 1050 * 1050;
  lv_bxl = lv_bxl + GetHeroAgi(gv_ale[lv_bxe], false) * 1050;
  lv_bxl = lv_bxl + GetHeroInt(gv_ale[lv_bxe], false) * 1;
  f_bwR(36, lv_bxf, 4, lv_bxl);
  f_bwR(2, lv_bxf, 3, lv_bxl);
  f_bwR(14, lv_bxf, 2, lv_bxl);
  f_bwR(16, lv_bxf, 1, lv_bxl);
  f_bwR(25, lv_bxf, 0, lv_bxl);
  lv_bxl = f_bwL(gv_ale[lv_bxe], 0);
  f_bwR(32, lv_bxf, 2, lv_bxl);
  f_bwR(24, lv_bxf, 1, lv_bxl);
  f_bwR(3, lv_bxf, 0, lv_bxl);
  lv_bxl = f_bwL(gv_ale[lv_bxe], 2);
  f_bwR(41, lv_bxf, 2, lv_bxl);
  f_bwR(4, lv_bxf, 1, lv_bxl);
  f_bwR(38, lv_bxf, 0, lv_bxl);
  lv_bxl = f_bwL(gv_ale[lv_bxe], 4);
  f_bwR(13, lv_bxf, 2, lv_bxl);
  f_bwR(29, lv_bxf, 1, lv_bxl);
  f_bwR(33, lv_bxf, 0, lv_bxl);
  lv_bxl = f_bwL(gv_ale[lv_bxe + 8], 0);
  f_bwR(15, lv_bxf, 2, lv_bxl);
  f_bwR(34, lv_bxf, 1, lv_bxl);
  f_bwR(31, lv_bxf, 0, lv_bxl);
  lv_bxl = f_bwL(gv_ale[lv_bxe + 8], 2);
  f_bwR(12, lv_bxf, 2, lv_bxl);
  f_bwR(7, lv_bxf, 1, lv_bxl);
  f_bwR(5, lv_bxf, 0, lv_bxl);
  lv_bxl = f_bwL(gv_ale[lv_bxe + 8], 4);
  f_bwR(43, lv_bxf, 2, lv_bxl);
  f_bwR(28, lv_bxf, 1, lv_bxl);
  f_bwR(35, lv_bxf, 0, lv_bxl);
  lv_bxr = 0;
  do {
    if (lv_bxr > 5) {
      break;
    }
    lv_bxs = GetItemTypeId(UnitItemInSlot(gv_ale[lv_bxe], lv_bxr));
    lv_bxm = 0;
    do {
      if (lv_bxm > 450) {
        break;
      }
      if (gv_alJ.getInt(lv_bxm) == lv_bxs && lv_bxs != 0) {
        lv_bxk[lv_bxr + 1] =
          "Item " +
          I2S(lv_bxr + 1) +
          ": " +
          GetItemName(UnitItemInSlot(gv_ale[lv_bxe], lv_bxr));
        lv_bxm = 501;
      }
      lv_bxm = lv_bxm + 1;
    } while (true);
    lv_bxr = lv_bxr + 1;
  } while (true);
  lv_bxk[7] = "Ability Levels: ";
  lv_bxk[8] =
    "Str: " +
    I2S(GetHeroStr(gv_ale[lv_bxe], false)) +
    ", Agi: " +
    I2S(GetHeroAgi(gv_ale[lv_bxe], false)) +
    ", Int: " +
    I2S(GetHeroInt(gv_ale[lv_bxe], false));
  lv_bxm = 0;
  do {
    if (lv_bxm > 5) {
      break;
    }
    lv_bxo = UnitItemInSlot(gv_ale[lv_bxe + 8], lv_bxm);
    if (GetItemType(lv_bxo) == ITEM_TYPE_CHARGED) {
      if (GetItemCharges(lv_bxo) > 7) {
        SetItemCharges(lv_bxo, 7);
      }
    }
    lv_bxm = lv_bxm + 1;
  } while (true);
  lv_bxl = 0;
  lv_bxm = 0;
  do {
    if (lv_bxm > 5) {
      break;
    }
    lv_bxo = UnitItemInSlot(gv_ale[lv_bxe + 8], lv_bxm);
    if (GetItemType(lv_bxo) == ITEM_TYPE_CHARGED) {
      lv_bxn = GetItemCharges(lv_bxo);
      lv_bxl = lv_bxl + R2I(Pow(8, I2R(lv_bxm))) * lv_bxn;
    }
    lv_bxm = lv_bxm + 1;
  } while (true);
  f_bwR(39, lv_bxf, 2, lv_bxl);
  f_bwR(42, lv_bxf, 1, lv_bxl);
  f_bwR(8, lv_bxf, 0, lv_bxl);
  lv_bxm = 0;
  lv_bxn = GetUnitPointValue(gv_ale[lv_bxe]) * 5 + 640;
  lv_bxl = 0;
  do {
    if (lv_bxm > 4) {
      break;
    }
    lv_bxl =
      lv_bxl +
      GetUnitAbilityLevelSwapped(
        gv_alJ.getInt(lv_bxn + lv_bxm),
        gv_ale[lv_bxe]
      ) *
        R2I(Pow(10, I2R(lv_bxm)));
    lv_bxk[7] =
      lv_bxk[7] +
      I2S(
        GetUnitAbilityLevelSwapped(
          gv_alJ.getInt(lv_bxn + lv_bxm),
          gv_ale[lv_bxe]
        )
      ) +
      "  ";
    lv_bxm = lv_bxm + 1;
  } while (true);
  f_bwR(27, lv_bxf, 2, lv_bxl);
  f_bwR(44, lv_bxf, 1, lv_bxl);
  f_bwR(11, lv_bxf, 0, lv_bxl);
  lv_bxl = 0;
  lv_bxm = 0;
  do {
    if (lv_bxm == StringLength(lv_bxd)) {
      break;
    }
    lv_bxl = lv_bxl + f_bwY(SubString(lv_bxd, lv_bxm, lv_bxm + 1));
    lv_bxm = lv_bxm + 1;
  } while (true);
  f_bwR(20, lv_bxf, 1, lv_bxl);
  f_bwR(9, lv_bxf, 0, lv_bxl);
  lv_bxl = 1024;
  lv_bxm = 0;
  do {
    if (lv_bxm == StringLength(lv_bxd)) {
      break;
    }
    if (ModuloInteger(lv_bxm, 2) > 0) {
      lv_bxl = lv_bxl + f_bwY(SubString(lv_bxd, lv_bxm, lv_bxm + 1));
    } else {
      lv_bxl = lv_bxl - f_bwY(SubString(lv_bxd, lv_bxm, lv_bxm + 1));
    }
    lv_bxm = lv_bxm + 1;
  } while (true);
  f_bwR(10, lv_bxf, 1, lv_bxl);
  f_bwR(26, lv_bxf, 0, lv_bxl);
  lv_bxl = 0 + lv_bxq;
  lv_bxm = 2;
  do {
    if (lv_bxm > 44) {
      break;
    }
    lv_bxl = lv_bxl + f_bwY(gv_alf[lv_bxm + 150]) - 32;
    lv_bxm = lv_bxm + 1;
  } while (true);
  f_bwR(47, lv_bxf, 1, lv_bxl);
  f_bwR(46, lv_bxf, 0, lv_bxl);
  lv_bxl = 2112 + lv_bxq;
  lv_bxm = 2;
  do {
    if (lv_bxm > 44) {
      break;
    }
    if (ModuloInteger(lv_bxm, 2) > 0) {
      lv_bxl = lv_bxl + f_bwY(gv_alf[lv_bxm + 150]) - 32;
    } else {
      lv_bxl = lv_bxl - f_bwY(gv_alf[lv_bxm + 150]) - 32;
    }
    lv_bxm = lv_bxm + 1;
  } while (true);
  if (lv_bxl < 0) {
    lv_bxl = 0;
  }
  f_bwR(48, lv_bxf, 1, lv_bxl);
  f_bwR(49, lv_bxf, 0, lv_bxl);
  lv_bxl = GetRandomInt(3, 48);
  f_bwR(1, lv_bxf, 0, lv_bxl);
  gv_alf[200] = gv_alf[150];
  gv_alf[201] = gv_alf[151];
  lv_bxm = 2 + 150;
  do {
    if (lv_bxm > 49 + 150) {
      break;
    }
    if (lv_bxm + lv_bxl > 49 + 150) {
      lv_bxl = 2 + lv_bxl - 50;
    }
    gv_alf[lv_bxm + 50] = gv_alf[lv_bxm + lv_bxl];
    lv_bxm = lv_bxm + 1;
  } while (true);
  lv_bxm = 0 + 200;
  do {
    if (lv_bxm > 49 + 200) {
      break;
    }
    lv_bxl = f_bwY(gv_alf[lv_bxm]);
    if (lv_bxl < 1) {
      lv_bxi = S2S(lv_bxi + gv_alf[74]) + gv_alf[lv_bxm] + "|r";
      lv_bxj = S2S(lv_bxj + gv_alf[lv_bxm]);
    } else {
      if (lv_bxl < 65) {
        lv_bxi = S2S(lv_bxi + gv_alf[80]) + gv_alf[lv_bxm] + "|r";
        lv_bxj = S2S(lv_bxj + gv_alf[lv_bxm]);
      } else {
        if (lv_bxl > 96) {
          lv_bxi = S2S(lv_bxi + gv_alf[82]) + gv_alf[lv_bxm] + "|r";
          lv_bxj = S2S(lv_bxj + gv_alf[lv_bxm]);
        } else {
          lv_bxi = S2S(lv_bxi + gv_alf[74]) + gv_alf[lv_bxm] + "|r";
          lv_bxj = S2S(lv_bxj + gv_alf[lv_bxm]);
        }
      }
    }
    if (ModuloInteger(lv_bxm + 1, 5) == 0) {
      if (lv_bxm < 49 + 200) {
        lv_bxi = S2S(lv_bxi + gv_alf[60]) + "-|r";
        lv_bxj = S2S(lv_bxj + "-");
      }
    }
    lv_bxm = lv_bxm + 1;
  } while (true);
  if (GetPlayerId(GetLocalPlayer()) == lv_bxe) {
    ClearTextMessages();
  }
  DisplayTimedTextToPlayer(lv_bxc, 0.4, -0.6, 120, lv_bxh);
  DisplayTimedTextToPlayer(lv_bxc, 0.4, -0.6, 120, lv_bxi);
  if (GetLocalPlayer() == GetTriggerPlayer()) {
    f_aAs(gv_ale[lv_bxe]);
    gv_aaa =
      "TBR 2\\" +
      GetPlayerName(lv_bxc) +
      " " +
      gv_aac +
      " lvl " +
      I2S(GetHeroLevel(gv_ale[lv_bxe])) +
      ", ";
    if (f_ayk(gv_ale[lv_bxe])) {
      gv_aaa = S2S(gv_aaa + "regalia, ");
    }
    gv_aaa =
      S2S(gv_aaa + "Honor ") +
      I2S(GetPlayerState(lv_bxc, PLAYER_STATE_RESOURCE_LUMBER)) +
      ",xp " +
      I2S(GetHeroXP(gv_ale[lv_bxe])) +
      ".txt";
    gv_aab = S2S(lv_bxj + "\r\n\r\n") + "https://discord.gg/YBCmwZS" + "\n";
    DisplayTimedTextToPlayer(
      lv_bxc,
      0.4,
      -0.6,
      15,
      "-" + GetUnitName(gv_ale[lv_bxe]) + "-"
    );
    PreloadGenClear();
    PreloadGenStart();
    Preload(gv_aab);
    lv_bxr = 0;
    do {
      if (lv_bxr > 8) {
        break;
      }
      Preload(lv_bxk[lv_bxr]);
      lv_bxr = lv_bxr + 1;
    } while (true);
    PreloadGenEnd(gv_aaa);
    gv_aaa = "";
    gv_aab = "";
  }
  lv_bxm = 0;
  do {
    if (lv_bxm > 5) {
      break;
    }
    SetItemPlayer(UnitItemInSlot(gv_ale[lv_bxe], lv_bxm), lv_bxc, false);
    SetItemPlayer(UnitItemInSlot(gv_ale[lv_bxe + 8], lv_bxm), lv_bxc, false);
    lv_bxm = lv_bxm + 1;
  } while (true);
  gv_alg[260 + lv_bxe] = gv_alg.getInt(260 + lv_bxe) + 1;
  lv_bxc = null;
}
function f_bxt(lv_bxu, lv_bxv, lv_bxw, lv_bxx) {
  var lv_bxy = 0;
  var lv_bxz = lv_bxu;
  do {
    if (lv_bxz > lv_bxu + 64) {
      break;
    }
    if (
      SubString(S2S(lv_bxv + lv_bxv), lv_bxz, lv_bxz + 1) ==
      SubString(lv_bxx, lv_bxu, lv_bxu + 1)
    ) {
      lv_bxy = lv_bxz - lv_bxu;
      lv_bxz = lv_bxu + 65;
    }
    lv_bxz = lv_bxz + 1;
  } while (true);
  if (lv_bxw == 4) {
    lv_bxy = lv_bxy * 17850625;
  }
  if (lv_bxw == 3) {
    lv_bxy = lv_bxy * 274625;
  }
  if (lv_bxw == 2) {
    lv_bxy = lv_bxy * 4225;
  }
  if (lv_bxw == 1) {
    lv_bxy = lv_bxy * 65;
  }
  return lv_bxy;
}
function f_bxA() {
  var lv_bxB = GetTriggerPlayer();
  var lv_bxC = GetPlayerName(lv_bxB);
  var lv_bxD = GetPlayerId(lv_bxB);
  var lv_bxE = GetEventPlayerChatString();
  var lv_bxF = "";
  var lv_bxG = gv_alf[59];
  var lv_bxH = StringLength(lv_bxG);
  var lv_bxI = 0;
  var lv_bxJ = 0;
  var lv_bxK = 0;
  var lv_bxL = 0;
  var lv_bxM = GetRandomLocInRect(gv_adY);
  if (SubString(lv_bxE, 0, 6) != "-load ") {
    return;
  }
  if (StringLength(lv_bxE) != 65) {
    return;
  }
  if (gv_alg.getInt(260 + lv_bxD) >= 1 && gv_abc == false) {
    return;
  }
  if (gv_alJ.getInt(1000 + lv_bxD) >= 3 && gv_abc == false) {
    f_aLO(
      lv_bxB,
      "Listen assclown, you are done loading heros. Time to -repick"
    );
    return;
  }
  gv_alJ[1000 + lv_bxD] = gv_alJ.getInt(1000 + lv_bxD) + 1;
  lv_bxE = SubString(lv_bxE, 6, StringLength(lv_bxE));
  lv_bxJ = 0;
  do {
    if (lv_bxJ > StringLength(lv_bxE)) {
      break;
    }
    if (SubString(lv_bxE, lv_bxJ, lv_bxJ + 1) == "-") {
    } else {
      lv_bxF = lv_bxF + SubString(lv_bxE, lv_bxJ, lv_bxJ + 1);
    }
    lv_bxJ = lv_bxJ + 1;
  } while (true);
  lv_bxI = 0 + f_bxt(0, lv_bxG, 0, lv_bxF);
  lv_bxG = S2S(lv_bxG + lv_bxG);
  lv_bxG = SubString(lv_bxG, lv_bxI, lv_bxI + lv_bxH);
  lv_bxI = 0 + f_bxt(1, lv_bxG, 0, lv_bxF);
  lv_bxF =
    SubString(lv_bxF, 0, 2) +
    SubString(lv_bxF, 50 - lv_bxI, 50) +
    SubString(lv_bxF, 2, 50 - lv_bxI);
  if (IsUnitType(gv_ale[lv_bxD], UNIT_TYPE_HERO)) {
    lv_bxJ = 0;
    do {
      if (lv_bxJ > 5) {
        break;
      }
      if (UnitItemInSlot(gv_ale[lv_bxD], lv_bxJ) != null) {
        RemoveItem(UnitItemInSlot(gv_ale[lv_bxD], lv_bxJ));
      }
      if (UnitItemInSlot(gv_ale[lv_bxD + 8], lv_bxJ) != null) {
        RemoveItem(UnitItemInSlot(gv_ale[lv_bxD + 8], lv_bxJ));
      }
      lv_bxJ = lv_bxJ + 1;
    } while (true);
  }
  if (gv_ale[lv_bxD] != null) {
    RemoveUnit(gv_ale[lv_bxD]);
    RemoveUnit(gv_ale[lv_bxD + 8]);
    gv_ale[lv_bxD] = null;
    gv_ale[lv_bxD + 8] = null;
  }
  lv_bxI = 0 + f_bxt(22, lv_bxG, 0, lv_bxF);
  if (lv_bxI > 24) {
    lv_bxL = lv_bxL + R2I(Pow(2, 0));
    lv_bxI = 0;
  }
  f_aQg(lv_bxD);
  gv_ale[lv_bxD] = CreateUnit(
    lv_bxB,
    gv_alJ.getInt(500 + lv_bxI),
    7552,
    9992,
    120
  );
  gv_ale[lv_bxD + 8] = CreateUnit(lv_bxB, "e000", 7352, 9752, 270);
  lv_bxI = 0 + f_bxt(37, lv_bxG, 2, lv_bxF);
  lv_bxI = lv_bxI + f_bxt(19, lv_bxG, 1, lv_bxF);
  lv_bxI = lv_bxI + f_bxt(18, lv_bxG, 0, lv_bxF);
  lv_bxI = lv_bxI * 5;
  if (lv_bxI > 1000000) {
    lv_bxL = lv_bxL + R2I(Pow(2, 1));
  }
  SetPlayerState(lv_bxB, PLAYER_STATE_RESOURCE_GOLD, lv_bxI);
  lv_bxI = 0 + f_bxt(21, lv_bxG, 2, lv_bxF);
  lv_bxI = lv_bxI + f_bxt(45, lv_bxG, 1, lv_bxF);
  lv_bxI = lv_bxI + f_bxt(17, lv_bxG, 0, lv_bxF);
  if (lv_bxI > 10000) {
    lv_bxL = lv_bxL + R2I(Pow(2, 2));
  }
  SetPlayerState(lv_bxB, PLAYER_STATE_RESOURCE_LUMBER, lv_bxI);
  lv_bxI = 0 + f_bxt(40, lv_bxG, 3, lv_bxF);
  lv_bxI = lv_bxI + f_bxt(6, lv_bxG, 2, lv_bxF);
  lv_bxI = lv_bxI + f_bxt(30, lv_bxG, 1, lv_bxF);
  lv_bxI = lv_bxI + f_bxt(23, lv_bxG, 0, lv_bxF);
  if (lv_bxI > 3345580) {
    lv_bxL = lv_bxL + R2I(Pow(2, 3));
  }
  SetHeroXP(gv_ale[lv_bxD], lv_bxI, true);
  lv_bxI = 0 + f_bxt(36, lv_bxG, 4, lv_bxF);
  lv_bxI = lv_bxI + f_bxt(2, lv_bxG, 3, lv_bxF);
  lv_bxI = lv_bxI + f_bxt(14, lv_bxG, 2, lv_bxF);
  lv_bxI = lv_bxI + f_bxt(16, lv_bxG, 1, lv_bxF);
  lv_bxI = lv_bxI + f_bxt(25, lv_bxG, 0, lv_bxF);
  lv_bxJ = R2I(lv_bxI / 1102500);
  SetHeroStr(gv_ale[lv_bxD], lv_bxJ, true);
  if (lv_bxJ > 500) {
    lv_bxL = lv_bxL + R2I(Pow(2, 8));
  }
  lv_bxI = lv_bxI - lv_bxJ * 1102500;
  lv_bxJ = R2I(lv_bxI / 1050);
  SetHeroAgi(gv_ale[lv_bxD], lv_bxJ, true);
  if (lv_bxJ > 500) {
    lv_bxL = lv_bxL + R2I(Pow(2, 9));
  }
  lv_bxI = lv_bxI - lv_bxJ * 1050;
  lv_bxJ = lv_bxI;
  SetHeroInt(gv_ale[lv_bxD], lv_bxJ, true);
  if (lv_bxJ > 500) {
    lv_bxL = lv_bxL + R2I(Pow(2, 10));
  }
  lv_bxJ =
    GetHeroStr(gv_ale[lv_bxD], false) +
    GetHeroAgi(gv_ale[lv_bxD], false) +
    GetHeroInt(gv_ale[lv_bxD], false);
  if (lv_bxJ > 500) {
    lv_bxL = lv_bxL + R2I(Pow(2, 11));
  }
  UnitModifySkillPoints(gv_ale[lv_bxD], 0 - GetHeroSkillPoints(gv_ale[lv_bxD]));
  lv_bxI = 0 + f_bxt(27, lv_bxG, 2, lv_bxF);
  lv_bxI = lv_bxI + f_bxt(44, lv_bxG, 1, lv_bxF);
  lv_bxI = lv_bxI + f_bxt(11, lv_bxG, 0, lv_bxF);
  lv_bxJ = 4;
  do {
    if (lv_bxJ < 0) {
      break;
    }
    lv_bxK = lv_bxI / R2I(Pow(10, I2R(lv_bxJ)));
    lv_bxI = lv_bxI - lv_bxK * R2I(Pow(10, I2R(lv_bxJ)));
    if (GetHeroLevel(gv_ale[lv_bxD]) / 25 + 1 < lv_bxK) {
      lv_bxK = GetHeroLevel(gv_ale[lv_bxD]) / 25 + 1;
    }
    if (lv_bxK > 0) {
      if (lv_bxJ == 4) {
        f_aMz(gv_ale[lv_bxD]);
      }
      SetUnitAbilityLevelSwapped(
        gv_alJ.getInt(GetUnitPointValue(gv_ale[lv_bxD]) * 5 + 640 + lv_bxJ),
        gv_ale[lv_bxD],
        lv_bxK
      );
    }
    gv_alg[lv_bxD * 5 + 200 + lv_bxJ] = lv_bxK;
    lv_bxJ = lv_bxJ - 1;
  } while (true);
  lv_bxK = 0 + f_bxt(20, lv_bxG, 1, lv_bxF);
  lv_bxK = lv_bxK + f_bxt(9, lv_bxG, 0, lv_bxF);
  lv_bxI = 0;
  lv_bxJ = 0;
  do {
    if (lv_bxJ == StringLength(lv_bxC)) {
      break;
    }
    lv_bxI = lv_bxI + f_bwY(SubString(lv_bxC, lv_bxJ, lv_bxJ + 1));
    lv_bxJ = lv_bxJ + 1;
  } while (true);
  if (lv_bxI != lv_bxK) {
    lv_bxL = lv_bxL + R2I(Pow(2, 4));
  }
  lv_bxK = 0 + f_bxt(10, lv_bxG, 1, lv_bxF);
  lv_bxK = lv_bxK + f_bxt(26, lv_bxG, 0, lv_bxF);
  lv_bxI = 1024;
  lv_bxJ = 0;
  do {
    if (lv_bxJ == StringLength(lv_bxC)) {
      break;
    }
    if (ModuloInteger(lv_bxJ, 2) > 0) {
      lv_bxI = lv_bxI + f_bwY(SubString(lv_bxC, lv_bxJ, lv_bxJ + 1));
    } else {
      lv_bxI = lv_bxI - f_bwY(SubString(lv_bxC, lv_bxJ, lv_bxJ + 1));
    }
    lv_bxJ = lv_bxJ + 1;
  } while (true);
  if (lv_bxI != lv_bxK) {
    lv_bxL = lv_bxL + R2I(Pow(2, 5));
  }
  lv_bxK = 0 + f_bxt(47, lv_bxG, 1, lv_bxF);
  lv_bxK = lv_bxK + f_bxt(46, lv_bxG, 0, lv_bxF);
  lv_bxI = 0;
  lv_bxJ = 2;
  do {
    if (lv_bxJ > 44) {
      break;
    }
    lv_bxI = lv_bxI + f_bwY(SubString(lv_bxF, lv_bxJ, lv_bxJ + 1)) - 32;
    lv_bxJ = lv_bxJ + 1;
  } while (true);
  if (lv_bxI != lv_bxK) {
    lv_bxL = lv_bxL + R2I(Pow(2, 6));
  }
  lv_bxK = 0 + f_bxt(48, lv_bxG, 1, lv_bxF);
  lv_bxK = lv_bxK + f_bxt(49, lv_bxG, 0, lv_bxF);
  lv_bxI = 2112;
  lv_bxJ = 2;
  do {
    if (lv_bxJ > 44) {
      break;
    }
    if (ModuloInteger(lv_bxJ, 2) > 0) {
      lv_bxI = lv_bxI + f_bwY(SubString(lv_bxF, lv_bxJ, lv_bxJ + 1)) - 32;
    } else {
      lv_bxI = lv_bxI - f_bwY(SubString(lv_bxF, lv_bxJ, lv_bxJ + 1)) - 32;
    }
    lv_bxJ = lv_bxJ + 1;
  } while (true);
  if (lv_bxI != lv_bxK) {
    lv_bxL = lv_bxL + R2I(Pow(2, 7));
  }
  if (lv_bxL > 0) {
    DisplayTimedTextToPlayer(lv_bxB, 0, -0.6, 120, "h=" + I2S(lv_bxL));
    SetPlayerState(lv_bxB, PLAYER_STATE_RESOURCE_GOLD, lv_bxL);
    SetPlayerState(lv_bxB, PLAYER_STATE_RESOURCE_LUMBER, 0);
    RemoveUnit(gv_ale[lv_bxD]);
    gv_ale[lv_bxD] = CreateUnit(lv_bxB, "nech", 7552, 9952, 270);
  } else {
    gv_alg[260 + lv_bxD] = gv_alg.getInt(260 + lv_bxD) + 1;
    lv_bxI = 0 + f_bxt(32, lv_bxG, 2, lv_bxF);
    lv_bxI = lv_bxI + f_bxt(24, lv_bxG, 1, lv_bxF);
    lv_bxI = lv_bxI + f_bxt(3, lv_bxG, 0, lv_bxF);
    lv_bxJ = R2I(lv_bxI / 500);
    UnitAddItemByIdSwapped(gv_alJ.getInt(lv_bxJ), gv_ale[lv_bxD]);
    lv_bxI = lv_bxI - lv_bxJ * 500;
    lv_bxJ = lv_bxI;
    UnitAddItemByIdSwapped(gv_alJ.getInt(lv_bxJ), gv_ale[lv_bxD]);
    lv_bxI = 0 + f_bxt(41, lv_bxG, 2, lv_bxF);
    lv_bxI = lv_bxI + f_bxt(4, lv_bxG, 1, lv_bxF);
    lv_bxI = lv_bxI + f_bxt(38, lv_bxG, 0, lv_bxF);
    lv_bxJ = R2I(lv_bxI / 500);
    UnitAddItemByIdSwapped(gv_alJ.getInt(lv_bxJ), gv_ale[lv_bxD]);
    lv_bxI = lv_bxI - lv_bxJ * 500;
    lv_bxJ = lv_bxI;
    UnitAddItemByIdSwapped(gv_alJ.getInt(lv_bxJ), gv_ale[lv_bxD]);
    lv_bxI = 0 + f_bxt(13, lv_bxG, 2, lv_bxF);
    lv_bxI = lv_bxI + f_bxt(29, lv_bxG, 1, lv_bxF);
    lv_bxI = lv_bxI + f_bxt(33, lv_bxG, 0, lv_bxF);
    lv_bxJ = R2I(lv_bxI / 500);
    UnitAddItemByIdSwapped(gv_alJ.getInt(lv_bxJ), gv_ale[lv_bxD]);
    lv_bxI = lv_bxI - lv_bxJ * 500;
    lv_bxJ = lv_bxI;
    UnitAddItemByIdSwapped(gv_alJ.getInt(lv_bxJ), gv_ale[lv_bxD]);
    lv_bxI = 0 + f_bxt(15, lv_bxG, 2, lv_bxF);
    lv_bxI = lv_bxI + f_bxt(34, lv_bxG, 1, lv_bxF);
    lv_bxI = lv_bxI + f_bxt(31, lv_bxG, 0, lv_bxF);
    lv_bxJ = R2I(lv_bxI / 500);
    UnitAddItemToSlotById(gv_ale[lv_bxD + 8], gv_alJ.getInt(lv_bxJ), 0);
    lv_bxI = lv_bxI - lv_bxJ * 500;
    lv_bxJ = lv_bxI;
    UnitAddItemToSlotById(gv_ale[lv_bxD + 8], gv_alJ.getInt(lv_bxJ), 1);
    lv_bxI = 0 + f_bxt(12, lv_bxG, 2, lv_bxF);
    lv_bxI = lv_bxI + f_bxt(7, lv_bxG, 1, lv_bxF);
    lv_bxI = lv_bxI + f_bxt(5, lv_bxG, 0, lv_bxF);
    lv_bxJ = R2I(lv_bxI / 500);
    UnitAddItemToSlotById(gv_ale[lv_bxD + 8], gv_alJ.getInt(lv_bxJ), 2);
    lv_bxI = lv_bxI - lv_bxJ * 500;
    lv_bxJ = lv_bxI;
    UnitAddItemToSlotById(gv_ale[lv_bxD + 8], gv_alJ.getInt(lv_bxJ), 3);
    lv_bxI = 0 + f_bxt(43, lv_bxG, 2, lv_bxF);
    lv_bxI = lv_bxI + f_bxt(28, lv_bxG, 1, lv_bxF);
    lv_bxI = lv_bxI + f_bxt(35, lv_bxG, 0, lv_bxF);
    lv_bxJ = R2I(lv_bxI / 500);
    UnitAddItemToSlotById(gv_ale[lv_bxD + 8], gv_alJ.getInt(lv_bxJ), 4);
    lv_bxI = lv_bxI - lv_bxJ * 500;
    lv_bxJ = lv_bxI;
    UnitAddItemToSlotById(gv_ale[lv_bxD + 8], gv_alJ.getInt(lv_bxJ), 5);
    lv_bxI = 0 + f_bxt(39, lv_bxG, 2, lv_bxF);
    lv_bxI = lv_bxI + f_bxt(42, lv_bxG, 1, lv_bxF);
    lv_bxI = lv_bxI + f_bxt(8, lv_bxG, 0, lv_bxF);
    lv_bxJ = 5;
    do {
      if (lv_bxJ < 0) {
        break;
      }
      lv_bxK = lv_bxI / R2I(Pow(8, I2R(lv_bxJ)));
      if (lv_bxK > 1) {
        SetItemCharges(UnitItemInSlot(gv_ale[lv_bxD + 8], lv_bxJ), lv_bxK);
      }
      lv_bxI = lv_bxI - lv_bxK * R2I(Pow(8, I2R(lv_bxJ)));
      lv_bxJ = lv_bxJ - 1;
    } while (true);
    lv_bxJ = 0;
    do {
      if (lv_bxJ > 5) {
        break;
      }
      SetItemPlayer(UnitItemInSlot(gv_ale[lv_bxD], lv_bxJ), lv_bxB, false);
      SetItemPlayer(UnitItemInSlot(gv_ale[lv_bxD + 8], lv_bxJ), lv_bxB, false);
      lv_bxJ = lv_bxJ + 1;
    } while (true);
  }
  DisplayTimedTextToPlayer(
    lv_bxB,
    0,
    0,
    60,
    "Welcome back to |cffff0000The Black Road 2|r!"
  );
  DisplayTimedTextToPlayer(lv_bxB, 0, 0, 60, "     ");
  MultiboardSetItemValueBJ(gv_aly, 3, lv_bxD + 2, GetUnitName(gv_ale[lv_bxD]));
  MultiboardSetItemValueBJ(
    gv_aly,
    4,
    lv_bxD + 2,
    gv_alf[75] + I2S(GetHeroLevel(gv_ale[lv_bxD])) + "|r"
  );
  gv_alg[lv_bxD + 300] = 1;
  gv_alf[GetPlayerId(lv_bxB) + 30] = "O";
  if (lv_bxB == GetLocalPlayer()) {
    ResetToGameCamera(0.0);
    SetCameraBoundsToRect(bj_mapInitialPlayableArea);
    ClearTextMessages();
    ClearSelection();
    SelectUnit(gv_ale[lv_bxD], true);
    SetCameraField(CAMERA_FIELD_TARGET_DISTANCE, 2500, 1);
  }
  UnitAddAbility(gv_ale[lv_bxD], "Amrf");
  UnitRemoveAbility(gv_ale[lv_bxD], "Amrf");
  PanCameraToTimedForPlayer(lv_bxB, 7552, 9952, 0.5);
  SetPlayerAlliance(Player(9), lv_bxB, ALLIANCE_SHARED_VISION, true);
  SetPlayerAlliance(
    Player(PLAYER_NEUTRAL_PASSIVE),
    lv_bxB,
    ALLIANCE_SHARED_CONTROL,
    false
  );
  SetPlayerAlliance(
    Player(PLAYER_NEUTRAL_PASSIVE),
    lv_bxB,
    ALLIANCE_SHARED_VISION,
    false
  );
  lv_bxJ = GetHeroLevel(gv_ale[lv_bxD]) / 2;
  SetPlayerState(Player(lv_bxD), PLAYER_STATE_RESOURCE_FOOD_USED, lv_bxJ);
  lv_bxB = null;
  lv_bxM = null;
  RemoveLocation(lv_bxM);
}
function f_bxN() {
  var lv_bxO = 0;
  var lv_bxP = 0;
  do {
    if (lv_bxO > 7) {
      break;
    }
    gv_alu = Player(lv_bxO);
    do {
      if (lv_bxP > 9) {
        break;
      }
      if (gv_alu != Player(lv_bxP)) {
        SetPlayerAlliance(
          gv_alu,
          Player(lv_bxP),
          ALLIANCE_SHARED_CONTROL,
          false
        );
      }
      lv_bxP = lv_bxP + 1;
    } while (true);
    lv_bxP = 0;
    lv_bxO = lv_bxO + 1;
  } while (true);
}
function f_bxQ() {
  var lv_bxR = CreateTrigger();
  var lv_bxS = 0;
  do {
    if (lv_bxS > 7) {
      break;
    }
    TriggerRegisterPlayerAllianceChange(
      lv_bxR,
      Player(lv_bxS),
      ALLIANCE_SHARED_CONTROL
    );
    lv_bxS = lv_bxS + 1;
  } while (true);
  TriggerAddAction(lv_bxR, f_bxN);
  lv_bxR = null;
}
function f_bxT() {
  var lv_bxU = 0;
  if (IsUnitVisible(gv_ajZ, Player(8))) {
    gv_alg[8105] = 1;
    DisplayTimedTextToForce(
      gv_alq,
      30,
      "|cffff0000Full Vision was enabled.  Game ending in 15 seconds.|r"
    );
    TriggerSleepAction(15);
    lv_bxU = 0;
    do {
      if (lv_bxU > 7) {
        break;
      }
      CustomDefeatBJ(Player(lv_bxU), "Full Vision Enabled");
      lv_bxU = lv_bxU + 1;
    } while (true);
  }
}
function f_bxV() {
  var lv_bxW = ForcePickRandomPlayer(gv_alq);
  var lv_bxX = CreateUnit(lv_bxW, BonusMod__PRELOAD_DUMMY_UNIT, 0, 0, 0);
  var lv_bxY = 0;
  if (GetLocalPlayer() == lv_bxW) {
    SelectUnit(lv_bxX, true);
    if (IsUnitSelected(lv_bxX, lv_bxW)) {
      if (ReloadGameCachesFromDisk()) {
        CustomDefeatDialogBJ(lv_bxW, "Not Enough Players");
      } else {
      }
    } else {
    }
  }
  lv_bxW = null;
  RemoveUnit(lv_bxX);
  lv_bxX = null;
}
function f_bxZ() {
  var lv_bya = 0;
  var lv_byb = 0;
  if (gv_alg.getInt(8105) == 1) {
    return;
  }
  do {
    if (lv_bya > 7) {
      break;
    }
    if (
      GetPlayerController(Player(lv_bya)) == MAP_CONTROL_USER &&
      GetPlayerSlotState(Player(lv_bya)) == PLAYER_SLOT_STATE_PLAYING
    ) {
      lv_byb = lv_byb + 1;
    }
    lv_bya = lv_bya + 1;
  } while (true);
  lv_bya = 8;
  do {
    if (lv_bya > 11) {
      break;
    }
    if (GetPlayerController(Player(lv_bya)) == MAP_CONTROL_USER) {
      lv_byb = 0;
    }
    lv_bya = lv_bya + 1;
  } while (true);
  if (
    lv_byb < 2 &&
    !(StringHash(GetPlayerName(Player(0))) == 381224678) &&
    1 == 0
  ) {
    gv_alg[8105] = 1;
    DisplayTimedTextToForce(
      gv_alq,
      30,
      "|cffff0000Not enough players.  Game ending in 30 seconds.|r"
    );
    TriggerSleepAction(30);
    if (gv_abc) {
      return;
    }
    lv_bya = 0;
    do {
      if (lv_bya > 7) {
        break;
      }
      RemovePlayer(Player(lv_bya), PLAYER_GAME_RESULT_DEFEAT);
      if (GetPlayerController(Player(lv_bya)) == MAP_CONTROL_USER) {
        CustomDefeatDialogBJ(Player(lv_bya), "Not Enough Players");
      }
      lv_bya = lv_bya + 1;
    } while (true);
  }
  f_bxV();
}
function f_byc() {
  if (GetUnitStateSwap(UNIT_STATE_MANA, gv_akK) >= 100) {
    gv_acz = GetUnitLoc(GetAttacker());
    IssuePointOrderByIdLoc(gv_akK, 852125, gv_acz);
    RemoveLocation(gv_acz);
    DisableTrigger(GetTriggeringTrigger());
    TriggerSleepAction(5);
    EnableTrigger(GetTriggeringTrigger());
  }
}
function f_byd() {
  return GetUnitStateSwap(UNIT_STATE_MANA, gv_aki) >= 65;
}
function f_bye() {
  if (f_byd()) {
    IssueTargetOrderById(gv_aki, 852527, GetAttacker());
    DisableTrigger(GetTriggeringTrigger());
    TriggerSleepAction(5);
    EnableTrigger(GetTriggeringTrigger());
  }
}
function f_byf() {
  return GetUnitStateSwap(UNIT_STATE_MANA, gv_aaU[9]) >= 125;
}
function f_byg() {
  if (f_byf()) {
    IssueTargetOrderById(gv_aaU[9], 852226, GetAttacker());
    DisableTrigger(GetTriggeringTrigger());
    TriggerSleepAction(11);
    EnableTrigger(GetTriggeringTrigger());
  }
}
function f_byh() {
  return (
    GetUnitState(gv_akN, UNIT_STATE_MANA) >= 300 &&
    GetAttacker() == gv_acw &&
    IsUnitAlly(GetTriggerUnit(), Player(8))
  );
}
function f_byi() {
  if (
    GetUnitState(gv_akN, UNIT_STATE_MANA) >= 300 &&
    GetAttacker() == gv_acw &&
    IsUnitAlly(GetTriggerUnit(), Player(8)) &&
    !IsUnitHidden(gv_akN)
  ) {
    IssueTargetOrderById(gv_aaU[9], 852144, gv_acw);
    DisableTrigger(GetTriggeringTrigger());
    TriggerSleepAction(15);
    EnableTrigger(GetTriggeringTrigger());
  }
}
function f_byj() {
  return GetUnitTypeId(GetAttacker()) == "n00B" && GetRandomInt(1, 10) == 3;
}
function f_byk() {
  IssueTargetOrderById(GetAttacker(), 852179, GetTriggerUnit());
}
function f_byl() {
  return GetUnitStateSwap(UNIT_STATE_MANA, gv_akM) >= 250;
}
function f_bym() {
  if (f_byl()) {
    IssueImmediateOrderById(gv_akM, 852556);
    DisableTrigger(GetTriggeringTrigger());
    TriggerSleepAction(60);
    EnableTrigger(GetTriggeringTrigger());
  }
}
function f_byn() {
  return GetUnitStateSwap(UNIT_STATE_MANA, gv_akI) >= 1;
}
function f_byo() {
  if (f_byn()) {
    IssueImmediateOrderById(gv_akI, 852588);
    DisableTrigger(GetTriggeringTrigger());
    TriggerSleepAction(12);
    EnableTrigger(GetTriggeringTrigger());
  }
}
function f_byp() {
  return GetUnitStateSwap(UNIT_STATE_MANA, gv_aks) >= 75;
}
function f_byq() {
  if (f_byp()) {
    IssueTargetOrderById(gv_aks, 852487, GetAttacker());
    DisableTrigger(GetTriggeringTrigger());
    TriggerSleepAction(8);
    EnableTrigger(GetTriggeringTrigger());
  }
}
function f_byr() {
  return GetUnitStateSwap(UNIT_STATE_MANA, gv_akx) >= 0.0;
}
function f_bys() {
  if (f_byr()) {
    gv_acz = GetRandomLocInRect(gv_afK);
    CreateNUnitsAtLoc(1, "nfor", Player(10), gv_acz, 320);
    UnitApplyTimedLifeBJ(30, "Bapl", bj_lastCreatedUnit);
    RemoveLocation(gv_acz);
    gv_acz = GetRandomLocInRect(gv_afK);
    CreateNUnitsAtLoc(1, "nfor", Player(10), gv_acz, 320);
    UnitApplyTimedLifeBJ(30, "Bapl", bj_lastCreatedUnit);
    RemoveLocation(gv_acz);
    gv_acz = GetRandomLocInRect(gv_afK);
    CreateNUnitsAtLoc(
      1,
      "nfor",
      Player(10),
      gv_acz,
      GetUnitFacing(GetTriggerUnit())
    );
    UnitApplyTimedLifeBJ(30, "Bapl", bj_lastCreatedUnit);
    RemoveLocation(gv_acz);
    DisableTrigger(GetTriggeringTrigger());
    TriggerSleepAction(3.5);
    EnableTrigger(GetTriggeringTrigger());
  }
}
function f_byt() {
  var lv_byu = 0;
  do {
    if (lv_byu > 8) {
      break;
    }
    SetPlayerTeam(Player(0), 0);
    SetPlayerAllianceStateAllyBJ(Player(lv_byu), Player(8), true);
    lv_byu = lv_byu + 1;
  } while (true);
  SetPlayerTeam(Player(9), 0);
  SetPlayerState(Player(8), PLAYER_STATE_ALLIED_VICTORY, 1);
  SetPlayerTeam(Player(10), 2);
  SetPlayerState(Player(10), PLAYER_STATE_ALLIED_VICTORY, 1);
  SetPlayerTeam(Player(11), 2);
  SetPlayerState(Player(11), PLAYER_STATE_ALLIED_VICTORY, 1);
  SetPlayerAllianceStateAllyBJ(Player(10), Player(11), true);
  SetPlayerAllianceStateAllyBJ(Player(11), Player(10), true);
  SetPlayerAllianceStateVisionBJ(Player(10), Player(11), true);
  SetPlayerAllianceStateVisionBJ(Player(11), Player(10), true);
}
function main() {
  var lv_byv;
  var lv_byw;
  var lv_byx;
  var lv_byy;
  var lv_byz;
  var lv_byA;
  var lv_byB;
  var lv_byC;
  var lv_byD;
  var lv_byE;
  var lv_byF;
  SetCameraBounds(
    -15616 + GetCameraMargin(CAMERA_MARGIN_LEFT),
    -15872 + GetCameraMargin(CAMERA_MARGIN_BOTTOM),
    15616 - GetCameraMargin(CAMERA_MARGIN_RIGHT),
    15360 - GetCameraMargin(CAMERA_MARGIN_TOP),
    -15616 + GetCameraMargin(CAMERA_MARGIN_LEFT),
    15360 - GetCameraMargin(CAMERA_MARGIN_TOP),
    15616 - GetCameraMargin(CAMERA_MARGIN_RIGHT),
    -15872 + GetCameraMargin(CAMERA_MARGIN_BOTTOM)
  );
  SetDayNightModels(
    "Environment\\DNC\\DNCAshenvale\\DNCAshenvaleTerrain\\DNCAshenvaleTerrain.mdl",
    "Environment\\DNC\\DNCAshenvale\\DNCAshenvaleUnit\\DNCAshenvaleUnit.mdl"
  );
  SetWaterBaseColor(0, 0, 200, 255);
  NewSoundEnvironment("Default");
  SetAmbientDaySound("AshenvaleDay");
  SetAmbientNightSound("AshenvaleNight");
  SetMapMusic("Music", true, 0);
  gv_afL = CreateSound(
    "Sound\\Interface\\Hint.wav",
    false,
    false,
    false,
    10,
    10,
    "DefaultEAXON"
  );
  SetSoundParamsFromLabel(gv_afL, "Hint");
  SetSoundDuration(gv_afL, 2006);
  gv_afM = CreateSound(
    "Abilities\\Spells\\NightElf\\BattleRoar\\BattleRoar.wav",
    false,
    false,
    true,
    10,
    10,
    "SpellsEAX"
  );
  SetSoundParamsFromLabel(gv_afM, "BattleRoar");
  SetSoundDuration(gv_afM, 1991);
  SetSoundChannel(gv_afM, 8);
  gv_afN = CreateSound(
    "Buildings\\Other\\MageTower\\MageTowerWhat1.wav",
    false,
    false,
    true,
    10,
    10,
    "SpellsEAX"
  );
  SetSoundParamsFromLabel(gv_afN, "MageTowerWhat");
  SetSoundDuration(gv_afN, 3274);
  SetSoundChannel(gv_afN, 8);
  SetSoundVolume(gv_afN, 127);
  gv_afO = CreateSound(
    "Units\\NightElf\\MountainGiant\\MountainGiantPissed1.wav",
    false,
    false,
    true,
    10,
    10,
    "SpellsEAX"
  );
  SetSoundParamsFromLabel(gv_afO, "MountainGiantPissed");
  SetSoundDuration(gv_afO, 2444);
  SetSoundChannel(gv_afO, 8);
  gv_afP = CreateSound(
    "Doodads\\LordaeronSummer\\Terrain\\Gate\\GateEpicDeath.wav",
    false,
    false,
    true,
    10,
    10,
    "SpellsEAX"
  );
  SetSoundParamsFromLabel(gv_afP, "GateDeath");
  SetSoundDuration(gv_afP, 1582);
  SetSoundChannel(gv_afP, 8);
  gv_afQ = CreateSound(
    "Units\\NightElf\\Chimaera\\ChimaeraPissed1.wav",
    false,
    false,
    true,
    10,
    10,
    "SpellsEAX"
  );
  SetSoundParamsFromLabel(gv_afQ, "ChimaeraPissed");
  SetSoundDuration(gv_afQ, 1521);
  SetSoundChannel(gv_afQ, 8);
  SetSoundVolume(gv_afQ, 127);
  gv_afR = CreateSound(
    "Units\\Naga\\LadyVashj\\LadyVashjWhat5.wav",
    false,
    false,
    true,
    10,
    10,
    "SpellsEAX"
  );
  SetSoundParamsFromLabel(gv_afR, "SeaWitchWhat");
  SetSoundDuration(gv_afR, 1927);
  SetSoundChannel(gv_afR, 8);
  gv_afS = CreateSound(
    "Abilities\\Spells\\Orc\\Bloodlust\\BloodlustTarget.wav",
    false,
    false,
    true,
    10,
    10,
    "SpellsEAX"
  );
  SetSoundParamsFromLabel(gv_afS, "Bloodlust");
  SetSoundDuration(gv_afS, 2583);
  SetSoundChannel(gv_afS, 8);
  gv_acB = Rect(96, 12160, 512, 12608);
  gv_acC = Rect(5824, 8352, 9088, 11712);
  gv_acD = Rect(1280, 13184, 3008, 15264);
  gv_acE = Rect(2624, 1536, 5024, 7072);
  gv_acF = Rect(5024, 2880, 7776, 7936);
  gv_acG = Rect(1056, 832, 2720, 3968);
  gv_acH = Rect(8864, 5088, 10400, 6368);
  gv_acI = Rect(10528, 5824, 11104, 6400);
  gv_acJ = Rect(6688, 12768, 8128, 13056);
  gv_acK = Rect(6720, 13056, 8000, 13344);
  gv_acL = Rect(6784, 13344, 8000, 13632);
  gv_acM = Rect(6976, 13632, 8000, 13920);
  gv_acN = Rect(-3488, -2624, -3424, -2560);
  gv_acO = Rect(-2464, -1792, -2400, -1728);
  gv_acP = Rect(-1376, -1120, -1312, -1056);
  gv_acQ = Rect(-3456, -192, -3392, -128);
  gv_acR = Rect(-4800, -352, -4736, -288);
  gv_acS = Rect(-8448, -3520, -8384, -3456);
  gv_acT = Rect(6112, 3648, 6176, 3712);
  gv_acU = Rect(7872, 5984, 7936, 6048);
  gv_acV = Rect(4544, 6944, 4608, 7008);
  gv_acW = Rect(-13664, -11680, -2144, -10080);
  gv_acX = Rect(-3584, -13056, 320, -8960);
  gv_acY = Rect(-10848, -14912, -2048, -11616);
  gv_acZ = Rect(-13152, -14016, -10816, -11648);
  gv_ada = Rect(-13568, -10112, -8864, -9216);
  gv_adb = Rect(13184, -3648, 14400, -2464);
  gv_adc = Rect(14752, -8800, 14976, -8608);
  gv_add = Rect(-14656, 14016, -14496, 14176);
  gv_ade = Rect(-2272, 512, 1056, 3456);
  gv_adf = Rect(128, 2400, 256, 2528);
  gv_adg = Rect(3008, -6592, 6240, -1696);
  lv_byv = AddWeatherEffect(gv_adg, "RAlr");
  EnableWeatherEffect(lv_byv, true);
  gv_adh = Rect(1472, -6592, 3104, -1312);
  lv_byv = AddWeatherEffect(gv_adh, "RAlr");
  EnableWeatherEffect(lv_byv, true);
  gv_adi = Rect(1792, -7840, 5856, -6592);
  lv_byv = AddWeatherEffect(gv_adi, "RAlr");
  EnableWeatherEffect(lv_byv, true);
  gv_adj = Rect(2592, -8768, 4416, -7840);
  lv_byv = AddWeatherEffect(gv_adj, "RAlr");
  EnableWeatherEffect(lv_byv, true);
  gv_adk = Rect(3712, -2016, 5856, -928);
  lv_byv = AddWeatherEffect(gv_adk, "RAlr");
  EnableWeatherEffect(lv_byv, true);
  gv_adl = Rect(4160, -1248, 4320, -1088);
  gv_adm = Rect(13440, -12736, 15232, -10720);
  gv_adn = Rect(13340, -12736, 15232, -10720);
  gv_ado = Rect(12704, 3360, 15200, 7456);
  lv_byv = AddWeatherEffect(gv_ado, "FDwh");
  EnableWeatherEffect(lv_byv, true);
  gv_adp = Rect(-12864, 14880, -12544, 15040);
  gv_adq = Rect(14304, 4192, 14400, 4288);
  gv_adr = Rect(14240, 3808, 14624, 4096);
  gv_ads = Rect(-12608, 14400, -12512, 14496);
  gv_adt = Rect(-13024, 13600, -12032, 14624);
  gv_adu = Rect(-14944, 14496, -14464, 14656);
  gv_adv = Rect(-13440, -4960, -11136, -960);
  lv_byv = AddWeatherEffect(gv_adv, "FDwh");
  EnableWeatherEffect(lv_byv, true);
  gv_adw = Rect(-13024, -6016, -8384, -4608);
  lv_byv = AddWeatherEffect(gv_adw, "FDwh");
  EnableWeatherEffect(lv_byv, true);
  gv_adx = Rect(-3616, -8960, -1056, -5248);
  lv_byv = AddWeatherEffect(gv_adx, "FDwh");
  EnableWeatherEffect(lv_byv, true);
  gv_ady = Rect(-8864, -10080, -3584, -5216);
  lv_byv = AddWeatherEffect(gv_ady, "FDwh");
  EnableWeatherEffect(lv_byv, true);
  gv_adz = Rect(-4960, -5248, -2112, -3712);
  lv_byv = AddWeatherEffect(gv_adz, "FDwh");
  EnableWeatherEffect(lv_byv, true);
  gv_adA = Rect(2048, 14336, 2112, 14400);
  gv_adB = Rect(8832, -8320, 15488, 2304);
  lv_byv = AddWeatherEffect(gv_adB, "SNbs");
  EnableWeatherEffect(lv_byv, true);
  gv_adC = Rect(10240, -5696, 10880, -4960);
  gv_adD = Rect(14240, -5280, 14880, -4512);
  gv_adE = Rect(10816, -3008, 11648, -2272);
  gv_adF = Rect(11776, -4256, 12384, -3488);
  gv_adG = Rect(9248, -3712, 9984, -3008);
  gv_adH = Rect(12768, -6016, 13536, -5280);
  gv_adI = Rect(14240, -9184, 14592, -8832);
  gv_adJ = Rect(-2016, -15872, 704, -13248);
  gv_adK = Rect(7040, 13920, 7936, 14208);
  gv_adL = Rect(8544, -12608, 8704, -12480);
  gv_adM = Rect(7968, -12416, 8320, -12032);
  gv_adN = Rect(1248, 9056, 4864, 12736);
  gv_adO = Rect(3200, 12672, 5376, 14752);
  gv_adP = Rect(9984, 7968, 10976, 9152);
  gv_adQ = Rect(-16384, 13376, -11520, 16352);
  lv_byv = AddWeatherEffect(gv_adQ, "SNbs");
  EnableWeatherEffect(lv_byv, true);
  gv_adR = Rect(-14784, -15520, -13696, -14400);
  gv_adS = Rect(5024, -10272, 6528, -8544);
  lv_byv = AddWeatherEffect(gv_adS, "RAhr");
  EnableWeatherEffect(lv_byv, true);
  gv_adT = Rect(7712, 1888, 7808, 1984);
  gv_adU = Rect(5728, 1312, 5824, 1408);
  gv_adV = Rect(7392, 512, 7488, 608);
  gv_adW = Rect(5056, -448, 8288, 2624);
  gv_adX = Rect(-15136, 6272, -8960, 13376);
  gv_adY = Rect(7456, 9856, 7648, 10048);
  gv_adZ = Rect(2912, -15264, 5120, -12800);
  gv_aea = Rect(-9440, -6208, -9312, -6080);
  gv_aeb = Rect(-992, -64, -736, 192);
  gv_aec = Rect(-8960, 7424, -5056, 9184);
  lv_byv = AddWeatherEffect(gv_aec, "RAlr");
  EnableWeatherEffect(lv_byv, true);
  gv_aed = Rect(-8960, 6752, -5600, 7424);
  lv_byv = AddWeatherEffect(gv_aed, "RAlr");
  EnableWeatherEffect(lv_byv, true);
  gv_aee = Rect(-8832, 6080, -6528, 6752);
  lv_byv = AddWeatherEffect(gv_aee, "RAlr");
  EnableWeatherEffect(lv_byv, true);
  gv_aef = Rect(-8864, 9184, -2848, 12928);
  gv_aeg = Rect(-7968, 11200, -672, 14816);
  lv_byv = AddWeatherEffect(gv_aeg, "RAlr");
  EnableWeatherEffect(lv_byv, true);
  gv_aeh = Rect(-15360, 6304, -8832, 12320);
  lv_byv = AddWeatherEffect(gv_aeh, "SNhs");
  EnableWeatherEffect(lv_byv, true);
  gv_aei = Rect(-14752, 12320, -11264, 13376);
  lv_byv = AddWeatherEffect(gv_aei, "SNls");
  EnableWeatherEffect(lv_byv, true);
  gv_aej = Rect(12800, 13440, 14464, 15040);
  gv_aek = Rect(9792, 9856, 10112, 14336);
  gv_ael = Rect(672, -11872, 3136, -8768);
  lv_byv = AddWeatherEffect(gv_ael, "RAhr");
  EnableWeatherEffect(lv_byv, true);
  gv_aem = Rect(-11808, 1920, -11744, 1984);
  gv_aen = Rect(928, 8480, 992, 8544);
  gv_aeo = Rect(-10400, 3392, -10336, 3488);
  gv_aep = Rect(-10176, 4672, -10112, 4736);
  gv_aeq = Rect(-7872, 2304, -7808, 2368);
  gv_aer = Rect(-4736, 864, -4672, 928);
  gv_aes = Rect(-4288, 2848, -4224, 2912);
  gv_aet = Rect(-2464, 4160, -2400, 4224);
  gv_aeu = Rect(-2272, 5920, -2208, 5984);
  gv_aev = Rect(-1920, 9984, -1856, 10048);
  gv_aew = Rect(10400, 13248, 11136, 14080);
  gv_aex = Rect(7072, 11712, 7776, 12032);
  gv_aey = Rect(11520, -1408, 15232, 2048);
  gv_aez = Rect(-10848, -2400, -8352, 96);
  gv_aeA = Rect(1984, -15712, 3008, -13440);
  lv_byv = AddWeatherEffect(gv_aeA, "RAhr");
  EnableWeatherEffect(lv_byv, true);
  gv_aeB = Rect(2048, -16384, 8992, -12192);
  lv_byv = AddWeatherEffect(gv_aeB, "RAhr");
  EnableWeatherEffect(lv_byv, true);
  gv_aeC = Rect(8960, -16384, 15584, -10240);
  lv_byv = AddWeatherEffect(gv_aeC, "RAhr");
  EnableWeatherEffect(lv_byv, true);
  gv_aeD = Rect(7904, -12224, 8992, -10240);
  gv_aeE = Rect(2400, 7680, 2752, 8096);
  lv_byv = AddWeatherEffect(gv_aeE, "LRaa");
  EnableWeatherEffect(lv_byv, true);
  gv_aeF = Rect(-10688, -640, -10304, -256);
  gv_aeG = Rect(-11072, -4640, -4864, -2400);
  lv_byv = AddWeatherEffect(gv_aeG, "LRma");
  EnableWeatherEffect(lv_byv, true);
  gv_aeH = Rect(-4864, -3712, -3552, 160);
  lv_byv = AddWeatherEffect(gv_aeH, "LRma");
  EnableWeatherEffect(lv_byv, true);
  gv_aeI = Rect(-3584, -2688, -448, 160);
  lv_byv = AddWeatherEffect(gv_aeI, "LRma");
  EnableWeatherEffect(lv_byv, true);
  gv_aeJ = Rect(-8352, -3296, -4864, 96);
  lv_byv = AddWeatherEffect(gv_aeJ, "LRma");
  EnableWeatherEffect(lv_byv, true);
  gv_aeK = Rect(-8384, -5216, -4960, -4608);
  gv_aeL = Rect(416, 4640, 832, 5120);
  gv_aeM = Rect(9952, 10080, 10048, 10176);
  gv_aeN = Rect(3776, 4288, 4352, 4800);
  gv_aeO = Rect(5376, 4896, 5472, 4992);
  gv_aeP = Rect(8128, 8128, 8224, 8224);
  gv_aeQ = Rect(-12224, -9216, -9248, -6208);
  gv_aeR = Rect(-10240, -6976, -10112, -6880);
  gv_aeS = Rect(8384, 3872, 8448, 3936);
  gv_aeT = Rect(-14912, 8640, -14848, 8704);
  gv_aeU = Rect(-5344, -4960, -5280, -4896);
  gv_aeV = Rect(-3232, 2496, -3168, 2560);
  gv_aeW = Rect(5376, -5312, 5440, -5248);
  gv_aeX = Rect(9152, 6112, 9408, 6336);
  gv_aeY = Rect(10048, 5120, 10272, 5344);
  gv_aeZ = Rect(-2464, -4576, -768, -2528);
  gv_afa = Rect(-12480, 3488, -10336, 5760);
  gv_afb = Rect(1088, 192, 1472, 512);
  gv_afc = Rect(-12384, 672, -2688, 3424);
  gv_afd = Rect(-10176, 3392, -5952, 6080);
  gv_afe = Rect(-4800, 5408, 288, 8544);
  gv_aff = Rect(-6528, 3392, -2272, 6880);
  gv_afg = Rect(-5600, 2752, -3584, 7424);
  gv_afh = Rect(-2848, 6592, -1344, 10208);
  gv_afi = Rect(-1376, 4160, 1632, 10528);
  gv_afj = Rect(-2304, 3712, -736, 5472);
  gv_afk = Rect(-13344, -1376, -12960, -1024);
  lv_byv = AddWeatherEffect(gv_afk, "LRma");
  EnableWeatherEffect(lv_byv, true);
  gv_afl = Rect(-12864, -1376, -12736, -1248);
  gv_afm = Rect(-11136, 12650, -8512, 15072);
  lv_byv = AddWeatherEffect(gv_afm, "RAhr");
  EnableWeatherEffect(lv_byv, true);
  gv_afn = Rect(-3520, -1760, -3392, -1632);
  gv_afo = Rect(-6848, -2880, -6752, -2784);
  gv_afp = Rect(-7712, -3680, -7616, -3584);
  gv_afq = Rect(7104, 14208, 7680, 14656);
  gv_afr = Rect(10112, 10912, 11008, 13280);
  gv_afs = Rect(10912, 10976, 11744, 12832);
  gv_aft = Rect(11712, 12032, 12928, 14368);
  gv_afu = Rect(12896, 11648, 13856, 13440);
  gv_afv = Rect(12480, 13760, 14208, 14432);
  gv_afw = Rect(-2720, -5088, -1984, -4416);
  gv_afx = Rect(12512, -4416, 15136, -1920);
  gv_afy = Rect(9344, -8576, 11168, -6656);
  gv_afz = Rect(11872, -11232, 12192, -10944);
  gv_afA = Rect(9184, -11232, 9504, -10944);
  gv_afB = Rect(6080, -14080, 6400, -13792);
  gv_afC = Rect(9536, -14784, 9856, -14496);
  gv_afD = Rect(12064, -14848, 12384, -14560);
  gv_afE = Rect(7040, -15040, 7360, -14752);
  gv_afF = Rect(11264, -12832, 11584, -12544);
  gv_afG = Rect(9344, -1472, 10368, -352);
  gv_afH = Rect(11136, -8224, 13728, -7392);
  gv_afI = Rect(-6176, -14784, -4224, -12736);
  gv_afJ = Rect(8896, -3456, 10816, -1472);
  gv_afK = Rect(7808, -14848, 9056, -13632);
  gv_akP = CreateDestructable("ATg2", -8416, -2336, 270, 1, 0);
  gv_akU = CreateDestructable("ATg2", -8608, 12768, 270, 1, 0);
  gv_akO = CreateDestructable("ATg3", -2048, -13568, 0.0, 0.9, 0);
  gv_akW = CreateDestructable("ATg3", 3200, 14528, 0.0, 0.9, 0);
  gv_akZ = CreateDestructable("DTg3", 13440, -12160, 0.0, 0.9, 0);
  gv_ala = CreateDestructable("DTg3", 5120, -13568, 0.0, 0.9, 0);
  gv_akV = CreateDestructable("DTrc", -12896, 14624, 85, 1, 1);
  gv_akS = CreateDestructable("DTrc", -12512, 14624, 133, 1.2, 4);
  gv_akQ = CreateDestructable("DTrc", -12704, 14560, 14, 1, 1);
  gv_alc = CreateDestructable("ITx1", 10240, -6720, 270, 0.9, 0);
  gv_alb = CreateDestructable("ITx3", 11456, 256, 0.0, 0.8, 0);
  gv_akX = CreateDestructable("LOcg", 4544, -13184, 233.398, 1.128, 0);
  gv_akT = CreateDestructable("LTg1", -11840, 3456, 270, 0.9, 0);
  gv_akR = CreateDestructable("ZTd1", -14528, 13632, 270, 0.9, 0);
  gv_akY = CreateDestructable("ZTg4", 2784, -8736, 180, 1, 0);
  CreateItem("I023", 10598, 8546.3);
  f_aPo();
  f_aPA();
  f_aPu();
  f_aPG();
  ConfigureNeutralVictim();
  gv_ayh = Filter(f_aBR);
  filterIssueHauntOrderAtLocBJ = Filter(IssueHauntOrderAtLocBJFilter);
  filterEnumDestructablesInCircleBJ = Filter(f_aBw);
  filterGetUnitsInRectOfPlayer = Filter(GetUnitsInRectOfPlayerFilter);
  filterGetUnitsOfTypeIdAll = Filter(GetUnitsOfTypeIdAllFilter);
  filterGetUnitsOfPlayerAndTypeId = Filter(GetUnitsOfPlayerAndTypeIdFilter);
  filterMeleeTrainedUnitIsHeroBJ = Filter(MeleeTrainedUnitIsHeroBJFilter);
  filterLivingPlayerUnitsOfTypeId = Filter(LivingPlayerUnitsOfTypeIdFilter);
  lv_byB = 0;
  do {
    if (lv_byB == 16) {
      break;
    }
    bj_FORCE_PLAYER[lv_byB] = CreateForce();
    ForceAddPlayer(bj_FORCE_PLAYER[lv_byB], Player(lv_byB));
    lv_byB = lv_byB + 1;
  } while (true);
  bj_FORCE_ALL_PLAYERS = CreateForce();
  ForceEnumPlayers(bj_FORCE_ALL_PLAYERS, null);
  bj_cineModePriorSpeed = GetGameSpeed();
  bj_cineModePriorFogSetting = IsFogEnabled();
  bj_cineModePriorMaskSetting = IsFogMaskEnabled();
  lv_byB = 0;
  do {
    if (lv_byB >= bj_MAX_QUEUED_TRIGGERS) {
      break;
    }
    bj_queuedExecTriggers[lv_byB] = null;
    bj_queuedExecUseConds[lv_byB] = false;
    lv_byB = lv_byB + 1;
  } while (true);
  bj_isSinglePlayer = false;
  lv_byC = 0;
  lv_byB = 0;
  do {
    if (lv_byB >= 12) {
      break;
    }
    if (
      GetPlayerController(Player(lv_byB)) == MAP_CONTROL_USER &&
      GetPlayerSlotState(Player(lv_byB)) == PLAYER_SLOT_STATE_PLAYING
    ) {
      lv_byC = lv_byC + 1;
    }
    lv_byB = lv_byB + 1;
  } while (true);
  bj_isSinglePlayer = lv_byC == 1;
  bj_rescueSound = CreateSoundFromLabel(
    "Rescue",
    false,
    false,
    false,
    10000,
    10000
  );
  bj_questDiscoveredSound = CreateSoundFromLabel(
    "QuestNew",
    false,
    false,
    false,
    10000,
    10000
  );
  bj_questUpdatedSound = CreateSoundFromLabel(
    "QuestUpdate",
    false,
    false,
    false,
    10000,
    10000
  );
  bj_questCompletedSound = CreateSoundFromLabel(
    "QuestCompleted",
    false,
    false,
    false,
    10000,
    10000
  );
  bj_questFailedSound = CreateSoundFromLabel(
    "QuestFailed",
    false,
    false,
    false,
    10000,
    10000
  );
  bj_questHintSound = CreateSoundFromLabel(
    "Hint",
    false,
    false,
    false,
    10000,
    10000
  );
  bj_questSecretSound = CreateSoundFromLabel(
    "SecretFound",
    false,
    false,
    false,
    10000,
    10000
  );
  bj_questItemAcquiredSound = CreateSoundFromLabel(
    "ItemReward",
    false,
    false,
    false,
    10000,
    10000
  );
  bj_questWarningSound = CreateSoundFromLabel(
    "Warning",
    false,
    false,
    false,
    10000,
    10000
  );
  bj_victoryDialogSound = CreateSoundFromLabel(
    "QuestCompleted",
    false,
    false,
    false,
    10000,
    10000
  );
  bj_defeatDialogSound = CreateSoundFromLabel(
    "QuestFailed",
    false,
    false,
    false,
    10000,
    10000
  );
  DelayedSuspendDecayCreate();
  lv_byD = VersionGet();
  if (lv_byD == VERSION_REIGN_OF_CHAOS) {
    bj_MELEE_MAX_TWINKED_HEROES = bj_MELEE_MAX_TWINKED_HEROES_V0;
  } else {
    bj_MELEE_MAX_TWINKED_HEROES = bj_MELEE_MAX_TWINKED_HEROES_V1;
  }
  InitQueuedTriggers();
  InitRescuableBehaviorBJ();
  InitDNCSounds();
  InitMapRects();
  InitSummonableCaps();
  lv_byE = 0;
  do {
    bj_stockAllowedPermanent[lv_byE] = false;
    bj_stockAllowedCharged[lv_byE] = false;
    bj_stockAllowedArtifact[lv_byE] = false;
    lv_byE = lv_byE + 1;
    if (lv_byE > 10) {
      break;
    }
  } while (true);
  SetAllItemTypeSlots(11);
  SetAllUnitTypeSlots(11);
  bj_stockUpdateTimer = CreateTimer();
  TimerStart(bj_stockUpdateTimer, bj_STOCK_RESTOCK_INITIAL_DELAY, false, f_aBQ);
  bj_stockItemPurchased = CreateTrigger();
  TriggerRegisterPlayerUnitEvent(
    bj_stockItemPurchased,
    Player(PLAYER_NEUTRAL_PASSIVE),
    EVENT_PLAYER_UNIT_SELL_ITEM,
    null
  );
  TriggerAddAction(bj_stockItemPurchased, RemovePurchasedItem);
  DetectGameStarted();
  ExecuteFunc("f_byG");
  ExecuteFunc("f_aIi");
  ExecuteFunc("f_aIF");
  ExecuteFunc("f_aIK");
  ExecuteFunc("f_aIO");
  ExecuteFunc("f_aJi");
  ExecuteFunc("f_aJj");
  ExecuteFunc("f_aLG");
  ExecuteFunc("f_aMD");
  ExecuteFunc("f_aMT");
  ExecuteFunc("f_aNp");
  ExecuteFunc("f_aOa");
  ExecuteFunc("f_aPd");
  lv_byA = 0;
  lv_byA = 0;
  do {
    if (lv_byA > 1) {
      break;
    }
    gv_acA[lv_byA] = 0;
    lv_byA = lv_byA + 1;
  } while (true);
  gv_afT = CreateTrigger();
  TriggerAddAction(gv_afT, f_aPM);
  gv_afU = CreateTrigger();
  DisableTrigger(gv_afU);
  TriggerAddAction(gv_afU, f_aPU);
  gv_afV = CreateTrigger();
  TriggerRegisterTimerEventSingle(gv_afV, 0.05);
  TriggerAddAction(gv_afV, f_aPW);
  gv_afW = CreateTrigger();
  TriggerRegisterAnyUnitEventBJ(gv_afW, EVENT_PLAYER_UNIT_SELECTED);
  TriggerAddCondition(gv_afW, Condition(f_aQe));
  TriggerAddAction(gv_afW, f_aPY);
  gv_afX = CreateTrigger();
  TriggerAddCondition(gv_afX, Condition(f_aQn));
  TriggerAddAction(gv_afX, f_aQj);
  gv_afY = CreateTrigger();
  TriggerRegisterTimerEventSingle(gv_afY, 0.2);
  TriggerAddAction(gv_afY, f_aQp);
  gv_afZ = CreateTrigger();
  TriggerRegisterTimerEventSingle(gv_afZ, 0.3);
  TriggerAddAction(gv_afZ, f_aQr);
  gv_aga = CreateTrigger();
  TriggerRegisterTimerEventSingle(gv_aga, 120);
  TriggerAddAction(gv_aga, f_aQt);
  gv_agb = CreateTrigger();
  TriggerRegisterAnyUnitEventBJ(gv_agb, EVENT_PLAYER_UNIT_PICKUP_ITEM);
  TriggerAddAction(gv_agb, f_aQu);
  gv_agc = CreateTrigger();
  TriggerRegisterTimerEventPeriodic(gv_agc, 20);
  TriggerAddAction(gv_agc, f_aQD);
  PauseUnit(gv_akc, true);
  gv_agd = CreateTrigger();
  TriggerRegisterUnitEvent(gv_agd, gv_akk, EVENT_UNIT_SELECTED);
  TriggerAddAction(gv_agd, f_aQJ);
  gv_age = CreateTrigger();
  TriggerRegisterUnitEvent(gv_age, gv_aka, EVENT_UNIT_SELECTED);
  TriggerAddAction(gv_age, f_aQQ);
  gv_abd = CreateTrigger();
  TriggerRegisterTimerEventPeriodic(gv_abd, 4);
  TriggerAddAction(gv_abd, f_azs);
  gv_abj = CreateTrigger();
  TriggerRegisterTimerEventPeriodic(gv_abj, 0.5);
  TriggerAddAction(gv_abj, f_aAn);
  gv_abi = CreateTrigger();
  TriggerRegisterTimerEventPeriodic(gv_abi, 5);
  TriggerAddAction(gv_abi, f_aAd);
  gv_abe = CreateTrigger();
  lv_byF = 0;
  do {
    if (lv_byF > 7) {
      break;
    }
    TriggerRegisterPlayerChatEvent(gv_abe, Player(lv_byF), "-", false);
    lv_byF = lv_byF + 1;
  } while (true);
  TriggerAddAction(gv_abe, f_azY);
  gv_abf = CreateTrigger();
  TriggerRegisterTimerEvent(gv_abf, 4, false);
  TriggerAddAction(gv_abf, f_ayV);
  gv_abg = CreateTrigger();
  TriggerRegisterAnyUnitEventBJ(gv_abg, EVENT_PLAYER_UNIT_SPELL_EFFECT);
  TriggerRegisterAnyUnitEventBJ(gv_abg, EVENT_PLAYER_HERO_SKILL);
  TriggerAddAction(gv_abg, f_ayQ);
  gv_abh = CreateTrigger();
  gv_abk = CreateTrigger();
  TriggerAddAction(gv_abk, f_aON);
  TriggerRegisterPlayerUnitEvent(
    gv_abh,
    Player(11),
    EVENT_PLAYER_UNIT_DEATH,
    null
  );
  TriggerAddAction(gv_abh, f_bsX);
  f_aAR();
  gv_agf = CreateTrigger();
  TriggerRegisterUnitEvent(gv_agf, gv_akB, EVENT_UNIT_SELECTED);
  TriggerAddAction(gv_agf, f_aQV);
  gv_agg = CreateTrigger();
  TriggerRegisterUnitEvent(gv_agg, gv_akE, EVENT_UNIT_SELECTED);
  TriggerAddAction(gv_agg, f_aRc);
  gv_agh = CreateTrigger();
  TriggerRegisterUnitEvent(gv_agh, gv_aky, EVENT_UNIT_SELECTED);
  TriggerAddAction(gv_agh, f_aRj);
  gv_agi = CreateTrigger();
  TriggerRegisterUnitEvent(gv_agi, gv_akF, EVENT_UNIT_SELECTED);
  TriggerAddAction(gv_agi, f_aRo);
  gv_agj = CreateTrigger();
  TriggerRegisterUnitEvent(gv_agj, gv_akG, EVENT_UNIT_SELECTED);
  TriggerAddAction(gv_agj, f_aRt);
  gv_agk = CreateTrigger();
  TriggerRegisterUnitEvent(gv_agk, gv_akd, EVENT_UNIT_SELECTED);
  TriggerAddAction(gv_agk, f_aRz);
  gv_agl = CreateTrigger();
  TriggerRegisterUnitEvent(gv_agl, gv_akf, EVENT_UNIT_SELECTED);
  TriggerAddAction(gv_agl, f_aRD);
  gv_agm = CreateTrigger();
  TriggerRegisterUnitEvent(gv_agm, gv_akl, EVENT_UNIT_SELECTED);
  TriggerAddAction(gv_agm, f_aRK);
  gv_agn = CreateTrigger();
  TriggerRegisterUnitEvent(gv_agn, gv_akm, EVENT_UNIT_SELECTED);
  TriggerAddAction(gv_agn, f_aRQ);
  gv_ago = CreateTrigger();
  TriggerRegisterUnitEvent(gv_ago, gv_akz, EVENT_UNIT_SELECTED);
  TriggerAddAction(gv_ago, f_aRV);
  gv_agp = CreateTrigger();
  TriggerRegisterUnitEvent(gv_agp, gv_ajQ, EVENT_UNIT_SELECTED);
  TriggerAddAction(gv_agp, f_aSd);
  gv_agq = CreateTrigger();
  TriggerRegisterUnitEvent(gv_agq, gv_ajW, EVENT_UNIT_SELECTED);
  TriggerAddAction(gv_agq, f_aSj);
  gv_agr = CreateTrigger();
  TriggerRegisterUnitEvent(gv_agr, gv_akD, EVENT_UNIT_SELECTED);
  TriggerAddAction(gv_agr, f_aSo);
  gv_ags = CreateTrigger();
  TriggerRegisterUnitEvent(gv_ags, gv_akA, EVENT_UNIT_SELECTED);
  TriggerAddAction(gv_ags, f_aSv);
  gv_agt = CreateTrigger();
  TriggerRegisterUnitEvent(gv_agt, gv_ajZ, EVENT_UNIT_SELECTED);
  TriggerAddAction(gv_agt, f_aSz);
  gv_agu = CreateTrigger();
  TriggerAddAction(gv_agu, f_aSF);
  gv_agv = CreateTrigger();
  TriggerRegisterEnterRectSimple(gv_agv, gv_aeN);
  TriggerAddAction(gv_agv, f_aSG);
  gv_agw = CreateTrigger();
  TriggerRegisterEnterRectSimple(gv_agw, gv_aeO);
  TriggerAddAction(gv_agw, f_aSJ);
  gv_agx = CreateTrigger();
  TriggerRegisterEnterRectSimple(gv_agx, gv_aeP);
  TriggerAddAction(gv_agx, f_aSM);
  gv_agy = CreateTrigger();
  TriggerRegisterEnterRectSimple(gv_agy, gv_aeM);
  TriggerAddAction(gv_agy, f_aSP);
  gv_agz = CreateTrigger();
  TriggerRegisterEnterRectSimple(gv_agz, gv_aeb);
  TriggerAddAction(gv_agz, f_aSR);
  gv_agA = CreateTrigger();
  TriggerRegisterEnterRectSimple(gv_agA, gv_afn);
  TriggerAddAction(gv_agA, f_aSS);
  gv_agB = CreateTrigger();
  TriggerRegisterEnterRectSimple(gv_agB, gv_afo);
  TriggerAddAction(gv_agB, f_aST);
  gv_agC = CreateTrigger();
  TriggerRegisterEnterRectSimple(gv_agC, gv_afp);
  TriggerAddAction(gv_agC, f_aSU);
  gv_agD = CreateTrigger();
  TriggerRegisterEnterRectSimple(gv_agD, gv_aea);
  TriggerAddAction(gv_agD, f_aSV);
  gv_agE = CreateTrigger();
  DisableTrigger(gv_agE);
  TriggerAddAction(gv_agE, f_aSX);
  gv_agF = CreateTrigger();
  DisableTrigger(gv_agF);
  TriggerAddAction(gv_agF, f_aQC);
  lv_byF = 0;
  gv_agG = CreateTrigger();
  do {
    if (lv_byF > 7) {
      break;
    }
    TriggerRegisterPlayerUnitEvent(
      gv_agG,
      Player(lv_byF),
      EVENT_PLAYER_UNIT_SELECTED,
      null
    );
    lv_byF = lv_byF + 1;
  } while (true);
  TriggerAddAction(gv_agG, f_aTf);
  lv_byF = 0;
  gv_agH = CreateTrigger();
  do {
    if (lv_byF > 7) {
      break;
    }
    TriggerRegisterPlayerUnitEventSimple(
      gv_agH,
      Player(lv_byF),
      EVENT_PLAYER_UNIT_DEATH
    );
    lv_byF = lv_byF + 1;
  } while (true);
  TriggerAddAction(gv_agH, f_aTC);
  gv_alg[240] = 0;
  gv_alg[241] = 0;
  gv_alg[242] = 0;
  gv_alg[243] = 0;
  gv_alg[244] = 0;
  gv_alg[245] = 0;
  gv_alg[246] = 0;
  gv_alg[247] = 0;
  f_aTR();
  f_aTV();
  f_aUg();
  f_aUq();
  f_aUA();
  gv_agI = CreateTrigger();
  TriggerRegisterTimerEventPeriodic(gv_agI, 0.99);
  TriggerAddAction(gv_agI, f_aUC);
  lv_byF = 0;
  gv_agJ = CreateTrigger();
  do {
    if (lv_byF > 7) {
      break;
    }
    TriggerRegisterPlayerEventEndCinematic(gv_agJ, Player(lv_byF));
    lv_byF = lv_byF + 1;
  } while (true);
  TriggerAddAction(gv_agJ, f_aUI);
  lv_byF = 0;
  gv_agK = CreateTrigger();
  do {
    if (lv_byF > 7) {
      break;
    }
    TriggerRegisterPlayerEventLeave(gv_agK, Player(lv_byF));
    lv_byF = lv_byF + 1;
  } while (true);
  TriggerAddAction(gv_agK, f_aUN);
  f_aVj();
  gv_agM = CreateTrigger();
  TriggerRegisterAnyUnitEventBJ(gv_agM, EVENT_PLAYER_UNIT_SPELL_EFFECT);
  TriggerAddCondition(gv_agM, Condition(f_aVl));
  TriggerAddAction(gv_agM, f_aVn);
  gv_ald[1036] = 250;
  gv_ald[1037] = 370;
  gv_ald[1038] = 520;
  gv_ald[1039] = 680;
  gv_ald[1040] = 900;
  gv_ald[1041] = 1200;
  gv_agN = CreateTrigger();
  TriggerRegisterAnyUnitEventBJ(gv_agN, EVENT_PLAYER_UNIT_SPELL_EFFECT);
  TriggerAddCondition(gv_agN, Condition(f_aVB));
  TriggerAddAction(gv_agN, f_aVC);
  gv_alK = f_aCI();
  gv_alN = CreateGroup();
  f_aIw(Condition(f_aVz));
  gv_ald[1042] = 250;
  gv_ald[1043] = 500;
  gv_ald[1044] = 800;
  gv_ald[1045] = 1150;
  gv_ald[1046] = 1500;
  gv_ald[1047] = 1900;
  gv_alL = f_aHP(255, 27, 221, 237);
  gv_alM = f_aHP(255, 255, 255, 255);
  gv_agO = CreateTrigger();
  TriggerRegisterAnyUnitEventBJ(gv_agO, EVENT_PLAYER_UNIT_SPELL_EFFECT);
  TriggerAddCondition(gv_agO, Condition(f_aVK));
  TriggerAddAction(gv_agO, f_aVL);
  f_aLD("A072");
  gv_ald[1024] = 60;
  gv_ald[1025] = 100;
  gv_ald[1026] = 180;
  gv_ald[1027] = 300;
  gv_ald[1028] = 530;
  gv_ald[1029] = 900;
  gv_agP = CreateTrigger();
  TriggerRegisterAnyUnitEventBJ(gv_agP, EVENT_PLAYER_UNIT_SPELL_EFFECT);
  TriggerAddCondition(gv_agP, Condition(f_aWf));
  f_aLD("A04I");
  gv_ald[1108] = 60;
  gv_ald[1109] = 85;
  gv_ald[1110] = 120;
  gv_ald[1111] = 190;
  gv_ald[1112] = 290;
  gv_ald[1113] = 480;
  gv_agQ = CreateTrigger();
  TriggerRegisterAnyUnitEventBJ(gv_agQ, EVENT_PLAYER_UNIT_SPELL_EFFECT);
  TriggerAddCondition(gv_agQ, Condition(f_aWw));
  TriggerAddAction(gv_agQ, f_aWx);
  f_aLD("A04F");
  f_aLD("A096");
  f_aIw(Condition(f_aWr));
  gv_agR = CreateTrigger();
  TriggerRegisterAnyUnitEventBJ(gv_agR, EVENT_PLAYER_UNIT_SPELL_ENDCAST);
  TriggerAddCondition(gv_agR, Condition(f_aWI));
  TriggerAddAction(gv_agR, f_aWE);
  f_aLD("A04W");
  f_aLD("A097");
  gv_alO = CreateGroup();
  gv_agS = CreateTrigger();
  TriggerRegisterAnyUnitEventBJ(gv_agS, EVENT_PLAYER_UNIT_ISSUED_ORDER);
  TriggerAddCondition(gv_agS, Condition(f_aWW));
  TriggerAddAction(gv_agS, f_aWX);
  f_aLD("A04O");
  f_aMp("A04O");
  f_aLD("A04P");
  f_aMp("A04P");
  gv_alR = false;
  f_aIw(Condition(f_aWZ));
  gv_ald[1090] = 0.2;
  gv_ald[1091] = 0.25;
  gv_ald[1092] = 0.3;
  gv_ald[1093] = 0.35;
  gv_ald[1094] = 0.4;
  gv_ald[1095] = 0.45;
  gv_agT = CreateTrigger();
  TriggerRegisterAnyUnitEventBJ(gv_agT, EVENT_PLAYER_UNIT_SPELL_EFFECT);
  TriggerAddCondition(gv_agT, Condition(f_aXo));
  TriggerAddAction(gv_agT, f_aXp);
  f_aLD("A04L");
  gv_ald[1078] = 65;
  gv_ald[1079] = 100;
  gv_ald[1080] = 155;
  gv_ald[1081] = 260;
  gv_ald[1082] = 450;
  gv_ald[1083] = 830;
  gv_agU = CreateTrigger();
  TriggerRegisterAnyUnitEventBJ(gv_agU, EVENT_PLAYER_UNIT_ISSUED_ORDER);
  TriggerAddCondition(gv_agU, Condition(f_aXD));
  TriggerAddAction(gv_agU, f_aXF);
  gv_agV = CreateTrigger();
  TriggerRegisterAnyUnitEventBJ(gv_agV, EVENT_PLAYER_UNIT_SPELL_EFFECT);
  TriggerAddCondition(gv_agV, Condition(f_aXx));
  TriggerAddAction(gv_agV, f_aXy);
  gv_ald[1301] = 0.15;
  gv_ald[1302] = 0.2;
  gv_ald[1303] = 0.27;
  gv_ald[1304] = 0.36;
  gv_ald[1305] = 0.47;
  gv_ald[1306] = 0.6;
  gv_ald[1307] = 3;
  gv_ald[1308] = 7;
  gv_ald[1309] = 12;
  gv_ald[1310] = 18;
  gv_ald[1311] = 26;
  gv_ald[1312] = 35;
  gv_agW = CreateTrigger();
  TriggerRegisterAnyUnitEventBJ(gv_agW, EVENT_PLAYER_UNIT_ATTACKED);
  TriggerAddCondition(gv_agW, Condition(f_aXH));
  TriggerAddAction(gv_agW, f_aXK);
  gv_ald[1084] = 50;
  gv_ald[1085] = 70;
  gv_ald[1086] = 105;
  gv_ald[1087] = 160;
  gv_ald[1088] = 250;
  gv_ald[1089] = 415;
  gv_agX = CreateTrigger();
  TriggerRegisterAnyUnitEventBJ(gv_agX, EVENT_PLAYER_UNIT_SPELL_EFFECT);
  TriggerAddCondition(gv_agX, Condition(f_aYc));
  f_aLD("A04T");
  f_aLD("A04S");
  gv_ald[1072] = 105;
  gv_ald[1073] = 145;
  gv_ald[1074] = 205;
  gv_ald[1075] = 300;
  gv_ald[1076] = 445;
  gv_ald[1077] = 685;
  gv_agY = CreateTrigger();
  TriggerRegisterAnyUnitEventBJ(gv_agY, EVENT_PLAYER_UNIT_SPELL_EFFECT);
  TriggerAddCondition(gv_agY, Condition(f_aYh));
  TriggerAddAction(gv_agY, f_aYi);
  f_aIw(Condition(f_aYl));
  f_aLD("A05H");
  f_aLD("A07B");
  gv_agZ = CreateTrigger();
  TriggerRegisterAnyUnitEventBJ(gv_agZ, EVENT_PLAYER_UNIT_SPELL_EFFECT);
  TriggerAddCondition(gv_agZ, Condition(f_aYC));
  TriggerAddAction(gv_agZ, f_aYD);
  f_aLD("A05P");
  gv_ald[1210] = 35;
  gv_ald[1211] = 85;
  gv_ald[1212] = 155;
  gv_ald[1213] = 245;
  gv_ald[1214] = 355;
  gv_ald[1215] = 485;
  gv_aha = CreateTrigger();
  TriggerRegisterAnyUnitEventBJ(gv_aha, EVENT_PLAYER_UNIT_SPELL_EFFECT);
  TriggerAddCondition(gv_aha, Condition(f_aYI));
  TriggerAddAction(gv_aha, f_aYJ);
  gv_ald[1204] = 150;
  gv_ald[1205] = 225;
  gv_ald[1206] = 345;
  gv_ald[1207] = 550;
  gv_ald[1208] = 915;
  gv_ald[1209] = 1575;
  f_aIw(Condition(f_aYQ));
  gv_ald[1114] = 0.4;
  gv_ald[1115] = 0.35;
  gv_ald[1116] = 0.3;
  gv_ald[1117] = 0.25;
  gv_ald[1118] = 0.2;
  gv_ald[1119] = 0.15;
  f_aIw(Condition(f_aZa));
  f_aLD("A04M");
  f_aLD("A04X");
  gv_ahb = CreateTrigger();
  TriggerRegisterAnyUnitEventBJ(gv_ahb, EVENT_PLAYER_UNIT_SPELL_EFFECT);
  TriggerAddCondition(gv_ahb, Condition(f_aZg));
  TriggerAddAction(gv_ahb, f_aZi);
  gv_ald[1000] = 100;
  gv_ald[1001] = 160;
  gv_ald[1002] = 240;
  gv_ald[1003] = 360;
  gv_ald[1004] = 540;
  gv_ald[1005] = 800;
  gv_ahc = CreateTrigger();
  TriggerRegisterAnyUnitEventBJ(gv_ahc, EVENT_PLAYER_UNIT_SPELL_EFFECT);
  TriggerAddCondition(gv_ahc, Condition(f_aZB));
  gv_ald[1006] = 120;
  gv_ald[1007] = 180;
  gv_ald[1008] = 270;
  gv_ald[1009] = 400;
  gv_ald[1010] = 600;
  gv_ald[1011] = 900;
  gv_ahd = CreateTrigger();
  TriggerRegisterAnyUnitEventBJ(gv_ahd, EVENT_PLAYER_UNIT_SPELL_EFFECT);
  TriggerAddCondition(gv_ahd, Condition(f_aZI));
  TriggerAddAction(gv_ahd, f_aZJ);
  f_aIw(Condition(f_aZO));
  f_aLD("A05W");
  f_aLD("A062");
  gv_alU = f_aCI();
  gv_alT = CreateGroup();
  gv_ald[1126] = 50;
  gv_ald[1127] = 100;
  gv_ald[1128] = 180;
  gv_ald[1129] = 275;
  gv_ald[1130] = 350;
  gv_ald[1131] = 440;
  gv_ahe = CreateTrigger();
  TriggerRegisterAnyUnitEventBJ(gv_ahe, EVENT_PLAYER_UNIT_SPELL_EFFECT);
  TriggerAddCondition(gv_ahe, Condition(f_aZT));
  TriggerAddAction(gv_ahe, f_aZU);
  gv_alV = f_aCI();
  gv_alW = CreateGroup();
  gv_ald[1150] = 150;
  gv_ald[1151] = 225;
  gv_ald[1152] = 450;
  gv_ald[1153] = 570;
  gv_ald[1154] = 780;
  gv_ald[1155] = 1100;
  gv_ahf = CreateTrigger();
  TriggerRegisterAnyUnitEventBJ(gv_ahf, EVENT_PLAYER_UNIT_SPELL_EFFECT);
  TriggerAddCondition(gv_ahf, Condition(f_bah));
  TriggerAddAction(gv_ahf, f_bai);
  f_aLD("A06B");
  gv_alX = CreateGroup();
  gv_alY = f_aCI();
  gv_ald[1138] = 110;
  gv_ald[1139] = 180;
  gv_ald[1140] = 300;
  gv_ald[1141] = 480;
  gv_ald[1142] = 750;
  gv_ald[1143] = 1150;
  gv_ahg = CreateTrigger();
  TriggerRegisterAnyUnitEventBJ(gv_ahg, EVENT_PLAYER_UNIT_SPELL_EFFECT);
  TriggerAddCondition(gv_ahg, Condition(f_bas));
  TriggerAddAction(gv_ahg, f_baC);
  f_aLD("A061");
  gv_ald[1132] = 140;
  gv_ald[1133] = 200;
  gv_ald[1134] = 290;
  gv_ald[1135] = 400;
  gv_ald[1136] = 600;
  gv_ald[1137] = 900;
  gv_ahh = CreateTrigger();
  TriggerRegisterAnyUnitEventBJ(gv_ahh, EVENT_PLAYER_UNIT_SPELL_EFFECT);
  TriggerAddCondition(gv_ahh, Condition(f_baJ));
  TriggerAddAction(gv_ahh, f_baK);
  gv_alZ = CreateGroup();
  gv_ald[1144] = 80;
  gv_ald[1145] = 160;
  gv_ald[1146] = 240;
  gv_ald[1147] = 320;
  gv_ald[1148] = 400;
  gv_ald[1149] = 500;
  gv_ahi = CreateTrigger();
  TriggerRegisterAnyUnitEventBJ(gv_ahi, EVENT_PLAYER_UNIT_SPELL_EFFECT);
  TriggerAddCondition(gv_ahi, Condition(f_baU));
  TriggerAddAction(gv_ahi, f_baV);
  f_aIw(Condition(f_baS));
  f_aLD("A06H");
  f_aLD("A06J");
  gv_amb = f_aCI();
  gv_ama = CreateGroup();
  gv_ahj = CreateTrigger();
  TriggerRegisterAnyUnitEventBJ(gv_ahj, EVENT_PLAYER_UNIT_SPELL_EFFECT);
  TriggerAddCondition(gv_ahj, Condition(f_bbk));
  TriggerAddAction(gv_ahj, f_bbr);
  f_aLD("A05G");
  gv_ald[1162] = 140;
  gv_ald[1163] = 220;
  gv_ald[1164] = 310;
  gv_ald[1165] = 430;
  gv_ald[1166] = 560;
  gv_ald[1167] = 710;
  gv_ahk = CreateTrigger();
  TriggerRegisterAnyUnitEventBJ(gv_ahk, EVENT_PLAYER_UNIT_SPELL_EFFECT);
  TriggerAddCondition(gv_ahk, Condition(f_bbC));
  TriggerAddAction(gv_ahk, f_bbD);
  gv_ald[1168] = 85;
  gv_ald[1169] = 125;
  gv_ald[1170] = 175;
  gv_ald[1171] = 270;
  gv_ald[1172] = 425;
  gv_ald[1173] = 685;
  gv_ahl = CreateTrigger();
  TriggerRegisterAnyUnitEventBJ(gv_ahl, EVENT_PLAYER_UNIT_SPELL_EFFECT);
  TriggerAddCondition(gv_ahl, Condition(f_bbS));
  TriggerAddAction(gv_ahl, f_bbT);
  f_aLD("A04Y");
  gv_ald[1156] = 165;
  gv_ald[1157] = 215;
  gv_ald[1158] = 275;
  gv_ald[1159] = 470;
  gv_ald[1160] = 500;
  gv_ald[1161] = 675;
  gv_ahm = CreateTrigger();
  TriggerRegisterAnyUnitEventBJ(gv_ahm, EVENT_PLAYER_UNIT_SPELL_EFFECT);
  TriggerAddCondition(gv_ahm, Condition(f_bcg));
  TriggerAddAction(gv_ahm, f_bch);
  gv_ald[1174] = 150;
  gv_ald[1175] = 170;
  gv_ald[1176] = 200;
  gv_ald[1177] = 250;
  gv_ald[1178] = 325;
  gv_ald[1179] = 450;
  gv_ahn = CreateTrigger();
  TriggerRegisterAnyUnitEventBJ(gv_ahn, EVENT_PLAYER_UNIT_SPELL_EFFECT);
  TriggerAddCondition(gv_ahn, Condition(f_bcl));
  TriggerAddAction(gv_ahn, f_bcm);
  gv_ahn = CreateTrigger();
  TriggerRegisterAnyUnitEventBJ(gv_ahn, EVENT_PLAYER_UNIT_ISSUED_TARGET_ORDER);
  TriggerAddCondition(gv_ahn, Condition(f_bcr));
  gv_ald[1180] = 135;
  gv_ald[1181] = 250;
  gv_ald[1182] = 325;
  gv_ald[1183] = 475;
  gv_ald[1184] = 700;
  gv_ald[1185] = 1100;
  gv_aho = CreateTrigger();
  TriggerRegisterAnyUnitEventBJ(gv_aho, EVENT_PLAYER_UNIT_SPELL_EFFECT);
  TriggerAddCondition(gv_aho, Condition(f_bcy));
  TriggerAddAction(gv_aho, f_bcz);
  f_aLD("A05F");
  gv_ald[1192] = 50;
  gv_ald[1193] = 85;
  gv_ald[1194] = 110;
  gv_ald[1195] = 200;
  gv_ald[1196] = 300;
  gv_ald[1197] = 525;
  gv_ahp = CreateTrigger();
  TriggerRegisterAnyUnitEventBJ(gv_ahp, EVENT_PLAYER_UNIT_SPELL_EFFECT);
  TriggerAddCondition(gv_ahp, Condition(f_bcW));
  f_aLD("A04B");
  f_aLD("A06U");
  f_aMp("A06U");
  gv_ahp = CreateTrigger();
  TriggerRegisterAnyUnitEventBJ(gv_ahn, EVENT_PLAYER_UNIT_ISSUED_POINT_ORDER);
  TriggerAddCondition(gv_ahn, Condition(f_bda));
  gv_ahq = CreateTrigger();
  TriggerRegisterAnyUnitEventBJ(gv_ahq, EVENT_PLAYER_UNIT_SPELL_EFFECT);
  TriggerAddCondition(gv_ahq, Condition(f_bdf));
  TriggerAddAction(gv_ahq, f_bdg);
  gv_ahq = CreateTrigger();
  TriggerRegisterAnyUnitEventBJ(gv_ahn, EVENT_PLAYER_UNIT_ISSUED_TARGET_ORDER);
  TriggerAddCondition(gv_ahn, Condition(f_bdk));
  gv_ald[1223] = 0.1;
  gv_ald[1224] = 0.14;
  gv_ald[1225] = 0.18;
  gv_ald[1226] = 0.22;
  gv_ald[1227] = 0.26;
  gv_ald[1228] = 0.3;
  gv_ahr = CreateTrigger();
  TriggerRegisterAnyUnitEventBJ(gv_ahr, EVENT_PLAYER_UNIT_SPELL_EFFECT);
  TriggerAddCondition(gv_ahr, Condition(f_bdo));
  TriggerAddAction(gv_ahr, f_bdp);
  gv_ald[1216] = 60;
  gv_ald[1217] = 100;
  gv_ald[1218] = 140;
  gv_ald[1219] = 180;
  gv_ald[1220] = 220;
  gv_ald[1221] = 260;
  gv_ahs = CreateTrigger();
  TriggerRegisterAnyUnitEventBJ(gv_ahs, EVENT_PLAYER_UNIT_SPELL_EFFECT);
  TriggerAddCondition(gv_ahs, Condition(f_bdv));
  TriggerAddAction(gv_ahs, f_bdw);
  gv_aht = CreateTrigger();
  TriggerRegisterAnyUnitEventBJ(gv_aht, EVENT_PLAYER_UNIT_SPELL_EFFECT);
  TriggerAddCondition(gv_aht, Condition(f_bdD));
  TriggerAddAction(gv_aht, f_bdE);
  f_aLD("A06A");
  gv_amc = f_aCI();
  gv_amd = CreateGroup();
  gv_ahu = CreateTrigger();
  TriggerRegisterAnyUnitEventBJ(gv_ahu, EVENT_PLAYER_UNIT_SPELL_EFFECT);
  TriggerAddCondition(gv_ahu, Condition(f_bdO));
  TriggerAddAction(gv_ahu, f_bdP);
  gv_ald[1102] = 120;
  gv_ald[1103] = 175;
  gv_ald[1104] = 250;
  gv_ald[1105] = 375;
  gv_ald[1106] = 520;
  gv_ald[1107] = 790;
  gv_ahv = CreateTrigger();
  TriggerRegisterAnyUnitEventBJ(gv_ahv, EVENT_PLAYER_UNIT_SPELL_EFFECT);
  TriggerAddCondition(gv_ahv, Condition(f_bea));
  TriggerAddAction(gv_ahv, f_beb);
  f_aIw(Condition(f_bdZ));
  gv_ald[1096] = 125;
  gv_ald[1097] = 165;
  gv_ald[1098] = 205;
  gv_ald[1099] = 270;
  gv_ald[1100] = 350;
  gv_ald[1101] = 475;
  gv_ahw = CreateTrigger();
  TriggerRegisterAnyUnitEventBJ(gv_ahw, EVENT_PLAYER_UNIT_SPELL_EFFECT);
  TriggerAddCondition(gv_ahw, Condition(f_beg));
  TriggerAddAction(gv_ahw, f_beh);
  gv_ald[1060] = 200;
  gv_ald[1061] = 325;
  gv_ald[1062] = 415;
  gv_ald[1063] = 545;
  gv_ald[1064] = 725;
  gv_ald[1065] = 975;
  f_aIw(Condition(f_bej));
  gv_ald[1048] = 0.22;
  gv_ald[1049] = 0.25;
  gv_ald[1050] = 0.3;
  gv_ald[1051] = 0.35;
  gv_ald[1052] = 0.4;
  gv_ald[1053] = 0.45;
  gv_ahx = CreateTrigger();
  TriggerRegisterAnyUnitEventBJ(gv_ahx, EVENT_PLAYER_UNIT_SPELL_EFFECT);
  TriggerAddCondition(gv_ahx, Condition(f_ben));
  TriggerAddAction(gv_ahx, f_ber);
  f_aLD("A058");
  gv_ald[1066] = 150;
  gv_ald[1067] = 235;
  gv_ald[1068] = 385;
  gv_ald[1069] = 660;
  gv_ald[1070] = 1180;
  gv_ald[1071] = 2230;
  gv_ahy = CreateTrigger();
  TriggerRegisterAnyUnitEventBJ(gv_ahy, EVENT_PLAYER_UNIT_SPELL_EFFECT);
  TriggerAddCondition(gv_ahy, Condition(f_beD));
  TriggerAddAction(gv_ahy, f_beE);
  gv_auy = CreateGroup();
  gv_auz = f_aCI();
  f_aLD("A055");
  f_aIw(Condition(f_bew));
  f_beP();
  f_aIw(Condition(f_beR));
  gv_ahA = CreateTrigger();
  TriggerRegisterAnyUnitEventBJ(gv_ahA, EVENT_PLAYER_UNIT_SPELL_EFFECT);
  TriggerAddCondition(gv_ahA, Condition(f_beX));
  TriggerAddAction(gv_ahA, f_bfa);
  f_aLD("A04K");
  f_aLD("A05T");
  f_aMp("A05T");
  gv_ahB = CreateTrigger();
  TriggerRegisterAnyUnitEventBJ(gv_ahB, EVENT_PLAYER_UNIT_SPELL_EFFECT);
  TriggerAddCondition(gv_ahB, Condition(f_bfA));
  gv_ald[1120] = 130;
  gv_ald[1121] = 195;
  gv_ald[1122] = 270;
  gv_ald[1123] = 420;
  gv_ald[1124] = 660;
  gv_ald[1125] = 1050;
  f_aIw(Condition(f_bfE));
  gv_ahC = CreateTrigger();
  TriggerRegisterAnyUnitEventBJ(gv_ahC, EVENT_PLAYER_UNIT_SPELL_EFFECT);
  TriggerAddCondition(gv_ahC, Condition(f_bfW));
  gv_ald[1012] = 80;
  gv_ald[1013] = 140;
  gv_ald[1014] = 220;
  gv_ald[1015] = 330;
  gv_ald[1016] = 450;
  gv_ald[1017] = 650;
  gv_ahD = CreateTrigger();
  TriggerRegisterAnyUnitEventBJ(gv_ahD, EVENT_PLAYER_UNIT_SPELL_EFFECT);
  TriggerAddCondition(gv_ahD, Condition(f_bgg));
  TriggerAddAction(gv_ahD, f_bgh);
  gv_ald[1018] = 130;
  gv_ald[1019] = 200;
  gv_ald[1020] = 320;
  gv_ald[1021] = 500;
  gv_ald[1022] = 700;
  gv_ald[1023] = 1000;
  gv_ahE = CreateTrigger();
  TriggerRegisterAnyUnitEventBJ(gv_ahE, EVENT_PLAYER_UNIT_SPELL_EFFECT);
  TriggerAddCondition(gv_ahE, Condition(f_bgs));
  TriggerAddAction(gv_ahE, f_bgt);
  f_aLD("A04G");
  f_aMp("A04G");
  f_aMp("A09N");
  gv_amg = CreateGroup();
  gv_amh = f_aCI();
  gv_ahF = CreateTrigger();
  TriggerRegisterAnyUnitEventBJ(gv_ahF, EVENT_PLAYER_UNIT_SPELL_EFFECT);
  TriggerAddAction(gv_ahF, f_bgz);
  gv_ahG = CreateTrigger();
  TriggerRegisterAnyUnitEventBJ(gv_ahG, EVENT_PLAYER_UNIT_SPELL_EFFECT);
  TriggerAddCondition(gv_ahG, Condition(f_bgI));
  TriggerAddAction(gv_ahG, f_bgJ);
  f_aLD("A08C");
  gv_ahH = CreateTrigger();
  TriggerRegisterAnyUnitEventBJ(gv_ahH, EVENT_PLAYER_UNIT_SPELL_EFFECT);
  TriggerAddCondition(gv_ahH, Condition(f_bgP));
  TriggerAddAction(gv_ahH, f_bgQ);
  f_aLD("A08D");
  f_aIw(Condition(f_bgU));
  gv_ahI = CreateTrigger();
  TriggerRegisterAnyUnitEventBJ(gv_ahI, EVENT_PLAYER_UNIT_SPELL_EFFECT);
  TriggerAddCondition(gv_ahI, Condition(f_bgZ));
  TriggerAddAction(gv_ahI, f_bha);
  f_aLD("A07L");
  f_aLD("A06I");
  f_aLD("A08E");
  gv_ahJ = CreateTrigger();
  TriggerRegisterAnyUnitEventBJ(gv_ahJ, EVENT_PLAYER_UNIT_SPELL_EFFECT);
  TriggerAddCondition(gv_ahJ, Condition(f_bhe));
  TriggerAddAction(gv_ahJ, f_bhf);
  gv_ahK = CreateTrigger();
  TriggerRegisterAnyUnitEventBJ(gv_ahK, EVENT_PLAYER_UNIT_SPELL_EFFECT);
  TriggerAddCondition(gv_ahK, Condition(f_bhi));
  TriggerAddAction(gv_ahK, f_bhj);
  gv_ahL = CreateTrigger();
  TriggerRegisterAnyUnitEventBJ(gv_ahL, EVENT_PLAYER_UNIT_SPELL_EFFECT);
  TriggerAddCondition(gv_ahL, Condition(f_bhq));
  TriggerAddAction(gv_ahL, f_bhr);
  f_aLD("A07P");
  f_aLD("A07Q");
  f_aLD("A08F");
  f_aIw(Condition(f_bhv));
  gv_ahM = CreateTrigger();
  TriggerRegisterAnyUnitEventBJ(gv_ahM, EVENT_PLAYER_UNIT_SPELL_EFFECT);
  TriggerAddCondition(gv_ahM, Condition(f_bhB));
  TriggerAddAction(gv_ahM, f_bhC);
  gv_ahN = CreateTrigger();
  TriggerRegisterEnterRectSimple(gv_ahN, gv_adu);
  TriggerAddCondition(gv_ahN, Condition(f_bhG));
  TriggerAddAction(gv_ahN, f_bhH);
  gv_ahO = CreateTrigger();
  TriggerRegisterEnterRectSimple(gv_ahO, gv_adI);
  TriggerAddCondition(gv_ahO, Condition(f_bhI));
  TriggerAddAction(gv_ahO, f_bhJ);
  gv_ahP = CreateTrigger();
  DisableTrigger(gv_ahP);
  TriggerRegisterEnterRectSimple(gv_ahP, gv_afk);
  TriggerAddCondition(gv_ahP, Condition(f_bhK));
  TriggerAddAction(gv_ahP, f_bhL);
  gv_ahQ = CreateTrigger();
  TriggerRegisterEnterRectSimple(gv_ahQ, gv_adM);
  TriggerAddCondition(gv_ahQ, Condition(f_bhM));
  TriggerAddAction(gv_ahQ, f_bhN);
  gv_ahR = CreateTrigger();
  TriggerRegisterEnterRectSimple(gv_ahR, gv_adp);
  TriggerAddCondition(gv_ahR, Condition(f_bhO));
  TriggerAddAction(gv_ahR, f_bhP);
  gv_ahS = CreateTrigger();
  TriggerRegisterEnterRectSimple(gv_ahS, gv_adr);
  TriggerAddCondition(gv_ahS, Condition(f_bhQ));
  TriggerAddAction(gv_ahS, f_bhR);
  gv_ahT = CreateTrigger();
  TriggerRegisterUnitEvent(gv_ahT, gv_akj, EVENT_UNIT_DEATH);
  TriggerRegisterUnitEvent(gv_ahT, gv_ajP, EVENT_UNIT_DEATH);
  TriggerRegisterUnitEvent(gv_ahT, gv_ajX, EVENT_UNIT_DEATH);
  TriggerAddCondition(gv_ahT, Condition(f_bhT));
  TriggerAddAction(gv_ahT, f_bhU);
  gv_ahU = CreateTrigger();
  TriggerRegisterUnitEvent(gv_ahU, gv_akj, EVENT_UNIT_DEATH);
  TriggerAddAction(gv_ahU, f_bhV);
  f_aIw(Condition(f_bhW));
  f_aIw(Condition(f_bia));
  Preload(gv_amj);
  f_aIw(Condition(f_bic));
  Preload(gv_amk);
  f_aIw(Condition(f_bij));
  Preload(gv_amn);
  f_aIw(Condition(f_bil));
  Preload(gv_ami);
  f_aIw(Condition(f_biq));
  Preload(gv_amp);
  f_aIw(Condition(f_biu));
  f_aIw(Condition(f_bix));
  f_aIw(Condition(f_bis));
  Preload(gv_amq);
  f_aIw(Condition(f_biA));
  Preload(gv_amu);
  f_aIw(Condition(f_biF));
  f_aIw(Condition(f_biD));
  gv_ahV = CreateTrigger();
  TriggerRegisterAnyUnitEventBJ(gv_ahV, EVENT_PLAYER_UNIT_SPELL_EFFECT);
  TriggerAddAction(gv_ahV, f_bie);
  Preload(gv_aml);
  gv_ahV = CreateTrigger();
  TriggerRegisterAnyUnitEventBJ(gv_ahV, EVENT_PLAYER_UNIT_ATTACKED);
  TriggerAddCondition(gv_ahV, Condition(f_bih));
  Preload(gv_amm);
  gv_ahV = CreateTrigger();
  TriggerRegisterAnyUnitEventBJ(gv_ahV, EVENT_PLAYER_UNIT_ATTACKED);
  TriggerAddCondition(gv_ahV, Condition(f_bin));
  Preload(gv_ams);
  Preload(gv_amr);
  gv_amo = CreateUnit(Player(0), gv_acf, 0.0, 0.0, 0.0);
  UnitAddAbility(gv_amo, "A03Y");
  UnitAddAbility(gv_amo, "A05U");
  UnitAddAbility(gv_amo, "A06E");
  UnitAddAbility(gv_amo, "A073");
  gv_amt = CreateUnit(Player(0), gv_acf, 0.0, 0.0, 0.0);
  UnitAddAbility(gv_amt, "A05V");
  f_aMp("A08V");
  gv_ahW = CreateTrigger();
  TriggerRegisterTimerEventPeriodic(gv_ahW, 12);
  TriggerAddAction(gv_ahW, f_biH);
  f_biS();
  f_aIw(Condition(f_bjb));
  Preload("Abilities\\Spells\\Other\\HowlOfTerror\\HowlCaster.mdl");
  f_aIw(Condition(f_bjh));
  gv_amx = CreateUnit(Player(0), "hpea", 0.0, 0.0, 0.0);
  UnitAddAbility(gv_amx, "A07Z");
  gv_ahX = CreateTrigger();
  TriggerRegisterAnyUnitEventBJ(gv_ahX, EVENT_PLAYER_UNIT_SPELL_EFFECT);
  TriggerAddCondition(gv_ahX, Condition(f_bjm));
  TriggerAddAction(gv_ahX, f_bjn);
  gv_ali[8] = CreateTimer();
  gv_ali[9] = CreateTimer();
  gv_ali[10] = CreateTimer();
  gv_ali[11] = CreateTimer();
  gv_ali[12] = CreateTimer();
  gv_ali[13] = CreateTimer();
  gv_ali[14] = CreateTimer();
  gv_ali[15] = CreateTimer();
  gv_alm[8] = CreateGroup();
  gv_ahY = CreateTrigger();
  TriggerRegisterAnyUnitEventBJ(gv_ahY, EVENT_PLAYER_UNIT_ISSUED_TARGET_ORDER);
  TriggerAddCondition(gv_ahY, Condition(f_bjq));
  TriggerAddAction(gv_ahY, f_bjr);
  f_bjV();
  gv_aia = CreateTrigger();
  TriggerRegisterAnyUnitEventBJ(gv_aia, EVENT_PLAYER_UNIT_DROP_ITEM);
  TriggerAddAction(gv_aia, f_bjX);
  gv_aib = CreateTrigger();
  TriggerRegisterAnyUnitEventBJ(gv_aib, EVENT_PLAYER_UNIT_USE_ITEM);
  TriggerAddAction(gv_aib, f_bke);
  lv_byF = 0;
  gv_aic = CreateTrigger();
  do {
    if (lv_byF > 7) {
      break;
    }
    TriggerRegisterPlayerKeyEventBJ(gv_aic, Player(lv_byF), 0, 1);
    lv_byF = lv_byF + 1;
  } while (true);
  TriggerAddAction(gv_aic, f_bkn);
  lv_byF = 0;
  gv_aid = CreateTrigger();
  do {
    if (lv_byF > 7) {
      break;
    }
    TriggerRegisterPlayerKeyEventBJ(gv_aid, Player(lv_byF), 0, 3);
    lv_byF = lv_byF + 1;
  } while (true);
  TriggerAddAction(gv_aid, f_bkr);
  gv_aie = CreateTrigger();
  TriggerRegisterAnyUnitEventBJ(gv_aie, EVENT_PLAYER_UNIT_PICKUP_ITEM);
  TriggerAddAction(gv_aie, f_bkv);
  gv_aif = CreateTrigger();
  TriggerRegisterAnyUnitEventBJ(gv_aif, EVENT_PLAYER_UNIT_PICKUP_ITEM);
  TriggerAddAction(gv_aif, f_bld);
  gv_aig = CreateTrigger();
  TriggerRegisterAnyUnitEventBJ(gv_aig, EVENT_PLAYER_UNIT_SELL_ITEM);
  TriggerAddAction(gv_aig, f_blo);
  gv_aih = CreateTrigger();
  TriggerRegisterEnterRectSimple(gv_aih, gv_acD);
  TriggerRegisterEnterRectSimple(gv_aih, gv_afa);
  TriggerRegisterEnterRectSimple(gv_aih, gv_afm);
  TriggerRegisterEnterRectSimple(gv_aih, gv_ael);
  TriggerRegisterEnterRectSimple(gv_aih, gv_aez);
  TriggerRegisterEnterRectSimple(gv_aih, gv_aeZ);
  TriggerRegisterEnterRectSimple(gv_aih, gv_adJ);
  TriggerRegisterEnterRectSimple(gv_aih, gv_adm);
  TriggerRegisterEnterRectSimple(gv_aih, gv_adZ);
  TriggerRegisterEnterRectSimple(gv_aih, gv_aey);
  TriggerAddCondition(gv_aih, Condition(f_blp));
  TriggerAddAction(gv_aih, f_bls);
  f_blx();
  f_blF();
  gv_aii = CreateTrigger();
  DisableTrigger(gv_aii);
  TriggerRegisterTimerEvent(gv_aii, 18, true);
  TriggerAddAction(gv_aii, f_blD);
  f_blV();
  gv_aij = CreateTrigger();
  DisableTrigger(gv_aij);
  TriggerRegisterTimerEvent(gv_aij, 27, true);
  TriggerAddAction(gv_aij, f_blT);
  gv_aik = CreateTrigger();
  TriggerRegisterEnterRectSimple(gv_aik, gv_aek);
  TriggerAddCondition(gv_aik, Condition(f_bmg));
  TriggerAddAction(gv_aik, f_bmh);
  f_bmn();
  gv_ail = CreateTrigger();
  DisableTrigger(gv_ail);
  TriggerRegisterTimerEvent(gv_ail, 27, true);
  TriggerAddAction(gv_ail, f_bml);
  f_bmD();
  gv_aim = CreateTrigger();
  DisableTrigger(gv_aim);
  TriggerRegisterTimerEvent(gv_aim, 18, true);
  TriggerAddAction(gv_aim, f_bmB);
  f_bmS();
  f_bmZ();
  f_bnh();
  gv_ain = CreateTrigger();
  DisableTrigger(gv_ain);
  TriggerRegisterTimerEvent(gv_ain, 27, true);
  TriggerAddAction(gv_ain, f_bng);
  f_bnx();
  gv_aio = CreateTrigger();
  DisableTrigger(gv_aio);
  TriggerRegisterTimerEvent(gv_aio, 18, true);
  TriggerAddAction(gv_aio, f_bnw);
  f_bnM();
  f_bnU();
  gv_aip = CreateTrigger();
  DisableTrigger(gv_aip);
  TriggerRegisterTimerEvent(gv_aip, 18, true);
  TriggerAddAction(gv_aip, f_bnT);
  f_bok();
  gv_aiq = CreateTrigger();
  DisableTrigger(gv_aiq);
  TriggerRegisterTimerEvent(gv_aiq, 18, true);
  TriggerAddAction(gv_aiq, f_boj);
  f_boA();
  gv_air = CreateTrigger();
  DisableTrigger(gv_air);
  TriggerRegisterTimerEvent(gv_air, 18, true);
  TriggerAddAction(gv_air, f_boz);
  f_boP();
  f_boX();
  gv_ais = CreateTrigger();
  DisableTrigger(gv_ais);
  TriggerRegisterTimerEvent(gv_ais, 18, true);
  TriggerAddAction(gv_ais, f_boW);
  gv_ait = CreateTrigger();
  TriggerRegisterEnterRectSimple(gv_ait, gv_aeA);
  TriggerAddCondition(gv_ait, Condition(f_bpi));
  TriggerAddAction(gv_ait, f_bpj);
  f_bpp();
  gv_aiu = CreateTrigger();
  DisableTrigger(gv_aiu);
  TriggerRegisterTimerEvent(gv_aiu, 20, true);
  TriggerAddAction(gv_aiu, f_bpo);
  Preload("Abilities\\Spells\\Undead\\Darksummoning\\DarkSummonTarget.mdl");
  f_bpF();
  gv_aiv = CreateTrigger();
  DisableTrigger(gv_aiv);
  TriggerRegisterTimerEvent(gv_aiv, 10, true);
  TriggerAddAction(gv_aiv, f_bpE);
  Preload("Abilities\\Spells\\Undead\\FrostNova\\FrostNovaTarget.mdl");
  gv_aiw = CreateTrigger();
  TriggerRegisterEnterRectSimple(gv_aiw, gv_acD);
  TriggerAddCondition(gv_aiw, Condition(f_aNP));
  TriggerAddAction(gv_aiw, f_bpS);
  Preload("Abilities\\Spells\\Orc\\EarthQuake\\EarthQuakeTarget.mdl");
  gv_anM = f_aIL();
  gv_anN = false;
  SuspendHeroXP(gv_aaU[1], true);
  gv_aix = CreateTrigger();
  TriggerRegisterEnterRectSimple(gv_aix, gv_afa);
  TriggerAddCondition(gv_aix, Condition(f_aNP));
  TriggerAddAction(gv_aix, f_bpU);
  gv_anO = f_aIL();
  f_aLD("A063");
  UnitAddAbility(gv_aaU[2], "A063");
  SuspendHeroXP(gv_aaU[2], true);
  SetUnitAbilityLevel(gv_aaU[2], "A063", f_aLH() - 1);
  gv_aiy = CreateTrigger();
  TriggerRegisterEnterRectSimple(gv_aiy, gv_afm);
  TriggerAddCondition(gv_aiy, Condition(f_aNP));
  TriggerAddAction(gv_aiy, f_bpZ);
  gv_anP = f_aIL();
  Preload("Abilities\\Spells\\Human\\FlameStrike\\FlameStrikeTarget.mdl");
  gv_anR = CreateUnit(Player(11), "hpea", 0.0, 0.0, 0.0);
  UnitAddAbility(gv_anR, "A04J");
  f_aIw(Condition(f_bpW));
  SuspendHeroXP(gv_aaU[3], true);
  gv_aiz = CreateTrigger();
  TriggerRegisterEnterRectSimple(gv_aiz, gv_ael);
  TriggerAddCondition(gv_aiz, Condition(f_aNP));
  TriggerAddAction(gv_aiz, f_bqb);
  gv_anS = f_aIL();
  gv_anT = f_aIn();
  UnitAddAbility(gv_aaU[4], "A006");
  SuspendHeroXP(gv_aaU[4], true);
  Preload("Abilities\\Weapons\\ZigguratFrostMissile\\ZigguratFrostMissile.mdl");
  Preload("Objects\\Spawnmodels\\NightElf\\NECancelDeath\\NECancelDeath.mdl");
  gv_aiA = CreateTrigger();
  TriggerRegisterEnterRectSimple(gv_aiA, gv_aez);
  TriggerAddCondition(gv_aiA, Condition(f_aNP));
  TriggerAddAction(gv_aiA, f_bqf);
  gv_anW = CreateTrigger();
  TriggerRegisterEnterRectSimple(gv_anW, gv_aeF);
  TriggerAddCondition(gv_anW, Condition(f_bqg));
  TriggerAddAction(gv_anW, f_bqh);
  DisableTrigger(gv_anW);
  gv_anU = f_aIL();
  gv_anX = f_aIn();
  SuspendHeroXP(gv_aaU[5], true);
  gv_anV = 200;
  Preload("Abilities\\Spells\\NightElf\\Taunt\\TauntCaster.mdl");
  f_bqx();
  gv_aiC = CreateTrigger();
  TriggerRegisterAnyUnitEventBJ(gv_aiC, EVENT_PLAYER_UNIT_DEATH);
  TriggerAddCondition(gv_aiC, Condition(f_bqD));
  gv_aiC = CreateTrigger();
  TriggerRegisterEnterRectSimple(gv_aiC, gv_adJ);
  TriggerAddCondition(gv_aiC, Condition(f_aNP));
  TriggerAddAction(gv_aiC, f_bqC);
  gv_aoc = f_aIL();
  gv_all[80] = Location(-882, -14009);
  gv_all[81] = Location(-15, -15364);
  gv_all[82] = Location(-14, -15050);
  gv_all[83] = Location(-377, -14933);
  gv_all[84] = Location(-850, -15120);
  gv_all[85] = Location(-972, -14572);
  gv_aod[0] = "ucry";
  gv_aod[1] = "u004";
  gv_aod[2] = "u003";
  gv_aod[3] = "u008";
  UnitAddAbility(gv_aaU[7], "Alit");
  f_aLD("A085");
  f_aLD("A086");
  f_aLD("A087");
  f_aLD("A088");
  f_aLD("A089");
  Preload("Abilities\\Spells\\Other\\Incinerate\\FireLordDeathExplode.mdl");
  SuspendHeroXP(gv_aaU[7], true);
  gv_aiD = CreateTrigger();
  TriggerRegisterEnterRectSimple(gv_aiD, gv_adm);
  TriggerAddCondition(gv_aiD, Condition(f_aNP));
  TriggerAddAction(gv_aiD, f_bqO);
  gv_aoe = f_aIL();
  gv_aoj = f_aIn();
  SuspendHeroXP(gv_aaU[8], true);
  Preload("Abilities\\Spells\\Undead\\UnholyAura\\UnholyAura.mdl");
  gv_acv = f_aIL();
  f_aLD("A090");
  ShowUnit(gv_akN, false);
  PauseUnit(gv_akN, true);
  Preload("Abilities\\Spells\\Human\\MassTeleport\\MassTeleportCaster.mdl");
  gv_aiF = CreateTrigger();
  TriggerRegisterTimerEvent(gv_aiF, 0.5, true);
  TriggerAddAction(gv_aiF, f_bqS);
  gv_all[86] = Location(11136, GetRandomReal(-8224, -7392));
  gv_all[87] = Location(12432, GetRandomReal(-8224, -7392));
  gv_all[88] = Location(GetRandomReal(11136, 13000), -8150);
  gv_all[89] = Location(12174.7, -7811.3);
  gv_all[90] = Location(11136, -7500);
  gv_all[91] = Location(13728, GetLocationY(gv_all[86]));
  gv_all[92] = Location(13728, GetLocationY(gv_all[87]));
  gv_all[93] = Location(13728, -8150);
  gv_all[94] = Location(13728, -7811.3);
  gv_all[95] = Location(13728, -7500);
  gv_avL = f_aIn();
  gv_aiG = CreateTrigger();
  TriggerRegisterEnterRectSimple(gv_aiG, gv_afG);
  TriggerAddCondition(gv_aiG, Condition(f_bpA));
  TriggerAddAction(gv_aiG, f_bqW);
  gv_aiH = CreateTrigger();
  TriggerRegisterEnterRectSimple(gv_aiH, gv_afy);
  TriggerAddCondition(gv_aiH, Condition(f_aNP));
  TriggerAddAction(gv_aiH, f_bqZ);
  gv_aok = f_aIL();
  Preload("MDX\\iceberg.mdx");
  gv_aiI = CreateTrigger();
  TriggerRegisterEnterRectSimple(gv_aiI, gv_afJ);
  TriggerAddCondition(gv_aiI, Condition(f_aNP));
  TriggerAddAction(gv_aiI, f_brh);
  gv_aol = f_aIL();
  Preload("Abilities\\Spells\\Human\\FlameStrike\\FlameStrike1.mdl");
  f_aLD("A08J");
  gv_aiJ = CreateTrigger();
  TriggerRegisterEnterRectSimple(gv_aiJ, gv_afx);
  TriggerAddCondition(gv_aiJ, Condition(f_aNP));
  TriggerAddAction(gv_aiJ, f_brt);
  gv_aom = f_aIL();
  gv_aon = f_aIL();
  gv_aoo = f_aIn();
  gv_all[96] = Location(14240, -4074);
  gv_all[97] = Location(12986, -3000);
  gv_all[98] = Location(13598, -3463);
  gv_aiK = CreateTrigger();
  TriggerRegisterEnterRectSimple(gv_aiK, gv_aey);
  TriggerAddCondition(gv_aiK, Condition(f_aNP));
  TriggerAddAction(gv_aiK, f_brD);
  gv_aoq = f_aIL();
  gv_aor = f_aIL();
  gv_aos = f_aIn();
  gv_all[99] = Location(11936, -960);
  gv_all[100] = Location(12032, 1568);
  gv_all[101] = Location(14752, 1600);
  gv_all[102] = Location(14720, -896);
  SuspendHeroXP(gv_aaU[9], true);
  gv_aiL = CreateTrigger();
  TriggerRegisterEnterRectSimple(gv_aiL, gv_adZ);
  TriggerAddCondition(gv_aiL, Condition(f_aNP));
  TriggerAddAction(gv_aiL, f_bsa);
  gv_aoy = f_aIL();
  f_aIw(Condition(f_brP));
  gv_aiM = CreateTrigger();
  TriggerRegisterEnterRectSimple(gv_aiM, gv_afy);
  TriggerAddCondition(gv_aiM, Condition(f_aNP));
  TriggerAddAction(gv_aiM, f_bsn);
  gv_aoA = f_aIL();
  gv_aoC = false;
  Preload("Abilities\\Spells\\Human\\FlameStrike\\FlameStrikeEmbers.mdl");
  DisableTrigger(gv_aiM);
  gv_aiN = CreateTrigger();
  TriggerRegisterEnterRectSimple(gv_aiN, gv_adX);
  TriggerAddCondition(gv_aiN, Condition(f_aNP));
  TriggerAddAction(gv_aiN, f_bss);
  DisableTrigger(gv_aiN);
  gv_aoD = f_aIL();
  gv_aiO = CreateTrigger();
  TriggerRegisterTimerEventPeriodic(gv_aiO, 30);
  TriggerAddAction(gv_aiO, f_bst);
  f_bsK();
  gv_aiP = CreateTrigger();
  TriggerRegisterPlayerUnitEventSimple(
    gv_aiP,
    Player(10),
    EVENT_PLAYER_UNIT_DEATH
  );
  TriggerAddAction(gv_aiP, f_bsM);
  f_btk();
  gv_aiQ = CreateTrigger();
  TriggerRegisterPlayerUnitEventSimple(
    gv_aiQ,
    Player(10),
    EVENT_PLAYER_UNIT_DEATH
  );
  TriggerRegisterPlayerUnitEventSimple(
    gv_aiQ,
    Player(9),
    EVENT_PLAYER_UNIT_DEATH
  );
  TriggerAddAction(gv_aiQ, f_btm);
  gv_aiR = CreateTrigger();
  TriggerRegisterTimerEventSingle(gv_aiR, 121);
  TriggerAddAction(gv_aiR, f_bts);
  gv_aiS = CreateTrigger();
  TriggerAddAction(gv_aiS, f_btw);
  gv_aiT = CreateTrigger();
  TriggerAddAction(gv_aiT, f_btC);
  gv_aiU = CreateTrigger();
  TriggerRegisterEnterRectSimple(gv_aiU, gv_adK);
  TriggerRegisterEnterRectSimple(gv_aiU, gv_afq);
  TriggerAddAction(gv_aiU, f_btI);
  gv_aiV = CreateTrigger();
  TriggerRegisterTimerEventPeriodic(gv_aiV, 25.15);
  TriggerAddAction(gv_aiV, f_btM);
  gv_aiW = CreateTrigger();
  TriggerRegisterUnitEvent(gv_aiW, gv_ajS, EVENT_UNIT_DEATH);
  TriggerAddAction(gv_aiW, f_btN);
  gv_aiX = CreateTrigger();
  TriggerRegisterAnyUnitEventBJ(gv_aiX, EVENT_PLAYER_UNIT_DEATH);
  TriggerAddAction(gv_aiX, f_btP);
  gv_aiY = CreateTrigger();
  TriggerRegisterTimerEventPeriodic(gv_aiY, 20);
  TriggerAddAction(gv_aiY, f_btU);
  gv_aiZ = CreateTrigger();
  TriggerRegisterTimerEventPeriodic(gv_aiZ, 6.5);
  TriggerAddAction(gv_aiZ, f_bua);
  gv_aja = CreateTrigger();
  TriggerRegisterTimerEventPeriodic(gv_aja, 1.45);
  TriggerAddAction(gv_aja, f_buc);
  gv_ajb = CreateTrigger();
  TriggerRegisterTimerEventPeriodic(gv_ajb, 20);
  TriggerAddAction(gv_ajb, f_buh);
  gv_ajc = CreateTrigger();
  TriggerRegisterEnterRectSimple(gv_ajc, gv_adK);
  TriggerAddAction(gv_ajc, f_bus);
  gv_ajd = CreateTrigger();
  TriggerRegisterTimerEventPeriodic(gv_ajd, 5.09);
  TriggerAddAction(gv_ajd, f_buu);
  gv_aje = CreateTrigger();
  TriggerRegisterEnterRectSimple(gv_aje, gv_acJ);
  TriggerRegisterEnterRectSimple(gv_aje, gv_acK);
  TriggerRegisterEnterRectSimple(gv_aje, gv_acL);
  TriggerRegisterEnterRectSimple(gv_aje, gv_acM);
  TriggerAddAction(gv_aje, f_buA);
  gv_ajf = CreateTrigger();
  TriggerRegisterUnitEvent(gv_ajf, gv_akJ, EVENT_UNIT_DAMAGED);
  TriggerAddAction(gv_ajf, f_buM);
  gv_ajg = CreateTrigger();
  TriggerRegisterUnitEvent(gv_ajg, gv_ajR, EVENT_UNIT_DAMAGED);
  TriggerAddAction(gv_ajg, f_buU);
  gv_ajh = CreateTrigger();
  TriggerRegisterTimerEventSingle(gv_ajh, 0.6);
  TriggerAddAction(gv_ajh, f_buV);
  gv_aji = CreateTrigger();
  TriggerRegisterAnyUnitEventBJ(gv_aji, EVENT_PLAYER_UNIT_PICKUP_ITEM);
  TriggerAddAction(gv_aji, f_bva);
  gv_ajj = CreateTrigger();
  DisableTrigger(gv_ajj);
  TriggerRegisterTimerEventPeriodic(gv_ajj, 1.01);
  TriggerAddAction(gv_ajj, f_bvg);
  gv_ajk = CreateTrigger();
  TriggerRegisterLeaveRectSimple(gv_ajk, gv_acH);
  TriggerAddAction(gv_ajk, f_bvu);
  gv_ajl = CreateTrigger();
  TriggerRegisterTimerEventPeriodic(gv_ajl, 25);
  TriggerAddAction(gv_ajl, f_bvx);
  lv_byF = 0;
  gv_ajm = CreateTrigger();
  do {
    if (lv_byF > 7) {
      break;
    }
    lv_byF = lv_byF + 1;
  } while (true);
  TriggerAddAction(gv_ajm, f_bvD);
  lv_byF = 0;
  gv_ajn = CreateTrigger();
  do {
    if (lv_byF > 7) {
      break;
    }
    TriggerRegisterPlayerChatEvent(gv_ajn, Player(lv_byF), "-stab", false);
    TriggerRegisterPlayerChatEvent(gv_ajn, Player(lv_byF), "-slap", false);
    lv_byF = lv_byF + 1;
  } while (true);
  TriggerAddAction(gv_ajn, f_bvH);
  lv_byF = 0;
  gv_ajo = CreateTrigger();
  do {
    if (lv_byF > 7) {
      break;
    }
    TriggerRegisterPlayerChatEvent(gv_ajo, Player(lv_byF), "-kill", false);
    lv_byF = lv_byF + 1;
  } while (true);
  TriggerAddAction(gv_ajo, f_bvL);
  lv_byF = 0;
  gv_ajp = CreateTrigger();
  do {
    if (lv_byF > 7) {
      break;
    }
    TriggerRegisterPlayerChatEvent(gv_ajp, Player(lv_byF), "-boot", false);
    TriggerRegisterPlayerChatEvent(gv_ajp, Player(lv_byF), "-kick", false);
    lv_byF = lv_byF + 1;
  } while (true);
  TriggerAddAction(gv_ajp, f_bvO);
  lv_byF = 0;
  gv_ajq = CreateTrigger();
  do {
    if (lv_byF > 7) {
      break;
    }
    TriggerRegisterPlayerChatEvent(gv_ajq, Player(lv_byF), "-quests", true);
    TriggerRegisterPlayerChatEvent(gv_ajq, Player(lv_byF), "-q", true);
    lv_byF = lv_byF + 1;
  } while (true);
  TriggerAddAction(gv_ajq, f_bvR);
  lv_byF = 0;
  gv_ajr = CreateTrigger();
  do {
    if (lv_byF > 7) {
      break;
    }
    TriggerRegisterPlayerChatEvent(gv_ajr, Player(lv_byF), "-players", true);
    TriggerRegisterPlayerChatEvent(gv_ajr, Player(lv_byF), "-p", true);
    lv_byF = lv_byF + 1;
  } while (true);
  TriggerAddAction(gv_ajr, f_bvS);
  lv_byF = 0;
  gv_ajs = CreateTrigger();
  do {
    if (lv_byF > 7) {
      break;
    }
    TriggerRegisterPlayerChatEvent(gv_ajs, Player(lv_byF), "-die", true);
    TriggerRegisterPlayerChatEvent(gv_ajs, Player(lv_byF), "-suicide", true);
    lv_byF = lv_byF + 1;
  } while (true);
  TriggerAddAction(gv_ajs, f_bvT);
  lv_byF = 0;
  gv_ajt = CreateTrigger();
  do {
    if (lv_byF > 7) {
      break;
    }
    TriggerRegisterPlayerChatEvent(gv_ajt, Player(lv_byF), "-clear", true);
    lv_byF = lv_byF + 1;
  } while (true);
  TriggerAddAction(gv_ajt, f_bvV);
  f_bwh();
  lv_byF = 0;
  gv_aju = CreateTrigger();
  do {
    if (lv_byF > 7) {
      break;
    }
    TriggerRegisterPlayerChatEvent(gv_aju, Player(lv_byF), "-roll", false);
    TriggerRegisterPlayerChatEvent(gv_aju, Player(lv_byF), "-roll  ", false);
    lv_byF = lv_byF + 1;
  } while (true);
  TriggerAddAction(gv_aju, f_bwl);
  lv_byF = 0;
  gv_ajv = CreateTrigger();
  do {
    if (lv_byF > 7) {
      break;
    }
    TriggerRegisterPlayerChatEvent(gv_ajv, Player(lv_byF), "-in", true);
    lv_byF = lv_byF + 1;
  } while (true);
  TriggerAddAction(gv_ajv, f_bwr);
  lv_byF = 0;
  gv_ajw = CreateTrigger();
  do {
    if (lv_byF > 7) {
      break;
    }
    TriggerRegisterPlayerChatEvent(gv_ajw, Player(lv_byF), "-out", true);
    lv_byF = lv_byF + 1;
  } while (true);
  TriggerAddAction(gv_ajw, f_bws);
  lv_byF = 0;
  gv_ajx = CreateTrigger();
  do {
    if (lv_byF > 7) {
      break;
    }
    TriggerRegisterPlayerChatEvent(gv_ajx, Player(lv_byF), "-info", true);
    lv_byF = lv_byF + 1;
  } while (true);
  TriggerAddAction(gv_ajx, f_bwx);
  lv_byF = 0;
  gv_ajy = CreateTrigger();
  do {
    if (lv_byF > 7) {
      break;
    }
    TriggerRegisterPlayerChatEvent(gv_ajy, Player(lv_byF), "-find", false);
    lv_byF = lv_byF + 1;
  } while (true);
  TriggerAddAction(gv_ajy, f_bwD);
  lv_byF = 0;
  gv_ajz = CreateTrigger();
  do {
    if (lv_byF > 7) {
      break;
    }
    TriggerRegisterPlayerChatEvent(gv_ajz, Player(lv_byF), "-text", true);
    lv_byF = lv_byF + 1;
  } while (true);
  TriggerAddAction(gv_ajz, f_bwG);
  gv_ajA = CreateTrigger();
  TriggerRegisterTimerEventSingle(gv_ajA, 0.3);
  TriggerAddAction(gv_ajA, f_bwK);
  lv_byF = 0;
  gv_ajB = CreateTrigger();
  do {
    if (lv_byF > 7) {
      break;
    }
    TriggerRegisterPlayerChatEvent(gv_ajB, Player(lv_byF), "-save", true);
    lv_byF = lv_byF + 1;
  } while (true);
  TriggerAddAction(gv_ajB, f_bxa);
  lv_byF = 0;
  gv_ajC = CreateTrigger();
  do {
    if (lv_byF > 7) {
      break;
    }
    TriggerRegisterPlayerChatEvent(gv_ajC, Player(lv_byF), "-load ", false);
    lv_byF = lv_byF + 1;
  } while (true);
  TriggerAddAction(gv_ajC, f_bxA);
  f_bxQ();
  gv_ajD = CreateTrigger();
  TriggerRegisterTimerEventSingle(gv_ajD, 15);
  TriggerAddAction(gv_ajD, f_bxT);
  gv_ajE = CreateTrigger();
  TriggerRegisterTimerEventPeriodic(gv_ajE, 2.07);
  TriggerAddAction(gv_ajE, f_bxZ);
  gv_ajF = CreateTrigger();
  TriggerRegisterUnitEvent(gv_ajF, gv_akK, EVENT_UNIT_ATTACKED);
  TriggerAddAction(gv_ajF, f_byc);
  gv_ajG = CreateTrigger();
  TriggerRegisterUnitEvent(gv_ajG, gv_aki, EVENT_UNIT_ATTACKED);
  TriggerAddAction(gv_ajG, f_bye);
  gv_ajH = CreateTrigger();
  TriggerRegisterUnitEvent(gv_ajH, gv_aaU[9], EVENT_UNIT_ATTACKED);
  TriggerAddAction(gv_ajH, f_byg);
  gv_ajI = CreateTrigger();
  TriggerRegisterAnyUnitEventBJ(gv_ajI, EVENT_PLAYER_UNIT_ATTACKED);
  TriggerAddAction(gv_ajI, f_byi);
  gv_ajJ = CreateTrigger();
  TriggerRegisterAnyUnitEventBJ(gv_ajJ, EVENT_PLAYER_UNIT_ATTACKED);
  TriggerAddCondition(gv_ajJ, Condition(f_byj));
  TriggerAddAction(gv_ajJ, f_byk);
  gv_ajK = CreateTrigger();
  TriggerRegisterUnitEvent(gv_ajK, gv_akM, EVENT_UNIT_ATTACKED);
  TriggerAddAction(gv_ajK, f_bym);
  gv_ajL = CreateTrigger();
  TriggerRegisterUnitEvent(gv_ajL, gv_akI, EVENT_UNIT_ATTACKED);
  TriggerAddAction(gv_ajL, f_byo);
  gv_ajM = CreateTrigger();
  TriggerRegisterUnitEvent(gv_ajM, gv_aks, EVENT_UNIT_ATTACKED);
  TriggerAddAction(gv_ajM, f_byq);
  gv_ajN = CreateTrigger();
  TriggerRegisterUnitEvent(gv_ajN, gv_akx, EVENT_UNIT_ATTACKED);
  TriggerAddAction(gv_ajN, f_bys);
  ConditionalTriggerExecute(gv_afT);
  ConditionalTriggerExecute(gv_afU);
  ConditionalTriggerExecute(gv_afV);
}
function f_byH() {
  SetMapName("TRIGSTR_001");
  SetMapDescription("TRIGSTR_003");
  SetPlayers(12);
  SetTeams(12);
  SetGamePlacement(MAP_PLACEMENT_TEAMS_TOGETHER);
  DefineStartLocation(0, -14208, -14976);
  DefineStartLocation(1, -14208, -14976);
  DefineStartLocation(2, -14208, -14976);
  DefineStartLocation(3, -14208, -14976);
  DefineStartLocation(4, -14208, -14976);
  DefineStartLocation(5, -14208, -14976);
  DefineStartLocation(6, -14208, -14976);
  DefineStartLocation(7, -14208, -14976);
  DefineStartLocation(8, -14208, -14976);
  DefineStartLocation(9, -14208, -14976);
  DefineStartLocation(10, -14208, -14976);
  DefineStartLocation(11, -14208, -14976);
  SetPlayerStartLocation(Player(0), 0);
  ForcePlayerStartLocation(Player(0), 0);
  SetPlayerColor(Player(0), ConvertPlayerColor(0));
  SetPlayerRacePreference(Player(0), RACE_PREF_HUMAN);
  SetPlayerRaceSelectable(Player(0), false);
  SetPlayerController(Player(0), MAP_CONTROL_USER);
  SetPlayerStartLocation(Player(1), 1);
  ForcePlayerStartLocation(Player(1), 1);
  SetPlayerColor(Player(1), ConvertPlayerColor(1));
  SetPlayerRacePreference(Player(1), RACE_PREF_HUMAN);
  SetPlayerRaceSelectable(Player(1), false);
  SetPlayerController(Player(1), MAP_CONTROL_USER);
  SetPlayerStartLocation(Player(2), 2);
  ForcePlayerStartLocation(Player(2), 2);
  SetPlayerColor(Player(2), ConvertPlayerColor(2));
  SetPlayerRacePreference(Player(2), RACE_PREF_HUMAN);
  SetPlayerRaceSelectable(Player(2), false);
  SetPlayerController(Player(2), MAP_CONTROL_USER);
  SetPlayerStartLocation(Player(3), 3);
  ForcePlayerStartLocation(Player(3), 3);
  SetPlayerColor(Player(3), ConvertPlayerColor(3));
  SetPlayerRacePreference(Player(3), RACE_PREF_HUMAN);
  SetPlayerRaceSelectable(Player(3), false);
  SetPlayerController(Player(3), MAP_CONTROL_USER);
  SetPlayerStartLocation(Player(4), 4);
  ForcePlayerStartLocation(Player(4), 4);
  SetPlayerColor(Player(4), ConvertPlayerColor(4));
  SetPlayerRacePreference(Player(4), RACE_PREF_HUMAN);
  SetPlayerRaceSelectable(Player(4), false);
  SetPlayerController(Player(4), MAP_CONTROL_USER);
  SetPlayerStartLocation(Player(5), 5);
  ForcePlayerStartLocation(Player(5), 5);
  SetPlayerColor(Player(5), ConvertPlayerColor(5));
  SetPlayerRacePreference(Player(5), RACE_PREF_HUMAN);
  SetPlayerRaceSelectable(Player(5), false);
  SetPlayerController(Player(5), MAP_CONTROL_USER);
  SetPlayerStartLocation(Player(6), 6);
  ForcePlayerStartLocation(Player(6), 6);
  SetPlayerColor(Player(6), ConvertPlayerColor(6));
  SetPlayerRacePreference(Player(6), RACE_PREF_HUMAN);
  SetPlayerRaceSelectable(Player(6), false);
  SetPlayerController(Player(6), MAP_CONTROL_USER);
  SetPlayerStartLocation(Player(7), 7);
  ForcePlayerStartLocation(Player(7), 7);
  SetPlayerColor(Player(7), ConvertPlayerColor(7));
  SetPlayerRacePreference(Player(7), RACE_PREF_HUMAN);
  SetPlayerRaceSelectable(Player(7), false);
  SetPlayerController(Player(7), MAP_CONTROL_USER);
  SetPlayerStartLocation(Player(8), 8);
  ForcePlayerStartLocation(Player(8), 8);
  SetPlayerColor(Player(8), ConvertPlayerColor(8));
  SetPlayerRacePreference(Player(8), RACE_PREF_HUMAN);
  SetPlayerRaceSelectable(Player(8), false);
  SetPlayerController(Player(8), MAP_CONTROL_COMPUTER);
  SetPlayerStartLocation(Player(9), 9);
  ForcePlayerStartLocation(Player(9), 9);
  SetPlayerColor(Player(9), ConvertPlayerColor(9));
  SetPlayerRacePreference(Player(9), RACE_PREF_HUMAN);
  SetPlayerRaceSelectable(Player(9), false);
  SetPlayerController(Player(9), MAP_CONTROL_COMPUTER);
  SetPlayerStartLocation(Player(10), 10);
  ForcePlayerStartLocation(Player(10), 10);
  SetPlayerColor(Player(10), ConvertPlayerColor(10));
  SetPlayerRacePreference(Player(10), RACE_PREF_UNDEAD);
  SetPlayerRaceSelectable(Player(10), false);
  SetPlayerController(Player(10), MAP_CONTROL_COMPUTER);
  SetPlayerStartLocation(Player(11), 11);
  ForcePlayerStartLocation(Player(11), 11);
  SetPlayerColor(Player(11), ConvertPlayerColor(11));
  SetPlayerRacePreference(Player(11), RACE_PREF_UNDEAD);
  SetPlayerRaceSelectable(Player(11), false);
  SetPlayerController(Player(11), MAP_CONTROL_COMPUTER);
  f_byt();
  SetStartLocPrioCount(0, 7);
  SetStartLocPrio(0, 0, 1, MAP_LOC_PRIO_HIGH);
  SetStartLocPrio(0, 1, 2, MAP_LOC_PRIO_HIGH);
  SetStartLocPrio(0, 2, 3, MAP_LOC_PRIO_HIGH);
  SetStartLocPrio(0, 3, 4, MAP_LOC_PRIO_HIGH);
  SetStartLocPrio(0, 4, 5, MAP_LOC_PRIO_HIGH);
  SetStartLocPrio(0, 5, 6, MAP_LOC_PRIO_HIGH);
  SetStartLocPrio(0, 6, 7, MAP_LOC_PRIO_HIGH);
  SetStartLocPrioCount(1, 7);
  SetStartLocPrio(1, 0, 0, MAP_LOC_PRIO_HIGH);
  SetStartLocPrio(1, 1, 2, MAP_LOC_PRIO_HIGH);
  SetStartLocPrio(1, 2, 3, MAP_LOC_PRIO_HIGH);
  SetStartLocPrio(1, 3, 4, MAP_LOC_PRIO_HIGH);
  SetStartLocPrio(1, 4, 5, MAP_LOC_PRIO_HIGH);
  SetStartLocPrio(1, 5, 6, MAP_LOC_PRIO_HIGH);
  SetStartLocPrio(1, 6, 7, MAP_LOC_PRIO_HIGH);
  SetStartLocPrioCount(2, 7);
  SetStartLocPrio(2, 0, 0, MAP_LOC_PRIO_HIGH);
  SetStartLocPrio(2, 1, 1, MAP_LOC_PRIO_HIGH);
  SetStartLocPrio(2, 2, 3, MAP_LOC_PRIO_HIGH);
  SetStartLocPrio(2, 3, 4, MAP_LOC_PRIO_HIGH);
  SetStartLocPrio(2, 4, 5, MAP_LOC_PRIO_HIGH);
  SetStartLocPrio(2, 5, 6, MAP_LOC_PRIO_HIGH);
  SetStartLocPrio(2, 6, 7, MAP_LOC_PRIO_HIGH);
  SetStartLocPrioCount(3, 7);
  SetStartLocPrio(3, 0, 0, MAP_LOC_PRIO_HIGH);
  SetStartLocPrio(3, 1, 1, MAP_LOC_PRIO_HIGH);
  SetStartLocPrio(3, 2, 2, MAP_LOC_PRIO_HIGH);
  SetStartLocPrio(3, 3, 4, MAP_LOC_PRIO_HIGH);
  SetStartLocPrio(3, 4, 5, MAP_LOC_PRIO_HIGH);
  SetStartLocPrio(3, 5, 6, MAP_LOC_PRIO_HIGH);
  SetStartLocPrio(3, 6, 7, MAP_LOC_PRIO_HIGH);
  SetStartLocPrioCount(4, 7);
  SetStartLocPrio(4, 0, 0, MAP_LOC_PRIO_HIGH);
  SetStartLocPrio(4, 1, 1, MAP_LOC_PRIO_HIGH);
  SetStartLocPrio(4, 2, 2, MAP_LOC_PRIO_HIGH);
  SetStartLocPrio(4, 3, 3, MAP_LOC_PRIO_HIGH);
  SetStartLocPrio(4, 4, 5, MAP_LOC_PRIO_HIGH);
  SetStartLocPrio(4, 5, 6, MAP_LOC_PRIO_HIGH);
  SetStartLocPrio(4, 6, 7, MAP_LOC_PRIO_HIGH);
  SetStartLocPrioCount(5, 7);
  SetStartLocPrio(5, 0, 0, MAP_LOC_PRIO_HIGH);
  SetStartLocPrio(5, 1, 1, MAP_LOC_PRIO_HIGH);
  SetStartLocPrio(5, 2, 2, MAP_LOC_PRIO_HIGH);
  SetStartLocPrio(5, 3, 3, MAP_LOC_PRIO_HIGH);
  SetStartLocPrio(5, 4, 4, MAP_LOC_PRIO_HIGH);
  SetStartLocPrio(5, 5, 6, MAP_LOC_PRIO_HIGH);
  SetStartLocPrio(5, 6, 7, MAP_LOC_PRIO_HIGH);
  SetStartLocPrioCount(6, 7);
  SetStartLocPrio(6, 0, 0, MAP_LOC_PRIO_HIGH);
  SetStartLocPrio(6, 1, 1, MAP_LOC_PRIO_HIGH);
  SetStartLocPrio(6, 2, 2, MAP_LOC_PRIO_HIGH);
  SetStartLocPrio(6, 3, 3, MAP_LOC_PRIO_HIGH);
  SetStartLocPrio(6, 4, 4, MAP_LOC_PRIO_HIGH);
  SetStartLocPrio(6, 5, 5, MAP_LOC_PRIO_HIGH);
  SetStartLocPrio(6, 6, 7, MAP_LOC_PRIO_HIGH);
  SetStartLocPrioCount(7, 7);
  SetStartLocPrio(7, 0, 0, MAP_LOC_PRIO_HIGH);
  SetStartLocPrio(7, 1, 1, MAP_LOC_PRIO_HIGH);
  SetStartLocPrio(7, 2, 2, MAP_LOC_PRIO_HIGH);
  SetStartLocPrio(7, 3, 3, MAP_LOC_PRIO_HIGH);
  SetStartLocPrio(7, 4, 4, MAP_LOC_PRIO_HIGH);
  SetStartLocPrio(7, 5, 5, MAP_LOC_PRIO_HIGH);
  SetStartLocPrio(7, 6, 6, MAP_LOC_PRIO_HIGH);
}
function f_byI() {
  f_aNU(gv_axT, gv_axV, gv_axW);
  return true;
}
function f_byJ() {
  f_bkN(gv_axT, gv_axX, gv_axU, gv_axY);
  return true;
}
function f_byK() {
  var lv_byL = gv_axZ;
  do {
    if (gv_awf.getInt(lv_byL) < 0) {
      break;
    }
    DestroyEffect(gv_awd[gv_awe.getInt(lv_byL) + gv_awf.getInt(lv_byL)]);
    gv_awf[lv_byL] = gv_awf.getInt(lv_byL) - 1;
  } while (true);
  if (GetWidgetLife(gv_akw) > 0.405) {
    IssuePointOrderById(gv_akw, gv_aas, GetUnitX(gv_akw), GetUnitY(gv_akw));
  }
  return true;
}
function f_byM() {
  var lv_byN = gv_axZ;
  PauseUnit(gv_avZ[lv_byN], false);
  PauseUnit(gv_avY[lv_byN], false);
  f_aNg(
    gv_avZ[lv_byN],
    "Objects\\Spawnmodels\\Undead\\ImpaleTargetDust\\ImpaleTargetDust.mdl",
    400,
    30,
    1,
    0.02
  );
  return true;
}
function f_byO() {
  var lv_byP = gv_axZ;
  FlushChildHashtable(gv_abH, lv_byP);
  return true;
}
function f_byQ() {
  var lv_byR = gv_axZ;
  SetUnitInvulnerable(gv_avI[lv_byR], false);
  return true;
}
function f_byS() {
  var lv_byT = gv_axZ;
  var lv_byU = gv_axP;
  SetUnitFacing(gv_avj[lv_byT], lv_byU * bj_RADTODEG);
  gv_aya = false;
  return true;
}
function f_byV() {
  var lv_byW = gv_axZ;
  var lv_byX = f_aDa();
  var lv_byY = f_aIL();
  gv_acg = GetOwningPlayer(gv_avj[lv_byW]);
  gv_ach = GetUnitX(gv_avj[lv_byW]);
  gv_aci = GetUnitY(gv_avj[lv_byW]);
  gv_acj = 400 * gv_aan[GetPlayerId(gv_acg)];
  f_aLz(
    AddSpecialEffect(
      "Abilities\\Spells\\NightElf\\Starfall\\StarfallCaster.mdl",
      gv_ach,
      gv_aci
    ),
    1.4
  );
  gv_avb[lv_byX] = f_aIn();
  gv_avc[lv_byX] = f_aIV(
    gv_acg,
    GetUnitX(gv_avj[lv_byW]),
    GetUnitY(gv_avj[lv_byW]),
    0.0
  );
  gv_ava[lv_byX] = gv_avk[lv_byW] * gv_aam[GetPlayerId(gv_acg)];
  GroupEnumUnitsInRange(
    gv_avb[lv_byX],
    gv_ach,
    gv_aci,
    500 * gv_aan[GetPlayerId(gv_acg)],
    Condition(f_aLM)
  );
  bj_groupRemoveGroupDest = gv_avb[lv_byX];
  ForGroup(gv_avb[lv_byX], f_bfV);
  SaveInteger(gv_abL, 0, GetHandleId(lv_byY), lv_byX);
  TimerStart(lv_byY, 0.7, false, f_bfI);
  KillUnit(gv_avj[lv_byW]);
  lv_byY = null;
  return true;
}
function f_byZ() {
  var lv_bza = gv_axZ;
  var lv_bzb = gv_axP;
  SetUnitFacing(gv_auV[lv_bza], lv_bzb * bj_RADTODEG);
  gv_aya = false;
  return true;
}
function f_bzc() {
  var lv_bzd = gv_axZ;
  var lv_bze = f_aIn();
  var lv_bzf;
  var lv_bzg = f_aIV(
    GetOwningPlayer(gv_auV[lv_bzd]),
    GetUnitX(gv_auV[lv_bzd]),
    GetUnitY(gv_auV[lv_bzd]),
    3
  );
  SetUnitScale(lv_bzg, 2, 2, 0.0);
  gv_ach = GetUnitX(gv_auV[lv_bzd]);
  gv_aci = GetUnitY(gv_auV[lv_bzd]);
  gv_acg = GetOwningPlayer(gv_auV[lv_bzd]);
  gv_acj = 250;
  GroupEnumUnitsInRange(lv_bze, gv_ach, gv_aci, 350, Condition(f_aLM));
  do {
    lv_bzf = FirstOfGroup(lv_bze);
    if (lv_bzf == null) {
      break;
    }
    f_bfj(lv_bzf, GetOwningPlayer(gv_auV[lv_bzd]), gv_auW[lv_bzd]);
    GroupRemoveUnit(lv_bze, lv_bzf);
  } while (true);
  DestroyEffect(
    AddSpecialEffectTarget(
      "Objects\\Spawnmodels\\Human\\HCancelDeath\\HCancelDeath.mdl",
      lv_bzg,
      "origin"
    )
  );
  KillUnit(gv_auV[lv_bzd]);
  f_aIo(lv_bze);
  lv_bze = null;
  lv_bzg = null;
  lv_bzf = null;
  return true;
}
function f_bzh() {
  var lv_bzi = gv_axZ;
  var lv_bzj = gv_axP;
  var lv_bzk = f_aIn();
  var lv_bzl;
  gv_ach = GetUnitX(gv_atw[lv_bzi]);
  gv_aci = GetUnitY(gv_atw[lv_bzi]);
  gv_acj = 150;
  gv_acg = GetOwningPlayer(gv_atw[lv_bzi]);
  GroupEnumUnitsInRange(lv_bzk, gv_ach, gv_aci, 250, Condition(f_aAu));
  do {
    lv_bzl = FirstOfGroup(lv_bzk);
    if (lv_bzl == null) {
      break;
    }
    if (!IsUnitInGroup(lv_bzl, gv_atx[lv_bzi])) {
      UnitDamageTarget(
        gv_atw[lv_bzi],
        lv_bzl,
        gv_atz[lv_bzi],
        false,
        false,
        ATTACK_TYPE_NORMAL,
        DAMAGE_TYPE_UNIVERSAL,
        null
      );
      f_bcG(lv_bzl, gv_aty.getInt(lv_bzi));
      GroupAddUnit(gv_atx[lv_bzi], lv_bzl);
    }
    GroupRemoveUnit(lv_bzk, lv_bzl);
  } while (true);
  f_aIo(lv_bzk);
  lv_bzk = null;
  lv_bzl = null;
  gv_aya = false;
  return true;
}
function f_bzm() {
  var lv_bzn = gv_axZ;
  KillUnit(gv_atw[lv_bzn]);
  f_aIo(gv_atx[lv_bzn]);
  return true;
}
function f_bzo() {
  var lv_bzp = gv_axZ;
  var lv_bzq;
  var lv_bzr = f_aIn();
  UnitRemoveAbility(gv_asP[lv_bzp], "A04Y");
  UnitRemoveAbility(gv_asP[lv_bzp], "B010");
  DestroyEffect(
    AddSpecialEffect(
      "MDX\\FreezingRing.mdx",
      GetUnitX(gv_asP[lv_bzp]),
      GetUnitY(gv_asP[lv_bzp])
    )
  );
  gv_ach = GetUnitX(gv_asP[lv_bzp]);
  gv_aci = GetUnitY(gv_asP[lv_bzp]);
  gv_acj = 300;
  gv_acg = GetOwningPlayer(gv_asQ[lv_bzp]);
  GroupEnumUnitsInRange(lv_bzr, gv_ach, gv_aci, 400, Condition(f_aLM));
  gv_alw = gv_asR[lv_bzp];
  ForGroup(lv_bzr, f_bbI);
  f_aIo(lv_bzr);
  lv_bzr = null;
  return true;
}
function f_bzs() {
  var lv_bzt = gv_axZ;
  var lv_bzu = gv_axP;
  var lv_bzv = f_aIn();
  var lv_bzw;
  gv_acg = GetOwningPlayer(gv_asE[lv_bzt]);
  gv_ach = GetUnitX(gv_asE[lv_bzt]);
  gv_aci = GetUnitY(gv_asE[lv_bzt]);
  gv_acj = 75;
  GroupClear(lv_bzv);
  GroupEnumUnitsInRange(lv_bzv, gv_ach, gv_aci, 175, Condition(f_aLM));
  do {
    lv_bzw = FirstOfGroup(lv_bzv);
    if (lv_bzw == null) {
      break;
    }
    if (GetUnitAbilityLevel(lv_bzw, "B00B") < 1) {
      SetUnitPosition(gv_asF[lv_bzt], GetUnitX(lv_bzw), GetUnitY(lv_bzw));
      IssueTargetOrderById(gv_asF[lv_bzt], 852106, lv_bzw);
    }
    GroupRemoveUnit(lv_bzv, lv_bzw);
  } while (true);
  f_aIo(lv_bzv);
  lv_bzv = null;
  lv_bzw = null;
  gv_aya = false;
  return true;
}
function f_bzx() {
  var lv_bzy = gv_axZ;
  f_aIP(gv_asF[lv_bzy]);
  KillUnit(gv_asE[lv_bzy]);
  return true;
}
function f_bzz() {
  var lv_bzA = gv_axZ;
  var lv_bzB = gv_axP;
  f_aZq(lv_bzA, GetUnitX(gv_arS[lv_bzA]), GetUnitY(gv_arS[lv_bzA]));
  SetUnitFacing(gv_arQ[lv_bzA], lv_bzB * bj_RADTODEG);
  if (GetWidgetLife(gv_arS[lv_bzA]) < 0.406) {
    gv_aya = true;
    return true;
  }
  gv_aya = false;
  return true;
}
function f_bzC() {
  var lv_bzD = gv_axZ;
  if (GetWidgetLife(gv_arS[lv_bzD]) > 0.405) {
    UnitDamageTarget(
      gv_arQ[lv_bzD],
      gv_arS[lv_bzD],
      gv_arR[lv_bzD],
      false,
      false,
      ATTACK_TYPE_NORMAL,
      DAMAGE_TYPE_UNIVERSAL,
      null
    );
    if (GetUnitState(gv_arS[lv_bzD], UNIT_STATE_MANA) > 0.0) {
      if (GetUnitState(gv_arS[lv_bzD], UNIT_STATE_MANA) > gv_arR[lv_bzD]) {
        UnitDamageTarget(
          gv_arQ[lv_bzD],
          gv_arS[lv_bzD],
          gv_arR[lv_bzD],
          false,
          false,
          ATTACK_TYPE_NORMAL,
          DAMAGE_TYPE_UNIVERSAL,
          null
        );
        f_aLR(
          null,
          "-" + I2S(R2I(gv_arR[lv_bzD] + 0.5)),
          128,
          255,
          0,
          GetUnitX(gv_arQ[lv_bzD]),
          GetUnitY(gv_arQ[lv_bzD]),
          0.029,
          0.0,
          3,
          10
        );
      } else {
        UnitDamageTarget(
          gv_arQ[lv_bzD],
          gv_arS[lv_bzD],
          GetUnitState(gv_arS[lv_bzD], UNIT_STATE_MANA),
          false,
          false,
          ATTACK_TYPE_MAGIC,
          DAMAGE_TYPE_MAGIC,
          null
        );
        f_aLR(
          null,
          "-" + I2S(R2I(GetUnitState(gv_arS[lv_bzD], UNIT_STATE_MANA) + 0.5)),
          128,
          255,
          0,
          GetUnitX(gv_arQ[lv_bzD]),
          GetUnitY(gv_arQ[lv_bzD]),
          0.029,
          0.0,
          3,
          10
        );
      }
      SetUnitState(
        gv_arS[lv_bzD],
        UNIT_STATE_MANA,
        GetUnitState(gv_arS[lv_bzD], UNIT_STATE_MANA) - gv_arR[lv_bzD]
      );
    }
  }
  KillUnit(gv_arQ[lv_bzD]);
  return true;
}
function f_bzE() {
  var lv_bzF = gv_axZ;
  var lv_bzG = gv_axP;
  gv_aya = false;
  return true;
}
function f_bzH() {
  var lv_bzI = gv_axZ;
  var lv_bzJ = f_aIn();
  var lv_bzK = f_aFz();
  var lv_bzL = f_aIL();
  var lv_bzM = GetUnitAbilityLevel(gv_aru[lv_bzI], "A04V");
  gv_arm[lv_bzK] = f_aIV(
    GetOwningPlayer(gv_art[lv_bzI]),
    GetUnitX(gv_art[lv_bzI]),
    GetUnitY(gv_art[lv_bzI]),
    0.0
  );
  f_aJc(gv_arm[lv_bzK], "A05P", lv_bzM + R2I(f_ays(gv_aru[lv_bzI]) / 2));
  IssuePointOrderById(
    gv_arm[lv_bzK],
    852473,
    GetUnitX(gv_art[lv_bzI]),
    GetUnitY(gv_art[lv_bzI])
  );
  gv_ach = GetUnitX(gv_art[lv_bzI]);
  gv_aci = GetUnitY(gv_art[lv_bzI]);
  gv_acj = 300;
  gv_acg = GetOwningPlayer(gv_aru[lv_bzI]);
  GroupEnumUnitsInRange(lv_bzJ, gv_ach, gv_aci, 400, Condition(f_aLM));
  gv_alw =
    (gv_ald[1209 + lv_bzM] +
      gv_ald[GetPlayerId(GetOwningPlayer(gv_aru[lv_bzI]))] +
      ((3 + lv_bzM) / 3) * GetHeroStr(gv_aru[lv_bzI], true)) *
    f_azm(gv_aru[lv_bzI]);
  ForGroup(lv_bzJ, f_aYB);
  KillUnit(gv_art[lv_bzI]);
  SaveInteger(gv_abL, 0, GetHandleId(lv_bzL), lv_bzK);
  TimerStart(lv_bzL, 11, false, f_aYo);
  f_aIo(lv_bzJ);
  lv_bzJ = null;
  lv_bzL = null;
  return true;
}
function f_bzN() {
  var lv_bzO = gv_axZ;
  var lv_bzP = gv_axP;
  gv_arc[lv_bzO] = gv_arc.getInt(lv_bzO) + 1;
  if (gv_arc.getInt(lv_bzO) > 4) {
    gv_arc[lv_bzO] = 0;
    DestroyEffect(
      AddSpecialEffect(
        "Objects\\Spawnmodels\\Undead\\ImpaleTargetDust\\ImpaleTargetDust.mdl",
        GetUnitX(gv_arb[lv_bzO]),
        GetUnitY(gv_arb[lv_bzO])
      )
    );
  }
  gv_ara[lv_bzO] = (gv_ara[lv_bzO] / 0.025 + 25) * 1 * 0.025;
  f_aXR(lv_bzO, GetUnitX(gv_ard[lv_bzO]), GetUnitY(gv_ard[lv_bzO]));
  SetUnitFacing(gv_arb[lv_bzO], bj_RADTODEG * lv_bzP);
  if (
    GetWidgetLife(gv_arb[lv_bzO]) < 0.405 ||
    GetWidgetLife(gv_ard[lv_bzO]) < 0.405 ||
    IsUnitInRange(gv_arb[lv_bzO], gv_ard[lv_bzO], 125) ||
    GetUnitCurrentOrder(gv_arb[lv_bzO]) != 852487
  ) {
    gv_aya = true;
    return true;
  }
  gv_aya = false;
  return true;
}
function f_bzQ() {
  var lv_bzR = gv_axZ;
  var lv_bzS;
  if (
    GetUnitCurrentOrder(gv_arb[lv_bzR]) == 852487 &&
    GetWidgetLife(gv_ard[lv_bzR]) > 0.405
  ) {
    lv_bzS = f_aIV(
      GetOwningPlayer(gv_arb[lv_bzR]),
      GetUnitX(gv_arb[lv_bzR]),
      GetUnitY(gv_arb[lv_bzR]),
      2
    );
    if (GetRandomReal(0, 100) > 20 / f_azm(gv_arb[lv_bzR])) {
      UnitDamageTarget(
        gv_arb[lv_bzR],
        gv_ard[lv_bzR],
        gv_are[lv_bzR],
        false,
        false,
        ATTACK_TYPE_HERO,
        DAMAGE_TYPE_NORMAL,
        null
      );
      f_aJc(lv_bzS, "A04S", 0);
      IssueTargetOrderById(lv_bzS, 852095, gv_ard[lv_bzR]);
      f_aLR(
        null,
        "Hit!",
        255,
        0,
        0,
        GetUnitX(gv_arb[lv_bzR]),
        GetUnitY(gv_arb[lv_bzR]),
        0.033,
        0.0,
        3,
        20
      );
    } else {
      f_aLR(
        null,
        "Miss!",
        255,
        0,
        0,
        GetUnitX(gv_arb[lv_bzR]),
        GetUnitY(gv_arb[lv_bzR]),
        0.033,
        0.0,
        3,
        20
      );
    }
  }
  IssueImmediateOrderById(gv_arb[lv_bzR], 851972);
  SetUnitPosition(
    gv_arb[lv_bzR],
    GetUnitX(gv_arb[lv_bzR]),
    GetUnitY(gv_arb[lv_bzR])
  );
  lv_bzS = null;
  return true;
}
function f_bzT() {
  var lv_bzU = gv_axZ;
  var lv_bzV = gv_axP;
  gv_acg = GetOwningPlayer(gv_aqS[lv_bzU]);
  gv_ach = GetUnitX(gv_aqS[lv_bzU]);
  gv_aci = GetUnitY(gv_aqS[lv_bzU]);
  gv_acj = 50;
  GroupClear(gv_abu);
  GroupEnumUnitsInRange(gv_abu, gv_ach, gv_aci, 150, Condition(f_aLM));
  do {
    gv_alv = FirstOfGroup(gv_abu);
    if (gv_alv == null) {
      break;
    }
    if (!IsUnitInGroup(gv_alv, gv_alm[gv_aqU.getInt(lv_bzU)])) {
      SetUnitPosition(gv_aqT[lv_bzU], GetUnitX(gv_alv), GetUnitY(gv_alv));
      UnitDamageTarget(
        gv_aqT[lv_bzU],
        gv_alv,
        gv_ald[44 + gv_aqU.getInt(lv_bzU)],
        false,
        false,
        ATTACK_TYPE_NORMAL,
        DAMAGE_TYPE_UNIVERSAL,
        null
      );
      IssueTargetOrderById(gv_aqT[lv_bzU], 852075, gv_alv);
      GroupAddUnit(gv_alm[gv_aqU.getInt(lv_bzU)], gv_alv);
    }
    GroupRemoveUnit(gv_abu, gv_alv);
  } while (true);
  f_aIl(gv_abu);
  gv_aya = false;
  return true;
}
function f_bzW() {
  var lv_bzX = gv_axZ;
  var lv_bzY;
  if (GetUnitUserData(gv_aqS[lv_bzX]) > 21) {
    lv_bzY = f_aIL();
    SaveInteger(gv_abL, 0, GetHandleId(lv_bzY), gv_aqU.getInt(lv_bzX));
    TimerStart(lv_bzY, 1, false, f_aXn);
  }
  f_aIP(gv_aqT[lv_bzX]);
  KillUnit(gv_aqS[lv_bzX]);
  lv_bzY = null;
  return true;
}
function f_bzZ() {
  var lv_bAa = gv_axZ;
  AddUnitAnimationProperties(gv_aqK[lv_bAa], "Defend", false);
  UnitRemoveAbility(gv_aqK[lv_bAa], "A04O");
  gv_alR = true;
  gv_alP = gv_aqL[lv_bAa];
  ForGroup(gv_aqL[lv_bAa], f_aWJ);
  gv_alR = false;
  f_aIl(gv_aqL[lv_bAa]);
  f_aIo(gv_aqL[lv_bAa]);
  return true;
}
function f_bAb() {
  var lv_bAc = gv_axZ;
  var lv_bAd = gv_axP;
  gv_aqs[lv_bAc] = gv_aqs.getInt(lv_bAc) + 1;
  if (gv_aqs.getInt(lv_bAc) > 4) {
    gv_aqs[lv_bAc] = 0;
    DestroyEffect(
      AddSpecialEffect(
        "Objects\\Spawnmodels\\Undead\\ImpaleTargetDust\\ImpaleTargetDust.mdl",
        GetUnitX(gv_aqr[lv_bAc]),
        GetUnitY(gv_aqr[lv_bAc])
      )
    );
  }
  gv_aqq[lv_bAc] = (gv_aqq[lv_bAc] / 0.025 + 10) * 1 * 0.025;
  f_aVU(lv_bAc, GetUnitX(gv_aqt[lv_bAc]), GetUnitY(gv_aqt[lv_bAc]));
  SetUnitFacing(gv_aqr[lv_bAc], bj_RADTODEG * lv_bAd);
  if (
    GetWidgetLife(gv_aqr[lv_bAc]) < 0.406 ||
    GetWidgetLife(gv_aqt[lv_bAc]) < 0.406 ||
    IsUnitInRange(gv_aqr[lv_bAc], gv_aqt[lv_bAc], 125) ||
    GetUnitCurrentOrder(gv_aqr[lv_bAc]) != 852487
  ) {
    gv_aya = true;
    return true;
  }
  gv_aya = false;
  return true;
}
function f_bAe() {
  var lv_bAf = gv_axZ;
  var lv_bAg;
  var lv_bAh;
  var lv_bAi;
  if (
    GetUnitCurrentOrder(gv_aqr[lv_bAf]) == 852487 &&
    GetWidgetLife(gv_aqt[lv_bAf]) > 0.405
  ) {
    gv_acg = GetOwningPlayer(gv_aqr[lv_bAf]);
    gv_ach = GetUnitX(gv_aqr[lv_bAf]);
    gv_aci = GetUnitY(gv_aqr[lv_bAf]);
    gv_acj =
      (GetUnitAbilityLevel(gv_aqr[lv_bAf], "A03T") * 25 + 175) *
      f_azm(gv_aqr[lv_bAf]);
    lv_bAg = f_aIV(gv_acg, gv_ach, gv_aci, 2);
    f_aJc(lv_bAg, "A04I", GetUnitAbilityLevel(gv_aqr[lv_bAf], "A03T"));
    lv_bAh = f_aIn();
    GroupEnumUnitsInRange(
      lv_bAh,
      GetUnitX(gv_aqr[lv_bAf]),
      GetUnitY(gv_aqr[lv_bAf]),
      gv_acj,
      Condition(f_aLM)
    );
    do {
      lv_bAi = FirstOfGroup(lv_bAh);
      if (lv_bAi == null) {
        break;
      }
      SetUnitPosition(lv_bAg, GetUnitX(lv_bAi), GetUnitY(lv_bAi));
      IssueTargetOrderById(lv_bAg, 852095, lv_bAi);
      DestroyEffect(
        AddSpecialEffectTarget(
          "Abilities\\Spells\\Other\\Stampede\\StampedeMissileDeath.mdl",
          lv_bAi,
          "chest"
        )
      );
      UnitDamageTarget(
        lv_bAg,
        lv_bAi,
        gv_aqu[lv_bAf],
        false,
        false,
        ATTACK_TYPE_HERO,
        DAMAGE_TYPE_NORMAL,
        null
      );
      GroupRemoveUnit(lv_bAh, lv_bAi);
    } while (true);
    f_aIo(lv_bAh);
  }
  IssueImmediateOrderById(gv_aqr[lv_bAf], 851972);
  SetUnitPosition(
    gv_aqr[lv_bAf],
    GetUnitX(gv_aqr[lv_bAf]),
    GetUnitY(gv_aqr[lv_bAf])
  );
  lv_bAg = null;
  lv_bAh = null;
  lv_bAi = null;
  return true;
}
function f_bAj() {
  var lv_bAk = gv_axZ;
  var lv_bAl = f_aIV(
    GetOwningPlayer(gv_aqi[lv_bAk]),
    GetUnitX(gv_aqi[lv_bAk]),
    GetUnitY(gv_aqi[lv_bAk]),
    2
  );
  var lv_bAm = f_aIn();
  if (gv_aqj[lv_bAk] > 0.0) {
    gv_aqk[lv_bAk] = gv_aqk[lv_bAk] - gv_aqj[lv_bAk];
  }
  DestroyEffect(
    AddSpecialEffect(
      "Abilities\\Spells\\Orc\\WarStomp\\WarStompCaster.mdl",
      GetUnitX(gv_aqi[lv_bAk]),
      GetUnitY(gv_aqi[lv_bAk])
    )
  );
  gv_ach = GetUnitX(gv_aqi[lv_bAk]);
  gv_aci = GetUnitY(gv_aqi[lv_bAk]);
  gv_acj = 450;
  gv_acg = GetOwningPlayer(gv_aqi[lv_bAk]);
  GroupEnumUnitsInRange(lv_bAm, gv_ach, gv_aci, 550, Condition(f_aLM));
  do {
    gv_alv = FirstOfGroup(lv_bAm);
    if (gv_alv == null) {
      break;
    }
    UnitDamageTarget(
      lv_bAl,
      gv_alv,
      gv_aqk[lv_bAk],
      false,
      false,
      ATTACK_TYPE_HERO,
      DAMAGE_TYPE_NORMAL,
      null
    );
    GroupRemoveUnit(lv_bAm, gv_alv);
  } while (true);
  f_aIo(lv_bAm);
  f_aLp(gv_aqh.getInt(lv_bAk));
  RemoveSavedInteger(gv_abH, gv_alK, GetHandleId(gv_aqi[lv_bAk]));
  GroupRemoveUnit(gv_alN, gv_aqi[lv_bAk]);
  lv_bAl = null;
  lv_bAm = null;
  return true;
}
function f_bAn() {
  var lv_bAo = gv_axZ;
  var lv_bAp = gv_axP;
  f_aUU(lv_bAo, GetUnitX(gv_aqc[lv_bAo]), GetUnitY(gv_aqc[lv_bAo]));
  SetUnitFacing(gv_aqb[lv_bAo], bj_RADTODEG * lv_bAp);
  gv_aya = false;
  return true;
}
function f_bAq() {
  var lv_bAr = gv_axZ;
  var lv_bAs = f_aIV(
    GetOwningPlayer(gv_aqb[lv_bAr]),
    GetUnitX(gv_aqc[lv_bAr]),
    GetUnitY(gv_aqc[lv_bAr]),
    2
  );
  var lv_bAt = f_aIn();
  var lv_bAu;
  f_aJc(lv_bAs, "A077", 0);
  if (GetWidgetLife(gv_aqc[lv_bAr]) > 0.405) {
    IssueTargetOrderById(lv_bAs, 852095, gv_aqc[lv_bAr]);
  }
  gv_ach = GetUnitX(gv_aqb[lv_bAr]);
  gv_aci = GetUnitY(gv_aqb[lv_bAr]);
  gv_acj = 200 * f_azo(lv_bAs);
  gv_acg = GetOwningPlayer(gv_aqb[lv_bAr]);
  GroupEnumUnitsInRange(
    lv_bAt,
    gv_ach,
    gv_aci,
    250 * f_azo(lv_bAs),
    Condition(f_aLM)
  );
  do {
    lv_bAu = FirstOfGroup(lv_bAt);
    if (lv_bAu == null) {
      break;
    }
    SetUnitPosition(lv_bAs, GetUnitX(lv_bAu), GetUnitY(lv_bAu));
    UnitDamageTarget(
      lv_bAs,
      lv_bAu,
      gv_aqd[lv_bAr],
      false,
      false,
      ATTACK_TYPE_NORMAL,
      DAMAGE_TYPE_UNIVERSAL,
      null
    );
    GroupRemoveUnit(lv_bAt, lv_bAu);
  } while (true);
  f_aIo(lv_bAt);
  KillUnit(gv_aqb[lv_bAr]);
  lv_bAu = null;
  lv_bAt = null;
  return true;
}
function f_bAv() {
  var lv_bAw = gv_axZ;
  if (gv_aoM[lv_bAw] != null) {
    DestroyTextTag(gv_aoM[lv_bAw]);
    gv_aoM[lv_bAw] = null;
  }
  if (gv_aoV[lv_bAw]) {
    f_aLc(lv_bAw);
    gv_aoW[lv_bAw] = null;
  }
  return true;
}
function f_bAx() {
  var lv_bAy = gv_axZ;
  f_aLp(gv_apg.getInt(lv_bAy));
  return true;
}
function f_bAz() {
  var lv_bAA = gv_axZ;
  var lv_bAB = gv_axP;
  gv_apv[lv_bAA] = gv_apv.getInt(lv_bAA) + 1;
  if (gv_apv.getInt(lv_bAA) > 5) {
    DestroyEffect(
      AddSpecialEffect(
        "Objects\\Spawnmodels\\Undead\\ImpaleTargetDust\\ImpaleTargetDust.mdl",
        GetUnitX(gv_apu[lv_bAA]),
        GetUnitY(gv_apu[lv_bAA])
      )
    );
    gv_apv[lv_bAA] = 0;
  }
  SetUnitPosition(
    gv_apu[lv_bAA],
    GetUnitX(gv_apu[lv_bAA]),
    GetUnitY(gv_apu[lv_bAA])
  );
  gv_apt[lv_bAA] = (gv_apt[lv_bAA] / 0.025 - 10) * 1 * 0.025;
  if (GetWidgetLife(gv_apu[lv_bAA]) < 0.406 || gv_apt[lv_bAA] / 0.025 < 10) {
    gv_aya = true;
    return true;
  }
  gv_aya = false;
  return true;
}
function f_bAC() {
  gv_ayb = f_aMU(gv_axT, gv_axP, gv_axQ, gv_axR, gv_axS);
  return true;
}
function f_bAD() {
  var lv_bAE = gv_axZ;
  GroupClear(gv_abu);
  GroupEnumUnitsInRange(
    gv_abu,
    GetUnitX(gv_apC[lv_bAE]),
    GetUnitY(gv_apC[lv_bAE]),
    80,
    Condition(f_aNQ)
  );
  bj_randomSubGroupGroup = gv_avN[lv_bAE];
  ForGroup(gv_abu, f_bqP);
  f_aIl(gv_abu);
  gv_alv = gv_apC[lv_bAE];
  ForGroup(gv_avN[lv_bAE], f_bqQ);
  return true;
}
function f_bAF() {
  var lv_bAG = gv_axZ;
  KillUnit(gv_apC[lv_bAG]);
  ForGroup(gv_avN[lv_bAG], f_bqR);
  f_aIo(gv_avN[lv_bAG]);
  f_aIl(gv_avN[lv_bAG]);
  gv_axZ = lv_bAG;
  return true;
}
function f_bAH() {
  var lv_bAI = gv_axZ;
  gv_apF[lv_bAI] = gv_apF[lv_bAI] - gv_apM[lv_bAI];
  if (gv_apF[lv_bAI] < 3 || GetWidgetLife(gv_apC[lv_bAI]) < 0.406) {
    gv_apK[lv_bAI] = true;
  }
  IssueImmediateOrderById(gv_apC[lv_bAI], 851972);
  gv_apO[lv_bAI] = gv_apO.getInt(lv_bAI) + 1;
  if (gv_apO.getInt(lv_bAI) > 5) {
    gv_apO[lv_bAI] = 0;
    f_aLz(
      AddSpecialEffect(
        gv_apN[lv_bAI],
        GetUnitX(gv_apC[lv_bAI]),
        GetUnitY(gv_apC[lv_bAI])
      ),
      0.1
    );
  }
  return true;
}
function f_bAJ() {
  var lv_bAK = gv_axZ;
  bj_ghoul[26] = gv_apC[lv_bAK];
  bj_randomSubGroupGroup = gv_avv[lv_bAK];
  GroupClear(gv_abu);
  GroupEnumUnitsInRange(
    gv_abu,
    GetUnitX(gv_apC[lv_bAK]),
    GetUnitY(gv_apC[lv_bAK]),
    300,
    Condition(f_biU)
  );
  do {
    gv_alv = FirstOfGroup(gv_abu);
    if (gv_alv == null) {
      break;
    }
    UnitDamageTarget(
      gv_apC[lv_bAK],
      gv_alv,
      gv_avw[lv_bAK],
      false,
      false,
      ATTACK_TYPE_HERO,
      DAMAGE_TYPE_NORMAL,
      null
    );
    DestroyEffect(
      AddSpecialEffectTarget(
        "Abilities\\Spells\\Other\\Stampede\\StampedeMissileDeath.mdl",
        gv_alv,
        "chest"
      )
    );
    GroupAddUnit(gv_avv[lv_bAK], gv_alv);
    GroupRemoveUnit(gv_abu, gv_alv);
  } while (true);
  f_aIl(gv_abu);
  return true;
}
function f_bAL() {
  var lv_bAM = gv_axZ;
  SetUnitExploded(gv_apC[lv_bAM], true);
  KillUnit(gv_apC[lv_bAM]);
  f_aIo(gv_avv[lv_bAM]);
  gv_axZ = lv_bAM;
  return true;
}
function f_bAN() {
  var lv_bAO = gv_axZ;
  gv_apD[lv_bAO] = GetUnitX(gv_avx[lv_bAO]);
  gv_apE[lv_bAO] = GetUnitY(gv_avx[lv_bAO]);
  if (GetWidgetLife(gv_avx[lv_bAO]) < 0.406) {
    gv_apK[lv_bAO] = true;
  }
  return true;
}
function f_bAP() {
  var lv_bAQ = gv_axZ;
  if (GetWidgetLife(gv_avx[lv_bAQ]) > 0.405) {
    SetUnitPosition(gv_amx, GetUnitX(gv_avx[lv_bAQ]), GetUnitY(gv_avx[lv_bAQ]));
    SetUnitOwner(gv_amx, GetOwningPlayer(gv_apC[lv_bAQ]), false);
    IssueTargetOrderById(gv_amx, 852226, gv_avx[lv_bAQ]);
  }
  KillUnit(gv_apC[lv_bAQ]);
  gv_axZ = lv_bAQ;
  return true;
}
function f_bAR() {
  var lv_bAS = gv_axZ;
  gv_avE[lv_bAS] = gv_avE.getInt(lv_bAS) + 1;
  if (gv_avE.getInt(lv_bAS) > 4) {
    gv_avE[lv_bAS] = 0;
    f_aLz(
      AddSpecialEffect(
        "Abilities\\Spells\\NightElf\\EntanglingRoots\\EntanglingRootsTarget.mdl",
        GetUnitX(gv_apC[lv_bAS]),
        GetUnitY(gv_apC[lv_bAS])
      ),
      0.1
    );
    GroupClear(gv_abu);
    GroupEnumUnitsInRange(
      gv_abu,
      GetUnitX(gv_apC[lv_bAS]),
      GetUnitY(gv_apC[lv_bAS]),
      150,
      Condition(f_aNQ)
    );
    do {
      gv_alv = FirstOfGroup(gv_abu);
      if (gv_alv == null) {
        break;
      }
      if (GetUnitAbilityLevel(gv_alv, "BEer") < 1) {
        SetUnitPosition(gv_aoa, GetUnitX(gv_alv), GetUnitY(gv_alv));
        IssueTargetOrderById(gv_aoa, 852171, gv_alv);
      }
      GroupRemoveUnit(gv_abu, gv_alv);
    } while (true);
    f_aIl(gv_abu);
  }
  return true;
}
function f_bAT() {
  var lv_bAU = gv_axZ;
  KillUnit(gv_apC[lv_bAU]);
  gv_axZ = lv_bAU;
  return true;
}
function f_byG() {
  gv_axN[1] = CreateTrigger();
  TriggerAddAction(gv_axN[1], f_byI);
  TriggerAddCondition(gv_axN[1], Condition(f_byI));
  gv_axO[1] = CreateTrigger();
  TriggerAddAction(gv_axO[1], f_byJ);
  TriggerAddCondition(gv_axO[1], Condition(f_byJ));
  gv_axM = CreateTrigger();
  TriggerAddCondition(gv_axM, Condition(f_byK));
  gv_axL = CreateTrigger();
  TriggerAddCondition(gv_axL, Condition(f_byM));
  gv_axi[2] = CreateTrigger();
  gv_axi[3] = gv_axi[2];
  gv_axi[4] = gv_axi[2];
  gv_axi[5] = gv_axi[2];
  TriggerAddCondition(gv_axi[2], Condition(f_byO));
  gv_axK = CreateTrigger();
  TriggerAddCondition(gv_axK, Condition(f_byQ));
  gv_axI = CreateTrigger();
  TriggerAddCondition(gv_axI, Condition(f_byS));
  gv_axJ = CreateTrigger();
  TriggerAddCondition(gv_axJ, Condition(f_byV));
  gv_axG = CreateTrigger();
  TriggerAddCondition(gv_axG, Condition(f_byZ));
  gv_axH = CreateTrigger();
  TriggerAddCondition(gv_axH, Condition(f_bzc));
  gv_axE = CreateTrigger();
  TriggerAddCondition(gv_axE, Condition(f_bzh));
  gv_axF = CreateTrigger();
  TriggerAddCondition(gv_axF, Condition(f_bzm));
  gv_axD = CreateTrigger();
  TriggerAddCondition(gv_axD, Condition(f_bzo));
  gv_axB = CreateTrigger();
  TriggerAddCondition(gv_axB, Condition(f_bzs));
  gv_axC = CreateTrigger();
  TriggerAddCondition(gv_axC, Condition(f_bzx));
  gv_axz = CreateTrigger();
  TriggerAddCondition(gv_axz, Condition(f_bzz));
  gv_axA = CreateTrigger();
  TriggerAddCondition(gv_axA, Condition(f_bzC));
  gv_axx = CreateTrigger();
  TriggerAddCondition(gv_axx, Condition(f_bzE));
  gv_axy = CreateTrigger();
  TriggerAddCondition(gv_axy, Condition(f_bzH));
  gv_axv = CreateTrigger();
  TriggerAddCondition(gv_axv, Condition(f_bzN));
  gv_axw = CreateTrigger();
  TriggerAddCondition(gv_axw, Condition(f_bzQ));
  gv_axt = CreateTrigger();
  TriggerAddCondition(gv_axt, Condition(f_bzT));
  gv_axu = CreateTrigger();
  TriggerAddCondition(gv_axu, Condition(f_bzW));
  gv_axs = CreateTrigger();
  TriggerAddCondition(gv_axs, Condition(f_bzZ));
  gv_axq = CreateTrigger();
  TriggerAddCondition(gv_axq, Condition(f_bAb));
  gv_axr = CreateTrigger();
  TriggerAddCondition(gv_axr, Condition(f_bAe));
  gv_axp = CreateTrigger();
  TriggerAddCondition(gv_axp, Condition(f_bAj));
  gv_axn = CreateTrigger();
  TriggerAddCondition(gv_axn, Condition(f_bAn));
  gv_axo = CreateTrigger();
  TriggerAddCondition(gv_axo, Condition(f_bAq));
  gv_axj = CreateTrigger();
  TriggerAddCondition(gv_axj, Condition(f_bAv));
  gv_axk = CreateTrigger();
  TriggerAddCondition(gv_axk, Condition(f_bAx));
  gv_apB[13] = null;
  gv_axl = CreateTrigger();
  TriggerAddCondition(gv_axl, Condition(f_bAz));
  gv_axm = CreateTrigger();
  TriggerAddCondition(gv_axm, Condition(f_bAC));
  gv_apA[13] = null;
  gv_apA[14] = null;
  gv_apB[66] = CreateTrigger();
  TriggerAddCondition(gv_apB[66], Condition(f_bAD));
  TriggerAddAction(gv_apB[66], f_bAD);
  gv_apA[66] = CreateTrigger();
  TriggerAddCondition(gv_apA[66], Condition(f_bAF));
  gv_apB[14] = CreateTrigger();
  TriggerAddCondition(gv_apB[14], Condition(f_bAH));
  TriggerAddAction(gv_apB[14], f_bAH);
  gv_apB[61] = CreateTrigger();
  TriggerAddCondition(gv_apB[61], Condition(f_bAJ));
  TriggerAddAction(gv_apB[61], f_bAJ);
  gv_apA[61] = CreateTrigger();
  TriggerAddCondition(gv_apA[61], Condition(f_bAL));
  gv_apB[62] = CreateTrigger();
  TriggerAddCondition(gv_apB[62], Condition(f_bAN));
  TriggerAddAction(gv_apB[62], f_bAN);
  gv_apA[62] = CreateTrigger();
  TriggerAddCondition(gv_apA[62], Condition(f_bAP));
  gv_apB[64] = CreateTrigger();
  TriggerAddCondition(gv_apB[64], Condition(f_bAR));
  TriggerAddAction(gv_apB[64], f_bAR);
  gv_apA[64] = CreateTrigger();
  TriggerAddCondition(gv_apA[64], Condition(f_bAT));
  ExecuteFunc("f_aIJ");
  ExecuteFunc("f_aNf");
}
