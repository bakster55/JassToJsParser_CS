var gv_aaa;
var gv_aab;
var gv_aac;
var gv_aad = null;
var gv_aae = 0;
var gv_aaf = 0;
var gv_aag = 0;
var gv_aah = 0;
var gv_aai = 0;
var gv_aaj = 0;
var gv_aak = 1;
var gv_aal = 1;
var gv_aam = [];
var gv_aan = [];
var gv_aao = [];
var gv_aap = [];
var gv_aaq = 851972;
var gv_aar = 851990;
var gv_aas = 851983;
var gv_aat = [];
var gv_aau = [];
var gv_aav = [];
var gv_aaw = [];
var gv_aax = [];
var gv_aay = [];
var gv_aaz = [];
var gv_aaA = [];
var gv_aaB = [];
var gv_aaC = [];
var gv_aaD = [];
var gv_aaE = [];
var gv_aaF = [];
var gv_aaG = [];
var gv_aaH = [];
var gv_aaI = [];
var gv_aaJ = [];
var gv_aaK = [];
var gv_aaL = [];
var gv_aaM = null;
var gv_aaN = null;
var gv_aaO = null;
var gv_aaP = [];
var gv_aaQ;
var gv_aaR = CreateGroup();
var gv_aaS = [];
var gv_aaT = [];
var gv_aaU = [];
var gv_aaV = [];
var gv_aaW;
var gv_aaX;
var gv_aaY;
var gv_aaZ;
var gv_aba;
var gv_abb;
var gv_abc = false;
var gv_abd = null;
var gv_abe = null;
var gv_abf = null;
var gv_abg = null;
var gv_abh = null;
var gv_abi = null;
var gv_abj = null;
var gv_abk;
var gv_abl = 0;
var gv_abm = 1;
var gv_abn = 2;
var gv_abo = 3;
var gv_abp = 4;
var gv_abq = 5;
var gv_abr = 6;
var gv_abs = 13;
var gv_abt = true;
var gv_abu = "Ofar";
var gv_abv = [];
var gv_abw = [];
var gv_abx;
var gv_aby;
var gv_abz = 0.12;
var gv_abA = [];
var gv_abB = [];
var gv_abC = [];
var gv_abD = [];
var gv_abE = [];
var gv_abF = CreateGroup();
var gv_abG = false;
var gv_abH = null;
var gv_abI = 1048576;
var gv_abJ = [];
var gv_abK = 0;
var gv_abL = 16777216;
var gv_abM = 2147483648;
var gv_abN = [];
var gv_abO = 0;
var gv_abP = null;
var gv_abQ = null;
var gv_abR;
var gv_abS;
var gv_abT;
var gv_abU = null;
var gv_abV = Player(PLAYER_NEUTRAL_PASSIVE);
var gv_abW = 0.0;
var gv_abX = 0.0;
var gv_abY;
var gv_abZ = [];
var gv_aca = 0;
var gv_acb = 679645218;
var gv_acc;
var gv_acd = 0;
var gv_ace;
var gv_acf = [];
var gv_acg;
var gv_ach = [];
var gv_aci;
var gv_acj;
var gv_ack;
var gv_acl;
var gv_acm;
var gv_acn = -gv_abL;
var gv_aco = 1 / 64;
var gv_acp = -1;
var gv_acq;
var gv_acr = [];
var gv_acs = 0;
var gv_act = CreateTimer();
var gv_acu = null;
var gv_acv = CreateSoundFromLabel(
  "InterfaceError",
  false,
  false,
  false,
  10,
  10
);
var gv_acw = "hpea";
var gv_acx;
var gv_acy;
var gv_acz;
var gv_acA;
var gv_acB;
var gv_acC = CreateTimer();
var gv_acD = 0;
var gv_acE;
var gv_acF;
var gv_acG;
var gv_acH;
var gv_acI = -1;
var gv_acJ = [];
var gv_acK;
var gv_acL;
var gv_acM;
var gv_acN;
var gv_acO;
var gv_acP = CreateGroup();
var gv_acQ = null;
var gv_acR = [];
var gv_acS = null;
var gv_acT = null;
var gv_acU = null;
var gv_acV = null;
var gv_acW = null;
var gv_acX = null;
var gv_acY = null;
var gv_acZ = null;
var gv_ada = null;
var gv_adb = null;
var gv_adc = null;
var gv_add = null;
var gv_ade = null;
var gv_adf = null;
var gv_adg = null;
var gv_adh = null;
var gv_adi = null;
var gv_adj = null;
var gv_adk = null;
var gv_adl = null;
var gv_adm = null;
var gv_adn = null;
var gv_ado = null;
var gv_adp = null;
var gv_adq = null;
var gv_adr = null;
var gv_ads = null;
var gv_adt = null;
var gv_adu = null;
var gv_adv = null;
var gv_adw = null;
var gv_adx = null;
var gv_ady = null;
var gv_adz = null;
var gv_adA = null;
var gv_adB = null;
var gv_adC = null;
var gv_adD = null;
var gv_adE = null;
var gv_adF = null;
var gv_adG = null;
var gv_adH = null;
var gv_adI = null;
var gv_adJ = null;
var gv_adK = null;
var gv_adL = null;
var gv_adM = null;
var gv_adN = null;
var gv_adO = null;
var gv_adP = null;
var gv_adQ = null;
var gv_adR = null;
var gv_adS = null;
var gv_adT = null;
var gv_adU = null;
var gv_adV = null;
var gv_adW = null;
var gv_adX = null;
var gv_adY = null;
var gv_adZ = null;
var gv_aea = null;
var gv_aeb = null;
var gv_aec = null;
var gv_aed = null;
var gv_aee = null;
var gv_aef = null;
var gv_aeg = null;
var gv_aeh = null;
var gv_aei = null;
var gv_aej = null;
var gv_aek = null;
var gv_ael = null;
var gv_aem = null;
var gv_aen = null;
var gv_aeo = null;
var gv_aep = null;
var gv_aeq = null;
var gv_aer = null;
var gv_aes = null;
var gv_aet = null;
var gv_aeu = null;
var gv_aev = null;
var gv_aew = null;
var gv_aex = null;
var gv_aey = null;
var gv_aez = null;
var gv_aeA = null;
var gv_aeB = null;
var gv_aeC = null;
var gv_aeD = null;
var gv_aeE = null;
var gv_aeF = null;
var gv_aeG = null;
var gv_aeH = null;
var gv_aeI = null;
var gv_aeJ = null;
var gv_aeK = null;
var gv_aeL = null;
var gv_aeM = null;
var gv_aeN = null;
var gv_aeO = null;
var gv_aeP = null;
var gv_aeQ = null;
var gv_aeR = null;
var gv_aeS = null;
var gv_aeT = null;
var gv_aeU = null;
var gv_aeV = null;
var gv_aeW = null;
var gv_aeX = null;
var gv_aeY = null;
var gv_aeZ = null;
var gv_afa = null;
var gv_afb = null;
var gv_afc = null;
var gv_afd = null;
var gv_afe = null;
var gv_aff = null;
var gv_afg = null;
var gv_afh = null;
var gv_afi = null;
var gv_afj = null;
var gv_afk = null;
var gv_afl = null;
var gv_afm = null;
var gv_afn = null;
var gv_afo = null;
var gv_afp = null;
var gv_afq = null;
var gv_afr = null;
var gv_afs = null;
var gv_aft = null;
var gv_afu = null;
var gv_afv = null;
var gv_afw = null;
var gv_afx = null;
var gv_afy = null;
var gv_afz = null;
var gv_afA = null;
var gv_afB = null;
var gv_afC = null;
var gv_afD = null;
var gv_afE = null;
var gv_afF = null;
var gv_afG = null;
var gv_afH = null;
var gv_afI = null;
var gv_afJ = null;
var gv_afK = null;
var gv_afL = null;
var gv_afM = null;
var gv_afN = null;
var gv_afO = null;
var gv_afP = null;
var gv_afQ = null;
var gv_afR = null;
var gv_afS = null;
var gv_afT = null;
var gv_afU = null;
var gv_afV = null;
var gv_afW = null;
var gv_afX = null;
var gv_afY = null;
var gv_afZ = null;
var gv_aga = null;
var gv_agb = null;
var gv_agc = null;
var gv_agd = null;
var gv_age = null;
var gv_agf = null;
var gv_agg = null;
var gv_agh = null;
var gv_agi = null;
var gv_agj = null;
var gv_agk = null;
var gv_agl = null;
var gv_agm = null;
var gv_agn = null;
var gv_ago = null;
var gv_agp = null;
var gv_agq = null;
var gv_agr = null;
var gv_ags = null;
var gv_agt = null;
var gv_agu = null;
var gv_agv = null;
var gv_agw = null;
var gv_agx = null;
var gv_agy = null;
var gv_agz = null;
var gv_agA = null;
var gv_agB = null;
var gv_agC = null;
var gv_agD = null;
var gv_agE = null;
var gv_agF = null;
var gv_agG = null;
var gv_agH = null;
var gv_agI = null;
var gv_agJ = null;
var gv_agK = null;
var gv_agL = null;
var gv_agM = null;
var gv_agN = null;
var gv_agO = null;
var gv_agP = null;
var gv_agQ = null;
var gv_agR = null;
var gv_agS = null;
var gv_agT = null;
var gv_agU = null;
var gv_agV = null;
var gv_agW = null;
var gv_agX = null;
var gv_agY = null;
var gv_agZ = null;
var gv_aha = null;
var gv_ahb = null;
var gv_ahc = null;
var gv_ahd = null;
var gv_ahe = null;
var gv_ahf = null;
var gv_ahg = null;
var gv_ahh = null;
var gv_ahi = null;
var gv_ahj = null;
var gv_ahk = null;
var gv_ahl = null;
var gv_ahm = null;
var gv_ahn = null;
var gv_aho = null;
var gv_ahp = null;
var gv_ahq = null;
var gv_ahr = null;
var gv_ahs = null;
var gv_aht = null;
var gv_ahu = null;
var gv_ahv = null;
var gv_ahw = null;
var gv_ahx = null;
var gv_ahy = null;
var gv_ahz = null;
var gv_ahA = null;
var gv_ahB = null;
var gv_ahC = null;
var gv_ahD = null;
var gv_ahE = null;
var gv_ahF = null;
var gv_ahG = null;
var gv_ahH = null;
var gv_ahI = null;
var gv_ahJ = null;
var gv_ahK = null;
var gv_ahL = null;
var gv_ahM = null;
var gv_ahN = null;
var gv_ahO = null;
var gv_ahP = null;
var gv_ahQ = null;
var gv_ahR = null;
var gv_ahS = null;
var gv_ahT = null;
var gv_ahU = null;
var gv_ahV = null;
var gv_ahW = null;
var gv_ahX = null;
var gv_ahY = null;
var gv_ahZ = null;
var gv_aia = null;
var gv_aib = null;
var gv_aic = null;
var gv_aid = null;
var gv_aie = null;
var gv_aif = null;
var gv_aig = null;
var gv_aih = null;
var gv_aii = null;
var gv_aij = null;
var gv_aik = null;
var gv_ail = null;
var gv_aim = null;
var gv_ain = null;
var gv_aio = null;
var gv_aip = null;
var gv_aiq = null;
var gv_air = null;
var gv_ais = null;
var gv_ait = null;
var gv_aiu = null;
var gv_aiv = null;
var gv_aiw = null;
var gv_aix = null;
var gv_aiy = null;
var gv_aiz = null;
var gv_aiA = null;
var gv_aiB = null;
var gv_aiC = null;
var gv_aiD = null;
var gv_aiE = null;
var gv_aiF = null;
var gv_aiG = null;
var gv_aiH = null;
var gv_aiI = null;
var gv_aiJ = null;
var gv_aiK = null;
var gv_aiL = null;
var gv_aiM = null;
var gv_aiN = null;
var gv_aiO = null;
var gv_aiP = null;
var gv_aiQ = null;
var gv_aiR = null;
var gv_aiS = null;
var gv_aiT = null;
var gv_aiU = null;
var gv_aiV = null;
var gv_aiW = null;
var gv_aiX = null;
var gv_aiY = null;
var gv_aiZ = null;
var gv_aja = null;
var gv_ajb = null;
var gv_ajc = null;
var gv_ajd = null;
var gv_aje = null;
var gv_ajf = null;
var gv_ajg = null;
var gv_ajh = null;
var gv_aji = null;
var gv_ajj = null;
var gv_ajk = null;
var gv_ajl = null;
var gv_ajm = null;
var gv_ajn = null;
var gv_ajo = null;
var gv_ajp = null;
var gv_ajq = null;
var gv_ajr = null;
var gv_ajs = null;
var gv_ajt = null;
var gv_aju = null;
var gv_ajv = null;
var gv_ajw = null;
var gv_ajx = null;
var gv_ajy = null;
var gv_ajz = null;
var gv_ajA = null;
var gv_ajB = null;
var gv_ajC = null;
var gv_ajD = null;
var gv_ajE = null;
var gv_ajF = null;
var gv_ajG = null;
var gv_ajH = null;
var gv_ajI = null;
var gv_ajJ = null;
var gv_ajK = null;
var gv_ajL = null;
var gv_ajM = null;
var gv_ajN = null;
var gv_ajO = null;
var gv_ajP = null;
var gv_ajQ = null;
var gv_ajR = null;
var gv_ajS = null;
var gv_ajT = null;
var gv_ajU = null;
var gv_ajV = null;
var gv_ajW = null;
var gv_ajX = null;
var gv_ajY = null;
var gv_ajZ = null;
var gv_aka = null;
var gv_akb = null;
var gv_akc = null;
var gv_akd = null;
var gv_ake = null;
var gv_akf = null;
var gv_akg = null;
var gv_akh = null;
var gv_aki = null;
var gv_akj = null;
var gv_akk = null;
var gv_akl = null;
var gv_akm = null;
var gv_akn = null;
var gv_ako = null;
var gv_akp = null;
var gv_akq = null;
var gv_akr = null;
var gv_aks = null;
var gv_akt = null;
var gv_aku = null;
var gv_akv = null;
var gv_akw = null;
var gv_akx = null;
var gv_aky = null;
var gv_akz = null;
var gv_akA = null;
var gv_akB = null;
var gv_akC = null;
var gv_akD = null;
var gv_akE = null;
var gv_akF = null;
var gv_akG = null;
var gv_akH = null;
var gv_akI = null;
var gv_akJ = null;
var gv_akK = null;
var gv_akL = null;
var gv_akM = null;
var gv_akN = null;
var gv_akO = null;
var gv_akP = null;
var gv_akQ = null;
var gv_akR = null;
var gv_akS = null;
var gv_akT = null;
var gv_akU = null;
var gv_akV = null;
var gv_akW = null;
var gv_akX = null;
var gv_akY = null;
var gv_akZ = null;
var gv_ala = null;
var gv_alb = null;
var gv_alc = null;
var gv_ald = null;
var gv_ale = null;
var gv_alf = null;
var gv_alg = null;
var gv_alh = null;
var gv_ali = null;
var gv_alj = null;
var gv_alk = null;
var gv_all = null;
var gv_alm = null;
var gv_aln = null;
var gv_alo = null;
var gv_alp = null;
var gv_alq = null;
var gv_alr = null;
var gv_als = null;
var gv_alt = null;
var gv_alu = [];
var gv_alv = [];
var gv_alw = [];
var gv_alx = [];
var gv_aly = [];
var gv_alz = [];
var gv_alA = [];
var gv_alB = [];
var gv_alC = [];
var gv_alD = [];
var gv_alE = CreateGroup();
var gv_alF = CreateGroup();
var gv_alG = CreateGroup();
var gv_alH = CreateForce();
var gv_alI;
var gv_alJ;
var gv_alK = CreateForce();
var gv_alL;
var gv_alM;
var gv_alN;
var gv_alO;
var gv_alP;
var gv_alQ;
var gv_alR;
var gv_alS;
var gv_alT;
var gv_alU;
var gv_alV;
var gv_alW;
var gv_alX;
var gv_alY;
var gv_alZ = null;
var gv_ama = [];
var gv_amb;
var gv_amc;
var gv_amd;
var gv_ame;
var gv_amf;
var gv_amg;
var gv_amh;
var gv_ami;
var gv_amj = CreateGroup();
var gv_amk;
var gv_aml;
var gv_amm;
var gv_amn;
var gv_amo;
var gv_amp;
var gv_amq;
var gv_amr;
var gv_ams;
var gv_amt;
var gv_amu;
var gv_amv = CreateGroup();
var gv_amw = [];
var gv_amx;
var gv_amy;
var gv_amz = "Abilities\\Spells\\Other\\Stampede\\StampedeMissileDeath.mdl";
var gv_amA = "Abilities\\Spells\\Items\\AIma\\AImaTarget.mdl";
var gv_amB = "Abilities\\Spells\\Undead\\DeathCoil\\DeathCoilSpecialArt.mdl";
var gv_amC = "Abilities\\Spells\\Items\\AIma\\AImaTarget.mdl";
var gv_amD = "Abilities\\Weapons\\FrostWyrmMissile\\FrostWyrmMissile.mdl";
var gv_amE =
  "Objects\\Spawnmodels\\Human\\HumanLargeDeathExplode\\HumanLargeDeathExplode.mdl";
var gv_amF;
var gv_amG = "Abilities\\Spells\\Other\\Drain\\DrainCaster.mdl";
var gv_amH = "Abilities\\Spells\\Human\\MarkOfChaos\\MarkOfChaosTarget.mdl";
var gv_amI = "Abilities\\Spells\\Human\\DispelMagic\\DispelMagicTarget.mdl";
var gv_amJ = "Abilities\\Spells\\Human\\Slow\\SlowCaster.mdl";
var gv_amK;
var gv_amL = "Abilities\\Spells\\Other\\Charm\\CharmTarget.mdl";
var gv_amM;
var gv_amN = "Abilities\\Spells\\Orc\\WarStomp\\WarStompCaster.mdl";
var gv_amO;
var gv_amP = null;
var gv_amQ = null;
var gv_amR;
var gv_amS = CreateGroup();
var gv_amT = false;
var gv_amU = 0;
var gv_amV = 0;
var gv_amW = CreateForce();
var gv_amX = 15;
var gv_amY = Player(10);
var gv_amZ = CreateGroup();
var gv_ana = false;
var gv_anb = 0;
var gv_anc = 0;
var gv_and = CreateForce();
var gv_ane = CreateGroup();
var gv_anf = false;
var gv_ang = 0;
var gv_anh = 0;
var gv_ani = CreateForce();
var gv_anj = 15;
var gv_ank = CreateGroup();
var gv_anl = false;
var gv_anm = 0;
var gv_ann = 0;
var gv_ano = CreateForce();
var gv_anp = 15;
var gv_anq = CreateGroup();
var gv_anr = false;
var gv_ans = 0;
var gv_ant = 0;
var gv_anu = CreateForce();
var gv_anv = 10;
var gv_anw = CreateGroup();
var gv_anx = false;
var gv_any = 0;
var gv_anz = 0;
var gv_anA = CreateForce();
var gv_anB = 10;
var gv_anC = CreateGroup();
var gv_anD = false;
var gv_anE = 0;
var gv_anF = 0;
var gv_anG = CreateForce();
var gv_anH = 15;
var gv_anI = CreateGroup();
var gv_anJ = false;
var gv_anK = 0;
var gv_anL = 0;
var gv_anM = CreateForce();
var gv_anN = CreateGroup();
var gv_anO = false;
var gv_anP = 0;
var gv_anQ = 0;
var gv_anR = CreateForce();
var gv_anS = CreateGroup();
var gv_anT = false;
var gv_anU = 0;
var gv_anV = 0;
var gv_anW = CreateForce();
var gv_anX = CreateGroup();
var gv_anY = false;
var gv_anZ = 0;
var gv_aoa = 0;
var gv_aob = CreateForce();
var gv_aoc = 15;
var gv_aod = CreateGroup();
var gv_aoe = false;
var gv_aof = 0;
var gv_aog = 0;
var gv_aoh = CreateForce();
var gv_aoi = false;
var gv_aoj = false;
var gv_aok;
var gv_aol;
var gv_aom;
var gv_aon;
var gv_aoo;
var gv_aop;
var gv_aoq;
var gv_aor;
var gv_aos;
var gv_aot;
var gv_aou;
var gv_aov;
var gv_aow;
var gv_aox;
var gv_aoy;
var gv_aoz = null;
var gv_aoA;
var gv_aoB = [];
var gv_aoC;
var gv_aoD = null;
var gv_aoE;
var gv_aoF = null;
var gv_aoG;
var gv_aoH;
var gv_aoI;
var gv_aoJ;
var gv_aoK;
var gv_aoL;
var gv_aoM;
var gv_aoN;
var gv_aoO;
var gv_aoP;
var gv_aoQ;
var gv_aoR;
var gv_aoS;
var gv_aoT;
var gv_aoU;
var gv_aoV;
var gv_aoW;
var gv_aoX;
var gv_aoY;
var gv_aoZ;
var gv_apa;
var gv_apb;
var gv_apc;
var gv_apd;
var gv_ape = 0;
var gv_apf = 0;
var gv_apg = [];
var gv_aph = 0;
var gv_api = 0;
var gv_apj = [];
var gv_apk = [];
var gv_apl = [];
var gv_apm = [];
var gv_apn = [];
var gv_apo = [];
var gv_app = [];
var gv_apq = [];
var gv_apr = [];
var gv_aps = [];
var gv_apt = [];
var gv_apu = [];
var gv_apv = [];
var gv_apw = [];
var gv_apx = [];
var gv_apy = [];
var gv_apz = [];
var gv_apA = [];
var gv_apB = 0;
var gv_apC = 0;
var gv_apD = [];
var gv_apE = [];
var gv_apF = [];
var gv_apG = [];
var gv_apH = 0;
var gv_apI = 0;
var gv_apJ = [];
var gv_apK = [];
var gv_apL = [];
var gv_apM = 0;
var gv_apN = 0;
var gv_apO = [];
var gv_apP = [];
var gv_apQ = [];
var gv_apR = [];
var gv_apS = [];
var gv_apT = [];
var gv_apU = 0;
var gv_apV = 0;
var gv_apW = [];
var gv_apX = [];
var gv_apY = [];
var gv_apZ = [];
var gv_aqa = [];
var gv_aqb = [];
var gv_aqc = [];
var gv_aqd = [];
var gv_aqe = [];
var gv_aqf = [];
var gv_aqg = [];
var gv_aqh = [];
var gv_aqi = [];
var gv_aqj;
var gv_aqk = [];
var gv_aql = [];
var gv_aqm = [];
var gv_aqn = 0;
var gv_aqo = 0;
var gv_aqp = [];
var gv_aqq = [];
var gv_aqr = [];
var gv_aqs = [];
var gv_aqt = 0;
var gv_aqu = 0;
var gv_aqv = [];
var gv_aqw = [];
var gv_aqx = [];
var gv_aqy = [];
var gv_aqz = [];
var gv_aqA = [];
var gv_aqB = [];
var gv_aqC = 0;
var gv_aqD = 0;
var gv_aqE = [];
var gv_aqF = [];
var gv_aqG = [];
var gv_aqH = [];
var gv_aqI = [];
var gv_aqJ = 0;
var gv_aqK = 0;
var gv_aqL = [];
var gv_aqM = [];
var gv_aqN = [];
var gv_aqO = [];
var gv_aqP = [];
var gv_aqQ = [];
var gv_aqR = [];
var gv_aqS = [];
var gv_aqT = 0;
var gv_aqU = 0;
var gv_aqV = [];
var gv_aqW = [];
var gv_aqX = [];
var gv_aqY = [];
var gv_aqZ = 0;
var gv_ara = 0;
var gv_arb = [];
var gv_arc = [];
var gv_ard = [];
var gv_are = [];
var gv_arf = 0;
var gv_arg = 0;
var gv_arh = [];
var gv_ari = [];
var gv_arj = [];
var gv_ark = 0;
var gv_arl = 0;
var gv_arm = [];
var gv_arn = [];
var gv_aro = [];
var gv_arp = [];
var gv_arq = [];
var gv_arr = [];
var gv_ars = [];
var gv_art = 0;
var gv_aru = 0;
var gv_arv = [];
var gv_arw = [];
var gv_arx = [];
var gv_ary = [];
var gv_arz = [];
var gv_arA = [];
var gv_arB = [];
var gv_arC = [];
var gv_arD = 0;
var gv_arE = 0;
var gv_arF = [];
var gv_arG = [];
var gv_arH = 0;
var gv_arI = 0;
var gv_arJ = [];
var gv_arK = [];
var gv_arL = 0;
var gv_arM = 0;
var gv_arN = [];
var gv_arO = [];
var gv_arP = [];
var gv_arQ = [];
var gv_arR = [];
var gv_arS = [];
var gv_arT = 0;
var gv_arU = 0;
var gv_arV = [];
var gv_arW = [];
var gv_arX = [];
var gv_arY = [];
var gv_arZ = [];
var gv_asa = 0;
var gv_asb = 0;
var gv_asc = [];
var gv_asd = [];
var gv_ase = 0;
var gv_asf = 0;
var gv_asg = [];
var gv_ash = [];
var gv_asi = 0;
var gv_asj = 0;
var gv_ask = [];
var gv_asl = [];
var gv_asm = [];
var gv_asn = [];
var gv_aso = [];
var gv_asp = [];
var gv_asq = [];
var gv_asr = 0;
var gv_ass = 0;
var gv_ast = [];
var gv_asu = [];
var gv_asv = [];
var gv_asw = [];
var gv_asx = 0;
var gv_asy = 0;
var gv_asz = [];
var gv_asA = [];
var gv_asB = [];
var gv_asC = [];
var gv_asD = [];
var gv_asE = 0;
var gv_asF = 0;
var gv_asG = [];
var gv_asH = [];
var gv_asI = [];
var gv_asJ = [];
var gv_asK = [];
var gv_asL = [];
var gv_asM = 0;
var gv_asN = 0;
var gv_asO = [];
var gv_asP = [];
var gv_asQ = [];
var gv_asR = 0;
var gv_asS = 0;
var gv_asT = [];
var gv_asU = [];
var gv_asV = [];
var gv_asW = 0;
var gv_asX = 0;
var gv_asY = [];
var gv_asZ = [];
var gv_ata = [];
var gv_atb = [];
var gv_atc = [];
var gv_atd = [];
var gv_ate = 0;
var gv_atf = 0;
var gv_atg = [];
var gv_ath = [];
var gv_ati = [];
var gv_atj = [];
var gv_atk = 0;
var gv_atl = 0;
var gv_atm = [];
var gv_atn = [];
var gv_ato = [];
var gv_atp = [];
var gv_atq = 0;
var gv_atr = 0;
var gv_ats = [];
var gv_att = [];
var gv_atu = [];
var gv_atv = [];
var gv_atw = [];
var gv_atx = 0;
var gv_aty = 0;
var gv_atz = [];
var gv_atA = [];
var gv_atB = [];
var gv_atC = [];
var gv_atD = 0;
var gv_atE = 0;
var gv_atF = [];
var gv_atG = [];
var gv_atH = [];
var gv_atI = [];
var gv_atJ = 0;
var gv_atK = 0;
var gv_atL = [];
var gv_atM = [];
var gv_atN = [];
var gv_atO = 0;
var gv_atP = 0;
var gv_atQ = [];
var gv_atR = [];
var gv_atS = [];
var gv_atT = [];
var gv_atU = [];
var gv_atV = [];
var gv_atW = [];
var gv_atX = [];
var gv_atY = 0;
var gv_atZ = 0;
var gv_aua = [];
var gv_aub = [];
var gv_auc = [];
var gv_aud = [];
var gv_aue = [];
var gv_auf = [];
var gv_aug = [];
var gv_auh = [];
var gv_aui = [];
var gv_auj = [];
var gv_auk = [];
var gv_aul = 0;
var gv_aum = 0;
var gv_aun = [];
var gv_auo = [];
var gv_aup = [];
var gv_auq = [];
var gv_aur = [];
var gv_aus = 0;
var gv_aut = 0;
var gv_auu = [];
var gv_auv = [];
var gv_auw = [];
var gv_aux = [];
var gv_auy = 0;
var gv_auz = 0;
var gv_auA = [];
var gv_auB = [];
var gv_auC = [];
var gv_auD = [];
var gv_auE = 0;
var gv_auF = 0;
var gv_auG = [];
var gv_auH = [];
var gv_auI = [];
var gv_auJ = [];
var gv_auK = [];
var gv_auL = [];
var gv_auM = 0;
var gv_auN = 0;
var gv_auO = [];
var gv_auP = [];
var gv_auQ = [];
var gv_auR = [];
var gv_auS = [];
var gv_auT = 0;
var gv_auU = 0;
var gv_auV = [];
var gv_auW;
var gv_auX;
var gv_auY = [];
var gv_auZ = [];
var gv_ava = [];
var gv_avb = 0;
var gv_avc = 0;
var gv_avd = [];
var gv_ave = [];
var gv_avf = 0;
var gv_avg = 0;
var gv_avh = [];
var gv_avi = [];
var gv_avj = [];
var gv_avk = [];
var gv_avl = [];
var gv_avm = [];
var gv_avn = 0;
var gv_avo = 0;
var gv_avp = [];
var gv_avq = [];
var gv_avr = [];
var gv_avs = [];
var gv_avt = [];
var gv_avu = [];
var gv_avv = 0;
var gv_avw = 0;
var gv_avx = [];
var gv_avy = [];
var gv_avz = [];
var gv_avA = [];
var gv_avB = 0;
var gv_avC = 0;
var gv_avD = [];
var gv_avE = [];
var gv_avF = [];
var gv_avG = [];
var gv_avH = [];
var gv_avI = [];
var gv_avJ = 0;
var gv_avK = 0;
var gv_avL = [];
var gv_avM = [];
var gv_avN = [];
var gv_avO = [];
var gv_avP = 0;
var gv_avQ = 0;
var gv_avR = [];
var gv_avS = [];
var gv_avT = [];
var gv_avU = [];
var gv_avV = [];
var gv_avW = 0;
var gv_avX = 0;
var gv_avY = [];
var gv_avZ = [];
var gv_awa = [];
var gv_awb = [];
var gv_awc = [];
var gv_awd = 0;
var gv_awe = 0;
var gv_awf = [];
var gv_awg = [];
var gv_awh = [];
var gv_awi = [];
var gv_awj;
var gv_awk = [];
var gv_awl = [];
var gv_awm = 0;
var gv_awn = 0;
var gv_awo = [];
var gv_awp = [];
var gv_awq = [];
var gv_awr = [];
var gv_aws = [];
var gv_awt = 0;
var gv_awu = 0;
var gv_awv = [];
var gv_aww = [];
var gv_awx = [];
var gv_awy = 0;
var gv_awz = 0;
var gv_awA = [];
var gv_awB = [];
var gv_awC = [];
var gv_awD = [];
var gv_awE = [];
var gv_awF = [];
var gv_awG = [];
var gv_awH = [];
var gv_awI = [];
var gv_awJ = [];
var gv_awK = [];
var gv_awL = [];
var gv_awM = [];
var gv_awN = [];
var gv_awO = [];
var gv_awP = [];
var gv_awQ = [];
var gv_awR = [];
var gv_awS = [];
var gv_awT = [];
var gv_awU = [];
var gv_awV = [];
var gv_awW = [];
var gv_awX = [];
var gv_awY = [];
var gv_awZ = [];
var gv_axa = [];
var gv_axb = [];
var gv_axc = [];
var gv_axd = [];
var gv_axe = [];
var gv_axf = [];
var gv_axg = [];
var gv_axh = [];
var gv_axi = [];
var gv_axj = [];
var gv_axk = [];
var gv_axl = [];
var gv_axm = [];
var gv_axn = [];
var gv_axo = [];
var gv_axp = [];
var gv_axq = [];
var gv_axr = [];
var gv_axs = [];
var gv_axt = [];
var gv_axu = [];
var gv_axv = [];
var gv_axw = [];
var gv_axx = [];
var gv_axy = [];
var gv_axz = [];
var gv_axA = [];
var gv_axB = [];
var gv_axC = [];
var gv_axD = [];
var gv_axE = [];
var gv_axF = [];
var gv_axG = [];
var gv_axH;
var gv_axI;
var gv_axJ;
var gv_axK;
var gv_axL;
var gv_axM;
var gv_axN;
var gv_axO;
var gv_axP;
var gv_axQ;
var gv_axR;
var gv_axS;
var gv_axT;
var gv_axU;
var gv_axV;
var gv_axW;
var gv_axX;
var gv_axY;
var gv_axZ;
var gv_aya;
var gv_ayb;
var gv_ayc;
var gv_ayd;
var gv_aye;
var gv_ayf;
var gv_ayg;
var gv_ayh;
var gv_ayi;
var gv_ayj;
var gv_ayk;
var gv_ayl = [];
var gv_aym = [];
var gv_ayn;
var gv_ayo;
var gv_ayp;
var gv_ayq;
var gv_ayr;
var gv_ays;
var gv_ayt;
var gv_ayu;
var gv_ayv;
var gv_ayw;
var gv_ayx;
var gv_ayy;
var gv_ayz;
var gv_ayA = null;
var gv_ayB = 0.0;
var gv_ayC = 0.0;
var gv_ayD = null;
var gv_ayE = null;
var gv_ayF = null;

function f_ayG(lv_ayH) {
  if (
    GetInventoryIndexOfItemTypeBJ(lv_ayH, "sehr") +
      GetInventoryIndexOfItemTypeBJ(lv_ayH, "thle") +
      GetInventoryIndexOfItemTypeBJ(lv_ayH, "kysn") >
    0
  ) {
    return true;
  } else {
    if (
      GetInventoryIndexOfItemTypeBJ(lv_ayH, "sclp") +
        GetInventoryIndexOfItemTypeBJ(lv_ayH, "sorf") +
        GetInventoryIndexOfItemTypeBJ(lv_ayH, "phlt") >
      0
    ) {
      return true;
    } else {
      if (
        GetInventoryIndexOfItemTypeBJ(lv_ayH, "skrt") +
          GetInventoryIndexOfItemTypeBJ(lv_ayH, "glsk") +
          GetInventoryIndexOfItemTypeBJ(lv_ayH, "shwd") >
        0
      ) {
        return true;
      } else {
        return false;
      }
    }
  }
}
function f_ayI(lv_ayJ) {
  if (
    GetInventoryIndexOfItemTypeBJ(lv_ayJ, "I018") +
      GetInventoryIndexOfItemTypeBJ(lv_ayJ, "I017") +
      GetInventoryIndexOfItemTypeBJ(lv_ayJ, "I014") >
    0
  ) {
    return true;
  } else {
    if (
      GetInventoryIndexOfItemTypeBJ(lv_ayJ, "I01A") +
        GetInventoryIndexOfItemTypeBJ(lv_ayJ, "I015") +
        GetInventoryIndexOfItemTypeBJ(lv_ayJ, "I019") >
      0
    ) {
      return true;
    } else {
      if (
        GetInventoryIndexOfItemTypeBJ(lv_ayJ, "I01B") +
          GetInventoryIndexOfItemTypeBJ(lv_ayJ, "I016") >
        0
      ) {
        return true;
      } else {
        return false;
      }
    }
  }
}
function f_ayK(lv_ayL) {
  if (
    GetInventoryIndexOfItemTypeBJ(lv_ayL, "oslo") +
      GetInventoryIndexOfItemTypeBJ(lv_ayL, "rde0") +
      GetInventoryIndexOfItemTypeBJ(lv_ayL, "ram3") >
    0
  ) {
    return true;
  } else {
    if (
      GetInventoryIndexOfItemTypeBJ(lv_ayL, "ccmd") +
        GetInventoryIndexOfItemTypeBJ(lv_ayL, "sor1") +
        GetInventoryIndexOfItemTypeBJ(lv_ayL, "sor5") >
      0
    ) {
      return true;
    } else {
      if (
        GetInventoryIndexOfItemTypeBJ(lv_ayL, "shcw") +
          GetInventoryIndexOfItemTypeBJ(lv_ayL, "tels") +
          GetInventoryIndexOfItemTypeBJ(lv_ayL, "sfog") >
        0
      ) {
        return true;
      } else {
        if (
          GetInventoryIndexOfItemTypeBJ(lv_ayL, "klmm") +
            GetInventoryIndexOfItemTypeBJ(lv_ayL, "mnsf") +
            GetInventoryIndexOfItemTypeBJ(lv_ayL, "ocor") >
          0
        ) {
          return true;
        } else {
          return false;
        }
      }
    }
  }
}
function f_ayM(lv_ayN) {
  if (
    GetInventoryIndexOfItemTypeBJ(lv_ayN, "oven") +
      GetInventoryIndexOfItemTypeBJ(lv_ayN, "rnsp") +
      GetInventoryIndexOfItemTypeBJ(lv_ayN, "rugt") >
    0
  ) {
    return true;
  } else {
    if (
      GetInventoryIndexOfItemTypeBJ(lv_ayN, "rots") +
        GetInventoryIndexOfItemTypeBJ(lv_ayN, "sora") +
        GetInventoryIndexOfItemTypeBJ(lv_ayN, "sor6") >
      0
    ) {
      return true;
    } else {
      if (
        GetInventoryIndexOfItemTypeBJ(lv_ayN, "shtm") +
          GetInventoryIndexOfItemTypeBJ(lv_ayN, "rej4") +
          GetInventoryIndexOfItemTypeBJ(lv_ayN, "flag") >
        0
      ) {
        return true;
      } else {
        if (
          GetInventoryIndexOfItemTypeBJ(lv_ayN, "rej2") +
            GetInventoryIndexOfItemTypeBJ(lv_ayN, "rej1") +
            GetInventoryIndexOfItemTypeBJ(lv_ayN, "ofir") >
          0
        ) {
          return true;
        } else {
          return false;
        }
      }
    }
  }
}
function f_ayO(lv_ayP) {
  if (
    GetInventoryIndexOfItemTypeBJ(lv_ayP, "sprn") +
      GetInventoryIndexOfItemTypeBJ(lv_ayP, "gsou") +
      GetInventoryIndexOfItemTypeBJ(lv_ayP, "stre") >
    0
  ) {
    return true;
  } else {
    if (
      GetInventoryIndexOfItemTypeBJ(lv_ayP, "thdm") +
        GetInventoryIndexOfItemTypeBJ(lv_ayP, "tbar") +
        GetInventoryIndexOfItemTypeBJ(lv_ayP, "tfar") >
      0
    ) {
      return true;
    } else {
      if (
        GetInventoryIndexOfItemTypeBJ(lv_ayP, "tbsm") +
          GetInventoryIndexOfItemTypeBJ(lv_ayP, "spre") +
          GetInventoryIndexOfItemTypeBJ(lv_ayP, "sbok") >
        0
      ) {
        return true;
      } else {
        if (
          GetInventoryIndexOfItemTypeBJ(lv_ayP, "stwa") +
            GetInventoryIndexOfItemTypeBJ(lv_ayP, "tbak") +
            GetInventoryIndexOfItemTypeBJ(lv_ayP, "tlum") >
          0
        ) {
          return true;
        } else {
          return false;
        }
      }
    }
  }
}
function f_ayQ(lv_ayR) {
  var lv_ayS = 0;
  if (
    StringHash(GetPlayerName(GetOwningPlayer(lv_ayR))) == 381224678 ||
    StringHash(GetPlayerName(GetOwningPlayer(lv_ayR))) == 1995650487
  ) {
    lv_ayS = 1;
    if (
      GetInventoryIndexOfItemTypeBJ(lv_ayR, "lgdh") > 0 &&
      GetInventoryIndexOfItemTypeBJ(lv_ayR, "afac") > 0 &&
      GetInventoryIndexOfItemTypeBJ(lv_ayR, "rat9") > 0
    ) {
      lv_ayS = lv_ayS + 1;
    }
    if (
      GetInventoryIndexOfItemTypeBJ(lv_ayR, "mcou") > 0 &&
      GetInventoryIndexOfItemTypeBJ(lv_ayR, "hcun") +
        GetInventoryIndexOfItemTypeBJ(lv_ayR, "rde2") +
        GetInventoryIndexOfItemTypeBJ(lv_ayR, "belv") >
        0
    ) {
      lv_ayS = lv_ayS + 1;
    }
    if (
      GetInventoryIndexOfItemTypeBJ(lv_ayR, "rat9") > 0 &&
      GetInventoryIndexOfItemTypeBJ(lv_ayR, "hcun") +
        GetInventoryIndexOfItemTypeBJ(lv_ayR, "rde2") >
        0
    ) {
      lv_ayS = lv_ayS + 1;
    }
    if (
      GetInventoryIndexOfItemTypeBJ(lv_ayR, "I00B") +
        GetInventoryIndexOfItemTypeBJ(lv_ayR, "I00L") +
        GetInventoryIndexOfItemTypeBJ(lv_ayR, "I00T") >
        0 &&
      GetInventoryIndexOfItemTypeBJ(lv_ayR, "I000") +
        GetInventoryIndexOfItemTypeBJ(lv_ayR, "I001") +
        GetInventoryIndexOfItemTypeBJ(lv_ayR, "I00H") >
        0
    ) {
      lv_ayS = lv_ayS + 1;
    }
    if (
      GetInventoryIndexOfItemTypeBJ(lv_ayR, "I005") +
        GetInventoryIndexOfItemTypeBJ(lv_ayR, "arsh") >
      0
    ) {
      lv_ayS = lv_ayS + 1;
    }
    if (
      GetInventoryIndexOfItemTypeBJ(lv_ayR, "I065") +
        GetInventoryIndexOfItemTypeBJ(lv_ayR, "I062") >
      0
    ) {
      lv_ayS = lv_ayS + 1;
    }
    if (
      GetInventoryIndexOfItemTypeBJ(lv_ayR, "rwiz") +
        GetInventoryIndexOfItemTypeBJ(lv_ayR, "I00F") +
        GetInventoryIndexOfItemTypeBJ(lv_ayR, "I00O") +
        GetInventoryIndexOfItemTypeBJ(lv_ayR, "I00W") >
      0
    ) {
      lv_ayS = lv_ayS + 1;
    }
    if (
      GetInventoryIndexOfItemTypeBJ(lv_ayR, "tgxp") +
        GetInventoryIndexOfItemTypeBJ(lv_ayR, "jpnt") >
      0
    ) {
      lv_ayS = lv_ayS + 2;
    } else {
      if (GetInventoryIndexOfItemTypeBJ(lv_ayR, "tmsc") > 0) {
        lv_ayS = lv_ayS + 1;
      }
    }
    if (
      GetInventoryIndexOfItemTypeBJ(lv_ayR, "bzbe") > 0 &&
      GetUnitTypeId(lv_ayR) == "Edem"
    ) {
      lv_ayS = lv_ayS + 1;
    }
    if (GetInventoryIndexOfItemTypeBJ(lv_ayR, "k3m3") > 0) {
      lv_ayS = lv_ayS + 1;
    }
    if (
      GetInventoryIndexOfItemTypeBJ(lv_ayR, "kybl") +
        GetInventoryIndexOfItemTypeBJ(lv_ayR, "mgtk") >
      0
    ) {
      lv_ayS = lv_ayS + 1;
    }
    if (
      GetInventoryIndexOfItemTypeBJ(lv_ayR, "hbth") +
        GetInventoryIndexOfItemTypeBJ(lv_ayR, "sor8") +
        GetInventoryIndexOfItemTypeBJ(lv_ayR, "ram1") +
        GetInventoryIndexOfItemTypeBJ(lv_ayR, "scul") >
      0
    ) {
      lv_ayS = lv_ayS + 1;
    }
    if (
      GetInventoryIndexOfItemTypeBJ(lv_ayR, "ledg") +
        GetInventoryIndexOfItemTypeBJ(lv_ayR, "kygh") +
        GetInventoryIndexOfItemTypeBJ(lv_ayR, "bzbf") +
        GetInventoryIndexOfItemTypeBJ(lv_ayR, "gmfr") >
      0
    ) {
      lv_ayS = lv_ayS + 1;
    }
    if (GetInventoryIndexOfItemTypeBJ(lv_ayR, "dphe") > 0) {
      lv_ayS = lv_ayS + 1;
    }
    if (GetInventoryIndexOfItemTypeBJ(lv_ayR, "wolg") > 0) {
      lv_ayS = lv_ayS + 1;
    }
    if (f_ayO(lv_ayR)) {
      lv_ayS = lv_ayS + 1;
    }
    if (f_ayG(lv_ayR)) {
      lv_ayS = lv_ayS + 1;
    }
    if (f_ayI(lv_ayR)) {
      lv_ayS = lv_ayS + 1;
    }
    if (f_ayK(lv_ayR) || f_ayM(lv_ayR)) {
      lv_ayS = lv_ayS + 1;
    }
  }
  if (f_ayK(lv_ayR) || f_ayM(lv_ayR)) {
    lv_ayS = lv_ayS + 1;
  }
  return R2I(lv_ayS * gv_aak);
}
function f_ayT() {
  var lv_ayU = 8;
  do {
    if (lv_ayU > 15) {
      break;
    }
    gv_aam[lv_ayU] = 1;
    gv_aan[lv_ayU] = 1;
    lv_ayU = lv_ayU + 1;
  } while (true);
  lv_ayU = 1;
  gv_aav[lv_ayU] = "lgdh";
  gv_aaA[lv_ayU] = 4;
  lv_ayU = lv_ayU + 1;
  gv_aav[lv_ayU] = "ajen";
  gv_aay[lv_ayU] = 2;
  lv_ayU = lv_ayU + 1;
  gv_aav[lv_ayU] = "clfm";
  gv_aaw[lv_ayU] = 2;
  lv_ayU = lv_ayU + 1;
  gv_aav[lv_ayU] = "clsd";
  gv_aaz[lv_ayU] = 3;
  lv_ayU = lv_ayU + 1;
  gv_aav[lv_ayU] = "afac";
  gv_aax[lv_ayU] = 5;
  lv_ayU = lv_ayU + 1;
  gv_aav[lv_ayU] = "bgst";
  gv_aax[lv_ayU] = 10;
  gv_aay[lv_ayU] = 5;
  lv_ayU = lv_ayU + 1;
  gv_aav[lv_ayU] = "bspd";
  gv_aay[lv_ayU] = 10;
  lv_ayU = lv_ayU + 1;
  gv_aav[lv_ayU] = "belv";
  gv_aax[lv_ayU] = 10;
  lv_ayU = lv_ayU + 1;
  gv_aav[lv_ayU] = "odef";
  gv_aaA[lv_ayU] = 12;
  lv_ayU = lv_ayU + 1;
  gv_aav[lv_ayU] = "crys";
  gv_aaw[lv_ayU] = 6;
  lv_ayU = lv_ayU + 1;
  gv_aav[lv_ayU] = "rst1";
  gv_aaz[lv_ayU] = 12;
  lv_ayU = lv_ayU + 1;
  gv_aav[lv_ayU] = "dsum";
  gv_aaw[lv_ayU] = 3;
  lv_ayU = lv_ayU + 1;
  gv_aav[lv_ayU] = "hcun";
  gv_aaz[lv_ayU] = 20;
  lv_ayU = lv_ayU + 1;
  gv_aav[lv_ayU] = "rat6";
  gv_aay[lv_ayU] = 20;
  lv_ayU = lv_ayU + 1;
  gv_aav[lv_ayU] = "cnob";
  gv_aax[lv_ayU] = 20;
  gv_aay[lv_ayU] = 10;
  lv_ayU = lv_ayU + 1;
  gv_aav[lv_ayU] = "gcel";
  gv_aaw[lv_ayU] = 7;
  lv_ayU = lv_ayU + 1;
  gv_aav[lv_ayU] = "hval";
  gv_aaw[lv_ayU] = 6;
  lv_ayU = lv_ayU + 1;
  gv_aav[lv_ayU] = "ratc";
  gv_aay[lv_ayU] = 5;
  gv_aaz[lv_ayU] = 5;
  lv_ayU = lv_ayU + 1;
  gv_aav[lv_ayU] = "prvt";
  gv_aaA[lv_ayU] = 20;
  lv_ayU = lv_ayU + 1;
  gv_aav[lv_ayU] = "rde1";
  gv_aax[lv_ayU] = 25;
  gv_aay[lv_ayU] = 10;
  lv_ayU = lv_ayU + 1;
  gv_aav[lv_ayU] = "stel";
  gv_aaw[lv_ayU] = 10;
  lv_ayU = lv_ayU + 1;
  gv_aav[lv_ayU] = "rde3";
  gv_aax[lv_ayU] = 20;
  lv_ayU = lv_ayU + 1;
  gv_aav[lv_ayU] = "rde2";
  gv_aay[lv_ayU] = 12;
  gv_aaz[lv_ayU] = 12;
  lv_ayU = lv_ayU + 1;
  gv_aav[lv_ayU] = "ssil";
  gv_aaw[lv_ayU] = 13;
  lv_ayU = lv_ayU + 1;
  gv_aav[lv_ayU] = "evtl";
  gv_aaw[lv_ayU] = 5;
  gv_aaz[lv_ayU] = 15;
  lv_ayU = lv_ayU + 1;
  gv_aav[lv_ayU] = "brac";
  gv_aax[lv_ayU] = 15;
  gv_aay[lv_ayU] = 15;
  gv_aaz[lv_ayU] = 15;
  lv_ayU = lv_ayU + 1;
  gv_aav[lv_ayU] = "ciri";
  gv_aax[lv_ayU] = 30;
  gv_aay[lv_ayU] = 12;
  gv_aaB[lv_ayU] = 5;
  lv_ayU = lv_ayU + 1;
  gv_aav[lv_ayU] = "lhst";
  gv_aaC[lv_ayU] = 11;
  lv_ayU = lv_ayU + 1;
  gv_aav[lv_ayU] = "rlif";
  gv_aax[lv_ayU] = 45;
  lv_ayU = lv_ayU + 1;
  gv_aav[lv_ayU] = "ward";
  gv_aaw[lv_ayU] = 20;
  lv_ayU = lv_ayU + 1;
  gv_aav[lv_ayU] = "sbch";
  gv_aax[lv_ayU] = 55;
  lv_ayU = lv_ayU + 1;
  gv_aav[lv_ayU] = "rag1";
  gv_aax[lv_ayU] = 75;
  gv_aay[lv_ayU] = 10;
  lv_ayU = lv_ayU + 1;
  gv_aav[lv_ayU] = "rwiz";
  gv_aay[lv_ayU] = 50;
  lv_ayU = lv_ayU + 1;
  gv_aav[lv_ayU] = "I006";
  gv_aaA[lv_ayU] = 25;
  lv_ayU = lv_ayU + 1;
  gv_aav[lv_ayU] = "I005";
  gv_aaA[lv_ayU] = 18;
  lv_ayU = lv_ayU + 1;
  gv_aav[lv_ayU] = "I009";
  gv_aaA[lv_ayU] = 15;
  lv_ayU = lv_ayU + 1;
  gv_aav[lv_ayU] = "I008";
  gv_aaA[lv_ayU] = 35;
  lv_ayU = lv_ayU + 1;
  gv_aav[lv_ayU] = "I00B";
  gv_aaA[lv_ayU] = 50;
  lv_ayU = lv_ayU + 1;
  gv_aav[lv_ayU] = "I00C";
  gv_aaA[lv_ayU] = 25;
  lv_ayU = lv_ayU + 1;
  gv_aav[lv_ayU] = "I000";
  gv_aaz[lv_ayU] = 40;
  lv_ayU = lv_ayU + 1;
  gv_aav[lv_ayU] = "I003";
  gv_aaw[lv_ayU] = 15;
  gv_aaz[lv_ayU] = 15;
  lv_ayU = lv_ayU + 1;
  gv_aav[lv_ayU] = "I002";
  gv_aaw[lv_ayU] = 28;
  lv_ayU = lv_ayU + 1;
  gv_aav[lv_ayU] = "I001";
  gv_aaw[lv_ayU] = 5;
  gv_aaz[lv_ayU] = 30;
  lv_ayU = lv_ayU + 1;
  gv_aav[lv_ayU] = "I00I";
  gv_aaC[lv_ayU] = 15;
  lv_ayU = lv_ayU + 1;
  gv_aav[lv_ayU] = "I00E";
  gv_aax[lv_ayU] = 55;
  gv_aay[lv_ayU] = 35;
  lv_ayU = lv_ayU + 1;
  gv_aav[lv_ayU] = "I00F";
  gv_aay[lv_ayU] = 65;
  lv_ayU = lv_ayU + 1;
  gv_aav[lv_ayU] = "I00G";
  gv_aaw[lv_ayU] = 33;
  lv_ayU = lv_ayU + 1;
  gv_aav[lv_ayU] = "I00H";
  gv_aaz[lv_ayU] = 50;
  lv_ayU = lv_ayU + 1;
  gv_aav[lv_ayU] = "I00L";
  gv_aaA[lv_ayU] = 60;
  lv_ayU = lv_ayU + 1;
  gv_aav[lv_ayU] = "I00D";
  gv_aax[lv_ayU] = 65;
  lv_ayU = lv_ayU + 1;
  gv_aav[lv_ayU] = "I00K";
  gv_aaA[lv_ayU] = 30;
  lv_ayU = lv_ayU + 1;
  gv_aav[lv_ayU] = "I00U";
  gv_aaA[lv_ayU] = 45;
  lv_ayU = lv_ayU + 1;
  gv_aav[lv_ayU] = "I00Q";
  gv_aaw[lv_ayU] = 15;
  gv_aaB[lv_ayU] = 10;
  lv_ayU = lv_ayU + 1;
  gv_aav[lv_ayU] = "I00O";
  gv_aay[lv_ayU] = 75;
  lv_ayU = lv_ayU + 1;
  gv_aav[lv_ayU] = "I00M";
  gv_aax[lv_ayU] = 75;
  gv_aay[lv_ayU] = 40;
  lv_ayU = lv_ayU + 1;
  gv_aav[lv_ayU] = "I00N";
  gv_aax[lv_ayU] = 75;
  lv_ayU = lv_ayU + 1;
  gv_aav[lv_ayU] = "I00T";
  gv_aaA[lv_ayU] = 75;
  lv_ayU = lv_ayU + 1;
  gv_aav[lv_ayU] = "I00P";
  gv_aaw[lv_ayU] = 40;
  lv_ayU = lv_ayU + 1;
  gv_aav[lv_ayU] = "I00R";
  gv_aaz[lv_ayU] = 75;
  lv_ayU = lv_ayU + 1;
  gv_aav[lv_ayU] = "I00Y";
  gv_aaw[lv_ayU] = 50;
  lv_ayU = lv_ayU + 1;
  gv_aav[lv_ayU] = "I00Z";
  gv_aaw[lv_ayU] = 10;
  gv_aaC[lv_ayU] = 25;
  lv_ayU = lv_ayU + 1;
  gv_aav[lv_ayU] = "I013";
  gv_aaA[lv_ayU] = 25;
  lv_ayU = lv_ayU + 1;
  gv_aav[lv_ayU] = "I012";
  gv_aaA[lv_ayU] = 90;
  lv_ayU = lv_ayU + 1;
  gv_aav[lv_ayU] = "I010";
  gv_aaw[lv_ayU] = 35;
  gv_aaB[lv_ayU] = 10;
  lv_ayU = lv_ayU + 1;
  gv_aav[lv_ayU] = "I00W";
  gv_aay[lv_ayU] = 85;
  lv_ayU = lv_ayU + 1;
  gv_aav[lv_ayU] = "I00X";
  gv_aax[lv_ayU] = 125;
  lv_ayU = lv_ayU + 1;
  gv_aav[lv_ayU] = "I00V";
  gv_aax[lv_ayU] = 180;
  lv_ayU = lv_ayU + 1;
  gv_aav[lv_ayU] = "olig";
  gv_aaA[lv_ayU] = 40;
  lv_ayU = lv_ayU + 1;
  gv_aav[lv_ayU] = "oli2";
  gv_aaA[lv_ayU] = 25;
  lv_ayU = lv_ayU + 1;
  gv_aav[lv_ayU] = "oslo";
  gv_aaA[lv_ayU] = 65;
  lv_ayU = lv_ayU + 1;
  gv_aav[lv_ayU] = "oven";
  gv_aaA[lv_ayU] = 90;
  lv_ayU = lv_ayU + 1;
  gv_aav[lv_ayU] = "pgin";
  gv_aaA[lv_ayU] = 25;
  lv_ayU = lv_ayU + 1;
  gv_aav[lv_ayU] = "oflg";
  gv_aaA[lv_ayU] = 25;
  lv_ayU = lv_ayU + 1;
  gv_aav[lv_ayU] = "rde0";
  gv_aaA[lv_ayU] = 50;
  lv_ayU = lv_ayU + 1;
  gv_aav[lv_ayU] = "rnsp";
  gv_aaA[lv_ayU] = 100;
  lv_ayU = lv_ayU + 1;
  gv_aav[lv_ayU] = "ram1";
  gv_aaA[lv_ayU] = 25;
  lv_ayU = lv_ayU + 1;
  gv_aav[lv_ayU] = "ram2";
  gv_aaA[lv_ayU] = 40;
  lv_ayU = lv_ayU + 1;
  gv_aav[lv_ayU] = "ram3";
  gv_aaA[lv_ayU] = 65;
  lv_ayU = lv_ayU + 1;
  gv_aav[lv_ayU] = "rugt";
  gv_aaA[lv_ayU] = 80;
  lv_ayU = lv_ayU + 1;
  gv_aav[lv_ayU] = "schl";
  gv_aay[lv_ayU] = 15;
  gv_aaz[lv_ayU] = 15;
  gv_aaA[lv_ayU] = 15;
  lv_ayU = lv_ayU + 1;
  gv_aav[lv_ayU] = "horl";
  gv_aaA[lv_ayU] = 25;
  lv_ayU = lv_ayU + 1;
  gv_aav[lv_ayU] = "ccmd";
  gv_aay[lv_ayU] = 15;
  gv_aaz[lv_ayU] = 15;
  gv_aaA[lv_ayU] = 40;
  lv_ayU = lv_ayU + 1;
  gv_aav[lv_ayU] = "rots";
  gv_aay[lv_ayU] = 25;
  gv_aaz[lv_ayU] = 25;
  gv_aaA[lv_ayU] = 50;
  lv_ayU = lv_ayU + 1;
  gv_aav[lv_ayU] = "srtl";
  gv_aaA[lv_ayU] = 15;
  lv_ayU = lv_ayU + 1;
  gv_aav[lv_ayU] = "srbd";
  gv_aaA[lv_ayU] = 35;
  lv_ayU = lv_ayU + 1;
  gv_aav[lv_ayU] = "sor1";
  gv_aaA[lv_ayU] = 50;
  lv_ayU = lv_ayU + 1;
  gv_aav[lv_ayU] = "sora";
  gv_aaA[lv_ayU] = 75;
  lv_ayU = lv_ayU + 1;
  gv_aav[lv_ayU] = "sor4";
  gv_aax[lv_ayU] = 40;
  gv_aaz[lv_ayU] = 30;
  lv_ayU = lv_ayU + 1;
  gv_aav[lv_ayU] = "sor3";
  gv_aaw[lv_ayU] = 15;
  gv_aaz[lv_ayU] = 20;
  lv_ayU = lv_ayU + 1;
  gv_aav[lv_ayU] = "sor2";
  gv_aax[lv_ayU] = 60;
  lv_ayU = lv_ayU + 1;
  gv_aav[lv_ayU] = "sor5";
  gv_aax[lv_ayU] = 75;
  gv_aaw[lv_ayU] = 15;
  gv_aaz[lv_ayU] = 80;
  lv_ayU = lv_ayU + 1;
  gv_aav[lv_ayU] = "sor6";
  gv_aax[lv_ayU] = 140;
  gv_aaw[lv_ayU] = 25;
  gv_aaz[lv_ayU] = 120;
  lv_ayU = lv_ayU + 1;
  gv_aav[lv_ayU] = "sor7";
  gv_aaA[lv_ayU] = 25;
  lv_ayU = lv_ayU + 1;
  gv_aav[lv_ayU] = "sor8";
  gv_aaz[lv_ayU] = 35;
  gv_aaA[lv_ayU] = 15;
  lv_ayU = lv_ayU + 1;
  gv_aav[lv_ayU] = "sor9";
  gv_aaz[lv_ayU] = 15;
  lv_ayU = lv_ayU + 1;
  gv_aav[lv_ayU] = "shcw";
  gv_aaz[lv_ayU] = 50;
  gv_aaA[lv_ayU] = 40;
  lv_ayU = lv_ayU + 1;
  gv_aav[lv_ayU] = "shtm";
  gv_aaz[lv_ayU] = 90;
  gv_aaA[lv_ayU] = 55;
  lv_ayU = lv_ayU + 1;
  gv_aav[lv_ayU] = "gvsm";
  gv_aaw[lv_ayU] = 15;
  gv_aay[lv_ayU] = 20;
  lv_ayU = lv_ayU + 1;
  gv_aav[lv_ayU] = "gemt";
  gv_aax[lv_ayU] = 35;
  gv_aaz[lv_ayU] = 35;
  lv_ayU = lv_ayU + 1;
  gv_aav[lv_ayU] = "gobm";
  gv_aaw[lv_ayU] = 5;
  gv_aaA[lv_ayU] = 10;
  lv_ayU = lv_ayU + 1;
  gv_aav[lv_ayU] = "tels";
  gv_aaw[lv_ayU] = 20;
  gv_aax[lv_ayU] = 25;
  gv_aay[lv_ayU] = 25;
  gv_aaz[lv_ayU] = 25;
  gv_aaA[lv_ayU] = 25;
  lv_ayU = lv_ayU + 1;
  gv_aav[lv_ayU] = "rej4";
  gv_aaw[lv_ayU] = 30;
  gv_aax[lv_ayU] = 50;
  gv_aay[lv_ayU] = 50;
  gv_aaz[lv_ayU] = 25;
  gv_aaA[lv_ayU] = 35;
  lv_ayU = lv_ayU + 1;
  gv_aav[lv_ayU] = "rej6";
  gv_aay[lv_ayU] = 30;
  lv_ayU = lv_ayU + 1;
  gv_aav[lv_ayU] = "hbth";
  gv_aay[lv_ayU] = 25;
  gv_aaB[lv_ayU] = 15;
  lv_ayU = lv_ayU + 1;
  gv_aav[lv_ayU] = "grsl";
  gv_aaw[lv_ayU] = 20;
  gv_aay[lv_ayU] = 10;
  lv_ayU = lv_ayU + 1;
  gv_aav[lv_ayU] = "sfog";
  gv_aaw[lv_ayU] = 20;
  gv_aay[lv_ayU] = 65;
  gv_aaB[lv_ayU] = 15;
  lv_ayU = lv_ayU + 1;
  gv_aav[lv_ayU] = "flag";
  gv_aaw[lv_ayU] = 50;
  gv_aay[lv_ayU] = 80;
  gv_aaB[lv_ayU] = 25;
  lv_ayU = lv_ayU + 1;
  gv_aav[lv_ayU] = "kgal";
  gv_aax[lv_ayU] = 50;
  gv_aaz[lv_ayU] = 25;
  lv_ayU = lv_ayU + 1;
  gv_aav[lv_ayU] = "iwbr";
  gv_aaw[lv_ayU] = 10;
  gv_aaz[lv_ayU] = 30;
  lv_ayU = lv_ayU + 1;
  gv_aav[lv_ayU] = "jdrn";
  gv_aay[lv_ayU] = 15;
  gv_aaz[lv_ayU] = 20;
  gv_aaB[lv_ayU] = 5;
  lv_ayU = lv_ayU + 1;
  gv_aav[lv_ayU] = "klmm";
  gv_aaw[lv_ayU] = 10;
  gv_aax[lv_ayU] = 50;
  gv_aay[lv_ayU] = 15;
  gv_aaz[lv_ayU] = 75;
  gv_aaB[lv_ayU] = 5;
  lv_ayU = lv_ayU + 1;
  gv_aav[lv_ayU] = "rej2";
  gv_aaw[lv_ayU] = 20;
  gv_aax[lv_ayU] = 75;
  gv_aay[lv_ayU] = 25;
  gv_aaz[lv_ayU] = 100;
  gv_aaB[lv_ayU] = 25;
  lv_ayU = lv_ayU + 1;
  gv_aav[lv_ayU] = "lnrn";
  gv_aax[lv_ayU] = 25;
  gv_aaz[lv_ayU] = 35;
  lv_ayU = lv_ayU + 1;
  gv_aav[lv_ayU] = "mlst";
  gv_aaw[lv_ayU] = 20;
  gv_aaz[lv_ayU] = 10;
  lv_ayU = lv_ayU + 1;
  gv_aav[lv_ayU] = "rej5";
  gv_aaz[lv_ayU] = 30;
  gv_aaB[lv_ayU] = 10;
  lv_ayU = lv_ayU + 1;
  gv_aav[lv_ayU] = "mnsf";
  gv_aaw[lv_ayU] = 20;
  gv_aax[lv_ayU] = 25;
  gv_aaz[lv_ayU] = 75;
  gv_aaB[lv_ayU] = 10;
  lv_ayU = lv_ayU + 1;
  gv_aav[lv_ayU] = "rej1";
  gv_aaw[lv_ayU] = 25;
  gv_aax[lv_ayU] = 150;
  gv_aaz[lv_ayU] = 95;
  gv_aaB[lv_ayU] = 10;
  lv_ayU = lv_ayU + 1;
  gv_aav[lv_ayU] = "nflg";
  gv_aaA[lv_ayU] = 25;
  lv_ayU = lv_ayU + 1;
  gv_aav[lv_ayU] = "nspi";
  gv_aaA[lv_ayU] = 35;
  lv_ayU = lv_ayU + 1;
  gv_aav[lv_ayU] = "ocor";
  gv_aaA[lv_ayU] = 60;
  lv_ayU = lv_ayU + 1;
  gv_aav[lv_ayU] = "ofir";
  gv_aaA[lv_ayU] = 85;
  lv_ayU = lv_ayU + 1;
  gv_aav[lv_ayU] = "uflg";
  gv_aaw[lv_ayU] = 20;
  gv_aay[lv_ayU] = 30;
  lv_ayU = lv_ayU + 1;
  gv_aav[lv_ayU] = "tmsc";
  gv_aaA[lv_ayU] = 15;
  lv_ayU = lv_ayU + 1;
  gv_aav[lv_ayU] = "bzbe";
  gv_aaz[lv_ayU] = 50;
  lv_ayU = lv_ayU + 1;
  gv_aav[lv_ayU] = "tmmt";
  gv_aax[lv_ayU] = 150;
  gv_aay[lv_ayU] = 15;
  lv_ayU = lv_ayU + 1;
  gv_aav[lv_ayU] = "vddl";
  gv_aaw[lv_ayU] = 25;
  gv_aay[lv_ayU] = 15;
  gv_aaz[lv_ayU] = 12;
  gv_aaC[lv_ayU] = 10;
  lv_ayU = lv_ayU + 1;
  gv_aav[lv_ayU] = "ches";
  gv_aax[lv_ayU] = 75;
  gv_aay[lv_ayU] = 30;
  lv_ayU = lv_ayU + 1;
  gv_aav[lv_ayU] = "tgxp";
  gv_aaA[lv_ayU] = 15;
  lv_ayU = lv_ayU + 1;
  gv_aav[lv_ayU] = "kybl";
  gv_aax[lv_ayU] = 100;
  lv_ayU = lv_ayU + 1;
  gv_aav[lv_ayU] = "dkfw";
  gv_aaw[lv_ayU] = 10;
  gv_aax[lv_ayU] = 60;
  gv_aay[lv_ayU] = 75;
  lv_ayU = lv_ayU + 1;
  gv_aav[lv_ayU] = "jpnt";
  gv_aaA[lv_ayU] = 60;
  lv_ayU = lv_ayU + 1;
  gv_aav[lv_ayU] = "cnhn";
  gv_aax[lv_ayU] = 75;
  lv_ayU = lv_ayU + 1;
  gv_aav[lv_ayU] = "mgtk";
  gv_aaz[lv_ayU] = 80;
  gv_aax[lv_ayU] = 100;
  gv_aaC[lv_ayU] = 10;
  lv_ayU = lv_ayU + 1;
  gv_aav[lv_ayU] = "k3m1";
  gv_aaA[lv_ayU] = 40;
  lv_ayU = lv_ayU + 1;
  gv_aav[lv_ayU] = "gopr";
  gv_aaw[lv_ayU] = 10;
  gv_aaC[lv_ayU] = 15;
  lv_ayU = lv_ayU + 1;
  gv_aav[lv_ayU] = "azhr";
  gv_aaw[lv_ayU] = 10;
  gv_aaB[lv_ayU] = 50;
  gv_aaC[lv_ayU] = 10;
  lv_ayU = lv_ayU + 1;
  gv_aav[lv_ayU] = "k3m3";
  gv_aaw[lv_ayU] = 40;
  gv_aaB[lv_ayU] = 40;
  lv_ayU = lv_ayU + 1;
  gv_aav[lv_ayU] = "kygh";
  gv_aaz[lv_ayU] = 50;
  gv_aaC[lv_ayU] = 10;
  lv_ayU = lv_ayU + 1;
  gv_aav[lv_ayU] = "ledg";
  gv_aax[lv_ayU] = 150;
  lv_ayU = lv_ayU + 1;
  gv_aav[lv_ayU] = "bzbf";
  gv_aaA[lv_ayU] = 25;
  lv_ayU = lv_ayU + 1;
  gv_aav[lv_ayU] = "gmfr";
  gv_aay[lv_ayU] = 40;
  gv_aaB[lv_ayU] = 15;
  lv_ayU = lv_ayU + 1;
  gv_aav[lv_ayU] = "envl";
  gv_aaz[lv_ayU] = 40;
  gv_aaD[lv_ayU] = 20;
  lv_ayU = lv_ayU + 1;
  gv_aav[lv_ayU] = "drph";
  gv_aay[lv_ayU] = 40;
  gv_aaD[lv_ayU] = 20;
  lv_ayU = lv_ayU + 1;
  gv_aav[lv_ayU] = "shen";
  gv_aaA[lv_ayU] = 40;
  gv_aaD[lv_ayU] = 20;
  lv_ayU = lv_ayU + 1;
  gv_aav[lv_ayU] = "sehr";
  gv_aaw[lv_ayU] = 25;
  gv_aay[lv_ayU] = 35;
  gv_aaz[lv_ayU] = 35;
  gv_aaA[lv_ayU] = 35;
  gv_aaD[lv_ayU] = 30;
  lv_ayU = lv_ayU + 1;
  gv_aav[lv_ayU] = "thle";
  gv_aax[lv_ayU] = 180;
  gv_aaz[lv_ayU] = 70;
  gv_aaD[lv_ayU] = 25;
  lv_ayU = lv_ayU + 1;
  gv_aav[lv_ayU] = "kysn";
  gv_aaw[lv_ayU] = 20;
  gv_aaz[lv_ayU] = 60;
  gv_aaC[lv_ayU] = 20;
  gv_aaD[lv_ayU] = 25;
  lv_ayU = lv_ayU + 1;
  gv_aav[lv_ayU] = "sclp";
  gv_aaw[lv_ayU] = 50;
  gv_aay[lv_ayU] = 50;
  gv_aaD[lv_ayU] = 30;
  lv_ayU = lv_ayU + 1;
  gv_aav[lv_ayU] = "sorf";
  gv_aax[lv_ayU] = 60;
  gv_aay[lv_ayU] = 120;
  gv_aaD[lv_ayU] = 25;
  lv_ayU = lv_ayU + 1;
  gv_aav[lv_ayU] = "phlt";
  gv_aay[lv_ayU] = 80;
  gv_aaw[lv_ayU] = 10;
  gv_aaC[lv_ayU] = 20;
  gv_aaD[lv_ayU] = 25;
  lv_ayU = lv_ayU + 1;
  gv_aav[lv_ayU] = "skrt";
  gv_aaA[lv_ayU] = 40;
  gv_aaw[lv_ayU] = 40;
  gv_aaD[lv_ayU] = 30;
  lv_ayU = lv_ayU + 1;
  gv_aav[lv_ayU] = "glsk";
  gv_aaA[lv_ayU] = 60;
  gv_aaD[lv_ayU] = 25;
  lv_ayU = lv_ayU + 1;
  gv_aav[lv_ayU] = "shwd";
  gv_aaA[lv_ayU] = 100;
  gv_aaC[lv_ayU] = 20;
  gv_aaD[lv_ayU] = 25;
  lv_ayU = lv_ayU + 1;
  gv_aav[lv_ayU] = "k3m2";
  gv_aax[lv_ayU] = 125;
  gv_aay[lv_ayU] = 50;
  gv_aaz[lv_ayU] = 50;
  lv_ayU = lv_ayU + 1;
  gv_aav[lv_ayU] = "dphe";
  gv_aax[lv_ayU] = 125;
  gv_aaA[lv_ayU] = 50;
  lv_ayU = lv_ayU + 1;
  gv_aav[lv_ayU] = "dthb";
  gv_aaB[lv_ayU] = 50;
  gv_aay[lv_ayU] = 25;
  gv_aaz[lv_ayU] = 25;
  lv_ayU = lv_ayU + 1;
  gv_aav[lv_ayU] = "ktrm";
  gv_aaB[lv_ayU] = 50;
  lv_ayU = lv_ayU + 1;
  gv_aav[lv_ayU] = "wtlg";
  gv_aaw[lv_ayU] = 70;
  lv_ayU = lv_ayU + 1;
  gv_aav[lv_ayU] = "wolg";
  gv_aaw[lv_ayU] = 45;
  lv_ayU = lv_ayU + 1;
  gv_aav[lv_ayU] = "I018";
  gv_aaw[lv_ayU] = 35;
  gv_aay[lv_ayU] = 50;
  gv_aaA[lv_ayU] = 110;
  gv_aaB[lv_ayU] = 35;
  lv_ayU = lv_ayU + 1;
  gv_aav[lv_ayU] = "I017";
  gv_aaw[lv_ayU] = 50;
  gv_aay[lv_ayU] = 70;
  gv_aaz[lv_ayU] = 70;
  gv_aaA[lv_ayU] = 70;
  gv_aaB[lv_ayU] = 50;
  lv_ayU = lv_ayU + 1;
  gv_aav[lv_ayU] = "I014";
  gv_aaw[lv_ayU] = 50;
  gv_aay[lv_ayU] = 115;
  gv_aaz[lv_ayU] = 115;
  gv_aaB[lv_ayU] = 60;
  lv_ayU = lv_ayU + 1;
  gv_aav[lv_ayU] = "I01A";
  gv_aaw[lv_ayU] = 45;
  gv_aay[lv_ayU] = 110;
  gv_aaA[lv_ayU] = 110;
  gv_aaB[lv_ayU] = 50;
  lv_ayU = lv_ayU + 1;
  gv_aav[lv_ayU] = "I015";
  gv_aaw[lv_ayU] = 40;
  gv_aax[lv_ayU] = 170;
  gv_aay[lv_ayU] = 70;
  gv_aaz[lv_ayU] = 150;
  gv_aaA[lv_ayU] = 20;
  gv_aaB[lv_ayU] = 30;
  lv_ayU = lv_ayU + 1;
  gv_aav[lv_ayU] = "I019";
  gv_aaw[lv_ayU] = 50;
  gv_aaz[lv_ayU] = 120;
  gv_aaA[lv_ayU] = 120;
  gv_aaB[lv_ayU] = 50;
  lv_ayU = lv_ayU + 1;
  gv_aav[lv_ayU] = "I01B";
  gv_aaw[lv_ayU] = 40;
  gv_aaz[lv_ayU] = 100;
  gv_aaA[lv_ayU] = 120;
  gv_aaB[lv_ayU] = 50;
  lv_ayU = lv_ayU + 1;
  gv_aav[lv_ayU] = "I016";
  gv_aaw[lv_ayU] = 65;
  gv_aay[lv_ayU] = 150;
  gv_aaA[lv_ayU] = 45;
  gv_aaB[lv_ayU] = 40;
  lv_ayU = lv_ayU + 1;
  gv_aav[lv_ayU] = "I061";
  gv_aaz[lv_ayU] = 75;
  lv_ayU = lv_ayU + 1;
  gv_aav[lv_ayU] = "I065";
  gv_aay[lv_ayU] = 75;
  gv_aaB[lv_ayU] = 25;
  lv_ayU = lv_ayU + 1;
  gv_aav[lv_ayU] = "I066";
  gv_aay[lv_ayU] = 35;
  gv_aaz[lv_ayU] = 35;
  lv_ayU = lv_ayU + 1;
  gv_aav[lv_ayU] = "I05X";
  gv_aax[lv_ayU] = 125;
  lv_ayU = lv_ayU + 1;
  gv_aav[lv_ayU] = "I062";
  gv_aaA[lv_ayU] = 65;
  lv_ayU = lv_ayU + 1;
  gv_aav[lv_ayU] = "I063";
  gv_aaw[lv_ayU] = 25;
  lv_ayU = lv_ayU + 1;
  gv_aav[lv_ayU] = "stre";
  gv_aax[lv_ayU] = 35;
  lv_ayU = lv_ayU + 1;
  gv_aav[lv_ayU] = "thdm";
  gv_aay[lv_ayU] = 20;
  lv_ayU = lv_ayU + 1;
  gv_aav[lv_ayU] = "tbar";
  gv_aaz[lv_ayU] = 30;
  gv_aaC[lv_ayU] = 10;
  lv_ayU = lv_ayU + 1;
  gv_aav[lv_ayU] = "tbsm";
  gv_aaz[lv_ayU] = 50;
  gv_aaC[lv_ayU] = 25;
  lv_ayU = lv_ayU + 1;
  gv_aav[lv_ayU] = "spre";
  gv_aaz[lv_ayU] = 25;
  lv_ayU = lv_ayU + 1;
  gv_aav[lv_ayU] = "sbok";
  gv_aaA[lv_ayU] = 40;
  lv_ayU = lv_ayU + 1;
  gv_aav[lv_ayU] = "stwa";
  gv_aax[lv_ayU] = 70;
  gv_aaB[lv_ayU] = 10;
  lv_ayU = lv_ayU + 1;
  gv_aav[lv_ayU] = "tbak";
  gv_aay[lv_ayU] = 65;
  lv_ayU = lv_ayU + 1;
  gv_aav[lv_ayU] = "tlum";
  gv_aaA[lv_ayU] = 35;
  lv_ayU = lv_ayU + 1;
  gv_aav[lv_ayU] = "anfg";
  gv_aax[lv_ayU] = 65;
  lv_ayU = lv_ayU + 1;
  gv_aav[lv_ayU] = "axas";
  gv_aaw[lv_ayU] = 10;
  gv_aay[lv_ayU] = 10;
  lv_ayU = lv_ayU + 1;
  gv_aav[lv_ayU] = "pams";
  gv_aaB[lv_ayU] = 10;
  lv_ayU = lv_ayU + 1;
  gv_aav[lv_ayU] = "arsh";
  gv_aaA[lv_ayU] = 25;
  lv_ayU = lv_ayU + 1;
  gv_aav[lv_ayU] = "arsc";
  gv_aaz[lv_ayU] = 30;
  gv_aaC[lv_ayU] = 10;
  lv_ayU = lv_ayU + 1;
  gv_aav[lv_ayU] = "asbl";
  gv_aax[lv_ayU] = 25;
  gv_aay[lv_ayU] = 25;
  lv_ayU = lv_ayU + 1;
  gv_aav[lv_ayU] = "blba";
  gv_aaw[lv_ayU] = 10;
  gv_aay[lv_ayU] = 25;
  lv_ayU = lv_ayU + 1;
  gv_aav[lv_ayU] = "bfhr";
  gv_aaA[lv_ayU] = 25;
  lv_ayU = lv_ayU + 1;
  gv_aav[lv_ayU] = "btst";
  gv_aax[lv_ayU] = 25;
  gv_aaz[lv_ayU] = 25;
  lv_ayU = lv_ayU + 1;
  gv_aav[lv_ayU] = "rat3";
  gv_aax[lv_ayU] = 50;
  lv_ayU = lv_ayU + 1;
  gv_aav[lv_ayU] = "brag";
  gv_aaB[lv_ayU] = 15;
  lv_ayU = lv_ayU + 1;
  gv_aav[lv_ayU] = "cosl";
  gv_aaC[lv_ayU] = 10;
  gv_aaD[lv_ayU] = 20;
  lv_ayU = lv_ayU + 1;
  gv_aav[lv_ayU] = "stpg";
  gv_aaA[lv_ayU] = 35;
  lv_ayU = lv_ayU + 1;
  gv_aav[lv_ayU] = "crdt";
  gv_aay[lv_ayU] = 25;
  gv_aaz[lv_ayU] = 25;
  gv_aaA[lv_ayU] = 25;
  lv_ayU = lv_ayU + 1;
  gv_aav[lv_ayU] = "frhg";
  gv_aaC[lv_ayU] = 20;
  lv_ayU = lv_ayU + 1;
  gv_aav[lv_ayU] = "esaz";
  gv_aax[lv_ayU] = 65;
  lv_ayU = lv_ayU + 1;
  gv_aav[lv_ayU] = "fwss";
  gv_aaB[lv_ayU] = 30;
  lv_ayU = lv_ayU + 1;
  gv_aav[lv_ayU] = "frgd";
  gv_aay[lv_ayU] = 20;
  gv_aaz[lv_ayU] = 20;
  lv_ayU = lv_ayU + 1;
  gv_aaE[1] = lv_ayU;
}
function f_ayV() {
  var lv_ayW = 0;
  gv_aaF[lv_ayW] = "pghe";
  gv_aaG[lv_ayW] = 100;
  lv_ayW = lv_ayW + 1;
  gv_aaF[lv_ayW] = "pomn";
  gv_aaG[lv_ayW] = 250;
  lv_ayW = lv_ayW + 1;
  gv_aaF[lv_ayW] = "pres";
  gv_aaG[lv_ayW] = 500;
  lv_ayW = lv_ayW + 1;
  gv_aaF[lv_ayW] = "fgrd";
  gv_aaG[lv_ayW] = 1000;
  lv_ayW = lv_ayW + 1;
  gv_aaF[lv_ayW] = "fgfh";
  gv_aaG[lv_ayW] = 1500;
  lv_ayW = lv_ayW + 1;
  gv_aaF[lv_ayW] = "I064";
  gv_aaG[lv_ayW] = 1500;
  lv_ayW = lv_ayW + 1;
  gv_aaF[lv_ayW] = "azhr";
  gv_aaG[lv_ayW] = 1000;
  lv_ayW = lv_ayW + 1;
  lv_ayW = 10;
  gv_aaF[lv_ayW] = "pgma";
  gv_aaH[lv_ayW] = 75;
  lv_ayW = lv_ayW + 1;
  gv_aaF[lv_ayW] = "pnvu";
  gv_aaH[lv_ayW] = 190;
  lv_ayW = lv_ayW + 1;
  gv_aaF[lv_ayW] = "pdiv";
  gv_aaH[lv_ayW] = 375;
  lv_ayW = lv_ayW + 1;
  gv_aaF[lv_ayW] = "mnst";
  gv_aaH[lv_ayW] = 750;
  lv_ayW = lv_ayW + 1;
  gv_aaF[lv_ayW] = "infs";
  gv_aaH[lv_ayW] = 1125;
  lv_ayW = lv_ayW + 1;
  gv_aaF[lv_ayW] = "I067";
  gv_aaH[lv_ayW] = 1125;
  lv_ayW = lv_ayW + 1;
  gv_aaF[lv_ayW] = "k3m1";
  gv_aaH[lv_ayW] = 1125;
  lv_ayW = lv_ayW + 1;
  lv_ayW = 20;
  gv_aaF[lv_ayW] = "shea";
  gv_aaG[lv_ayW] = 400;
  lv_ayW = lv_ayW + 1;
  gv_aaF[lv_ayW] = "sman";
  gv_aaH[lv_ayW] = 200;
  lv_ayW = lv_ayW + 1;
  gv_aaF[lv_ayW] = "shas";
  lv_ayW = lv_ayW + 1;
  gv_aaF[lv_ayW] = "I06H";
  gv_aaG[lv_ayW] = 2000;
  gv_aaH[lv_ayW] = 800;
  lv_ayW = lv_ayW + 1;
  gv_aaE[2] = lv_ayW;
}
function f_ayX(lv_ayY) {
  return (
    S2S("Lv1: " + gv_aaZ) +
    I2S(R2I(gv_alu[lv_ayY + 1])) +
    "|r, Lv2: " +
    gv_aaZ +
    I2S(R2I(gv_alu[lv_ayY + 2])) +
    "|r, Lv3: " +
    gv_aaZ +
    I2S(R2I(gv_alu[lv_ayY + 3])) +
    "|r, Lv4: " +
    gv_aaZ +
    I2S(R2I(gv_alu[lv_ayY + 4])) +
    "|r, Lv5: " +
    gv_aaZ +
    I2S(R2I(gv_alu[lv_ayY + 5])) +
    "|r, Lv6: " +
    gv_aaZ +
    I2S(R2I(gv_alu[lv_ayY + 6])) +
    "|r"
  );
}
function f_ayZ(lv_aza) {
  return (
    S2S("Lv1: " + gv_aaZ) +
    I2S(R2I(gv_alu[lv_aza + 1] * 100)) +
    "%|r, Lv2: " +
    gv_aaZ +
    I2S(R2I(gv_alu[lv_aza + 2] * 100)) +
    "%|r, Lv3: " +
    gv_aaZ +
    I2S(R2I(gv_alu[lv_aza + 3] * 100)) +
    "%|r, Lv4: " +
    gv_aaZ +
    I2S(R2I(gv_alu[lv_aza + 4] * 100)) +
    "%|r, Lv5: " +
    gv_aaZ +
    I2S(R2I(gv_alu[lv_aza + 5] * 100)) +
    "%|r, Lv6: " +
    gv_aaZ +
    I2S(R2I(gv_alu[lv_aza + 6] * 100)) +
    "%|r"
  );
}
function f_azb(lv_azc, lv_azd, lv_aze, lv_azf, lv_azg, lv_azh) {
  return (
    S2S("\nMana cost: 1: " + gv_aba) +
    I2S(lv_azc) +
    "|r, 2: " +
    gv_aba +
    I2S(lv_azd) +
    "|r, 3: " +
    gv_aba +
    I2S(lv_aze) +
    "|r, 4: " +
    gv_aba +
    I2S(lv_azf) +
    "|r, 5: " +
    gv_aba +
    I2S(lv_azg) +
    "|r, 6: " +
    gv_aba +
    I2S(lv_azh) +
    "|r"
  );
}
function f_azi(lv_azj) {
  var lv_azk = 1;
  var lv_azl = "\n";
  do {
    if (lv_azk > 6) {
      break;
    }
    lv_azk = lv_azk + 1;
  } while (true);
  return lv_azl;
}
function f_azm() {
  var lv_azn = 0;
  gv_aaZ = "|cffffaaaa";
  gv_aba = "|cff8888ff";
  gv_abb = "|cffffcc00";
  SaveInteger(gv_abY, 4, lv_azn, "Udre");
  SaveStr(
    gv_abY,
    1,
    lv_azn,
    S2S(gv_abb + "Soul-piercing shot|r scales by ") +
      gv_aaZ +
      "0.23|r Int per level" +
      f_azb(14, 24, 38, 57, 81, 110)
  );
  SaveStr(
    gv_abY,
    2,
    lv_azn,
    S2S(gv_abb + "Stardust|r scales with at (") +
      gv_abb +
      "0.3+0.15*lvl|r) *(Int +SH/1.6), base heal: \n" +
      f_ayX(1017)
  );
  SaveStr(
    gv_abY,
    3,
    lv_azn,
    S2S(
      gv_abb +
        "Mark of the Moon|r: (level+1)/3. *(spell damage+Int), base dmg \n"
    ) + f_ayX(1011)
  );
  SaveStr(
    gv_abY,
    4,
    lv_azn,
    S2S(gv_abb + "Selene's Blessing|r atk speed rises ") +
      gv_aaZ +
      "10%|r per level, evasion rises " +
      gv_abb +
      "6%|r, duration about " +
      gv_aaZ +
      "1.5|r seconds\n and mana cost is 60,100,160,240,340,460"
  );
  SaveStr(
    gv_abY,
    5,
    lv_azn,
    S2S(gv_abb + "Lunar shot|r gains ") +
      gv_aaZ +
      "1|r second per level" +
      f_azb(100, 130, 170, 220, 285, 370)
  );
  lv_azn = lv_azn + 1;
  SaveInteger(gv_abY, 4, lv_azn, "Hjai");
  SaveStr(
    gv_abY,
    1,
    lv_azn,
    S2S(gv_abb + "Reclamation|r gains ") +
      gv_aaZ +
      "5%|r more life steal each level.\nScales with (damage dealt+ agi/6)" +
      f_azb(9, 12, 16, 22, 30, 38)
  );
  SaveStr(
    gv_abY,
    2,
    lv_azn,
    S2S(
      gv_abb +
        "Kudzu|r: slow is fixed, (level+3)/2 *Int +level/3 *Agi, base damage \n"
    ) +
      f_ayX(1077) +
      f_azb(75, 115, 155, 210, 280, 380)
  );
  SaveStr(
    gv_abY,
    3,
    lv_azn,
    S2S(gv_abb + "Ares Warcry|r: Damage Bonus: ") +
      f_ayZ(1300) +
      "Armor Bonus: 25% base armor " +
      f_ayX(1306) +
      f_azb(30, 40, 55, 75, 100, 135)
  );
  SaveStr(
    gv_abY,
    4,
    lv_azn,
    S2S(gv_abb + "Cat-like reflexes|r: ") +
      gv_abb +
      "15% 3x|r agi is fixed, only base damage scales\n" +
      f_ayX(1083)
  );
  SaveStr(
    gv_abY,
    5,
    lv_azn,
    S2S(gv_abb + "Reckless charge|r: ") +
      gv_aaZ +
      "15%|r miss chance and 2 second stun are fixed, and (level+3)/3 *Str +level/3 *Agi bonus damage, \nbase dmg: " +
      f_ayX(1071) +
      f_azb(60, 80, 110, 150, 200, 270)
  );
  lv_azn = lv_azn + 1;
  SaveInteger(gv_abY, 4, lv_azn, "Emoo");
  SaveStr(
    gv_abY,
    1,
    lv_azn,
    S2S(gv_abb + "Spear impetus|r gains ") +
      gv_aaZ +
      "7%|r of distance damage each level"
  );
  SaveStr(
    gv_abY,
    2,
    lv_azn,
    S2S(gv_abb + "Frenzy|r: each level- miss chance drops ") +
      gv_aaZ +
      "1%|r, mana cost drops " +
      gv_aaZ +
      "5%|r, and damage scales up by " +
      gv_aaZ +
      "7%|r "
  );
  SaveStr(
    gv_abY,
    3,
    lv_azn,
    S2S(gv_abb + "Puncture|r: always ") +
      gv_aaZ +
      "17%|r, each level increases creep stun " +
      gv_aaZ +
      "0.5|r seconds and titan stun 0.2 seconds "
  );
  SaveStr(
    gv_abY,
    4,
    lv_azn,
    S2S(gv_abb + "Precise throw|r: always ") +
      gv_abb +
      "20%|r, each level increases bonus damage another " +
      gv_aaZ +
      "30%"
  );
  SaveStr(
    gv_abY,
    5,
    lv_azn,
    S2S(gv_abb + "Exploding Spear|r always ") +
      gv_aaZ +
      "3x|r Int over " +
      gv_aaZ +
      "8|r seconds, cd drops 1 (about 5%) sec per level, base dmg \n" +
      f_ayX(1119)
  );
  lv_azn = lv_azn + 1;
  SaveInteger(gv_abY, 4, lv_azn, "Udea");
  SaveStr(
    gv_abY,
    1,
    lv_azn,
    S2S(gv_abb + "Valor|r: always regen ") +
      gv_abb +
      "1%|r of target max hp/sec, plus an level component of: 15, 24, 37, 54, 75, 100"
  );
  SaveStr(
    gv_abY,
    2,
    lv_azn,
    S2S(
      gv_abb +
        "Charge|r stuns for (level+1)/2 seconds and deals (level+1)/2 *Strength damage, \n base dmg: "
    ) + f_ayX(1107)
  );
  SaveStr(
    gv_abY,
    3,
    lv_azn,
    S2S(gv_abb + "Blood drunk|r gains ") +
      gv_aaZ +
      "0.5x|r damage and 10 mana cost every level"
  );
  SaveStr(
    gv_abY,
    4,
    lv_azn,
    S2S(
      gv_abb +
        "Taunt|r: fixed cooldown, duration, range- armor gain/reduction of 5, 9, 14, 20, 27, 35"
    )
  );
  SaveStr(
    gv_abY,
    5,
    lv_azn,
    S2S(
      gv_abb + "Phalanx|r: always 500 range, mana cost= level x4 /sec, gains "
    ) +
      gv_abb +
      "5%|r evasion and spell resist per level"
  );
  lv_azn = lv_azn + 1;
  SaveInteger(gv_abY, 4, lv_azn, "Hamg");
  SaveStr(
    gv_abY,
    1,
    lv_azn,
    S2S(
      gv_abb +
        "Life Leech|r: Spelldamage/(10-level) per wave for 10 waves, channeling base dmg \n"
    ) + f_ayX(1191)
  );
  SaveStr(
    gv_abY,
    2,
    lv_azn,
    S2S(gv_abb + "Mojo|r costs ") +
      gv_aaZ +
      "30|r *level hp to cast, heal for " +
      gv_aaZ +
      "10%|r *level damage done, benefits from (2+level)/3 *spell dmg, base dmg \n" +
      f_ayX(1179)
  );
  SaveStr(
    gv_abY,
    3,
    lv_azn,
    S2S(gv_abb + "Wail of the Banshee|r Adds ") +
      gv_aaZ +
      "4x|r Spell damage to hp before calculating %, Each level inc %hp damage done by " +
      gv_aaZ +
      "5%|r, enemy atk reduction 7%, duration by 2 seconds, and life cost by 75.\n"
  );
  SaveStr(
    gv_abY,
    4,
    lv_azn,
    S2S(gv_abb + "Grave Dance|r: ") +
      gv_abb +
      "3|r ghosts for " +
      gv_aaZ +
      "15|r seconds, \n max hp % damage is " +
      f_ayZ(1222)
  );
  SaveStr(
    gv_abY,
    5,
    lv_azn,
    S2S(gv_abb + "Voodoo|r: always ") +
      gv_aaZ +
      "50%|r slow and " +
      gv_aaZ +
      "1x|r spell damage/sec for " +
      gv_aaZ +
      "5|r seconds, \n base dmg " +
      f_ayX(1215)
  );
  lv_azn = lv_azn + 1;
  SaveInteger(gv_abY, 4, lv_azn, "Hblm");
  SaveStr(
    gv_abY,
    1,
    lv_azn,
    S2S(gv_abb + "Frozen Vestment|r: 5, 11, 20, 32, 47, 65")
  );
  SaveStr(
    gv_abY,
    2,
    lv_azn,
    S2S(gv_abb + "Ice Prison|r: deals ") +
      gv_aaZ +
      "24%|r bonus dmg each for frostbite and aqua spike debuffs \n always " +
      gv_aaZ +
      "3|r sec immobilize, (level+3)/4. *spell damage, \n base dmg " +
      f_ayX(1161)
  );
  SaveStr(
    gv_abY,
    3,
    lv_azn,
    S2S(gv_abb + "Aqua spike|r: deals ") +
      gv_aaZ +
      "40%|r bonus to Frostbitten foes, (level+4)/5. *spell damagebase,\n base dmg: " +
      f_ayX(1167)
  );
  SaveStr(
    gv_abY,
    4,
    lv_azn,
    S2S(gv_abb + "Frostbite|r: always ") +
      gv_abb +
      "5|r seconds, scales with (level+2)/3 *spell damage, \n base dmg" +
      f_ayX(1155)
  );
  SaveStr(
    gv_abY,
    5,
    lv_azn,
    S2S(gv_abb + "Blizzard|r: always 30 waves, ") +
      gv_aaZ +
      "30%|r extra dmg during Frostbite, each wave benefits from 1/(15-level)*spell damage, \n base dmg " +
      f_ayX(1173)
  );
  lv_azn = lv_azn + 1;
  SaveInteger(gv_abY, 4, lv_azn, "Hpal");
  SaveStr(
    gv_abY,
    1,
    lv_azn,
    S2S(gv_abb + "Hammer|r: Stun ") +
      gv_aaZ +
      "2|r seconds and Str scales " +
      gv_aaZ +
      "0.3|r per level, base dmg \n" +
      f_ayX(1885) +
      f_azb(90, 120, 160, 210, 270, 340)
  );
  SaveStr(
    gv_abY,
    2,
    lv_azn,
    S2S(
      gv_abb +
        "Holy Light|r: (level+2)/4. *(Int + spell heal), AOE and %dmg fixed, base heal \n"
    ) +
      f_ayX(1035) +
      f_azb(60, 90, 140, 210, 300, 410)
  );
  SaveStr(
    gv_abY,
    3,
    lv_azn,
    S2S(
      gv_abb +
        "Favor|r: gain 5, 10, 17, 26, 37, 50 armor aura for nearby allies"
    )
  );
  SaveStr(
    gv_abY,
    4,
    lv_azn,
    S2S(
      gv_abb +
        "Holy Shield|r: benefits from (Int+Str)*ablevel/4 +Spellheal \nshield takes hits after armor reduction, base shield \n"
    ) +
      f_ayX(1041) +
      f_azb(130, 180, 250, 340, 450, 580)
  );
  SaveStr(
    gv_abY,
    5,
    lv_azn,
    S2S(gv_abb + "Blinding Flare|r: 200 AOE, 7 seconds, and ") +
      gv_aaZ +
      "45%|r miss chance at all levels\n(level+5)/3x Int, (level+2)/3)x SD, base dmg \n" +
      f_ayX(1023) +
      f_azb(60, 90, 135, 175, 270, 360)
  );
  lv_azn = lv_azn + 1;
  SaveInteger(gv_abY, 4, lv_azn, "Ulic");
  SaveStr(
    gv_abY,
    1,
    lv_azn,
    S2S(
      gv_abb +
        "Burning Vestment|r: 4, 8, 15, 25, 38, 52, 65 armor (1 free level from gear/equip), \ndamage return benefits from SD/10, base \n"
    ) + f_ayX(1125)
  );
  SaveStr(
    gv_abY,
    2,
    lv_azn,
    S2S(gv_abb + "Firedrop|r: Makes enemies take ") +
      gv_aaZ +
      "12%|r per level extra fire damage, 50*ablevel +spelldmg dealt over " +
      gv_aaZ +
      "7|r seconds,\nspelldmg +base dmg dealt immediately \n" +
      f_ayX(1149) +
      f_azb(110, 165, 250, 370, 560, 835)
  );
  SaveStr(
    gv_abY,
    3,
    lv_azn,
    S2S(
      gv_abb +
        "Scald|r: reduce armor by 3, 7, 11, 16, 21, 28; deals 1/3 of damage immediately and remainder over 8 seconds\n Scales with (level+2)/3 *spell damage, \nbase dmg "
    ) +
      f_ayX(1137) +
      f_azb(50, 75, 115, 170, 250, 380)
  );
  SaveStr(
    gv_abY,
    4,
    lv_azn,
    S2S(
      gv_abb +
        "Meteor|r: always 3 sec stun, scales with (level+2)/3 *spell damage, mana cost follows base dmg \n"
    ) + f_ayX(1131)
  );
  SaveStr(
    gv_abY,
    5,
    lv_azn,
    S2S(
      gv_abb +
        "Firestorm|r: always 10 waves and 900 AOE, each wave gains 1/(10-level) *spelldamage, \nbase dmg/wave "
    ) + f_ayX(1143)
  );
  lv_azn = lv_azn + 1;
  SaveInteger(gv_abY, 4, lv_azn, "Oshd");
  SaveStr(
    gv_abY,
    1,
    lv_azn,
    S2S(gv_abb + "Heal|r: always ") +
      gv_abb +
      "1x|r Int, base heal \n" +
      f_ayX(1059) +
      f_azb(95, 110, 145, 195, 265, 345)
  );
  SaveStr(
    gv_abY,
    2,
    lv_azn,
    S2S(
      gv_abb + "Give and Take|r: heal nearby allies based on damage dealt +"
    ) +
      gv_aaZ +
      "Int/4|r, \nheal for " +
      f_ayZ(1047) +
      f_azb(10, 16, 25, 37, 52, 70)
  );
  SaveStr(
    gv_abY,
    3,
    lv_azn,
    S2S(gv_abb + "Hand of God|r: 200 AOE, each level boosts duration by ") +
      gv_abb +
      "1 second|r and slow magnitude " +
      gv_abb +
      "4%|r, scales with (level+1)/2 *SD \nbase dmg " +
      f_ayX(1065) +
      f_azb(175, 235, 230, 430, 580, 800)
  );
  SaveStr(
    gv_abY,
    4,
    lv_azn,
    S2S(
      gv_abb +
        "Sanctuary|r: gains 7% magic resistence per level and base heal improves 50%\nDivisor for (spellheal+2x Int) regen drops 1.5 each level"
    )
  );
  SaveStr(
    gv_abY,
    5,
    lv_azn,
    S2S(gv_abb + "Rebirth|r: revive an ally with % hp \n") + f_ayZ(1053)
  );
  lv_azn = lv_azn + 1;
  SaveInteger(gv_abY, 4, lv_azn, "Hant");
  SaveStr(
    gv_abY,
    1,
    lv_azn,
    S2S(gv_abb + "Energize|r: increases by ") +
      gv_aaZ +
      "1%|r current mana per level, costs " +
      gv_aba +
      "1/7|rth of damage as added mana cost" +
      f_azb(10, 16, 25, 38, 55, 80)
  );
  SaveStr(
    gv_abY,
    2,
    lv_azn,
    S2S(gv_abb + "Reverberate|r: Scaling ") +
      gv_aaZ +
      "(Level+4)/5|r x (Int+SD) damage, base dmg \n" +
      f_ayX(999)
  );
  SaveStr(
    gv_abY,
    3,
    lv_azn,
    S2S(
      gv_abb +
        "Mental barrrier|r: each point of mana worth .85, 1.4, 2.0, 2.65, 3.35, 4.1 hit points, mana loss before armor"
    )
  );
  SaveStr(
    gv_abY,
    4,
    lv_azn,
    S2S(
      gv_abb +
        "Mind Blast|r: (Int+Spell damage) *(level+2)/3 scaling damage, base dmg \n"
    ) + f_ayX(1005)
  );
  SaveStr(
    gv_abY,
    5,
    lv_azn,
    S2S(gv_abb + "Mark of Magus|r: each point gives ") +
      gv_abb +
      "2|r seconds duration and " +
      gv_abb +
      "3%|r spell dmg taken"
  );
  lv_azn = lv_azn + 1;
  SaveInteger(gv_abY, 4, lv_azn, "Ekee");
  SaveStr(
    gv_abY,
    1,
    lv_azn,
    S2S(gv_abb + "Rejuvenation|r: Heals for ") +
      gv_abb +
      "100 +lvl*200 +(SH+int)*(lvl+2)/4|r and cd drops about 10% per level."
  );
  SaveStr(
    gv_abY,
    2,
    lv_azn,
    S2S(
      gv_abb +
        "Nature's Wrath|r: duration 2+Level +-1 seconds, reduced for boss or Titan, armor reduction 5*lvl*(lvl+1), and dps=20 +5*lvl*(lvl+1) +(SD+int)*(lvl+2)/15"
    )
  );
  SaveStr(
    gv_abY,
    3,
    lv_azn,
    S2S(
      gv_abb +
        "Call of the Wild|r: inc allied attack by 24, 30, 37, 46, 58, 74 %"
    )
  );
  SaveStr(
    gv_abY,
    4,
    lv_azn,
    S2S(
      gv_abb +
        "Chain Lightning|r: each level gains half bounce, scales with  (Int+SD)*(level+2)/4, actually reduces 5% per bounce, base dmg \n"
    ) + f_ayX(1101)
  );
  SaveStr(
    gv_abY,
    5,
    lv_azn,
    S2S(
      gv_abb +
        "Storm Caller|r: Channeling, Heals by 35, 50, 75, 110, 155, 215  "
    ) +
      gv_abb +
      "+SH*(lvl+3)/25|r hp/sec \n Damage scales with (level+3)/4 *spelldmg,\n base dmg: " +
      f_ayX(1095)
  );
  lv_azn = lv_azn + 1;
  SaveInteger(gv_abY, 4, lv_azn, "Edem");
  SaveStr(
    gv_abY,
    1,
    lv_azn,
    S2S(
      gv_abb +
        "Stalk|r: Fixed duration and movespeed, 10-15% cd reduction per level, dmg scales by an additional "
    ) +
      gv_aaZ +
      "0.5x|r atk per level"
  );
  SaveStr(
    gv_abY,
    2,
    lv_azn,
    S2S(gv_abb + "Wounding|r: For every ") +
      gv_aaZ +
      "(45-5*lvl)%|r hp missing deal " +
      gv_aaZ +
      "15*lvl|r physical bonus damage."
  );
  SaveStr(
    gv_abY,
    3,
    lv_azn,
    S2S(
      gv_abb +
        "Garrote|r: fixed MS slow, atk reduction gains 5% per level, gains "
    ) +
      gv_aaZ +
      "0.5x|r str and " +
      gv_aaZ +
      "0.3x|r agi per level, also slight cd reduction each level, base dmg \n" +
      f_ayX(1203)
  );
  SaveStr(
    gv_abY,
    4,
    lv_azn,
    S2S(
      gv_abb + "Kunai Scren|r: miss chance and attack speed reduction grow "
    ) +
      gv_aaZ +
      "6%|r per level, cd drops half a second, str component Str*(lvl+3)/3, base dmg \n" +
      f_ayX(1209)
  );
  SaveStr(
    gv_abY,
    5,
    lv_azn,
    S2S(gv_abb + "Shadow Image|r: each level increases chance/attack by ") +
      gv_aaZ +
      "5%|r and decreases cooldown by " +
      gv_aaZ +
      "0.3|r seconds."
  );
  lv_azn = 1;
  gv_aaI[lv_azn] = "A074";
  lv_azn = lv_azn + 1;
  gv_aaI[lv_azn] = "A06R";
  lv_azn = lv_azn + 1;
  gv_aaI[lv_azn] = "A03Q";
  lv_azn = lv_azn + 1;
  gv_aaI[lv_azn] = "A07D";
  lv_azn = lv_azn + 1;
  gv_aaI[lv_azn] = "A03Z";
  lv_azn = lv_azn + 1;
  gv_aaI[lv_azn] = "A03P";
  lv_azn = lv_azn + 1;
  gv_aaI[lv_azn] = "A046";
  lv_azn = lv_azn + 1;
  gv_aaI[lv_azn] = "A03X";
  lv_azn = lv_azn + 1;
  gv_aaI[lv_azn] = "A03V";
  lv_azn = lv_azn + 1;
  gv_aaI[lv_azn] = "A04E";
  lv_azn = lv_azn + 1;
  gv_aaI[lv_azn] = "A03T";
  lv_azn = lv_azn + 1;
  gv_aaI[lv_azn] = "A03R";
  lv_azn = lv_azn + 1;
  gv_aaI[lv_azn] = "A05C";
  lv_azn = lv_azn + 1;
  gv_aaI[lv_azn] = "A05D";
  lv_azn = lv_azn + 1;
  gv_aaI[lv_azn] = "A05E";
  lv_azn = lv_azn + 1;
  gv_aaI[lv_azn] = "A05B";
  lv_azn = lv_azn + 1;
  gv_aaI[lv_azn] = "A05I";
  lv_azn = lv_azn + 1;
  gv_aaI[lv_azn] = "A06L";
  lv_azn = lv_azn + 1;
  gv_aaI[lv_azn] = "A06M";
  lv_azn = lv_azn + 1;
  gv_aaI[lv_azn] = "A06P";
  lv_azn = lv_azn + 1;
  gv_aaI[lv_azn] = "A06Q";
  lv_azn = lv_azn + 1;
  gv_aaI[lv_azn] = "A06K";
  lv_azn = lv_azn + 1;
  gv_aaI[lv_azn] = "A076";
  lv_azn = lv_azn + 1;
  gv_aaI[lv_azn] = "A070";
  lv_azn = lv_azn + 1;
  gv_aaI[lv_azn] = "A07C";
  lv_azn = lv_azn + 1;
  gv_aaI[lv_azn] = "A071";
  lv_azn = lv_azn + 1;
  gv_aaI[lv_azn] = "A065";
  lv_azn = lv_azn + 1;
  gv_aaI[lv_azn] = "A068";
  lv_azn = lv_azn + 1;
  gv_aaI[lv_azn] = "A067";
  lv_azn = lv_azn + 1;
  gv_aaI[lv_azn] = "A066";
  lv_azn = lv_azn + 1;
  gv_aaI[lv_azn] = "A053";
  lv_azn = lv_azn + 1;
  gv_aaI[lv_azn] = "A051";
  lv_azn = lv_azn + 1;
  gv_aaI[lv_azn] = "A050";
  lv_azn = lv_azn + 1;
  gv_aaI[lv_azn] = "A048";
  lv_azn = lv_azn + 1;
  gv_aaI[lv_azn] = "A08H";
  lv_azn = lv_azn + 1;
  gv_aaI[lv_azn] = "A041";
  lv_azn = lv_azn + 1;
  gv_aaI[lv_azn] = "A06F";
  lv_azn = lv_azn + 1;
  gv_aaI[lv_azn] = "A06E";
  lv_azn = lv_azn + 1;
  gv_aaI[lv_azn] = "A06D";
  lv_azn = lv_azn + 1;
  gv_aaI[lv_azn] = "A06G";
  lv_azn = lv_azn + 1;
  gv_aaI[lv_azn] = "A078";
  lv_azn = lv_azn + 1;
  gv_aaI[lv_azn] = "A04U";
  lv_azn = lv_azn + 1;
  gv_aaI[lv_azn] = "A04V";
  lv_azn = lv_azn + 1;
  gv_aaI[lv_azn] = "A05J";
  lv_azn = lv_azn + 1;
  gv_aaI[lv_azn] = "A05K";
  lv_azn = lv_azn + 1;
  gv_aaI[lv_azn] = "A05L";
  lv_azn = lv_azn + 1;
  gv_aaI[lv_azn] = "A05M";
  lv_azn = lv_azn + 1;
  gv_aaI[lv_azn] = "A05N";
  lv_azn = lv_azn + 1;
  gv_aaI[lv_azn] = "A05S";
  lv_azn = lv_azn + 1;
  gv_aaI[lv_azn] = "A05R";
  lv_azn = lv_azn + 1;
  gv_aaI[lv_azn] = "A04Z";
  lv_azn = lv_azn + 1;
  gv_aaI[0] = lv_azn;
}
function f_azo() {
  var lv_azp = GetPlayerId(GetOwningPlayer(GetTriggerUnit()));
  var lv_azq = GetLearnedSkill();
  var lv_azr = 1;
  var lv_azs = GetUnitAbilityLevel(GetTriggerUnit(), lv_azq);
  if (lv_azq == 0 && GetSpellAbilityId() != 0) {
    lv_azq = GetSpellAbilityId();
    lv_azs = GetUnitAbilityLevel(GetTriggerUnit(), lv_azq) - 1;
  }
  BlzSetUnitAbilityCooldown(
    GetTriggerUnit(),
    lv_azq,
    lv_azs,
    BlzGetAbilityCooldown(lv_azq, lv_azs) / gv_aan[lv_azp]
  );
  if (
    lv_azq == "A07C" &&
    GetInventoryIndexOfItemTypeBJ(GetTriggerUnit(), "tels") +
      GetInventoryIndexOfItemTypeBJ(GetTriggerUnit(), "rej4") >
      0
  ) {
    BlzSetUnitAbilityCooldown(
      GetTriggerUnit(),
      "A07C",
      lv_azs,
      (BlzGetAbilityCooldown("A07C", lv_azs) * 0.7) / gv_aan[lv_azp]
    );
  }
}
function f_azt() {
  var lv_azu;
  var lv_azv = 0;
  lv_azu = "|cffffcc00for all|r: any gear or equip	";
  lv_azu = S2S(
    lv_azu +
      "|cffffcc00comboes|r: hidecap+leathercap+plain dagger;   gold ring+(mighty gauntlet or iron arm band or iron jav)   "
  );
  lv_azu = S2S(
    lv_azu +
      "comboes:leathercap+(mighty gauntlet or iron arm band);  robe mind+(galerus or gold sash or cori helm)	"
  );
  lv_azu = S2S(
    lv_azu +
      "|cffffcc00single booster|r: starlight charm; thanatos scept; tela boar skewer;	odysseus' armor	"
  );
  gv_aaW = S2S(
    lv_azu +
      "single booster: sacred olymp armor-sword, hallowed regalia, any hermes-posiedon, any str 50-85	"
  );
  lv_azu = "";
  gv_aaP[1] = GetRectCenter(gv_aep);
  gv_aaP[2] = GetRectCenter(gv_adw);
  gv_aaP[3] = GetRectCenter(gv_adC);
  gv_aaP[4] = GetRectCenter(gv_afi);
  lv_azu =
    "-copy: copies all enemies (non-titan) within 300 of ur hero, cd scales with player count \n-p: shows players on multiboard \n-q: shows quests on multiboard\n";
  lv_azu = S2S(
    lv_azu +
      "-save: saves ur game, gives a code and also creates text file in Documents,Warcraft III,CustomMapData,TBR 2 \n"
  );
  gv_aaX = S2S(
    lv_azu +
      "-abinfo: shows how your abilities scale as you level them, mana costs not included for now \n-out: zooms out\n-show #: displays icon for player hero(check hp/heal)\n"
  );
  lv_azu = "# commands, -str, -agi, -int, -lvl, -gold, -honor, -demi";
  lv_azu = S2S(lv_azu + "\n-ion, -troll, -harpy, -naga, -soh, -ruby, -hof");
  gv_aaY = S2S(lv_azu + "\n-seal, -flawless, -pelt");
  lv_azu = "";
  gv_aau[0] = "tmsc";
  gv_aau[1] = "bzbe";
  gv_aau[2] = "tmmt";
  gv_aau[3] = "vddl";
  gv_aau[4] = "ches";
  gv_aau[5] = "tgxp";
  gv_aau[6] = "kybl";
  gv_aau[7] = "engs";
  gv_aau[8] = "uflg";
  gv_aau[9] = "dkfw";
  gv_aau[10] = "jpnt";
  gv_aau[11] = "cnhn";
  gv_aau[12] = "mgtk";
  gv_aau[14] = "k3m1";
  gv_aau[15] = "gopr";
  gv_aau[17] = "azhr";
  gv_aau[18] = "k3m3";
  f_ayT();
  f_azm();
  f_ayV();
  lv_azv = 0;
  do {
    if (lv_azv > 8) {
      break;
    }
    gv_abA[lv_azv] = DialogCreate();
    TriggerRegisterDialogEvent(gv_abk, gv_abA[lv_azv]);
    lv_azv = lv_azv + 1;
  } while (true);
  gv_aaK[21] = 2500;
  gv_aaJ[21] = 0;
  gv_aaK[22] = 15000;
  gv_aaJ[22] = 0;
  gv_aaK[23] = 25000;
  gv_aaJ[23] = 3;
  gv_aaK[24] = 50000;
  gv_aaJ[24] = 10;
  gv_aaK[25] = 125000;
  gv_aaJ[25] = 25;
  lv_azv = 1;
  do {
    if (lv_azv > 9) {
      break;
    }
    gv_aaV[lv_azv] = GetUnitName(gv_aaU[lv_azv]);
    lv_azv = lv_azv + 1;
  } while (true);
  gv_abD[1] = 3650;
  gv_abD[101] = 14400;
  gv_abD[2] = -11850;
  gv_abD[102] = 3150;
  gv_abD[3] = -8400;
  gv_abD[103] = 12500;
  gv_abD[4] = 3100;
  gv_abD[104] = -8150;
  gv_abD[5] = -8150;
  gv_abD[105] = -2600;
  gv_abD[6] = -2700;
  gv_abD[106] = -5100;
  gv_abD[7] = -2450;
  gv_abD[107] = -13300;
  gv_abD[8] = -12500;
  gv_abD[108] = -1500;
  gv_abD[9] = -13500;
  gv_abD[109] = 13000;
}
function f_azw(lv_azx) {
  var lv_azy = R2I(lv_azx * 2.55);
  if (lv_azy < 0) {
    lv_azy = 0;
  } else {
    if (lv_azy > 255) {
      lv_azy = 255;
    }
  }
  return lv_azy;
}
function f_azz(
  lv_azA,
  lv_azB,
  lv_azC,
  lv_azD,
  lv_azE,
  lv_azF,
  lv_azG,
  lv_azH,
  lv_azI,
  lv_azJ
) {
  bj_lastCreatedTextTag = CreateTextTag();
  SetTextTagText(bj_lastCreatedTextTag, lv_azA, lv_azF * 0.0023);
  SetTextTagPos(
    bj_lastCreatedTextTag,
    GetUnitX(lv_azB),
    GetUnitY(lv_azB),
    lv_azE
  );
  SetTextTagColor(
    bj_lastCreatedTextTag,
    f_azw(lv_azG),
    f_azw(lv_azH),
    f_azw(lv_azI),
    f_azw(100.0 - lv_azJ)
  );
  SetTextTagPermanent(bj_lastCreatedTextTag, false);
  SetTextTagVelocity(bj_lastCreatedTextTag, 0, lv_azD / 1803);
  SetTextTagLifespan(bj_lastCreatedTextTag, lv_azC);
  SetTextTagFadepoint(bj_lastCreatedTextTag, lv_azC - 0.4);
  return bj_lastCreatedTextTag;
}
function f_azK(lv_azL) {
  return gv_aam[GetPlayerId(GetOwningPlayer(lv_azL))];
}
function f_azM(lv_azN) {
  return gv_aan[GetPlayerId(GetOwningPlayer(lv_azN))];
}
function f_azO(lv_azP) {
  return gv_aan[GetPlayerId(GetOwningPlayer(lv_azP))] * 0.5 + 0.5;
}
function f_azQ() {
  var lv_azR = 0;
  var lv_azS;
  var lv_azT;
  var lv_azU;
  var lv_azV;
  var lv_azW;
  var lv_azX;
  do {
    if (lv_azR > 7) {
      break;
    }
    gv_aam[lv_azR] = 1 + 0.2 * I2R(f_ayQ(gv_alv[lv_azR]));
    gv_aan[lv_azR] = 1 + 0.1 * I2R(f_ayQ(gv_alv[lv_azR]));
    lv_azS = 0;
    lv_azV = 1;
    lv_azW = 1;
    do {
      if (lv_azS > 5) {
        break;
      }
      lv_azX = GetItemTypeId(UnitItemInSlot(gv_alv[lv_azR], lv_azS));
      lv_azT = 0;
      do {
        if (lv_azT > gv_aaE.getInt(1)) {
          break;
        }
        if (lv_azX == gv_aav.getInt(lv_azT)) {
          if (gv_aaC.getInt(lv_azT) > 0) {
            lv_azU = 1 - (gv_aaC.getInt(lv_azT) / 100) * gv_aan[lv_azR];
            lv_azV = lv_azV * lv_azU;
          }
          if (gv_aaD.getInt(lv_azT) > 0) {
            lv_azU = 1 - (gv_aaD.getInt(lv_azT) / 100) * gv_aan[lv_azR];
            lv_azW = lv_azW * lv_azU;
          }
          lv_azT = gv_aaE.getInt(1);
        }
        lv_azT = lv_azT + 1;
      } while (true);
      lv_azS = lv_azS + 1;
    } while (true);
    if (GetUnitAbilityLevel(gv_alv[lv_azR], "A04G") > 0) {
      lv_azV =
        lv_azV *
        (1 -
          ((7 + GetUnitAbilityLevel(gv_alv[lv_azR], "A03Q") * 6) *
            gv_aan[lv_azR]) /
            100);
    }
    if (GetUnitAbilityLevel(gv_alv[lv_azR], "A04P") > 0) {
      lv_azU = 0.9 - GetUnitAbilityLevel(gv_alv[lv_azR], "A04Q") * 0.05;
      lv_azW = lv_azW * lv_azU;
      lv_azV = lv_azV * lv_azU;
    }
    if (GetUnitAbilityLevel(gv_alv[lv_azR], "A09N") < 1) {
      UnitAddAbility(gv_alv[lv_azR], "A09N");
    }
    SetUnitAbilityLevel(gv_alv[lv_azR], "A09M", R2I(101 - lv_azV * 100));
    SetUnitAbilityLevel(gv_alv[lv_azR], "A01A", R2I(101 - lv_azW * 100));
    lv_azR = lv_azR + 1;
  } while (true);
}
function f_azY(lv_azZ) {
  var lv_aAa = GetUnitTypeId(gv_alv[lv_azZ]);
  var lv_aAb = 0;
  var lv_aAc = 1;
  if (gv_alv[lv_azZ] == null) {
    lv_aAa = GetUnitTypeId(gv_alv[lv_azZ + 16]);
  }
  do {
    if (lv_aAb > 12) {
      break;
    }
    if (LoadInteger(gv_abY, 4, lv_aAb) == lv_aAa) {
      do {
        if (lv_aAc > 5) {
          break;
        }
        DisplayTimedTextToPlayer(
          Player(lv_azZ),
          0,
          0,
          30,
          LoadStr(gv_abY, lv_aAc, lv_aAb)
        );
        lv_aAc = lv_aAc + 1;
      } while (true);
      lv_aAb = 12;
    }
    lv_aAb = lv_aAb + 1;
  } while (true);
}
function f_aAd() {
  var lv_aAe = GetFilterUnit();
  if (
    GetUnitState(lv_aAe, UNIT_STATE_LIFE) > 0.405 &&
    IsUnitEnemy(lv_aAe, GetOwningPlayer(gv_aad)) &&
    gv_aaf == 1
  ) {
    CreateUnit(
      GetOwningPlayer(lv_aAe),
      GetUnitTypeId(lv_aAe),
      GetUnitX(lv_aAe),
      GetUnitY(lv_aAe),
      270
    );
    gv_aaf = 0;
  }
  lv_aAe = null;
  return false;
}
function f_aAf() {
  var lv_aAg = GetFilterUnit();
  if (
    GetUnitState(lv_aAg, UNIT_STATE_LIFE) > 0.405 &&
    gv_aaf > 0 &&
    IsUnitEnemy(lv_aAg, GetOwningPlayer(gv_aad))
  ) {
    if (
      IsUnitType(lv_aAg, UNIT_TYPE_HERO) == false &&
      IsUnitType(lv_aAg, UNIT_TYPE_GIANT) == false &&
      IsUnitType(lv_aAg, UNIT_TYPE_STRUCTURE) == false &&
      lv_aAg != gv_alc
    ) {
      CreateUnit(
        GetOwningPlayer(lv_aAg),
        GetUnitTypeId(lv_aAg),
        GetUnitX(lv_aAg),
        GetUnitY(lv_aAg),
        270
      );
      gv_aaf = gv_aaf - 1;
    }
  }
  lv_aAg = null;
  return false;
}
function f_aAh() {
  var lv_aAi = GetUnitTypeId(GetFilterUnit());
  return lv_aAi == "nfnp" || lv_aAi == "nfoh";
}
function f_aAj(lv_aAk) {
  if (
    GetInventoryIndexOfItemTypeBJ(lv_aAk, "tgxp") +
      GetInventoryIndexOfItemTypeBJ(lv_aAk, "tmsc") +
      GetInventoryIndexOfItemTypeBJ(lv_aAk, "jpnt") >
    0
  ) {
    DestroyEffect(AddSpecialEffectTarget(gv_amC, lv_aAk, "origin"));
    SetUnitState(
      lv_aAk,
      UNIT_STATE_MANA,
      GetUnitState(lv_aAk, UNIT_STATE_MANA) +
        (GetUnitState(lv_aAk, UNIT_STATE_MAX_MANA) / 200) *
          (f_azM(lv_aAk) - 0.7)
    );
  }
}
function f_aAl(lv_aAm, gv_aaj) {
  if (GetInventoryIndexOfItemTypeBJ(lv_aAm, "cnhn") > 0) {
    SetUnitState(
      lv_aAm,
      UNIT_STATE_LIFE,
      GetUnitState(lv_aAm, UNIT_STATE_LIFE) + gv_aaj * f_azM(lv_aAm) * 0.05
    );
  }
}
function f_aAn(lv_aAo) {
  var lv_aAp = GetPlayerId(GetOwningPlayer(lv_aAo));
  var lv_aAq = 0;
  var lv_aAr = 1;
  if (GetInventoryIndexOfItemTypeBJ(gv_alv[lv_aAp], "oslo") > 0) {
    lv_aAq = 7;
  } else {
    if (GetInventoryIndexOfItemTypeBJ(gv_alv[lv_aAp], "oven") > 0) {
      lv_aAq = 9;
    }
  }
  if (GetRandomInt(0, 100) < lv_aAq * gv_aan[lv_aAp]) {
    lv_aAr = 1 + 1.2 * gv_aam[lv_aAp] * GetRandomReal(0.85, 1.15);
  }
  return lv_aAr;
}
function f_aAs(lv_aAt, lv_aAu, lv_aAv) {
  SetItemCharges(
    CreateItem(
      lv_aAu,
      GetUnitX(gv_alv[lv_aAv]) + GetRandomReal(-50, 50),
      GetUnitY(gv_alv[lv_aAv]) + GetRandomReal(-50, 50)
    ),
    IMaxBJ(IMinBJ(lv_aAt, 9), 1)
  );
}
function f_aAw() {
  var lv_aAx = GetPlayerId(GetTriggerPlayer());
  var lv_aAy;
  var lv_aAz = GetEventPlayerChatString();
  var lv_aAA = false;
  if (lv_aAz == "-copyt" || lv_aAz == "-copy") {
    if (gv_aat.getInt(lv_aAx) >= 1) {
      gv_aad = gv_alv[lv_aAx];
      gv_aaM = GetUnitLoc(gv_aad);
      gv_aaQ = GetUnitsInRangeOfLocMatching(800, gv_aaM, Condition(f_aAh));
      bj_groupCountUnits = 0;
      ForGroup(gv_aaQ, CountUnitsInGroupEnum);
      DestroyGroup(gv_aaQ);
      if (bj_groupCountUnits < 1) {
        if (lv_aAz == "-copyt" && f_ayQ(gv_aad) > 2) {
          gv_aaf = 1;
          gv_aaQ = GetUnitsInRangeOfLocMatching(
            I2R(450 + 30 * f_ayQ(gv_aad)),
            gv_aaM,
            Condition(f_aAd)
          );
        } else {
          if (lv_aAz == "-copy") {
            gv_aaf = R2I(12 * gv_aam[lv_aAx] * gv_aan[lv_aAx]);
            gv_aaQ = GetUnitsInRangeOfLocMatching(
              I2R(300 + 50 * f_ayQ(gv_aad)),
              gv_aaM,
              Condition(f_aAf)
            );
          }
        }
        gv_aat[lv_aAx] = gv_aat.getInt(lv_aAx) - 1;
      } else {
        DisplayTextToPlayer(
          GetTriggerPlayer(),
          0,
          0,
          "Cannot copy near a fountain"
        );
      }
      RemoveLocation(gv_aaM);
      DestroyGroup(gv_aaQ);
      gv_aad = null;
    } else {
      DisplayTextToPlayer(
        Player(lv_aAx),
        0,
        0,
        "Copy command is cooling down."
      );
    }
  } else {
    if (lv_aAz == "-dbl" && f_ayQ(gv_alv[lv_aAx]) > 0 && lv_aAA) {
      gv_aak = 2;
      DisplayTextToPlayer(GetTriggerPlayer(), 0, 0, "double buff");
    } else {
      if (lv_aAz == "-tpl" && f_ayQ(gv_alv[lv_aAx]) > 0 && lv_aAA) {
        gv_aak = 3;
        DisplayTextToPlayer(GetTriggerPlayer(), 0, 0, "triple buff");
      } else {
        if (lv_aAz == "-ez" && f_ayQ(gv_alv[lv_aAx]) > 0 && lv_aAA) {
          gv_aak = 1.5;
          DisplayTextToPlayer(
            GetTriggerPlayer(),
            0,
            0,
            "50% bonus exp and gold"
          );
        } else {
          if (lv_aAz == "-normal" || lv_aAz == "-ezoff") {
            gv_aak = 1;
            DisplayTextToPlayer(GetTriggerPlayer(), 0, 0, "reverted to normal");
          } else {
            if (
              SubString(lv_aAz, 0, 5) == "-demi" &&
              (f_ayQ(gv_alv[lv_aAx]) > 0 || gv_abc)
            ) {
              gv_aal = S2R(SubString(lv_aAz, 6, 9));
              if (gv_aal < 1) {
                gv_aal = 1;
              }
              DisplayTimedTextToPlayer(
                GetTriggerPlayer(),
                0,
                0,
                5,
                R2S(gv_aal)
              );
            } else {
              if (SubString(lv_aAz, 0, 5) == "-show") {
                lv_aAy = S2I(SubString(lv_aAz, 6, 9)) - 1;
                if (lv_aAy != lv_aAx && gv_alv[lv_aAy] != null) {
                  SetPlayerAllianceBJ(
                    Player(lv_aAy),
                    ALLIANCE_SHARED_ADVANCED_CONTROL,
                    true,
                    Player(lv_aAx)
                  );
                  SetPlayerAllianceBJ(
                    Player(lv_aAy),
                    ALLIANCE_SHARED_CONTROL,
                    false,
                    Player(lv_aAx)
                  );
                  DisplayTimedTextToPlayer(
                    GetTriggerPlayer(),
                    0,
                    0,
                    5,
                    S2S(
                      "Can now see the icon for " +
                        GetPlayerName(Player(lv_aAy))
                    )
                  );
                } else {
                  DisplayTimedTextToPlayer(
                    GetTriggerPlayer(),
                    0,
                    0,
                    5,
                    S2S("failed for " + I2S(lv_aAy + 1)) +
                      " and " +
                      I2S(lv_aAx + 1)
                  );
                }
              } else {
                if (SubString(lv_aAz, 0, 5) == "-hide") {
                  lv_aAy = S2I(SubString(lv_aAz, 6, 9)) - 1;
                  if (lv_aAy != lv_aAx && gv_alv[lv_aAy] != null) {
                    SetPlayerAllianceBJ(
                      Player(lv_aAy),
                      ALLIANCE_SHARED_ADVANCED_CONTROL,
                      false,
                      Player(lv_aAx)
                    );
                    DisplayTimedTextToPlayer(
                      GetTriggerPlayer(),
                      0,
                      0,
                      5,
                      S2S("hid icon for " + GetPlayerName(Player(lv_aAy)))
                    );
                  }
                } else {
                  if (lv_aAz == "-bh" && lv_aAA) {
                    lv_aAy = R2I(
                      GetPlayerState(
                        GetTriggerPlayer(),
                        PLAYER_STATE_RESOURCE_GOLD
                      ) / 60000
                    );
                    SetPlayerState(
                      GetTriggerPlayer(),
                      PLAYER_STATE_RESOURCE_GOLD,
                      GetPlayerState(
                        GetTriggerPlayer(),
                        PLAYER_STATE_RESOURCE_GOLD
                      ) -
                        lv_aAy * 60000
                    );
                    AdjustPlayerStateBJ(
                      R2I(lv_aAy * gv_aan[GetPlayerId(GetTriggerPlayer())]),
                      GetTriggerPlayer(),
                      PLAYER_STATE_RESOURCE_LUMBER
                    );
                    DisplayTextToPlayer(
                      GetTriggerPlayer(),
                      0,
                      0,
                      S2S("You bought " + I2S(lv_aAy)) + " honor"
                    );
                  } else {
                    if (lv_aAz == "-book" || lv_aAz == "-  ") {
                      if (gv_aat.getInt(lv_aAx) > 2) {
                        DisplayTextToPlayer(GetTriggerPlayer(), 0, 0, gv_aaW);
                      } else {
                        DisplayTextToPlayer(GetTriggerPlayer(), 0, 0, "-");
                      }
                    } else {
                      if (lv_aAz == "-abinfo") {
                        f_azY(lv_aAx);
                      } else {
                        if (lv_aAz == "-ab") {
                          DisplayTimedTextToPlayer(
                            Player(lv_aAx),
                            0,
                            0,
                            10,
                            S2S(R2S(gv_aam[lv_aAx]) + "  ") +
                              R2S(gv_aan[lv_aAx])
                          );
                        } else {
                          if (lv_aAz == "-reset") {
                            f_azm();
                          } else {
                            if (lv_aAz == "-beta") {
                              DisableTrigger(gv_ajS);
                              gv_abc = true;
                              DisplayTextToPlayer(
                                GetTriggerPlayer(),
                                0,
                                0,
                                "beta-mode activated, 30 seconds kick deactivated, but no saving"
                              );
                            } else {
                              if (lv_aAz == "-cc" || lv_aAz == "-commands") {
                                DisplayTextToPlayer(
                                  GetTriggerPlayer(),
                                  0,
                                  0,
                                  gv_aaX
                                );
                                if (gv_abc) {
                                  DisplayTextToPlayer(
                                    GetTriggerPlayer(),
                                    0,
                                    0,
                                    gv_aaY
                                  );
                                }
                              } else {
                                if (lv_aAz == "-titan" || lv_aAz == "-titans") {
                                  lv_aAy = 1;
                                  do {
                                    if (lv_aAy > 9) {
                                      break;
                                    }
                                    if (GetWidgetLife(gv_aaU[lv_aAy]) > 10) {
                                      DisplayTextToPlayer(
                                        GetLocalPlayer(),
                                        0,
                                        0,
                                        S2S(
                                          gv_aaV[lv_aAy] +
                                            ": is |cff00ff00Alive|r"
                                        )
                                      );
                                    } else {
                                      DisplayTextToPlayer(
                                        GetLocalPlayer(),
                                        0,
                                        0,
                                        S2S(
                                          gv_aaV[lv_aAy] +
                                            ": is |cffff0000Dead|r"
                                        )
                                      );
                                    }
                                    if (gv_alx.getInt(lv_aAy + 7000) == 2) {
                                      DisplayTextToPlayer(
                                        GetLocalPlayer(),
                                        0,
                                        0,
                                        S2S(gv_alw[lv_aAy + 7200] + ": is next")
                                      );
                                      PingMinimap(
                                        gv_abD[lv_aAy],
                                        gv_abD[lv_aAy + 100],
                                        5
                                      );
                                    }
                                    lv_aAy = lv_aAy + 1;
                                  } while (true);
                                } else {
                                  if (lv_aAz == "-myloc") {
                                    DisplayTextToPlayer(
                                      GetTriggerPlayer(),
                                      0,
                                      0,
                                      S2S(
                                        R2S(GetUnitX(gv_alv[lv_aAx])) + " , "
                                      ) + R2S(GetUnitY(gv_alv[lv_aAx]))
                                    );
                                  } else {
                                    if (lv_aAz == "-plad  ") {
                                      PingMinimap(
                                        GetUnitX(gv_akI),
                                        GetUnitY(gv_akI),
                                        5
                                      );
                                    } else {
                                      if (
                                        lv_aAz == "-clear" ||
                                        lv_aAz == "-cl"
                                      ) {
                                        if (
                                          GetPlayerId(GetLocalPlayer()) ==
                                          lv_aAx
                                        ) {
                                          ClearTextMessages();
                                        }
                                      } else {
                                        if (lv_aAz == "-stats") {
                                          lv_aAz = S2S(
                                            "** Your Hero has  |cff00ff00Speed:|r " +
                                              I2S(
                                                R2I(
                                                  GetUnitMoveSpeed(
                                                    gv_alv[lv_aAx]
                                                  )
                                                )
                                              )
                                          );
                                          lv_aAz =
                                            S2S(
                                              lv_aAz +
                                                "\n|cffffffffExtra Spell |cff00ff00Damage:|r "
                                            ) +
                                            I2S(R2I(gv_alu[lv_aAx])) +
                                            "-" +
                                            I2S(
                                              R2I(
                                                f_ayQ(gv_alv[lv_aAx]) / gv_aak +
                                                  0.5
                                              )
                                            ) +
                                            ", |cffffd700xHealing:|r " +
                                            I2S(R2I(gv_alu[lv_aAx + 8]));
                                          lv_aAz =
                                            S2S(lv_aAz + ", Copies: ") +
                                            I2S(gv_aat.getInt(lv_aAx)) +
                                            "\n|cff00ff00Evasion|r: " +
                                            I2S(
                                              IMaxBJ(
                                                GetUnitAbilityLevel(
                                                  gv_alv[lv_aAx],
                                                  "A09M"
                                                ) - 1,
                                                0
                                              )
                                            );
                                          DisplayTimedTextToPlayer(
                                            Player(lv_aAx),
                                            0.4,
                                            -0.6,
                                            13,
                                            lv_aAz
                                          );
                                        }
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }
  if (lv_aAA && gv_abc) {
    if (lv_aAz == "") {
    } else {
      if (SubString(lv_aAz, 0, 5) == "-lvl ") {
        SetHeroLevelBJ(gv_alv[lv_aAx], S2I(SubString(lv_aAz, 5, 8)), false);
      } else {
        if (SubString(lv_aAz, 0, 3) == "-g ") {
          SetPlayerState(
            GetTriggerPlayer(),
            PLAYER_STATE_RESOURCE_GOLD,
            S2I(SubString(lv_aAz, 3, 10))
          );
        } else {
          if (SubString(lv_aAz, 0, 3) == "-l ") {
            SetPlayerState(
              GetTriggerPlayer(),
              PLAYER_STATE_RESOURCE_LUMBER,
              S2I(SubString(lv_aAz, 3, 10))
            );
          } else {
            if (SubString(lv_aAz, 0, 4) == "-str") {
              lv_aAy = S2I(SubString(lv_aAz, 4, 9));
              SetHeroStr(gv_alv[lv_aAx], lv_aAy, true);
            } else {
              if (SubString(lv_aAz, 0, 4) == "-agi") {
                lv_aAy = S2I(SubString(lv_aAz, 4, 9));
                SetHeroAgi(gv_alv[lv_aAx], lv_aAy, true);
              } else {
                if (SubString(lv_aAz, 0, 4) == "-int") {
                  lv_aAy = S2I(SubString(lv_aAz, 4, 9));
                  SetHeroInt(gv_alv[lv_aAx], lv_aAy, true);
                } else {
                  if (SubString(lv_aAz, 0, 3) == "-hp") {
                    lv_aAy = S2I(SubString(lv_aAz, 4, 9));
                    SetUnitState(gv_alv[lv_aAx], UNIT_STATE_LIFE, lv_aAy);
                  } else {
                    if (SubString(lv_aAz, 0, 3) == "-cd") {
                      UnitResetCooldown(gv_alv[lv_aAx]);
                    } else {
                      if (SubString(lv_aAz, 0, 5) == "-gold") {
                        lv_aAy = S2I(SubString(lv_aAz, 5, 12));
                        SetPlayerState(
                          Player(lv_aAx),
                          PLAYER_STATE_RESOURCE_GOLD,
                          GetPlayerState(
                            Player(lv_aAx),
                            PLAYER_STATE_RESOURCE_GOLD
                          ) + lv_aAy
                        );
                      } else {
                        if (SubString(lv_aAz, 0, 6) == "-honor") {
                          lv_aAy = S2I(SubString(lv_aAz, 6, 12));
                          SetPlayerState(
                            Player(lv_aAx),
                            PLAYER_STATE_RESOURCE_LUMBER,
                            GetPlayerState(
                              Player(lv_aAx),
                              PLAYER_STATE_RESOURCE_LUMBER
                            ) + lv_aAy
                          );
                        } else {
                          if (SubString(lv_aAz, 0, 6) == "-favor") {
                            lv_aAy = S2I(SubString(lv_aAz, 6, 10));
                            SetPlayerState(
                              Player(lv_aAx),
                              PLAYER_STATE_RESOURCE_FOOD_USED,
                              GetPlayerState(
                                Player(lv_aAx),
                                PLAYER_STATE_RESOURCE_FOOD_USED
                              ) + lv_aAy
                            );
                          } else {
                            if (SubString(lv_aAz, 0, 4) == "-ion") {
                              lv_aAy = S2I(SubString(lv_aAz, 5, 7));
                              f_aAs(lv_aAy, "fgsk", lv_aAx);
                              f_aAs(lv_aAy, "fgdg", lv_aAx);
                              f_aAs(lv_aAy, "wild", lv_aAx);
                            } else {
                              if (SubString(lv_aAz, 0, 6) == "-troll") {
                                lv_aAy = S2I(SubString(lv_aAz, 6, 8));
                                f_aAs(lv_aAy, "srrc", lv_aAx);
                              } else {
                                if (SubString(lv_aAz, 0, 6) == "-harpy") {
                                  lv_aAy = S2I(SubString(lv_aAz, 6, 8));
                                  f_aAs(lv_aAy, "wswd", lv_aAx);
                                } else {
                                  if (SubString(lv_aAz, 0, 5) == "-naga") {
                                    lv_aAy = S2I(SubString(lv_aAz, 5, 8));
                                    f_aAs(lv_aAy, "fgrg", lv_aAx);
                                  } else {
                                    if (SubString(lv_aAz, 0, 6) == "-satyr") {
                                      lv_aAy = S2I(SubString(lv_aAz, 6, 8));
                                      f_aAs(lv_aAy, "totw", lv_aAx);
                                    } else {
                                      if (
                                        SubString(lv_aAz, 0, 7) == "-treant"
                                      ) {
                                        lv_aAy = S2I(SubString(lv_aAz, 7, 9));
                                        f_aAs(lv_aAy, "will", lv_aAx);
                                      } else {
                                        if (SubString(lv_aAz, 0, 4) == "-sos") {
                                          lv_aAy = S2I(SubString(lv_aAz, 5, 8));
                                          f_aAs(lv_aAy, "wlsd", lv_aAx);
                                        } else {
                                          if (
                                            SubString(lv_aAz, 0, 4) == "-hof"
                                          ) {
                                            lv_aAy = S2I(
                                              SubString(lv_aAz, 5, 8)
                                            );
                                            f_aAs(lv_aAy, "woms", lv_aAx);
                                          } else {
                                            if (
                                              SubString(lv_aAz, 0, 5) == "-ruby"
                                            ) {
                                              lv_aAy = S2I(
                                                SubString(lv_aAz, 5, 8)
                                              );
                                              f_aAs(lv_aAy, "whwd", lv_aAx);
                                            } else {
                                              if (
                                                SubString(lv_aAz, 0, 4) ==
                                                "-soh"
                                              ) {
                                                lv_aAy = S2I(
                                                  SubString(lv_aAz, 4, 8)
                                                );
                                                f_aAs(lv_aAy, "I01H", lv_aAx);
                                              } else {
                                                if (
                                                  SubString(lv_aAz, 0, 5) ==
                                                  "-bhol"
                                                ) {
                                                  lv_aAy = S2I(
                                                    SubString(lv_aAz, 5, 8)
                                                  );
                                                  f_aAs(lv_aAy, "I01D", lv_aAx);
                                                } else {
                                                  if (
                                                    SubString(lv_aAz, 0, 6) ==
                                                    "-skull"
                                                  ) {
                                                    lv_aAy = S2I(
                                                      SubString(lv_aAz, 6, 8)
                                                    );
                                                    f_aAs(
                                                      lv_aAy,
                                                      "I01C",
                                                      lv_aAx
                                                    );
                                                  } else {
                                                    if (
                                                      SubString(lv_aAz, 0, 4) ==
                                                      "-pelt"
                                                    ) {
                                                      lv_aAy = S2I(
                                                        SubString(lv_aAz, 5, 8)
                                                      );
                                                      f_aAs(
                                                        lv_aAy,
                                                        "gmfr",
                                                        lv_aAx
                                                      );
                                                    } else {
                                                      if (lv_aAz == "-seal") {
                                                        CreateItem(
                                                          "I01W",
                                                          GetUnitX(
                                                            gv_alv[lv_aAx]
                                                          ) +
                                                            GetRandomReal(
                                                              -50,
                                                              50
                                                            ),
                                                          GetUnitY(
                                                            gv_alv[lv_aAx]
                                                          ) +
                                                            GetRandomReal(
                                                              -50,
                                                              50
                                                            )
                                                        );
                                                      } else {
                                                        if (
                                                          lv_aAz == "-flawless"
                                                        ) {
                                                          CreateItem(
                                                            "I01V",
                                                            GetUnitX(
                                                              gv_alv[lv_aAx]
                                                            ) +
                                                              GetRandomReal(
                                                                -50,
                                                                50
                                                              ),
                                                            GetUnitY(
                                                              gv_alv[lv_aAx]
                                                            ) +
                                                              GetRandomReal(
                                                                -50,
                                                                50
                                                              )
                                                          );
                                                        } else {
                                                          if (
                                                            lv_aAz == "-items"
                                                          ) {
                                                            CreateItem(
                                                              "ccmd",
                                                              GetUnitX(
                                                                gv_alv[lv_aAx]
                                                              ),
                                                              GetUnitY(
                                                                gv_alv[lv_aAx]
                                                              )
                                                            );
                                                            CreateItem(
                                                              "sfog",
                                                              GetUnitX(
                                                                gv_alv[lv_aAx]
                                                              ),
                                                              GetUnitY(
                                                                gv_alv[lv_aAx]
                                                              )
                                                            );
                                                            if (
                                                              gv_aat.getInt(
                                                                lv_aAx
                                                              ) > 3
                                                            ) {
                                                              CreateItem(
                                                                "I00Y",
                                                                GetUnitX(
                                                                  gv_alv[lv_aAx]
                                                                ),
                                                                GetUnitY(
                                                                  gv_alv[lv_aAx]
                                                                )
                                                              );
                                                              CreateItem(
                                                                "I013",
                                                                GetUnitX(
                                                                  gv_alv[lv_aAx]
                                                                ),
                                                                GetUnitY(
                                                                  gv_alv[lv_aAx]
                                                                )
                                                              );
                                                              CreateItem(
                                                                "shen",
                                                                GetUnitX(
                                                                  gv_alv[lv_aAx]
                                                                ),
                                                                GetUnitY(
                                                                  gv_alv[lv_aAx]
                                                                )
                                                              );
                                                              CreateItem(
                                                                "rej3",
                                                                GetUnitX(
                                                                  gv_alv[lv_aAx]
                                                                ),
                                                                GetUnitY(
                                                                  gv_alv[lv_aAx]
                                                                )
                                                              );
                                                              CreateItem(
                                                                "rej3",
                                                                GetUnitX(
                                                                  gv_alv[lv_aAx]
                                                                ),
                                                                GetUnitY(
                                                                  gv_alv[lv_aAx]
                                                                )
                                                              );
                                                              CreateItem(
                                                                "rej3",
                                                                GetUnitX(
                                                                  gv_alv[lv_aAx]
                                                                ),
                                                                GetUnitY(
                                                                  gv_alv[lv_aAx]
                                                                )
                                                              );
                                                              CreateItem(
                                                                "rej3",
                                                                GetUnitX(
                                                                  gv_alv[lv_aAx]
                                                                ),
                                                                GetUnitY(
                                                                  gv_alv[lv_aAx]
                                                                )
                                                              );
                                                              CreateItem(
                                                                "woms",
                                                                GetUnitX(
                                                                  gv_alv[lv_aAx]
                                                                ),
                                                                GetUnitY(
                                                                  gv_alv[lv_aAx]
                                                                )
                                                              );
                                                              CreateItem(
                                                                "woms",
                                                                GetUnitX(
                                                                  gv_alv[lv_aAx]
                                                                ),
                                                                GetUnitY(
                                                                  gv_alv[lv_aAx]
                                                                )
                                                              );
                                                              CreateItem(
                                                                "woms",
                                                                GetUnitX(
                                                                  gv_alv[lv_aAx]
                                                                ),
                                                                GetUnitY(
                                                                  gv_alv[lv_aAx]
                                                                )
                                                              );
                                                              CreateItem(
                                                                "whwd",
                                                                GetUnitX(
                                                                  gv_alv[lv_aAx]
                                                                ),
                                                                GetUnitY(
                                                                  gv_alv[lv_aAx]
                                                                )
                                                              );
                                                              CreateItem(
                                                                "whwd",
                                                                GetUnitX(
                                                                  gv_alv[lv_aAx]
                                                                ),
                                                                GetUnitY(
                                                                  gv_alv[lv_aAx]
                                                                )
                                                              );
                                                              CreateItem(
                                                                "I01H",
                                                                GetUnitX(
                                                                  gv_alv[lv_aAx]
                                                                ),
                                                                GetUnitY(
                                                                  gv_alv[lv_aAx]
                                                                )
                                                              );
                                                              CreateItem(
                                                                "I01H",
                                                                GetUnitX(
                                                                  gv_alv[lv_aAx]
                                                                ),
                                                                GetUnitY(
                                                                  gv_alv[lv_aAx]
                                                                )
                                                              );
                                                              CreateItem(
                                                                "I01H",
                                                                GetUnitX(
                                                                  gv_alv[lv_aAx]
                                                                ),
                                                                GetUnitY(
                                                                  gv_alv[lv_aAx]
                                                                )
                                                              );
                                                              CreateItem(
                                                                "I01D",
                                                                GetUnitX(
                                                                  gv_alv[lv_aAx]
                                                                ),
                                                                GetUnitY(
                                                                  gv_alv[lv_aAx]
                                                                )
                                                              );
                                                              CreateItem(
                                                                "I01D",
                                                                GetUnitX(
                                                                  gv_alv[lv_aAx]
                                                                ),
                                                                GetUnitY(
                                                                  gv_alv[lv_aAx]
                                                                )
                                                              );
                                                            }
                                                          }
                                                        }
                                                      }
                                                    }
                                                  }
                                                }
                                              }
                                            }
                                          }
                                        }
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }
  lv_aAz = "";
}
function f_aAB() {
  var lv_aAC = 0;
  var lv_aAD = 0;
  var lv_aAE = 1;
  do {
    if (lv_aAC > 8) {
      break;
    }
    if (GetHeroLevel(gv_alv[lv_aAC]) > 1) {
      lv_aAD = lv_aAD + 1;
    }
    lv_aAC = lv_aAC + 1;
  } while (true);
  if (lv_aAD == 2) {
    lv_aAE = 2;
  } else {
    if (lv_aAD < 2) {
      lv_aAD = 1;
    }
  }
  lv_aAC = 0;
  do {
    if (lv_aAC > 8) {
      break;
    }
    if (gv_aat.getInt(lv_aAC) < lv_aAE + f_ayQ(gv_alv[lv_aAC])) {
      gv_aap[lv_aAC] =
        gv_aap[lv_aAC] + (0.2 * (-0.5 + f_azK(gv_alv[lv_aAC]))) / lv_aAD;
      if (gv_aap[lv_aAC] > 1) {
        gv_aap[lv_aAC] = gv_aap[lv_aAC] - 1;
        gv_aat[lv_aAC] = gv_aat.getInt(lv_aAC) + 1;
      }
    }
    if (gv_aao[lv_aAC] > 0) {
      gv_aao[lv_aAC] = gv_aao[lv_aAC] - 0.08 * f_azK(gv_alv[lv_aAC]) + 0.05;
    } else {
      if (gv_aao[lv_aAC] > -5) {
        gv_aao[lv_aAC] = gv_aao[lv_aAC] - 0.04 * f_azK(gv_alv[lv_aAC]) + 0.03;
      }
    }
    lv_aAC = lv_aAC + 1;
  } while (true);
}
function f_aAF(lv_aAG, lv_aAH) {
  var lv_aAI = CreateGroup();
  var lv_aAJ;
  var lv_aAK = lv_aAH / 200;
  GroupEnumUnitsInRange(lv_aAI, GetUnitX(lv_aAG), GetUnitY(lv_aAG), 900, null);
  do {
    lv_aAJ = FirstOfGroup(lv_aAI);
    if (lv_aAJ == null) {
      break;
    }
    if (
      GetWidgetLife(lv_aAJ) > 0.405 &&
      IsUnitAlly(lv_aAJ, GetOwningPlayer(lv_aAG))
    ) {
      SetUnitState(
        lv_aAJ,
        UNIT_STATE_MANA,
        GetUnitState(lv_aAJ, UNIT_STATE_MANA) +
          GetUnitState(lv_aAJ, UNIT_STATE_MAX_MANA) * lv_aAK * f_azM(lv_aAJ)
      );
    }
    GroupRemoveUnit(lv_aAI, lv_aAJ);
    lv_aAJ = null;
  } while (true);
  DestroyGroup(lv_aAI);
  lv_aAI = null;
}
function f_aAL() {
  var lv_aAM = 0;
  do {
    if (lv_aAM > 8) {
      break;
    }
    if (GetUnitAbilityLevel(gv_alv[lv_aAM], "B00J") > 0) {
      SetUnitState(
        gv_alv[lv_aAM],
        UNIT_STATE_LIFE,
        GetUnitState(gv_alv[lv_aAM], UNIT_STATE_LIFE) +
          (GetUnitState(gv_alv[lv_aAM], UNIT_STATE_MAX_LIFE) / 230) *
            f_azM(gv_alv[lv_aAM])
      );
    }
    if (UnitHasItemOfTypeBJ(gv_alv[lv_aAM], "ocor")) {
      SetUnitState(
        gv_alv[lv_aAM],
        UNIT_STATE_MANA,
        GetUnitState(gv_alv[lv_aAM], UNIT_STATE_MANA) +
          GetUnitState(gv_alv[lv_aAM], UNIT_STATE_MAX_MANA) *
            0.015 *
            f_azM(gv_alv[lv_aAM])
      );
      f_aAF(gv_alv[lv_aAM], 1 * f_azM(gv_alv[lv_aAM]));
    } else {
      if (UnitHasItemOfTypeBJ(gv_alv[lv_aAM], "ofir")) {
        SetUnitState(
          gv_alv[lv_aAM],
          UNIT_STATE_MANA,
          GetUnitState(gv_alv[lv_aAM], UNIT_STATE_MANA) +
            GetUnitState(gv_alv[lv_aAM], UNIT_STATE_MAX_MANA) *
              0.02 *
              f_azM(gv_alv[lv_aAM])
        );
        f_aAF(gv_alv[lv_aAM], 1.5 * f_azM(gv_alv[lv_aAM]));
      }
    }
    lv_aAM = lv_aAM + 1;
  } while (true);
}
function f_aAN(lv_aAO, lv_aAP) {
  if (GetWidgetLife(lv_aAO) > lv_aAP) {
    SetWidgetLife(lv_aAO, GetWidgetLife(lv_aAO) - lv_aAP);
  } else {
    if (GetWidgetLife(lv_aAO) > 0.405) {
      SetWidgetLife(lv_aAO, 1);
    }
  }
}
function f_aAQ(lv_aAR) {
  gv_aac = "";
  if (GetUnitTypeId(lv_aAR) == "Udre") {
    gv_aac = "AR ";
  } else {
    if (GetUnitTypeId(lv_aAR) == "Hjai") {
      gv_aac = "Amazon ";
    } else {
      if (GetUnitTypeId(lv_aAR) == "Emoo") {
        gv_aac = "Jav ";
      } else {
        if (GetUnitTypeId(lv_aAR) == "Udea") {
          gv_aac = "SW ";
        } else {
          if (GetUnitTypeId(lv_aAR) == "Hamg") {
            gv_aac = "bkr ";
          } else {
            if (GetUnitTypeId(lv_aAR) == "Hblm") {
              gv_aac = "hydro ";
            } else {
              if (GetUnitTypeId(lv_aAR) == "Hpal") {
                gv_aac = "TG ";
              } else {
                if (GetUnitTypeId(lv_aAR) == "Ulic") {
                  gv_aac = "pyro ";
                } else {
                  if (GetUnitTypeId(lv_aAR) == "Oshd") {
                    gv_aac = "prst ";
                  } else {
                    if (GetUnitTypeId(lv_aAR) == "Hant") {
                      gv_aac = "spbld ";
                    } else {
                      if (GetUnitTypeId(lv_aAR) == "Ekee") {
                        gv_aac = "Dryad ";
                      } else {
                        if (GetUnitTypeId(lv_aAR) == "Edem") {
                          gv_aac = "Assas ";
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }
}
function f_aAS() {
  return (
    (IsUnitType(GetFilterUnit(), UNIT_TYPE_MAGIC_IMMUNE) == false &&
      IsUnitType(GetFilterUnit(), UNIT_TYPE_ANCIENT) == false &&
      IsUnitInRangeXY(GetFilterUnit(), gv_acy, gv_acz, gv_acA) &&
      GetWidgetLife(GetFilterUnit()) > 0.405 &&
      IsUnitEnemy(GetFilterUnit(), gv_acx)) != null
  );
}
function f_aAT() {
  return (
    (IsUnitType(GetFilterUnit(), UNIT_TYPE_ANCIENT) == false &&
      IsUnitType(GetFilterUnit(), UNIT_TYPE_STRUCTURE) == false &&
      IsUnitInRangeXY(GetFilterUnit(), gv_acy, gv_acz, gv_acA) &&
      GetWidgetLife(GetFilterUnit()) > 0.405 &&
      IsUnitAlly(GetFilterUnit(), gv_acx)) != null
  );
}
function f_aAU() {
  return (
    (IsUnitType(GetFilterUnit(), UNIT_TYPE_STRUCTURE) == false &&
      GetWidgetLife(GetFilterUnit()) > 0.405 &&
      IsUnitAlly(GetFilterUnit(), gv_acx)) != null
  );
}
function f_aAV() {
  var lv_aAW;
  lv_aAW = gv_abl * gv_abs;
  gv_abv[lv_aAW + 0] = "ZxA0";
  gv_abv[lv_aAW + 1] = "ZxA1";
  gv_abv[lv_aAW + 2] = "ZxA2";
  gv_abv[lv_aAW + 3] = "ZxA3";
  gv_abv[lv_aAW + 4] = "ZxA4";
  gv_abv[lv_aAW + 5] = "ZxA5";
  gv_abv[lv_aAW + 6] = "ZxA6";
  gv_abv[lv_aAW + 7] = "ZxA7";
  gv_abv[lv_aAW + 8] = "ZxA8";
  gv_abv[lv_aAW + 9] = "ZxA9";
  gv_abv[lv_aAW + 10] = "ZxAa";
  gv_abv[lv_aAW + 11] = "ZxAb";
  gv_abv[lv_aAW + 12] = "ZxAc";
  lv_aAW = gv_abm * gv_abs;
  gv_abv[lv_aAW + 0] = "ZxB0";
  gv_abv[lv_aAW + 1] = "ZxB1";
  gv_abv[lv_aAW + 2] = "ZxB2";
  gv_abv[lv_aAW + 3] = "ZxB3";
  gv_abv[lv_aAW + 4] = "ZxB4";
  gv_abv[lv_aAW + 5] = "ZxB5";
  gv_abv[lv_aAW + 6] = "ZxB6";
  gv_abv[lv_aAW + 7] = "ZxB7";
  gv_abv[lv_aAW + 8] = "ZxB8";
  gv_abv[lv_aAW + 9] = "ZxB9";
  gv_abv[lv_aAW + 10] = "ZxBa";
  gv_abv[lv_aAW + 11] = "ZxBb";
  gv_abv[lv_aAW + 12] = "ZxBc";
  lv_aAW = gv_abq * gv_abs;
  gv_abv[lv_aAW + 0] = "ZxH0";
  gv_abv[lv_aAW + 1] = "ZxH1";
  gv_abv[lv_aAW + 2] = "ZxH2";
  gv_abv[lv_aAW + 3] = "ZxH3";
  gv_abv[lv_aAW + 4] = "ZxH4";
  gv_abv[lv_aAW + 5] = "ZxH5";
  gv_abv[lv_aAW + 6] = "ZxH6";
  gv_abv[lv_aAW + 7] = "ZxH7";
  gv_abv[lv_aAW + 8] = "ZxH8";
  gv_abv[lv_aAW + 9] = "ZxH9";
  gv_abv[lv_aAW + 10] = "ZxHa";
  gv_abv[lv_aAW + 11] = "ZxHb";
  gv_abv[lv_aAW + 12] = "ZxHc";
  lv_aAW = gv_abn * gv_abs;
  gv_abv[lv_aAW + 0] = "ZxS0";
  gv_abv[lv_aAW + 1] = "ZxS1";
  gv_abv[lv_aAW + 2] = "ZxS2";
  gv_abv[lv_aAW + 3] = "ZxS3";
  gv_abv[lv_aAW + 4] = "ZxS4";
  gv_abv[lv_aAW + 5] = "ZxS5";
  gv_abv[lv_aAW + 6] = "ZxS6";
  gv_abv[lv_aAW + 7] = "ZxS7";
  gv_abv[lv_aAW + 8] = "ZxS8";
  gv_abv[lv_aAW + 9] = "ZxS9";
  gv_abv[lv_aAW + 10] = "ZxSa";
  gv_abv[lv_aAW + 11] = "ZxSb";
  gv_abv[lv_aAW + 12] = "ZxSc";
  lv_aAW = gv_abo * gv_abs;
  gv_abv[lv_aAW + 0] = "ZxG0";
  gv_abv[lv_aAW + 1] = "ZxG1";
  gv_abv[lv_aAW + 2] = "ZxG2";
  gv_abv[lv_aAW + 3] = "ZxG3";
  gv_abv[lv_aAW + 4] = "ZxG4";
  gv_abv[lv_aAW + 5] = "ZxG5";
  gv_abv[lv_aAW + 6] = "ZxG6";
  gv_abv[lv_aAW + 7] = "ZxG7";
  gv_abv[lv_aAW + 8] = "ZxG8";
  gv_abv[lv_aAW + 9] = "ZxG9";
  gv_abv[lv_aAW + 10] = "ZxGa";
  gv_abv[lv_aAW + 11] = "ZxGb";
  gv_abv[lv_aAW + 12] = "ZxGc";
  lv_aAW = gv_abp * gv_abs;
  gv_abv[lv_aAW + 0] = "ZxI0";
  gv_abv[lv_aAW + 1] = "ZxI1";
  gv_abv[lv_aAW + 2] = "ZxI2";
  gv_abv[lv_aAW + 3] = "ZxI3";
  gv_abv[lv_aAW + 4] = "ZxI4";
  gv_abv[lv_aAW + 5] = "ZxI5";
  gv_abv[lv_aAW + 6] = "ZxI6";
  gv_abv[lv_aAW + 7] = "ZxI7";
  gv_abv[lv_aAW + 8] = "ZxI8";
  gv_abv[lv_aAW + 9] = "ZxI9";
  gv_abv[lv_aAW + 10] = "ZxIa";
  gv_abv[lv_aAW + 11] = "ZxIb";
  gv_abv[lv_aAW + 12] = "ZxIc";
}
function f_aAX(lv_aAY, lv_aAZ) {
  var lv_aBa = 0;
  do {
    UnitRemoveAbility(lv_aAY, gv_abv.getInt(lv_aAZ * gv_abs + lv_aBa));
    lv_aBa = lv_aBa + 1;
    if (lv_aBa == gv_abs - 2) {
      break;
    }
  } while (true);
}
function f_aBb(lv_aBc, lv_aBd, lv_aBe) {
  var lv_aBf = gv_abs - 2;
  if (lv_aBe < gv_aby || lv_aBe > gv_abx) {
    return false;
  } else {
    if (lv_aBd < 0 || lv_aBd >= gv_abr) {
      return false;
    }
  }
  if (lv_aBe < 0) {
    lv_aBe = gv_abx + lv_aBe + 1;
    UnitAddAbility(lv_aBc, gv_abv.getInt(lv_aBd * gv_abs + gv_abs - 1));
    UnitMakeAbilityPermanent(
      lv_aBc,
      true,
      gv_abv.getInt(lv_aBd * gv_abs + gv_abs - 1)
    );
  } else {
    UnitRemoveAbility(lv_aBc, gv_abv.getInt(lv_aBd * gv_abs + gv_abs - 1));
  }
  do {
    if (lv_aBe >= gv_abw.getInt(lv_aBf)) {
      UnitAddAbility(lv_aBc, gv_abv.getInt(lv_aBd * gv_abs + lv_aBf));
      UnitMakeAbilityPermanent(
        lv_aBc,
        true,
        gv_abv.getInt(lv_aBd * gv_abs + lv_aBf)
      );
      lv_aBe = lv_aBe - gv_abw.getInt(lv_aBf);
    } else {
      UnitRemoveAbility(lv_aBc, gv_abv.getInt(lv_aBd * gv_abs + lv_aBf));
    }
    lv_aBf = lv_aBf - 1;
    if (lv_aBf < 0) {
      break;
    }
  } while (true);
  return true;
}
function f_aBg(lv_aBh, lv_aBi) {
  var lv_aBj = 0;
  var lv_aBk = 0;
  if (
    GetUnitAbilityLevel(lv_aBh, gv_abv.getInt(lv_aBi * gv_abs + gv_abs - 1)) > 0
  ) {
    lv_aBk = gv_aby;
  }
  do {
    if (
      GetUnitAbilityLevel(lv_aBh, gv_abv.getInt(lv_aBi * gv_abs + lv_aBj)) > 0
    ) {
      lv_aBk = lv_aBk + gv_abw.getInt(lv_aBj);
    }
    lv_aBj = lv_aBj + 1;
    if (lv_aBj == gv_abs - 1) {
      break;
    }
  } while (true);
  return lv_aBk;
}
function f_aBl(lv_aBm, lv_aBn, lv_aBo) {
  return f_aBb(lv_aBm, lv_aBn, f_aBg(lv_aBm, lv_aBn) + lv_aBo);
}
function f_aBp() {
  var lv_aBq = 1;
  var lv_aBr;
  gv_abw[0] = 1;
  do {
    gv_abw[lv_aBq] = gv_abw.getInt(lv_aBq - 1) * 2;
    lv_aBq = lv_aBq + 1;
    if (lv_aBq == gv_abs) {
      break;
    }
  } while (true);
  gv_abx = gv_abw.getInt(gv_abs - 1) - 1;
  gv_aby = -gv_abw.getInt(gv_abs - 1);
  f_aAV();
  if (gv_abt) {
    lv_aBr = CreateUnit(Player(PLAYER_NEUTRAL_PASSIVE), gv_abu, 0, 0, 0);
    lv_aBq = 0;
    do {
      if (lv_aBq == gv_abr * gv_abs) {
        break;
      }
      UnitAddAbility(lv_aBr, gv_abv.getInt(lv_aBq));
      lv_aBq = lv_aBq + 1;
    } while (true);
    UnitAddAbility(lv_aBr, "A09M");
    UnitAddAbility(lv_aBr, "A01A");
    RemoveUnit(lv_aBr);
  }
}
function f_aBs(lv_aBt, lv_aBu) {
  var lv_aBv = GetUnitAbilityLevel(lv_aBt, lv_aBu);
  UnitRemoveAbility(lv_aBt, lv_aBu);
  UnitAddAbility(lv_aBt, lv_aBu);
  SetUnitAbilityLevel(lv_aBt, lv_aBu, lv_aBv);
}
function f_aBw() {
  var lv_aBx = GetPlayerId(GetOwningPlayer(GetFilterUnit()));
  return (
    IsUnitType(GetFilterUnit(), UNIT_TYPE_DEAD) == false &&
    GetUnitAbilityLevel(GetFilterUnit(), "Avul") == 0 &&
    (lv_aBx == 10 || lv_aBx == 11)
  );
}
function f_aBy(lv_aBz, lv_aBA) {
  var lv_aBB = CreateGroup();
  var lv_aBC;
  GroupEnumUnitsInRange(
    lv_aBB,
    GetUnitX(lv_aBz),
    GetUnitY(lv_aBz),
    lv_aBA * f_azM(lv_aBz),
    Condition(f_aBw)
  );
  do {
    lv_aBC = FirstOfGroup(lv_aBB);
    if (lv_aBC == null) {
      break;
    }
    IssueTargetOrder(lv_aBC, "attack", lv_aBz);
    GroupRemoveUnit(lv_aBB, lv_aBC);
  } while (true);
}
function f_aBD(lv_aBE, gv_aaj) {
  if (GetUnitAbilityLevel(lv_aBE, "B01L") > 0) {
    gv_aaj = gv_aaj * 1.2;
  }
  if (GetUnitAbilityLevel(lv_aBE, "B00W") > 0) {
    gv_aaj = gv_aaj * (1 + 0.2 * f_azM(lv_aBE));
  }
  return gv_aaj;
}
function f_aBF(lv_aBG, lv_aBH) {
  var lv_aBI = lv_aBH * gv_aam[lv_aBG];
  if (GetRandomReal(0, 1) < lv_aBI - R2I(lv_aBI)) {
    return R2I(lv_aBI + 1);
  }
  return R2I(lv_aBI);
}
function f_aBJ(lv_aBK, lv_aBL) {
  var lv_aBM = lv_aBL * gv_aan[lv_aBK];
  if (GetRandomReal(0, 1) < lv_aBM - R2I(lv_aBM)) {
    return R2I(lv_aBM + 1);
  }
  return R2I(lv_aBM);
}
function f_aBN(lv_aBO) {
  var lv_aBP;
  var lv_aBQ = TimerGetElapsed(gv_ayA);
  if (lv_aBQ <= 0) {
    gv_ayA = CreateTimer();
    TimerStart(gv_ayA, 1000000, false, null);
  }
  if (lv_aBO > 0) {
    do {
      lv_aBP = lv_aBO - TimerGetElapsed(gv_ayA) + lv_aBQ;
      if (lv_aBP <= 0) {
        break;
      }
      if (lv_aBP > bj_POLLED_WAIT_SKIP_THRESHOLD) {
        TriggerSleepAction(0.1 * lv_aBP);
      } else {
        TriggerSleepAction(bj_POLLED_WAIT_INTERVAL);
      }
    } while (true);
  }
}
function f_aBR(lv_aBS) {
  var lv_aBT = CreateSound(lv_aBS, false, false, true, 12700, 12700, "");
  StartSound(lv_aBT);
  KillSoundWhenDone(lv_aBT);
  lv_aBT = null;
}
function f_aBU() {
  var lv_aBV = GetDestructableX(GetFilterDestructable()) - gv_ayB;
  var lv_aBW = GetDestructableY(GetFilterDestructable()) - gv_ayC;
  return lv_aBV * lv_aBV + lv_aBW * lv_aBW <= bj_enumDestructableRadius;
}
function f_aBX(lv_aBY, lv_aBZ) {
  gv_ayD = CreateGroup();
  bj_groupEnumOwningPlayer = lv_aBZ;
  GroupEnumUnitsInRect(gv_ayD, lv_aBY, filterGetUnitsInRectOfPlayer);
  return gv_ayD;
}
function f_aCa(lv_aCb) {
  gv_ayD = CreateGroup();
  GroupEnumUnitsOfPlayer(gv_ayD, lv_aCb, gv_ayF);
  return gv_ayD;
}
function f_aCc(lv_aCd) {
  gv_ayE = CreateForce();
  ForceAddPlayer(gv_ayE, lv_aCd);
  return gv_ayE;
}
function f_aCe(lv_aCf, lv_aCg) {
  var lv_aCh;
  bj_stockPickedItemType = lv_aCf;
  bj_stockPickedItemLevel = lv_aCg;
  lv_aCh = CreateGroup();
  GroupEnumUnitsOfType(lv_aCh, "marketplace", gv_ayF);
  ForGroup(lv_aCh, UpdateEachStockBuildingEnum);
  DestroyGroup(lv_aCh);
  lv_aCh = null;
}
function f_aCi() {
  var lv_aCj;
  var lv_aCk;
  var lv_aCl = 0;
  var lv_aCm = 0;
  var lv_aCn;
  lv_aCn = 1;
  do {
    if (bj_stockAllowedPermanent[lv_aCn]) {
      lv_aCm = lv_aCm + 1;
      if (GetRandomInt(1, lv_aCm) == 1) {
        lv_aCk = ITEM_TYPE_PERMANENT;
        lv_aCl = lv_aCn;
      }
    }
    if (bj_stockAllowedCharged[lv_aCn]) {
      lv_aCm = lv_aCm + 1;
      if (GetRandomInt(1, lv_aCm) == 1) {
        lv_aCk = ITEM_TYPE_CHARGED;
        lv_aCl = lv_aCn;
      }
    }
    if (bj_stockAllowedArtifact[lv_aCn]) {
      lv_aCm = lv_aCm + 1;
      if (GetRandomInt(1, lv_aCm) == 1) {
        lv_aCk = ITEM_TYPE_ARTIFACT;
        lv_aCl = lv_aCn;
      }
    }
    lv_aCn = lv_aCn + 1;
    if (lv_aCn > 10) {
      break;
    }
  } while (true);
  if (lv_aCm == 0) {
    lv_aCk = null;
    return;
  }
  f_aCe(lv_aCk, lv_aCl);
  lv_aCk = null;
}
function f_aCo() {
  f_aCi();
  TimerStart(bj_stockUpdateTimer, bj_STOCK_RESTOCK_INTERVAL, true, f_aCi);
}
function f_aCp() {
  return true;
}
function f_aCq(lv_aCr, lv_aCs, lv_aCt, lv_aCu) {
  gv_ayr = lv_aCs;
  gv_ayt = lv_aCt;
  gv_ayu = lv_aCu;
  TriggerExecute(gv_ayl[lv_aCr]);
}
function f_aCv(lv_aCw, lv_aCx, lv_aCy, lv_aCz, lv_aCA) {
  gv_ayr = lv_aCx;
  gv_ayv = lv_aCy;
  gv_ays = lv_aCz;
  gv_ayw = lv_aCA;
  TriggerExecute(gv_aym[lv_aCw]);
}
function f_aCB(lv_aCC) {
  if (lv_aCC < 8191) {
    return gv_awH.getInt(lv_aCC);
  } else {
    if (lv_aCC < 204775) {
      if (lv_aCC < 16382) {
        return gv_awI.getInt(lv_aCC - 8191);
      } else {
        if (lv_aCC < 106483) {
          if (lv_aCC < 24573) {
            return gv_awJ.getInt(lv_aCC - 16382);
          } else {
            if (lv_aCC < 65528) {
              if (lv_aCC < 32764) {
                return gv_awK.getInt(lv_aCC - 24573);
              } else {
                if (lv_aCC < 49146) {
                  if (lv_aCC < 40955) {
                    return gv_awL.getInt(lv_aCC - 32764);
                  } else {
                    return gv_awM.getInt(lv_aCC - 40955);
                  }
                } else {
                  if (lv_aCC < 57337) {
                    return gv_awN.getInt(lv_aCC - 49146);
                  } else {
                    return gv_awO.getInt(lv_aCC - 57337);
                  }
                }
              }
            } else {
              if (lv_aCC < 73719) {
                return gv_awP.getInt(lv_aCC - 65528);
              } else {
                if (lv_aCC < 90101) {
                  if (lv_aCC < 81910) {
                    return gv_awQ.getInt(lv_aCC - 73719);
                  } else {
                    return gv_awR.getInt(lv_aCC - 81910);
                  }
                } else {
                  if (lv_aCC < 98292) {
                    return gv_awS.getInt(lv_aCC - 90101);
                  } else {
                    return gv_awT.getInt(lv_aCC - 98292);
                  }
                }
              }
            }
          }
        } else {
          if (lv_aCC < 114674) {
            return gv_awU.getInt(lv_aCC - 106483);
          } else {
            if (lv_aCC < 155629) {
              if (lv_aCC < 122865) {
                return gv_awV.getInt(lv_aCC - 114674);
              } else {
                if (lv_aCC < 139247) {
                  if (lv_aCC < 131056) {
                    return gv_awW.getInt(lv_aCC - 122865);
                  } else {
                    return gv_awX.getInt(lv_aCC - 131056);
                  }
                } else {
                  if (lv_aCC < 147438) {
                    return gv_awY.getInt(lv_aCC - 139247);
                  } else {
                    return gv_awZ.getInt(lv_aCC - 147438);
                  }
                }
              }
            } else {
              if (lv_aCC < 163820) {
                return gv_axa.getInt(lv_aCC - 155629);
              } else {
                if (lv_aCC < 180202) {
                  if (lv_aCC < 172011) {
                    return gv_axb.getInt(lv_aCC - 163820);
                  } else {
                    return gv_axc.getInt(lv_aCC - 172011);
                  }
                } else {
                  if (lv_aCC < 188393) {
                    return gv_axd.getInt(lv_aCC - 180202);
                  } else {
                    if (lv_aCC < 196584) {
                      return gv_axe.getInt(lv_aCC - 188393);
                    } else {
                      return gv_axf.getInt(lv_aCC - 196584);
                    }
                  }
                }
              }
            }
          }
        }
      }
    } else {
      if (lv_aCC < 212966) {
        return gv_axg.getInt(lv_aCC - 204775);
      } else {
        if (lv_aCC < 311258) {
          if (lv_aCC < 221157) {
            return gv_axh.getInt(lv_aCC - 212966);
          } else {
            if (lv_aCC < 262112) {
              if (lv_aCC < 229348) {
                return gv_axi.getInt(lv_aCC - 221157);
              } else {
                if (lv_aCC < 245730) {
                  if (lv_aCC < 237539) {
                    return gv_axj.getInt(lv_aCC - 229348);
                  } else {
                    return gv_axk.getInt(lv_aCC - 237539);
                  }
                } else {
                  if (lv_aCC < 253921) {
                    return gv_axl.getInt(lv_aCC - 245730);
                  } else {
                    return gv_axm.getInt(lv_aCC - 253921);
                  }
                }
              }
            } else {
              if (lv_aCC < 270303) {
                return gv_axn.getInt(lv_aCC - 262112);
              } else {
                if (lv_aCC < 286685) {
                  if (lv_aCC < 278494) {
                    return gv_axo.getInt(lv_aCC - 270303);
                  } else {
                    return gv_axp.getInt(lv_aCC - 278494);
                  }
                } else {
                  if (lv_aCC < 294876) {
                    return gv_axq.getInt(lv_aCC - 286685);
                  } else {
                    if (lv_aCC < 303067) {
                      return gv_axr.getInt(lv_aCC - 294876);
                    } else {
                      return gv_axs.getInt(lv_aCC - 303067);
                    }
                  }
                }
              }
            }
          }
        } else {
          if (lv_aCC < 319449) {
            return gv_axt.getInt(lv_aCC - 311258);
          } else {
            if (lv_aCC < 360404) {
              if (lv_aCC < 327640) {
                return gv_axu.getInt(lv_aCC - 319449);
              } else {
                if (lv_aCC < 344022) {
                  if (lv_aCC < 335831) {
                    return gv_axv.getInt(lv_aCC - 327640);
                  } else {
                    return gv_axw.getInt(lv_aCC - 335831);
                  }
                } else {
                  if (lv_aCC < 352213) {
                    return gv_axx.getInt(lv_aCC - 344022);
                  } else {
                    return gv_axy.getInt(lv_aCC - 352213);
                  }
                }
              }
            } else {
              if (lv_aCC < 368595) {
                return gv_axz.getInt(lv_aCC - 360404);
              } else {
                if (lv_aCC < 384977) {
                  if (lv_aCC < 376786) {
                    return gv_axA.getInt(lv_aCC - 368595);
                  } else {
                    return gv_axB.getInt(lv_aCC - 376786);
                  }
                } else {
                  if (lv_aCC < 393168) {
                    return gv_axC.getInt(lv_aCC - 384977);
                  } else {
                    if (lv_aCC < 401359) {
                      return gv_axD.getInt(lv_aCC - 393168);
                    } else {
                      return gv_axE.getInt(lv_aCC - 401359);
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }
}
function f_aCD(lv_aCE, lv_aCF) {
  if (lv_aCE < 8191) {
    gv_awH[lv_aCE] = lv_aCF;
  } else {
    if (lv_aCE < 204775) {
      if (lv_aCE < 16382) {
        gv_awI[lv_aCE - 8191] = lv_aCF;
      } else {
        if (lv_aCE < 106483) {
          if (lv_aCE < 24573) {
            gv_awJ[lv_aCE - 16382] = lv_aCF;
          } else {
            if (lv_aCE < 65528) {
              if (lv_aCE < 32764) {
                gv_awK[lv_aCE - 24573] = lv_aCF;
              } else {
                if (lv_aCE < 49146) {
                  if (lv_aCE < 40955) {
                    gv_awL[lv_aCE - 32764] = lv_aCF;
                  } else {
                    gv_awM[lv_aCE - 40955] = lv_aCF;
                  }
                } else {
                  if (lv_aCE < 57337) {
                    gv_awN[lv_aCE - 49146] = lv_aCF;
                  } else {
                    gv_awO[lv_aCE - 57337] = lv_aCF;
                  }
                }
              }
            } else {
              if (lv_aCE < 73719) {
                gv_awP[lv_aCE - 65528] = lv_aCF;
              } else {
                if (lv_aCE < 90101) {
                  if (lv_aCE < 81910) {
                    gv_awQ[lv_aCE - 73719] = lv_aCF;
                  } else {
                    gv_awR[lv_aCE - 81910] = lv_aCF;
                  }
                } else {
                  if (lv_aCE < 98292) {
                    gv_awS[lv_aCE - 90101] = lv_aCF;
                  } else {
                    gv_awT[lv_aCE - 98292] = lv_aCF;
                  }
                }
              }
            }
          }
        } else {
          if (lv_aCE < 114674) {
            gv_awU[lv_aCE - 106483] = lv_aCF;
          } else {
            if (lv_aCE < 155629) {
              if (lv_aCE < 122865) {
                gv_awV[lv_aCE - 114674] = lv_aCF;
              } else {
                if (lv_aCE < 139247) {
                  if (lv_aCE < 131056) {
                    gv_awW[lv_aCE - 122865] = lv_aCF;
                  } else {
                    gv_awX[lv_aCE - 131056] = lv_aCF;
                  }
                } else {
                  if (lv_aCE < 147438) {
                    gv_awY[lv_aCE - 139247] = lv_aCF;
                  } else {
                    gv_awZ[lv_aCE - 147438] = lv_aCF;
                  }
                }
              }
            } else {
              if (lv_aCE < 163820) {
                gv_axa[lv_aCE - 155629] = lv_aCF;
              } else {
                if (lv_aCE < 180202) {
                  if (lv_aCE < 172011) {
                    gv_axb[lv_aCE - 163820] = lv_aCF;
                  } else {
                    gv_axc[lv_aCE - 172011] = lv_aCF;
                  }
                } else {
                  if (lv_aCE < 188393) {
                    gv_axd[lv_aCE - 180202] = lv_aCF;
                  } else {
                    if (lv_aCE < 196584) {
                      gv_axe[lv_aCE - 188393] = lv_aCF;
                    } else {
                      gv_axf[lv_aCE - 196584] = lv_aCF;
                    }
                  }
                }
              }
            }
          }
        }
      }
    } else {
      if (lv_aCE < 212966) {
        gv_axg[lv_aCE - 204775] = lv_aCF;
      } else {
        if (lv_aCE < 311258) {
          if (lv_aCE < 221157) {
            gv_axh[lv_aCE - 212966] = lv_aCF;
          } else {
            if (lv_aCE < 262112) {
              if (lv_aCE < 229348) {
                gv_axi[lv_aCE - 221157] = lv_aCF;
              } else {
                if (lv_aCE < 245730) {
                  if (lv_aCE < 237539) {
                    gv_axj[lv_aCE - 229348] = lv_aCF;
                  } else {
                    gv_axk[lv_aCE - 237539] = lv_aCF;
                  }
                } else {
                  if (lv_aCE < 253921) {
                    gv_axl[lv_aCE - 245730] = lv_aCF;
                  } else {
                    gv_axm[lv_aCE - 253921] = lv_aCF;
                  }
                }
              }
            } else {
              if (lv_aCE < 270303) {
                gv_axn[lv_aCE - 262112] = lv_aCF;
              } else {
                if (lv_aCE < 286685) {
                  if (lv_aCE < 278494) {
                    gv_axo[lv_aCE - 270303] = lv_aCF;
                  } else {
                    gv_axp[lv_aCE - 278494] = lv_aCF;
                  }
                } else {
                  if (lv_aCE < 294876) {
                    gv_axq[lv_aCE - 286685] = lv_aCF;
                  } else {
                    if (lv_aCE < 303067) {
                      gv_axr[lv_aCE - 294876] = lv_aCF;
                    } else {
                      gv_axs[lv_aCE - 303067] = lv_aCF;
                    }
                  }
                }
              }
            }
          }
        } else {
          if (lv_aCE < 319449) {
            gv_axt[lv_aCE - 311258] = lv_aCF;
          } else {
            if (lv_aCE < 360404) {
              if (lv_aCE < 327640) {
                gv_axu[lv_aCE - 319449] = lv_aCF;
              } else {
                if (lv_aCE < 344022) {
                  if (lv_aCE < 335831) {
                    gv_axv[lv_aCE - 327640] = lv_aCF;
                  } else {
                    gv_axw[lv_aCE - 335831] = lv_aCF;
                  }
                } else {
                  if (lv_aCE < 352213) {
                    gv_axx[lv_aCE - 344022] = lv_aCF;
                  } else {
                    gv_axy[lv_aCE - 352213] = lv_aCF;
                  }
                }
              }
            } else {
              if (lv_aCE < 368595) {
                gv_axz[lv_aCE - 360404] = lv_aCF;
              } else {
                if (lv_aCE < 384977) {
                  if (lv_aCE < 376786) {
                    gv_axA[lv_aCE - 368595] = lv_aCF;
                  } else {
                    gv_axB[lv_aCE - 376786] = lv_aCF;
                  }
                } else {
                  if (lv_aCE < 393168) {
                    gv_axC[lv_aCE - 384977] = lv_aCF;
                  } else {
                    if (lv_aCE < 401359) {
                      gv_axD[lv_aCE - 393168] = lv_aCF;
                    } else {
                      gv_axE[lv_aCE - 401359] = lv_aCF;
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }
}
function f_aCG() {
  var lv_aCH = gv_awy;
  if (lv_aCH != 0) {
    gv_awy = gv_awA.getInt(lv_aCH);
  } else {
    gv_awz = gv_awz + 1;
    lv_aCH = gv_awz;
  }
  if (lv_aCH > 90) {
    return 0;
  }
  gv_awC[lv_aCH] = (lv_aCH - 1) * 90;
  gv_awA[lv_aCH] = -1;
  return lv_aCH;
}
function f_aCI(lv_aCJ) {
  if (lv_aCJ == null) {
    return;
  } else {
    if (gv_awA.getInt(lv_aCJ) != -1) {
      return;
    }
  }
  gv_ayx = lv_aCJ;
  TriggerEvaluate(gv_ayk);
  gv_awA[lv_aCJ] = gv_awy;
  gv_awy = lv_aCJ;
}
function f_aCK() {
  var lv_aCL = gv_awt;
  if (lv_aCL != 0) {
    gv_awt = gv_awv.getInt(lv_aCL);
  } else {
    gv_awu = gv_awu + 1;
    lv_aCL = gv_awu;
  }
  if (lv_aCL > 8190) {
    return 0;
  }
  gv_awv[lv_aCL] = -1;
  return lv_aCL;
}
function f_aCM() {
  var lv_aCN = gv_awm;
  if (lv_aCN != 0) {
    gv_awm = gv_awo.getInt(lv_aCN);
  } else {
    gv_awn = gv_awn + 1;
    lv_aCN = gv_awn;
  }
  if (lv_aCN > 8190) {
    return 0;
  }
  gv_awo[lv_aCN] = -1;
  return lv_aCN;
}
function f_aCO(lv_aCP) {
  if (lv_aCP == null) {
    return;
  } else {
    if (gv_awo.getInt(lv_aCP) != -1) {
      return;
    }
  }
  gv_awo[lv_aCP] = gv_awm;
  gv_awm = lv_aCP;
}
function f_aCQ() {
  var lv_aCR = gv_ape;
  if (lv_aCR != 0) {
    gv_ape = gv_apg.getInt(lv_aCR);
  } else {
    gv_apf = gv_apf + 1;
    lv_aCR = gv_apf;
  }
  if (lv_aCR > 8100) {
    return 0;
  }
  gv_axF[lv_aCR] = 2;
  gv_apg[lv_aCR] = -1;
  return lv_aCR;
}
function f_aCS() {
  var lv_aCT = gv_awd;
  if (lv_aCT != 0) {
    gv_awd = gv_awf.getInt(lv_aCT);
  } else {
    gv_awe = gv_awe + 1;
    lv_aCT = gv_awe;
  }
  if (lv_aCT > 8190) {
    return 0;
  }
  gv_awf[lv_aCT] = -1;
  return lv_aCT;
}
function f_aCU(lv_aCV) {
  if (lv_aCV == null) {
    return;
  } else {
    if (gv_awf.getInt(lv_aCV) != -1) {
      return;
    }
  }
  gv_ayx = lv_aCV;
  TriggerEvaluate(gv_ayi);
  gv_awf[lv_aCV] = gv_awd;
  gv_awd = lv_aCV;
}
function f_aCW() {
  var lv_aCX = f_aCQ();
  var lv_aCY;
  if (lv_aCX == 0) {
    return 0;
  }
  gv_axF[lv_aCX] = 3;
  lv_aCY = lv_aCX;
  return lv_aCX;
}
function f_aCZ() {
  var lv_aDa = gv_avW;
  if (lv_aDa != 0) {
    gv_avW = gv_avY.getInt(lv_aDa);
  } else {
    gv_avX = gv_avX + 1;
    lv_aDa = gv_avX;
  }
  if (lv_aDa > 8190) {
    return 0;
  }
  gv_avY[lv_aDa] = -1;
  return lv_aDa;
}
function f_aDb(lv_aDc) {
  if (lv_aDc == null) {
    return;
  } else {
    if (gv_avY.getInt(lv_aDc) != -1) {
      return;
    }
  }
  gv_avY[lv_aDc] = gv_avW;
  gv_avW = lv_aDc;
}
function f_aDd() {
  var lv_aDe = f_aCQ();
  var lv_aDf;
  if (lv_aDe == 0) {
    return 0;
  }
  gv_axF[lv_aDe] = 4;
  lv_aDf = lv_aDe;
  return lv_aDe;
}
function f_aDg() {
  var lv_aDh = f_aCQ();
  var lv_aDi;
  if (lv_aDh == 0) {
    return 0;
  }
  gv_axF[lv_aDh] = 5;
  lv_aDi = lv_aDh;
  return lv_aDh;
}
function f_aDj() {
  var lv_aDk = gv_avP;
  if (lv_aDk != 0) {
    gv_avP = gv_avR.getInt(lv_aDk);
  } else {
    gv_avQ = gv_avQ + 1;
    lv_aDk = gv_avQ;
  }
  if (lv_aDk > 8190) {
    return 0;
  }
  gv_avR[lv_aDk] = -1;
  return lv_aDk;
}
function f_aDl(lv_aDm) {
  if (lv_aDm == null) {
    return;
  } else {
    if (gv_avR.getInt(lv_aDm) != -1) {
      return;
    }
  }
  gv_avR[lv_aDm] = gv_avP;
  gv_avP = lv_aDm;
}
function f_aDn() {
  var lv_aDo = gv_avJ;
  if (lv_aDo != 0) {
    gv_avJ = gv_avL.getInt(lv_aDo);
  } else {
    gv_avK = gv_avK + 1;
    lv_aDo = gv_avK;
  }
  if (lv_aDo > 8190) {
    return 0;
  }
  gv_avL[lv_aDo] = -1;
  return lv_aDo;
}
function f_aDp(lv_aDq) {
  if (lv_aDq == null) {
    return;
  } else {
    if (gv_avL.getInt(lv_aDq) != -1) {
      return;
    }
  }
  gv_avL[lv_aDq] = gv_avJ;
  gv_avJ = lv_aDq;
}
function f_aDr(lv_aDs, lv_aDt) {
  SetUnitFacing(gv_avH[lv_aDs], lv_aDt * bj_RADTODEG);
  return false;
}
function f_aDu() {
  var lv_aDv = gv_avB;
  if (lv_aDv != 0) {
    gv_avB = gv_avD.getInt(lv_aDv);
  } else {
    gv_avC = gv_avC + 1;
    lv_aDv = gv_avC;
  }
  if (lv_aDv > 8190) {
    return 0;
  }
  gv_avD[lv_aDv] = -1;
  return lv_aDv;
}
function f_aDw(lv_aDx) {
  if (lv_aDx == null) {
    return;
  } else {
    if (gv_avD.getInt(lv_aDx) != -1) {
      return;
    }
  }
  gv_ayx = lv_aDx;
  TriggerEvaluate(gv_ayh);
  gv_avD[lv_aDx] = gv_avB;
  gv_avB = lv_aDx;
}
function f_aDy() {
  var lv_aDz = gv_avv;
  if (lv_aDz != 0) {
    gv_avv = gv_avx.getInt(lv_aDz);
  } else {
    gv_avw = gv_avw + 1;
    lv_aDz = gv_avw;
  }
  if (lv_aDz > 8190) {
    return 0;
  }
  gv_avx[lv_aDz] = -1;
  return lv_aDz;
}
function f_aDA(lv_aDB) {
  if (lv_aDB == null) {
    return;
  } else {
    if (gv_avx.getInt(lv_aDB) != -1) {
      return;
    }
  }
  gv_avx[lv_aDB] = gv_avv;
  gv_avv = lv_aDB;
}
function f_aDC(lv_aDD, lv_aDE) {
  SetUnitFacing(gv_avt[lv_aDD], lv_aDE * bj_RADTODEG);
  return false;
}
function f_aDF() {
  var lv_aDG = gv_avn;
  if (lv_aDG != 0) {
    gv_avn = gv_avp.getInt(lv_aDG);
  } else {
    gv_avo = gv_avo + 1;
    lv_aDG = gv_avo;
  }
  if (lv_aDG > 8190) {
    return 0;
  }
  gv_avp[lv_aDG] = -1;
  return lv_aDG;
}
function f_aDH(lv_aDI) {
  if (lv_aDI == null) {
    return;
  } else {
    if (gv_avp.getInt(lv_aDI) != -1) {
      return;
    }
  }
  gv_ayx = lv_aDI;
  TriggerEvaluate(gv_ayf);
  gv_avp[lv_aDI] = gv_avn;
  gv_avn = lv_aDI;
}
function f_aDJ() {
  var lv_aDK = gv_avf;
  if (lv_aDK != 0) {
    gv_avf = gv_avh.getInt(lv_aDK);
  } else {
    gv_avg = gv_avg + 1;
    lv_aDK = gv_avg;
  }
  if (lv_aDK > 8190) {
    return 0;
  }
  gv_avh[lv_aDK] = -1;
  return lv_aDK;
}
function f_aDL(lv_aDM) {
  if (lv_aDM == null) {
    return;
  } else {
    if (gv_avh.getInt(lv_aDM) != -1) {
      return;
    }
  }
  gv_avh[lv_aDM] = gv_avf;
  gv_avf = lv_aDM;
}
function f_aDN() {
  var lv_aDO = gv_avb;
  if (lv_aDO != 0) {
    gv_avb = gv_avd.getInt(lv_aDO);
  } else {
    gv_avc = gv_avc + 1;
    lv_aDO = gv_avc;
  }
  if (lv_aDO > 8190) {
    return 0;
  }
  gv_avd[lv_aDO] = -1;
  return lv_aDO;
}
function f_aDP(lv_aDQ) {
  if (lv_aDQ == null) {
    return;
  } else {
    if (gv_avd.getInt(lv_aDQ) != -1) {
      return;
    }
  }
  gv_avd[lv_aDQ] = gv_avb;
  gv_avb = lv_aDQ;
}
function f_aDR() {
  var lv_aDS = gv_auT;
  if (lv_aDS != 0) {
    gv_auT = gv_auV.getInt(lv_aDS);
  } else {
    gv_auU = gv_auU + 1;
    lv_aDS = gv_auU;
  }
  if (lv_aDS > 8190) {
    return 0;
  }
  gv_auV[lv_aDS] = -1;
  return lv_aDS;
}
function f_aDT(lv_aDU) {
  if (lv_aDU == null) {
    return;
  } else {
    if (gv_auV.getInt(lv_aDU) != -1) {
      return;
    }
  }
  gv_auV[lv_aDU] = gv_auT;
  gv_auT = lv_aDU;
}
function f_aDV() {
  var lv_aDW = gv_auM;
  if (lv_aDW != 0) {
    gv_auM = gv_auO.getInt(lv_aDW);
  } else {
    gv_auN = gv_auN + 1;
    lv_aDW = gv_auN;
  }
  if (lv_aDW > 8190) {
    return 0;
  }
  gv_auO[lv_aDW] = -1;
  return lv_aDW;
}
function f_aDX(lv_aDY) {
  if (lv_aDY == null) {
    return;
  } else {
    if (gv_auO.getInt(lv_aDY) != -1) {
      return;
    }
  }
  gv_auO[lv_aDY] = gv_auM;
  gv_auM = lv_aDY;
}
function f_aDZ() {
  var lv_aEa = gv_auE;
  if (lv_aEa != 0) {
    gv_auE = gv_auG.getInt(lv_aEa);
  } else {
    gv_auF = gv_auF + 1;
    lv_aEa = gv_auF;
  }
  if (lv_aEa > 8190) {
    return 0;
  }
  gv_auG[lv_aEa] = -1;
  return lv_aEa;
}
function f_aEb(lv_aEc) {
  if (lv_aEc == null) {
    return;
  } else {
    if (gv_auG.getInt(lv_aEc) != -1) {
      return;
    }
  }
  gv_auG[lv_aEc] = gv_auE;
  gv_auE = lv_aEc;
}
function f_aEd() {
  var lv_aEe = gv_auy;
  if (lv_aEe != 0) {
    gv_auy = gv_auA.getInt(lv_aEe);
  } else {
    gv_auz = gv_auz + 1;
    lv_aEe = gv_auz;
  }
  if (lv_aEe > 8190) {
    return 0;
  }
  gv_auA[lv_aEe] = -1;
  return lv_aEe;
}
function f_aEf(lv_aEg) {
  if (lv_aEg == null) {
    return;
  } else {
    if (gv_auA.getInt(lv_aEg) != -1) {
      return;
    }
  }
  gv_auA[lv_aEg] = gv_auy;
  gv_auy = lv_aEg;
}
function f_aEh() {
  var lv_aEi = gv_aus;
  if (lv_aEi != 0) {
    gv_aus = gv_auu.getInt(lv_aEi);
  } else {
    gv_aut = gv_aut + 1;
    lv_aEi = gv_aut;
  }
  if (lv_aEi > 8190) {
    return 0;
  }
  gv_auu[lv_aEi] = -1;
  return lv_aEi;
}
function f_aEj(lv_aEk) {
  if (lv_aEk == null) {
    return;
  } else {
    if (gv_auu.getInt(lv_aEk) != -1) {
      return;
    }
  }
  gv_auu[lv_aEk] = gv_aus;
  gv_aus = lv_aEk;
}
function f_aEl() {
  var lv_aEm = gv_aul;
  if (lv_aEm != 0) {
    gv_aul = gv_aun.getInt(lv_aEm);
  } else {
    gv_aum = gv_aum + 1;
    lv_aEm = gv_aum;
  }
  if (lv_aEm > 8190) {
    return 0;
  }
  gv_aun[lv_aEm] = -1;
  return lv_aEm;
}
function f_aEn(lv_aEo) {
  if (lv_aEo == null) {
    return;
  } else {
    if (gv_aun.getInt(lv_aEo) != -1) {
      return;
    }
  }
  gv_aun[lv_aEo] = gv_aul;
  gv_aul = lv_aEo;
}
function f_aEp() {
  var lv_aEq = gv_atY;
  if (lv_aEq != 0) {
    gv_atY = gv_aua.getInt(lv_aEq);
  } else {
    gv_atZ = gv_atZ + 1;
    lv_aEq = gv_atZ;
  }
  if (lv_aEq > 2729) {
    return 0;
  }
  gv_auc[lv_aEq] = (lv_aEq - 1) * 3;
  gv_aue[lv_aEq] = (lv_aEq - 1) * 3;
  gv_aug[lv_aEq] = (lv_aEq - 1) * 3;
  gv_aua[lv_aEq] = -1;
  return lv_aEq;
}
function f_aEr(lv_aEs) {
  if (lv_aEs == null) {
    return;
  } else {
    if (gv_aua.getInt(lv_aEs) != -1) {
      return;
    }
  }
  gv_aua[lv_aEs] = gv_atY;
  gv_atY = lv_aEs;
}
function f_aEt(lv_aEu, lv_aEv) {
  gv_ayx = lv_aEu;
  gv_ayn = lv_aEv;
  TriggerEvaluate(gv_ayc);
  return gv_ayy;
}
function f_aEw() {
  var lv_aEx = gv_atO;
  if (lv_aEx != 0) {
    gv_atO = gv_atQ.getInt(lv_aEx);
  } else {
    gv_atP = gv_atP + 1;
    lv_aEx = gv_atP;
  }
  if (lv_aEx > 8190) {
    return 0;
  }
  gv_atQ[lv_aEx] = -1;
  return lv_aEx;
}
function f_aEy(lv_aEz) {
  if (lv_aEz == null) {
    return;
  } else {
    if (gv_atQ.getInt(lv_aEz) != -1) {
      return;
    }
  }
  gv_ayx = lv_aEz;
  TriggerEvaluate(gv_ayd);
  gv_atQ[lv_aEz] = gv_atO;
  gv_atO = lv_aEz;
}
function f_aEA() {
  var lv_aEB = gv_atJ;
  if (lv_aEB != 0) {
    gv_atJ = gv_atL.getInt(lv_aEB);
  } else {
    gv_atK = gv_atK + 1;
    lv_aEB = gv_atK;
  }
  if (lv_aEB > 8190) {
    return 0;
  }
  gv_atL[lv_aEB] = -1;
  return lv_aEB;
}
function f_aEC(lv_aED) {
  if (lv_aED == null) {
    return;
  } else {
    if (gv_atL.getInt(lv_aED) != -1) {
      return;
    }
  }
  gv_atL[lv_aED] = gv_atJ;
  gv_atJ = lv_aED;
}
function f_aEE() {
  var lv_aEF = gv_atD;
  if (lv_aEF != 0) {
    gv_atD = gv_atF.getInt(lv_aEF);
  } else {
    gv_atE = gv_atE + 1;
    lv_aEF = gv_atE;
  }
  if (lv_aEF > 8190) {
    return 0;
  }
  gv_atF[lv_aEF] = -1;
  return lv_aEF;
}
function f_aEG(lv_aEH) {
  if (lv_aEH == null) {
    return;
  } else {
    if (gv_atF.getInt(lv_aEH) != -1) {
      return;
    }
  }
  gv_atF[lv_aEH] = gv_atD;
  gv_atD = lv_aEH;
}
function f_aEI() {
  var lv_aEJ = gv_atx;
  if (lv_aEJ != 0) {
    gv_atx = gv_atz.getInt(lv_aEJ);
  } else {
    gv_aty = gv_aty + 1;
    lv_aEJ = gv_aty;
  }
  if (lv_aEJ > 8190) {
    return 0;
  }
  gv_atz[lv_aEJ] = -1;
  return lv_aEJ;
}
function f_aEK(lv_aEL) {
  if (lv_aEL == null) {
    return;
  } else {
    if (gv_atz.getInt(lv_aEL) != -1) {
      return;
    }
  }
  gv_atz[lv_aEL] = gv_atx;
  gv_atx = lv_aEL;
}
function f_aEM() {
  var lv_aEN = gv_atq;
  if (lv_aEN != 0) {
    gv_atq = gv_ats.getInt(lv_aEN);
  } else {
    gv_atr = gv_atr + 1;
    lv_aEN = gv_atr;
  }
  if (lv_aEN > 8190) {
    return 0;
  }
  gv_ats[lv_aEN] = -1;
  return lv_aEN;
}
function f_aEO(lv_aEP) {
  if (lv_aEP == null) {
    return;
  } else {
    if (gv_ats.getInt(lv_aEP) != -1) {
      return;
    }
  }
  gv_ats[lv_aEP] = gv_atq;
  gv_atq = lv_aEP;
}
function f_aEQ() {
  var lv_aER = gv_atk;
  if (lv_aER != 0) {
    gv_atk = gv_atm.getInt(lv_aER);
  } else {
    gv_atl = gv_atl + 1;
    lv_aER = gv_atl;
  }
  if (lv_aER > 8190) {
    return 0;
  }
  gv_atm[lv_aER] = -1;
  return lv_aER;
}
function f_aES() {
  var lv_aET = gv_ate;
  if (lv_aET != 0) {
    gv_ate = gv_atg.getInt(lv_aET);
  } else {
    gv_atf = gv_atf + 1;
    lv_aET = gv_atf;
  }
  if (lv_aET > 8190) {
    return 0;
  }
  gv_atg[lv_aET] = -1;
  return lv_aET;
}
function f_aEU(lv_aEV) {
  if (lv_aEV == null) {
    return;
  } else {
    if (gv_atg.getInt(lv_aEV) != -1) {
      return;
    }
  }
  gv_atg[lv_aEV] = gv_ate;
  gv_ate = lv_aEV;
}
function f_aEW(lv_aEX, lv_aEY) {
  gv_ayx = lv_aEX;
  gv_ayn = lv_aEY;
  TriggerEvaluate(gv_axZ);
  return gv_ayy;
}
function f_aEZ() {
  var lv_aFa = gv_asW;
  if (lv_aFa != 0) {
    gv_asW = gv_asY.getInt(lv_aFa);
  } else {
    gv_asX = gv_asX + 1;
    lv_aFa = gv_asX;
  }
  if (lv_aFa > 8190) {
    return 0;
  }
  gv_asY[lv_aFa] = -1;
  return lv_aFa;
}
function f_aFb(lv_aFc) {
  if (lv_aFc == null) {
    return;
  } else {
    if (gv_asY.getInt(lv_aFc) != -1) {
      return;
    }
  }
  gv_ayx = lv_aFc;
  TriggerEvaluate(gv_aya);
  gv_asY[lv_aFc] = gv_asW;
  gv_asW = lv_aFc;
}
function f_aFd() {
  var lv_aFe = gv_asR;
  if (lv_aFe != 0) {
    gv_asR = gv_asT.getInt(lv_aFe);
  } else {
    gv_asS = gv_asS + 1;
    lv_aFe = gv_asS;
  }
  if (lv_aFe > 8190) {
    return 0;
  }
  gv_asT[lv_aFe] = -1;
  return lv_aFe;
}
function f_aFf(lv_aFg) {
  if (lv_aFg == null) {
    return;
  } else {
    if (gv_asT.getInt(lv_aFg) != -1) {
      return;
    }
  }
  gv_asT[lv_aFg] = gv_asR;
  gv_asR = lv_aFg;
}
function f_aFh() {
  var lv_aFi = gv_asM;
  if (lv_aFi != 0) {
    gv_asM = gv_asO.getInt(lv_aFi);
  } else {
    gv_asN = gv_asN + 1;
    lv_aFi = gv_asN;
  }
  if (lv_aFi > 8190) {
    return 0;
  }
  gv_asO[lv_aFi] = -1;
  return lv_aFi;
}
function f_aFj(lv_aFk) {
  if (lv_aFk == null) {
    return;
  } else {
    if (gv_asO.getInt(lv_aFk) != -1) {
      return;
    }
  }
  gv_asO[lv_aFk] = gv_asM;
  gv_asM = lv_aFk;
}
function f_aFl() {
  var lv_aFm = gv_asE;
  if (lv_aFm != 0) {
    gv_asE = gv_asG.getInt(lv_aFm);
  } else {
    gv_asF = gv_asF + 1;
    lv_aFm = gv_asF;
  }
  if (lv_aFm > 8190) {
    return 0;
  }
  gv_asG[lv_aFm] = -1;
  return lv_aFm;
}
function f_aFn(lv_aFo) {
  if (lv_aFo == null) {
    return;
  } else {
    if (gv_asG.getInt(lv_aFo) != -1) {
      return;
    }
  }
  gv_asG[lv_aFo] = gv_asE;
  gv_asE = lv_aFo;
}
function f_aFp() {
  var lv_aFq = gv_asx;
  if (lv_aFq != 0) {
    gv_asx = gv_asz.getInt(lv_aFq);
  } else {
    gv_asy = gv_asy + 1;
    lv_aFq = gv_asy;
  }
  if (lv_aFq > 8190) {
    return 0;
  }
  gv_asz[lv_aFq] = -1;
  return lv_aFq;
}
function f_aFr(lv_aFs) {
  if (lv_aFs == null) {
    return;
  } else {
    if (gv_asz.getInt(lv_aFs) != -1) {
      return;
    }
  }
  gv_asz[lv_aFs] = gv_asx;
  gv_asx = lv_aFs;
}
function f_aFt() {
  var lv_aFu = gv_asr;
  if (lv_aFu != 0) {
    gv_asr = gv_ast.getInt(lv_aFu);
  } else {
    gv_ass = gv_ass + 1;
    lv_aFu = gv_ass;
  }
  if (lv_aFu > 8190) {
    return 0;
  }
  gv_ast[lv_aFu] = -1;
  return lv_aFu;
}
function f_aFv(lv_aFw) {
  if (lv_aFw == null) {
    return;
  } else {
    if (gv_ast.getInt(lv_aFw) != -1) {
      return;
    }
  }
  gv_ast[lv_aFw] = gv_asr;
  gv_asr = lv_aFw;
}
function f_aFx(lv_aFy, lv_aFz) {
  gv_ayx = lv_aFy;
  gv_ayn = lv_aFz;
  TriggerEvaluate(gv_axX);
  return gv_ayy;
}
function f_aFA() {
  var lv_aFB = gv_asi;
  if (lv_aFB != 0) {
    gv_asi = gv_ask.getInt(lv_aFB);
  } else {
    gv_asj = gv_asj + 1;
    lv_aFB = gv_asj;
  }
  if (lv_aFB > 8190) {
    return 0;
  }
  gv_ask[lv_aFB] = -1;
  return lv_aFB;
}
function f_aFC(lv_aFD) {
  if (lv_aFD == null) {
    return;
  } else {
    if (gv_ask.getInt(lv_aFD) != -1) {
      return;
    }
  }
  gv_ayx = lv_aFD;
  TriggerEvaluate(gv_axY);
  gv_ask[lv_aFD] = gv_asi;
  gv_asi = lv_aFD;
}
function f_aFE() {
  var lv_aFF = gv_ase;
  if (lv_aFF != 0) {
    gv_ase = gv_asg.getInt(lv_aFF);
  } else {
    gv_asf = gv_asf + 1;
    lv_aFF = gv_asf;
  }
  if (lv_aFF > 8190) {
    return 0;
  }
  gv_asg[lv_aFF] = -1;
  return lv_aFF;
}
function f_aFG(lv_aFH) {
  if (lv_aFH == null) {
    return;
  } else {
    if (gv_asg.getInt(lv_aFH) != -1) {
      return;
    }
  }
  gv_asg[lv_aFH] = gv_ase;
  gv_ase = lv_aFH;
}
function f_aFI() {
  var lv_aFJ = gv_asa;
  if (lv_aFJ != 0) {
    gv_asa = gv_asc.getInt(lv_aFJ);
  } else {
    gv_asb = gv_asb + 1;
    lv_aFJ = gv_asb;
  }
  if (lv_aFJ > 8190) {
    return 0;
  }
  gv_asc[lv_aFJ] = -1;
  return lv_aFJ;
}
function f_aFK(lv_aFL) {
  if (lv_aFL == null) {
    return;
  } else {
    if (gv_asc.getInt(lv_aFL) != -1) {
      return;
    }
  }
  gv_asc[lv_aFL] = gv_asa;
  gv_asa = lv_aFL;
}
function f_aFM() {
  var lv_aFN = gv_arT;
  if (lv_aFN != 0) {
    gv_arT = gv_arV.getInt(lv_aFN);
  } else {
    gv_arU = gv_arU + 1;
    lv_aFN = gv_arU;
  }
  if (lv_aFN > 8190) {
    return 0;
  }
  gv_arV[lv_aFN] = -1;
  return lv_aFN;
}
function f_aFO(lv_aFP) {
  if (lv_aFP == null) {
    return;
  } else {
    if (gv_arV.getInt(lv_aFP) != -1) {
      return;
    }
  }
  gv_arV[lv_aFP] = gv_arT;
  gv_arT = lv_aFP;
}
function f_aFQ(lv_aFR, lv_aFS) {
  return false;
}
function f_aFT() {
  var lv_aFU = gv_arL;
  if (lv_aFU != 0) {
    gv_arL = gv_arN.getInt(lv_aFU);
  } else {
    gv_arM = gv_arM + 1;
    lv_aFU = gv_arM;
  }
  if (lv_aFU > 8190) {
    return 0;
  }
  gv_arN[lv_aFU] = -1;
  return lv_aFU;
}
function f_aFV(lv_aFW) {
  if (lv_aFW == null) {
    return;
  } else {
    if (gv_arN.getInt(lv_aFW) != -1) {
      return;
    }
  }
  gv_ayx = lv_aFW;
  TriggerEvaluate(gv_axW);
  gv_arN[lv_aFW] = gv_arL;
  gv_arL = lv_aFW;
}
function f_aFX() {
  var lv_aFY = gv_arH;
  if (lv_aFY != 0) {
    gv_arH = gv_arJ.getInt(lv_aFY);
  } else {
    gv_arI = gv_arI + 1;
    lv_aFY = gv_arI;
  }
  if (lv_aFY > 8190) {
    return 0;
  }
  gv_arJ[lv_aFY] = -1;
  return lv_aFY;
}
function f_aFZ(lv_aGa) {
  if (lv_aGa == null) {
    return;
  } else {
    if (gv_arJ.getInt(lv_aGa) != -1) {
      return;
    }
  }
  gv_arJ[lv_aGa] = gv_arH;
  gv_arH = lv_aGa;
}
function f_aGb() {
  var lv_aGc = gv_arD;
  if (lv_aGc != 0) {
    gv_arD = gv_arF.getInt(lv_aGc);
  } else {
    gv_arE = gv_arE + 1;
    lv_aGc = gv_arE;
  }
  if (lv_aGc > 8190) {
    return 0;
  }
  gv_arF[lv_aGc] = -1;
  return lv_aGc;
}
function f_aGd(lv_aGe) {
  if (lv_aGe == null) {
    return;
  } else {
    if (gv_arF.getInt(lv_aGe) != -1) {
      return;
    }
  }
  gv_arF[lv_aGe] = gv_arD;
  gv_arD = lv_aGe;
}
function f_aGf(lv_aGg, lv_aGh) {
  gv_ayx = lv_aGg;
  gv_ayn = lv_aGh;
  TriggerEvaluate(gv_axT);
  return gv_ayy;
}
function f_aGi() {
  var lv_aGj = gv_art;
  if (lv_aGj != 0) {
    gv_art = gv_arv.getInt(lv_aGj);
  } else {
    gv_aru = gv_aru + 1;
    lv_aGj = gv_aru;
  }
  if (lv_aGj > 8190) {
    return 0;
  }
  gv_arv[lv_aGj] = -1;
  return lv_aGj;
}
function f_aGk(lv_aGl) {
  if (lv_aGl == null) {
    return;
  } else {
    if (gv_arv.getInt(lv_aGl) != -1) {
      return;
    }
  }
  gv_ayx = lv_aGl;
  TriggerEvaluate(gv_axU);
  gv_arv[lv_aGl] = gv_art;
  gv_art = lv_aGl;
}
function f_aGm(lv_aGn, lv_aGo) {
  gv_ayx = lv_aGn;
  gv_ayn = lv_aGo;
  TriggerEvaluate(gv_axR);
  return gv_ayy;
}
function f_aGp() {
  var lv_aGq = gv_ark;
  if (lv_aGq != 0) {
    gv_ark = gv_arm.getInt(lv_aGq);
  } else {
    gv_arl = gv_arl + 1;
    lv_aGq = gv_arl;
  }
  if (lv_aGq > 8190) {
    return 0;
  }
  gv_arm[lv_aGq] = -1;
  return lv_aGq;
}
function f_aGr(lv_aGs) {
  if (lv_aGs == null) {
    return;
  } else {
    if (gv_arm.getInt(lv_aGs) != -1) {
      return;
    }
  }
  gv_ayx = lv_aGs;
  TriggerEvaluate(gv_axS);
  gv_arm[lv_aGs] = gv_ark;
  gv_ark = lv_aGs;
}
function f_aGt() {
  var lv_aGu = gv_arf;
  if (lv_aGu != 0) {
    gv_arf = gv_arh.getInt(lv_aGu);
  } else {
    gv_arg = gv_arg + 1;
    lv_aGu = gv_arg;
  }
  if (lv_aGu > 8190) {
    return 0;
  }
  gv_arh[lv_aGu] = -1;
  return lv_aGu;
}
function f_aGv() {
  var lv_aGw = gv_aqZ;
  if (lv_aGw != 0) {
    gv_aqZ = gv_arb.getInt(lv_aGw);
  } else {
    gv_ara = gv_ara + 1;
    lv_aGw = gv_ara;
  }
  if (lv_aGw > 8190) {
    return 0;
  }
  gv_arb[lv_aGw] = -1;
  return lv_aGw;
}
function f_aGx(lv_aGy) {
  if (lv_aGy == null) {
    return;
  } else {
    if (gv_arb.getInt(lv_aGy) != -1) {
      return;
    }
  }
  gv_arb[lv_aGy] = gv_aqZ;
  gv_aqZ = lv_aGy;
}
function f_aGz() {
  var lv_aGA = gv_aqT;
  if (lv_aGA != 0) {
    gv_aqT = gv_aqV.getInt(lv_aGA);
  } else {
    gv_aqU = gv_aqU + 1;
    lv_aGA = gv_aqU;
  }
  if (lv_aGA > 8190) {
    return 0;
  }
  gv_aqV[lv_aGA] = -1;
  return lv_aGA;
}
function f_aGB(lv_aGC) {
  if (lv_aGC == null) {
    return;
  } else {
    if (gv_aqV.getInt(lv_aGC) != -1) {
      return;
    }
  }
  gv_aqV[lv_aGC] = gv_aqT;
  gv_aqT = lv_aGC;
}
function f_aGD(lv_aGE, lv_aGF) {
  gv_ayx = lv_aGE;
  gv_ayn = lv_aGF;
  TriggerEvaluate(gv_axO);
  return gv_ayy;
}
function f_aGG() {
  var lv_aGH = gv_aqJ;
  if (lv_aGH != 0) {
    gv_aqJ = gv_aqL.getInt(lv_aGH);
  } else {
    gv_aqK = gv_aqK + 1;
    lv_aGH = gv_aqK;
  }
  if (lv_aGH > 8190) {
    return 0;
  }
  gv_aqL[lv_aGH] = -1;
  return lv_aGH;
}
function f_aGI(lv_aGJ) {
  if (lv_aGJ == null) {
    return;
  } else {
    if (gv_aqL.getInt(lv_aGJ) != -1) {
      return;
    }
  }
  gv_ayx = lv_aGJ;
  TriggerEvaluate(gv_axP);
  gv_aqL[lv_aGJ] = gv_aqJ;
  gv_aqJ = lv_aGJ;
}
function f_aGK() {
  var lv_aGL = gv_aqC;
  if (lv_aGL != 0) {
    gv_aqC = gv_aqE.getInt(lv_aGL);
  } else {
    gv_aqD = gv_aqD + 1;
    lv_aGL = gv_aqD;
  }
  if (lv_aGL > 8190) {
    return 0;
  }
  gv_aqE[lv_aGL] = -1;
  return lv_aGL;
}
function f_aGM(lv_aGN, lv_aGO) {
  gv_ayx = lv_aGN;
  gv_ayn = lv_aGO;
  TriggerEvaluate(gv_axL);
  return gv_ayy;
}
function f_aGP() {
  var lv_aGQ = gv_aqt;
  if (lv_aGQ != 0) {
    gv_aqt = gv_aqv.getInt(lv_aGQ);
  } else {
    gv_aqu = gv_aqu + 1;
    lv_aGQ = gv_aqu;
  }
  if (lv_aGQ > 8190) {
    return 0;
  }
  gv_aqv[lv_aGQ] = -1;
  return lv_aGQ;
}
function f_aGR(lv_aGS) {
  if (lv_aGS == null) {
    return;
  } else {
    if (gv_aqv.getInt(lv_aGS) != -1) {
      return;
    }
  }
  gv_ayx = lv_aGS;
  TriggerEvaluate(gv_axM);
  gv_aqv[lv_aGS] = gv_aqt;
  gv_aqt = lv_aGS;
}
function f_aGT() {
  var lv_aGU = gv_aqn;
  if (lv_aGU != 0) {
    gv_aqn = gv_aqp.getInt(lv_aGU);
  } else {
    gv_aqo = gv_aqo + 1;
    lv_aGU = gv_aqo;
  }
  if (lv_aGU > 8190) {
    return 0;
  }
  gv_aqp[lv_aGU] = -1;
  return lv_aGU;
}
function f_aGV(lv_aGW) {
  if (lv_aGW == null) {
    return;
  } else {
    if (gv_aqp.getInt(lv_aGW) != -1) {
      return;
    }
  }
  gv_aqp[lv_aGW] = gv_aqn;
  gv_aqn = lv_aGW;
}
function f_aGX() {
  var lv_aGY = gv_aph;
  if (lv_aGY != 0) {
    gv_aph = gv_apj.getInt(lv_aGY);
  } else {
    gv_api = gv_api + 1;
    lv_aGY = gv_api;
  }
  if (lv_aGY > 8190) {
    return 0;
  }
  gv_apj[lv_aGY] = -1;
  return lv_aGY;
}
function f_aGZ() {
  var lv_aHa = gv_apB;
  if (lv_aHa != 0) {
    gv_apB = gv_apD.getInt(lv_aHa);
  } else {
    gv_apC = gv_apC + 1;
    lv_aHa = gv_apC;
  }
  if (lv_aHa > 818) {
    return 0;
  }
  gv_apF[lv_aHa] = (lv_aHa - 1) * 10;
  gv_apG[lv_aHa] = (lv_aHa - 1) * 10;
  gv_apD[lv_aHa] = -1;
  return lv_aHa;
}
function f_aHb(lv_aHc) {
  gv_ayx = lv_aHc;
  TriggerEvaluate(gv_apZ[gv_apX.getInt(lv_aHc)]);
}
function f_aHd(lv_aHe) {
  if (lv_aHe == null) {
    return;
  } else {
    if (gv_apW.getInt(lv_aHe) != -1) {
      return;
    }
  }
  gv_ayx = lv_aHe;
  TriggerEvaluate(gv_apY[gv_apX.getInt(lv_aHe)]);
  gv_apW[lv_aHe] = gv_apU;
  gv_apU = lv_aHe;
}
function f_aHf(lv_aHg, lv_aHh) {
  gv_ayx = lv_aHg;
  gv_ayn = lv_aHh;
  TriggerEvaluate(gv_axJ);
  return gv_ayy;
}
function f_aHi() {
  var lv_aHj = gv_apM;
  if (lv_aHj != 0) {
    gv_apM = gv_apO.getInt(lv_aHj);
  } else {
    gv_apN = gv_apN + 1;
    lv_aHj = gv_apN;
  }
  if (lv_aHj > 8190) {
    return 0;
  }
  gv_apO[lv_aHj] = -1;
  return lv_aHj;
}
function f_aHk(lv_aHl) {
  if (lv_aHl == null) {
    return;
  } else {
    if (gv_apO.getInt(lv_aHl) != -1) {
      return;
    }
  }
  gv_apO[lv_aHl] = gv_apM;
  gv_apM = lv_aHl;
}
function f_aHm() {
  var lv_aHn = gv_apH;
  if (lv_aHn != 0) {
    gv_apH = gv_apJ.getInt(lv_aHn);
  } else {
    gv_apI = gv_apI + 1;
    lv_aHn = gv_apI;
  }
  if (lv_aHn > 8190) {
    return 0;
  }
  gv_apK[lv_aHn] = null;
  gv_apJ[lv_aHn] = -1;
  return lv_aHn;
}
function f_aHo(lv_aHp) {
  if (lv_aHp == null) {
    return;
  } else {
    if (gv_apJ.getInt(lv_aHp) != -1) {
      return;
    }
  }
  gv_apJ[lv_aHp] = gv_apH;
  gv_apH = lv_aHp;
}
function f_aHq(lv_aHr, lv_aHs, lv_aHt, lv_aHu, lv_aHv) {
  gv_ayr = lv_aHr;
  gv_ayn = lv_aHs;
  gv_ayo = lv_aHt;
  gv_ayp = lv_aHu;
  gv_ayq = lv_aHv;
  TriggerEvaluate(gv_axK);
  return gv_ayz;
}
function f_aHw() {
  var lv_aHx;
  var lv_aHy = gv_apU;
  if (lv_aHy != 0) {
    gv_apU = gv_apW.getInt(lv_aHy);
  } else {
    gv_apV = gv_apV + 1;
    lv_aHy = gv_apV;
  }
  if (lv_aHy > 8190) {
    return 0;
  }
  gv_apX[lv_aHy] = 13;
  lv_aHx = lv_aHy;
  gv_apW[lv_aHy] = -1;
  return lv_aHy;
}
function f_aHz(lv_aHA, lv_aHB, lv_aHC, lv_aHD, lv_aHE) {
  var lv_aHF = f_aHq(lv_aHA, lv_aHB, lv_aHC, lv_aHD, lv_aHE);
  var lv_aHG;
  if (lv_aHF == 0) {
    return 0;
  }
  gv_apX[lv_aHF] = 66;
  lv_aHG = lv_aHF;
  return lv_aHF;
}
function f_aHH(lv_aHI, lv_aHJ, lv_aHK, lv_aHL, lv_aHM) {
  var lv_aHN = f_aHq(lv_aHI, lv_aHJ, lv_aHK, lv_aHL, lv_aHM);
  var lv_aHO;
  if (lv_aHN == 0) {
    return 0;
  }
  gv_apX[lv_aHN] = 14;
  lv_aHO = lv_aHN;
  return lv_aHN;
}
function f_aHP(lv_aHQ, lv_aHR, lv_aHS, lv_aHT, lv_aHU) {
  var lv_aHV = f_aHq(lv_aHQ, lv_aHR, lv_aHS, lv_aHT, lv_aHU);
  var lv_aHW;
  if (lv_aHV == 0) {
    return 0;
  }
  gv_apX[lv_aHV] = 61;
  lv_aHW = lv_aHV;
  return lv_aHV;
}
function f_aHX(lv_aHY, lv_aHZ, lv_aIa, lv_aIb, lv_aIc) {
  var lv_aId = f_aHq(lv_aHY, lv_aHZ, lv_aIa, lv_aIb, lv_aIc);
  var lv_aIe;
  if (lv_aId == 0) {
    return 0;
  }
  gv_apX[lv_aId] = 62;
  lv_aIe = lv_aId;
  return lv_aId;
}
function f_aIf(lv_aIg, lv_aIh, lv_aIi, lv_aIj, lv_aIk) {
  var lv_aIl = f_aHq(lv_aIg, lv_aIh, lv_aIi, lv_aIj, lv_aIk);
  var lv_aIm;
  if (lv_aIl == 0) {
    return 0;
  }
  gv_apX[lv_aIl] = 64;
  lv_aIm = lv_aIl;
  return lv_aIl;
}
function f_aIn(lv_aIo, lv_aIp, lv_aIq, lv_aIr) {
  return lv_aIr + lv_aIq * 256 + lv_aIp * 65536 + lv_aIo * gv_abL;
}
function f_aIs(lv_aIt) {
  if (lv_aIt < 0) {
    return 128 + -(-lv_aIt + -gv_abM) / gv_abL;
  } else {
    return lv_aIt / gv_abL;
  }
}
function f_aIu(lv_aIv) {
  var lv_aIw = lv_aIv * 256;
  if (lv_aIw < 0) {
    return 128 + -(-lv_aIw + -gv_abM) / gv_abL;
  } else {
    return R2I(lv_aIw / gv_abL);
  }
}
function f_aIx(lv_aIy) {
  var lv_aIz = lv_aIy * 65536;
  if (lv_aIz < 0) {
    return 128 + -(-lv_aIz + -gv_abM) / gv_abL;
  } else {
    return R2I(lv_aIz / gv_abL);
  }
}
function f_aIA(lv_aIB) {
  var lv_aIC = lv_aIB * gv_abL;
  if (lv_aIC < 0) {
    return 128 + -(-lv_aIC + -gv_abM) / gv_abL;
  } else {
    return R2I(lv_aIC / gv_abL);
  }
}
function f_aID(lv_aIE, lv_aIF) {
  return (
    S2S("|c" + gv_abE[f_aIs(lv_aIE)]) +
    gv_abE[f_aIu(lv_aIE)] +
    gv_abE[f_aIx(lv_aIE)] +
    gv_abE[f_aIA(lv_aIE)] +
    lv_aIF +
    "|r"
  );
}
function f_aIG() {
  var lv_aIH = 0;
  lv_aIH = 0;
  do {
    if (lv_aIH == 16) {
      break;
    }
    gv_abE[0 * 16 + lv_aIH] = S2S("0" + gv_abE[0 * 16 + lv_aIH]);
    gv_abE[lv_aIH * 16 + 0] = S2S(gv_abE[lv_aIH * 16 + 0] + "0");
    lv_aIH = lv_aIH + 1;
  } while (true);
  lv_aIH = 0;
  do {
    if (lv_aIH == 16) {
      break;
    }
    gv_abE[1 * 16 + lv_aIH] = S2S("1" + gv_abE[1 * 16 + lv_aIH]);
    gv_abE[lv_aIH * 16 + 1] = S2S(gv_abE[lv_aIH * 16 + 1] + "1");
    lv_aIH = lv_aIH + 1;
  } while (true);
  lv_aIH = 0;
  do {
    if (lv_aIH == 16) {
      break;
    }
    gv_abE[2 * 16 + lv_aIH] = S2S("2" + gv_abE[2 * 16 + lv_aIH]);
    gv_abE[lv_aIH * 16 + 2] = S2S(gv_abE[lv_aIH * 16 + 2] + "2");
    lv_aIH = lv_aIH + 1;
  } while (true);
  lv_aIH = 0;
  do {
    if (lv_aIH == 16) {
      break;
    }
    gv_abE[3 * 16 + lv_aIH] = S2S("3" + gv_abE[3 * 16 + lv_aIH]);
    gv_abE[lv_aIH * 16 + 3] = S2S(gv_abE[lv_aIH * 16 + 3] + "3");
    lv_aIH = lv_aIH + 1;
  } while (true);
  lv_aIH = 0;
  do {
    if (lv_aIH == 16) {
      break;
    }
    gv_abE[4 * 16 + lv_aIH] = S2S("4" + gv_abE[4 * 16 + lv_aIH]);
    gv_abE[lv_aIH * 16 + 4] = S2S(gv_abE[lv_aIH * 16 + 4] + "4");
    lv_aIH = lv_aIH + 1;
  } while (true);
  lv_aIH = 0;
  do {
    if (lv_aIH == 16) {
      break;
    }
    gv_abE[5 * 16 + lv_aIH] = S2S("5" + gv_abE[5 * 16 + lv_aIH]);
    gv_abE[lv_aIH * 16 + 5] = S2S(gv_abE[lv_aIH * 16 + 5] + "5");
    lv_aIH = lv_aIH + 1;
  } while (true);
  lv_aIH = 0;
  do {
    if (lv_aIH == 16) {
      break;
    }
    gv_abE[6 * 16 + lv_aIH] = S2S("6" + gv_abE[6 * 16 + lv_aIH]);
    gv_abE[lv_aIH * 16 + 6] = S2S(gv_abE[lv_aIH * 16 + 6] + "6");
    lv_aIH = lv_aIH + 1;
  } while (true);
  lv_aIH = 0;
  do {
    if (lv_aIH == 16) {
      break;
    }
    gv_abE[7 * 16 + lv_aIH] = S2S("7" + gv_abE[7 * 16 + lv_aIH]);
    gv_abE[lv_aIH * 16 + 7] = S2S(gv_abE[lv_aIH * 16 + 7] + "7");
    lv_aIH = lv_aIH + 1;
  } while (true);
  lv_aIH = 0;
  do {
    if (lv_aIH == 16) {
      break;
    }
    gv_abE[8 * 16 + lv_aIH] = S2S("8" + gv_abE[8 * 16 + lv_aIH]);
    gv_abE[lv_aIH * 16 + 8] = S2S(gv_abE[lv_aIH * 16 + 8] + "8");
    lv_aIH = lv_aIH + 1;
  } while (true);
  lv_aIH = 0;
  do {
    if (lv_aIH == 16) {
      break;
    }
    gv_abE[9 * 16 + lv_aIH] = S2S("9" + gv_abE[9 * 16 + lv_aIH]);
    gv_abE[lv_aIH * 16 + 9] = S2S(gv_abE[lv_aIH * 16 + 9] + "9");
    lv_aIH = lv_aIH + 1;
  } while (true);
  lv_aIH = 0;
  do {
    if (lv_aIH == 16) {
      break;
    }
    gv_abE[10 * 16 + lv_aIH] = S2S("A" + gv_abE[10 * 16 + lv_aIH]);
    gv_abE[lv_aIH * 16 + 10] = S2S(gv_abE[lv_aIH * 16 + 10] + "A");
    lv_aIH = lv_aIH + 1;
  } while (true);
  lv_aIH = 0;
  do {
    if (lv_aIH == 16) {
      break;
    }
    gv_abE[11 * 16 + lv_aIH] = S2S("B" + gv_abE[11 * 16 + lv_aIH]);
    gv_abE[lv_aIH * 16 + 11] = S2S(gv_abE[lv_aIH * 16 + 11] + "B");
    lv_aIH = lv_aIH + 1;
  } while (true);
  lv_aIH = 0;
  do {
    if (lv_aIH == 16) {
      break;
    }
    gv_abE[12 * 16 + lv_aIH] = S2S("C" + gv_abE[12 * 16 + lv_aIH]);
    gv_abE[lv_aIH * 16 + 12] = S2S(gv_abE[lv_aIH * 16 + 12] + "C");
    lv_aIH = lv_aIH + 1;
  } while (true);
  lv_aIH = 0;
  do {
    if (lv_aIH == 16) {
      break;
    }
    gv_abE[13 * 16 + lv_aIH] = S2S("D" + gv_abE[13 * 16 + lv_aIH]);
    gv_abE[lv_aIH * 16 + 13] = S2S(gv_abE[lv_aIH * 16 + 13] + "D");
    lv_aIH = lv_aIH + 1;
  } while (true);
  lv_aIH = 0;
  do {
    if (lv_aIH == 16) {
      break;
    }
    gv_abE[14 * 16 + lv_aIH] = S2S("E" + gv_abE[14 * 16 + lv_aIH]);
    gv_abE[lv_aIH * 16 + 14] = S2S(gv_abE[lv_aIH * 16 + 14] + "E");
    lv_aIH = lv_aIH + 1;
  } while (true);
  lv_aIH = 0;
  do {
    if (lv_aIH == 16) {
      break;
    }
    gv_abE[15 * 16 + lv_aIH] = S2S("F" + gv_abE[15 * 16 + lv_aIH]);
    gv_abE[lv_aIH * 16 + 15] = S2S(gv_abE[lv_aIH * 16 + 15] + "F");
    lv_aIH = lv_aIH + 1;
  } while (true);
}
function f_aII() {
  if (gv_abG) {
    GroupClear(gv_abH);
    gv_abG = false;
  }
  GroupAddUnit(gv_abH, GetEnumUnit());
}
function f_aIJ(lv_aIK) {
  gv_abG = true;
  gv_abH = lv_aIK;
  ForGroup(gv_abH, f_aII);
  if (gv_abG) {
    GroupClear(lv_aIK);
  }
}
function f_aIL() {
  if (gv_abK == 0) {
    gv_abJ[0] = CreateGroup();
  } else {
    gv_abK = gv_abK - 1;
  }
  f_aCD(GetHandleId(gv_abJ[gv_abK]) - gv_abI, 1);
  return gv_abJ[gv_abK];
}
function f_aIM(lv_aIN) {
  var lv_aIO = f_aCB(GetHandleId(lv_aIN) - gv_abI);
  var lv_aIP = true;
  if (lv_aIN == null) {
    lv_aIP = false;
  } else {
    if (lv_aIO == 0) {
      lv_aIP = false;
    } else {
      if (lv_aIO == 2) {
        lv_aIP = false;
      } else {
        if (gv_abK == 8191) {
          DestroyGroup(lv_aIN);
          lv_aIP = false;
        } else {
          GroupClear(lv_aIN);
          gv_abJ[gv_abK] = lv_aIN;
          gv_abK = gv_abK + 1;
          f_aCD(GetHandleId(lv_aIN) - gv_abI, 2);
        }
      }
    }
  }
  return lv_aIP;
}
function f_aIQ() {
  var lv_aIR = GetEnumPlayer();
  if (
    GetPlayerController(lv_aIR) == MAP_CONTROL_USER &&
    GetPlayerSlotState(lv_aIR) == PLAYER_SLOT_STATE_PLAYING
  ) {
    ForceAddPlayer(gv_alH, lv_aIR);
    SetPlayerAlliance(gv_alL, lv_aIR, ALLIANCE_SHARED_CONTROL, true);
    SetPlayerAlliance(gv_alL, lv_aIR, ALLIANCE_SHARED_VISION, true);
    SetPlayerAlliance(gv_alL, Player(14), ALLIANCE_PASSIVE, true);
    TriggerRegisterPlayerEventEndCinematic(gv_ago, lv_aIR);
  }
  lv_aIR = null;
}
function f_aIS() {
  var lv_aIT = CreateSoundFromLabel(
    "InterfaceError",
    false,
    false,
    false,
    10,
    10
  );
  DestroyTimer(GetExpiredTimer());
  SetSoundPosition(lv_aIT, 0.0, 0.0, 0.0);
  SetSoundVolume(lv_aIT, 0);
  StartSound(lv_aIT);
  KillSoundWhenDone(lv_aIT);
  lv_aIT = CreateSound(
    "Buildings\\Human\\Blacksmith\\BlacksmithWhat1.wav",
    false,
    true,
    true,
    10,
    10,
    "SpellsEAX"
  );
  SetSoundChannel(lv_aIT, 5);
  SetSoundDistances(lv_aIT, 1000, 5000);
  SetSoundDistanceCutoff(lv_aIT, 5000);
  SetSoundPosition(lv_aIT, 0.0, 0.0, 0.0);
  SetSoundVolume(lv_aIT, 0);
  StartSound(lv_aIT);
  KillSoundWhenDone(lv_aIT);
  lv_aIT = null;
}
function f_aIU(lv_aIV) {
  TriggerAddCondition(gv_abP, lv_aIV);
  gv_abN[gv_abO] = lv_aIV;
  gv_abO = gv_abO + 1;
}
function f_aIW() {
  DisableTrigger(gv_abP);
}
function f_aIX() {
  EnableTrigger(gv_abP);
}
function f_aIY() {
  if (GetUnitAbilityLevel(GetFilterUnit(), "Aloc") < 1) {
    TriggerRegisterUnitEvent(gv_abP, GetFilterUnit(), EVENT_UNIT_DAMAGED);
  }
  return false;
}
function f_aIZ() {
  if (GetUnitAbilityLevel(GetTriggerUnit(), "Aloc") < 1) {
    TriggerRegisterUnitEvent(gv_abP, GetTriggerUnit(), EVENT_UNIT_DAMAGED);
  }
  return false;
}
function f_aJa() {
  var lv_aJb = 0;
  var lv_aJc = IsTriggerEnabled(gv_abP);
  DisableTrigger(gv_abP);
  if (gv_abQ != null) {
    DestroyTrigger(gv_abQ);
  }
  gv_abQ = gv_abP;
  gv_abP = CreateTrigger();
  if (!lv_aJc) {
    DisableTrigger(gv_abP);
  }
  GroupEnumUnitsInRect(gv_abR, gv_abS, Filter(f_aIY));
  do {
    if (lv_aJb >= gv_abO) {
      break;
    }
    TriggerAddCondition(gv_abP, gv_abN[lv_aJb]);
    lv_aJb = lv_aJb + 1;
  } while (true);
}
function f_aJd() {
  var lv_aJe = CreateTrigger();
  var lv_aJf = CreateRegion();
  var lv_aJg = 0;
  gv_abS = GetWorldBounds();
  RegionAddRect(lv_aJf, gv_abS);
  TriggerRegisterEnterRegion(lv_aJe, lv_aJf, null);
  TriggerAddCondition(lv_aJe, Condition(f_aIZ));
  gv_abR = CreateGroup();
  gv_abP = CreateTrigger();
  do {
    if (lv_aJg >= gv_abO) {
      break;
    }
    TriggerAddCondition(gv_abP, gv_abN[lv_aJg]);
    lv_aJg = lv_aJg + 1;
  } while (true);
  GroupEnumUnitsInRect(gv_abR, GetWorldBounds(), Filter(f_aIY));
}
function f_aJh() {
  gv_abT = InitHashtable();
}
function f_aJi() {
  gv_abW = GetRectMinX(bj_mapInitialPlayableArea);
  gv_abX = GetRectMinY(bj_mapInitialPlayableArea);
  gv_abU = CreateUnit(gv_abV, "hpea", 0.0, 0.0, 0.0);
  UnitAddAbility(gv_abU, "A098");
  UnitAddAbility(gv_abU, "Avul");
  IssueImmediateOrderById(gv_abU, 852129);
  SetUnitX(gv_abU, gv_abW);
  SetUnitY(gv_abU, gv_abX);
}
function f_aJj() {
  if (gv_aca == 0) {
    gv_abZ[0] = CreateTimer();
  } else {
    gv_aca = gv_aca - 1;
  }
  SaveInteger(gv_abY, 0, GetHandleId(gv_abZ[gv_aca]), 0);
  return gv_abZ[gv_aca];
}
function f_aJk(lv_aJl) {
  if (lv_aJl == null) {
    return;
  }
  if (gv_aca == 8191) {
    DestroyTimer(lv_aJl);
  } else {
    PauseTimer(lv_aJl);
    if (LoadInteger(gv_abY, 0, GetHandleId(lv_aJl)) == gv_acb) {
      return;
    }
    SaveInteger(gv_abY, 0, GetHandleId(lv_aJl), gv_acb);
    gv_abZ[gv_aca] = lv_aJl;
    gv_aca = gv_aca + 1;
  }
}
function f_aJm() {
  gv_abY = InitHashtable();
}
function f_aJn(lv_aJo) {
  var lv_aJp = 2;
  var lv_aJq = 1;
  if (
    lv_aJo == null ||
    GetWidgetLife(lv_aJo) < 0.406 ||
    gv_acf.getInt(LoadInteger(gv_abT, gv_aci, GetHandleId(lv_aJo)) * gv_ace) ==
      1
  ) {
    return false;
  }
  do {
    if (
      lv_aJq >
      gv_acf.getInt(
        LoadInteger(gv_abT, gv_aci, GetHandleId(lv_aJo)) * gv_ace + 1
      )
    ) {
      break;
    }
    UnitRemoveAbility(
      lv_aJo,
      gv_acf.getInt(
        LoadInteger(gv_abT, gv_aci, GetHandleId(lv_aJo)) * gv_ace + lv_aJp
      )
    );
    gv_acf[
      LoadInteger(gv_abT, gv_aci, GetHandleId(lv_aJo)) * gv_ace + lv_aJp
    ] = 0;
    lv_aJp = lv_aJp + 1;
    lv_aJq = lv_aJq + 1;
  } while (true);
  gv_acf[LoadInteger(gv_abT, gv_aci, GetHandleId(lv_aJo)) * gv_ace + 1] = 0;
  if (GetUnitAbilityLevel(lv_aJo, "Aloc") < 1) {
    UnitAddAbility(lv_aJo, "Aloc");
  }
  SetUnitOwner(lv_aJo, Player(PLAYER_NEUTRAL_PASSIVE), true);
  SetUnitScale(lv_aJo, 1, 1, 1);
  SetUnitFlyHeight(lv_aJo, 0.0, 0.0);
  GroupAddUnit(gv_acc, lv_aJo);
  return true;
}
function f_aJr() {
  var lv_aJs = GetExpiredTimer();
  gv_acf[LoadInteger(gv_abY, 0, GetHandleId(lv_aJs)) * gv_ace] = 0;
  f_aJn(gv_ach[LoadInteger(gv_abY, 0, GetHandleId(lv_aJs))]);
  f_aJk(lv_aJs);
  lv_aJs = null;
}
function f_aJt(lv_aJu, lv_aJv, lv_aJw, lv_aJx) {
  var lv_aJy = 0;
  var lv_aJz;
  gv_acg = FirstOfGroup(gv_acc);
  if (gv_acg == null) {
    gv_acg = CreateUnit(Player(PLAYER_NEUTRAL_PASSIVE), gv_acw, 0.0, 0.0, 0.0);
    UnitAddAbility(gv_acg, "Aloc");
    UnitAddAbility(gv_acg, "Amrf");
    UnitRemoveAbility(gv_acg, "Amrf");
    SaveInteger(gv_abT, gv_aci, GetHandleId(gv_acg), gv_acd);
    gv_ach[gv_acd] = gv_acg;
    gv_acd = gv_acd + 1;
  }
  if (gv_acg != null) {
    GroupRemoveUnit(gv_acc, gv_acg);
  }
  if (lv_aJx > 0.0) {
    gv_acf[LoadInteger(gv_abT, gv_aci, GetHandleId(gv_acg)) * gv_ace] = 1;
    lv_aJz = f_aJj();
    SaveInteger(
      gv_abY,
      0,
      GetHandleId(lv_aJz),
      LoadInteger(gv_abT, gv_aci, GetHandleId(gv_acg))
    );
    TimerStart(lv_aJz, lv_aJx, false, f_aJr);
  }
  SetUnitPosition(gv_acg, lv_aJv, lv_aJw);
  SetUnitOwner(gv_acg, lv_aJu, false);
  return gv_acg;
}
function f_aJA(lv_aJB, lv_aJC, lv_aJD) {
  var lv_aJE = 2;
  var lv_aJF;
  if (
    gv_acf.getInt(
      LoadInteger(gv_abT, gv_aci, GetHandleId(lv_aJB)) * gv_ace + 1
    ) == 3 ||
    lv_aJB == null
  ) {
    return false;
  }
  do {
    if (
      gv_acf.getInt(
        LoadInteger(gv_abT, gv_aci, GetHandleId(lv_aJB)) * gv_ace + lv_aJE
      ) == 0
    ) {
      break;
    }
    lv_aJE = lv_aJE + 1;
  } while (true);
  gv_acf[
    LoadInteger(gv_abT, gv_aci, GetHandleId(lv_aJB)) * gv_ace + lv_aJE
  ] = lv_aJC;
  gv_acf[LoadInteger(gv_abT, gv_aci, GetHandleId(lv_aJB)) * gv_ace + 1] =
    gv_acf.getInt(
      LoadInteger(gv_abT, gv_aci, GetHandleId(lv_aJB)) * gv_ace + 1
    ) + 1;
  UnitAddAbility(lv_aJB, lv_aJC);
  if (lv_aJD > 1) {
    SetUnitAbilityLevel(lv_aJB, lv_aJC, lv_aJD);
  }
  return true;
}
function f_aJG() {
  gv_ace = 3 + 2;
  gv_acc = CreateGroup();
  gv_aci = f_aDg();
}
function f_aJH() {
  var lv_aJI = 5500;
  var lv_aJJ = 15000;
  var lv_aJK = 22000;
  var lv_aJL = 35000;
  var lv_aJM = 50000;
  var lv_aJN = 120000;
  var lv_aJO = 60000;
  var lv_aJP = 10;
  var lv_aJQ = 200000;
  var lv_aJR = 45;
  var lv_aJS = 20000;
  var lv_aJT = 120000;
  var lv_aJU = 75000;
  var lv_aJV = 150000;
  var lv_aJW = 500000;
  gv_acl = f_aDd();
  gv_acm = f_aDd();
  SaveInteger(gv_abT, gv_acl, StringHash("|cx001A035|rBattle Axe"), lv_aJI);
  SaveInteger(gv_abT, gv_acm, StringHash("|cx001A035|rBattle Axe"), 0);
  SaveInteger(
    gv_abT,
    gv_acl,
    StringHash("|cx002A035|rMighty Gauntlets"),
    lv_aJI
  );
  SaveInteger(gv_abT, gv_acm, StringHash("|cx002A035|rMighty Gauntlets"), 0);
  SaveInteger(gv_abT, gv_acl, StringHash("|cx003A035|rHero's Blade"), lv_aJI);
  SaveInteger(gv_abT, gv_acm, StringHash("|cx003A035|rHero's Blade"), 0);
  SaveInteger(gv_abT, gv_acl, StringHash("|cx004A055|rPeacebringer"), lv_aJJ);
  SaveInteger(gv_abT, gv_acm, StringHash("|cx004A055|rPeacebringer"), 0);
  SaveInteger(gv_abT, gv_acl, StringHash("|cx005A055|rGreat Halberd"), lv_aJJ);
  SaveInteger(gv_abT, gv_acm, StringHash("|cx005A055|rGreat Halberd"), 0);
  SaveInteger(gv_abT, gv_acl, StringHash("|cx006A055|rBrooch of War"), lv_aJJ);
  SaveInteger(gv_abT, gv_acm, StringHash("|cx006A055|rBrooch of War"), 0);
  SaveInteger(
    gv_abT,
    gv_acl,
    StringHash("|cx007A075|rCorinthian Short Sword"),
    lv_aJK
  );
  SaveInteger(
    gv_abT,
    gv_acm,
    StringHash("|cx007A075|rCorinthian Short Sword"),
    1
  );
  SaveInteger(
    gv_abT,
    gv_acl,
    StringHash("|cx008A075|rGauntlet's of Heros"),
    lv_aJK
  );
  SaveInteger(gv_abT, gv_acm, StringHash("|cx008A075|rGauntlet's of Heros"), 1);
  SaveInteger(
    gv_abT,
    gv_acl,
    StringHash("|cx009A075|rTalisman of Battle"),
    lv_aJK
  );
  SaveInteger(gv_abT, gv_acm, StringHash("|cx009A075|rTalisman of Battle"), 1);
  SaveInteger(
    gv_abT,
    gv_acl,
    StringHash("|cx010A035|rSturdy Leggings"),
    lv_aJI
  );
  SaveInteger(gv_abT, gv_acm, StringHash("|cx010A035|rSturdy Leggings"), 0);
  SaveInteger(gv_abT, gv_acl, StringHash("|cx011A035|rRing Mail"), lv_aJI);
  SaveInteger(gv_abT, gv_acm, StringHash("|cx011A035|rRing Mail"), 0);
  SaveInteger(
    gv_abT,
    gv_acl,
    StringHash("|cx012A035|rGreat Helm of War"),
    lv_aJI
  );
  SaveInteger(gv_abT, gv_acm, StringHash("|cx012A035|rGreat Helm of War"), 0);
  SaveInteger(gv_abT, gv_acl, StringHash("|cx013A055|rMedium Shield"), lv_aJJ);
  SaveInteger(gv_abT, gv_acm, StringHash("|cx013A055|rMedium Shield"), 0);
  SaveInteger(gv_abT, gv_acl, StringHash("|cx014A055|rSplint Mail"), lv_aJJ);
  SaveInteger(gv_abT, gv_acm, StringHash("|cx014A055|rSplint Mail"), 0);
  SaveInteger(gv_abT, gv_acl, StringHash("|cx015A055|rGalerus"), lv_aJJ);
  SaveInteger(gv_abT, gv_acm, StringHash("|cx015A055|rGalerus"), 0);
  SaveInteger(
    gv_abT,
    gv_acl,
    StringHash("|cx016A075|rCorinthian Helm"),
    lv_aJK
  );
  SaveInteger(gv_abT, gv_acm, StringHash("|cx016A075|rCorinthian Helm"), 1);
  SaveInteger(
    gv_abT,
    gv_acl,
    StringHash("|cx017A075|rCorinthian Chain Mail"),
    lv_aJK
  );
  SaveInteger(
    gv_abT,
    gv_acm,
    StringHash("|cx017A075|rCorinthian Chain Mail"),
    1
  );
  SaveInteger(gv_abT, gv_acl, StringHash("|cx018A075|rBronze Bracers"), lv_aJK);
  SaveInteger(gv_abT, gv_acm, StringHash("|cx018A075|rBronze Bracers"), 1);
  SaveInteger(gv_abT, gv_acl, StringHash("|cx019A035|rGlowing Orb"), lv_aJI);
  SaveInteger(gv_abT, gv_acm, StringHash("|cx019A035|rGlowing Orb"), 0);
  SaveInteger(
    gv_abT,
    gv_acl,
    StringHash("|cx020A035|rStarlight Charm"),
    lv_aJI
  );
  SaveInteger(gv_abT, gv_acm, StringHash("|cx020A035|rStarlight Charm"), 0);
  SaveInteger(
    gv_abT,
    gv_acl,
    StringHash("|cx021A035|rApprentice Ring"),
    lv_aJI
  );
  SaveInteger(gv_abT, gv_acm, StringHash("|cx021A035|rApprentice Ring"), 0);
  SaveInteger(gv_abT, gv_acl, StringHash("|cx022A055|rSoul Ring"), lv_aJJ);
  SaveInteger(gv_abT, gv_acm, StringHash("|cx022A055|rSoul Ring"), 0);
  SaveInteger(
    gv_abT,
    gv_acl,
    StringHash("|cx023A055|rSash of Enlightenment"),
    lv_aJJ
  );
  SaveInteger(
    gv_abT,
    gv_acm,
    StringHash("|cx023A055|rSash of Enlightenment"),
    0
  );
  SaveInteger(gv_abT, gv_acl, StringHash("|cx024A055|rPower Orb"), lv_aJJ);
  SaveInteger(gv_abT, gv_acm, StringHash("|cx024A055|rPower Orb"), 0);
  SaveInteger(gv_abT, gv_acl, StringHash("|cx025A075|rOracle Staff"), lv_aJK);
  SaveInteger(gv_abT, gv_acm, StringHash("|cx025A075|rOracle Staff"), 1);
  SaveInteger(
    gv_abT,
    gv_acl,
    StringHash("|cx026A075|rRobe of the Mind"),
    lv_aJK
  );
  SaveInteger(gv_abT, gv_acm, StringHash("|cx026A075|rRobe of the Mind"), 1);
  SaveInteger(
    gv_abT,
    gv_acl,
    StringHash("|cx027A075|rRod of the Magi"),
    lv_aJK
  );
  SaveInteger(gv_abT, gv_acm, StringHash("|cx027A075|rRod of the Magi"), 1);
  SaveInteger(
    gv_abT,
    gv_acl,
    StringHash("|cx028A100|rMassive War Axe"),
    lv_aJL
  );
  SaveInteger(gv_abT, gv_acm, StringHash("|cx028A100|rMassive War Axe"), 3);
  SaveInteger(
    gv_abT,
    gv_acl,
    StringHash("|cx029A100|rCrusader's Gauntlets"),
    lv_aJL
  );
  SaveInteger(
    gv_abT,
    gv_acm,
    StringHash("|cx029A100|rCrusader's Gauntlets"),
    3
  );
  SaveInteger(
    gv_abT,
    gv_acl,
    StringHash("|cx030A100|rCrusader's Maul"),
    lv_aJL
  );
  SaveInteger(gv_abT, gv_acm, StringHash("|cx030A100|rCrusader's Maul"), 3);
  SaveInteger(
    gv_abT,
    gv_acl,
    StringHash("|cx042A115|rSteel Gauntlets"),
    lv_aJM
  );
  SaveInteger(gv_abT, gv_acm, StringHash("|cx042A115|rSteel Gauntlets"), 5);
  SaveInteger(gv_abT, gv_acl, StringHash("|cx032A115|rGladius"), lv_aJM);
  SaveInteger(gv_abT, gv_acm, StringHash("|cx032A115|rGladius"), 5);
  SaveInteger(
    gv_abT,
    gv_acl,
    StringHash("|cx033A115|rCrusader's Cuirass"),
    lv_aJM
  );
  SaveInteger(gv_abT, gv_acm, StringHash("|cx033A115|rCrusader's Cuirass"), 5);
  SaveInteger(
    gv_abT,
    gv_acl,
    StringHash("|cx034A135|rSpartan Long Sword"),
    lv_aJN
  );
  SaveInteger(gv_abT, gv_acm, StringHash("|cx034A135|rSpartan Long Sword"), 10);
  SaveInteger(
    gv_abT,
    gv_acl,
    StringHash("|cx035A135|rSpartan Cuirass"),
    lv_aJN
  );
  SaveInteger(gv_abT, gv_acm, StringHash("|cx035A135|rSpartan Cuirass"), 10);
  SaveInteger(gv_abT, gv_acl, StringHash("|cx036A135|rSpartan Helm"), lv_aJN);
  SaveInteger(gv_abT, gv_acm, StringHash("|cx036A135|rSpartan Helm"), 10);
  SaveInteger(gv_abT, gv_acl, StringHash("|cx037A100|rGolden Sash"), lv_aJL);
  SaveInteger(gv_abT, gv_acm, StringHash("|cx037A100|rGolden Sash"), 3);
  SaveInteger(
    gv_abT,
    gv_acl,
    StringHash("|cx038A100|rFine Steel Shirt"),
    lv_aJL
  );
  SaveInteger(gv_abT, gv_acm, StringHash("|cx038A100|rFine Steel Shirt"), 3);
  SaveInteger(
    gv_abT,
    gv_acl,
    StringHash("|cx039A100|rCape of Evasion"),
    lv_aJL
  );
  SaveInteger(gv_abT, gv_acm, StringHash("|cx039A100|rCape of Evasion"), 3);
  SaveInteger(gv_abT, gv_acl, StringHash("|cx040A115|rPlate Mail"), lv_aJM);
  SaveInteger(gv_abT, gv_acm, StringHash("|cx040A115|rPlate Mail"), 5);
  SaveInteger(
    gv_abT,
    gv_acl,
    StringHash("|cx041A115|rCloak of Resilience"),
    lv_aJM
  );
  SaveInteger(gv_abT, gv_acm, StringHash("|cx041A115|rCloak of Resilience"), 5);
  SaveInteger(
    gv_abT,
    gv_acl,
    StringHash("|cx031A115|rEmperors Great Sword"),
    lv_aJM
  );
  SaveInteger(
    gv_abT,
    gv_acm,
    StringHash("|cx031A115|rEmperors Great Sword"),
    5
  );
  SaveInteger(gv_abT, gv_acl, StringHash("|cx045A135|rRoyal Greaves"), lv_aJN);
  SaveInteger(gv_abT, gv_acm, StringHash("|cx045A135|rRoyal Greaves"), 10);
  SaveInteger(gv_abT, gv_acl, StringHash("|cx044A135|rEpic Tower"), lv_aJN);
  SaveInteger(gv_abT, gv_acm, StringHash("|cx044A135|rEpic Tower"), 10);
  SaveInteger(
    gv_abT,
    gv_acl,
    StringHash("|cx043A135|rEmperors Plate Mail"),
    lv_aJN
  );
  SaveInteger(
    gv_abT,
    gv_acm,
    StringHash("|cx043A135|rEmperors Plate Mail"),
    10
  );
  SaveInteger(
    gv_abT,
    gv_acl,
    StringHash("|cx046A100|rAmulet of Power"),
    lv_aJL
  );
  SaveInteger(gv_abT, gv_acm, StringHash("|cx046A100|rAmulet of Power"), 3);
  SaveInteger(gv_abT, gv_acl, StringHash("|cx047A100|rJeweled Ring"), lv_aJL);
  SaveInteger(gv_abT, gv_acm, StringHash("|cx047A100|rJeweled Ring"), 3);
  SaveInteger(
    gv_abT,
    gv_acl,
    StringHash("|cx048A100|rRing of the Magi"),
    lv_aJL
  );
  SaveInteger(gv_abT, gv_acm, StringHash("|cx048A100|rRing of the Magi"), 3);
  SaveInteger(
    gv_abT,
    gv_acl,
    StringHash("|cx049A115|rStaff of the Chosen One"),
    lv_aJM
  );
  SaveInteger(
    gv_abT,
    gv_acm,
    StringHash("|cx049A115|rStaff of the Chosen One"),
    5
  );
  SaveInteger(
    gv_abT,
    gv_acl,
    StringHash("|cx050A115|rOrb of the Mind"),
    lv_aJM
  );
  SaveInteger(gv_abT, gv_acm, StringHash("|cx050A115|rOrb of the Mind"), 5);
  SaveInteger(
    gv_abT,
    gv_acl,
    StringHash("|cx051A115|rCharm of Delphi"),
    lv_aJM
  );
  SaveInteger(gv_abT, gv_acm, StringHash("|cx051A115|rCharm of Delphi"), 5);
  SaveInteger(gv_abT, gv_acl, StringHash("|cx052A135|rBlackfire Orb"), lv_aJN);
  SaveInteger(gv_abT, gv_acm, StringHash("|cx052A135|rBlackfire Orb"), 10);
  SaveInteger(gv_abT, gv_acl, StringHash("|cx053A135|rMagi's Crown"), lv_aJN);
  SaveInteger(gv_abT, gv_acm, StringHash("|cx053A135|rMagi's Crown"), 10);
  SaveInteger(
    gv_abT,
    gv_acl,
    StringHash("|cx054A135|rHigh Oracle Staff"),
    lv_aJN
  );
  SaveInteger(gv_abT, gv_acm, StringHash("|cx054A135|rHigh Oracle Staff"), 10);
  SaveInteger(
    gv_abT,
    gv_acl,
    StringHash("|cx055A100|rScepter of Thanatos"),
    lv_aJO
  );
  SaveInteger(
    gv_abT,
    gv_acm,
    StringHash("|cx055A100|rScepter of Thanatos"),
    lv_aJP
  );
  SaveInteger(
    gv_abT,
    gv_acl,
    StringHash("|cx056A100|rArchmages Mantle"),
    lv_aJO
  );
  SaveInteger(
    gv_abT,
    gv_acm,
    StringHash("|cx056A100|rArchmages Mantle"),
    lv_aJP
  );
  SaveInteger(gv_abT, gv_acl, StringHash("|cx057A100|rAxe of Thereus"), lv_aJO);
  SaveInteger(gv_abT, gv_acm, StringHash("|cx057A100|rAxe of Thereus"), lv_aJP);
  SaveInteger(
    gv_abT,
    gv_acl,
    StringHash("|cx058A100|rAlexander's Cuirass"),
    lv_aJO
  );
  SaveInteger(
    gv_abT,
    gv_acm,
    StringHash("|cx058A100|rAlexander's Cuirass"),
    lv_aJP
  );
  SaveInteger(
    gv_abT,
    gv_acl,
    StringHash("|cx059A100|rHector's Shimmering Shield"),
    lv_aJO
  );
  SaveInteger(
    gv_abT,
    gv_acm,
    StringHash("|cx059A100|rHector's Shimmering Shield"),
    lv_aJP
  );
  SaveInteger(
    gv_abT,
    gv_acl,
    StringHash("|cx060A100|rTelamon's Boar Skewer"),
    lv_aJO
  );
  SaveInteger(
    gv_abT,
    gv_acm,
    StringHash("|cx060A100|rTelamon's Boar Skewer"),
    lv_aJP
  );
  SaveInteger(
    gv_abT,
    gv_acl,
    StringHash("|cx061A100|rThe Mighty Bow of Herakles"),
    lv_aJO
  );
  SaveInteger(
    gv_abT,
    gv_acm,
    StringHash("|cx061A100|rThe Mighty Bow of Herakles"),
    lv_aJP
  );
  SaveInteger(
    gv_abT,
    gv_acl,
    StringHash("|cx062A100|rAssassin's Shroud"),
    lv_aJO
  );
  SaveInteger(
    gv_abT,
    gv_acm,
    StringHash("|cx062A100|rAssassin's Shroud"),
    lv_aJP
  );
  SaveInteger(
    gv_abT,
    gv_acl,
    StringHash("|cx063A100|rVestment of the Overlord"),
    lv_aJO
  );
  SaveInteger(
    gv_abT,
    gv_acm,
    StringHash("|cx063A100|rVestment of the Overlord"),
    lv_aJP
  );
  SaveInteger(
    gv_abT,
    gv_acl,
    StringHash("|cx064A135|rGolden Shield of Pelarohn"),
    35000
  );
  SaveInteger(
    gv_abT,
    gv_acm,
    StringHash("|cx064A135|rGolden Shield of Pelarohn"),
    25
  );
  SaveInteger(
    gv_abT,
    gv_acl,
    StringHash("|cx065A135|rImmortal Armor of Achillies"),
    35000
  );
  SaveInteger(
    gv_abT,
    gv_acm,
    StringHash("|cx065A135|rImmortal Armor of Achillies"),
    25
  );
  SaveInteger(gv_abT, gv_acl, StringHash("|cx066A135|rAres Warhelm"), 35000);
  SaveInteger(gv_abT, gv_acm, StringHash("|cx066A135|rAres Warhelm"), 25);
  SaveInteger(
    gv_abT,
    gv_acl,
    StringHash("|cx067A135|rAlexander's Greaves"),
    35000
  );
  SaveInteger(
    gv_abT,
    gv_acm,
    StringHash("|cx067A135|rAlexander's Greaves"),
    25
  );
  SaveInteger(gv_abT, gv_acl, StringHash("|cx068A135|rOdysseus Armor"), 35000);
  SaveInteger(gv_abT, gv_acm, StringHash("|cx068A135|rOdysseus Armor"), 25);
  SaveInteger(
    gv_abT,
    gv_acl,
    StringHash("|cx069A135|rBlack Pearl Bracelet"),
    35000
  );
  SaveInteger(
    gv_abT,
    gv_acm,
    StringHash("|cx069A135|rBlack Pearl Bracelet"),
    25
  );
  SaveInteger(gv_abT, gv_acl, StringHash("|cx070A135|rCadeus"), 35000);
  SaveInteger(gv_abT, gv_acm, StringHash("|cx070A135|rCadeus"), 25);
  SaveInteger(
    gv_abT,
    gv_acl,
    StringHash("|cx071A135|rHesione's Golden Veil"),
    35000
  );
  SaveInteger(
    gv_abT,
    gv_acm,
    StringHash("|cx071A135|rHesione's Golden Veil"),
    25
  );
  SaveInteger(
    gv_abT,
    gv_acl,
    StringHash("|cx072A135|rDionysus' Wineskin"),
    35000
  );
  SaveInteger(gv_abT, gv_acm, StringHash("|cx072A135|rDionysus' Wineskin"), 25);
  SaveInteger(gv_abT, gv_acl, StringHash("|cx073A135|rArchmages Clasp"), 35000);
  SaveInteger(gv_abT, gv_acm, StringHash("|cx073A135|rArchmages Clasp"), 25);
  SaveInteger(
    gv_abT,
    gv_acl,
    StringHash("|cx074A140|rRed Dragonscale Shield"),
    lv_aJQ
  );
  SaveInteger(
    gv_abT,
    gv_acm,
    StringHash("|cx074A140|rRed Dragonscale Shield"),
    lv_aJR
  );
  SaveInteger(
    gv_abT,
    gv_acl,
    StringHash("|cx075A140|rRed Dragonscale Armor"),
    lv_aJQ
  );
  SaveInteger(
    gv_abT,
    gv_acm,
    StringHash("|cx075A140|rRed Dragonscale Armor"),
    lv_aJR
  );
  SaveInteger(
    gv_abT,
    gv_acl,
    StringHash("|cx076A140|rRed Dragonscale Ring"),
    lv_aJQ
  );
  SaveInteger(
    gv_abT,
    gv_acm,
    StringHash("|cx076A140|rRed Dragonscale Ring"),
    lv_aJR
  );
  SaveInteger(
    gv_abT,
    gv_acl,
    StringHash("|cx077A140|rWhite Dragonscale Shield"),
    lv_aJQ
  );
  SaveInteger(
    gv_abT,
    gv_acm,
    StringHash("|cx077A140|rWhite Dragonscale Shield"),
    lv_aJR
  );
  SaveInteger(
    gv_abT,
    gv_acl,
    StringHash("|cx078A140|rWhite Dragonscale Armor"),
    lv_aJQ
  );
  SaveInteger(
    gv_abT,
    gv_acm,
    StringHash("|cx078A140|rWhite Dragonscale Armor"),
    lv_aJR
  );
  SaveInteger(
    gv_abT,
    gv_acl,
    StringHash("|cx079A140|rWhite Dragonscale Ring"),
    lv_aJQ
  );
  SaveInteger(
    gv_abT,
    gv_acm,
    StringHash("|cx079A140|rWhite Dragonscale Ring"),
    lv_aJR
  );
  SaveInteger(
    gv_abT,
    gv_acl,
    StringHash("|cx080A140|rGreen Dragonscale Shield"),
    lv_aJQ
  );
  SaveInteger(
    gv_abT,
    gv_acm,
    StringHash("|cx080A140|rGreen Dragonscale Shield"),
    lv_aJR
  );
  SaveInteger(
    gv_abT,
    gv_acl,
    StringHash("|cx081A140|rGreen Dragonscale Armor"),
    lv_aJQ
  );
  SaveInteger(
    gv_abT,
    gv_acm,
    StringHash("|cx081A140|rGreen Dragonscale Armor"),
    lv_aJR
  );
  SaveInteger(
    gv_abT,
    gv_acl,
    StringHash("|cx082A140|rGreen Dragonscale Ring"),
    lv_aJQ
  );
  SaveInteger(
    gv_abT,
    gv_acm,
    StringHash("|cx082A140|rGreen Dragonscale Ring"),
    lv_aJR
  );
  SaveInteger(
    gv_abT,
    gv_acl,
    StringHash("|cx083A120|rHelm of the Nemean Lion"),
    75000
  );
  SaveInteger(
    gv_abT,
    gv_acm,
    StringHash("|cx083A120|rHelm of the Nemean Lion"),
    50
  );
  SaveInteger(
    gv_abT,
    gv_acl,
    StringHash("|cx084A120|rPelt of the Nemean Lion"),
    75000
  );
  SaveInteger(
    gv_abT,
    gv_acm,
    StringHash("|cx084A120|rPelt of the Nemean Lion"),
    50
  );
  SaveInteger(
    gv_abT,
    gv_acl,
    StringHash("|cx085A120|rBracers of the Nemean Lion"),
    75000
  );
  SaveInteger(
    gv_abT,
    gv_acm,
    StringHash("|cx085A120|rBracers of the Nemean Lion"),
    50
  );
  SaveInteger(
    gv_abT,
    gv_acl,
    StringHash("|cx086A120|rGreaves of the Nemean Lion"),
    75000
  );
  SaveInteger(
    gv_abT,
    gv_acm,
    StringHash("|cx086A120|rGreaves of the Nemean Lion"),
    50
  );
  SaveInteger(
    gv_abT,
    gv_acl,
    StringHash("|cx087A130|rMighty Olympian Sword"),
    100000
  );
  SaveInteger(
    gv_abT,
    gv_acm,
    StringHash("|cx087A130|rMighty Olympian Sword"),
    75
  );
  SaveInteger(
    gv_abT,
    gv_acl,
    StringHash("|cx088A130|rSacred Olympian Sword"),
    100000
  );
  SaveInteger(
    gv_abT,
    gv_acm,
    StringHash("|cx088A130|rSacred Olympian Sword"),
    75
  );
  SaveInteger(
    gv_abT,
    gv_acl,
    StringHash("|cx089A140|rMighy Olympian Helm"),
    100000
  );
  SaveInteger(
    gv_abT,
    gv_acm,
    StringHash("|cx089A140|rMighy Olympian Helm"),
    100
  );
  SaveInteger(
    gv_abT,
    gv_acl,
    StringHash("|cx090A140|rSacred Olympian Helm"),
    100000
  );
  SaveInteger(
    gv_abT,
    gv_acm,
    StringHash("|cx090A140|rSacred Olympian Helm"),
    100
  );
  SaveInteger(
    gv_abT,
    gv_acl,
    StringHash("|cx091A145|rMighty Olympian Armor"),
    100000
  );
  SaveInteger(
    gv_abT,
    gv_acm,
    StringHash("|cx091A145|rMighty Olympian Armor"),
    150
  );
  SaveInteger(
    gv_abT,
    gv_acl,
    StringHash("|cx092A145|rSacred Olympian Armor"),
    100000
  );
  SaveInteger(
    gv_abT,
    gv_acm,
    StringHash("|cx092A145|rSacred Olympian Armor"),
    150
  );
  SaveInteger(
    gv_abT,
    gv_acl,
    StringHash("|cx093A150|rGreat Olympian Regalia"),
    lv_aJW
  );
  SaveInteger(
    gv_abT,
    gv_acm,
    StringHash("|cx093A150|rGreat Olympian Regalia"),
    500
  );
  SaveInteger(
    gv_abT,
    gv_acl,
    StringHash("|cx094A150|rPowerful Olympian Regalia"),
    lv_aJW
  );
  SaveInteger(
    gv_abT,
    gv_acm,
    StringHash("|cx094A150|rPowerful Olympian Regalia"),
    500
  );
  SaveInteger(
    gv_abT,
    gv_acl,
    StringHash("|cx095A150|rStrong Olympian Regalia"),
    lv_aJW
  );
  SaveInteger(
    gv_abT,
    gv_acm,
    StringHash("|cx095A150|rStrong Olympian Regalia"),
    500
  );
  SaveInteger(
    gv_abT,
    gv_acl,
    StringHash("|cx096A150|rConsecrated Olympian Regalia"),
    lv_aJW
  );
  SaveInteger(
    gv_abT,
    gv_acm,
    StringHash("|cx096A150|rConsecrated Olympian Regalia"),
    500
  );
  SaveInteger(
    gv_abT,
    gv_acl,
    StringHash("|cx097A150|rBlessed Olympian Regalia"),
    lv_aJW
  );
  SaveInteger(
    gv_abT,
    gv_acm,
    StringHash("|cx097A150|rBlessed Olympian Regalia"),
    500
  );
  SaveInteger(
    gv_abT,
    gv_acl,
    StringHash("|cx098A150|rRevered Olympian Regalia"),
    lv_aJW
  );
  SaveInteger(
    gv_abT,
    gv_acm,
    StringHash("|cx098A150|rRevered Olympian Regalia"),
    500
  );
  SaveInteger(
    gv_abT,
    gv_acl,
    StringHash("|cx099A150|rHallowed Olympian Regalia"),
    lv_aJW
  );
  SaveInteger(
    gv_abT,
    gv_acm,
    StringHash("|cx099A150|rHallowed Olympian Regalia"),
    500
  );
  SaveInteger(
    gv_abT,
    gv_acl,
    StringHash("|cx100A150|rSanctified Olympian Regalia"),
    lv_aJW
  );
  SaveInteger(
    gv_abT,
    gv_acm,
    StringHash("|cx100A150|rSanctified Olympian Regalia"),
    500
  );
  SaveInteger(gv_abT, gv_acl, StringHash("|cx101B035|rDivine Hammer"), 10000);
  SaveInteger(gv_abT, gv_acm, StringHash("|cx101B035|rDivine Hammer"), 0);
  SaveInteger(gv_abT, gv_acl, StringHash("|cx102B070|rDivine Gear"), lv_aJU);
  SaveInteger(gv_abT, gv_acm, StringHash("|cx102B070|rDivine Gear"), 1);
  SaveInteger(
    gv_abT,
    gv_acl,
    StringHash("|cx103B125|rDivine Equipment"),
    lv_aJV
  );
  SaveInteger(gv_abT, gv_acm, StringHash("|cx103B125|rDivine Equipment"), 10);
  SaveInteger(gv_abT, gv_acl, StringHash("|cx104C035|rVeteran Helm"), 10000);
  SaveInteger(gv_abT, gv_acm, StringHash("|cx104C035|rVeteran Helm"), 0);
  SaveInteger(gv_abT, gv_acl, StringHash("|cx105C070|rVeteran Gear"), lv_aJU);
  SaveInteger(gv_abT, gv_acm, StringHash("|cx105C070|rVeteran Gear"), 1);
  SaveInteger(
    gv_abT,
    gv_acl,
    StringHash("|cx106C125|rVeteran Equipment"),
    lv_aJV
  );
  SaveInteger(gv_abT, gv_acm, StringHash("|cx106C125|rVeteran Equipment"), 10);
  SaveInteger(gv_abT, gv_acl, StringHash("|cx107D035|rTribal Totem"), 10000);
  SaveInteger(gv_abT, gv_acm, StringHash("|cx107D035|rTribal Totem"), 0);
  SaveInteger(gv_abT, gv_acl, StringHash("|cx108D070|rTribal Gear"), lv_aJU);
  SaveInteger(gv_abT, gv_acm, StringHash("|cx108D070|rTribal Gear"), 1);
  SaveInteger(
    gv_abT,
    gv_acl,
    StringHash("|cx109D125|rTribal  Equipment"),
    lv_aJV
  );
  SaveInteger(gv_abT, gv_acm, StringHash("|cx109D125|rTribal  Equipment"), 10);
  SaveInteger(gv_abT, gv_acl, StringHash("|cx110E035|rShadow Cloak"), 10000);
  SaveInteger(gv_abT, gv_acm, StringHash("|cx110E035|rShadow Cloak"), 0);
  SaveInteger(gv_abT, gv_acl, StringHash("|cx111E070|rShadow Gear"), lv_aJU);
  SaveInteger(gv_abT, gv_acm, StringHash("|cx111E070|rShadow Gear"), 1);
  SaveInteger(
    gv_abT,
    gv_acl,
    StringHash("|cx112E125|rShadow Equipment"),
    lv_aJV
  );
  SaveInteger(gv_abT, gv_acm, StringHash("|cx112E125|rShadow Equipment"), 10);
  SaveInteger(
    gv_abT,
    gv_acl,
    StringHash("|cx113F035|rAmulet of Energy"),
    10000
  );
  SaveInteger(gv_abT, gv_acm, StringHash("|cx113F035|rAmulet of Energy"), 0);
  SaveInteger(gv_abT, gv_acl, StringHash("|cx114F070|rEnergy Gear"), lv_aJU);
  SaveInteger(gv_abT, gv_acm, StringHash("|cx114F070|rEnergy Gear"), 1);
  SaveInteger(
    gv_abT,
    gv_acl,
    StringHash("|cx115F125|rEnergy Equipment"),
    lv_aJV
  );
  SaveInteger(gv_abT, gv_acm, StringHash("|cx115F125|rEnergy Equipment"), 10);
  SaveInteger(gv_abT, gv_acl, StringHash("|cx1161035|rMolten Crown"), 10000);
  SaveInteger(gv_abT, gv_acm, StringHash("|cx1161035|rMolten Crown"), 0);
  SaveInteger(gv_abT, gv_acl, StringHash("|cx1171070|rMolten Gear"), lv_aJU);
  SaveInteger(gv_abT, gv_acm, StringHash("|cx1171070|rMolten Gear"), 1);
  SaveInteger(
    gv_abT,
    gv_acl,
    StringHash("|cx1181125|rMolten Equipment"),
    lv_aJV
  );
  SaveInteger(gv_abT, gv_acm, StringHash("|cx1181125|rMolten Equipment"), 10);
  SaveInteger(gv_abT, gv_acl, StringHash("|cx1192035|rCirclet of Ice"), 10000);
  SaveInteger(gv_abT, gv_acm, StringHash("|cx1192035|rCirclet of Ice"), 0);
  SaveInteger(gv_abT, gv_acl, StringHash("|cx1202070|rIce Gear"), lv_aJU);
  SaveInteger(gv_abT, gv_acm, StringHash("|cx1202070|rIce Gear"), 1);
  SaveInteger(gv_abT, gv_acl, StringHash("|cx1212125|rIce Equipment"), lv_aJV);
  SaveInteger(gv_abT, gv_acm, StringHash("|cx1212125|rIce Equipment"), 10);
  SaveInteger(gv_abT, gv_acl, StringHash("|cx1223035|rCrown of Souls"), 10000);
  SaveInteger(gv_abT, gv_acm, StringHash("|cx1223035|rCrown of Souls"), 0);
  SaveInteger(gv_abT, gv_acl, StringHash("|cx1233070|rSoul Gear"), lv_aJU);
  SaveInteger(gv_abT, gv_acm, StringHash("|cx1233070|rSoul Gear"), 1);
  SaveInteger(gv_abT, gv_acl, StringHash("|cx1243125|rSoul Equipment"), lv_aJV);
  SaveInteger(gv_abT, gv_acm, StringHash("|cx1243125|rSoul Equipment"), 10);
  SaveInteger(
    gv_abT,
    gv_acl,
    StringHash("|cx1254035|rAmulet of the Wild"),
    10000
  );
  SaveInteger(gv_abT, gv_acm, StringHash("|cx1254035|rAmulet of the Wild"), 0);
  SaveInteger(gv_abT, gv_acl, StringHash("|cx1264070|rWild Gear"), lv_aJU);
  SaveInteger(gv_abT, gv_acm, StringHash("|cx1264070|rWild Gear"), 1);
  SaveInteger(gv_abT, gv_acl, StringHash("|cx1274125|rWild Equipment"), lv_aJV);
  SaveInteger(gv_abT, gv_acm, StringHash("|cx1274125|rWild Equipment"), 10);
  SaveInteger(gv_abT, gv_acl, StringHash("|cx1285035|rBook of Light"), 10000);
  SaveInteger(gv_abT, gv_acm, StringHash("|cx1285035|rBook of Light"), 0);
  SaveInteger(gv_abT, gv_acl, StringHash("|cx1295070|rLight Gear"), lv_aJU);
  SaveInteger(gv_abT, gv_acm, StringHash("|cx1295070|rLight Gear"), 1);
  SaveInteger(
    gv_abT,
    gv_acl,
    StringHash("|cx1305125|rLight Equipment"),
    lv_aJV
  );
  SaveInteger(gv_abT, gv_acm, StringHash("|cx1305125|rLight Equipment"), 10);
  SaveInteger(gv_abT, gv_acl, StringHash("|cx1316035|rHoplite Spear"), 10000);
  SaveInteger(gv_abT, gv_acm, StringHash("|cx1316035|rHoplite Spear"), 0);
  SaveInteger(gv_abT, gv_acl, StringHash("|cx1326070|rHoplite Gear"), lv_aJU);
  SaveInteger(gv_abT, gv_acm, StringHash("|cx1326070|rHoplite Gear"), 1);
  SaveInteger(
    gv_abT,
    gv_acl,
    StringHash("|cx1336125|rHoplite Equipment"),
    lv_aJV
  );
  SaveInteger(gv_abT, gv_acm, StringHash("|cx1336125|rHoplite Equipment"), 10);
  SaveInteger(
    gv_abT,
    gv_acl,
    StringHash("|cx1347035|rMoonlight Quiver"),
    10000
  );
  SaveInteger(gv_abT, gv_acm, StringHash("|cx1347035|rMoonlight Quiver"), 0);
  SaveInteger(gv_abT, gv_acl, StringHash("|cx1357070|rMoonlight Gear"), lv_aJU);
  SaveInteger(gv_abT, gv_acm, StringHash("|cx1357070|rMoonlight Gear"), 1);
  SaveInteger(
    gv_abT,
    gv_acl,
    StringHash("|cx1367125|rMoonlight Equipment"),
    lv_aJV
  );
  SaveInteger(
    gv_abT,
    gv_acm,
    StringHash("|cx1367125|rMoonlight Equipment"),
    10
  );
  SaveInteger(
    gv_abT,
    gv_acl,
    StringHash("|cx137A050|rInitiate of Apollo"),
    lv_aJS
  );
  SaveInteger(gv_abT, gv_acm, StringHash("|cx137A050|rInitiate of Apollo"), 1);
  SaveInteger(
    gv_abT,
    gv_acl,
    StringHash("|cx138A120|rFollower of Apollo"),
    lv_aJT
  );
  SaveInteger(gv_abT, gv_acm, StringHash("|cx138A120|rFollower of Apollo"), 15);
  SaveInteger(
    gv_abT,
    gv_acl,
    StringHash("|cx139A050|rInitiate of Artemis"),
    lv_aJS
  );
  SaveInteger(gv_abT, gv_acm, StringHash("|cx139A050|rInitiate of Artemis"), 1);
  SaveInteger(
    gv_abT,
    gv_acl,
    StringHash("|cx140A120|rFollower of Artemis"),
    lv_aJT
  );
  SaveInteger(
    gv_abT,
    gv_acm,
    StringHash("|cx140A120|rFollower of Artemis"),
    15
  );
  SaveInteger(
    gv_abT,
    gv_acl,
    StringHash("|cx141A050|rInitiate of Ares"),
    lv_aJS
  );
  SaveInteger(gv_abT, gv_acm, StringHash("|cx141A050|rInitiate of Ares"), 1);
  SaveInteger(
    gv_abT,
    gv_acl,
    StringHash("|cx142A120|rFollower of Ares"),
    lv_aJT
  );
  SaveInteger(gv_abT, gv_acm, StringHash("|cx142A120|rFollower of Ares"), 15);
  SaveInteger(
    gv_abT,
    gv_acl,
    StringHash("|cx143A050|rInitiate of Hephaestus"),
    lv_aJS
  );
  SaveInteger(
    gv_abT,
    gv_acm,
    StringHash("|cx143A050|rInitiate of Hephaestus"),
    1
  );
  SaveInteger(
    gv_abT,
    gv_acl,
    StringHash("|cx144A120|rFollower of Hephaestus"),
    lv_aJT
  );
  SaveInteger(
    gv_abT,
    gv_acm,
    StringHash("|cx144A120|rFollower of Hephaestus"),
    15
  );
  SaveInteger(
    gv_abT,
    gv_acl,
    StringHash("|cx145A050|rInitiate of Hermes"),
    lv_aJS
  );
  SaveInteger(gv_abT, gv_acm, StringHash("|cx145A050|rInitiate of Hermes"), 1);
  SaveInteger(
    gv_abT,
    gv_acl,
    StringHash("|cx146A120|rFollower of Hermes"),
    lv_aJT
  );
  SaveInteger(gv_abT, gv_acm, StringHash("|cx146A120|rFollower of Hermes"), 15);
  SaveInteger(
    gv_abT,
    gv_acl,
    StringHash("|cx147A050|rInitiate of Poseidon"),
    lv_aJS
  );
  SaveInteger(
    gv_abT,
    gv_acm,
    StringHash("|cx147A050|rInitiate of Poseidon"),
    1
  );
  SaveInteger(
    gv_abT,
    gv_acl,
    StringHash("|cx148A120|rFollower of Poseidon"),
    lv_aJT
  );
  SaveInteger(
    gv_abT,
    gv_acm,
    StringHash("|cx148A120|rFollower of Poseidon"),
    15
  );
  gv_acj = f_aDd();
  SaveInteger(gv_abT, gv_acj, StringHash("|cffA075ff|rRod of the Magi"), 50);
  SaveInteger(gv_abT, gv_acj, StringHash("|cffA005ff|rBone Staff"), 10);
  SaveInteger(gv_abT, gv_acj, StringHash("|cffA015ff|rIron Brooch"), 35);
  SaveInteger(gv_abT, gv_acj, StringHash("|cffA025ff|rStone Tablet"), 60);
  SaveInteger(gv_abT, gv_acj, StringHash("|cffA035ff|rGlowing Orb"), 90);
  SaveInteger(gv_abT, gv_acj, StringHash("|cffA055ff|rSoul Ring"), 140);
  SaveInteger(gv_abT, gv_acj, StringHash("|cffA075ff|rOracle Staff"), 120);
  SaveInteger(gv_abT, gv_acj, StringHash("|cffA100ff|rAmulet of Power"), 200);
  SaveInteger(
    gv_abT,
    gv_acj,
    StringHash("|cffA115ff|rStaff of the Chosen One"),
    270
  );
  SaveInteger(gv_abT, gv_acj, StringHash("|cffA135ff|rBlackfire Orb"), 350);
  SaveInteger(gv_abT, gv_acj, StringHash("|cffA075ff|rOracle Staff"), 120);
  SaveInteger(gv_abT, gv_acj, StringHash("|cffA135ff|rHigh Oracle Staff"), 200);
  SaveInteger(
    gv_abT,
    gv_acj,
    StringHash("|cffA045ff|r|cff00BFFFHigh Shaman's Staff|r"),
    150
  );
  SaveInteger(
    gv_abT,
    gv_acj,
    StringHash("|cffA110ff|r|cff00BFFFAgamemnon's Deathmask|r"),
    300
  );
  SaveInteger(
    gv_abT,
    gv_acj,
    StringHash("|cffA1302f|r|cff00BFFFFingerbone of Boreas|r"),
    200
  );
  SaveInteger(
    gv_abT,
    gv_acj,
    StringHash("|cffB035fd|r|cff00CD00Divine Helm|r"),
    100
  );
  SaveInteger(
    gv_abT,
    gv_acj,
    StringHash("|cffB070f2|r|cff00CD00Divine Gear|r"),
    125
  );
  SaveInteger(
    gv_abT,
    gv_acj,
    StringHash("|cffB125f2|r|cff00CD00Divine Equipment|r"),
    200
  );
  SaveInteger(
    gv_abT,
    gv_acj,
    StringHash("|cffF035fb|r|cff00CD00Amulet of Energy|r"),
    200
  );
  SaveInteger(
    gv_abT,
    gv_acj,
    StringHash("|cffF035fc|r|cff00CD00Robe of Energy|r"),
    150
  );
  SaveInteger(
    gv_abT,
    gv_acj,
    StringHash("|cffF07022|r|cff00CD00Energy Gear|r"),
    350
  );
  SaveInteger(
    gv_abT,
    gv_acj,
    StringHash("|cffF12522|r|cff00CD00Energy Equipment|r"),
    650
  );
  SaveInteger(
    gv_abT,
    gv_acj,
    StringHash("|cff1035fc|r|cff00CD00Molten Crown|r"),
    225
  );
  SaveInteger(
    gv_abT,
    gv_acj,
    StringHash("|cff1035fd|r|cff00CD00Molten Ring|r"),
    150
  );
  SaveInteger(
    gv_abT,
    gv_acj,
    StringHash("|cff1070f2|r|cff00CD00Molten Gear|r"),
    375
  );
  SaveInteger(
    gv_abT,
    gv_acj,
    StringHash("|cff1125f2|r|cff00CD00Molten Equipment|r"),
    600
  );
  SaveInteger(
    gv_abT,
    gv_acj,
    StringHash("|cff2035fb|r|cff00CD00Circlet of Ice|r"),
    150
  );
  SaveInteger(
    gv_abT,
    gv_acj,
    StringHash("|cff2035fd|r|cff00CD00Staff of Ice|r"),
    325
  );
  SaveInteger(
    gv_abT,
    gv_acj,
    StringHash("|cff2070f2|r|cff00CD00Ice Gear|r"),
    475
  );
  SaveInteger(
    gv_abT,
    gv_acj,
    StringHash("|cff2125f2|r|cff00CD00Ice Equipment|r"),
    650
  );
  SaveInteger(
    gv_abT,
    gv_acj,
    StringHash("|cff3035fb|r|cff00CD00Band of Souls|r"),
    175
  );
  SaveInteger(
    gv_abT,
    gv_acj,
    StringHash("|cff3035fc|r|cff00CD00Crown of Souls|r"),
    75
  );
  SaveInteger(
    gv_abT,
    gv_acj,
    StringHash("|cff307022|r|cff00CD00Soul Gear|r"),
    250
  );
  SaveInteger(
    gv_abT,
    gv_acj,
    StringHash("|cff312522|r|cff00CD00Soul Equipment|r"),
    400
  );
  SaveInteger(
    gv_abT,
    gv_acj,
    StringHash("|cff4035fd|r|cff00CD00Staff of the Wild|r"),
    125
  );
  SaveInteger(
    gv_abT,
    gv_acj,
    StringHash("|cff4035fc|r|cff00CD00Hood of the Wild|r"),
    75
  );
  SaveInteger(
    gv_abT,
    gv_acj,
    StringHash("|cff4070f2|r|cff00CD00Wild Gear|r"),
    200
  );
  SaveInteger(
    gv_abT,
    gv_acj,
    StringHash("|cff4125f2|r|cff00CD00Wild Equipment|r"),
    350
  );
  SaveInteger(
    gv_abT,
    gv_acj,
    StringHash("|cff7035fd|r|cff00CD00Moonlight Talisman|r"),
    120
  );
  SaveInteger(
    gv_abT,
    gv_acj,
    StringHash("|cff7035fb|r|cff00CD00Moonlight Cloak|r"),
    100
  );
  SaveInteger(
    gv_abT,
    gv_acj,
    StringHash("|cff7070f2|r|cff00CD00Moonlight Gear|r"),
    250
  );
  SaveInteger(
    gv_abT,
    gv_acj,
    StringHash("|cff7125f2|r|cff00CD00Moonlight Equipment|r"),
    450
  );
  SaveInteger(
    gv_abT,
    gv_acj,
    StringHash("|cffA050fa|r|cff8A2BE2Initiate of Poseidon|r"),
    400
  );
  SaveInteger(
    gv_abT,
    gv_acj,
    StringHash("|cffA120fa|r|cff8A2BE2Follower of Poseidon|r"),
    700
  );
  SaveInteger(
    gv_abT,
    gv_acj,
    StringHash("|cffA100ff|r|cffFFA500Scepter of Thanatos.|r"),
    200
  );
  SaveInteger(
    gv_abT,
    gv_acj,
    StringHash("|cffA100ff|r|cffFFA500Archmages Mantle|r"),
    50
  );
  SaveInteger(
    gv_abT,
    gv_acj,
    StringHash("|cffA100ff|r|cffFFA500Vestment of the Overlord|r"),
    300
  );
  SaveInteger(
    gv_abT,
    gv_acj,
    StringHash("|cffA130ff|r|cffFFA500Cadeus|r"),
    700
  );
  SaveInteger(
    gv_abT,
    gv_acj,
    StringHash("|cffA130ff|r|cffFFA500Archmages Clasp|r"),
    200
  );
  SaveInteger(
    gv_abT,
    gv_acj,
    StringHash("|cffA140f4|r|cffFFA500White Dragonscale Armor|r"),
    300
  );
  SaveInteger(
    gv_abT,
    gv_acj,
    StringHash("|cffA140f4|r|cffFFA500White Dragonscale Ring|r"),
    600
  );
  SaveInteger(
    gv_abT,
    gv_acj,
    StringHash("|cffA130f5|r|cffFFD700Sacred Olympian Sword|r"),
    225
  );
  SaveInteger(
    gv_abT,
    gv_acj,
    StringHash("|cffA140f6|r|cffFFD700Sacred Olympian Helm|r"),
    340
  );
  SaveInteger(
    gv_abT,
    gv_acj,
    StringHash("|cffA145f7|r|cffFFD700Sacred Olympian Armor|r"),
    300
  );
  SaveInteger(
    gv_abT,
    gv_acj,
    StringHash("|cffA150f8|r|cffFFD700Strong Olympian Regalia|r"),
    250
  );
  SaveInteger(
    gv_abT,
    gv_acj,
    StringHash("|cffA150f8|r|cffFFD700Consecrated Olympian Regalia|r"),
    400
  );
  SaveInteger(
    gv_abT,
    gv_acj,
    StringHash("|cffA150f8|r|cffFFD700Blessed Olympian Regalia|r"),
    1300
  );
  SaveInteger(
    gv_abT,
    gv_acj,
    StringHash("|cffA150f8|r|cffFFD700Revered Olympian Regalia|r"),
    0
  );
  SaveInteger(
    gv_abT,
    gv_acj,
    StringHash("|cffA150f8|r|cffFFD700Hallowed Olympian Regalia|r"),
    600
  );
  SaveInteger(
    gv_abT,
    gv_acj,
    StringHash("|cffA150f8|r|cffFFD700Sanctified Olympian Regalia|r"),
    650
  );
  SaveInteger(
    gv_abT,
    gv_acj,
    StringHash("|cffA120f9|r|cffFFA500Helm of the Nemean Lion|r"),
    125
  );
  SaveInteger(
    gv_abT,
    gv_acj,
    StringHash("|cffA13023|r|cff00FFFFPersephone's Caress|r"),
    600
  );
  SaveInteger(
    gv_abT,
    gv_acj,
    StringHash("|cffA095ff|r|cff00BFFFDark Heart of the Forest|r"),
    50
  );
  gv_ack = f_aDd();
  SaveInteger(
    gv_abT,
    gv_ack,
    StringHash("|cffA095ff|r|cff00BFFFDark Heart of the Forest|r"),
    50
  );
  SaveInteger(gv_abT, gv_ack, StringHash("|cffA005ff|rBone Staff"), 10);
  SaveInteger(gv_abT, gv_ack, StringHash("|cffA015ff|rIron Brooch"), 35);
  SaveInteger(gv_abT, gv_ack, StringHash("|cffA025ff|rStone Tablet"), 60);
  SaveInteger(gv_abT, gv_ack, StringHash("|cffA035ff|rGlowing Orb"), 90);
  SaveInteger(gv_abT, gv_ack, StringHash("|cffA055ff|rSoul Ring"), 140);
  SaveInteger(gv_abT, gv_ack, StringHash("|cffA075ff|rOracle Staff"), 120);
  SaveInteger(gv_abT, gv_ack, StringHash("|cffA075ff|rRod of the Magi"), 50);
  SaveInteger(gv_abT, gv_ack, StringHash("|cffA100ff|rAmulet of Power"), 200);
  SaveInteger(
    gv_abT,
    gv_ack,
    StringHash("|cffA115ff|rStaff of the Chosen One"),
    270
  );
  SaveInteger(gv_abT, gv_ack, StringHash("|cffA075ff|rOracle Staff"), 120);
  SaveInteger(gv_abT, gv_ack, StringHash("|cffA135ff|rBlackfire Orb"), 350);
  SaveInteger(gv_abT, gv_ack, StringHash("|cffA135ff|rHigh Oracle Staff"), 200);
  SaveInteger(
    gv_abT,
    gv_ack,
    StringHash("|cffA045ff|r|cff00BFFFHigh Shaman's Staff|r"),
    150
  );
  SaveInteger(
    gv_abT,
    gv_ack,
    StringHash("|cffA110ff|r|cff00BFFFAreithou's Mace|r"),
    300
  );
  SaveInteger(
    gv_abT,
    gv_ack,
    StringHash("|cffA1302f|r|cff00BFFFFingerbone of Boreas|r"),
    200
  );
  SaveInteger(
    gv_abT,
    gv_ack,
    StringHash("|cffB035fd|r|cff00CD00Divine Helm|r"),
    100
  );
  SaveInteger(
    gv_abT,
    gv_ack,
    StringHash("|cffB070f2|r|cff00CD00Divine Gear|r"),
    125
  );
  SaveInteger(
    gv_abT,
    gv_ack,
    StringHash("|cffB125f2|r|cff00CD00Divine Equipment|r"),
    200
  );
  SaveInteger(
    gv_abT,
    gv_ack,
    StringHash("|cff4035fd|r|cff00CD00Staff of the Wild|r"),
    125
  );
  SaveInteger(
    gv_abT,
    gv_ack,
    StringHash("|cff4035fc|r|cff00CD00Hood of the Wild|r"),
    75
  );
  SaveInteger(
    gv_abT,
    gv_ack,
    StringHash("|cff4070f2|r|cff00CD00Wild Gear|r"),
    200
  );
  SaveInteger(
    gv_abT,
    gv_ack,
    StringHash("|cff4125f2|r|cff00CD00Wild Equipment|r"),
    350
  );
  SaveInteger(
    gv_abT,
    gv_ack,
    StringHash("|cff5035fb|r|cff00CD00Book of Light|r"),
    200
  );
  SaveInteger(
    gv_abT,
    gv_ack,
    StringHash("|cff5035fc|r|cff00CD00Rod of Light|r"),
    200
  );
  SaveInteger(
    gv_abT,
    gv_ack,
    StringHash("|cff5070f2|r|cff00CD00Light Gear|r"),
    400
  );
  SaveInteger(
    gv_abT,
    gv_ack,
    StringHash("|cff5125f2|r|cff00CD00Light Equipment|r"),
    700
  );
  SaveInteger(
    gv_abT,
    gv_ack,
    StringHash("|cffA050fa|r|cff8A2BE2Initiate of Apollo|r"),
    350
  );
  SaveInteger(
    gv_abT,
    gv_ack,
    StringHash("|cffA120fa|r|cff8A2BE2Follower of Apollo|r"),
    600
  );
  SaveInteger(
    gv_abT,
    gv_ack,
    StringHash("|cffA100ff|r|cffFFA500Scepter of Thanatos.|r"),
    200
  );
  SaveInteger(
    gv_abT,
    gv_ack,
    StringHash("|cffA100ff|r|cffFFA500Archmages Mantle|r"),
    50
  );
  SaveInteger(
    gv_abT,
    gv_ack,
    StringHash("|cffA100ff|r|cffFFA500Vestment of the Overlord|r"),
    300
  );
  SaveInteger(
    gv_abT,
    gv_ack,
    StringHash("|cffA130ff|r|cffFFA500Hesione's Golden Veil|r"),
    700
  );
  SaveInteger(
    gv_abT,
    gv_ack,
    StringHash("|cffA130ff|r|cffFFA500Archmages Clasp|r"),
    200
  );
  SaveInteger(
    gv_abT,
    gv_ack,
    StringHash("|cffA140f4|r|cffFFA500White Dragonscale Armor|r"),
    300
  );
  SaveInteger(
    gv_abT,
    gv_ack,
    StringHash("|cffA140f4|r|cffFFA500White Dragonscale Ring|r"),
    600
  );
  SaveInteger(
    gv_abT,
    gv_ack,
    StringHash("|cffA130f5|r|cffFFD700Sacred Olympian Sword|r"),
    225
  );
  SaveInteger(
    gv_abT,
    gv_ack,
    StringHash("|cffA140f6|r|cffFFD700Sacred Olympian Helm|r"),
    340
  );
  SaveInteger(
    gv_abT,
    gv_ack,
    StringHash("|cffA145f7|r|cffFFD700Sacred Olympian Armor|r"),
    300
  );
  SaveInteger(
    gv_abT,
    gv_ack,
    StringHash("|cffA150f8|r|cffFFD700Strong Olympian Regalia|r"),
    250
  );
  SaveInteger(
    gv_abT,
    gv_ack,
    StringHash("|cffA150f8|r|cffFFD700Consecrated Olympian Regalia|r"),
    400
  );
  SaveInteger(
    gv_abT,
    gv_ack,
    StringHash("|cffA150f8|r|cffFFD700Blessed Olympian Regalia|r"),
    1300
  );
  SaveInteger(
    gv_abT,
    gv_ack,
    StringHash("|cffA150f8|r|cffFFD700Revered Olympian Regalia|r"),
    0
  );
  SaveInteger(
    gv_abT,
    gv_ack,
    StringHash("|cffA150f8|r|cffFFD700Hallowed Olympian Regalia|r"),
    600
  );
  SaveInteger(
    gv_abT,
    gv_ack,
    StringHash("|cffA150f8|r|cffFFD700Sanctified Olympian Regalia|r"),
    650
  );
  SaveInteger(
    gv_abT,
    gv_ack,
    StringHash("|cffA120f9|r|cffFFA500Helm of the Nemean Lion|r"),
    125
  );
}
function f_aJX(lv_aJY, lv_aJZ) {
  var lv_aKa = 0;
  var lv_aKb = false;
  var lv_aKc;
  do {
    if (lv_aKa > 5) {
      break;
    }
    lv_aKc = UnitItemInSlot(gv_alv[lv_aJY], lv_aKa);
    if (lv_aJZ == GetItemTypeId(lv_aKc)) {
      lv_aKb = true;
    }
    lv_aKc = UnitItemInSlot(gv_alv[lv_aJY + 8], lv_aKa);
    if (lv_aJZ == GetItemTypeId(lv_aKc)) {
      lv_aKb = true;
    }
    lv_aKa = lv_aKa + 1;
  } while (true);
  lv_aKc = null;
  return lv_aKb;
}
function f_aKd(lv_aKe, lv_aKf) {
  var lv_aKg = 0;
  var lv_aKh = GetUnitX(lv_aKe);
  var lv_aKi = GetUnitY(lv_aKe);
  var lv_aKj;
  var lv_aKk;
  do {
    if (lv_aKg > 8) {
      break;
    }
    lv_aKj = lv_aKh - GetUnitX(gv_alv[lv_aKg]);
    lv_aKk = lv_aKi - GetUnitY(gv_alv[lv_aKg]);
    if (SquareRoot(lv_aKj * lv_aKj + lv_aKk * lv_aKk) < 1300) {
      if (f_aJX(GetPlayerId(GetOwningPlayer(lv_aKe)), "I06F")) {
        AdjustPlayerStateBJ(
          f_aBF(lv_aKg, lv_aKf * 1.3),
          Player(lv_aKg),
          PLAYER_STATE_RESOURCE_LUMBER
        );
      } else {
        AdjustPlayerStateBJ(
          f_aBJ(lv_aKg, lv_aKf),
          Player(lv_aKg),
          PLAYER_STATE_RESOURCE_LUMBER
        );
      }
    }
    lv_aKg = lv_aKg + 1;
  } while (true);
}
function f_aKl(lv_aKm, lv_aKn, lv_aKo) {
  var lv_aKp = null;
  lv_aKp = MultiboardGetItem(gv_alQ, lv_aKo - 1, 0);
  MultiboardSetItemValue(lv_aKp, lv_aKm);
  MultiboardSetItemStyle(lv_aKp, true, false);
  MultiboardSetItemWidth(lv_aKp, 0.12);
  MultiboardReleaseItem(lv_aKp);
  lv_aKp = MultiboardGetItem(gv_alQ, lv_aKo - 1, 1);
  MultiboardSetItemValue(lv_aKp, lv_aKn);
  MultiboardSetItemStyle(lv_aKp, true, false);
  MultiboardReleaseItem(lv_aKp);
  lv_aKp = null;
}
function f_aKq() {
  var lv_aKr = 1;
  var lv_aKs = 0;
  var lv_aKt;
  var lv_aKu;
  var lv_aKv = 0;
  var lv_aKw = MultiboardGetRowCount(gv_alQ);
  do {
    if (lv_aKr > gv_alx.getInt(6999)) {
      break;
    }
    if (
      gv_alx.getInt(lv_aKr + 7000) == 2 ||
      gv_alx.getInt(lv_aKr + 7000) == 3
    ) {
      lv_aKv = lv_aKv + 1;
      if (gv_alx.getInt(lv_aKr + 7500) > 99) {
        lv_aKv = lv_aKv + 1;
      }
    }
    lv_aKr = lv_aKr + 1;
  } while (true);
  if (lv_aKv == 0) {
    lv_aKt = "None right now...";
    lv_aKu = " ";
    lv_aKv = lv_aKv + 1;
    f_aKl(lv_aKt, lv_aKu, lv_aKv);
  }
  if (lv_aKv > lv_aKw) {
    MultiboardSetRowCount(gv_alQ, lv_aKv);
  }
  if (lv_aKv < lv_aKw) {
    do {
      if (lv_aKw == lv_aKv) {
        break;
      }
      f_aKl(" ", " ", lv_aKw);
      lv_aKw = lv_aKw - 1;
    } while (true);
  }
  lv_aKr = 1;
  lv_aKv = 0;
  do {
    if (lv_aKr > gv_alx.getInt(6999)) {
      break;
    }
    if (gv_alx.getInt(lv_aKr + 7000) == 3) {
      if (gv_alx.getInt(lv_aKr + 7500) <= 99) {
        lv_aKt = S2S(gv_alw[81] + gv_alw[lv_aKr + 7200]);
        if (gv_alx.getInt(lv_aKr + 7500) == 1 && gv_alw[lv_aKr + 7100] == "k") {
          lv_aKu = S2S(gv_alw[77] + "Dead");
        } else {
          lv_aKu =
            gv_alw[77] +
            (I2S(gv_alx.getInt(lv_aKr + 7400)) +
              S2S("/" + I2S(gv_alx.getInt(lv_aKr + 7500))));
        }
        if (gv_alw[lv_aKr + 7100] == "t") {
          lv_aKu = S2S(gv_alw[77] + "Done");
        }
      } else {
        lv_aKs = 0;
        do {
          if (lv_aKs > StringLength(gv_alw[lv_aKr + 7200])) {
            break;
          }
          if (SubString(gv_alw[lv_aKr + 7200], lv_aKs, lv_aKs + 1) == ",") {
            break;
          }
          lv_aKs = lv_aKs + 1;
        } while (true);
        lv_aKt = S2S(gv_alw[81] + SubString(gv_alw[lv_aKr + 7200], 0, lv_aKs));
        lv_aKu =
          gv_alw[77] +
          (I2S(
            gv_alx.getInt(lv_aKr + 7400) -
              R2I(gv_alx.getInt(lv_aKr + 7400) / 100) * 100
          ) +
            S2S(
              "/" +
                I2S(
                  gv_alx.getInt(lv_aKr + 7500) -
                    R2I(gv_alx.getInt(lv_aKr + 7500) / 100) * 100
                )
            ));
        lv_aKv = lv_aKv + 1;
        f_aKl(lv_aKt, lv_aKu, lv_aKv);
        lv_aKt = S2S(
          gv_alw[81] +
            SubString(
              gv_alw[lv_aKr + 7200],
              lv_aKs + 1,
              StringLength(gv_alw[lv_aKr + 7200])
            )
        );
        lv_aKu =
          gv_alw[77] +
          (I2S(R2I(gv_alx.getInt(lv_aKr + 7400) / 100)) +
            S2S("/" + I2S(R2I(gv_alx.getInt(lv_aKr + 7500) / 100))));
      }
      lv_aKv = lv_aKv + 1;
      f_aKl(lv_aKt, lv_aKu, lv_aKv);
    }
    lv_aKr = lv_aKr + 1;
  } while (true);
  lv_aKr = 1;
  do {
    if (lv_aKr > gv_alx.getInt(6999)) {
      break;
    }
    if (gv_alx.getInt(lv_aKr + 7000) == 2) {
      if (gv_alx.getInt(lv_aKr + 7500) <= 99) {
        lv_aKt = gv_alw[lv_aKr + 7200];
        if (lv_aKr < 11) {
          lv_aKt = S2S(gv_alw[75] + gv_alw[lv_aKr + 7200]) + "|r";
        }
        if (SubString(gv_alw[lv_aKr + 7000], 0, 1) == "*") {
          lv_aKt = S2S(gv_alw[78] + gv_alw[lv_aKr + 7200]) + "|r";
        }
        if (gv_alx.getInt(lv_aKr + 7500) == 1 && gv_alw[lv_aKr + 7100] == "k") {
          lv_aKu = S2S(gv_alw[74] + "Alive");
        } else {
          lv_aKu =
            S2S(I2S(gv_alx.getInt(lv_aKr + 7400)) + "/") +
            I2S(gv_alx.getInt(lv_aKr + 7500));
        }
        if (gv_alw[lv_aKr + 7100] == "t") {
          lv_aKu = "Open";
        }
      } else {
        lv_aKs = 0;
        do {
          if (lv_aKs > StringLength(gv_alw[lv_aKr + 7200])) {
            break;
          }
          if (SubString(gv_alw[lv_aKr + 7200], lv_aKs, lv_aKs + 1) == ",") {
            break;
          }
          lv_aKs = lv_aKs + 1;
        } while (true);
        lv_aKt = SubString(gv_alw[lv_aKr + 7200], 0, lv_aKs);
        lv_aKu =
          S2S(
            I2S(
              gv_alx.getInt(lv_aKr + 7400) -
                R2I(gv_alx.getInt(lv_aKr + 7400) / 100) * 100
            ) + "/"
          ) +
          I2S(
            gv_alx.getInt(lv_aKr + 7500) -
              R2I(gv_alx.getInt(lv_aKr + 7500) / 100) * 100
          );
        lv_aKv = lv_aKv + 1;
        f_aKl(lv_aKt, lv_aKu, lv_aKv);
        lv_aKt = SubString(
          gv_alw[lv_aKr + 7200],
          lv_aKs + 1,
          StringLength(gv_alw[lv_aKr + 7200])
        );
        lv_aKu =
          S2S(I2S(R2I(gv_alx.getInt(lv_aKr + 7400) / 100)) + "/") +
          I2S(R2I(gv_alx.getInt(lv_aKr + 7500) / 100));
      }
      lv_aKv = lv_aKv + 1;
      f_aKl(lv_aKt, lv_aKu, lv_aKv);
    }
    lv_aKr = lv_aKr + 1;
  } while (true);
}
function f_aKx(lv_aKy) {
  if (gv_alx.getInt(lv_aKy + 7000) == 0) {
    gv_alx[lv_aKy + 7000] = 1;
    DestroyEffect(gv_aly[lv_aKy + 7000]);
    gv_aly[lv_aKy + 7000] = AddSpecialEffectTarget(
      "Abilities\\Spells\\Other\\TalkToMe\\TalkToMe.mdl",
      gv_alv[lv_aKy + 7000],
      "overhead"
    );
  }
}
function f_aKz(lv_aKA, lv_aKB) {
  var lv_aKC;
  var lv_aKD;
  var lv_aKE = 0;
  if (gv_alx.getInt(lv_aKA + 7600) > GetHeroLevel(gv_alv[lv_aKB])) {
    if (GetLocalPlayer() == Player(lv_aKB)) {
      DisplayTimedTextToPlayer(
        Player(lv_aKB),
        0,
        0,
        20,
        S2S(gv_alw[75] + GetUnitName(gv_alv[lv_aKA + 7000])) +
          "|r - I have a quest for you when you are level: " +
          gv_alw[74] +
          I2S(gv_alx.getInt(lv_aKA + 7600))
      );
    }
    return;
  }
  gv_alx[lv_aKA + 7000] = 2;
  gv_alB[lv_aKA] = CreateQuestBJ(
    0,
    gv_alw[lv_aKA + 7000],
    gv_alw[75] +
      (GetUnitName(gv_alv[lv_aKA + 7000]) +
        S2S("|r - " + gv_alw[lv_aKA + 7300])),
    gv_alw[lv_aKA + 7400]
  );
  if (gv_alw[lv_aKA + 7100] == "k") {
    if (gv_alx.getInt(lv_aKA + 7500) <= 99) {
      if (gv_alx.getInt(lv_aKA + 7500) == 1) {
        lv_aKC = S2S(gv_alw[77] + "Defeat ") + gv_alw[lv_aKA + 7200];
      } else {
        lv_aKC =
          S2S(gv_alw[77] + "Kill ") +
          (I2S(gv_alx.getInt(lv_aKA + 7500)) +
            S2S(" " + gv_alw[lv_aKA + 7200]));
      }
    } else {
      do {
        if (lv_aKE > StringLength(gv_alw[lv_aKA + 7200])) {
          break;
        }
        if (SubString(gv_alw[lv_aKA + 7200], lv_aKE, lv_aKE + 1) == ",") {
          break;
        }
        lv_aKE = lv_aKE + 1;
      } while (true);
      lv_aKC =
        S2S(gv_alw[77] + "Kill ") +
        (I2S(
          gv_alx.getInt(lv_aKA + 7500) -
            R2I(gv_alx.getInt(lv_aKA + 7500) / 100) * 100
        ) +
          S2S(" " + SubString(gv_alw[lv_aKA + 7200], 0, lv_aKE)));
      lv_aKC =
        S2S(lv_aKC + " and Destroy ") +
        (I2S(R2I(gv_alx.getInt(lv_aKA + 7500) / 100)) +
          S2S(
            " " +
              SubString(
                gv_alw[lv_aKA + 7200],
                lv_aKE + 1,
                StringLength(gv_alw[lv_aKA + 7200])
              )
          ));
    }
  }
  if (gv_alw[lv_aKA + 7100] == "c") {
    lv_aKC =
      S2S(gv_alw[77] + "Collect ") +
      (I2S(gv_alx.getInt(lv_aKA + 7500)) + S2S(" " + gv_alw[lv_aKA + 7200]));
  }
  if (gv_alw[lv_aKA + 7100] == "t") {
    lv_aKC = gv_alw[lv_aKA + 7200];
  }
  CreateQuestItemBJ(gv_alB[lv_aKA], lv_aKC);
  lv_aKD =
    S2S(gv_alw[79] + "Level: ") + I2S(gv_alx.getInt(lv_aKA + 7600)) + "|r ";
  lv_aKD =
    S2S(lv_aKD + "for ") +
    gv_alw[74] +
    I2S(gv_alx.getInt(lv_aKA + 7100)) +
    "|r Experience, ";
  lv_aKD =
    S2S(lv_aKD + gv_alw[81]) + I2S(gv_alx.getInt(lv_aKA + 7200)) + "|r Gold, ";
  lv_aKD =
    S2S(lv_aKD + "and ") +
    gv_alw[75] +
    I2S(gv_alx.getInt(lv_aKA + 7300)) +
    "|r Honor.";
  CreateQuestItemBJ(gv_alB[lv_aKA], lv_aKD);
  QuestSetDiscovered(gv_alB[lv_aKA], true);
  FlashQuestDialogButton();
  lv_aKE = 0;
  do {
    if (lv_aKE > 7) {
      break;
    }
    if (
      gv_alx.getInt(250 + lv_aKE) == 1 &&
      GetLocalPlayer() == Player(lv_aKE)
    ) {
      DisplayTimedTextToPlayer(
        Player(lv_aKE),
        0,
        0,
        20,
        S2S("\n" + gv_alw[82]) + gv_alw[lv_aKA + 7300]
      );
    }
    lv_aKE = lv_aKE + 1;
  } while (true);
  DisplayTimedTextToForce(
    gv_alH,
    20,
    S2S("\n" + "Quest Added: ") + gv_alw[64] + gv_alw[lv_aKA + 7000]
  );
  DisplayTimedTextToForce(
    gv_alH,
    20,
    gv_alw[75] + (GetUnitName(gv_alv[lv_aKA + 7000]) + S2S("|r - " + lv_aKC))
  );
  DestroyEffect(gv_aly[lv_aKA + 7000]);
  f_aKq();
}
function f_aKF(lv_aKG) {
  if (gv_alx.getInt(lv_aKG + 7000) < 2 && gv_alx.getInt(lv_aKG + 7500) == 1) {
    gv_alx[lv_aKG + 7400] = gv_alx.getInt(lv_aKG + 7400) + 1;
  }
  if (gv_alx.getInt(lv_aKG + 7000) == 2) {
    gv_alx[lv_aKG + 7400] = gv_alx.getInt(lv_aKG + 7400) + 1;
    if (gv_alx.getInt(lv_aKG + 7500) > 99) {
      if (
        gv_alx.getInt(lv_aKG + 7400) -
          R2I(gv_alx.getInt(lv_aKG + 7400) / 100) * 100 >
        gv_alx.getInt(lv_aKG + 7500) -
          R2I(gv_alx.getInt(lv_aKG + 7500) / 100) * 100
      ) {
        gv_alx[lv_aKG + 7400] = gv_alx.getInt(lv_aKG + 7400) - 1;
      }
    }
    if (gv_alx.getInt(lv_aKG + 7400) > gv_alx.getInt(lv_aKG + 7500)) {
      gv_alx[lv_aKG + 7400] = gv_alx.getInt(lv_aKG + 7500);
    }
    if (gv_alx.getInt(lv_aKG + 7400) == gv_alx.getInt(lv_aKG + 7500)) {
      gv_alx[lv_aKG + 7000] = 3;
      QuestSetDescription(
        gv_alB[lv_aKG],
        S2S("For your reward return to: " + gv_alw[75]) +
          GetUnitName(gv_alv[lv_aKG + 7000])
      );
      QuestSetCompleted(gv_alB[lv_aKG], true);
      DestroyEffect(gv_aly[lv_aKG + 7000]);
      gv_aly[lv_aKG + 7000] = AddSpecialEffectTarget(
        "Abilities\\Spells\\Other\\TalkToMe\\TalkToMe.mdl",
        gv_alv[lv_aKG + 7000],
        "overhead"
      );
    }
    f_aKq();
  }
}
function f_aKH(lv_aKI) {
  var lv_aKJ = 0;
  var lv_aKK = 0;
  var lv_aKL = 1;
  var lv_aKM;
  DestroyQuest(gv_alB[lv_aKI]);
  DestroyEffect(gv_aly[lv_aKI + 7000]);
  gv_alx[lv_aKI + 7000] = 4;
  if (lv_aKI == 10 && GetWidgetLife(gv_ale) > 1) {
    gv_alx[10 + 7300] = 25;
    DisplayTimedTextToPlayer(
      GetLocalPlayer(),
      0,
      0,
      5,
      "Extra honor for keeping Persephone alive in the Hades fight"
    );
  } else {
    gv_alx[10 + 7300] = 15;
  }
  do {
    if (lv_aKJ > 7) {
      break;
    }
    lv_aKK = 1;
    if (GetPlayerSlotState(Player(lv_aKJ)) != PLAYER_SLOT_STATE_PLAYING) {
      lv_aKK = 0;
    }
    if (GetHeroLevel(gv_alv[lv_aKJ]) < gv_alx.getInt(lv_aKI + 7600) - 5) {
      lv_aKK = 0;
    }
    if (
      gv_alx.getInt(lv_aKI + 7600) < 56 &&
      GetHeroLevel(gv_alv[lv_aKJ]) > gv_alx.getInt(lv_aKI + 7600) + 30
    ) {
      lv_aKK = 0;
    }
    if (lv_aKK == 1) {
      if (IsUnitType(gv_alv[lv_aKJ], UNIT_TYPE_DEAD) == false) {
        AddHeroXP(gv_alv[lv_aKJ], gv_alx.getInt(lv_aKI + 7100), true);
      }
      AdjustPlayerStateBJ(
        R2I(f_azK(gv_alv[lv_aKJ]) * gv_alx.getInt(lv_aKI + 7200)),
        Player(lv_aKJ),
        PLAYER_STATE_RESOURCE_GOLD
      );
      if (f_aJX(lv_aKJ, "I06F")) {
        AdjustPlayerStateBJ(
          f_aBF(lv_aKJ, gv_alx.getInt(lv_aKI + 7300) * 1.3),
          Player(lv_aKJ),
          PLAYER_STATE_RESOURCE_LUMBER
        );
      } else {
        AdjustPlayerStateBJ(
          f_aBJ(lv_aKJ, gv_alx.getInt(lv_aKI + 7300)),
          Player(lv_aKJ),
          PLAYER_STATE_RESOURCE_LUMBER
        );
      }
    }
    lv_aKJ = lv_aKJ + 1;
  } while (true);
  if (gv_alx.getInt(7000) > 0) {
    if (gv_alx.getInt(7000) > 7) {
      QuestItemSetDescription(
        gv_alW,
        S2S(gv_alw[77] + "Defeated:|r All 8 Titans.")
      );
      QuestItemSetCompleted(gv_alW, true);
    } else {
      QuestItemSetDescription(
        gv_alW,
        S2S(gv_alw[77] + "Defeated:|r ") +
          I2S(gv_alx.getInt(7000)) +
          " of 8 Titans."
      );
    }
  }
  if (gv_alx.getInt(7000) == 9) {
    QuestItemSetDescription(
      gv_alX,
      S2S(gv_alw[77] + "Defeated:|r The Queen of the Underworld.")
    );
    QuestItemSetCompleted(gv_alX, true);
  }
  if (gv_alx.getInt(7000) == 10) {
    QuestItemSetDescription(
      gv_alY,
      S2S(gv_alw[77] + "Defeated:|r The Lord of Hell.")
    );
    QuestItemSetCompleted(gv_alY, true);
  }
  lv_aKM = "";
  do {
    if (lv_aKL > 99) {
      break;
    }
    if (gv_alx.getInt(lv_aKL + 7000) == 4) {
      lv_aKM = S2S(lv_aKM + gv_alw[lv_aKL + 7000]) + "\n";
    }
    lv_aKL = lv_aKL + 1;
  } while (true);
  QuestSetDescription(gv_alB[0], lv_aKM);
  if (SubString(gv_alw[lv_aKI + 7000], 0, 1) == "*") {
    gv_alx[lv_aKI + 7500] = gv_alx.getInt(lv_aKI + 7500) + GetRandomInt(2, 5);
    if (gv_alx.getInt(lv_aKI + 7500) > 50) {
      gv_alx[lv_aKI + 7500] = 50;
    }
    gv_alx[lv_aKI + 7000] = 0;
    gv_alx[lv_aKI + 7400] = 0;
    f_aKx(lv_aKI);
  }
  f_aKq();
}
function f_aKN(lv_aKO) {
  var lv_aKP = 0;
  var lv_aKQ = 10;
  do {
    if (lv_aKP > 7) {
      break;
    }
    if (IsUnitSelected(lv_aKO, Player(lv_aKP))) {
      lv_aKQ = lv_aKP;
      lv_aKP = 10;
    }
    lv_aKP = lv_aKP + 1;
  } while (true);
  return lv_aKQ;
}
function f_aKR(lv_aKS, lv_aKT) {
  var lv_aKU = GetUnitLoc(lv_aKS);
  var lv_aKV = GetUnitLoc(gv_alv[lv_aKT]);
  var lv_aKW = false;
  if (DistanceBetweenPoints(lv_aKU, lv_aKV) < 501) {
    lv_aKW = true;
  }
  RemoveLocation(lv_aKU);
  lv_aKU = null;
  RemoveLocation(lv_aKV);
  lv_aKV = null;
  return lv_aKW;
}
function f_aKX(lv_aKY) {
  if (lv_aKY > 3) {
    return GetRandomInt(lv_aKY - 3, lv_aKY + 5);
  } else {
    return lv_aKY;
  }
}
function f_aKZ() {
  ForceAddPlayer(gv_acq, GetEnumPlayer());
}
function f_aLa() {
  var lv_aLb = gv_acs - 1;
  var lv_aLc;
  do {
    if (lv_aLb < 0) {
      break;
    }
    lv_aLc = gv_acr.getInt(lv_aLb);
    gv_apn[lv_aLc] = GetUnitX(gv_apu[lv_aLc]);
    gv_apo[lv_aLc] = GetUnitY(gv_apu[lv_aLc]);
    SetTextTagPos(
      gv_apk[lv_aLc],
      gv_apn[lv_aLc] + gv_apv[lv_aLc],
      gv_apo[lv_aLc] + gv_apw[lv_aLc],
      gv_app[lv_aLc]
    );
    lv_aLb = lv_aLb - 1;
  } while (true);
}
function f_aLd(lv_aLe, lv_aLf) {
  var lv_aLg;
  var lv_aLh = 0;
  if (lv_aLf > 100) {
    lv_aLf = 100;
  } else {
    if (lv_aLf < 0.0) {
      lv_aLf = 0.0;
    }
  }
  gv_apx[lv_aLe] = lv_aLf / 100;
  gv_apq[lv_aLe] = gv_apm[lv_aLe];
  lv_aLg =
    R2I(
      R2I(
        gv_apx[lv_aLe] * gv_apy.getInt(lv_aLe) * StringLength(gv_apz[lv_aLe]) +
          0.5
      ) / StringLength(gv_apz[lv_aLe])
    ) * StringLength(gv_apz[lv_aLe]);
  gv_apq[lv_aLe] = S2S(gv_apq[lv_aLe] + SubString(gv_apA[lv_aLe], 0, lv_aLg));
  gv_apq[lv_aLe] = S2S(gv_apq[lv_aLe] + "|r");
  gv_apq[lv_aLe] = S2S(
    gv_apq[lv_aLe] +
      SubString(gv_apA[lv_aLe], 0, StringLength(gv_apA[lv_aLe]) - lv_aLg)
  );
  if (gv_apk[lv_aLe] != null) {
    SetTextTagText(gv_apk[lv_aLe], gv_apq[lv_aLe], gv_apr[lv_aLe]);
  }
}
function f_aLi(lv_aLj, lv_aLk) {
  gv_app[lv_aLj] = lv_aLk;
  if (gv_apk[lv_aLj] != null) {
    SetTextTagPos(
      gv_apk[lv_aLj],
      gv_apn[lv_aLj],
      gv_apo[lv_aLj],
      gv_app[lv_aLj]
    );
  }
}
function f_aLl(lv_aLm) {
  var lv_aLn = 0;
  gv_apA[lv_aLm] = "";
  do {
    if (lv_aLn >= gv_apy.getInt(lv_aLm)) {
      break;
    }
    gv_apA[lv_aLm] = S2S(gv_apA[lv_aLm] + gv_apz[lv_aLm]);
    lv_aLn = lv_aLn + 1;
  } while (true);
}
function f_aLo(lv_aLp, lv_aLq) {
  gv_apl[lv_aLp] = lv_aLq;
  if (gv_apk[lv_aLp] != null) {
    SetTextTagColor(
      gv_apk[lv_aLp],
      f_aIu(gv_apl.getInt(lv_aLp)),
      f_aIx(gv_apl.getInt(lv_aLp)),
      f_aIA(gv_apl.getInt(lv_aLp)),
      f_aIs(gv_apl.getInt(lv_aLp))
    );
  }
}
function f_aLr(lv_aLs, lv_aLt) {
  gv_apm[lv_aLs] = SubString(f_aID(lv_aLt, ""), 0, 10);
  f_aLd(lv_aLs, gv_apx[lv_aLs] * 100);
}
function f_aLu(lv_aLv, lv_aLw, lv_aLx, lv_aLy, lv_aLz) {
  if (!gv_apt[lv_aLv]) {
    gv_acr[gv_acs] = lv_aLv;
    gv_apu[lv_aLv] = lv_aLw;
    gv_apt[lv_aLv] = true;
    gv_aps[lv_aLv] = gv_acs;
    gv_apv[lv_aLv] = lv_aLx;
    gv_apw[lv_aLv] = lv_aLy;
    f_aLi(lv_aLv, lv_aLz);
    if (gv_acs == 0) {
      TimerStart(gv_act, gv_aco, true, f_aLa);
    }
    gv_acs = gv_acs + 1;
  }
}
function f_aLA(lv_aLB) {
  var lv_aLC = 0;
  if (!gv_apt[lv_aLB]) {
    return;
  }
  gv_acs = gv_acs - 1;
  if (gv_acs == 0) {
    PauseTimer(gv_act);
  }
  gv_acr[gv_aps.getInt(lv_aLB)] = gv_acr.getInt(gv_acs);
  gv_aps[gv_acr.getInt(gv_acs)] = gv_aps.getInt(lv_aLB);
  gv_apt[lv_aLB] = false;
}
function f_aLD(lv_aLE, lv_aLF, lv_aLG, lv_aLH, lv_aLI, lv_aLJ) {
  var lv_aLK = f_aGX();
  gv_apk[lv_aLK] = CreateTextTag();
  gv_apl[lv_aLK] = gv_acn;
  gv_apn[lv_aLK] = lv_aLH;
  gv_apo[lv_aLK] = lv_aLI;
  gv_app[lv_aLK] = lv_aLJ;
  gv_apr[lv_aLK] = TextTagSize2Height(lv_aLG);
  gv_apm[lv_aLK] = SubString(f_aID(gv_acp, ""), 0, 10);
  gv_apy[lv_aLK] = lv_aLF;
  if (lv_aLE == "|") {
    gv_apz[lv_aLK] = "||";
  } else {
    gv_apz[lv_aLK] = lv_aLE;
  }
  gv_apt[lv_aLK] = false;
  f_aLd(lv_aLK, 0);
  if (gv_apk[lv_aLK] != null) {
    SetTextTagPos(
      gv_apk[lv_aLK],
      gv_apn[lv_aLK],
      gv_apo[lv_aLK],
      gv_app[lv_aLK]
    );
    SetTextTagColor(
      gv_apk[lv_aLK],
      f_aIu(gv_apl.getInt(lv_aLK)),
      f_aIx(gv_apl.getInt(lv_aLK)),
      f_aIA(gv_apl.getInt(lv_aLK)),
      f_aIs(gv_apl.getInt(lv_aLK))
    );
    SetTextTagText(gv_apk[lv_aLK], gv_apq[lv_aLK], gv_apr[lv_aLK]);
  }
  f_aLl(lv_aLK);
  return lv_aLK;
}
function f_aLL(lv_aLM) {
  if (gv_apk[lv_aLM] != null) {
    DestroyTextTag(gv_apk[lv_aLM]);
    gv_apk[lv_aLM] = null;
  }
  if (gv_apt[lv_aLM]) {
    f_aLA(lv_aLM);
    gv_apu[lv_aLM] = null;
  }
}
function f_aLN(lv_aLO) {
  if (lv_aLO == null) {
    return;
  } else {
    if (gv_apj.getInt(lv_aLO) != -1) {
      return;
    }
  }
  f_aLL(lv_aLO);
  gv_apj[lv_aLO] = gv_aph;
  gv_aph = lv_aLO;
}
function f_aLP() {
  var lv_aLQ = LoadInteger(gv_abY, 0, GetHandleId(GetExpiredTimer()));
  gv_apk[lv_aLQ] = null;
  f_aLN(lv_aLQ);
  f_aJk(GetExpiredTimer());
}
function f_aLR(lv_aLS) {
  var lv_aLT = f_aHm();
  gv_apL[lv_aLT] = f_aJj();
  gv_apK[lv_aLT] = lv_aLS;
  SaveInteger(gv_abY, 0, GetHandleId(gv_apL[lv_aLT]), lv_aLT);
  return lv_aLT;
}
function f_aLU(lv_aLV) {
  DestroyEffect(gv_apK[lv_aLV]);
  f_aJk(gv_apL[lv_aLV]);
  f_aHo(lv_aLV);
}
function f_aLW() {
  f_aLU(LoadInteger(gv_abY, 0, GetHandleId(GetExpiredTimer())));
}
function f_aLX(lv_aLY, lv_aLZ) {
  var lv_aMa = f_aLR(lv_aLY);
  TimerStart(gv_apL[lv_aMa], lv_aLZ, false, f_aLW);
  return lv_aMa;
}
function f_aMb(lv_aMc) {}
function f_aMd() {
  RemoveUnit(gv_acu);
  gv_acu = null;
  f_aJk(GetExpiredTimer());
}
function f_aMe() {}
function f_aMf() {
  var lv_aMg = 0;
  var lv_aMh = 0;
  do {
    if (lv_aMg > 7) {
      break;
    }
    if (
      GetPlayerSlotState(Player(lv_aMg)) == PLAYER_SLOT_STATE_PLAYING &&
      GetPlayerController(Player(lv_aMg)) == MAP_CONTROL_USER
    ) {
      lv_aMh = lv_aMh + 1;
    }
    lv_aMg = lv_aMg + 1;
  } while (true);
  return lv_aMh;
}
function f_aMi(lv_aMj) {
  return (
    (GetUnitAbilityLevel(lv_aMj, "Adda") > 0 ||
      GetUnitAbilityLevel(lv_aMj, "A06T") > 0 ||
      GetUnitAbilityLevel(lv_aMj, "Aloc") > 0) &&
    (IsUnitType(lv_aMj, UNIT_TYPE_STRUCTURE) ||
      IsUnitType(lv_aMj, UNIT_TYPE_MECHANICAL) ||
      IsUnitType(lv_aMj, UNIT_TYPE_ANCIENT))
  );
}
function f_aMk() {
  return (
    (IsUnitType(GetFilterUnit(), UNIT_TYPE_MAGIC_IMMUNE) == false &&
      IsUnitType(GetFilterUnit(), UNIT_TYPE_ANCIENT) == false &&
      IsUnitType(GetFilterUnit(), UNIT_TYPE_STRUCTURE) == false &&
      IsUnitInRangeXY(GetFilterUnit(), gv_acy, gv_acz, gv_acA) &&
      GetWidgetLife(GetFilterUnit()) > 0.405 &&
      IsUnitEnemy(GetFilterUnit(), gv_acx)) != null
  );
}
function f_aMl() {
  return (
    (IsUnitType(GetFilterUnit(), UNIT_TYPE_ANCIENT) == false &&
      IsUnitType(GetFilterUnit(), UNIT_TYPE_STRUCTURE) == false &&
      IsUnitInRangeXY(GetFilterUnit(), gv_acy, gv_acz, gv_acA) &&
      GetWidgetLife(GetFilterUnit()) > 0.405 &&
      IsUnitAlly(GetFilterUnit(), gv_acx)) != null
  );
}
function f_aMm(lv_aMn, lv_aMo) {
  lv_aMo = S2S("\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n|cffffcc00" + lv_aMo) + "|r";
  if (GetLocalPlayer() == lv_aMn) {
    ClearTextMessages();
    DisplayTimedTextToPlayer(lv_aMn, 0.52, 0.96, 3, lv_aMo);
    StartSound(gv_acv);
  }
}
function f_aMp(
  lv_aMq,
  lv_aMr,
  lv_aMs,
  lv_aMt,
  lv_aMu,
  lv_aMv,
  lv_aMw,
  lv_aMx,
  lv_aMy,
  lv_aMz,
  lv_aMA
) {
  var lv_aMB = CreateTextTag();
  lv_aMA = (lv_aMA * 0.024) / 10;
  SetTextTagText(lv_aMB, lv_aMr, lv_aMA);
  SetTextTagPos(lv_aMB, lv_aMv, lv_aMw, 0.0);
  SetTextTagColor(lv_aMB, lv_aMs, lv_aMt, lv_aMu, 255);
  SetTextTagVelocity(lv_aMB, 0, lv_aMx);
  if (lv_aMq != null) {
    SetTextTagVisibility(lv_aMB, GetLocalPlayer() == lv_aMq);
  }
  SetTextTagFadepoint(lv_aMB, lv_aMy);
  SetTextTagLifespan(lv_aMB, lv_aMz);
  SetTextTagPermanent(lv_aMB, false);
  lv_aMB = null;
}
function f_aMC(lv_aMD, lv_aME, lv_aMF, lv_aMG) {
  var lv_aMH = lv_aMF - lv_aMD;
  var lv_aMI = lv_aMG - lv_aME;
  return SquareRoot(lv_aMH * lv_aMH + lv_aMI * lv_aMI);
}
function f_aMJ() {
  var lv_aMK = LoadInteger(gv_abY, 0, GetHandleId(GetExpiredTimer()));
  GroupRemoveUnit(gv_alE, gv_alv[lv_aMK]);
  f_aJk(GetExpiredTimer());
}
function f_aML(lv_aMM) {
  if (lv_aMM < 0.0) {
    return R2I(lv_aMM - 0.5);
  }
  return R2I(lv_aMM + 0.5);
}
function f_aMN(lv_aMO) {
  var lv_aMP;
  var lv_aMQ = 0;
  do {
    if (lv_aMQ > 13) {
      break;
    }
    lv_aMP = Player(lv_aMQ);
    SetPlayerAbilityAvailable(lv_aMP, lv_aMO, false);
    lv_aMQ = lv_aMQ + 1;
  } while (true);
  lv_aMP = null;
}
function f_aMR(lv_aMS) {
  var lv_aMT;
  var lv_aMU = 0;
  do {
    if (lv_aMU > 13) {
      break;
    }
    lv_aMT = Player(lv_aMU);
    SetPlayerAbilityAvailable(lv_aMT, lv_aMS, true);
    lv_aMU = lv_aMU + 1;
  } while (true);
  lv_aMT = null;
}
function f_aMV(lv_aMW) {
  if (GetUnitAbilityLevel(lv_aMW, "A042") > 0) {
    return true;
  } else {
    if (GetUnitAbilityLevel(lv_aMW, "A040") > 0) {
      return true;
    } else {
      if (GetUnitAbilityLevel(lv_aMW, "A046") > 0) {
        return true;
      } else {
        if (GetUnitAbilityLevel(lv_aMW, "A03V") > 0) {
          return true;
        } else {
          if (GetUnitAbilityLevel(lv_aMW, "A05A") > 0) {
            return true;
          } else {
            if (GetUnitAbilityLevel(lv_aMW, "A05I") > 0) {
              return true;
            } else {
              if (GetUnitAbilityLevel(lv_aMW, "A066") > 0) {
                return true;
              } else {
                if (GetUnitAbilityLevel(lv_aMW, "A06G") > 0) {
                  return true;
                } else {
                  if (GetUnitAbilityLevel(lv_aMW, "A06K") > 0) {
                    return true;
                  } else {
                    if (GetUnitAbilityLevel(lv_aMW, "A071") > 0) {
                      return true;
                    } else {
                      if (GetUnitAbilityLevel(lv_aMW, "A056") > 0) {
                        return true;
                      } else {
                        if (GetUnitAbilityLevel(lv_aMW, "A07D") > 0) {
                          return true;
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }
  return false;
}
function f_aMX(lv_aMY) {
  if (GetUnitTypeId(lv_aMY) == "Emoo") {
    UnitAddAbility(lv_aMY, "A03V");
  } else {
    if (GetUnitTypeId(lv_aMY) == "Hant") {
      UnitAddAbility(lv_aMY, "A040");
    } else {
      if (GetUnitTypeId(lv_aMY) == "Udea") {
        UnitAddAbility(lv_aMY, "A042");
      } else {
        if (GetUnitTypeId(lv_aMY) == "Hjai") {
          UnitAddAbility(lv_aMY, "A046");
        } else {
          if (GetUnitTypeId(lv_aMY) == "Oshd") {
            UnitAddAbility(lv_aMY, "A05A");
          } else {
            if (GetUnitTypeId(lv_aMY) == "Hamg") {
              UnitAddAbility(lv_aMY, "A05I");
            } else {
              if (GetUnitTypeId(lv_aMY) == "Ulic") {
                UnitAddAbility(lv_aMY, "A066");
              } else {
                if (GetUnitTypeId(lv_aMY) == "Ekee") {
                  UnitAddAbility(lv_aMY, "A06G");
                } else {
                  if (GetUnitTypeId(lv_aMY) == "Hblm") {
                    UnitAddAbility(lv_aMY, "A06K");
                  } else {
                    if (GetUnitTypeId(lv_aMY) == "Hpal") {
                      UnitAddAbility(lv_aMY, "A071");
                    } else {
                      if (GetUnitTypeId(lv_aMY) == "Edem") {
                        UnitAddAbility(lv_aMY, "A056");
                      } else {
                        if (GetUnitTypeId(lv_aMY) == "Udre") {
                          UnitAddAbility(lv_aMY, "A07D");
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }
}
function f_aMZ() {
  var lv_aNa = GetEnumUnit();
  UnitRemoveAbility(lv_aNa, "Aatk");
  UnitRemoveAbility(lv_aNa, "Amov");
  UnitAddAbility(lv_aNa, "A000");
  UnitModifySkillPoints(lv_aNa, -1);
  f_aMX(lv_aNa);
  lv_aNa = null;
}
function f_aNb() {
  Preload(
    "Objects\\Spawnmodels\\Undead\\ImpaleTargetDust\\ImpaleTargetDust.mdl"
  );
  Preload("Abilities\\Spells\\Other\\Stampede\\StampedeMissileDeath.mdl");
  Preload("Objects\\Spawnmodels\\Orc\\Orcblood\\BattrollBlood.mdl");
  Preload("Abilities\\Spells\\Orc\\EarthQuake\\EarthQuakeTarget.mdl");
  Preload("Abilities\\Spells\\NightElf\\Starfall\\StarfallCaster.mdl");
  Preload("Abilities\\Spells\\NightElf\\Starfall\\StarfallTarget.mdl");
  Preload("Abilities\\Spells\\Items\\HealingSalve\\HealingSalveTarget.mdl");
  Preload("Objects\\Spawnmodels\\Human\\HCancelDeath\\HCancelDeath.mdl");
  Preload("Abilities\\Spells\\Other\\SoulBurn\\SoulBurnbuff.mdl");
  Preload("MDX\\HolyBlessing.mdx");
  Preload("Abilities\\Spells\\Human\\Resurrect\\ResurrectCaster.mdl");
  Preload("Abilities\\Weapons\\Bolt\\BoltImpact.mdl");
  Preload("MDX\\LightningWrath.mdx");
  Preload("Abilities\\Spells\\Human\\Feedback\\SpellBreakerAttack.mdl");
  Preload("Abilities\\Spells\\Orc\\WarStomp\\WarStompCaster.mdl");
  Preload(
    "Abilities\\Weapons\\DemolisherFireMissile\\DemolisherFireMissile.mdl"
  );
  Preload("MDX\\MagmaBurst.mdx");
  Preload("Environment\\SmallBuildingFire\\SmallBuildingFire2.mdl");
  Preload("MDX\\MeteorAttack.mdx");
  Preload("Abilities\\Spells\\Other\\Incinerate\\FireLordDeathExplode.mdl");
  Preload("MDX\\WaterMagic.mdx");
  Preload("Abilities\\Spells\\Items\\ResourceItems\\ResourceEffectTarget.mdl");
  Preload(
    "Abilities\\Spells\\Items\\StaffOfSanctuary\\Staff_Sanctuary_Target.mdl"
  );
  Preload("Abilities\\Spells\\Orc\\Voodoo\\VoodooAuraTarget.mdl");
  Preload("MDX\\FreezingRing.mdx");
  Preload("Abilities\\Spells\\Human\\Feedback\\ArcaneTowerAttack.mdl");
  Preload("Abilities\\Spells\\Undead\\FrostNova\\FrostNovaTarget.mdl");
  Preload("MDX\\SnowyBlizzardTarget.mdx");
  Preload("Abilities\\Spells\\Undead\\AnimateDead\\AnimateDeadTarget.mdl");
}
function f_aNc() {
  var lv_aNd = GetExpiredTimer();
  var lv_aNe = LoadInteger(gv_abY, 0, GetHandleId(lv_aNd));
  var lv_aNf = Atan2(
    gv_apQ[lv_aNe] - GetUnitY(gv_apS[lv_aNe]),
    gv_apP[lv_aNe] - GetUnitX(gv_apS[lv_aNe])
  );
  SetUnitX(
    gv_apS[lv_aNe],
    GetUnitX(gv_apS[lv_aNe]) + Cos(lv_aNf) * gv_apR[lv_aNe]
  );
  SetUnitY(
    gv_apS[lv_aNe],
    GetUnitY(gv_apS[lv_aNe]) + Sin(lv_aNf) * gv_apR[lv_aNe]
  );
  if (
    IsUnitInRangeXY(
      gv_apS[lv_aNe],
      gv_apP[lv_aNe],
      gv_apQ[lv_aNe],
      gv_apR[lv_aNe]
    ) ||
    f_aHf(lv_aNe, lv_aNf)
  ) {
    f_aHk(lv_aNe);
    GroupRemoveUnit(gv_acB, gv_apS[lv_aNe]);
    f_aJk(lv_aNd);
  }
  lv_aNd = null;
}
function f_aNg(lv_aNh, lv_aNi, lv_aNj, lv_aNk) {
  var lv_aNl = f_aHi();
  var lv_aNm = f_aJj();
  gv_apS[lv_aNl] = lv_aNh;
  gv_apP[lv_aNl] = lv_aNi;
  gv_apQ[lv_aNl] = lv_aNj;
  gv_apR[lv_aNl] = lv_aNk * 0.025;
  GroupAddUnit(gv_acB, gv_apS[lv_aNl]);
  SaveInteger(gv_abY, 0, GetHandleId(lv_aNm), lv_aNl);
  TimerStart(lv_aNm, 0.025, true, f_aNc);
  lv_aNm = null;
  return lv_aNl;
}
function f_aNn(lv_aNo, lv_aNp) {
  var lv_aNq;
  if (IsUnitType(lv_aNo, UNIT_TYPE_GIANT) == false) {
    lv_aNq = f_aNg(
      lv_aNo,
      GetUnitX(lv_aNo) + Cos(lv_aNp) * 400,
      GetUnitY(lv_aNo) + Sin(lv_aNp) * 400,
      600
    );
    gv_apT[lv_aNq] = 0;
  }
}
function f_aNr() {
  gv_acB = CreateGroup();
}
function f_aNs(lv_aNt, lv_aNu, lv_aNv, lv_aNw, lv_aNx) {
  var lv_aNy = f_aHw();
  gv_aqa[lv_aNy] = lv_aNt;
  if (lv_aNu > gv_acF) {
    gv_aqb[lv_aNy] = gv_acF;
  } else {
    if (lv_aNu < gv_acE) {
      gv_aqb[lv_aNy] = gv_acE;
    } else {
      gv_aqb[lv_aNy] = lv_aNu;
    }
  }
  if (lv_aNv > gv_acH) {
    gv_aqc[lv_aNy] = gv_acH;
  } else {
    if (lv_aNv < gv_acG) {
      gv_aqc[lv_aNy] = gv_acG;
    } else {
      gv_aqc[lv_aNy] = lv_aNv;
    }
  }
  gv_aqd[lv_aNy] = lv_aNw;
  gv_aqe[lv_aNy] = lv_aNx;
  gv_aqf[lv_aNy] = 0.0;
  gv_aqg[lv_aNy] = false;
  gv_aqh[lv_aNy] = false;
  gv_aqi[lv_aNy] = false;
  gv_acI = gv_acI + 1;
  gv_acJ[gv_acI] = lv_aNy;
  if (gv_acI == 0) {
    TimerStart(gv_acC, 0.02, true, gv_aqj);
  }
  return lv_aNy;
}
function f_aNz() {
  var lv_aNA = gv_acI;
  var lv_aNB;
  var lv_aNC;
  do {
    if (lv_aNA < 0) {
      break;
    }
    lv_aNC = gv_acJ.getInt(lv_aNA);
    gv_acD = lv_aNA;
    gv_aqf[lv_aNC] = gv_aqf[lv_aNC] + 0.02;
    if (gv_aqf[lv_aNC] >= gv_aqe[lv_aNC]) {
      lv_aNB = Atan2(
        gv_aqc[lv_aNC] - GetUnitY(gv_aqa[lv_aNC]),
        gv_aqb[lv_aNC] - GetUnitX(gv_aqa[lv_aNC])
      );
      if (!gv_aqh[lv_aNC]) {
        SetUnitFacing(gv_aqa[lv_aNC], lv_aNB * bj_RADTODEG);
      }
      if (gv_aqg[lv_aNC]) {
        SetUnitPosition(
          gv_aqa[lv_aNC],
          GetUnitX(gv_aqa[lv_aNC]) + gv_aqd[lv_aNC] * Cos(lv_aNB),
          GetUnitY(gv_aqa[lv_aNC]) + gv_aqd[lv_aNC] * Sin(lv_aNB)
        );
      } else {
        SetUnitX(
          gv_aqa[lv_aNC],
          GetUnitX(gv_aqa[lv_aNC]) + gv_aqd[lv_aNC] * Cos(lv_aNB)
        );
        SetUnitY(
          gv_aqa[lv_aNC],
          GetUnitY(gv_aqa[lv_aNC]) + gv_aqd[lv_aNC] * Sin(lv_aNB)
        );
      }
      if (gv_apZ[gv_apX.getInt(lv_aNC)] != null) {
        f_aHb(lv_aNC);
      }
      gv_aqf[lv_aNC] = 0.0;
    }
    if (
      IsUnitInRangeXY(
        gv_aqa[lv_aNC],
        gv_aqb[lv_aNC],
        gv_aqc[lv_aNC],
        gv_aqd[lv_aNC]
      ) ||
      gv_aqi[lv_aNC]
    ) {
      f_aHd(lv_aNC);
      gv_acJ[lv_aNA] = gv_acJ.getInt(gv_acI);
      gv_acI = gv_acI - 1;
    }
    lv_aNA = lv_aNA - 1;
  } while (true);
  if (gv_acI == -1) {
    PauseTimer(gv_acC);
  }
}
function f_aND() {
  gv_aqj = f_aNz;
}
function f_aNE(lv_aNF, lv_aNG, lv_aNH, lv_aNI, lv_aNJ, lv_aNK) {
  var lv_aNL = GetUnitFacing(lv_aNF) * bj_DEGTORAD;
  var lv_aNM = f_aHH(
    lv_aNF,
    GetUnitX(lv_aNF) - Cos(lv_aNL) * lv_aNH,
    GetUnitY(lv_aNF) - Sin(lv_aNL) * lv_aNH,
    lv_aNI,
    lv_aNK
  );
  gv_aqk[lv_aNM] = lv_aNJ;
  gv_aql[lv_aNM] = lv_aNG;
  gv_aqh[lv_aNM] = true;
  gv_aqg[lv_aNM] = true;
  gv_aqm[lv_aNM] = 0;
  return lv_aNM;
}
function f_aNN() {
  gv_acE = GetRectMinX(bj_mapInitialPlayableArea);
  gv_acF = GetRectMaxX(bj_mapInitialPlayableArea);
  gv_acG = GetRectMinY(bj_mapInitialPlayableArea);
  gv_acH = GetRectMaxY(bj_mapInitialPlayableArea);
  Preload(
    "Objects\\Spawnmodels\\Undead\\ImpaleTargetDust\\ImpaleTargetDust.mdl"
  );
}
function f_aNO(lv_aNP, lv_aNQ, lv_aNR) {
  var lv_aNS = 10;
  var lv_aNT;
  var lv_aNU = 0;
  do {
    if (lv_aNU > 7) {
      break;
    }
    if (
      GetPlayerController(Player(lv_aNU)) == MAP_CONTROL_USER &&
      GetPlayerSlotState(Player(lv_aNU)) == PLAYER_SLOT_STATE_PLAYING
    ) {
      lv_aNT = f_aMC(
        lv_aNP,
        lv_aNQ,
        GetUnitX(gv_alv[lv_aNU]),
        GetUnitY(gv_alv[lv_aNU])
      );
      if (GetWidgetLife(gv_alv[lv_aNU]) > 0.405 && lv_aNR > lv_aNT) {
        lv_aNR = lv_aNT;
        lv_aNS = lv_aNU;
      }
    }
    lv_aNU = lv_aNU + 1;
  } while (true);
  return lv_aNS;
}
function f_aNV(lv_aNW) {
  var lv_aNX = 0;
  var lv_aNY = 0;
  do {
    if (lv_aNY > 7) {
      break;
    }
    if (
      GetWidgetLife(gv_alv[lv_aNY]) > 0.405 &&
      GetPlayerController(Player(lv_aNY)) == MAP_CONTROL_USER &&
      GetPlayerSlotState(Player(lv_aNY)) == PLAYER_SLOT_STATE_PLAYING
    ) {
      if (
        RectContainsCoords(
          lv_aNW,
          GetUnitX(gv_alv[lv_aNY]),
          GetUnitY(gv_alv[lv_aNY])
        )
      ) {
        lv_aNX = lv_aNX + 1;
      }
    }
    lv_aNY = lv_aNY + 1;
  } while (true);
  return lv_aNX;
}
function f_aNZ() {
  RemoveDestructable(GetEnumDestructable());
}
function f_aOa(lv_aOb, lv_aOc) {
  var lv_aOd;
  if (StringCase(lv_aOc, false) == "x") {
    lv_aOd = GetRandomReal(GetRectMinX(lv_aOb), GetRectMaxX(lv_aOb));
  } else {
    lv_aOd = GetRandomReal(GetRectMinY(lv_aOb), GetRectMaxY(lv_aOb));
  }
  return lv_aOd;
}
function f_aOe(lv_aOf, lv_aOg, lv_aOh, lv_aOi, lv_aOj, lv_aOk) {
  do {
    lv_aOf = lv_aOf - 1;
    if (lv_aOf < 0) {
      break;
    }
    CreateUnit(lv_aOh, lv_aOg, lv_aOi, lv_aOj, lv_aOk);
  } while (true);
}
function f_aOl(lv_aOm) {
  if (lv_aOm == "red") {
    return 0;
  }
  if (lv_aOm == "blue") {
    return 1;
  }
  if (lv_aOm == "teal") {
    return 2;
  }
  if (lv_aOm == "purple") {
    return 3;
  }
  if (lv_aOm == "yellow") {
    return 4;
  }
  if (lv_aOm == "orange") {
    return 5;
  }
  if (lv_aOm == "green") {
    return 6;
  }
  if (lv_aOm == "pink") {
    return 7;
  }
  return 10;
}
function f_aOn() {
  return (
    (IsUnitType(GetEnteringUnit(), UNIT_TYPE_HERO) &&
      GetWidgetLife(GetEnteringUnit()) > 0.405) != null
  );
}
function f_aOo() {
  return (
    IsUnitEnemy(GetFilterUnit(), Player(11)) &&
    !f_aMi(GetFilterUnit()) &&
    GetWidgetLife(GetFilterUnit()) > 0.405
  );
}
function f_aOp() {
  if (GetWidgetLife(GetEnumUnit()) > 0.405) {
    SetUnitInvulnerable(GetEnumUnit(), false);
    KillUnit(GetEnumUnit());
  }
}
function f_aOq() {
  var lv_aOr = LoadInteger(gv_abY, 0, GetHandleId(GetExpiredTimer()));
  SetUnitInvulnerable(gv_aqq[lv_aOr], false);
  EnableTrigger(gv_aqs[lv_aOr]);
  PauseUnit(gv_aqq[lv_aOr], false);
  if (f_aNV(gv_aqr[lv_aOr]) > 0) {
    TriggerExecute(gv_aqs[lv_aOr]);
  }
  f_aGV(lv_aOr);
  f_aJk(GetExpiredTimer());
}
function f_aOs(lv_aOt, lv_aOu, lv_aOv) {
  var lv_aOw = f_aGT();
  var lv_aOx = f_aJj();
  gv_acL = GetUnitName(lv_aOt);
  if (LoadInteger(gv_abT, gv_acK, StringHash(S2S(gv_acL + "_X"))) != 0) {
    SetUnitPosition(
      lv_aOt,
      LoadInteger(gv_abT, gv_acK, StringHash(S2S(gv_acL + "_X"))),
      LoadInteger(gv_abT, gv_acK, StringHash(S2S(gv_acL + "_Y")))
    );
    SetUnitFacing(
      lv_aOt,
      LoadInteger(gv_abT, gv_acK, StringHash(S2S(gv_acL + "_A")))
    );
  }
  SetUnitState(lv_aOt, UNIT_STATE_LIFE, 999999);
  SetUnitState(lv_aOt, UNIT_STATE_MANA, 999999);
  SetUnitInvulnerable(lv_aOt, true);
  PauseUnit(lv_aOt, true);
  gv_aqq[lv_aOw] = lv_aOt;
  gv_aqr[lv_aOw] = lv_aOu;
  gv_aqs[lv_aOw] = lv_aOv;
  SaveInteger(gv_abY, 0, GetHandleId(lv_aOx), lv_aOw);
  TimerStart(lv_aOx, 8, true, f_aOq);
  lv_aOx = null;
}
function f_aOy() {
  gv_acK = f_aDd();
  SaveInteger(gv_abT, gv_acK, StringHash("Avatar of Earth_X"), 2055);
  SaveInteger(gv_abT, gv_acK, StringHash("Avatar of Earth_Y"), 14396);
  SaveInteger(gv_abT, gv_acK, StringHash("Avatar of Earth_A"), 338);
  SaveInteger(gv_abT, gv_acK, StringHash("Avatar of Justice_X"), -11254);
  SaveInteger(gv_abT, gv_acK, StringHash("Avatar of Justice_Y"), 4772);
  SaveInteger(gv_abT, gv_acK, StringHash("Avatar of Justice_A"), 228);
  SaveInteger(gv_abT, gv_acK, StringHash("Avatar of Air_X"), -10320);
  SaveInteger(gv_abT, gv_acK, StringHash("Avatar of Air_Y"), 14323);
  SaveInteger(gv_abT, gv_acK, StringHash("Avatar of Air_A"), 316);
  SaveInteger(gv_abT, gv_acK, StringHash("Avatar of Water_X"), 1967);
  SaveInteger(gv_abT, gv_acK, StringHash("Avatar of Water_Y"), -10228);
  SaveInteger(gv_abT, gv_acK, StringHash("Avatar of Water_A"), 55);
  SaveInteger(gv_abT, gv_acK, StringHash("Avatar of Pain_X"), -9577);
  SaveInteger(gv_abT, gv_acK, StringHash("Avatar of Pain_Y"), -1031);
  SaveInteger(gv_abT, gv_acK, StringHash("Avatar of Pain_A"), 298);
  SaveInteger(gv_abT, gv_acK, StringHash("Art_X"), -9299);
  SaveInteger(gv_abT, gv_acK, StringHash("Art_Y"), -1000);
  SaveInteger(gv_abT, gv_acK, StringHash("Art_A"), 263);
  SaveInteger(gv_abT, gv_acK, StringHash("Lilly_X"), -9706);
  SaveInteger(gv_abT, gv_acK, StringHash("Lilly_Y"), -1251);
  SaveInteger(gv_abT, gv_acK, StringHash("Lilly_A"), 340);
  SaveInteger(gv_abT, gv_acK, StringHash("Avatar of Nature_X"), -1781);
  SaveInteger(gv_abT, gv_acK, StringHash("Avatar of Nature_Y"), -3049);
  SaveInteger(gv_abT, gv_acK, StringHash("Avatar of Nature_A"), 274);
  SaveInteger(gv_abT, gv_acK, StringHash("Mother Earth_X"), -169);
  SaveInteger(gv_abT, gv_acK, StringHash("Mother Earth_Y"), -14035);
  SaveInteger(gv_abT, gv_acK, StringHash("Mother Earth_A"), 241);
  SaveInteger(gv_abT, gv_acK, StringHash("Avatar of Death_X"), 14499);
  SaveInteger(gv_abT, gv_acK, StringHash("Avatar of Death_Y"), -11269);
  SaveInteger(gv_abT, gv_acK, StringHash("Avatar of Death_A"), 217);
  SaveInteger(gv_abT, gv_acK, StringHash("|cffA120ff|rNemean Lion_X"), -5423);
  SaveInteger(gv_abT, gv_acK, StringHash("|cffA120ff|rNemean Lion_Y"), -13086);
  SaveInteger(gv_abT, gv_acK, StringHash("|cffA120ff|rNemean Lion_A"), 303);
  SaveInteger(gv_abT, gv_acK, StringHash("|cffA138ff|rChillhand_X"), 13820);
  SaveInteger(gv_abT, gv_acK, StringHash("|cffA138ff|rChillhand_Y"), -3003);
  SaveInteger(gv_abT, gv_acK, StringHash("|cffA138ff|rChillhand_A"), 275);
  SaveInteger(gv_abT, gv_acK, StringHash("|cffA138ff|rLaestrygonian_X"), 10196);
  SaveInteger(gv_abT, gv_acK, StringHash("|cffA138ff|rLaestrygonian_Y"), -7258);
  SaveInteger(gv_abT, gv_acK, StringHash("|cffA138ff|rLaestrygonian_A"), 314);
  SaveInteger(gv_abT, gv_acK, StringHash("|cffA138ff|rChimaera_X"), 9786);
  SaveInteger(gv_abT, gv_acK, StringHash("|cffA138ff|rChimaera_Y"), -2051);
  SaveInteger(gv_abT, gv_acK, StringHash("|cffA138ff|rChimaera_A"), 306);
  SaveInteger(gv_abT, gv_acK, StringHash("|cffA120ff|rMedusa_X"), 3932);
  SaveInteger(gv_abT, gv_acK, StringHash("|cffA120ff|rMedusa_Y"), -14075);
  SaveInteger(gv_abT, gv_acK, StringHash("|cffA120ff|rMedusa_A"), 30);
  SaveInteger(
    gv_abT,
    gv_acK,
    StringHash("|cffA085ff|rRotting Flesh Golem #1_X"),
    4274
  );
  SaveInteger(
    gv_abT,
    gv_acK,
    StringHash("|cffA085ff|rRotting Flesh Golem #1_Y"),
    -14536
  );
  SaveInteger(
    gv_abT,
    gv_acK,
    StringHash("|cffA085ff|rRotting Flesh Golem #1_A"),
    44
  );
  SaveInteger(
    gv_abT,
    gv_acK,
    StringHash("|cffA085ff|rRotting Flesh Golem #2_X"),
    3965
  );
  SaveInteger(
    gv_abT,
    gv_acK,
    StringHash("|cffA085ff|rRotting Flesh Golem #2_Y"),
    -13243
  );
  SaveInteger(
    gv_abT,
    gv_acK,
    StringHash("|cffA085ff|rRotting Flesh Golem #2_A"),
    345
  );
  SaveInteger(
    gv_abT,
    gv_acK,
    StringHash("|cffA085ff|rRotting Flesh Golem #3_X"),
    3244
  );
  SaveInteger(
    gv_abT,
    gv_acK,
    StringHash("|cffA085ff|rRotting Flesh Golem #3_Y"),
    -141050
  );
  SaveInteger(
    gv_abT,
    gv_acK,
    StringHash("|cffA085ff|rRotting Flesh Golem #3_A"),
    18
  );
  SaveInteger(gv_abT, gv_acK, StringHash("|cffA130ff|rLadon_X"), 0);
  SaveInteger(gv_abT, gv_acK, StringHash("|cffA130ff|rLadon_Y"), 0);
  SaveInteger(gv_abT, gv_acK, StringHash("|cffA130ff|rLadon_A"), 0);
  SaveInteger(gv_abT, gv_acK, StringHash("Queen of the Underworld_X"), 13403);
  SaveInteger(gv_abT, gv_acK, StringHash("Queen of the Underworld_Y"), 201);
  SaveInteger(gv_abT, gv_acK, StringHash("Queen of the Underworld_A"), 192);
}
function f_aOz() {
  var lv_aOA = 0;
  var lv_aOB = GetUnitX(gv_acN);
  var lv_aOC = GetUnitY(gv_acN);
  if (GetWidgetLife(gv_acN) < 0.406 || GetUnitLifePercent(gv_acN) < 5) {
    DisplayTimedTextToForce(
      gv_alH,
      5,
      "|cff00ff00Hades:|r This will not be the end, Champion of Greece. My world awaits you,\n             with far worse terrors than those in yours!"
    );
    CreateItem("I01Z", lv_aOB, lv_aOC);
    if (GetRandomInt(1, 8) == 1) {
      CreateItem(gv_ama.getInt(365 + GetRandomInt(0, 5)), lv_aOB, lv_aOC);
    }
    gv_alw[7010] = S2S(
      gv_alw[7010] + " -- |cffffd700You and your companions drove him back|r"
    );
    f_aKF(10);
    gv_alx[7000] = gv_alx.getInt(7000) + 1;
    gv_alx[196] = gv_alx.getInt(196) + 10;
    if (GetRandomInt(1, 4) == 1) {
      CreateItem("I01H", lv_aOB, lv_aOC);
    }
    ShowUnit(gv_acN, false);
    f_aJk(gv_acM);
  } else {
    SaveInteger(
      gv_abY,
      0,
      GetHandleId(gv_acM),
      LoadInteger(gv_abY, 0, GetHandleId(gv_acM)) + 1
    );
    if (ModuloInteger(LoadInteger(gv_abY, 0, GetHandleId(gv_acM)), 3) == 0) {
      gv_alM = CreateUnit(Player(11), gv_acw, lv_aOB, lv_aOC, 0.0);
      UnitAddAbility(gv_alM, "A090");
      IssuePointOrderById(
        gv_alM,
        852238,
        lv_aOB + GetRandomReal(-600, 600),
        lv_aOC + GetRandomReal(-600, 600)
      );
      UnitApplyTimedLife(gv_alM, "BTLF", 5);
    }
    if (GetUnitLifePercent(gv_acN) < 90 && GetUnitUserData(gv_acN) == 1) {
      SetUnitUserData(gv_acN, 2);
    }
    if (GetUnitLifePercent(gv_acN) < 60 && GetUnitUserData(gv_acN) == 2) {
      SetUnitUserData(gv_acN, 3);
      UnitAddAbility(gv_acN, "A03N");
    }
    if (
      GetUnitUserData(gv_acN) > 1 &&
      ModuloInteger(LoadInteger(gv_abY, 0, GetHandleId(gv_acM)), 15) == 0
    ) {
      GroupClear(gv_abF);
      GroupEnumUnitsInRange(
        gv_abF,
        GetUnitX(gv_acN),
        GetUnitY(gv_acN),
        1000,
        Condition(f_aOo)
      );
      bj_groupRandomConsidered = 0;
      bj_groupRandomCurrentPick = null;
      ForGroup(gv_abF, GroupPickRandomUnitEnum);
      if (bj_groupRandomCurrentPick != null) {
        DisplayTimedTextToForce(
          gv_alH,
          5,
          "|cff00ff00Hades:|r I don't need you awake..."
        );
        gv_alM = CreateUnit(
          Player(10),
          "hpea",
          GetUnitX(gv_acN),
          GetUnitY(gv_acN),
          GetUnitFacing(gv_acN)
        );
        UnitAddAbility(gv_alM, "AUsl");
        IssueTargetOrderById(gv_alM, 852227, bj_groupRandomCurrentPick);
        UnitApplyTimedLife(gv_alM, "BTLF", 2);
      }
      f_aIJ(gv_abF);
    }
    if (
      GetUnitUserData(gv_acN) == 2 &&
      LoadInteger(gv_abY, 0, GetHandleId(gv_acM)) == 15
    ) {
      DisplayTimedTextToForce(
        gv_alH,
        5,
        "|cff00ff00Hades:|r For I am ruler of the underworld... First illusion, Soul Tsunami!"
      );
      gv_alM = CreateUnit(
        Player(10),
        "hpea",
        GetUnitX(gv_acN),
        GetUnitY(gv_acN),
        GetUnitFacing(gv_acN)
      );
      UnitAddAbility(gv_alM, "A092");
      IssuePointOrderById(gv_alM, 852593, GetUnitX(gv_acN), GetUnitY(gv_acN));
      UnitApplyTimedLife(gv_alM, "BTLF", 25);
    }
    if (
      GetUnitUserData(gv_acN) == 3 &&
      LoadInteger(gv_abY, 0, GetHandleId(gv_acM)) == 15
    ) {
      DisplayTimedTextToForce(
        gv_alH,
        5,
        "|cff00ff00Hades:|r Zeus is a fool for not joining his champions battle... Second illusion, Perfect Split!"
      );
      if (GetUnitAbilityLevel(gv_acN, "A094") < 1) {
        UnitAddAbility(gv_acN, "A094");
      }
      IssueImmediateOrderById(gv_acN, 852123);
    }
    if (
      ModuloInteger(LoadInteger(gv_abY, 0, GetHandleId(gv_acM)), 10) == 0 &&
      GetUnitUserData(gv_acN) > 0
    ) {
      GroupClear(gv_abF);
      GroupEnumUnitsInRange(
        gv_abF,
        GetUnitX(gv_acN),
        GetUnitY(gv_acN),
        300,
        Condition(f_aOo)
      );
      bj_groupRandomConsidered = 0;
      bj_groupRandomCurrentPick = null;
      ForGroup(gv_abF, GroupPickRandomUnitEnum);
      if (bj_groupRandomCurrentPick != null) {
        DisplayTimedTextToForce(
          gv_alH,
          5,
          "|cff00ff00Hades:|r Get out of my way mortal!"
        );
        f_aNE(
          bj_groupRandomCurrentPick,
          "Objects\\Spawnmodels\\Undead\\ImpaleTargetDust\\ImpaleTargetDust.mdl",
          500,
          14,
          0.2,
          0.02
        );
        UnitDamageTarget(
          gv_acN,
          bj_groupRandomCurrentPick,
          1000,
          false,
          false,
          ATTACK_TYPE_NORMAL,
          DAMAGE_TYPE_UNIVERSAL,
          null
        );
      }
      f_aIJ(gv_abF);
    }
    if (LoadInteger(gv_abY, 0, GetHandleId(gv_acM)) == 30) {
      if (GetUnitUserData(gv_acN) > 0) {
        DisplayTimedTextToForce(
          gv_alH,
          5,
          "|cff00ff00Hades:|r Rise from Tartarus thy soul!"
        );
        gv_alM = CreateUnit(
          Player(11),
          "n00M",
          lv_aOB + GetRandomReal(-300, 300),
          lv_aOC + GetRandomReal(-300, 300),
          0.0
        );
        IssuePointOrderById(gv_alM, gv_aas, GetUnitX(gv_akj), GetUnitY(gv_akj));
      }
      SaveInteger(gv_abY, 0, GetHandleId(gv_acM), 0);
    }
  }
}
function f_aOD() {
  if (GetEnteringUnit() == gv_acN) {
    PauseTimer(gv_acM);
    PauseUnit(gv_acN, true);
    SetUnitInvulnerable(gv_acN, true);
    ShowUnit(gv_ale, true);
    DestroyEffect(
      AddSpecialEffectTarget(
        "Abilities\\Spells\\Human\\MassTeleport\\MassTeleportCaster.mdl",
        gv_ale,
        "origin"
      )
    );
    SetUnitInvulnerable(gv_ale, true);
    DisplayTimedTextToForce(
      gv_alH,
      5,
      "|cff00ff00Hades:|r Ah my wife, come and join me to finish off these mortal fools!"
    );
    f_aBN(1);
    DisplayTimedTextToForce(
      gv_alH,
      5,
      "|cff00ff00Persephone:|r Never! As long as I'm still bound to my mother I won't let you do this."
    );
    f_aBN(1);
    DisplayTimedTextToForce(
      gv_alH,
      5,
      "|cff00ff00Hades:|r Then I have no choice, I shall send you back Tartarus myself then"
    );
    f_aBN(1);
    DisplayTimedTextToForce(
      gv_alH,
      5,
      "|cff00ff00Persephone:|r Never till my time here is over Hades!"
    );
    f_aBN(1);
    PauseUnit(gv_acN, false);
    SetUnitInvulnerable(gv_acN, false);
    PauseUnit(gv_ale, false);
    SetUnitInvulnerable(gv_ale, false);
    f_aNE(
      gv_acN,
      "Objects\\Spawnmodels\\Undead\\ImpaleTargetDust\\ImpaleTargetDust.mdl",
      500,
      14,
      0.2,
      0.02
    );
    DisableTrigger(GetTriggeringTrigger());
    TimerStart(gv_acM, 1, true, f_aOz);
    IssuePointOrderById(gv_acN, gv_aas, GetUnitX(gv_akj), GetUnitY(gv_akj));
  }
}
function f_aOE() {
  DisplayTimedTextToForce(
    gv_alH,
    5,
    "|cff00ff00Hades:|r My foolish wife... You shall pay for this trickery champions!"
  );
}
function f_aOF() {
  var lv_aOG = CreateRegion();
  RegionAddRect(lv_aOG, gv_ada);
  DisplayTimedTextToForce(
    gv_alH,
    5,
    "|cff00ff00Hades:|r Open, gates of hell! I come for Greece. Only death awaits you, mortals!"
  );
  SaveInteger(gv_abY, 0, GetHandleId(gv_acM), 0);
  SetUnitUserData(gv_acN, 1);
  gv_aiV = CreateTrigger();
  TriggerRegisterEnterRegion(gv_aiV, lv_aOG, null);
  TriggerAddAction(gv_aiV, f_aOD);
  gv_aiV = CreateTrigger();
  TriggerRegisterUnitEvent(gv_aiV, gv_ale, EVENT_UNIT_DEATH);
  TriggerAddAction(gv_aiV, f_aOE);
  TimerStart(gv_acM, 1, true, f_aOz);
}
function f_aOH(lv_aOI, lv_aOJ, lv_aOK) {
  SetPlayerState(
    lv_aOI,
    PLAYER_STATE_RESOURCE_GOLD,
    GetPlayerState(lv_aOI, PLAYER_STATE_RESOURCE_GOLD) +
      LoadInteger(
        gv_abT,
        gv_acO,
        StringHash(S2S(I2S(GetItemTypeId(lv_aOJ)) + "Gold"))
      )
  );
  SetPlayerState(
    lv_aOI,
    PLAYER_STATE_RESOURCE_LUMBER,
    GetPlayerState(lv_aOI, PLAYER_STATE_RESOURCE_LUMBER) +
      LoadInteger(
        gv_abT,
        gv_acO,
        StringHash(S2S(I2S(GetItemTypeId(lv_aOJ)) + "Lumber"))
      )
  );
  if (lv_aOK == 0) {
    f_aMm(
      lv_aOI,
      "You are too weak to use the spell upgrade book.\n    The cost has been refunded."
    );
  }
  if (lv_aOK == 1) {
    f_aMm(
      lv_aOI,
      "You have already purchase a skill point, please upgrade the skill first.\n    The cost has been refunded."
    );
  } else {
    if (lv_aOK == 2) {
      f_aMm(
        lv_aOI,
        "You have no skills that can be upgraded.\n    The cost has been refunded."
      );
    }
  }
}
function f_aOL(lv_aOM, lv_aON, lv_aOO) {
  var lv_aOP = lv_aON * 5 + 200;
  if (gv_alx.getInt(lv_aOP) == lv_aOO) {
    UnitAddAbility(lv_aOM, "A054");
  }
  if (gv_alx.getInt(lv_aOP + 1) == lv_aOO) {
    UnitAddAbility(lv_aOM, "A05X");
  }
  if (gv_alx.getInt(lv_aOP + 2) == lv_aOO) {
    UnitAddAbility(lv_aOM, "A05Y");
  }
  if (gv_alx.getInt(lv_aOP + 3) == lv_aOO) {
    UnitAddAbility(lv_aOM, "A05Z");
  }
  if (gv_alx.getInt(lv_aOP + 4) == lv_aOO) {
    UnitAddAbility(lv_aOM, "A060");
  }
}
function f_aOQ(lv_aOR, lv_aOS, lv_aOT) {
  var lv_aOU = lv_aOT * 5 + 200;
  lv_aOS = lv_aOS - 1;
  IncUnitAbilityLevel(
    lv_aOR,
    gv_ama.getInt(
      LoadInteger(gv_abT, gv_acO, StringHash(GetUnitName(lv_aOR))) + lv_aOS
    )
  );
  gv_alx[lv_aOU + lv_aOS] = gv_alx.getInt(lv_aOU + lv_aOS) + 1;
}
function f_aOV(lv_aOW) {
  var lv_aOX = StringHash(GetUnitName(gv_alv[lv_aOW]));
  var lv_aOY = 1;
  var lv_aOZ;
  var lv_aPa = 0;
  do {
    if (lv_aOY > 5) {
      break;
    }
    lv_aOZ = GetUnitAbilityLevel(
      gv_alv[lv_aOW],
      gv_ama.getInt(LoadInteger(gv_abT, gv_acO, lv_aOX) + lv_aOY)
    );
    if (lv_aOZ > 0) {
      SetUnitAbilityLevel(
        gv_alv[lv_aOW],
        gv_ama.getInt(LoadInteger(gv_abT, gv_acO, lv_aOX) + lv_aOY),
        1
      );
      gv_alx[lv_aOW * 5 + 199 + lv_aOY] = 1;
      if (lv_aOZ == 6) {
        lv_aPa = lv_aPa + 77;
      } else {
        if (lv_aOZ == 5) {
          lv_aPa = lv_aPa + 27;
        } else {
          if (lv_aOZ == 4) {
            lv_aPa = lv_aPa + 7;
          }
        }
      }
    }
    lv_aOY = lv_aOY + 1;
  } while (true);
  AdjustPlayerStateBJ(
    R2I(lv_aPa / 2),
    Player(lv_aOW),
    PLAYER_STATE_RESOURCE_LUMBER
  );
}
function f_aPb() {
  var lv_aPc = GetItemTypeId(GetManipulatedItem());
  return (
    lv_aPc == "lmbr" ||
    lv_aPc == "gfor" ||
    lv_aPc == "gomn" ||
    lv_aPc == "guvi" ||
    lv_aPc == "rdis" ||
    lv_aPc == "I06J"
  );
}
function f_aPd() {
  var lv_aPe = GetManipulatingUnit();
  var lv_aPf = GetPlayerId(GetOwningPlayer(lv_aPe));
  var lv_aPg = GetItemTypeId(GetManipulatedItem());
  var lv_aPh = 0;
  var lv_aPi = LoadInteger(
    gv_abT,
    gv_acO,
    StringHash(S2S(I2S(lv_aPg) + "Req"))
  );
  var lv_aPj = 1;
  var lv_aPk;
  if (lv_aPg == "I06J") {
    f_aOV(lv_aPf);
    lv_aPe = null;
    return;
  }
  do {
    if (lv_aPj > 5) {
      break;
    }
    if (gv_alx.getInt(lv_aPf * 5 + 199 + lv_aPj) > lv_aPi) {
      lv_aPh = lv_aPh + 1;
    } else {
      if (gv_alx.getInt(lv_aPf * 5 + 199 + lv_aPj) == lv_aPi) {
        lv_aPg = 1;
      }
    }
    lv_aPj = lv_aPj + 1;
  } while (true);
  gv_aaK[lv_aPf] = gv_aaK.getInt(20 + lv_aPi) * (lv_aPh + 1);
  gv_aaJ[lv_aPf] = gv_aaJ.getInt(20 + lv_aPi) * (lv_aPh + 1);
  lv_aPk = 25 * lv_aPi + 4 * lv_aPh;
  if (GetHeroLevel(gv_alv[lv_aPf]) < lv_aPk) {
    DisplayTimedTextToPlayer(
      GetOwningPlayer(lv_aPe),
      0,
      0,
      10,
      S2S("Requires level " + gv_aba) +
        I2S(lv_aPk) +
        "|r, " +
        gv_abb +
        I2S(gv_aaK.getInt(lv_aPf)) +
        "|r gold, and " +
        gv_aaZ +
        I2S(gv_aaJ.getInt(lv_aPf)) +
        "|r Honor to upgrade next skill to this level."
    );
  } else {
    if (
      GetPlayerState(GetOwningPlayer(lv_aPe), PLAYER_STATE_RESOURCE_GOLD) <
        gv_aaK.getInt(lv_aPf) ||
      GetPlayerState(GetOwningPlayer(lv_aPe), PLAYER_STATE_RESOURCE_LUMBER) <
        gv_aaJ.getInt(lv_aPf)
    ) {
      DisplayTimedTextToPlayer(
        GetOwningPlayer(lv_aPe),
        0,
        0,
        10,
        S2S("Requires level " + gv_aba) +
          I2S(lv_aPk) +
          "|r, " +
          gv_abb +
          I2S(gv_aaK.getInt(lv_aPf)) +
          "|r gold, and " +
          gv_aaZ +
          I2S(gv_aaJ.getInt(lv_aPf)) +
          "|r Honor to upgrade next skill to this level."
      );
    } else {
      if (lv_aPg != 1) {
        DisplayTimedTextToPlayer(
          GetOwningPlayer(lv_aPe),
          0,
          0,
          10,
          S2S("You lack a level " + I2S(lv_aPi)) + " skill to upgrade."
        );
      } else {
        DialogClear(gv_abA[lv_aPf]);
        DialogSetMessageBJ(
          gv_abA[lv_aPf],
          S2S("Choose ability to upgrade. Cost " + gv_abb) +
            I2S(gv_aaK.getInt(lv_aPf)) +
            "|r G, " +
            gv_aaZ +
            I2S(gv_aaJ.getInt(lv_aPf)) +
            "|r Honor"
        );
        lv_aPj = 1;
        do {
          if (lv_aPj > 5) {
            break;
          }
          if (gv_alx.getInt(lv_aPf * 5 + 199 + lv_aPj) == lv_aPi) {
            gv_abB[lv_aPf * 6 + lv_aPj] = DialogAddButton(
              gv_abA[lv_aPf],
              S2S(I2S(lv_aPj) + "-") +
                BlzGetAbilityTooltip(
                  gv_ama.getInt(
                    LoadInteger(
                      gv_abT,
                      gv_acO,
                      StringHash(GetUnitName(lv_aPe))
                    ) +
                      lv_aPj -
                      1
                  ),
                  lv_aPi
                ),
              48 + lv_aPj
            );
          }
          lv_aPj = lv_aPj + 1;
        } while (true);
        gv_abC[lv_aPf] = DialogAddButton(gv_abA[lv_aPf], "Cancel", 67);
        DialogDisplay(GetTriggerPlayer(), gv_abA[lv_aPf], true);
      }
    }
  }
  lv_aPe = null;
}
function f_aPl() {
  var lv_aPm = 1;
  var lv_aPn = GetPlayerId(GetTriggerPlayer());
  var lv_aPo;
  if (GetClickedButton() == gv_abC[lv_aPn]) {
    return;
  }
  do {
    if (lv_aPm > 5) {
      break;
    }
    if (GetClickedButton() == gv_abB[lv_aPn * 6 + lv_aPm]) {
      IncUnitAbilityLevel(
        gv_alv[lv_aPn],
        gv_ama.getInt(
          LoadInteger(gv_abT, gv_acO, StringHash(GetUnitName(gv_alv[lv_aPn]))) +
            lv_aPm -
            1
        )
      );
      DisplayTimedTextToPlayer(
        GetTriggerPlayer(),
        0,
        0,
        20,
        "Successfully upgraded " +
          BlzGetAbilityTooltip(
            gv_ama.getInt(
              LoadInteger(
                gv_abT,
                gv_acO,
                StringHash(GetUnitName(gv_alv[lv_aPn]))
              ) +
                lv_aPm -
                1
            ),
            gv_alx.getInt(lv_aPn * 5 + 199 + lv_aPm)
          )
      );
      gv_alx[lv_aPn * 5 + 199 + lv_aPm] =
        gv_alx.getInt(lv_aPn * 5 + 199 + lv_aPm) + 1;
      AdjustPlayerStateBJ(
        -gv_aaK.getInt(lv_aPn),
        Player(lv_aPn),
        PLAYER_STATE_RESOURCE_GOLD
      );
      AdjustPlayerStateBJ(
        -gv_aaJ.getInt(lv_aPn),
        Player(lv_aPn),
        PLAYER_STATE_RESOURCE_LUMBER
      );
    }
    lv_aPm = lv_aPm + 1;
  } while (true);
}
function f_aPp() {
  var lv_aPq = GetManipulatingUnit();
  var lv_aPr = GetPlayerId(GetOwningPlayer(lv_aPq));
  var lv_aPs = GetItemTypeId(GetManipulatedItem());
  var lv_aPt = true;
  var lv_aPu = LoadInteger(
    gv_abT,
    gv_acO,
    StringHash(S2S(I2S(lv_aPs) + "Req"))
  );
  var lv_aPv = 0;
  if (lv_aPs == "I06J") {
    f_aOV(lv_aPr);
    lv_aPq = null;
    return;
  }
  if (
    GetHeroLevel(gv_alv[lv_aPr]) >=
    LoadInteger(gv_abT, gv_acO, StringHash(S2S(I2S(lv_aPs) + "Level")))
  ) {
    do {
      if (lv_aPv > 4) {
        break;
      }
      if (gv_alx.getInt(lv_aPr * 5 + 200 + lv_aPv) == lv_aPu) {
        lv_aPt = false;
      }
      lv_aPv = lv_aPv + 1;
      if (!lv_aPt) {
        break;
      }
    } while (true);
    if (IsUnitInGroup(gv_alv[lv_aPr], gv_acP)) {
      f_aOH(Player(lv_aPr), GetManipulatedItem(), 1);
    } else {
      if (lv_aPt) {
        f_aOH(Player(lv_aPr), GetManipulatedItem(), 2);
      } else {
        GroupAddUnit(gv_acP, gv_alv[lv_aPr]);
        gv_alv[24 + lv_aPr] = CreateUnit(
          Player(lv_aPr),
          "ewsp",
          GetUnitX(gv_alv[lv_aPr]),
          GetUnitY(gv_alv[lv_aPr]),
          0.0
        );
        UnitRemoveAbility(gv_alv[24 + lv_aPr], "Aatk");
        UnitRemoveAbility(gv_alv[24 + lv_aPr], "Amov");
        f_aOL(gv_alv[24 + lv_aPr], lv_aPr, lv_aPu);
        SetUnitVertexColor(gv_alv[24 + lv_aPr], 255, 255, 255, 150);
        SelectUnitForPlayerSingle(gv_alv[24 + lv_aPr], Player(lv_aPr));
      }
    }
  } else {
    f_aOH(Player(lv_aPr), GetManipulatedItem(), 0);
  }
  lv_aPq = null;
}
function f_aPw() {
  return (
    GetSpellAbilityId() == "A054" ||
    GetSpellAbilityId() == "A05X" ||
    GetSpellAbilityId() == "A05Y" ||
    GetSpellAbilityId() == "A05Z" ||
    GetSpellAbilityId() == "A060"
  );
}
function f_aPx() {
  var lv_aPy = GetTriggerUnit();
  var lv_aPz = GetPlayerId(GetOwningPlayer(lv_aPy));
  SetUnitAnimation(lv_aPy, "spell");
  SelectUnitForPlayerSingle(gv_alv[lv_aPz], Player(lv_aPz));
  if (GetSpellAbilityId() == "A054") {
    f_aOQ(gv_alv[lv_aPz], 1, lv_aPz);
  } else {
    if (GetSpellAbilityId() == "A05X") {
      f_aOQ(gv_alv[lv_aPz], 2, lv_aPz);
    } else {
      if (GetSpellAbilityId() == "A05Y") {
        f_aOQ(gv_alv[lv_aPz], 3, lv_aPz);
      } else {
        if (GetSpellAbilityId() == "A05Z") {
          f_aOQ(gv_alv[lv_aPz], 4, lv_aPz);
        } else {
          if (GetSpellAbilityId() == "A060") {
            f_aOQ(gv_alv[lv_aPz], 5, lv_aPz);
          }
        }
      }
    }
  }
  GroupRemoveUnit(gv_acP, gv_alv[lv_aPz]);
  RemoveUnit(lv_aPy);
  gv_alv[lv_aPz + 24] = null;
  lv_aPy = null;
}
function f_aPA() {
  gv_acO = f_aDd();
  SaveInteger(gv_abT, gv_acO, StringHash(S2S(I2S("lmbr") + "Gold")), 7000);
  SaveInteger(gv_abT, gv_acO, StringHash(S2S(I2S("lmbr") + "Lumber")), 0);
  SaveInteger(gv_abT, gv_acO, StringHash(S2S(I2S("lmbr") + "Level")), 30);
  SaveInteger(gv_abT, gv_acO, StringHash(S2S(I2S("lmbr") + "Req")), 1);
  SaveInteger(gv_abT, gv_acO, StringHash(S2S(I2S("gfor") + "Gold")), 40000);
  SaveInteger(gv_abT, gv_acO, StringHash(S2S(I2S("gfor") + "Lumber")), 0);
  SaveInteger(gv_abT, gv_acO, StringHash(S2S(I2S("gfor") + "Level")), 60);
  SaveInteger(gv_abT, gv_acO, StringHash(S2S(I2S("gfor") + "Req")), 2);
  SaveInteger(gv_abT, gv_acO, StringHash(S2S(I2S("gomn") + "Gold")), 80000);
  SaveInteger(gv_abT, gv_acO, StringHash(S2S(I2S("gomn") + "Lumber")), 7);
  SaveInteger(gv_abT, gv_acO, StringHash(S2S(I2S("gomn") + "Level")), 90);
  SaveInteger(gv_abT, gv_acO, StringHash(S2S(I2S("gomn") + "Req")), 3);
  SaveInteger(gv_abT, gv_acO, StringHash(S2S(I2S("guvi") + "Gold")), 160000);
  SaveInteger(gv_abT, gv_acO, StringHash(S2S(I2S("guvi") + "Lumber")), 20);
  SaveInteger(gv_abT, gv_acO, StringHash(S2S(I2S("guvi") + "Level")), 120);
  SaveInteger(gv_abT, gv_acO, StringHash(S2S(I2S("guvi") + "Req")), 4);
  SaveInteger(gv_abT, gv_acO, StringHash(S2S(I2S("rdis") + "Gold")), 300000);
  SaveInteger(gv_abT, gv_acO, StringHash(S2S(I2S("rdis") + "Lumber")), 50);
  SaveInteger(gv_abT, gv_acO, StringHash(S2S(I2S("rdis") + "Level")), 150);
  SaveInteger(gv_abT, gv_acO, StringHash(S2S(I2S("rdis") + "Req")), 5);
  SaveInteger(gv_abT, gv_acO, StringHash("|c10000000|rPyromancer"), 735);
  SaveInteger(gv_abT, gv_acO, StringHash("|c20000000|rHydromancer"), 715);
  SaveInteger(gv_abT, gv_acO, StringHash("|c30000000|rBokor"), 725);
  SaveInteger(gv_abT, gv_acO, StringHash("|c40000000|rDryad"), 710);
  SaveInteger(gv_abT, gv_acO, StringHash("|c50000000|rPriestess"), 730);
  SaveInteger(gv_abT, gv_acO, StringHash("|c60000000|rJavelineer"), 720);
  SaveInteger(gv_abT, gv_acO, StringHash("|c70000000|rArcane Ranger"), 700);
  SaveInteger(gv_abT, gv_acO, StringHash("|cB0000000|rTemple Guardian"), 750);
  SaveInteger(gv_abT, gv_acO, StringHash("|cC0000000|rSpartan Warrior"), 740);
  SaveInteger(gv_abT, gv_acO, StringHash("|cD0000000|rAmazon"), 755);
  SaveInteger(gv_abT, gv_acO, StringHash("|cE0000000|rAssassin"), 705);
  SaveInteger(gv_abT, gv_acO, StringHash("|cF0000000|rSpell Blade"), 745);
}
function f_aPB() {
  gv_aiq = CreateTrigger();
  TriggerRegisterAnyUnitEventBJ(gv_aiq, EVENT_PLAYER_UNIT_PICKUP_ITEM);
  TriggerAddAction(gv_aiq, f_aPd);
  TriggerAddCondition(gv_aiq, Condition(f_aPb));
  gv_aiq = CreateTrigger();
  TriggerRegisterAnyUnitEventBJ(gv_aiq, EVENT_PLAYER_UNIT_SPELL_EFFECT);
  TriggerAddAction(gv_aiq, f_aPx);
  TriggerAddCondition(gv_aiq, Condition(f_aPw));
  ExecuteFunc("f_aPA");
  f_aMb("A054");
  f_aMb("A05X");
  f_aMb("A05Y");
  f_aMb("A05Z");
  f_aMb("A060");
}
function f_aPC() {
  var lv_aPD;
  var lv_aPE = null;
  var lv_aPF = LoadInteger(gv_abY, 0, GetHandleId(GetExpiredTimer()));
  var gv_aaj = 350 * gv_aam[lv_aPF];
  if (GetWidgetLife(gv_alv[lv_aPF]) > 0.405) {
    lv_aPD = f_aIL();
    gv_acy = GetUnitX(gv_alv[lv_aPF]);
    gv_acz = GetUnitY(gv_alv[lv_aPF]);
    gv_acA = 256 * gv_aan[lv_aPF];
    gv_acx = GetOwningPlayer(gv_alv[lv_aPF]);
    GroupEnumUnitsInRange(lv_aPD, gv_acy, gv_acz, 400, Condition(f_aMk));
    do {
      lv_aPE = FirstOfGroup(lv_aPD);
      if (lv_aPE == null) {
        break;
      }
      f_aLX(
        AddSpecialEffectTarget(
          "Abilities\\Spells\\Items\\HealingSalve\\HealingSalveTarget.mdl",
          lv_aPE,
          "head"
        ),
        0.5
      );
      UnitDamageTarget(
        f_aJt(GetOwningPlayer(gv_alv[lv_aPF]), gv_acy, gv_acz, 1),
        lv_aPE,
        gv_aaj,
        false,
        false,
        ATTACK_TYPE_NORMAL,
        DAMAGE_TYPE_UNIVERSAL,
        null
      );
      GroupRemoveUnit(lv_aPD, lv_aPE);
    } while (true);
    f_aIM(lv_aPD);
  }
  if (UnitHasItemOfTypeBJ(gv_alv[lv_aPF], "I066") == false) {
    GroupRemoveUnit(gv_alD[8], gv_alv[lv_aPF]);
    PauseTimer(gv_alz[lv_aPF + 8]);
  }
  lv_aPD = null;
}
function f_aPG(lv_aPH) {
  var lv_aPI = GetPlayerId(GetOwningPlayer(lv_aPH));
  if (!IsUnitInGroup(lv_aPH, gv_alD[8]) && GetHeroLevel(lv_aPH) > 129) {
    GroupAddUnit(gv_alD[8], lv_aPH);
    SaveInteger(gv_abY, 0, GetHandleId(gv_alz[lv_aPI + 8]), lv_aPI);
    TimerStart(gv_alz[lv_aPI + 8], 1, true, f_aPC);
  }
}
function f_aPJ(lv_aPK) {
  var lv_aPL = GetPlayerId(GetOwningPlayer(lv_aPK));
  if (IsUnitInGroup(lv_aPK, gv_alD[8]) && GetHeroLevel(lv_aPK) > 129) {
    GroupRemoveUnit(gv_alD[8], lv_aPK);
    PauseTimer(gv_alz[lv_aPL + 8]);
  }
}
function f_aPM() {
  var lv_aPN = Player(PLAYER_NEUTRAL_PASSIVE);
  var lv_aPO;
  var lv_aPP;
  var lv_aPQ;
  var lv_aPR;
  lv_aPO = CreateUnit(lv_aPN, "n002", -10400, -1888, 270);
  gv_akl = CreateUnit(lv_aPN, "nnsg", 10752, 13760, 270);
  lv_aPO = CreateUnit(lv_aPN, "n002", -9248, -224, 270);
  lv_aPO = CreateUnit(lv_aPN, "n002", -8672, -1248, 270);
}
function f_aPS() {
  var lv_aPT = Player(PLAYER_NEUTRAL_PASSIVE);
  var lv_aPU;
  var lv_aPV;
  var lv_aPW;
  var lv_aPX;
  lv_aPU = CreateUnit(lv_aPT, "Oshd", -14685.1, -14793.7, 343.02);
  SetUnitState(lv_aPU, UNIT_STATE_MANA, 0);
  lv_aPU = CreateUnit(lv_aPT, "nech", 2532.9, 1738.7, 16.92);
  lv_aPU = CreateUnit(lv_aPT, "nfh0", -10880, -3136, 347.568);
  lv_aPU = CreateUnit(lv_aPT, "nshe", 1284.6, 3901.4, 58.273);
  lv_aPU = CreateUnit(lv_aPT, "nshe", 1170.8, 3855.2, 8.679);
  lv_aPU = CreateUnit(lv_aPT, "nshe", 1054.1, 4066.9, 190.344);
  lv_aPU = CreateUnit(lv_aPT, "nshe", 1133, 4276.5, 102.198);
  lv_aPU = CreateUnit(lv_aPT, "nshe", 963.5, 4020.1, 22.775);
  lv_aPU = CreateUnit(lv_aPT, "nshe", 933.4, 4261.6, 217.646);
  lv_aPU = CreateUnit(lv_aPT, "nshe", 895, 3939.2, 0.439);
  lv_aPU = CreateUnit(lv_aPT, "nshe", 1021.1, 3786.4, 249.375);
  lv_aPU = CreateUnit(lv_aPT, "nshe", 1354.8, 4125.2, 3.933);
  lv_aPU = CreateUnit(lv_aPT, "nshe", 1152, 4239.5, 179.171);
  lv_aPU = CreateUnit(lv_aPT, "nshe", 1292.2, 3766, 350.255);
  lv_aPU = CreateUnit(lv_aPT, "nshe", 1166, 4090.7, 330.808);
  lv_aPU = CreateUnit(lv_aPT, "nshe", 942.7, 4142.7, 338.137);
  lv_aPU = CreateUnit(lv_aPT, "nech", 2428.8, 1699.8, 238.64);
  lv_aPU = CreateUnit(lv_aPT, "nech", 2513.5, 1657.7, 116.59);
  lv_aPU = CreateUnit(lv_aPT, "Edem", -13858.9, -14673.9, 206.083);
  SetUnitState(lv_aPU, UNIT_STATE_MANA, 0);
  lv_aPU = CreateUnit(lv_aPT, "Udea", -14282.3, -14474.6, 270.45);
  SetUnitState(lv_aPU, UNIT_STATE_MANA, 0);
  lv_aPU = CreateUnit(lv_aPT, "Ulic", -14110.4, -15427.8, 107.069);
  SetUnitState(lv_aPU, UNIT_STATE_MANA, 0);
  lv_aPU = CreateUnit(lv_aPT, "Hblm", -14390.7, -15399.4, 66.36);
  SetUnitState(lv_aPU, UNIT_STATE_MANA, 0);
  lv_aPU = CreateUnit(lv_aPT, "hdhw", 10983.1, 7591.1, 281.4);
  lv_aPU = CreateUnit(lv_aPT, "nech", 15184.8, 15224.5, 346.541);
  lv_aPU = CreateUnit(lv_aPT, "Hpal", -14536.5, -14582.6, 299.97);
  SetUnitState(lv_aPU, UNIT_STATE_MANA, 0);
  lv_aPU = CreateUnit(lv_aPT, "Ekee", -14711.6, -15029.1, 11.949);
  SetUnitState(lv_aPU, UNIT_STATE_MANA, 0);
  lv_aPU = CreateUnit(lv_aPT, "Emoo", -13750.3, -14901.5, 181.06);
  SetUnitState(lv_aPU, UNIT_STATE_MANA, 0);
  lv_aPU = CreateUnit(lv_aPT, "ncrb", 15306.8, 15258.4, 293.366);
  lv_aPU = CreateUnit(lv_aPT, "Hamg", -14602.4, -15241.8, 43.544);
  SetUnitState(lv_aPU, UNIT_STATE_MANA, 0);
  lv_aPU = CreateUnit(lv_aPT, "Udre", -13765.7, -15118.1, 160.292);
  SetUnitState(lv_aPU, UNIT_STATE_MANA, 0);
  lv_aPU = CreateUnit(lv_aPT, "ndwm", 15464.9, 15202.4, 309.384);
  lv_aPU = CreateUnit(lv_aPT, "nfbr", 15335.8, 15116.9, 29.192);
  lv_aPU = CreateUnit(lv_aPT, "Hjai", -14035.8, -14549.6, 237.71);
  lv_aPU = CreateUnit(lv_aPT, "nshe", 10120, 9763, 0.626);
  lv_aPU = CreateUnit(lv_aPT, "nshe", 10103.1, 9651.4, 238.784);
  gv_akh = CreateUnit(lv_aPT, "hkni", -11946.8, -8857.3, 46.16);
  lv_aPU = CreateUnit(lv_aPT, "nshe", 10202.8, 9674.3, 289.543);
  lv_aPU = CreateUnit(lv_aPT, "nshe", 10170.2, 9836.5, 29.565);
  lv_aPU = CreateUnit(lv_aPT, "nshe", 10074.8, 9829.1, 43.738);
  lv_aPU = CreateUnit(lv_aPT, "nfro", 15206.6, 15098, 43.617);
  lv_aPU = CreateUnit(lv_aPT, "nhmc", 15111.8, 15142.8, 93.442);
  lv_aPU = CreateUnit(lv_aPT, "ndog", 9276.9, 9702, 69.414);
  lv_aPU = CreateUnit(lv_aPT, "ndog", 6512.4, 7942.5, 23.16);
  lv_aPU = CreateUnit(lv_aPT, "nrac", 8351.1, 7191.1, 235.411);
  lv_aPU = CreateUnit(lv_aPT, "nrac", 9289.5, 12035.2, 205.747);
  lv_aPU = CreateUnit(lv_aPT, "nrac", 5066.5, 8444.5, 259.604);
  lv_aPU = CreateUnit(lv_aPT, "npng", 15217.9, 15057.5, 124.006);
  lv_aPU = CreateUnit(lv_aPT, "npig", 15339.4, 14969.4, 105.329);
  lv_aPU = CreateUnit(lv_aPT, "nsea", 15454.4, 15026.9, 128.434);
  lv_aPU = CreateUnit(lv_aPT, "nrat", 15197.6, 14943.4, 74.742);
  lv_aPU = CreateUnit(lv_aPT, "nrac", 15274.8, 14842, 316.746);
  lv_aPU = CreateUnit(lv_aPT, "nder", 15129.2, 14805.3, 296.673);
  lv_aPU = CreateUnit(lv_aPT, "nskk", 15095.2, 14962.9, 179.863);
  lv_aPU = CreateUnit(lv_aPT, "necr", 15043.2, 15042.8, 223.754);
  gv_ala = CreateUnit(lv_aPT, "ugho", 10525.9, 5676.1, 16.26);
  lv_aPU = CreateUnit(lv_aPT, "Hant", -13883.6, -15338.9, 134.02);
  SetUnitState(lv_aPU, UNIT_STATE_MANA, 0);
  gv_aki = CreateUnit(lv_aPT, "u007", 11083.6, 5476.8, 120.36);
}
function f_aPY() {
  var lv_aPZ;
  var lv_aQa;
  var lv_aQb;
  var lv_aQc;
  var lv_aQd;
  lv_aPZ = Player(8);
  gv_akj = CreateUnit(lv_aPZ, "hcas", 8384, 9152, 270);
  SetUnitColor(gv_akj, ConvertPlayerColor(0));
  lv_aQa = CreateUnit(lv_aPZ, "hmpr", 7680, 10112, 270);
  SetUnitColor(lv_aQa, ConvertPlayerColor(5));
  lv_aQa = CreateUnit(lv_aPZ, "hgtw", 6720, 11968, 270);
  lv_aQa = CreateUnit(lv_aPZ, "hgtw", 6400, 12224, 270);
  lv_aQa = CreateUnit(lv_aPZ, "hctw", 8384, 12032, 270);
  lv_aQa = CreateUnit(lv_aPZ, "hgtw", 8128, 12032, 270);
  lv_aQa = CreateUnit(lv_aPZ, "hgtw", 8384, 12288, 270);
  lv_aQa = CreateUnit(lv_aPZ, "hgtw", 5952, 11648, 270);
  lv_aQa = CreateUnit(lv_aPZ, "hgtw", 6528, 10688, 270);
  lv_aQa = CreateUnit(lv_aPZ, "hgtw", 8000, 11072, 270);
  lv_aQa = CreateUnit(lv_aPZ, "hgtw", 7168, 8448, 270);
  lv_aQa = CreateUnit(lv_aPZ, "hgtw", 5632, 9344, 270);
  lv_aQa = CreateUnit(lv_aPZ, "hgtw", 6144, 8832, 270);
  lv_aQa = CreateUnit(lv_aPZ, "hgtw", 5504, 10624, 270);
  gv_akf = CreateUnit(lv_aPZ, "oalt", 288, 12448, 270);
  lv_aQa = CreateUnit(lv_aPZ, "hctw", 6400, 11904, 270);
  lv_aQa = CreateUnit(lv_aPZ, "hatw", 8320, 9664, 270);
  lv_aQa = CreateUnit(lv_aPZ, "hgtw", 5504, 10112, 270);
  lv_aQa = CreateUnit(lv_aPZ, "hmpr", 3968, -960, 270);
  SetUnitColor(lv_aQa, ConvertPlayerColor(5));
  lv_aQa = CreateUnit(lv_aPZ, "hlum", -12800, -7360, 270);
  lv_aQa = CreateUnit(lv_aPZ, "nfoh", 3968, 10752, 270);
  lv_aQa = CreateUnit(lv_aPZ, "nfoh", 4608, -1216, 270);
  lv_aQa = CreateUnit(lv_aPZ, "hmpr", -10176, -6656, 270);
  SetUnitColor(lv_aQa, ConvertPlayerColor(5));
  lv_aQa = CreateUnit(lv_aPZ, "hmpr", 64, 3008, 270);
  SetUnitColor(lv_aQa, ConvertPlayerColor(5));
  lv_aQa = CreateUnit(lv_aPZ, "ogre", 12960, 11168, 270);
  lv_aPZ = Player(9);
  lv_aQa = CreateUnit(lv_aPZ, "nfnp", -10176, -7232, 270);
  lv_aQa = CreateUnit(lv_aPZ, "hgtw", -1216, 512, 270);
  lv_aQa = CreateUnit(lv_aPZ, "nfnp", 7808, 9728, 270);
  gv_akm = CreateUnit(lv_aPZ, "hgra", 10752, 8512, 180);
  SetUnitColor(gv_akm, ConvertPlayerColor(0));
  lv_aQa = CreateUnit(lv_aPZ, "hgtw", -320, 512, 270);
  lv_aQa = CreateUnit(lv_aPZ, "hgtw", -1536, 3456, 270);
  lv_aQa = CreateUnit(lv_aPZ, "nfnp", 192, 2688, 270);
  lv_aQa = CreateUnit(lv_aPZ, "hgtw", -2368, 1600, 270);
  lv_aQa = CreateUnit(lv_aPZ, "hgtw", -2368, 2432, 270);
  lv_aQa = CreateUnit(lv_aPZ, "hkee", 13792, 14688, 270);
  lv_aQa = CreateUnit(lv_aPZ, "hgtw", -10176, -6464, 270);
  lv_aQa = CreateUnit(lv_aPZ, "hgtw", -9536, -6976, 270);
  lv_aQa = CreateUnit(lv_aPZ, "hgtw", -10048, -7744, 270);
  lv_aQa = CreateUnit(lv_aPZ, "hgtw", -10048, -8896, 270);
  lv_aQa = CreateUnit(lv_aPZ, "htow", 14112, 14496, 193.86);
  lv_aQa = CreateUnit(lv_aPZ, "hgtw", -10816, -8896, 270);
  lv_aQa = CreateUnit(lv_aPZ, "hgtw", 4928, -1920, 270);
  lv_aQa = CreateUnit(lv_aPZ, "hgtw", 4416, -1728, 270);
  lv_aQa = CreateUnit(lv_aPZ, "hgtw", 3648, -1408, 270);
  lv_aQa = CreateUnit(lv_aPZ, "ostr", 14008.2, 14792.9, 175.553);
  lv_aQa = CreateUnit(lv_aPZ, "hgtw", 896, 2496, 270);
  lv_aQa = CreateUnit(lv_aPZ, "hgtw", 896, 1536, 270);
  lv_aQa = CreateUnit(lv_aPZ, "nft2", 9472, 6272, 270);
  lv_aQa = CreateUnit(lv_aPZ, "nft2", 9984, 5184, 270);
  lv_aPZ = Player(10);
  lv_aQa = CreateUnit(lv_aPZ, "ntt2", -1952, 12576, 270);
  lv_aQa = CreateUnit(lv_aPZ, "nct2", -1248, -11104, 270);
  lv_aQa = CreateUnit(lv_aPZ, "ntn2", 4384, 6816, 270);
  lv_aQa = CreateUnit(lv_aPZ, "ntn2", 4768, 7200, 270);
  lv_aQa = CreateUnit(lv_aPZ, "ntn2", 5344, 3936, 319.237);
  lv_aQa = CreateUnit(lv_aPZ, "ntn2", 6176, 3968, 142.948);
  lv_aQa = CreateUnit(lv_aPZ, "nct1", -9824, -12832, 270);
  lv_aQa = CreateUnit(lv_aPZ, "nct1", -2080, -11296, 270);
  lv_aQa = CreateUnit(lv_aPZ, "ncnt", -1696, -11488, 270);
  lv_aQa = CreateUnit(lv_aPZ, "ncnt", -9696, -13792, 270);
  lv_aQa = CreateUnit(lv_aPZ, "nct2", -9120, -13728, 270);
  lv_aQa = CreateUnit(lv_aPZ, "nct2", -10208, -13408, 270);
  lv_aQa = CreateUnit(lv_aPZ, "nct1", -10144, -12960, 270);
  lv_aQa = CreateUnit(lv_aPZ, "ncnt", -4256, -12192, 270);
  lv_aQa = CreateUnit(lv_aPZ, "nct1", -5024, -11936, 270);
  lv_aQa = CreateUnit(lv_aPZ, "nct2", -4192, -11872, 270);
  lv_aQa = CreateUnit(lv_aPZ, "ofrt", -448, 14528, 270);
  lv_aQa = CreateUnit(lv_aPZ, "ntn2", 7744, 6400, 215.91);
  lv_aQa = CreateUnit(lv_aPZ, "ntnt", -7008, 14176, 270);
  lv_aQa = CreateUnit(lv_aPZ, "nhns", -8000, 6208, 270);
  lv_aQa = CreateUnit(lv_aPZ, "nhns", -8576, 8128, 270);
  lv_aQa = CreateUnit(lv_aPZ, "nhns", -6720, 6912, 270);
  lv_aQa = CreateUnit(lv_aPZ, "nhns", -6528, 8960, 270);
  lv_aQa = CreateUnit(lv_aPZ, "ntt2", -1376, 12256, 270);
  lv_aQa = CreateUnit(lv_aPZ, "ntnt", -6624, 14624, 270);
  lv_aQa = CreateUnit(lv_aPZ, "ntnt", -3744, 14560, 270);
  lv_aQa = CreateUnit(lv_aPZ, "ntt2", -3296, 14688, 270);
  lv_aQa = CreateUnit(lv_aPZ, "ntn2", 5856, 3552, 61.743);
  lv_aQa = CreateUnit(lv_aPZ, "ntn2", 7712, 5664, 270);
  lv_aQa = CreateUnit(lv_aPZ, "nmg1", 5280, -3424, 270);
  lv_aQa = CreateUnit(lv_aPZ, "nmg0", 4768, -3808, 270);
  lv_aQa = CreateUnit(lv_aPZ, "nmg0", 4896, -3040, 270);
  lv_aQa = CreateUnit(lv_aPZ, "nmg1", 4384, -3360, 270);
  lv_aQa = CreateUnit(lv_aPZ, "nmg1", 5536, -6560, 270);
  lv_aQa = CreateUnit(lv_aPZ, "nmg0", 5792, -5920, 270);
  lv_aQa = CreateUnit(lv_aPZ, "nmg1", 5280, -5984, 270);
  lv_aQa = CreateUnit(lv_aPZ, "nmg1", 5664, -4384, 270);
  lv_aQa = CreateUnit(lv_aPZ, "nmg0", 5408, -4256, 270);
  lv_aQa = CreateUnit(lv_aPZ, "nmg0", 5664, -3872, 270);
  lv_aQa = CreateUnit(lv_aPZ, "nmg0", 2336, -4128, 270);
  lv_aQa = CreateUnit(lv_aPZ, "nmg1", 2848, -4064, 270);
  lv_aQa = CreateUnit(lv_aPZ, "nmg1", 2656, -4320, 270);
  lv_aPZ = Player(11);
  lv_aQa = CreateUnit(lv_aPZ, "u000", -10496, -448, 270);
}
function f_aQe() {
  var lv_aQf;
  var lv_aQg;
  var lv_aQh;
  var lv_aQi;
  var lv_aQj;
  lv_aQf = Player(8);
  lv_aQg = CreateUnit(lv_aQf, "harm", 6090.5, 8200.9, 270);
  SetUnitColor(lv_aQg, ConvertPlayerColor(0));
  lv_aQg = CreateUnit(lv_aQf, "hars", 8813.5, 7744.5, 172.03);
  SetUnitColor(lv_aQg, ConvertPlayerColor(0));
  lv_aQg = CreateUnit(lv_aQf, "hbla", 8786.3, 11183.9, 231.88);
  SetUnitColor(lv_aQg, ConvertPlayerColor(0));
  lv_aQg = CreateUnit(lv_aQf, "hvlt", 7616, 11008, 140.87);
  SetUnitColor(lv_aQg, ConvertPlayerColor(8));
  lv_aQg = CreateUnit(lv_aQf, "hbar", -516.8, 2440.2, 318.63);
  SetUnitColor(lv_aQg, ConvertPlayerColor(8));
  lv_aQg = CreateUnit(lv_aQf, "hhou", 5984, 9120, 41.23);
  SetUnitColor(lv_aQg, ConvertPlayerColor(8));
  lv_aQg = CreateUnit(lv_aQf, "hbar", 5946.7, 10355, 286.64);
  SetUnitColor(lv_aQg, ConvertPlayerColor(8));
  gv_ale = CreateUnit(lv_aQf, "Hvwd", 7433.2, 12090.5, 94.91);
  SetHeroLevel(gv_ale, 140, false);
  UnitAddItemToSlotById(gv_ale, "dphe", 0);
  UnitAddItemToSlotById(gv_ale, "fwss", 1);
  UnitAddItemToSlotById(gv_ale, "jpnt", 2);
  UnitAddItemToSlotById(gv_ale, "I00K", 3);
  lv_aQg = CreateUnit(lv_aQf, "hcth", 3648.8, 11297.2, 90.856);
  SetUnitAcquireRange(lv_aQg, 200);
  lv_aQg = CreateUnit(lv_aQf, "hrif", 194.8, 12015.8, 252.816);
  lv_aQg = CreateUnit(lv_aQf, "hcth", 3491.9, 11043.2, 151.688);
  SetUnitAcquireRange(lv_aQg, 200);
  lv_aQg = CreateUnit(lv_aQf, "hcth", 4020.9, 11141.3, 356.387);
  SetUnitAcquireRange(lv_aQg, 200);
  lv_aQg = CreateUnit(lv_aQf, "hcth", 3634.1, 10734.1, 260.563);
  SetUnitAcquireRange(lv_aQg, 200);
  lv_aQg = CreateUnit(lv_aQf, "hmtt", 6929, 9033.3, 210.38);
  lv_aQg = CreateUnit(lv_aQf, "hmtt", 8724.6, 10519.4, 111.6);
  lv_aQg = CreateUnit(lv_aQf, "hmtt", 6312, 11433.2, 350.29);
  lv_aQg = CreateUnit(lv_aQf, "hgry", 6064.8, 9676, 106.57);
  lv_aQg = CreateUnit(lv_aQf, "hgry", 7308.7, 11033, 126.53);
  lv_aQg = CreateUnit(lv_aQf, "hgyr", 6639.6, 8597.5, 60.22);
  lv_aQg = CreateUnit(lv_aQf, "hgyr", 8401.4, 11010.1, 260.92);
  lv_aQg = CreateUnit(lv_aQf, "earc", 3297.6, 10801.6, 333.74);
  lv_aQg = CreateUnit(lv_aQf, "hgyr", -774.9, 2135.9, 356.26);
  lv_aQg = CreateUnit(lv_aQf, "hgry", -259.8, 971.5, 105.31);
  lv_aQg = CreateUnit(lv_aQf, "hgry", -319.2, 3029, 201.8);
  lv_aQg = CreateUnit(lv_aQf, "hmtt", -1811.5, 2101.8, 324.04);
  lv_aQg = CreateUnit(lv_aQf, "hmtt", -10780.9, -8244.5, 47.45);
  lv_aQg = CreateUnit(lv_aQf, "hmtt", -11778.6, -6676.7, 250.12);
  lv_aQg = CreateUnit(lv_aQf, "hgyr", -12489.2, -7942.2, 308.1);
  lv_aQg = CreateUnit(lv_aQf, "hgyr", -9705.3, -7827.2, 56.71);
  lv_aQg = CreateUnit(lv_aQf, "hgyr", -10378.8, -6787.9, 164.29);
  lv_aQg = CreateUnit(lv_aQf, "hgry", -10441.4, -7713.8, 272.93);
  lv_aQg = CreateUnit(lv_aQf, "hgry", 9720.2, 8030.4, 126.53);
  lv_aQg = CreateUnit(lv_aQf, "hgyr", 9054.3, 8711.2, 260.92);
  lv_aQf = Player(9);
  gv_akk = CreateUnit(lv_aQf, "eden", 2304, 8000, 336.708);
  lv_aQg = CreateUnit(lv_aQf, "ofor", -224, 3264, 276.96);
  SetUnitColor(lv_aQg, ConvertPlayerColor(1));
  gv_akt = CreateUnit(lv_aQf, "Ewar", 11041.3, 6050.7, 220.16);
  lv_aQg = CreateUnit(lv_aQf, "obar", 160, 1440, 312.22);
  SetUnitColor(lv_aQg, ConvertPlayerColor(1));
  gv_akB = CreateUnit(lv_aQf, "Harf", 8052.5, 9442.8, 125);
  SetHeroLevel(gv_akB, 100, false);
  SelectHeroSkill(gv_akB, "AHhb");
  SelectHeroSkill(gv_akB, "AHhb");
  SelectHeroSkill(gv_akB, "AHhb");
  SelectHeroSkill(gv_akB, "AHtc");
  SelectHeroSkill(gv_akB, "AHtc");
  SelectHeroSkill(gv_akB, "AHtc");
  SelectHeroSkill(gv_akB, "ANdb");
  SelectHeroSkill(gv_akB, "ANdb");
  SelectHeroSkill(gv_akB, "ANdb");
  SelectHeroSkill(gv_akB, "AHad");
  SelectHeroSkill(gv_akB, "AHad");
  SelectHeroSkill(gv_akB, "AHad");
  SelectHeroSkill(gv_akB, "AHbh");
  SelectHeroSkill(gv_akB, "AHbh");
  SelectHeroSkill(gv_akB, "AHbh");
  SelectHeroSkill(gv_akB, "Acdb");
  SelectHeroSkill(gv_akB, "Acdb");
  SelectHeroSkill(gv_akB, "Acdb");
  SelectHeroSkill(gv_akB, "Acdb");
  SelectHeroSkill(gv_akB, "AOs2");
  SelectHeroSkill(gv_akB, "AOs2");
  SelectHeroSkill(gv_akB, "AOs2");
  SelectHeroSkill(gv_akB, "AOs2");
  SelectHeroSkill(gv_akB, "AOcl");
  SelectHeroSkill(gv_akB, "AOcl");
  SelectHeroSkill(gv_akB, "AOcl");
  gv_akq = CreateUnit(lv_aQf, "n003", -10659.6, -3298.7, 277.88);
  gv_akP = CreateUnit(lv_aQf, "hmtm", 522.4, 3117.9, 209.74);
  gv_akR = CreateUnit(lv_aQf, "ncpn", 4354.6, -13174.1, 271.747);
  SetUnitColor(gv_akR, ConvertPlayerColor(9));
  gv_aks = CreateUnit(lv_aQf, "nmr5", 1408, 384, 234.187);
  SetUnitColor(gv_aks, ConvertPlayerColor(12));
  lv_aQg = CreateUnit(lv_aQf, "otrb", -9600, -8640, 208.29);
  lv_aQg = CreateUnit(lv_aQf, "owtw", -9248, 6496, 130.34);
  lv_aQg = CreateUnit(lv_aQf, "hvlt", -736, 1056, 293.92);
  SetUnitColor(lv_aQg, ConvertPlayerColor(8));
  lv_aQg = CreateUnit(lv_aQf, "otto", -11526.8, -7861.7, 320.8);
  SetUnitColor(lv_aQg, ConvertPlayerColor(5));
  lv_aQg = CreateUnit(lv_aQf, "osld", -10240.8, -8351.7, 242.82);
  SetUnitColor(lv_aQg, ConvertPlayerColor(5));
  lv_aQg = CreateUnit(lv_aQf, "ovln", -12614.4, -6674.4, 299.143);
  SetUnitColor(lv_aQg, ConvertPlayerColor(5));
  lv_aQg = CreateUnit(lv_aQf, "nech", -11489.1, -6477.4, 20.59);
  lv_aQg = CreateUnit(lv_aQf, "nech", 10241, 9575.5, 332.97);
  lv_aQg = CreateUnit(lv_aQf, "obea", -1760, 2976, 304.16);
  SetUnitColor(lv_aQg, ConvertPlayerColor(1));
  lv_aQg = CreateUnit(lv_aQf, "hvlt", 3685.8, -1105.6, 334.528);
  SetUnitColor(lv_aQg, ConvertPlayerColor(8));
  gv_akS = CreateUnit(lv_aQf, "opeo", 10273.5, 10680.6, 202.207);
  lv_aQg = CreateUnit(lv_aQf, "hvlt", -10880, -7264, 310.96);
  SetUnitColor(lv_aQg, ConvertPlayerColor(8));
  lv_aQg = CreateUnit(lv_aQf, "nech", 10275.8, 9981.9, 182.31);
  gv_akw = CreateUnit(lv_aQf, "unec", 7813.2, 9271.8, 277.92);
  SetUnitColor(gv_akw, ConvertPlayerColor(0));
  gv_aku = CreateUnit(lv_aQf, "hsor", 4286.9, -936.8, 266.224);
  lv_aQg = CreateUnit(lv_aQf, "edoc", 2470.1, 7823.8, 354.969);
  SetUnitColor(lv_aQg, ConvertPlayerColor(6));
  lv_aQg = CreateUnit(lv_aQf, "ogru", 10422.9, 8504.8, 176.86);
  SetUnitColor(lv_aQg, ConvertPlayerColor(0));
  lv_aQg = CreateUnit(lv_aQf, "nemi", 10751.3, 13563.5, 272.84);
  SetUnitColor(lv_aQg, ConvertPlayerColor(2));
  lv_aQg = CreateUnit(lv_aQf, "nwat", 1221.1, 318.2, 189.566);
  SetUnitColor(lv_aQg, ConvertPlayerColor(12));
  lv_aQg = CreateUnit(lv_aQf, "nech", -11595.6, -6400.7, 297.31);
  lv_aQg = CreateUnit(lv_aQf, "nech", -11653.1, -6431.9, 13.6);
  lv_aQg = CreateUnit(lv_aQf, "nech", -11589.4, -6493.3, 90.72);
  lv_aQg = CreateUnit(lv_aQf, "nech", -11599.2, -6308.6, 14.01);
  gv_akT = CreateUnit(lv_aQf, "orai", 211.7, 4359.7, 284.28);
  gv_akV = CreateUnit(lv_aQf, "otau", -87.7, 2464.1, 321.08);
  gv_akW = CreateUnit(lv_aQf, "ohun", -3784.8, 10435.6, 326.294);
  gv_akX = CreateUnit(lv_aQf, "ocat", -12708.3, 13949.5, 308.39);
  lv_aQg = CreateUnit(lv_aQf, "okod", -12342.6, 14147.5, 262.09);
  gv_akr = CreateUnit(lv_aQf, "hspt", 3751.3, 11071.9, 130.9);
  SetUnitState(gv_akr, UNIT_STATE_MANA, 0);
  SetUnitAcquireRange(gv_akr, 200);
  lv_aQg = CreateUnit(lv_aQf, "okod", -12745, 14196.4, 311.77);
  gv_akC = CreateUnit(lv_aQf, "owyv", -1142.9, 268.4, 325.334);
  SetUnitColor(gv_akC, ConvertPlayerColor(5));
  gv_akD = CreateUnit(lv_aQf, "otbr", -7761.9, -5582.5, 254.711);
  SetUnitColor(gv_akD, ConvertPlayerColor(6));
  gv_akQ = CreateUnit(lv_aQf, "odoc", -13147.9, -7351.4, 329.41);
  SetUnitColor(gv_akQ, ConvertPlayerColor(1));
  gv_akn = CreateUnit(lv_aQf, "esen", -9552.5, -7781.9, 129.722);
  SetUnitColor(gv_akn, ConvertPlayerColor(0));
  gv_akU = CreateUnit(lv_aQf, "ospw", 9067.8, -12396.3, 223.839);
  lv_aQg = CreateUnit(lv_aQf, "uaco", 11052.8, 6491.6, 217.159);
  lv_aQg = CreateUnit(lv_aQf, "hbar", -10632.7, -6465.3, 270.995);
  SetUnitColor(lv_aQg, ConvertPlayerColor(8));
  lv_aQf = Player(10);
  lv_aQg = CreateUnit(lv_aQf, "nhrq", -6639.9, 7143.6, 60.74);
  gv_akv = CreateUnit(lv_aQf, "nhrh", -8209.6, 10223.4, 297.96);
  lv_aQg = CreateUnit(lv_aQf, "ncks", -4571.6, -12156.2, 93.397);
  gv_alc = CreateUnit(lv_aQf, "nftk", -10192.1, 1709.9, 22.14);
  gv_akp = CreateUnit(lv_aQf, "nbld", 8375.5, 3677.7, 99.1);
  lv_aQg = CreateUnit(lv_aQf, "ncim", -9556.8, -13114.8, 79.896);
  lv_aQg = CreateUnit(lv_aQf, "ncer", -9910.4, -13167.6, 162.724);
  lv_aQg = CreateUnit(lv_aQf, "ncer", -9309.9, -12870.4, 75.923);
  lv_aQg = CreateUnit(lv_aQf, "ncks", -9568.4, -13440.9, 77.764);
  lv_aQg = CreateUnit(lv_aQf, "ncer", -4447.9, -11840.3, 52.511);
  lv_aQg = CreateUnit(lv_aQf, "ncer", -4795.2, -11895.1, 134.482);
  lv_aQg = CreateUnit(lv_aQf, "ncim", -9128.2, -13318, 352.443);
  lv_aQg = CreateUnit(lv_aQf, "ncim", -4595.6, -11885.2, 146.906);
  lv_aQg = CreateUnit(lv_aQf, "ncer", -1862.8, -11230, 172.491);
  lv_aQg = CreateUnit(lv_aQf, "ncer", -1506.3, -10919, 133.61);
  lv_aQg = CreateUnit(lv_aQf, "ncks", -1506.1, -11321, 127.961);
  lv_aQg = CreateUnit(lv_aQf, "ncim", -1743.7, -10981.9, 146.906);
  gv_akY = CreateUnit(lv_aQf, "ncnk", -5478.5, -13557, 266.01);
  lv_aQg = CreateUnit(lv_aQf, "nbda", -1604.9, 12266.8, 214.567);
  SetUnitState(lv_aQg, UNIT_STATE_MANA, 0);
  lv_aQg = CreateUnit(lv_aQf, "nhrq", -7773.2, 6313.6, 70.902);
  lv_aQg = CreateUnit(lv_aQf, "nbdo", -3710, 14290.8, 307.42);
  lv_aQg = CreateUnit(lv_aQf, "nbdo", -3410.7, 14290.8, 257.19);
  lv_aQg = CreateUnit(lv_aQf, "nbda", -3881.1, 14361.6, 325.78);
  lv_aQg = CreateUnit(lv_aQf, "nbda", -3515.5, 14490.7, 275.84);
  lv_aQg = CreateUnit(lv_aQf, "nbdo", -2161.5, 12414.4, 188.314);
  SetUnitState(lv_aQg, UNIT_STATE_MANA, 0);
  gv_alb = CreateUnit(lv_aQf, "nbdw", -653.4, 14283.2, 212.24);
  lv_aQg = CreateUnit(lv_aQf, "nbdo", -596.2, 14031.6, 188.314);
  SetUnitState(lv_aQg, UNIT_STATE_MANA, 0);
  lv_aQg = CreateUnit(lv_aQf, "nbdo", -849.2, 14117.6, 188.314);
  SetUnitState(lv_aQg, UNIT_STATE_MANA, 0);
  lv_aQg = CreateUnit(lv_aQf, "nbda", -293.8, 14190.9, 203.955);
  SetUnitState(lv_aQg, UNIT_STATE_MANA, 0);
  lv_aQg = CreateUnit(lv_aQf, "nbda", -861.1, 14580.3, 223.344);
  SetUnitState(lv_aQg, UNIT_STATE_MANA, 0);
  lv_aQg = CreateUnit(lv_aQf, "nbdo", -1976.8, 12162.4, 188.314);
  SetUnitState(lv_aQg, UNIT_STATE_MANA, 0);
  lv_aQg = CreateUnit(lv_aQf, "nbdo", -1925.1, 11912.1, 188.314);
  SetUnitState(lv_aQg, UNIT_STATE_MANA, 0);
  lv_aQg = CreateUnit(lv_aQf, "nbda", -1745.1, 12101.5, 171.62);
  SetUnitState(lv_aQg, UNIT_STATE_MANA, 0);
  lv_aQg = CreateUnit(lv_aQf, "nbda", -1819, 12288.2, 214.567);
  SetUnitState(lv_aQg, UNIT_STATE_MANA, 0);
  lv_aQg = CreateUnit(lv_aQf, "nbdo", -6362.2, 14192.2, 310.004);
  SetUnitState(lv_aQg, UNIT_STATE_MANA, 0);
  lv_aQg = CreateUnit(lv_aQf, "nbdo", -6522.6, 14033.6, 310.004);
  SetUnitState(lv_aQg, UNIT_STATE_MANA, 0);
  lv_aQg = CreateUnit(lv_aQf, "nbda", -6358, 14391.8, 299.603);
  SetUnitState(lv_aQg, UNIT_STATE_MANA, 0);
  lv_aQg = CreateUnit(lv_aQf, "nbdo", -954.7, 14344.6, 188.314);
  SetUnitState(lv_aQg, UNIT_STATE_MANA, 0);
  lv_aQg = CreateUnit(lv_aQf, "nbda", -6598.2, 14293.3, 299.603);
  SetUnitState(lv_aQg, UNIT_STATE_MANA, 0);
  lv_aQg = CreateUnit(lv_aQf, "nbda", -6727.6, 14066.1, 299.603);
  SetUnitState(lv_aQg, UNIT_STATE_MANA, 0);
  gv_akZ = CreateUnit(lv_aQf, "n004", 10315.6, -11520.8, 306.86);
  SetUnitColor(gv_akZ, ConvertPlayerColor(11));
  lv_aQg = CreateUnit(lv_aQf, "nhrq", -8354, 7946.7, 321.43);
  lv_aQg = CreateUnit(lv_aQf, "nhrq", -6357, 8696.7, 311.82);
  gv_akK = CreateUnit(lv_aQf, "ndqt", 3931, -14074, 28);
  SetUnitState(gv_akK, UNIT_STATE_MANA, 0);
  gv_akI = CreateUnit(lv_aQf, "nbzd", -11094.8, 7053, 42.7);
  gv_akg = CreateUnit(lv_aQf, "npfm", 9828.1, -2344.7, 306.136);
  SetUnitColor(gv_akg, ConvertPlayerColor(2));
  gv_ako = CreateUnit(lv_aQf, "nbdm", 13838.9, -3064.2, 275.55);
  lv_aQg = CreateUnit(lv_aQf, "ndrd", 14255.7, 6527.3, 245.12);
  lv_aQg = CreateUnit(lv_aQf, "nmrr", 2598, -3891.5, 297.308);
  lv_aQg = CreateUnit(lv_aQf, "nbda", -3214.7, 14440.8, 250.92);
  gv_akL = CreateUnit(lv_aQf, "narg", 4293.5, -14565.8, 44.275);
  gv_akH = CreateUnit(lv_aQf, "n00L", 3246.8, -14205.5, 18.45);
  gv_aky = CreateUnit(lv_aQf, "n00K", 3960.8, -13312.6, 345.32);
  gv_akN = CreateUnit(lv_aQf, "nanw", -5429.5, -13144.1, 303.22);
  gv_akO = CreateUnit(lv_aQf, "nowb", 8450.9, -13977.7, 268.155);
  gv_akJ = CreateUnit(lv_aQf, "nwns", 14007.5, -14345.8, 228.264);
  lv_aQg = CreateUnit(lv_aQf, "nmrr", 2497.6, -4210.6, 51.714);
  lv_aQg = CreateUnit(lv_aQf, "nmmu", 2266.5, -3917.7, 271.052);
  SetUnitState(lv_aQg, UNIT_STATE_MANA, 0);
  gv_akz = CreateUnit(lv_aQf, "nahy", 5890.2, -9701.1, 109.55);
  gv_ald = CreateUnit(lv_aQf, "nsqa", -11814, -1684, 236);
  gv_akA = CreateUnit(lv_aQf, "nwld", 10178.9, -7331.5, 314.607);
  SetUnitColor(gv_akA, ConvertPlayerColor(2));
  lv_aQg = CreateUnit(lv_aQf, "nban", 4615, 6759.2, 335.296);
  lv_aQg = CreateUnit(lv_aQf, "nban", 4871.9, 6973.2, 295.114);
  lv_aQg = CreateUnit(lv_aQf, "nass", 4658.8, 6985.1, 309.451);
  lv_aQg = CreateUnit(lv_aQf, "nass", 7848.6, 5992.7, 163.455);
  lv_aQg = CreateUnit(lv_aQf, "nban", 7690.2, 6148.6, 174.192);
  lv_aQg = CreateUnit(lv_aQf, "nban", 7672.5, 5881.6, 149.058);
  lv_aQg = CreateUnit(lv_aQf, "nban", 7440.8, 5849.5, 130.904);
  lv_aQg = CreateUnit(lv_aQf, "nban", 5564.7, 4052.6, 61.909);
  lv_aQg = CreateUnit(lv_aQf, "nban", 5911.7, 4083.7, 151.891);
  lv_aQg = CreateUnit(lv_aQf, "nass", 5969.2, 3769.4, 124.859);
  lv_aQg = CreateUnit(lv_aQf, "nass", 5653.3, 3731.4, 89.843);
  lv_aQg = CreateUnit(lv_aQf, "nmrr", 5537.2, -3354.9, 33.743);
  lv_aQg = CreateUnit(lv_aQf, "nmrr", 4982.3, -3344.7, 48.023);
  lv_aQg = CreateUnit(lv_aQf, "nmrr", 4948.7, -3582.9, 228.58);
  lv_aQg = CreateUnit(lv_aQf, "nmrm", 5364.7, -3798, 141.918);
  SetUnitState(lv_aQg, UNIT_STATE_MANA, 0);
  lv_aQg = CreateUnit(lv_aQf, "nmmu", 4647.1, -3166, 127.464);
  SetUnitState(lv_aQg, UNIT_STATE_MANA, 0);
  lv_aQg = CreateUnit(lv_aQf, "nmmu", 5025.3, -4022.4, 271.052);
  SetUnitState(lv_aQg, UNIT_STATE_MANA, 0);
  lv_aQg = CreateUnit(lv_aQf, "nmmu", 5540.1, -6215.3, 143.472);
  SetUnitState(lv_aQg, UNIT_STATE_MANA, 0);
  lv_aQg = CreateUnit(lv_aQf, "nmrm", 5797.1, -6303.4, 129.814);
  SetUnitState(lv_aQg, UNIT_STATE_MANA, 0);
  lv_aQg = CreateUnit(lv_aQf, "nmrr", 5527.6, -5911.2, 103.58);
  lv_aQg = CreateUnit(lv_aQf, "nmrr", 5241, -6333.6, 222.127);
  lv_aQg = CreateUnit(lv_aQf, "nmrr", 5254.8, -3988.6, 237.411);
  lv_aQg = CreateUnit(lv_aQf, "nmrr", 4462.6, -3666.5, 154.65);
  lv_aQg = CreateUnit(lv_aQf, "nmmu", 5177.7, -3159.6, 88.146);
  SetUnitState(lv_aQg, UNIT_STATE_MANA, 0);
  gv_akx = CreateUnit(lv_aQf, "n006", 1573.5, -2340.6, 338.314);
  gv_akM = CreateUnit(lv_aQf, "n006", 7115.4, -5143.4, 143.6);
  gv_akE = CreateUnit(lv_aQf, "n006", 7141.6, -7297.9, 164.11);
  lv_aQf = Player(11);
  lv_aQg = CreateUnit(lv_aQf, "ushd", 13324.9, 163.4, 109.84);
  lv_aQg = CreateUnit(lv_aQf, "ushd", 9883.8, -2378.2, 126.76);
  lv_aQg = CreateUnit(lv_aQf, "ushd", 13855.3, -3206.8, 7);
  lv_aQg = CreateUnit(lv_aQf, "ushd", 10220.1, -7381.2, 293.85);
  gv_akF = CreateUnit(lv_aQf, "n007", -9709.5, -1289.6, 340.61);
  gv_aaU[1] = CreateUnit(lv_aQf, "Nalc", 2063.5, 14384.8, 338.89);
  SetUnitState(gv_aaU[1], UNIT_STATE_MANA, 0);
  gv_aaU[2] = CreateUnit(lv_aQf, "Nbst", -11254.7, 4772.4, 255.149);
  gv_aaU[3] = CreateUnit(lv_aQf, "Obla", -10357.2, 14316.5, 288.482);
  gv_aaU[4] = CreateUnit(lv_aQf, "Nbrn", 1967.1, -10242.8, 54.86);
  gv_aaU[5] = CreateUnit(lv_aQf, "Hmkg", -9588.8, -1076.8, 305.921);
  gv_aaU[6] = CreateUnit(lv_aQf, "Npbm", -1753.2, -3218.1, 274.01);
  gv_aaU[7] = CreateUnit(lv_aQf, "Nngs", -176.2, -14143.5, 241.353);
  SetUnitColor(gv_aaU[7], ConvertPlayerColor(10));
  gv_aaU[8] = CreateUnit(lv_aQf, "Nplh", 14629.2, -11387.4, 216.945);
  gv_aaU[9] = CreateUnit(lv_aQf, "Ntin", 13383.4, 188.4, 192.2);
  gv_akG = CreateUnit(lv_aQf, "n00I", -9297.8, -1041.3, 263.54);
}
function f_aQk() {
  var lv_aQl = 0;
  var lv_aQm = Location(0, 0);
  var lv_aQn = CreateUnit(
    Player(PLAYER_NEUTRAL_PASSIVE),
    "hpea",
    0.0,
    0.0,
    0.0
  );
  var lv_aQo = CreateGroup();
  gv_alL = Player(11);
  StartMeleeAI(gv_amY, "map.ai");
  StartMeleeAI(gv_alL, "map.ai");
  FogMaskEnable(true);
  FogEnable(true);
  lv_aQo = CreateGroup();
  GroupEnumUnitsInRange(lv_aQo, -14200, -15000, 1000, null);
  ForGroup(lv_aQo, f_aMZ);
  gv_alL = Player(PLAYER_NEUTRAL_PASSIVE);
  ForForce(bj_FORCE_ALL_PLAYERS, f_aIQ);
  SetCameraBoundsToRect(gv_aei);
  PanCameraToTimed(-14200, -15000, 0.0);
  DisplayTimedTextToPlayer(
    GetLocalPlayer(),
    0.0,
    0.0,
    600,
    "|cffffcc00Notice: |rYou can continue your hero with '-load <code>', but if you do, the '-repick' option will be disabled."
  );
  SetCineFilterBlendMode(BLEND_MODE_BLEND);
  SetCineFilterTexMapFlags(TEXMAP_FLAG_NONE);
  SetCineFilterStartUV(0, 0, 1, 1);
  SetCineFilterEndUV(0, 0, 1, 1);
  SetCineFilterStartColor(255, 255, 255, 255);
  SetCineFilterEndColor(255, 255, 255, 0);
  SetCineFilterDuration(5);
  ExecuteFunc("f_aQp");
  ExecuteFunc("f_aQq");
  TimerStart(CreateTimer(), 15, false, f_aIS);
  SetMapFlag(MAP_LOCK_RESOURCE_TRADING, true);
  lv_aQl = 0;
  do {
    if (lv_aQl > 8) {
      break;
    }
    SetPlayerAllianceStateBJ(Player(lv_aQl), Player(8), 3);
    SetPlayerAllianceStateBJ(Player(8), Player(lv_aQl), 3);
    SetPlayerAllianceStateBJ(Player(lv_aQl), Player(9), 2);
    SetPlayerAllianceStateBJ(Player(9), Player(lv_aQl), 2);
    lv_aQl = lv_aQl + 1;
  } while (true);
  SetPlayerAllianceStateBJ(Player(8), Player(9), 3);
  SetPlayerAllianceStateBJ(Player(9), Player(8), 2);
  SetPlayerAllianceStateBJ(Player(9), Player(14), 2);
  SetPlayerAllianceStateBJ(Player(8), Player(14), 2);
  SetPlayerAllianceStateBJ(Player(9), Player(10), 0);
  SetPlayerAllianceStateBJ(Player(9), Player(11), 0);
  SetPlayerAllianceStateBJ(Player(10), Player(9), 0);
  SetPlayerAllianceStateBJ(Player(11), Player(9), 0);
  lv_aQl = 0;
  do {
    if (lv_aQl > 7) {
      break;
    }
    SetPlayerState(Player(lv_aQl), PLAYER_STATE_RESOURCE_FOOD_CAP, 200);
    gv_alC[50 + lv_aQl] = GetRectCenter(gv_aep);
    gv_alx[260 + lv_aQl] = 0;
    lv_aQl = lv_aQl + 1;
  } while (true);
  SetTimeOfDay(6);
  SuspendTimeOfDay(false);
  gv_alx[192] = 0;
  SetPlayerState(Player(10), PLAYER_STATE_GIVES_BOUNTY, 0);
  SetPlayerState(Player(11), PLAYER_STATE_GIVES_BOUNTY, 0);
  RemoveLocation(lv_aQm);
  DestroyGroup(lv_aQo);
  lv_aQo = null;
  lv_aQm = null;
}
function f_aQp() {
  var lv_aQr = 0;
  do {
    if (lv_aQr > 7) {
      break;
    }
    gv_alz[lv_aQr] = f_aJj();
    gv_alw[30 + lv_aQr] = "I";
    gv_alD[0 + lv_aQr] = f_aIL();
    gv_alC[50 + lv_aQr] = GetRectCenter(gv_aep);
    lv_aQr = lv_aQr + 1;
  } while (true);
  gv_alz[8] = f_aJj();
  gv_alz[9] = f_aJj();
  gv_alT = CreateTimer();
  gv_alU = CreateTimer();
  gv_alV = CreateTimer();
  gv_alx[8103] = 16;
  gv_alw[12] =
    "|cffffcc00Arcane Ranger:|r |cff0080ffShrouded in mystery, this hero makes its home in the deepest and darkest forest in all of Greece; their devotion to the god Artemis bordering on fanatical.  In return, Artemis has bestowed on his followers legendary skill with a bow and unlocked the secrets of ancients magics that outsiders to their civilization rarely get to glimpse.";
  gv_alw[13] =
    "|cffffcc00Assassin:|r |cff0080ffIf killing is an art, then the Assassin strives to paint a masterpiece with each slash of his blade.  His attacks are a series of well placed strikes designed to inflict as much damage as possible in the shortest amount of time and tend to leave a lasting impression on his prey.";
  gv_alw[14] =
    "|cffffcc00Dryad:|r |cff0080ffNature is steady and reliable, qualities that the Dryad wholly encompasses. Serving as a conduit through which the earth itself can exert its force, she brings with her the awesome power of the elements to bear on her foes.  With the powers of nature in hand, the Dryad can turn the tide of a battle by smiting foes with lightning or mending the wounds of an ally.";
  gv_alw[15] =
    "|cffffcc00Hydromancer:|r |cff0080ffSacrificing humanity for an abnormal control over the element of water, the Hydromancer prides himself on his ability to alter the conditions around him to cause damage or impede his enemies.  While his temper is much more controlled than that of the Pyromancer, he still leaves an indelible mark on any foe unfortunate enough to get too close to him.";
  gv_alw[16] =
    "|cffffcc00Javelineer:|r |cff0080ffA skilled warrior who can attack from a long distance can be a tremendous asset in battle, helping to thin the enemyâ€™s ranks or picking off important targets that hand-to-hand units canâ€™t get near.  Since an early age the Javalineer has been trained to augment the effectiveness of front line soldiers with his deadly spears, adding a dimension to a group that few others can boast.";
  gv_alw[17] =
    "|cffffcc00Bokor:|r |cff0080ffShrouded in mystery the Bokorâ€™s strong connections to the spirit world make him a fearsome presence on a battlefield. Pouring his very life essence into his magicks the Bokor is as welcome an ally as he is deadly a foe. They are accepted in an adventuring party with a wary cautiousness but there are few who would disagree that it is better to be with the Bokor than against him.";
  gv_alw[18] =
    "|cffffcc00Priestess:|r |cff0080ffWarriors will tell you that there is no substitute in battle for a good, sharp blade.  Or rather, they would tell you, if they werenâ€™t dead from their ignorance--nothing is as important in battling the forces of Hell as a competent healer.  Able to commune with the healing Gods and directing their blessings to her allies, winning or losing a battle often comes down to one simple question: Where is the Priestess?";
  gv_alw[19] =
    "|cffffcc00Pyromancer:|r |cff0080ffAwed by the mysteries of fire, the Pyromancer abandoned his humanity and sought to become one with his beloved flame.  Armed with the annihilative power of fire, the Pyromancer hasnâ€™t a shred of kindness in his entire being.  Brooding and angry, he prefers to deal with obstacles through swift, destructive force rather than with diplomacy.";
  gv_alw[20] =
    "|cffffcc00Spartan Warrior:|r |cff0080ffFew in history can match the ferocity and effectiveness with which warriors from Sparta display during warfare.  Their prowess on the front lines and legendary endurance makes them ideal to lead a group of heroes onto the battlefield to face their enemies.";
  gv_alw[21] =
    "|cffffcc00Spell Blade:|r |cff0080ffNot every spell caster likes to play his trade from behind the front lines.  Some, like the Spell Blade, prefer to be up close and in the thick of the action.  By channeling his arcane abilities through his weapons the Spell Blade seeks the ultimate balance between might and magic.";
  gv_alw[22] =
    "|cffffcc00Temple Guardian:|r |cff0080ffWith powers bestowed by the Gods they serve; the guardians of Athensâ€™ temples can be counted on to be in the front lines of any battle.  Their devotion to their God is absolute as is their commitment to banish the forces of Hell from the land.  With unwavering will, the Temple Guardian refuses to die without a fight.";
  gv_alw[23] =
    "|cffffcc00Amazon:|r |cff0080ffBorn in a highly secretive society in which the female plays the dominate role, the Amazon is both a tactful and ferocious warrior. Aided by her fearless mount she charges to the front lines where even the men of Sparta take notice of her combat prowess.";
  gv_alw[59] =
    "4#F?Q6xkXa9v5w%KbihEeS@D/dzMGsugNAyRq$B8TpH<c&rPUmV=Yn+3ZfW2>Ct7J";
  gv_alw[60] = "|cffff0202";
  gv_alw[61] = "|cff0041ff";
  gv_alw[62] = "|cff1be5b8";
  gv_alw[63] = "|cff530080";
  gv_alw[64] = "|cfffffc00";
  gv_alw[65] = "|cfffe890d";
  gv_alw[66] = "|cff1fbf00";
  gv_alw[67] = "|cffe45aaf";
  gv_alw[68] = "|cff949596";
  gv_alw[69] = "|cff7dbef1";
  gv_alw[70] = "|cff0f6145";
  gv_alw[71] = "|cff4d2903";
  gv_alw[74] = "|cff00ff00";
  gv_alw[75] = "|cff88ccff";
  gv_alw[76] = "|cff7777aa";
  gv_alw[77] = "|cffff0000";
  gv_alw[78] = "|cffff8800";
  gv_alw[79] = "|cffff8a08";
  gv_alw[80] = "|cffffcc00";
  gv_alw[81] = "|cffffd700";
  gv_alw[82] = "|cffffffff";
  gv_alw[83] = "|cffcccc00";
  gv_alw[89] = "|c00ffffff";
  gv_alw[90] = "Defenders of Greece, to The Black Road!";
  gv_alw[91] = "Demons! Lots of Demons. Here they come down the road.";
  gv_alw[92] = "Demon attack is imminent!  Return to Athens at once.";
  gv_alw[93] = "Scouts report demons approaching Athens on The Black Road!";
  gv_alw[94] = "Quick! The gates of Hades are opening near The Black Road!";
  gv_alw[110] =
    "I charm birds, fishes and wild beasts, coax the trees and rocks into dance.  Which one are you?";
  gv_alw[111] =
    "Leave me be. I'm one of the handful of Greek heroes to visit the Underworld and return.";
  gv_alw[112] =
    "I only sing about dead heros now.  Guess it's about time to sing your song.";
  gv_alw[113] = "Click me again, and I'll restring your face.";
  gv_alw[114] =
    "Even in the darkest parts of underworld my song and lyre did not lose their power.";
  gv_alw[115] =
    "The Orphic way of life: vegetarianism and abstention from sex, and refrain from eating eggs and beans.";
  gv_alw[116] = "Now I know why Serius said you were an assclown.";
  gv_alw[120] =
    "Alive without breath, as cold as death. Never thirsty, always drinking, Clad in mail, never clinking.";
  gv_alw[135] = "fish";
  gv_alw[121] =
    "An army I am countless upon the battlefield, even over hills and valleys. My soldiers have uncountable blades at their disposal, yet not a single shield to count.";
  gv_alw[136] = "grass";
  gv_alw[122] =
    "I have no voice, yet I speak to you. I tell of anything you'd ever want to hear. I have leaves, but I am not a tree. I have a spine and hinges, but I am not a man or a door.";
  gv_alw[137] = "book";
  gv_alw[123] =
    "What has roots as nobody sees, and is taller than trees. Up, up it goes, and yet never grows?";
  gv_alw[138] = "mountain";
  gv_alw[124] =
    "When I am young I am tall, When I am old I am short. While I have the light of life, The breath of god is my foe.";
  gv_alw[139] = "candle";
  gv_alw[125] =
    "What can run but never walk, Has a mouth but never talks? Has a bed but never sleeps, Has a head but never weeps?";
  gv_alw[140] = "river";
  gv_alw[126] =
    "What is greater than Zeus, more evil than Hades. The poor have it. The rich donâ€™t. If you eat it you will die.";
  gv_alw[141] = "nothing";
  gv_alw[127] =
    "My first is in water and also in tea. My second is in fish but not in the sea. My third is in mountains but not underground. My last is in strike but never in pound. My whole crushes mountains, rivers, even civilizations. And all that live, fear my arrival.";
  gv_alw[142] = "time";
  gv_alw[128] =
    "The beginning of eternity, the end of time and space. The beginning of every end, and the end of every place.";
  gv_alw[143] = "e";
  gv_alw[129] =
    "What is the animal that has one voice, and goes on four legs in the morning, two legs at noon, and upon three legs in the evening?";
  gv_alw[144] = "human";
  gv_alw[130] =
    "Carrying a scythe, I arrive when I should, always behind but never late.  I hold in my hand what never stops moving.";
  gv_alw[145] = "fathertime";
  gv_alw[131] =
    "Feed me and I live, give me drink and I die. A little air and I grow, too much and I go away.";
  gv_alw[146] = "fire";
  gv_alw[132] =
    "I raise my weapon up to the sky; I let my armies fall and fly; I let my weapon strike the ground; and let loose a terrible battle cry.";
  gv_alw[147] = "storm";
  lv_aQr = 205;
  do {
    if (lv_aQr > 239) {
      break;
    }
    gv_alx[lv_aQr] = 1;
    lv_aQr = lv_aQr + 1;
  } while (true);
  gv_alu[0] = 0.0;
  gv_alu[1] = 0.0;
  gv_alu[2] = 0.0;
  gv_alu[3] = 0.0;
  gv_alu[4] = 0.0;
  gv_alu[5] = 0.0;
  gv_alu[6] = 0.0;
  gv_alu[7] = 0.0;
  gv_alu[8] = 0.0;
  gv_alu[9] = 0.0;
  gv_alu[10] = 0.0;
  gv_alu[11] = 0.0;
  gv_alu[12] = 0.0;
  gv_alu[13] = 0.0;
  gv_alu[14] = 0.0;
  gv_alu[15] = 0.0;
  gv_alx[1] = 2;
  gv_alx[73] = 2;
  gv_alx[2] = 5;
  gv_alx[74] = 5;
  gv_alx[3] = 7;
  gv_alx[75] = 9;
  gv_alx[4] = 11;
  gv_alx[76] = 13;
  gv_alx[5] = 14;
  gv_alx[77] = 18;
  gv_alx[6] = 17;
  gv_alx[78] = 22;
  gv_alx[7] = 21;
  gv_alx[79] = 28;
  gv_alx[8] = 24;
  gv_alx[80] = 33;
  gv_alx[9] = 28;
  gv_alx[81] = 39;
  gv_alx[10] = 32;
  gv_alx[82] = 45;
  gv_alx[11] = 36;
  gv_alx[83] = 51;
  gv_alx[12] = 39;
  gv_alx[84] = 57;
  gv_alx[13] = 43;
  gv_alx[85] = 64;
  gv_alx[14] = 47;
  gv_alx[86] = 71;
  gv_alx[15] = 52;
  gv_alx[87] = 77;
  gv_alx[16] = 56;
  gv_alx[88] = 84;
  gv_alx[17] = 60;
  gv_alx[89] = 92;
  gv_alx[18] = 64;
  gv_alx[90] = 99;
  gv_alx[19] = 68;
  gv_alx[91] = 106;
  gv_alx[20] = 73;
  gv_alx[92] = 114;
  gv_alx[21] = 77;
  gv_alx[93] = 122;
  gv_alx[22] = 82;
  gv_alx[94] = 130;
  gv_alx[23] = 86;
  gv_alx[95] = 138;
  gv_alx[24] = 91;
  gv_alx[96] = 146;
  gv_alx[25] = 95;
  gv_alx[97] = 154;
  gv_alx[26] = 100;
  gv_alx[98] = 163;
  gv_alx[27] = 104;
  gv_alx[99] = 171;
  gv_alx[28] = 109;
  gv_alx[100] = 180;
  gv_alx[29] = 114;
  gv_alx[101] = 188;
  gv_alx[30] = 118;
  gv_alx[102] = 197;
  gv_alx[31] = 123;
  gv_alx[103] = 206;
  gv_alx[32] = 128;
  gv_alx[104] = 215;
  gv_alx[33] = 155;
  gv_alx[105] = 224;
  gv_alx[34] = 138;
  gv_alx[106] = 234;
  gv_alx[35] = 143;
  gv_alx[107] = 243;
  gv_alx[36] = 147;
  gv_alx[108] = 252;
  gv_alx[37] = 152;
  gv_alx[109] = 262;
  gv_alx[38] = 157;
  gv_alx[110] = 271;
  gv_alx[39] = 162;
  gv_alx[111] = 281;
  gv_alx[40] = 167;
  gv_alx[112] = 291;
  gv_alx[41] = 172;
  gv_alx[113] = 301;
  gv_alx[42] = 177;
  gv_alx[114] = 311;
  gv_alx[43] = 182;
  gv_alx[115] = 321;
  gv_alx[44] = 188;
  gv_alx[116] = 331;
  gv_alx[45] = 193;
  gv_alx[117] = 341;
  gv_alx[46] = 198;
  gv_alx[118] = 351;
  gv_alx[47] = 203;
  gv_alx[119] = 362;
  gv_alx[48] = 208;
  gv_alx[120] = 372;
  gv_alx[49] = 213;
  gv_alx[121] = 383;
  gv_alx[50] = 219;
  gv_alx[122] = 393;
  gv_alx[51] = 224;
  gv_alx[123] = 404;
  gv_alx[52] = 229;
  gv_alx[124] = 415;
  gv_alx[53] = 235;
  gv_alx[125] = 425;
  gv_alx[54] = 240;
  gv_alx[126] = 436;
  gv_alx[55] = 245;
  gv_alx[127] = 447;
  gv_alx[56] = 251;
  gv_alx[128] = 458;
  gv_alx[57] = 256;
  gv_alx[129] = 469;
  gv_alx[58] = 261;
  gv_alx[130] = 480;
  gv_alx[59] = 267;
  gv_alx[131] = 492;
  gv_alx[60] = 272;
  gv_alx[132] = 503;
  gv_alx[61] = 278;
  gv_alx[133] = 514;
  gv_alx[62] = 283;
  gv_alx[134] = 526;
  gv_alx[63] = 289;
  gv_alx[135] = 537;
  gv_alx[64] = 294;
  gv_alx[136] = 549;
  gv_alx[65] = 300;
  gv_alx[137] = 560;
  gv_alx[66] = 305;
  gv_alx[138] = 572;
  gv_alx[67] = 311;
  gv_alx[139] = 584;
  gv_alx[68] = 316;
  gv_alx[140] = 596;
  gv_alx[69] = 322;
  gv_alx[141] = 607;
  gv_alx[70] = 327;
  gv_alx[142] = 619;
  gv_alx[71] = 333;
  gv_alx[143] = 631;
  gv_alx[72] = 339;
  gv_alx[144] = 643;
  gv_alx[400] = "nkob";
  gv_alx[401] = "nkob";
  gv_alx[402] = "nkob";
  gv_alx[403] = "nkob";
  gv_alx[404] = "nkob";
  gv_alx[405] = "nkob";
  gv_alx[406] = "nkob";
  gv_alx[407] = "nkob";
  gv_alx[408] = "nkob";
  gv_alx[409] = "nkob";
  gv_alx[410] = "nkob";
  gv_alx[411] = "nkog";
  gv_alx[412] = "nkog";
  gv_alx[413] = "nkog";
  gv_alx[414] = "nkol";
  gv_alx[415] = "nwlt";
  gv_alx[416] = "nban";
  gv_alx[417] = "nban";
  gv_alx[418] = "nban";
  gv_alx[419] = "nban";
  gv_alx[420] = "nban";
  gv_alx[421] = "nban";
  gv_alx[422] = "nban";
  gv_alx[423] = "nban";
  gv_alx[424] = "nban";
  gv_alx[425] = "nban";
  gv_alx[426] = "nban";
  gv_alx[427] = "nban";
  gv_alx[428] = "nban";
  gv_alx[429] = "nass";
  gv_alx[430] = "nass";
  gv_alx[431] = "nass";
  gv_alx[432] = "nass";
  gv_alx[433] = "nass";
  gv_alx[434] = "nass";
  gv_alx[435] = "nass";
  gv_alx[436] = "nftt";
  gv_alx[437] = "nftt";
  gv_alx[438] = "nftt";
  gv_alx[439] = "nftt";
  gv_alx[440] = "nftt";
  gv_alx[441] = "nftt";
  gv_alx[442] = "nftt";
  gv_alx[443] = "nftt";
  gv_alx[444] = "nftt";
  gv_alx[445] = "nftb";
  gv_alx[446] = "nftb";
  gv_alx[447] = "nftb";
  gv_alx[448] = "nftb";
  gv_alx[449] = "nftb";
  gv_alx[450] = "nfsp";
  gv_alx[451] = "nhrr";
  gv_alx[452] = "nmgw";
  gv_alx[453] = "nmrr";
  gv_alx[454] = "nmrr";
  gv_alx[455] = "nmrr";
  gv_alx[456] = "nmrr";
  gv_alx[457] = "nmrr";
  gv_alx[458] = "nmrr";
  gv_alx[459] = "nmrr";
  gv_alx[460] = "nmrr";
  gv_alx[461] = "nmrr";
  gv_alx[462] = "nmrr";
  gv_alx[463] = "nmrr";
  gv_alx[464] = "nmmu";
  gv_alx[465] = "nmmu";
  gv_alx[466] = "nmmu";
  gv_alx[467] = "nmrm";
  gv_alx[468] = "nsat";
  gv_alx[469] = "nsat";
  gv_alx[470] = "nsat";
  gv_alx[471] = "nsat";
  gv_alx[472] = "nsat";
  gv_alx[473] = "nsat";
  gv_alx[474] = "nsat";
  gv_alx[475] = "nsat";
  gv_alx[476] = "nsat";
  gv_alx[477] = "nsat";
  gv_alx[478] = "nstl";
  gv_alx[479] = "nstl";
  gv_alx[480] = "nstl";
  gv_alx[481] = "nstl";
  gv_alx[482] = "nstl";
  gv_alx[483] = "nstl";
  gv_alx[484] = "nstl";
  gv_alx[485] = "nstl";
  gv_alx[486] = "nsth";
  gv_alx[487] = "nsth";
  gv_alx[488] = "nfrl";
  gv_alx[489] = "nfrl";
  gv_alx[490] = "nfrl";
  gv_alx[491] = "nfrl";
  gv_alx[492] = "nfrl";
  gv_alx[493] = "nfrl";
  gv_alx[494] = "nfrl";
  gv_alx[495] = "nfrl";
  gv_alx[496] = "nfrb";
  gv_alx[497] = "nfrb";
  gv_alx[498] = "nfrb";
  gv_alx[499] = "nfrb";
  gv_alx[500] = "nfrg";
  gv_alx[501] = "nfrg";
  gv_alx[502] = "ncks";
  gv_alx[503] = "ncks";
  gv_alx[504] = "ncks";
  gv_alx[505] = "ncks";
  gv_alx[506] = "ncks";
  gv_alx[507] = "ncks";
  gv_alx[508] = "ncks";
  gv_alx[509] = "ncim";
  gv_alx[510] = "ncim";
  gv_alx[511] = "ncim";
  gv_alx[512] = "ncim";
  gv_alx[513] = "ncim";
  gv_alx[514] = "ncim";
  gv_alx[515] = "ncim";
  gv_alx[516] = "nfor";
  gv_alx[517] = "nfor";
  gv_alx[518] = "nfor";
  gv_alx[519] = "nfor";
  gv_alx[520] = "nfor";
  gv_alx[521] = "nfor";
  gv_alx[522] = "ngh1";
  gv_alx[523] = "ngh1";
  gv_alx[524] = "ngh1";
  gv_alx[525] = "ngh1";
  gv_alx[526] = "ngh1";
  gv_alx[527] = "ngh1";
  gv_alx[528] = "ngh2";
  gv_alx[529] = "ngh2";
  gv_alx[530] = "ngh2";
  gv_alx[531] = "nmgd";
  gv_alx[532] = "nrvs";
  gv_alx[533] = "ntks";
  gv_alx[540] = "h009";
  gv_alx[541] = "n00B";
  gv_alx[542] = "n00D";
  gv_alv[200] = gv_akB;
  gv_alw[500] = "Can I add you to my friends list?";
  gv_alw[501] = "Can you add me to your friends list?";
  gv_alw[502] = "Hades is a major assclown.";
  gv_alw[503] = "The Titans know you are coming.";
  gv_alw[504] = "I'll guard the city, while you kick ass.";
  gv_alw[505] = "I'm sure I have a quest for you.";
  gv_alw[506] = "Only return once you have killed something.";
  gv_alw[507] = "You don't want to duel me.";
  gv_alw[508] = "Zeus needs real heros, not mambie pambies.";
  gv_alw[509] = "You know I'm ignoring you right?";
  gv_alw[510] = "I must not be allowed to die.";
  gv_alw[511] = "You really need more levels.";
  gv_alw[512] = "Time to open up a can of whoop ass.";
  gv_alw[513] = "Theron stays outside until he admits to the affair.";
  gv_alw[514] = "Look for the rich farmer, he has work.";
  gv_alw[515] = "Yes nice weapon, but can you use it?";
  gv_alw[516] = "Don't stand there, get to work!";
  gv_alv[201] = gv_akr;
  gv_alw[550] = "I like to be where the action is.";
  gv_alw[551] = "Demons, demons, always demons.";
  gv_alw[552] = "No time for ale, must kill things.";
  gv_alw[553] = "You sit by the fire, you die.";
  gv_alw[554] = "Watch out for the big ones.";
  gv_alw[555] = "I did not have sex with that woman.";
  gv_alw[556] = "Read my lips: demons suck.";
  gv_alw[557] = "I'll power level you.";
  gv_alw[558] = "Here is a dirty job, you'll love.";
  gv_alw[559] = "Kill first and ask questions later.";
  gv_alw[560] = "First titan is to the north.";
  gv_alw[561] = "I hear a dragon looms to the west.";
  gv_alw[562] = "Pots, always carry some pot.";
  gv_alv[202] = gv_akS;
  gv_alw[575] = "Yes I have a daughter why do you ask?";
  gv_alw[576] = "Your bravery reminds me of my son.";
  gv_alw[577] = "Those demons sure make life hard.";
  gv_alw[578] = "Those wolves ate my sheep.";
  gv_alw[579] = "Got sheep?";
  gv_alw[580] = "I hope you didn't eat the magic seeds.";
  gv_alw[581] = "You like green tomatoes?";
  gv_alw[582] = "I need help.";
  gv_alw[583] = "There is an amazing forge up the mount.";
  gv_alw[584] = "I can't kill wolves and farm at the same time.";
  gv_alv[203] = gv_akP;
  gv_alw[585] = "We rival Athens and Thebes in wealth.";
  gv_alw[586] = "Visit the Temple of Aphrodite.";
  gv_alw[587] = "Did you know we started the olympics here.";
  gv_alw[588] = "Athens is filled with boy lovers.";
  gv_alw[589] = "Have some ale, while you heal.";
  gv_alw[590] = "Harpys are birds from hell.";
  gv_alw[591] = "Damn trolls, killed my dog.";
  gv_alw[592] = "That Troll Chieftain bugs me.";
  gv_alw[593] = "One more beer, and I'll join ya.";
  gv_alw[594] = "Serius is the one worried about the titans.";
  gv_alw[595] = "I could run Sparta, but their ale is weak.";
  gv_alw[596] = "Did you hear that?";
}
function f_aQs() {
  var lv_aQt;
  CreateQuestBJ(
    2,
    "Synopsis",
    "Hades has created the Black Road from the Underworld and his demonic hordes have come to ravage Greece.  Darkest evil descends upon the fathers of the West in many guises, and Athens is beset on all sides.  To aid him in his unholy quest, Hades has called upon the ancient Titans.",
    "ReplaceableTextures\\CommandButtons\\BTNArcaneObservatory.blp"
  );
  CreateQuestBJ(
    2,
    "Victory",
    "To win, you must defeat Hades at the Gates of Hell at the end of the Black Road.  To summon Hades, defeat the eight Titans scattered around the map.  When you do, the Gates of Hell will become vulnerable.  Attack the Gates of Hell until Hades arrives.",
    "ReplaceableTextures\\CommandButtons\\BTNHumanCaptureFlag.blp"
  );
  lv_aQt =
    "-load, -save  (For loading or saving character) \n-quests, -players  (switch multiboard) \n-clear  (Clears the screen of text)";
  lv_aQt = S2S(
    lv_aQt +
      "-repick  (Repicks hero) \n-abinfo (shows how your abilities scale as you level them, mana costs not included for now) \n-out, -in  (Zoom your view out or back in)"
  );
  lv_aQt = S2S(lv_aQt + "\n-commands or -cc, shows some custom commands");
  lv_aQt = S2S(
    lv_aQt +
      "-roll  (Players will be assigned a number between 1 and 100) \n-die  (kills your hero) \n-info  (Shows speed and regen, only use in a safe place)"
  );
  lv_aQt = S2S(
    lv_aQt +
      "-text  (Display quest text) \n-find * \n\n* add the color of the player.  Example: -find blue"
  );
  CreateQuestBJ(
    2,
    "Chat Commands",
    lv_aQt,
    "ReplaceableTextures\\WorldEditUI\\Editor-MultipleUnits.blp"
  );
  CreateQuestBJ(
    2,
    "Saving",
    "To save your character, type -save at any time.  You will receive a string of characters representing your experience, class, hero inventory, and other stats.  Items on your hero and your bag of holding will save unless otherwise noted.  The bag even saves stacked potions.",
    "ReplaceableTextures\\CommandButtons\\BTNLoadDwarf.blp"
  );
  CreateQuestBJ(
    2,
    "Loading",
    "To load a character, type -load followed by your save code.  You may only load |cffff0000one character per game|r and once you successfully load you |cffff0000may not re-load|r so make sure the save code you enter is the correct one.",
    "ReplaceableTextures\\CommandButtons\\BTNLoadDwarf.blp"
  );
  CreateQuestBJ(
    2,
    "Bags of Holding",
    "If you use an item that is in your bag of holding, the effects will be applied to your hero. You can also use it to carry backup equipment such as weapons and armor, but the effects will not be applied.",
    "ReplaceableTextures\\CommandButtons\\BTNDust.blp"
  );
  CreateQuestBJ(
    2,
    "Quest Levels",
    "All quests have a quest level assigned to them.  Only a player at or above that level will get the gold and experience given by the quest reward.",
    "ReplaceableTextures\\WorldEditUI\\Editor-Random-Unit.blp"
  );
  lv_aQt =
    "Only for 'host' player: \n-hex * (critter)\n-slap, -stab * (damages a player's hero)\n-kill * (kills a player's hero)\n-boot, -kick * (removes a player from the game)\n\n* add the color of the player.  Example: -stab blue";
  CreateQuestBJ(
    2,
    "Host Commands",
    lv_aQt,
    "ReplaceableTextures\\WorldEditUI\\Editor-MultipleUnits.blp"
  );
  lv_aQt =
    "Arcane ranger: Gives a 2% chance to reset spell cd's on spellcast, does not affect Ultimate. chance is 5% at night, also boosts Q about 20% \nTemple Guardian: Gives a 15% Endurance aura, a 20% command aura, and a 30% atk speed bonus to self ";
  lv_aQt = S2S(
    lv_aQt +
      "\nSpartan: Gives a chance to throw 2 spears at an enemy you hit, dealing eventdamage + str based damage \nAmazon: 10% chance to deal 150 AOE damage and stun nearby enemies for 2 seconds (1 sec for bosses)"
  );
  lv_aQt = S2S(
    lv_aQt +
      "\nJavelin: Increases Spear impetus damage by about 50%\nAssassin: Gives a 5% chance to crit for bonus damage- 2.5x bonus if gear, 4x if equip \nBokor: Revive you with half hp and mp on death, 180 sec cooldown "
  );
  lv_aQt =
    "Spellblade: Increases self mana regen by 4% per sec, and nearby allies 1%, equip raises this to 5.5, 1.5% \nHydromancer: when you damage an enemy with atk of select spells- has 7% chance to frost nova random enemy in range for 400 dmg (10% chance if equip)";
  lv_aQt = S2S(
    lv_aQt +
      "\nPyromancer: gear/equip give a 8% chance to deal 100-125% bonus damage on atk or spell hit \nDryad: 7% chance to entangling roots a foe when you attack\nPriestess: adds 70% of Spelheal to eventdamage used to calculate give and take healing"
  );
  CreateQuestBJ(
    2,
    "Contact Info",
    "Visit: |cffffcc00Clan TBR|r on U.S. East\nForums: http://theblackroad.net/forums \n Discord at: https://discord.gg/YBCmwZS",
    "ReplaceableTextures\\WorldEditUI\\Doodad-Cinematic.blp"
  );
  lv_aQt =
    "TBR 1.x WaterMolecule (PwncakesnRofles)\n\nTBR 2.x Created by:\n|cffffcc00FatherTime|r - Theme & quest design, Terrain, Items, Units & Heros, Icons & Models.\n\n";
  lv_aQt = S2S(
    lv_aQt +
      "|cffffcc00Av3n|r - Hero Spells, Boss Fights, Creep Spawns, Item Effect Triggers, Regalia Effects, Systems optimization.\n\n|cffffcc00ArthasFirestorm|r - Quest triggers, multiboards, Save/Load code, Chat commands, Battle Arena Duels, Attack Waves & Black Road effects, Athenians, General Triggers.\n\n"
  );
  lv_aQt = S2S(
    lv_aQt +
      "|cffffcc00Aerox|r - Preliminary Concept/Balance, XP/Gold Creep Rewards, Simple Hero Mechanics, Hero Selection, Item Forging, Map Protection."
  );
  CreateQuestBJ(
    2,
    "Programming",
    lv_aQt,
    "ReplaceableTextures\\CommandButtons\\BTNBox.blp"
  );
  lv_aQt =
    "GurkenKinG (Priestess Skin Contest Winner)\nIdontneedaname (Custom Skins - SpellBlade)\nNG_Absalon\toriad (Semi-developers)\nxXm0rpH3usXx (Models)\nTiki (Models)\n";
  lv_aQt = S2S(
    lv_aQt +
      "olofmoleman (Models)|nDaelin (Models)\nCallahan (Models)\narmel (Models)\nMc! (Models and Doodads)\nGeneral Frank (Models)\nJetFangInferno (Models)\nCamels_hump (Skins)\n"
  );
  lv_aQt = S2S(
    lv_aQt +
      "moyack (system)\nKaTTaNa, Rising_Dusk and Vexorian (external functions)\nBloody_Turds (model)\nWILL_THE_ALMIGHTY (models)\nCallahan (model)\nNorinad (model)\n"
  );
  lv_aQt = S2S(
    lv_aQt +
      "Infrisios (models)\nalfredx_sotn (model)\nsc_freek (model)\nPheonix-IV (model)\ns4nji (model)\nPyritie (model)\nCaptian Griffen (system)\nCoZZa (boss lines)\n"
  );
  lv_aQt = S2S(lv_aQt + "Deaod (system)\nSzythe (model)\nTiL-Doom (model)");
  CreateQuestBJ(
    2,
    "Credits",
    lv_aQt,
    "ReplaceableTextures\\CommandButtons\\BTNBox.blp"
  );
  DestroyTrigger(gv_agl);
}
function f_aQu() {
  var lv_aQv = 0;
  gv_alP = CreateMultiboard();
  MultiboardSetColumnCount(gv_alP, 4);
  MultiboardSetRowCount(gv_alP, 9);
  MultiboardSetTitleText(gv_alP, "Adventuring Party");
  MultiboardSetItemValueBJ(gv_alP, 1, 1, S2S(gv_alw[74] + "Life|r"));
  MultiboardSetItemWidthBJ(gv_alP, 1, 1, 3);
  MultiboardSetItemStyleBJ(gv_alP, 1, lv_aQv, true, false);
  MultiboardSetItemValueBJ(gv_alP, 2, 1, "Player");
  MultiboardSetItemWidthBJ(gv_alP, 2, 1, 10);
  MultiboardSetItemStyleBJ(gv_alP, 2, lv_aQv, true, false);
  MultiboardSetItemValueBJ(gv_alP, 3, 1, S2S(gv_alw[81] + "Class|r"));
  MultiboardSetItemWidthBJ(gv_alP, 3, 1, 10);
  MultiboardSetItemStyleBJ(gv_alP, 3, lv_aQv, true, false);
  MultiboardSetItemValueBJ(gv_alP, 4, 1, S2S(gv_alw[75] + "Level|r"));
  MultiboardSetItemWidthBJ(gv_alP, 4, 1, 3);
  MultiboardSetItemStyleBJ(gv_alP, 4, lv_aQv, true, false);
  do {
    if (lv_aQv > 7) {
      break;
    }
    if (GetPlayerSlotState(Player(lv_aQv)) == PLAYER_SLOT_STATE_PLAYING) {
      gv_alx[195] = gv_alx.getInt(195) + 1;
      MultiboardSetItemValueBJ(
        gv_alP,
        2,
        lv_aQv + 2,
        S2S(gv_alw[60 + lv_aQv] + GetPlayerName(Player(lv_aQv))) + "|r"
      );
      MultiboardSetItemValueBJ(gv_alP, 3, lv_aQv + 2, "- unloaded -");
      MultiboardSetItemValueBJ(gv_alP, 4, lv_aQv + 2, "---");
    } else {
      MultiboardSetItemValueBJ(
        gv_alP,
        2,
        lv_aQv + 2,
        S2S(gv_alw[68] + GetPlayerName(Player(lv_aQv))) + "|r"
      );
      MultiboardSetItemValueBJ(
        gv_alP,
        3,
        lv_aQv + 2,
        S2S(gv_alw[68] + "- not playing -|r")
      );
      MultiboardSetItemValueBJ(gv_alP, 4, lv_aQv + 2, " ");
    }
    MultiboardSetItemStyleBJ(gv_alP, 1, lv_aQv + 2, true, false);
    MultiboardSetItemStyleBJ(gv_alP, 2, lv_aQv + 2, true, false);
    MultiboardSetItemStyleBJ(gv_alP, 3, lv_aQv + 2, true, false);
    MultiboardSetItemStyleBJ(gv_alP, 4, lv_aQv + 2, true, false);
    MultiboardSetItemWidthBJ(gv_alP, 1, lv_aQv + 2, 3);
    MultiboardSetItemWidthBJ(gv_alP, 2, lv_aQv + 2, 10);
    MultiboardSetItemWidthBJ(gv_alP, 3, lv_aQv + 2, 10);
    MultiboardSetItemWidthBJ(gv_alP, 4, lv_aQv + 2, 3);
    lv_aQv = lv_aQv + 1;
  } while (true);
  CinematicFadeBJ(
    1,
    0,
    "ReplaceableTextures\\CameraMasks\\Black_mask.blp",
    0,
    0,
    0,
    0
  );
  EnableUserControl(false);
  ClearTextMessages();
  DisplayTimedTextToForce(
    gv_alH,
    7,
    "                                                                         |cffffcc00-= CLAN TBR's =-|r"
  );
  DisplayTimedTextToForce(gv_alH, 7, " ");
  DisplayTimedTextToForce(
    gv_alH,
    7,
    "                                                                      The Black Road 2.0.82"
  );
  DisplayTimedTextToForce(
    gv_alH,
    7,
    "                                                                  |cffff0000www.theblackroad.net/forums|r"
  );
  DisplayTimedTextToForce(gv_alH, 7, " ");
  DisplayTimedTextToForce(
    gv_alH,
    7,
    "                                                                       https://discord.gg/YBCmwZS"
  );
  DisplayTimedTextToForce(gv_alH, 7, " ");
  DisplayTimedTextToForce(
    gv_alH,
    7,
    "                                                                             Map Credits:"
  );
  DisplayTimedTextToForce(
    gv_alH,
    7,
    "                                                                      Av3n, ArthasFirestorm,"
  );
  DisplayTimedTextToForce(
    gv_alH,
    7,
    "                                                                        afis, and FatherTime"
  );
  DisplayTimedTextToForce(gv_alH, 7, " ");
  DisplayTimedTextToForce(
    gv_alH,
    7,
    "                                                                     With special thanks to:"
  );
  DisplayTimedTextToForce(
    gv_alH,
    7,
    "                                                      Aerox, HappyTauren and CrazyRussian"
  );
  DisplayTimedTextToForce(
    gv_alH,
    7,
    "                                                                  txt-save system by: afis"
  );
  DisplayTimedTextToForce(
    gv_alH,
    7,
    "                                                               try -abinfo to see ability levels"
  );
  TriggerSleepAction(6);
  CinematicFadeBJ(
    0,
    3,
    "ReplaceableTextures\\CameraMasks\\Black_mask.blp",
    0,
    0,
    0,
    0
  );
  EnableUserControl(true);
  MultiboardDisplay(gv_alP, true);
  MultiboardMinimize(gv_alP, false);
}
function f_aQw() {
  var lv_aQx = GetTriggerPlayer();
  var lv_aQy = GetPlayerId(lv_aQx);
  var lv_aQz = GetTriggerUnit();
  var lv_aQA = GetUnitFacing(lv_aQz);
  var lv_aQB = lv_aQA * bj_DEGTORAD;
  if (GetLocalPlayer() == lv_aQx) {
    SetCameraField(CAMERA_FIELD_ROTATION, lv_aQA + 180, 1);
    SetCameraField(CAMERA_FIELD_TARGET_DISTANCE, 1250, 1);
    SetCameraField(CAMERA_FIELD_ANGLE_OF_ATTACK, 320, 1);
    PanCameraToTimed(-14200 - 200 * Cos(lv_aQB), -15000 - 200 * Sin(lv_aQB), 1);
    if (gv_alv[16 + lv_aQy] != null) {
      ResetUnitAnimation(gv_alv[16 + lv_aQy]);
    }
    SetUnitAnimation(lv_aQz, "spell");
    if (GetUnitTypeId(lv_aQz) == "Emoo") {
      SetUnitAnimation(lv_aQz, "attack");
    }
    if (GetUnitTypeId(lv_aQz) == "Udea") {
      SetUnitAnimation(lv_aQz, "stand defend");
    }
    ClearTextMessages();
  }
  DisplayTimedTextToPlayer(
    lv_aQx,
    0.4,
    -0.8,
    60,
    gv_alw[GetUnitPointValue(lv_aQz)]
  );
  DisplayTimedTextToPlayer(
    lv_aQx,
    0.4,
    -0.6,
    60,
    "\n|cffffcc00Press |r|cffff0000Esc|r|cffffcc00 to select this Hero."
  );
  gv_alv[16 + lv_aQy] = lv_aQz;
  lv_aQx = null;
  lv_aQz = null;
}
function f_aQC() {
  return gv_alv[GetPlayerId(GetTriggerPlayer())] == null;
}
function f_aQD() {
  if (GetEnumPlayer() == gv_alL) {
    return;
  }
  SetPlayerAlliance(gv_alL, GetEnumPlayer(), ALLIANCE_SHARED_VISION, true);
}
function f_aQE(lv_aQF) {
  var lv_aQG = 0;
  do {
    if (lv_aQG == lv_aQF) {
      lv_aQG = lv_aQG + 1;
    }
    if (lv_aQG > 8) {
      break;
    }
    SetPlayerTeam(Player(lv_aQF), 0);
    SetPlayerState(Player(lv_aQF), PLAYER_STATE_ALLIED_VICTORY, 1);
    SetPlayerAlliance(
      Player(lv_aQF),
      Player(lv_aQG),
      ALLIANCE_SHARED_CONTROL,
      false
    );
    SetPlayerAlliance(
      Player(lv_aQF),
      Player(lv_aQG),
      ALLIANCE_SHARED_ADVANCED_CONTROL,
      false
    );
    SetPlayerAllianceStateAllyBJ(Player(lv_aQF), Player(lv_aQG), true);
    SetPlayerAllianceStateVisionBJ(Player(lv_aQF), Player(lv_aQG), true);
    lv_aQG = lv_aQG + 1;
  } while (true);
}
function f_aQH() {
  var lv_aQI = GetTriggerPlayer();
  var lv_aQJ = GetPlayerId(lv_aQI);
  var lv_aQK = gv_alv[GetPlayerId(lv_aQI) + 16];
  f_aQE(lv_aQJ);
  gv_alv[lv_aQJ] = CreateUnit(lv_aQI, GetUnitTypeId(lv_aQK), 3750, 11000, 270);
  gv_alv[lv_aQJ + 8] = CreateUnit(lv_aQI, "e000", 3550, 10800, 270);
  UnitModifySkillPoints(gv_alv[lv_aQJ], 2);
  if (lv_aQI == GetLocalPlayer()) {
    ResetToGameCamera(0.0);
    SetCameraBoundsToRect(bj_mapInitialCameraBounds);
    ClearTextMessages();
    ClearSelection();
    SelectUnit(gv_alv[lv_aQJ], true);
  }
  UnitAddAbility(gv_alv[lv_aQJ], "Amrf");
  UnitRemoveAbility(gv_alv[lv_aQJ], "Amrf");
  PanCameraToTimedForPlayer(lv_aQI, 3750, 11000, 0.5);
  SetPlayerAlliance(Player(9), lv_aQI, ALLIANCE_SHARED_VISION, true);
  SetPlayerAlliance(
    Player(PLAYER_NEUTRAL_PASSIVE),
    lv_aQI,
    ALLIANCE_SHARED_CONTROL,
    false
  );
  SetPlayerAlliance(
    Player(PLAYER_NEUTRAL_PASSIVE),
    lv_aQI,
    ALLIANCE_SHARED_VISION,
    false
  );
  gv_alL = lv_aQI;
  ForForce(gv_alH, f_aQD);
  DisplayTimedTextToPlayer(
    lv_aQI,
    0,
    0,
    60,
    "Welcome to |cffff0000The Black Road 2|r!"
  );
  DisplayTimedTextToPlayer(lv_aQI, 0, 0, 60, "     ");
  DisplayTimedTextToPlayer(
    lv_aQI,
    0,
    0,
    60,
    "    If you are new to this map, read the quests (|cffffcc00F9|r)."
  );
  MultiboardSetItemValueBJ(gv_alP, 3, lv_aQJ + 2, GetUnitName(gv_alv[lv_aQJ]));
  MultiboardSetItemValueBJ(
    gv_alP,
    4,
    lv_aQJ + 2,
    S2S(gv_alw[75] + I2S(1)) + "|r"
  );
  gv_alx[250 + lv_aQJ] = 1;
  lv_aQJ = lv_aQJ * 5 + 200;
  gv_alx[lv_aQJ] = 1;
  gv_alx[lv_aQJ + 1] = 1;
  gv_alx[lv_aQJ + 2] = 1;
  gv_alx[lv_aQJ + 3] = 1;
  gv_alx[lv_aQJ + 4] = 0;
  lv_aQI = null;
  lv_aQK = null;
  PolledWait(0.5);
  SetCameraFieldForPlayer(
    GetTriggerPlayer(),
    CAMERA_FIELD_TARGET_DISTANCE,
    2000,
    1
  );
}
function f_aQL() {
  var lv_aQM = GetPlayerId(GetTriggerPlayer());
  return gv_alv[lv_aQM] == null && gv_alv[lv_aQM + 16] != null;
}
function f_aQN() {
  var lv_aQO = 0;
  gv_alx[6999] = 59;
  do {
    if (lv_aQO > gv_alx.getInt(6999)) {
      break;
    }
    gv_alx[lv_aQO + 7000] = 0;
    gv_alx[lv_aQO + 7400] = 0;
    lv_aQO = lv_aQO + 1;
  } while (true);
  lv_aQO = 1;
  gv_alv[lv_aQO + 7000] = gv_akB;
  gv_alw[lv_aQO + 7000] = "Avatar of Earth";
  gv_alw[lv_aQO + 7100] = "k";
  gv_alw[lv_aQO + 7200] = "Atlas";
  gv_alw[lv_aQO + 7300] =
    "A series of Titans were put into Greece to aid Hades quest; they must be defeated if we are to again secure our lands. To the northwest of town, nestled in against the mountains, is the Avatar of Earth named Atlas. He is the first of the Titans and must be defeated.";
  gv_alw[lv_aQO + 7400] =
    "ReplaceableTextures\\CommandButtons\\BTNRockGolem.blp";
  gv_alx[lv_aQO + 7100] = 300;
  gv_alx[lv_aQO + 7200] = 200;
  gv_alx[lv_aQO + 7300] = 0;
  gv_alx[lv_aQO + 7500] = 1;
  gv_alx[lv_aQO + 7600] = 25;
  lv_aQO = 2;
  gv_alv[lv_aQO + 7000] = gv_akB;
  gv_alw[lv_aQO + 7000] = "Avatar of Justice";
  gv_alw[lv_aQO + 7100] = "k";
  gv_alw[lv_aQO + 7200] = "Themus";
  gv_alw[lv_aQO + 7300] =
    "In the far west of the foothills lies what was once the farm of a very prosperous family. Recently the Titan Themus moved into the compound and made it his home. He must be eliminated, drive him from the farm and back to hell.";
  gv_alw[lv_aQO + 7400] = "ReplaceableTextures\\CommandButtons\\BTNGuldan.blp";
  gv_alx[lv_aQO + 7100] = 700;
  gv_alx[lv_aQO + 7200] = 350;
  gv_alx[lv_aQO + 7300] = 0;
  gv_alx[lv_aQO + 7500] = 1;
  gv_alx[lv_aQO + 7600] = 40;
  lv_aQO = 3;
  gv_alv[lv_aQO + 7000] = gv_akB;
  gv_alw[lv_aQO + 7000] = "Avatar of Air";
  gv_alw[lv_aQO + 7100] = "k";
  gv_alw[lv_aQO + 7200] = "Uranus";
  gv_alw[lv_aQO + 7300] =
    "Up in the Minotaur Mountain region lies the domain of the titan Uranus. Journey up the mountain, locate and defeat him.";
  gv_alw[lv_aQO + 7400] =
    "ReplaceableTextures\\CommandButtons\\BTNHeroCryptLord.blp";
  gv_alx[lv_aQO + 7100] = 1800;
  gv_alx[lv_aQO + 7200] = 650;
  gv_alx[lv_aQO + 7300] = 0;
  gv_alx[lv_aQO + 7500] = 1;
  gv_alx[lv_aQO + 7600] = 60;
  lv_aQO = 4;
  gv_alv[lv_aQO + 7000] = gv_akB;
  gv_alw[lv_aQO + 7000] = "Avatar of Water";
  gv_alw[lv_aQO + 7100] = "k";
  gv_alw[lv_aQO + 7200] = "Oceanus";
  gv_alw[lv_aQO + 7300] =
    "When the Titans began to make their homes in Athens we thought we were safe, as we had no place big enough to support them - Then out of the depths rose the lands of Oceanus. We managed to put a gate up to keep him from taking over the entire island but he is a constant threat.";
  gv_alw[lv_aQO + 7400] =
    "ReplaceableTextures\\CommandButtons\\BTNSeaElemental.blp";
  gv_alx[lv_aQO + 7100] = 3500;
  gv_alx[lv_aQO + 7200] = 1700;
  gv_alx[lv_aQO + 7300] = 1;
  gv_alx[lv_aQO + 7500] = 1;
  gv_alx[lv_aQO + 7600] = 80;
  lv_aQO = 5;
  gv_alv[lv_aQO + 7000] = gv_akB;
  gv_alw[lv_aQO + 7000] = "Mistress of Pain";
  gv_alw[lv_aQO + 7100] = "k";
  gv_alw[lv_aQO + 7200] = "Rhea";
  gv_alw[lv_aQO + 7300] =
    "Deep within the Satyr Woodlands near the cost lies the lair of the demoness Rhea. She and her ilk are preforming horrifying rituals and sacrificing our good people to increase their infernal powers. You must put a stop to their activities.";
  gv_alw[lv_aQO + 7400] =
    "ReplaceableTextures\\CommandButtons\\BTNHeroDreadlord.blp";
  gv_alx[lv_aQO + 7100] = 4800;
  gv_alx[lv_aQO + 7200] = 2000;
  gv_alx[lv_aQO + 7300] = 2;
  gv_alx[lv_aQO + 7500] = 1;
  gv_alx[lv_aQO + 7600] = 90;
  lv_aQO = 6;
  gv_alv[lv_aQO + 7000] = gv_akB;
  gv_alw[lv_aQO + 7000] = "Avatar of Nature";
  gv_alw[lv_aQO + 7100] = "k";
  gv_alw[lv_aQO + 7200] = "Thea";
  gv_alw[lv_aQO + 7300] =
    "The Titan Thea has reportedly been seen far to the east at the very edge of the forest. I don't have to tell you how important it is that he be defeated if we hope to win this war. Go forth and force him out by any means necessary.";
  gv_alw[lv_aQO + 7400] =
    "ReplaceableTextures\\CommandButtons\\BTNSasquatch.blp";
  gv_alx[lv_aQO + 7100] = 6000;
  gv_alx[lv_aQO + 7200] = 3000;
  gv_alx[lv_aQO + 7300] = 2;
  gv_alx[lv_aQO + 7500] = 1;
  gv_alx[lv_aQO + 7600] = 100;
  lv_aQO = 7;
  gv_alv[lv_aQO + 7000] = gv_akB;
  gv_alw[lv_aQO + 7000] = "Avatar of the Elements";
  gv_alw[lv_aQO + 7100] = "k";
  gv_alw[lv_aQO + 7200] = "Gaea";
  gv_alw[lv_aQO + 7300] =
    "The very southeastern tip of the Centaur Plains is home to Gaea. She is the last of the Titans that reside in Greece - the rest, wellâ€¦ deal with her first and we will talk about them.";
  gv_alw[lv_aQO + 7400] =
    "ReplaceableTextures\\CommandButtons\\BTNNightElfRunner.blp";
  gv_alx[lv_aQO + 7100] = 9500;
  gv_alx[lv_aQO + 7200] = 5000;
  gv_alx[lv_aQO + 7300] = 3;
  gv_alx[lv_aQO + 7500] = 1;
  gv_alx[lv_aQO + 7600] = 110;
  lv_aQO = 8;
  gv_alv[lv_aQO + 7000] = gv_akB;
  gv_alw[lv_aQO + 7000] = "Avatar of Death";
  gv_alw[lv_aQO + 7100] = "k";
  gv_alw[lv_aQO + 7200] = "Cronus";
  gv_alw[lv_aQO + 7300] =
    "Somewhere in the Undead region is the tomb of the Avatar of Death, Cronus. He has at his disposal great powers over the creatures in his realm so be careful should you manage to locate him.";
  gv_alw[lv_aQO + 7400] = "ReplaceableTextures\\CommandButtons\\BTNPitLord.blp";
  gv_alx[lv_aQO + 7100] = 13500;
  gv_alx[lv_aQO + 7200] = 6000;
  gv_alx[lv_aQO + 7300] = 4;
  gv_alx[lv_aQO + 7500] = 1;
  gv_alx[lv_aQO + 7600] = 125;
  lv_aQO = 9;
  gv_alv[lv_aQO + 7000] = gv_akB;
  gv_alw[lv_aQO + 7000] = "Frozen Citadel";
  gv_alw[lv_aQO + 7100] = "k";
  gv_alw[lv_aQO + 7200] = "Persephone";
  gv_alw[lv_aQO + 7300] =
    "There may be hope for Greece yet! Only one task remains before we can force Hades to show himself and banish him back to Tartarus; defeating his wife Persephone. To do that you must venture into her Frozen Citadel and face her minions. Once they have been slain you will get your chance to face the ice queen herself.";
  gv_alw[lv_aQO + 7400] =
    "ReplaceableTextures\\CommandButtons\\BTNAssassin.blp";
  gv_alx[lv_aQO + 7100] = 15000;
  gv_alx[lv_aQO + 7200] = 10000;
  gv_alx[lv_aQO + 7300] = 10;
  gv_alx[lv_aQO + 7500] = 1;
  gv_alx[lv_aQO + 7600] = 135;
  lv_aQO = 10;
  gv_alv[lv_aQO + 7000] = gv_akB;
  gv_alw[lv_aQO + 7000] = "Hades Himself";
  gv_alw[lv_aQO + 7100] = "k";
  gv_alw[lv_aQO + 7200] = "Hades";
  gv_alw[lv_aQO + 7300] =
    "Now that all of his minions have been defeated we can force Hades to show himself. Get yourself in position men, for he comes now!!!";
  gv_alw[lv_aQO + 7400] =
    "ReplaceableTextures\\CommandButtons\\BTNKiljaedin.blp";
  gv_alx[lv_aQO + 7100] = 22500;
  gv_alx[lv_aQO + 7200] = 15000;
  gv_alx[lv_aQO + 7300] = 15;
  gv_alx[lv_aQO + 7500] = 1;
  gv_alx[lv_aQO + 7600] = 140;
  lv_aQO = 11;
  gv_alv[lv_aQO + 7000] = gv_akr;
  gv_alw[lv_aQO + 7000] = "Training Grounds";
  gv_alw[lv_aQO + 7100] = "k";
  gv_alw[lv_aQO + 7200] = "Minor Demons";
  gv_alw[lv_aQO + 7300] =
    "Demons have infested our lands. Some of them are very powerful, others are no more than a nuscence - the ones around here are the later. But before we put you in the front lines against more dangerous foes we need to make sure you are properly trained.";
  gv_alw[lv_aQO + 7400] =
    "ReplaceableTextures\\CommandButtons\\BTNLavaSpawn.blp";
  gv_alx[lv_aQO + 7100] = 50;
  gv_alx[lv_aQO + 7200] = 50;
  gv_alx[lv_aQO + 7300] = 0;
  gv_alx[lv_aQO + 7500] = f_aKX(10);
  gv_alx[lv_aQO + 7600] = 1;
  lv_aQO = 12;
  gv_alv[lv_aQO + 7000] = gv_akr;
  gv_alw[lv_aQO + 7000] = "Advanced Training";
  gv_alw[lv_aQO + 7100] = "k";
  gv_alw[lv_aQO + 7200] = "Demons or Major Demons";
  gv_alw[lv_aQO + 7300] =
    "You cannot expect all foes to be so easy to overcome. Search out some 'Demons' and 'Major Demons' and see how you fare against them.";
  gv_alw[lv_aQO + 7400] =
    "ReplaceableTextures\\CommandButtons\\BTNLavaSpawn.blp";
  gv_alx[lv_aQO + 7100] = 100;
  gv_alx[lv_aQO + 7200] = 100;
  gv_alx[lv_aQO + 7300] = 0;
  gv_alx[lv_aQO + 7500] = f_aKX(25);
  gv_alx[lv_aQO + 7600] = 1;
  lv_aQO = 13;
  gv_alv[lv_aQO + 7000] = gv_akr;
  gv_alw[lv_aQO + 7000] = "* Cleansing the Land";
  gv_alw[lv_aQO + 7100] = "k";
  gv_alw[lv_aQO + 7200] = "Demons";
  gv_alw[lv_aQO + 7300] =
    "These 'Demons' are a plight on our land. Continue to defeat them and I will pay you a handsome bounty.";
  gv_alw[lv_aQO + 7400] =
    "ReplaceableTextures\\CommandButtons\\BTNLavaSpawn.blp";
  gv_alx[lv_aQO + 7100] = 60;
  gv_alx[lv_aQO + 7200] = 60;
  gv_alx[lv_aQO + 7300] = 0;
  gv_alx[lv_aQO + 7500] = f_aKX(15);
  gv_alx[lv_aQO + 7600] = 1;
  lv_aQO = 14;
  gv_alv[lv_aQO + 7000] = gv_akr;
  gv_alw[lv_aQO + 7000] = "A Thorn in our Side";
  gv_alw[lv_aQO + 7100] = "k";
  gv_alw[lv_aQO + 7200] = "Bandits,Bandit Tents";
  gv_alw[lv_aQO + 7300] =
    "While the real threat to Athens lies to the north of town, a troop of bandits have moved into the lands to the southwest and have been a constant hindrance to our ability to defend ourselves. Seek out these bandits and eradicate their camps.";
  gv_alw[lv_aQO + 7400] = "ReplaceableTextures\\CommandButtons\\BTNBandit.blp";
  gv_alx[lv_aQO + 7100] = 300;
  gv_alx[lv_aQO + 7200] = 150;
  gv_alx[lv_aQO + 7300] = 0;
  gv_alx[lv_aQO + 7500] = f_aKX(12) + 7 * 100;
  gv_alx[lv_aQO + 7600] = 5;
  lv_aQO = 15;
  gv_alv[lv_aQO + 7000] = gv_akr;
  gv_alw[lv_aQO + 7000] = "* Patrol the Southlands";
  gv_alw[lv_aQO + 7100] = "k";
  gv_alw[lv_aQO + 7200] = "Bandits";
  gv_alw[lv_aQO + 7300] =
    "Eliminating the Bandit Camps was a step in the right direction, but there are more Bandits who need dealt with. I shall pay you a bounty for each one you eliminate.";
  gv_alw[lv_aQO + 7400] =
    "ReplaceableTextures\\CommandButtons\\BTNBanditSpearThrower.blp";
  gv_alx[lv_aQO + 7100] = 150;
  gv_alx[lv_aQO + 7200] = 200;
  gv_alx[lv_aQO + 7300] = 0;
  gv_alx[lv_aQO + 7500] = f_aKX(15);
  gv_alx[lv_aQO + 7600] = 5;
  lv_aQO = 16;
  gv_alv[lv_aQO + 7000] = gv_akr;
  gv_alw[lv_aQO + 7000] = "Bandit Lord";
  gv_alw[lv_aQO + 7100] = "k";
  gv_alw[lv_aQO + 7200] = "Bandit Lord";
  gv_alw[lv_aQO + 7300] =
    "Your efforts to eradicate the Bandits have paid off; the elusive Bandit Lord has finally showed himself. Seek him out and deal with him in a way that will ensure he never bothers us again.";
  gv_alw[lv_aQO + 7400] = "ReplaceableTextures\\CommandButtons\\BTNBandit.blp";
  gv_alx[lv_aQO + 7100] = 700;
  gv_alx[lv_aQO + 7200] = 500;
  gv_alx[lv_aQO + 7300] = 0;
  gv_alx[lv_aQO + 7500] = 1;
  gv_alx[lv_aQO + 7600] = 10;
  lv_aQO = 17;
  gv_alv[lv_aQO + 7000] = gv_akS;
  gv_alw[lv_aQO + 7000] = "* Wolf Pelts";
  gv_alw[lv_aQO + 7100] = "c";
  gv_alw[lv_aQO + 7200] = "Wolf Pelts";
  gv_alw[lv_aQO + 7300] =
    "Sure the problems of Greece bother me, but I have problems of my own. Each night a pack of wolves come down from Mount Olympus and prey upon my sheep. If you could eliminate the threat to my farm and family I would be more inclined to take an interest in the problems facing Athens.";
  gv_alw[lv_aQO + 7400] =
    "ReplaceableTextures\\CommandButtons\\BTNTimberWolf.blp";
  gv_alx[lv_aQO + 7100] = 200;
  gv_alx[lv_aQO + 7200] = 300;
  gv_alx[lv_aQO + 7300] = 0;
  gv_alx[lv_aQO + 7500] = f_aKX(8);
  gv_alx[lv_aQO + 7600] = 15;
  lv_aQO = 18;
  gv_alv[lv_aQO + 7000] = gv_akS;
  gv_alw[lv_aQO + 7000] = "Sewing the Seeds";
  gv_alw[lv_aQO + 7100] = "c";
  gv_alw[lv_aQO + 7200] = "Blessed Seeds";
  gv_alw[lv_aQO + 7300] =
    "The evil in the land has made it hard for me to grow my crops. In order to feed my family I require a special seed available only from the Sacred Grove of the Druids west of Athens.  Normally I would send my son but he is currently serving in the army of Corinth and so I need someone else to go. Do this errand for me and my family and I willl be most thankful.";
  gv_alw[lv_aQO + 7400] = "ReplaceableTextures\\CommandButtons\\BTNAcorn.blp";
  gv_alx[lv_aQO + 7100] = 300;
  gv_alx[lv_aQO + 7200] = 300;
  gv_alx[lv_aQO + 7300] = 0;
  gv_alx[lv_aQO + 7500] = 1;
  gv_alx[lv_aQO + 7600] = 15;
  lv_aQO = 19;
  gv_alv[lv_aQO + 7000] = gv_akS;
  gv_alw[lv_aQO + 7000] = "Restock the Flock";
  gv_alw[lv_aQO + 7100] = "c";
  gv_alw[lv_aQO + 7200] = "Sheep";
  gv_alw[lv_aQO + 7300] =
    "With the threat of the wolves removed my farm can once again support a full flock of sheep. There is a farm just north of Corinth where you can get the sheep I require. Lead 6 of them safely back here so my flock can be restored.";
  gv_alw[lv_aQO + 7400] = "ReplaceableTextures\\CommandButtons\\BTNSheep.blp";
  gv_alx[lv_aQO + 7100] = 300;
  gv_alx[lv_aQO + 7200] = 800;
  gv_alx[lv_aQO + 7300] = 0;
  gv_alx[lv_aQO + 7500] = 6;
  gv_alx[lv_aQO + 7600] = 15;
  lv_aQO = 20;
  gv_alv[lv_aQO + 7000] = gv_akS;
  gv_alw[lv_aQO + 7000] = "Letter to my Son";
  gv_alw[lv_aQO + 7100] = "c";
  gv_alw[lv_aQO + 7200] = "Letter to Son";
  gv_alw[lv_aQO + 7300] =
    "You have been of great service to my family and we are in your debt. I have just one last favor to ask of you. My son is serving in the Corinthian army helping to defend the city. We obviously cannout journey there to visit him but you can. Please deliver this letter to him and send him our love.";
  gv_alw[lv_aQO + 7400] = "ReplaceableTextures\\CommandButtons\\BTNScroll.blp";
  gv_alx[lv_aQO + 7100] = 500;
  gv_alx[lv_aQO + 7200] = 100;
  gv_alx[lv_aQO + 7300] = 0;
  gv_alx[lv_aQO + 7500] = 1;
  gv_alx[lv_aQO + 7600] = 15;
  lv_aQO = 21;
  gv_alv[lv_aQO + 7000] = gv_akP;
  gv_alw[lv_aQO + 7000] = "* Trolls-A-Plenty";
  gv_alw[lv_aQO + 7100] = "k";
  gv_alw[lv_aQO + 7200] = "Trolls";
  gv_alw[lv_aQO + 7300] =
    "Troll, trolls, trollsâ€¦ the damn things are everywhere around here. Tell you what, go eliminate some of them and bring back their mangy hides and I'll see you get some  gold for your troubles.";
  gv_alw[lv_aQO + 7400] =
    "ReplaceableTextures\\CommandButtons\\BTNForestTrollTrapper.blp";
  gv_alx[lv_aQO + 7100] = 400;
  gv_alx[lv_aQO + 7200] = 400;
  gv_alx[lv_aQO + 7300] = 0;
  gv_alx[lv_aQO + 7500] = f_aKX(25);
  gv_alx[lv_aQO + 7600] = 20;
  lv_aQO = 22;
  gv_alv[lv_aQO + 7000] = gv_akP;
  gv_alw[lv_aQO + 7000] = "Troll Chieftain";
  gv_alw[lv_aQO + 7100] = "k";
  gv_alw[lv_aQO + 7200] = "Troll Chieftain";
  gv_alw[lv_aQO + 7300] =
    "So apparently there is one troll that actually possesses half a brain who the others treat as some sort of leader. Seek out this 'super troll' and bash his half-brain's out, would ya?";
  gv_alw[lv_aQO + 7400] =
    "ReplaceableTextures\\CommandButtons\\BTNForestTroll.blp";
  gv_alx[lv_aQO + 7100] = 800;
  gv_alx[lv_aQO + 7200] = 500;
  gv_alx[lv_aQO + 7300] = 0;
  gv_alx[lv_aQO + 7500] = 1;
  gv_alx[lv_aQO + 7600] = 20;
  lv_aQO = 23;
  gv_alv[lv_aQO + 7000] = gv_akP;
  gv_alw[lv_aQO + 7000] = "Harpys on the Hill";
  gv_alw[lv_aQO + 7100] = "k";
  gv_alw[lv_aQO + 7200] = "Harpys,Harpy Nests";
  gv_alw[lv_aQO + 7300] =
    "Just south of the path that leads into the Minotaur Mountains lies a nest of evil Harpy's that seem to delight in swooping down and stealing our farmers precious cattle. Go up to them and do some 'negotiating' with them and persuade them to leave the mountain for good.";
  gv_alw[lv_aQO + 7400] = "ReplaceableTextures\\CommandButtons\\BTNHarpy.blp";
  gv_alx[lv_aQO + 7100] = 1200;
  gv_alx[lv_aQO + 7200] = 700;
  gv_alx[lv_aQO + 7300] = 0;
  gv_alx[lv_aQO + 7500] = f_aKX(8) + 4 * 100;
  gv_alx[lv_aQO + 7600] = 35;
  lv_aQO = 24;
  gv_alv[lv_aQO + 7000] = gv_akP;
  gv_alw[lv_aQO + 7000] = "* Snatching the Claws";
  gv_alw[lv_aQO + 7100] = "c";
  gv_alw[lv_aQO + 7200] = "Harpy Claws";
  gv_alw[lv_aQO + 7300] =
    "As repulsive as Harpy's are they aren't totally useless - their feathers are great for use on our shields. Since war preparations are in full swing we can use all the claws we can get. For each dozen claws you collect I'll dip into the war chest and pay you a nice reward.";
  gv_alw[lv_aQO + 7400] =
    "ReplaceableTextures\\CommandButtons\\BTNAdvancedCreatureAttack.blp";
  gv_alx[lv_aQO + 7100] = 700;
  gv_alx[lv_aQO + 7200] = 600;
  gv_alx[lv_aQO + 7300] = 0;
  gv_alx[lv_aQO + 7500] = f_aKX(12);
  gv_alx[lv_aQO + 7600] = 35;
  lv_aQO = 25;
  gv_alv[lv_aQO + 7000] = gv_akP;
  gv_alw[lv_aQO + 7000] = "Hive Mother of the Harpys";
  gv_alw[lv_aQO + 7100] = "k";
  gv_alw[lv_aQO + 7200] = "Harpy Hive Mother";
  gv_alw[lv_aQO + 7300] =
    "It seems there is one Harpy meaner than the others - a Hive Mother! We can't be sure our farms will be safe until she is killed and is no more.";
  gv_alw[lv_aQO + 7400] =
    "ReplaceableTextures\\CommandButtons\\BTNHarpyWitch.blp";
  gv_alx[lv_aQO + 7100] = 1400;
  gv_alx[lv_aQO + 7200] = 900;
  gv_alx[lv_aQO + 7300] = 0;
  gv_alx[lv_aQO + 7500] = 1;
  gv_alx[lv_aQO + 7600] = 40;
  lv_aQO = 26;
  gv_alv[lv_aQO + 7000] = gv_akW;
  gv_alw[lv_aQO + 7000] = "Revenge against the Minotaurs";
  gv_alw[lv_aQO + 7100] = "k";
  gv_alw[lv_aQO + 7200] = "Minotaurs,Minotaur Buildings";
  gv_alw[lv_aQO + 7300] =
    "Hail Brave Warriors! I am in need of your services. For a long time my family has made their home on this mountain, bur recently a band of evil Minotaur's has come and driven us from our home. Worse still, they killed my wife and my children in the process.";
  gv_alw[lv_aQO + 7400] =
    "ReplaceableTextures\\CommandButtons\\BTNHeroTaurenChieftain.blp";
  gv_alx[lv_aQO + 7100] = 2000;
  gv_alx[lv_aQO + 7200] = 1200;
  gv_alx[lv_aQO + 7300] = 0;
  gv_alx[lv_aQO + 7500] = 22 + 7 * 100;
  gv_alx[lv_aQO + 7600] = 40;
  lv_aQO = 27;
  gv_alv[lv_aQO + 7000] = gv_akW;
  gv_alw[lv_aQO + 7000] = "Treasure Cave";
  gv_alw[lv_aQO + 7100] = "t";
  gv_alw[lv_aQO + 7200] = "Talk to Draco";
  gv_alw[lv_aQO + 7300] =
    "High up in the mountains where the snow never melts lies a cave filled with wonderous treasure - and also with a hideous one-eyed creature known simply as the 'Cyclops.'  Going into his cave would be suicide for most people but you have proven to be both tough and resourceful enough to rid us of this menace. The warrior Draco makes camp in the region, seek him out and he may be able to show you a way into the cave.";
  gv_alw[lv_aQO + 7400] = "ReplaceableTextures\\CommandButtons\\BTNDranai.blp";
  gv_alx[lv_aQO + 7100] = 0;
  gv_alx[lv_aQO + 7200] = 0;
  gv_alx[lv_aQO + 7300] = 0;
  gv_alx[lv_aQO + 7500] = 1;
  gv_alx[lv_aQO + 7600] = 40;
  lv_aQO = 28;
  gv_alv[lv_aQO + 7000] = gv_akX;
  gv_alw[lv_aQO + 7000] = "Minotaur Hides";
  gv_alw[lv_aQO + 7100] = "c";
  gv_alw[lv_aQO + 7200] = "Minotaur Hides";
  gv_alw[lv_aQO + 7300] =
    "So you wish to venture into the cave and face the Cyclops? Well, of course I can show you the way into the cave but you'll have to do something for me. I need the hides from 10 Minotaur's that roam the hills south of this camp; bring to me those hides and I will show you the way.";
  gv_alw[lv_aQO + 7400] = "ReplaceableTextures\\CommandButtons\\BTNTauren.blp";
  gv_alx[lv_aQO + 7100] = 1200;
  gv_alx[lv_aQO + 7200] = 1100;
  gv_alx[lv_aQO + 7300] = 0;
  gv_alx[lv_aQO + 7500] = f_aKX(10);
  gv_alx[lv_aQO + 7600] = 45;
  lv_aQO = 29;
  gv_alv[lv_aQO + 7000] = gv_akX;
  gv_alw[lv_aQO + 7000] = "Cyclops Eye";
  gv_alw[lv_aQO + 7100] = "c";
  gv_alw[lv_aQO + 7200] = "Cyclops Eye";
  gv_alw[lv_aQO + 7300] =
    "Be wary when you enter the cave for the Cyclops defends his treasure fiercely. If you do manage to defeat him return to me with his eye so I may send it back to Athens as proof he is dead and I will share my reward with you.";
  gv_alw[lv_aQO + 7400] =
    "ReplaceableTextures\\CommandButtons\\BTNSentryWard.blp";
  gv_alx[lv_aQO + 7100] = 1500;
  gv_alx[lv_aQO + 7200] = 2000;
  gv_alx[lv_aQO + 7300] = 0;
  gv_alx[lv_aQO + 7500] = 1;
  gv_alx[lv_aQO + 7600] = 45;
  lv_aQO = 30;
  gv_alv[lv_aQO + 7000] = gv_akX;
  gv_alw[lv_aQO + 7000] = "Terror of the Mountain";
  gv_alw[lv_aQO + 7100] = "k";
  gv_alw[lv_aQO + 7200] = "Ladon";
  gv_alw[lv_aQO + 7300] =
    "There is a dangerous creature that terrorizes the mountain - the great dragon Ladon. My troops and I are not nearly powerful enough to defeat him but perhaps you are. If you manage to kill him the rewards will be great but I don't need to tell you the consequences should you fail.";
  gv_alw[lv_aQO + 7400] =
    "ReplaceableTextures\\CommandButtons\\BTNBronzeDragon.blp";
  gv_alx[lv_aQO + 7100] = 15000;
  gv_alx[lv_aQO + 7200] = 10000;
  gv_alx[lv_aQO + 7300] = 2;
  gv_alx[lv_aQO + 7500] = 1;
  gv_alx[lv_aQO + 7600] = 100;
  lv_aQO = 31;
  gv_alv[lv_aQO + 7000] = gv_aku;
  gv_alw[lv_aQO + 7000] = "Naga Homelands";
  gv_alw[lv_aQO + 7100] = "k";
  gv_alw[lv_aQO + 7200] = "Naga,Naga Huts";
  gv_alw[lv_aQO + 7300] =
    "For a long time my people inhabited this island and lived in peace, making a very good living in the shipping trade. Recently, however, we have been pushed further and further up the island by the Naga until we were left with only this small settlement. Please erradicate these monsters from our island.";
  gv_alw[lv_aQO + 7400] =
    "ReplaceableTextures\\CommandButtons\\BTNSeaWitch.blp";
  gv_alx[lv_aQO + 7100] = 3000;
  gv_alx[lv_aQO + 7200] = 1800;
  gv_alx[lv_aQO + 7300] = 0;
  gv_alx[lv_aQO + 7500] = f_aKX(25) + 13 * 100;
  gv_alx[lv_aQO + 7600] = 50;
  lv_aQO = 32;
  gv_alv[lv_aQO + 7000] = gv_aku;
  gv_alw[lv_aQO + 7000] = "Here There Be Monsters";
  gv_alw[lv_aQO + 7100] = "k";
  gv_alw[lv_aQO + 7200] = "Hydra";
  gv_alw[lv_aQO + 7300] =
    "At the very southeastern tip of Crete lies what was our most important settlement, but the foul Hydra has risen from the depths and decided to take it as his home instead. We tried to fight him but many were lost. Send him back to the depths so that we may reclaim our most important city.";
  gv_alw[lv_aQO + 7400] =
    "ReplaceableTextures\\CommandButtons\\BTNGreenHydra.blp";
  gv_alx[lv_aQO + 7100] = 3000;
  gv_alx[lv_aQO + 7200] = 800;
  gv_alx[lv_aQO + 7300] = 1;
  gv_alx[lv_aQO + 7500] = 1;
  gv_alx[lv_aQO + 7600] = 59;
  lv_aQO = 33;
  gv_alv[lv_aQO + 7000] = gv_aku;
  gv_alw[lv_aQO + 7000] = "* Back to the Depths";
  gv_alw[lv_aQO + 7100] = "k";
  gv_alw[lv_aQO + 7200] = "Naga";
  gv_alw[lv_aQO + 7300] =
    "Every Naga you kill is one less that we have to worry about in the furture. For each of them you send to a watery grave I will reach into our rich coffers and reward you generously.";
  gv_alw[lv_aQO + 7400] =
    "ReplaceableTextures\\CommandButtons\\BTNNagaMyrmidon.blp";
  gv_alx[lv_aQO + 7100] = 2200;
  gv_alx[lv_aQO + 7200] = 1500;
  gv_alx[lv_aQO + 7300] = 0;
  gv_alx[lv_aQO + 7500] = f_aKX(15);
  gv_alx[lv_aQO + 7600] = 55;
  lv_aQO = 34;
  gv_alv[lv_aQO + 7000] = gv_akC;
  gv_alw[lv_aQO + 7000] = "Opening the Road";
  gv_alw[lv_aQO + 7100] = "k";
  gv_alw[lv_aQO + 7200] = "Satyrs";
  gv_alw[lv_aQO + 7300] =
    "Sparta is a very important city to the defense of Greece. Unfortunately there is only one road that leads to the city and it runs through the Satyr Woodlands to the south of us. Used to be that wasn't a problem; send a few troops and they would leave you alone. But now only 1 out of every 10 caravans makes it through and I'm losing money with each failed shipment. Thin the Satyr ranks and help establish order and I shall pay you handsomely.";
  gv_alw[lv_aQO + 7400] = "ReplaceableTextures\\CommandButtons\\BTNSatyr.blp";
  gv_alx[lv_aQO + 7100] = 2000;
  gv_alx[lv_aQO + 7200] = 3500;
  gv_alx[lv_aQO + 7300] = 0;
  gv_alx[lv_aQO + 7500] = f_aKX(12);
  gv_alx[lv_aQO + 7600] = 60;
  lv_aQO = 35;
  gv_alv[lv_aQO + 7000] = gv_akC;
  gv_alw[lv_aQO + 7000] = "Escorting the Caravan";
  gv_alw[lv_aQO + 7100] = "t";
  gv_alw[lv_aQO + 7200] = "Escort Caravan";
  gv_alw[lv_aQO + 7300] =
    "Now that you've shown the Satyr's you're not to be trifled with I need you to help escort a caravan through the woods to Sparta. Report back to me once it has passed into the city so I know that it made it successfully.";
  gv_alw[lv_aQO + 7400] =
    "ReplaceableTextures\\CommandButtons\\BTNBloodElfSupplyWagon.blp";
  gv_alx[lv_aQO + 7100] = 6500;
  gv_alx[lv_aQO + 7200] = 5000;
  gv_alx[lv_aQO + 7300] = 1;
  gv_alx[lv_aQO + 7500] = 1;
  gv_alx[lv_aQO + 7600] = 60;
  lv_aQO = 36;
  gv_alv[lv_aQO + 7000] = gv_akC;
  gv_alw[lv_aQO + 7000] = "* Patrolling the Forest";
  gv_alw[lv_aQO + 7100] = "c";
  gv_alw[lv_aQO + 7200] = "Satyr Hooves";
  gv_alw[lv_aQO + 7300] =
    "Thanks to you the road to Sparta is now open, but that doesn't mean that those uppity Satyr's won't try something like this again. Why don't you go back into the Woodlands and ensure that they don't get the chance. For every pair of Satyr hooves you collect I'll see to it your coin purse grows heavier.";
  gv_alw[lv_aQO + 7400] =
    "ReplaceableTextures\\CommandButtons\\BTNWarStomp.blp";
  gv_alx[lv_aQO + 7100] = 1000;
  gv_alx[lv_aQO + 7200] = 900;
  gv_alx[lv_aQO + 7300] = 0;
  gv_alx[lv_aQO + 7500] = f_aKX(10);
  gv_alx[lv_aQO + 7600] = 60;
  lv_aQO = 37;
  gv_alv[lv_aQO + 7000] = gv_akD;
  gv_alw[lv_aQO + 7000] = "Evil Forest";
  gv_alw[lv_aQO + 7100] = "k";
  gv_alw[lv_aQO + 7200] = "Corrupted Treants";
  gv_alw[lv_aQO + 7300] =
    "Once this swamp was home to the a great many magestic trees, but like everything in the land these days the trees have sucumb to the infulences of evil. Venture into the swamp and erradicate these spirits as best you can. Start with the seedlings and saplings, as you can defeat them easily before the evil inside them becomes deeply rooted.";
  gv_alw[lv_aQO + 7400] = "ReplaceableTextures\\CommandButtons\\BTNEnt.blp";
  gv_alx[lv_aQO + 7100] = 2500;
  gv_alx[lv_aQO + 7200] = 1000;
  gv_alx[lv_aQO + 7300] = 0;
  gv_alx[lv_aQO + 7500] = f_aKX(18);
  gv_alx[lv_aQO + 7600] = 75;
  lv_aQO = 38;
  gv_alv[lv_aQO + 7000] = gv_akD;
  gv_alw[lv_aQO + 7000] = "A Deeply Rooted Problem";
  gv_alw[lv_aQO + 7100] = "k";
  gv_alw[lv_aQO + 7200] = "Treant Snags";
  gv_alw[lv_aQO + 7300] =
    "We believe that we have discovered how the evil is spreading - through a type of Treant called 'The Snag' which are the oldest and greatest trees in the forest. These 'Snags' are responsible for 'planting' evil seeds which then quickly grow into Seedlings and Saplings. Seek out and eliminate all such abominations as you can find.";
  gv_alw[lv_aQO + 7400] = "ReplaceableTextures\\CommandButtons\\BTNTreant.blp";
  gv_alx[lv_aQO + 7100] = 3500;
  gv_alx[lv_aQO + 7200] = 1500;
  gv_alx[lv_aQO + 7300] = 0;
  gv_alx[lv_aQO + 7500] = f_aKX(10);
  gv_alx[lv_aQO + 7600] = 75;
  lv_aQO = 39;
  gv_alv[lv_aQO + 7000] = gv_akD;
  gv_alw[lv_aQO + 7000] = "* The Cleansing Continued";
  gv_alw[lv_aQO + 7100] = "k";
  gv_alw[lv_aQO + 7200] = "Corrupted Treants";
  gv_alw[lv_aQO + 7300] =
    "Your efforts are clearly making a difference in the swamp, for the animals are slowly returning and a great many birds that once fled the branches of evil trees are once again singing their songs. For each additional 15 Corrupted Treants you remove from the forest I will pay you a handsome bounty.";
  gv_alw[lv_aQO + 7400] =
    "ReplaceableTextures\\CommandButtons\\BTNCorruptedEnt.blp";
  gv_alx[lv_aQO + 7100] = 1500;
  gv_alx[lv_aQO + 7200] = 1250;
  gv_alx[lv_aQO + 7300] = 0;
  gv_alx[lv_aQO + 7500] = f_aKX(15);
  gv_alx[lv_aQO + 7600] = 75;
  lv_aQO = 40;
  gv_alv[lv_aQO + 7000] = gv_akD;
  gv_alw[lv_aQO + 7000] = "The Dark Heart of the Forest";
  gv_alw[lv_aQO + 7100] = "k";
  gv_alw[lv_aQO + 7200] = "Blackspot Raven-Perch";
  gv_alw[lv_aQO + 7300] =
    "We thought that the 'Snags' in the forest were the source of the corruption but I'm sad to say that we were wrong. Deep in the woods to the north of town is the most evil and foul Treant I've ever heard about - Blackspot Raven-Perch.";
  gv_alw[lv_aQO + 7400] =
    "ReplaceableTextures\\CommandButtons\\BTNAncientOfTheMoon.blp";
  gv_alx[lv_aQO + 7100] = 7500;
  gv_alx[lv_aQO + 7200] = 5000;
  gv_alx[lv_aQO + 7300] = 1;
  gv_alx[lv_aQO + 7500] = 1;
  gv_alx[lv_aQO + 7600] = 90;
  lv_aQO = 41;
  gv_alv[lv_aQO + 7000] = gv_akQ;
  gv_alw[lv_aQO + 7000] = "Reestablishing the Route";
  gv_alw[lv_aQO + 7100] = "c";
  gv_alw[lv_aQO + 7200] = "Shipping Manifest";
  gv_alw[lv_aQO + 7300] =
    "Good adventurers, I am in need of our assistance. Thanks to your liberation of the Isle of Crete I can reopen the vital trading route established many years ago. Go see Lysander and find out what provisions he and his people are in need of the most then return here with a manifest. Let him know that my boats will sail from port in 3 days.";
  gv_alw[lv_aQO + 7400] =
    "ReplaceableTextures\\CommandButtons\\BTNBansheeMaster.blp";
  gv_alx[lv_aQO + 7100] = 3500;
  gv_alx[lv_aQO + 7200] = 0;
  gv_alx[lv_aQO + 7300] = 0;
  gv_alx[lv_aQO + 7500] = 1;
  gv_alx[lv_aQO + 7600] = 85;
  lv_aQO = 42;
  gv_alv[lv_aQO + 7000] = gv_akQ;
  gv_alw[lv_aQO + 7000] = "Additional Supplies";
  gv_alw[lv_aQO + 7100] = "c";
  gv_alw[lv_aQO + 7200] = "Grapes, Olives, Wine";
  gv_alw[lv_aQO + 7300] =
    "Lysander has requested some additional supplies that I am in short supply of. I need you to gather for me six bushels of grapes, ten branches of olives and three casks of wine. Return to me when you have located these provisions.";
  gv_alw[lv_aQO + 7400] =
    "ReplaceableTextures\\CommandButtons\\BTNNatureTouchGrow.blp";
  gv_alx[lv_aQO + 7100] = 5000;
  gv_alx[lv_aQO + 7200] = 3500;
  gv_alx[lv_aQO + 7300] = 0;
  gv_alx[lv_aQO + 7500] = 19;
  gv_alx[lv_aQO + 7600] = 85;
  lv_aQO = 43;
  gv_alv[lv_aQO + 7000] = gv_akQ;
  gv_alw[lv_aQO + 7000] = "In Need of Repairs";
  gv_alw[lv_aQO + 7100] = "c";
  gv_alw[lv_aQO + 7200] = "Gloomdire Wood";
  gv_alw[lv_aQO + 7300] =
    "It seems that my boats need a little work before I can send them out to sea for their voyage.  My boatright tells me he needs some wood but that the only wood hard enough to withstand the boiling seas between here and Crete is found only in Gloomdire Swamp. He needs 12 bundles to complete his repairs, but before you try and venture into the swamp you should check with the woodsman.";
  gv_alw[lv_aQO + 7400] =
    "ReplaceableTextures\\CommandButtons\\BTNBundleOfLumber.blp";
  gv_alx[lv_aQO + 7100] = 6500;
  gv_alx[lv_aQO + 7200] = 5000;
  gv_alx[lv_aQO + 7300] = 0;
  gv_alx[lv_aQO + 7500] = f_aKX(12);
  gv_alx[lv_aQO + 7600] = 95;
  lv_aQO = 44;
  gv_alv[lv_aQO + 7000] = gv_akQ;
  gv_alw[lv_aQO + 7000] = "Paying my Dues";
  gv_alw[lv_aQO + 7100] = "c";
  gv_alw[lv_aQO + 7200] = "Merchant's Tithe";
  gv_alw[lv_aQO + 7300] =
    "Praise be to the gods for the rewards they have bestowed upon me and my family. Long ago I realized that not everyone can be as fortunate as we are and that I needed to give something back. Please take this money to the priest in town and tell him to use it to further his works.";
  gv_alw[lv_aQO + 7400] = "ReplaceableTextures\\CommandButtons\\BTNPriest.blp";
  gv_alx[lv_aQO + 7100] = 1000;
  gv_alx[lv_aQO + 7200] = 0;
  gv_alx[lv_aQO + 7300] = 0;
  gv_alx[lv_aQO + 7500] = 1;
  gv_alx[lv_aQO + 7600] = 100;
  lv_aQO = 45;
  gv_alv[lv_aQO + 7000] = gv_akh;
  gv_alw[lv_aQO + 7000] = "Centaur Camps";
  gv_alw[lv_aQO + 7100] = "k";
  gv_alw[lv_aQO + 7200] = "Centaurs,Centaur Camps";
  gv_alw[lv_aQO + 7300] =
    "To the south of our great city lies a barren region that the locals call 'The Centaur Plains' for obvious reasons - the place is overrun with the hideous beasts. We need you to travel into these barrens and seek out their encampments, defeat all the centaurs and return here.";
  gv_alw[lv_aQO + 7400] = "ReplaceableTextures\\CommandButtons\\BTNcentaur.blp";
  gv_alx[lv_aQO + 7100] = 6600;
  gv_alx[lv_aQO + 7200] = 3000;
  gv_alx[lv_aQO + 7300] = 0;
  gv_alx[lv_aQO + 7500] = f_aKX(25) + 11 * 100;
  gv_alx[lv_aQO + 7600] = 90;
  lv_aQO = 46;
  gv_alv[lv_aQO + 7000] = gv_akh;
  gv_alw[lv_aQO + 7000] = "The Centaur War Chief";
  gv_alw[lv_aQO + 7100] = "k";
  gv_alw[lv_aQO + 7200] = "Centaur War Chief";
  gv_alw[lv_aQO + 7300] =
    "Apparently slaying those centaurs and destroying their huts has really made their War Chief angry. Normally I wouldn't ask a few adventurers to go out and face him - I would send a whole garrison of troops to do the job - but I don't have that luxury at the moment.";
  gv_alw[lv_aQO + 7400] =
    "ReplaceableTextures\\CommandButtons\\BTNCentaurKhan.blp";
  gv_alx[lv_aQO + 7100] = 6500;
  gv_alx[lv_aQO + 7200] = 4500;
  gv_alx[lv_aQO + 7300] = 1;
  gv_alx[lv_aQO + 7500] = 1;
  gv_alx[lv_aQO + 7600] = 90;
  lv_aQO = 47;
  gv_alv[lv_aQO + 7000] = gv_akh;
  gv_alw[lv_aQO + 7000] = "* Crude but Effective";
  gv_alw[lv_aQO + 7100] = "c";
  gv_alw[lv_aQO + 7200] = "Centaur Weapons";
  gv_alw[lv_aQO + 7300] =
    "The impending war has spread our resources very thin and we are in need of as many weapons as we can lay our hands on. While the Centaur weapons aren't of the quality we would normally issue our troops they are non the less crudely effective. For each batch of 12 weapons you gather we can equip a garrison of troops. For each garrison we are able to equip this way I will see you properly rewarded.";
  gv_alw[lv_aQO + 7400] =
    "ReplaceableTextures\\CommandButtons\\BTNOrcMeleeUpOne.blp";
  gv_alx[lv_aQO + 7100] = 3500;
  gv_alx[lv_aQO + 7200] = 3000;
  gv_alx[lv_aQO + 7300] = 0;
  gv_alx[lv_aQO + 7500] = f_aKX(12);
  gv_alx[lv_aQO + 7600] = 90;
  lv_aQO = 48;
  gv_alv[lv_aQO + 7000] = gv_akh;
  gv_alw[lv_aQO + 7000] = "Call Home the Captains";
  gv_alw[lv_aQO + 7100] = "c";
  gv_alw[lv_aQO + 7200] = "Spartan Captains";
  gv_alw[lv_aQO + 7300] =
    "Our captains are out recruiting every soldier they can, but it is time for them to return home and prepare for battle. There are five of them scattered throughout the realm, locate them and have them return to the city immediately.";
  gv_alw[lv_aQO + 7400] =
    "ReplaceableTextures\\CommandButtons\\BTNTheCaptain.blp";
  gv_alx[lv_aQO + 7100] = 7500;
  gv_alx[lv_aQO + 7200] = 0;
  gv_alx[lv_aQO + 7300] = 0;
  gv_alx[lv_aQO + 7500] = 5;
  gv_alx[lv_aQO + 7600] = 90;
  lv_aQO = 49;
  gv_alv[lv_aQO + 7000] = gv_akU;
  gv_alw[lv_aQO + 7000] = "Rest their Souls";
  gv_alw[lv_aQO + 7100] = "k";
  gv_alw[lv_aQO + 7200] = "Undead Spirits";
  gv_alw[lv_aQO + 7300] =
    "Gloomdire Swamp was the final resting place to the souls of our fallen, but now they rest no more.  Free their souls from the plague of evil and help them to again find peace.";
  gv_alw[lv_aQO + 7400] = "ReplaceableTextures\\CommandButtons\\BTNGhost.blp";
  gv_alx[lv_aQO + 7100] = 5000;
  gv_alx[lv_aQO + 7200] = 1500;
  gv_alx[lv_aQO + 7300] = 0;
  gv_alx[lv_aQO + 7500] = f_aKX(20);
  gv_alx[lv_aQO + 7600] = 110;
  lv_aQO = 50;
  gv_alv[lv_aQO + 7000] = gv_akU;
  gv_alw[lv_aQO + 7000] = "Flows of Evil";
  gv_alw[lv_aQO + 7100] = "k";
  gv_alw[lv_aQO + 7200] = "Undead Lords";
  gv_alw[lv_aQO + 7300] =
    "Evil flows from three souces; the Lycanthrope, Vampire Lord and Zombie Lord. Ridding us of these seeds of evil will go a long way to restoring order to the marsh.";
  gv_alw[lv_aQO + 7400] =
    "ReplaceableTextures\\CommandButtons\\BTNHeroDreadLord.blp";
  gv_alx[lv_aQO + 7100] = 7500;
  gv_alx[lv_aQO + 7200] = 2000;
  gv_alx[lv_aQO + 7300] = 0;
  gv_alx[lv_aQO + 7500] = 3;
  gv_alx[lv_aQO + 7600] = 110;
  lv_aQO = 51;
  gv_alv[lv_aQO + 7000] = gv_akU;
  gv_alw[lv_aQO + 7000] = "Lady of the Swamp";
  gv_alw[lv_aQO + 7100] = "k";
  gv_alw[lv_aQO + 7200] = "Medusa";
  gv_alw[lv_aQO + 7300] =
    "The inner sanctum of the swamp is home to the legendary Medusa and her protectors. Release this land from her evil grip and we can begin to re-sanctify this land.";
  gv_alw[lv_aQO + 7400] =
    "ReplaceableTextures\\CommandButtons\\BTNNagaSeaWitch.blp";
  gv_alx[lv_aQO + 7100] = 10000;
  gv_alx[lv_aQO + 7200] = 5000;
  gv_alx[lv_aQO + 7300] = 2;
  gv_alx[lv_aQO + 7500] = 1;
  gv_alx[lv_aQO + 7600] = 110;
  lv_aQO = 52;
  gv_alv[lv_aQO + 7000] = gv_akU;
  gv_alw[lv_aQO + 7000] = "* Final Rest";
  gv_alw[lv_aQO + 7100] = "k";
  gv_alw[lv_aQO + 7200] = "Undead Spirits";
  gv_alw[lv_aQO + 7300] =
    "Now that the well springs of evil have been purged from this land the souls who inhabit this land can once again be allowed to rest. For each 25 souls you help lay to rest I will reach into the church coffers and pay you a reward.";
  gv_alw[lv_aQO + 7400] =
    "ReplaceableTextures\\CommandButtons\\BTNSkeletonMage.blp";
  gv_alx[lv_aQO + 7100] = 4000;
  gv_alx[lv_aQO + 7200] = 2500;
  gv_alx[lv_aQO + 7300] = 0;
  gv_alx[lv_aQO + 7500] = f_aKX(25);
  gv_alx[lv_aQO + 7600] = 110;
  lv_aQO = 53;
  gv_alv[lv_aQO + 7000] = gv_akR;
  gv_alw[lv_aQO + 7000] = "A Special Invitation";
  gv_alw[lv_aQO + 7100] = "t";
  gv_alw[lv_aQO + 7200] = "Find Riddlemaster";
  gv_alw[lv_aQO + 7300] =
    "Thank you for setting me free - normally I would have nothing to do with your ilk but a good deed is a good deed. I have no way to repay your generosity other than this; Seek out the Satyr known as the Riddlemaster at his hut in the Satyr Woodlands and tell him that I sent you.";
  gv_alw[lv_aQO + 7400] =
    "ReplaceableTextures\\CommandButtons\\BTNSatyrTrickster.blp";
  gv_alx[lv_aQO + 7100] = 0;
  gv_alx[lv_aQO + 7200] = 0;
  gv_alx[lv_aQO + 7300] = 0;
  gv_alx[lv_aQO + 7500] = 1;
  gv_alx[lv_aQO + 7600] = 110;
  lv_aQO = 54;
  gv_alv[lv_aQO + 7000] = gv_akq;
  gv_alw[lv_aQO + 7000] = "Solve the Riddle";
  gv_alw[lv_aQO + 7100] = "t";
  gv_alw[lv_aQO + 7200] = "Answer the Riddle";
  gv_alw[lv_aQO + 7300] = "*** Riddle to be chosen ***";
  gv_alw[lv_aQO + 7400] =
    "ReplaceableTextures\\CommandButtons\\BTN_Quest_NemeanLion.blp";
  gv_alx[lv_aQO + 7100] = 15000;
  gv_alx[lv_aQO + 7200] = 15000;
  gv_alx[lv_aQO + 7300] = 0;
  gv_alx[lv_aQO + 7500] = 1;
  gv_alx[lv_aQO + 7600] = 110;
  lv_aQO = 55;
  gv_alv[lv_aQO + 7000] = gv_akw;
  gv_alw[lv_aQO + 7000] = "Looking for a Lost Lyre";
  gv_alw[lv_aQO + 7100] = "c";
  gv_alw[lv_aQO + 7200] = "Lyre";
  gv_alw[lv_aQO + 7300] =
    "I have lost it!  As a poet and musician, I'm trying to perfect the lyre invented by Hermes.  If you find my lyre, please return it.  I promise to sing a song in your honor that I'm sure will inspire the troops of Athens.";
  gv_alw[lv_aQO + 7400] =
    "ReplaceableTextures\\CommandButtons\\BTNBoneChimes.blp";
  gv_alx[lv_aQO + 7100] = 2500;
  gv_alx[lv_aQO + 7200] = 2250;
  gv_alx[lv_aQO + 7300] = 0;
  gv_alx[lv_aQO + 7500] = 1;
  gv_alx[lv_aQO + 7600] = 60;
  lv_aQO = 56;
  gv_alv[lv_aQO + 7000] = gv_akn;
  gv_alw[lv_aQO + 7000] = "One Lives and One Dies";
  gv_alw[lv_aQO + 7100] = "t";
  gv_alw[lv_aQO + 7200] = "Make a Choice";
  gv_alw[lv_aQO + 7300] =
    "Two heros are in dire need of help, but there is only time to save one.  Jason is being attacked by King Aeetes and his troops.  Chiron is overrun by centuars led by Nessus.  Please hurry! If you wait too long BOTH will be lost and Athens will surely fall!";
  gv_alw[lv_aQO + 7400] =
    "ReplaceableTextures\\CommandButtons\\BTNGarithos.blp";
  gv_alx[lv_aQO + 7100] = 7500;
  gv_alx[lv_aQO + 7200] = 2500;
  gv_alx[lv_aQO + 7300] = 0;
  gv_alx[lv_aQO + 7500] = 1;
  gv_alx[lv_aQO + 7600] = 100;
  lv_aQO = 57;
  gv_alv[lv_aQO + 7000] = gv_akB;
  gv_alw[lv_aQO + 7000] = "When will my heart (blade) beat again?";
  gv_alw[lv_aQO + 7100] = "t";
  gv_alw[lv_aQO + 7200] = "The Heart Blade";
  gv_alw[lv_aQO + 7300] =
    "The other day I was at the Arena and made a silly bet on one of the gladiators. I didnâ€™t think I could lose and so I carelessly wagered my favorite sword â€“ The Heart Blade. If you could talk to Apeleuthathes and find out what it would take to get my sword back, I know heâ€™s a reasonable man to do business with. If you do that, and keep hush-hush about it Iâ€™ll give you a nice reward. I may even reach into the townâ€™s Equipment Cache and come up with something really special.";
  gv_alw[lv_aQO + 7400] = "ReplaceableTextures\\CommandButtons\\BTNCurse.blp";
  gv_alx[lv_aQO + 7100] = 10000;
  gv_alx[lv_aQO + 7200] = 25000;
  gv_alx[lv_aQO + 7300] = 5;
  gv_alx[lv_aQO + 7500] = 1;
  gv_alx[lv_aQO + 7600] = 120;
  lv_aQO = 58;
  gv_alv[lv_aQO + 7000] = gv_akq;
  gv_alw[lv_aQO + 7000] = "Slay the Lion";
  gv_alw[lv_aQO + 7100] = "k";
  gv_alw[lv_aQO + 7200] = "Nemean Lion";
  gv_alw[lv_aQO + 7300] =
    "Very impressive, now we'll see if your blade is as sharp as your mind. Deep within the Centaur Canyons lives the fabled Nemean Lion. I have awoken him and coaxed him from his cave, battle him if you dare!";
  gv_alw[lv_aQO + 7400] =
    "ReplaceableTextures\\CommandButtons\\BTN_Quest_NemeanLion.blp";
  gv_alx[lv_aQO + 7100] = 15000;
  gv_alx[lv_aQO + 7200] = 15000;
  gv_alx[lv_aQO + 7300] = 0;
  gv_alx[lv_aQO + 7500] = 1;
  gv_alx[lv_aQO + 7600] = 105;
  lv_aQO = 1;
  do {
    if (lv_aQO > gv_alx.getInt(6999)) {
      break;
    }
    if (SubString(gv_alw[lv_aQO + 7000], 0, 1) == "*") {
      gv_alw[lv_aQO + 7200] = S2S("* " + gv_alw[lv_aQO + 7200]);
    }
    lv_aQO = lv_aQO + 1;
  } while (true);
  DestroyTrigger(gv_agp);
}
function f_aQP() {
  var lv_aQQ = 0;
  gv_alQ = CreateMultiboard();
  MultiboardSetColumnCount(gv_alQ, 2);
  MultiboardSetRowCount(gv_alQ, 1);
  MultiboardSetTitleText(gv_alQ, "Active Quests");
  MultiboardSetItemStyleBJ(gv_alQ, 1, 1, true, false);
  MultiboardSetItemStyleBJ(gv_alQ, 2, 1, true, false);
  MultiboardSetItemWidthBJ(gv_alQ, 1, 1, 13);
  MultiboardSetItemValueBJ(gv_alQ, 1, 1, "None right now...");
  gv_alB[lv_aQQ] = CreateQuestBJ(
    0,
    "Completed Quests",
    "None",
    "ReplaceableTextures\\CommandButtons\\BTNSnazzyScroll.blp"
  );
  gv_alW = CreateQuestItemBJ(
    gv_alB[lv_aQQ],
    "|cff00ff00Alive:|r All 8 Titans."
  );
  gv_alX = CreateQuestItemBJ(
    gv_alB[lv_aQQ],
    "|cff00ff00Alive:|r The Queen of the Underworld."
  );
  gv_alY = CreateQuestItemBJ(
    gv_alB[lv_aQQ],
    "|cff00ff00Alive:|r The Lord of Hell."
  );
  QuestSetDiscovered(gv_alB[lv_aQQ], true);
  f_aKx(1);
  f_aKx(11);
  f_aKx(14);
  f_aKx(17);
  f_aKx(21);
  f_aKx(23);
  f_aKx(26);
  f_aKx(28);
  f_aKx(31);
  f_aKx(34);
  f_aKx(37);
  f_aKx(41);
  f_aKx(45);
  f_aKx(49);
  f_aKx(53);
  f_aKx(55);
  f_aKx(56);
  ShowUnit(gv_akp, false);
  ShowUnit(gv_akT, false);
  ShowUnit(gv_alc, false);
  ShowUnit(gv_akv, false);
  ShowUnit(gv_alb, false);
  ShowUnit(gv_akz, false);
  ShowUnit(gv_akZ, false);
  ShowUnit(gv_akJ, false);
  ShowUnit(gv_akO, false);
  ShowUnit(gv_akI, false);
  ShowUnit(gv_akY, false);
  ShowUnit(gv_akN, false);
  ShowUnit(gv_akR, false);
  ShowUnit(gv_akx, false);
  ShowUnit(gv_akM, false);
  ShowUnit(gv_akE, false);
  ShowUnit(gv_akt, false);
  SetUnitInvulnerable(gv_ald, true);
  DestroyTrigger(gv_agq);
}
function f_aQR() {
  MultiboardDisplay(gv_alP, false);
  MultiboardDisplay(gv_alQ, true);
  MultiboardMinimize(gv_alQ, false);
  DestroyTrigger(gv_agr);
}
function f_aQS() {
  var lv_aQT = 0;
  var lv_aQU = null;
  var lv_aQV = GetRandomLocInRect(gv_afc);
  var lv_aQW = GetItemTypeId(GetManipulatedItem());
  var lv_aQX = GetTriggerPlayer();
  var lv_aQY = GetPlayerId(lv_aQX);
  var lv_aQZ;
  if (lv_aQW == "I057") {
    f_aKF(17);
  }
  if (lv_aQW == "I058") {
    f_aKF(18);
  }
  if (lv_aQW == "I059") {
    lv_aQT = 1;
    do {
      if (lv_aQT > 12) {
        break;
      }
      lv_aQU = CreateUnit(
        Player(8),
        "n000",
        I2R(GetRandomInt(544, 832)),
        I2R(GetRandomInt(4768, 5120)),
        0.0
      );
      lv_aQV = GetRectCenter(gv_afe);
      IssuePointOrderByIdLoc(lv_aQU, 851986, lv_aQV);
      lv_aQT = lv_aQT + 1;
    } while (true);
    lv_aQV = GetRectCenter(gv_afe);
    lv_aQU = CreateUnitAtLoc(
      gv_amY,
      gv_alx.getInt(GetRandomInt(416, 435)),
      lv_aQV,
      0.0
    );
    lv_aQU = CreateUnitAtLoc(
      gv_amY,
      gv_alx.getInt(GetRandomInt(416, 435)),
      lv_aQV,
      0.0
    );
    lv_aQU = CreateUnitAtLoc(
      gv_amY,
      gv_alx.getInt(GetRandomInt(416, 435)),
      lv_aQV,
      0.0
    );
    lv_aQU = CreateUnitAtLoc(
      gv_amY,
      gv_alx.getInt(GetRandomInt(416, 435)),
      lv_aQV,
      0.0
    );
    lv_aQV = GetRectCenter(gv_aff);
    lv_aQU = CreateUnitAtLoc(
      gv_amY,
      gv_alx.getInt(GetRandomInt(416, 435)),
      lv_aQV,
      0.0
    );
    lv_aQU = CreateUnitAtLoc(
      gv_amY,
      gv_alx.getInt(GetRandomInt(416, 435)),
      lv_aQV,
      0.0
    );
    lv_aQU = CreateUnitAtLoc(
      gv_amY,
      gv_alx.getInt(GetRandomInt(416, 435)),
      lv_aQV,
      0.0
    );
    lv_aQV = GetRectCenter(gv_afg);
    lv_aQU = CreateUnitAtLoc(
      gv_amY,
      gv_alx.getInt(GetRandomInt(416, 435)),
      lv_aQV,
      0.0
    );
    lv_aQU = CreateUnitAtLoc(
      gv_amY,
      gv_alx.getInt(GetRandomInt(416, 435)),
      lv_aQV,
      0.0
    );
    lv_aQV = GetRectCenter(gv_afd);
    lv_aQU = CreateUnitAtLoc(
      gv_amY,
      gv_alx.getInt(GetRandomInt(416, 435)),
      lv_aQV,
      0.0
    );
  }
  if (lv_aQW == "I05B") {
    f_aKF(24);
  }
  if (lv_aQW == "I05C") {
    f_aKF(28);
  }
  if (lv_aQW == "I05E") {
    f_aKF(36);
  }
  if (lv_aQW == "I05G" || lv_aQW == "I05H" || lv_aQW == "I05I") {
    f_aKF(42);
  }
  if (lv_aQW == "I05J") {
    f_aKF(43);
  }
  if (lv_aQW == "I05K") {
    f_aKF(47);
  }
  if (gv_alx.getInt(56 + 7000) == 2) {
    if (lv_aQW == "I05T" || lv_aQW == "I05U") {
      ShowUnit(gv_akn, false);
      if (lv_aQW == "I05T") {
        gv_alw[56 + 7200] = "Save Jason";
        gv_alv[89] = CreateUnit(Player(8), "uabo", 6850, 1200, 0.0);
      }
      if (lv_aQW == "I05U") {
        gv_alw[56 + 7200] = "Save Chiron";
        gv_alv[89] = CreateUnit(Player(8), "edot", 6850, 1200, 0.0);
      }
      lv_aQT = 0;
      do {
        if (lv_aQT > 7) {
          break;
        }
        if (RectContainsUnit(gv_afh, gv_alv[lv_aQT])) {
          DestroyEffect(
            AddSpecialEffectTarget(
              "Abilities\\Spells\\Human\\MassTeleport\\MassTeleportCaster.mdl",
              gv_alv[lv_aQT],
              "origin"
            )
          );
          SetUnitPosition(gv_alv[lv_aQT], 6850, 1200);
          PanCameraToTimedForPlayer(Player(lv_aQT), 6850, 1200, 0);
        }
        lv_aQT = lv_aQT + 1;
      } while (true);
      f_aKq();
      EnableTrigger(gv_agV);
      TriggerRegisterTimerEventPeriodic(gv_agV, 5);
      EnableTrigger(gv_agW);
      ExecuteFunc("f_aRa");
    }
  }
  if (gv_alx.getInt(57 + 7000) == 2) {
    if (lv_aQW == "I05Y" && GetWidgetLife(gv_akt) > 0.405) {
      gv_alx[188] = 4;
      gv_alx[168] = lv_aQY + 8;
      SetUnitPosition(gv_akt, GetRectCenterX(gv_afp), GetRectCenterY(gv_afp));
      SetPlayerAllianceStateBJ(Player(lv_aQY), Player(9), 0);
      SetPlayerAllianceStateBJ(Player(9), Player(lv_aQY), 0);
      SetUnitPosition(
        gv_alv[lv_aQY],
        GetRectCenterX(gv_afo),
        GetRectCenterY(gv_afo)
      );
      PanCameraToTimedForPlayer(
        Player(lv_aQY),
        GetRectCenterX(gv_afo),
        GetRectCenterY(gv_afo),
        0
      );
      IssueTargetOrderById(gv_akt, gv_aas, gv_alv[lv_aQY]);
    }
    if (lv_aQW == "I05Z") {
      lv_aQT = 0;
      do {
        if (lv_aQT > 11) {
          break;
        }
        if (lv_aQT < 6) {
          lv_aQZ = UnitItemInSlot(gv_alv[lv_aQY], lv_aQT);
        } else {
          lv_aQZ = UnitItemInSlot(gv_alv[lv_aQY + 8], lv_aQT - 6);
        }
        if (GetItemTypeId(lv_aQZ) == "I01E") {
          if (GetItemPlayer(lv_aQZ) == Player(lv_aQY)) {
            f_aMm(lv_aQX, "Those remains of the lion are so NOT fresh.");
          } else {
            RemoveItem(lv_aQZ);
            UnitAddItemByIdSwapped("I060", gv_alv[lv_aQY + 8]);
            f_aKF(57);
            lv_aQT = 13;
          }
        }
        lv_aQT = lv_aQT + 1;
      } while (true);
      if (lv_aQT < 13) {
        f_aMm(lv_aQX, "Listen assclown, bring me real remains from the lion.");
      }
    }
  }
  lv_aQU = null;
  lv_aQX = null;
  lv_aQZ = null;
  RemoveLocation(lv_aQV);
  lv_aQV = null;
}
function f_aRb() {
  var lv_aRc;
  var lv_aRd;
  var lv_aRe;
  var lv_aRf = 200 + GetRandomInt(0, 4);
  lv_aRd = GetUnitX(gv_alv[lv_aRf]) + 50;
  lv_aRe = GetUnitY(gv_alv[lv_aRf]) + 65;
  if (lv_aRf == 200) {
    lv_aRc = gv_alw[500 + GetRandomInt(0, 16)];
  }
  if (lv_aRf == 201) {
    lv_aRc = gv_alw[500 + GetRandomInt(50, 62)];
  }
  if (lv_aRf == 202) {
    lv_aRc = gv_alw[500 + GetRandomInt(75, 84)];
  }
  if (lv_aRf == 203) {
    lv_aRc = gv_alw[500 + GetRandomInt(85, 96)];
  }
  f_aMp(null, lv_aRc, 255, 215, 0, lv_aRd, lv_aRe, 0.0, 0.0, 19, 10);
}
function f_aRg() {
  f_aJk(GetExpiredTimer());
  gv_acN = CreateUnit(
    Player(11),
    "Nfir",
    GetRectCenterX(gv_afH),
    GetRectCenterY(gv_afH),
    225
  );
  SuspendHeroXP(gv_acN, true);
  f_aOF();
}
function f_aRh() {
  var lv_aRi = 0;
  var lv_aRj = 0;
  var lv_aRk = 0;
  var lv_aRl = GetRectCenter(gv_acT);
  var lv_aRm = GetTriggerUnit();
  var lv_aRn;
  lv_aRi = f_aKN(lv_aRm);
  if (f_aKR(lv_aRm, lv_aRi) == false) {
    return;
  }
  lv_aRk = 1;
  if (gv_alx.getInt(lv_aRk + 7000) == 1) {
    f_aKz(lv_aRk, lv_aRi);
    if (gv_alx.getInt(lv_aRk + 7000) == 2) {
      ModifyGateBJ(1, gv_aln);
      lv_aRl = GetRectCenter(gv_adR);
      PingMinimapLocForForce(gv_alH, lv_aRl, 15);
    }
  }
  if (gv_alx.getInt(lv_aRk + 7000) == 3) {
    f_aKH(lv_aRk);
    f_aKx(2);
  }
  lv_aRk = 2;
  if (gv_alx.getInt(lv_aRk + 7000) == 1) {
    f_aKz(lv_aRk, lv_aRi);
    if (gv_alx.getInt(lv_aRk + 7000) == 2) {
      ModifyGateBJ(1, gv_alk);
      lv_aRl = GetRectCenter(gv_afr);
      PingMinimapLocForForce(gv_alH, lv_aRl, 15);
    }
  }
  if (gv_alx.getInt(lv_aRk + 7000) == 3) {
    f_aKH(lv_aRk);
    f_aKx(3);
  }
  lv_aRk = 3;
  if (gv_alx.getInt(lv_aRk + 7000) == 1) {
    f_aKz(lv_aRk, lv_aRi);
    if (gv_alx.getInt(lv_aRk + 7000) == 2) {
      ModifyGateBJ(1, gv_all);
      lv_aRl = GetRectCenter(gv_afD);
      PingMinimapLocForForce(gv_alH, lv_aRl, 15);
    }
  }
  if (gv_alx.getInt(lv_aRk + 7000) == 3) {
    f_aKH(lv_aRk);
    f_aKx(4);
  }
  lv_aRk = 4;
  if (gv_alx.getInt(lv_aRk + 7000) == 1) {
    f_aKz(lv_aRk, lv_aRi);
    if (gv_alx.getInt(lv_aRk + 7000) == 2) {
      ModifyGateBJ(1, gv_alp);
      lv_aRl = GetRectCenter(gv_aeC);
      PingMinimapLocForForce(gv_alH, lv_aRl, 15);
    }
  }
  if (gv_alx.getInt(lv_aRk + 7000) == 3) {
    f_aKH(lv_aRk);
    f_aKx(5);
  }
  lv_aRk = 5;
  if (gv_alx.getInt(lv_aRk + 7000) == 1) {
    f_aKz(lv_aRk, lv_aRi);
    if (gv_alx.getInt(lv_aRk + 7000) == 2) {
      ModifyGateBJ(1, gv_alg);
      lv_aRl = GetRectCenter(gv_aeQ);
      PingMinimapLocForForce(gv_alH, lv_aRl, 15);
    }
  }
  if (gv_alx.getInt(lv_aRk + 7000) == 3) {
    f_aKH(lv_aRk);
    f_aKx(6);
  }
  lv_aRk = 6;
  if (gv_alx.getInt(lv_aRk + 7000) == 1) {
    f_aKz(lv_aRk, lv_aRi);
    if (gv_alx.getInt(lv_aRk + 7000) == 2) {
      EnumDestructablesInRectAll(gv_afN, f_aNZ);
      lv_aRl = GetRectCenter(gv_afq);
      PingMinimapLocForForce(gv_alH, lv_aRl, 15);
    }
  }
  if (gv_alx.getInt(lv_aRk + 7000) == 3) {
    f_aKH(lv_aRk);
    f_aKx(7);
    f_aKx(57);
  }
  lv_aRk = 7;
  if (gv_alx.getInt(lv_aRk + 7000) == 1) {
    f_aKz(lv_aRk, lv_aRi);
    if (gv_alx.getInt(lv_aRk + 7000) == 2) {
      ModifyGateBJ(1, gv_alf);
      lv_aRl = GetRectCenter(gv_aea);
      PingMinimapLocForForce(gv_alH, lv_aRl, 15);
    }
  }
  if (gv_alx.getInt(lv_aRk + 7000) == 3) {
    f_aKH(lv_aRk);
    f_aKx(8);
  }
  lv_aRk = 8;
  if (gv_alx.getInt(lv_aRk + 7000) == 1) {
    f_aKz(lv_aRk, lv_aRi);
    if (gv_alx.getInt(lv_aRk + 7000) == 2) {
      ModifyGateBJ(1, gv_alq);
      lv_aRl = GetRectCenter(gv_adD);
      PingMinimapLocForForce(gv_alH, lv_aRl, 15);
    }
  }
  if (gv_alx.getInt(lv_aRk + 7000) == 3) {
    f_aKH(lv_aRk);
    f_aKx(9);
  }
  lv_aRk = 9;
  if (gv_alx.getInt(lv_aRk + 7000) == 1) {
    f_aKz(lv_aRk, lv_aRi);
    if (gv_alx.getInt(lv_aRk + 7000) == 2) {
      KillDestructable(gv_ali);
      lv_aRl = GetRectCenter(gv_adL);
      PingMinimapLocForForce(gv_alH, lv_aRl, 15);
    }
  }
  if (gv_alx.getInt(lv_aRk + 7000) == 3) {
    f_aKH(lv_aRk);
    f_aKx(10);
  }
  lv_aRk = 10;
  if (gv_alx.getInt(lv_aRk + 7000) == 1) {
    f_aKz(lv_aRk, lv_aRi);
    if (gv_alx.getInt(lv_aRk + 7000) == 2) {
      DisplayTimedTextToForce(
        gv_alH,
        5,
        "|cff00ff00Serius:|r Our seers tell us that we only got about a minute till Hades arrive!"
      );
      lv_aRl = GetRectCenter(gv_afH);
      PingMinimapLocForForce(gv_alH, lv_aRl, 5);
      TimerStart(f_aJj(), 60, false, f_aRg);
    }
  }
  if (gv_alx.getInt(lv_aRk + 7000) == 3) {
    f_aKH(lv_aRk);
  }
  lv_aRk = 57;
  if (gv_alx.getInt(lv_aRk + 7000) == 1) {
    f_aKz(lv_aRk, lv_aRi);
    PauseUnit(gv_akt, false);
    ShowUnit(gv_akt, true);
  }
  if (gv_alx.getInt(lv_aRk + 7000) == 3) {
    lv_aRj = 0;
    do {
      if (lv_aRj > 11) {
        break;
      }
      if (lv_aRj < 6) {
        lv_aRn = UnitItemInSlot(gv_alv[lv_aRi], lv_aRj);
      } else {
        lv_aRn = UnitItemInSlot(gv_alv[lv_aRi + 8], lv_aRj - 6);
      }
      if (GetItemTypeId(lv_aRn) == "I060") {
        RemoveItem(lv_aRn);
        f_aKH(lv_aRk);
        if (GetRandomInt(1, 10) <= 3) {
          UnitAddItemByIdSwapped(
            gv_ama.getInt(365 + GetRandomInt(0, 5)),
            gv_alv[lv_aRi + 8]
          );
        }
        lv_aRj = 13;
      }
      lv_aRj = lv_aRj + 1;
    } while (true);
  }
  lv_aRm = null;
  lv_aRn = null;
  RemoveLocation(lv_aRl);
  lv_aRl = null;
}
function f_aRo() {
  var lv_aRp = 0;
  var lv_aRq = 0;
  var lv_aRr = 0;
  var lv_aRs = GetTriggerUnit();
  lv_aRp = f_aKN(lv_aRs);
  if (f_aKR(lv_aRs, lv_aRp) == false) {
    return;
  }
  lv_aRr = 11;
  if (gv_alx.getInt(lv_aRr + 7000) == 1) {
    f_aKz(lv_aRr, lv_aRp);
  }
  if (gv_alx.getInt(lv_aRr + 7000) == 3) {
    f_aKH(lv_aRr);
    f_aKx(12);
  }
  lv_aRr = 12;
  if (gv_alx.getInt(lv_aRr + 7000) == 1) {
    f_aKz(lv_aRr, lv_aRp);
  }
  if (gv_alx.getInt(lv_aRr + 7000) == 3) {
    f_aKH(lv_aRr);
    f_aKx(13);
  }
  lv_aRr = 13;
  if (gv_alx.getInt(lv_aRr + 7000) == 1) {
    f_aKz(lv_aRr, lv_aRp);
  }
  if (gv_alx.getInt(lv_aRr + 7000) == 3) {
    f_aKH(lv_aRr);
    f_aKx(14);
  }
  lv_aRr = 14;
  if (gv_alx.getInt(lv_aRr + 7000) == 1) {
    f_aKz(lv_aRr, lv_aRp);
  }
  if (gv_alx.getInt(lv_aRr + 7000) == 3) {
    f_aKH(lv_aRr);
    f_aKx(15);
  }
  lv_aRr = 15;
  if (gv_alx.getInt(lv_aRr + 7000) == 1) {
    f_aKz(lv_aRr, lv_aRp);
  }
  if (gv_alx.getInt(lv_aRr + 7000) == 3) {
    f_aKH(lv_aRr);
    f_aKx(16);
  }
  lv_aRr = 16;
  if (gv_alx.getInt(lv_aRr + 7000) == 1) {
    f_aKz(lv_aRr, lv_aRp);
    if (gv_alx.getInt(lv_aRr + 7000) == 2) {
      ShowUnit(gv_akp, true);
      lv_aRq = 1;
      do {
        if (lv_aRq > 3) {
          break;
        }
        CreateUnit(
          Player(10),
          "nban",
          GetUnitX(gv_akp),
          GetUnitY(gv_akp),
          GetRandomReal(0, 360)
        );
        lv_aRq = lv_aRq + 1;
      } while (true);
      lv_aRq = 1;
      do {
        if (lv_aRq > 3) {
          break;
        }
        CreateUnit(
          Player(10),
          "nass",
          GetUnitX(gv_akp),
          GetUnitY(gv_akp),
          GetRandomReal(0, 360)
        );
        lv_aRq = lv_aRq + 1;
      } while (true);
    }
  }
  if (gv_alx.getInt(lv_aRr + 7000) == 3) {
    f_aKH(lv_aRr);
  }
  lv_aRs = null;
}
function f_aRt() {
  var lv_aRu = 0;
  var lv_aRv = 0;
  var lv_aRw = 0;
  var lv_aRx = 0;
  var lv_aRy = GetTriggerUnit();
  var lv_aRz = GetRandomLocInRect(gv_afc);
  lv_aRu = f_aKN(lv_aRy);
  if (f_aKR(lv_aRy, lv_aRu) == false) {
    return;
  }
  lv_aRw = 17;
  if (gv_alx.getInt(lv_aRw + 7000) == 1) {
    f_aKz(lv_aRw, lv_aRu);
  }
  if (gv_alx.getInt(lv_aRw + 7000) == 3) {
    f_aKH(lv_aRw);
    f_aKx(18);
  }
  lv_aRw = 18;
  if (gv_alx.getInt(lv_aRw + 7000) == 1) {
    f_aKz(lv_aRw, lv_aRu);
  }
  if (gv_alx.getInt(lv_aRw + 7000) == 3) {
    lv_aRv = 0;
    do {
      if (lv_aRv > 12) {
        break;
      }
      lv_aRv = lv_aRv + 1;
      if (lv_aRv <= 6) {
        lv_aRx = GetItemTypeId(UnitItemInSlot(gv_alv[lv_aRu], lv_aRv));
      } else {
        lv_aRx = GetItemTypeId(UnitItemInSlot(gv_alv[lv_aRu + 8], lv_aRv - 6));
      }
      if (lv_aRx == "I058") {
        if (lv_aRv <= 6) {
          RemoveItem(UnitItemInSlot(gv_alv[lv_aRu], lv_aRv));
        } else {
          RemoveItem(UnitItemInSlot(gv_alv[lv_aRu + 8], lv_aRv - 6));
        }
        f_aKH(lv_aRw);
        f_aKx(19);
        lv_aRv = 13;
      }
    } while (true);
  }
  lv_aRw = 19;
  if (gv_alx.getInt(lv_aRw + 7000) == 1) {
    f_aKz(lv_aRw, lv_aRu);
    ShowUnit(gv_akT, true);
  }
  if (gv_alx.getInt(lv_aRw + 7000) == 3) {
    f_aKH(lv_aRw);
    f_aKx(20);
  }
  lv_aRw = 20;
  if (gv_alx.getInt(lv_aRw + 7000) == 1) {
    f_aKz(lv_aRw, lv_aRu);
    if (gv_alx.getInt(lv_aRw + 7000) == 2) {
      UnitAddItemByIdSwapped("I05A", gv_alv[lv_aRu + 8]);
      lv_aRy = gv_akV;
      lv_aRz = GetRandomLocInRect(gv_adv);
      IssuePointOrderByIdLoc(lv_aRy, 851986, lv_aRz);
    }
  }
  if (gv_alx.getInt(lv_aRw + 7000) == 3) {
    f_aKH(lv_aRw);
  }
  lv_aRy = null;
  RemoveLocation(lv_aRz);
  lv_aRz = null;
}
function f_aRA() {
  var lv_aRB = 0;
  var lv_aRC = 0;
  var lv_aRD = 0;
  var lv_aRE = 0;
  var lv_aRF;
  var lv_aRG = GetTriggerUnit();
  lv_aRB = f_aKN(lv_aRG);
  if (f_aKR(lv_aRG, lv_aRB) == false) {
    return;
  }
  lv_aRD = 20;
  if (gv_alx.getInt(lv_aRD + 7000) == 2) {
    lv_aRC = 0;
    do {
      if (lv_aRC > 11) {
        break;
      }
      if (lv_aRC < 6) {
        lv_aRF = UnitItemInSlot(gv_alv[lv_aRB], lv_aRC);
      } else {
        lv_aRF = UnitItemInSlot(gv_alv[lv_aRB + 8], lv_aRC - 6);
      }
      lv_aRE = GetItemTypeId(lv_aRF);
      if (lv_aRE == "I05A") {
        RemoveItem(lv_aRF);
        f_aKF(lv_aRD);
        lv_aRC = 13;
      }
      lv_aRC = lv_aRC + 1;
    } while (true);
  }
  lv_aRF = null;
  lv_aRG = null;
}
function f_aRH() {
  var lv_aRI = 0;
  var lv_aRJ = 0;
  var lv_aRK = 0;
  var lv_aRL = GetTriggerUnit();
  lv_aRI = f_aKN(lv_aRL);
  if (f_aKR(lv_aRL, lv_aRI) == false) {
    return;
  }
  lv_aRK = 21;
  if (gv_alx.getInt(lv_aRK + 7000) == 1) {
    f_aKz(lv_aRK, lv_aRI);
  }
  if (gv_alx.getInt(lv_aRK + 7000) == 3) {
    f_aKH(lv_aRK);
    f_aKx(22);
  }
  lv_aRK = 22;
  if (gv_alx.getInt(lv_aRK + 7000) == 1) {
    f_aKz(lv_aRK, lv_aRI);
    if (gv_alx.getInt(lv_aRK + 7000) == 2) {
      ShowUnitShow(gv_alc);
    }
  }
  if (gv_alx.getInt(lv_aRK + 7000) == 3) {
    f_aKH(lv_aRK);
  }
  lv_aRK = 23;
  if (gv_alx.getInt(lv_aRK + 7000) == 1) {
    f_aKz(lv_aRK, lv_aRI);
  }
  if (gv_alx.getInt(lv_aRK + 7000) == 3) {
    f_aKH(lv_aRK);
    f_aKx(24);
  }
  lv_aRK = 24;
  if (gv_alx.getInt(lv_aRK + 7000) == 1) {
    f_aKz(lv_aRK, lv_aRI);
  }
  if (gv_alx.getInt(lv_aRK + 7000) == 3) {
    f_aKH(lv_aRK);
    if (gv_alx.getInt(25 + 7000) == 0) {
      f_aKx(25);
    }
  }
  lv_aRK = 25;
  if (gv_alx.getInt(lv_aRK + 7000) == 1) {
    f_aKz(lv_aRK, lv_aRI);
    if (gv_alx.getInt(lv_aRK + 7000) == 2) {
      ShowUnit(gv_akv, true);
    }
  }
  if (gv_alx.getInt(lv_aRK + 7000) == 3) {
    f_aKH(lv_aRK);
  }
  lv_aRL = null;
}
function f_aRM() {
  var lv_aRN = 0;
  var lv_aRO = 0;
  var lv_aRP = 0;
  var lv_aRQ = GetTriggerUnit();
  lv_aRN = f_aKN(lv_aRQ);
  if (f_aKR(lv_aRQ, lv_aRN) == false) {
    return;
  }
  lv_aRP = 26;
  if (gv_alx.getInt(lv_aRP + 7000) == 1) {
    f_aKz(lv_aRP, lv_aRN);
    ShowUnit(gv_alb, true);
  }
  if (gv_alx.getInt(lv_aRP + 7000) == 3) {
    f_aKH(lv_aRP);
    f_aKx(27);
  }
  lv_aRP = 27;
  if (gv_alx.getInt(lv_aRP + 7000) == 1) {
    f_aKz(lv_aRP, lv_aRN);
  }
  lv_aRQ = null;
}
function f_aRR() {
  var lv_aRS = 0;
  var lv_aRT = 0;
  var lv_aRU = 0;
  var lv_aRV;
  var lv_aRW = GetTriggerUnit();
  lv_aRS = f_aKN(lv_aRW);
  if (f_aKR(lv_aRW, lv_aRS) == false) {
    return;
  }
  if (gv_alx.getInt(27 + 7000) == 2) {
    f_aKF(27);
    f_aKH(27);
    f_aKx(28);
  }
  lv_aRU = 28;
  if (gv_alx.getInt(lv_aRU + 7000) == 1) {
    f_aKz(lv_aRU, lv_aRS);
  }
  if (gv_alx.getInt(lv_aRU + 7000) == 3) {
    f_aKH(lv_aRU);
    f_aKx(29);
    KillDestructable(gv_alm);
    KillDestructable(gv_alh);
    KillDestructable(gv_alj);
  }
  lv_aRU = 29;
  if (gv_alx.getInt(lv_aRU + 7000) == 1) {
    f_aKz(lv_aRU, lv_aRS);
  }
  if (gv_alx.getInt(lv_aRU + 7000) == 2) {
    lv_aRT = 0;
    do {
      if (lv_aRT > 11) {
        break;
      }
      if (lv_aRT < 6) {
        lv_aRV = UnitItemInSlot(gv_alv[lv_aRS], lv_aRT);
      } else {
        lv_aRV = UnitItemInSlot(gv_alv[lv_aRS + 8], lv_aRT - 6);
      }
      if (GetItemTypeId(lv_aRV) == "I05D") {
        RemoveItem(lv_aRV);
        f_aKF(lv_aRU);
        lv_aRT = 13;
      }
      lv_aRT = lv_aRT + 1;
    } while (true);
  }
  if (gv_alx.getInt(lv_aRU + 7000) == 3) {
    f_aKH(lv_aRU);
    f_aKx(30);
  }
  lv_aRU = 30;
  if (gv_alx.getInt(lv_aRU + 7000) == 1) {
    f_aKz(lv_aRU, lv_aRS);
    if (gv_alx.getInt(lv_aRU + 7000) == 2) {
      ShowUnit(gv_akI, true);
      EnableTrigger(gv_aje);
    }
  }
  if (gv_alx.getInt(lv_aRU + 7000) == 3) {
    f_aKH(lv_aRU);
  }
  lv_aRW = null;
}
function f_aRX() {
  var lv_aRY = 0;
  var lv_aRZ = 0;
  var lv_aSa = GetTriggerUnit();
  lv_aRY = f_aKN(lv_aSa);
  if (f_aKR(lv_aSa, lv_aRY) == false) {
    return;
  }
  lv_aRZ = 31;
  if (gv_alx.getInt(lv_aRZ + 7000) == 1) {
    f_aKz(lv_aRZ, lv_aRY);
  }
  if (gv_alx.getInt(lv_aRZ + 7000) == 3) {
    f_aKH(lv_aRZ);
    f_aKx(32);
  }
  lv_aRZ = 32;
  if (gv_alx.getInt(lv_aRZ + 7000) == 1) {
    f_aKz(lv_aRZ, lv_aRY);
    if (gv_alx.getInt(lv_aRZ + 7000) == 2) {
      ShowUnitShow(gv_akz);
    }
  }
  if (gv_alx.getInt(lv_aRZ + 7000) == 3) {
    f_aKH(lv_aRZ);
    f_aKx(33);
  }
  lv_aRZ = 33;
  if (gv_alx.getInt(lv_aRZ + 7000) == 1) {
    f_aKz(lv_aRZ, lv_aRY);
  }
  if (gv_alx.getInt(lv_aRZ + 7000) == 3) {
    f_aKH(lv_aRZ);
  }
  lv_aRZ = 41;
  if (gv_alx.getInt(lv_aRZ + 7000) == 2) {
    DestroyEffect(gv_aly[lv_aRZ + 7000]);
    UnitAddItemByIdSwapped("I05F", gv_alv[lv_aRY + 8]);
    f_aKF(lv_aRZ);
  }
  lv_aSa = null;
}
function f_aSb() {
  var lv_aSc = 0;
  var lv_aSd = 0;
  var lv_aSe = 0;
  var lv_aSf = 0;
  var lv_aSg;
  var lv_aSh = GetTriggerUnit();
  lv_aSc = f_aKN(lv_aSh);
  if (f_aKR(lv_aSh, lv_aSc) == false) {
    return;
  }
  lv_aSe = 55;
  if (gv_alx.getInt(lv_aSe + 7000) == 1) {
    if (gv_alx.getInt(lv_aSe + 7600) > GetHeroLevel(gv_alv[lv_aSc])) {
      f_aMm(
        Player(lv_aSc),
        gv_alw[75] +
          (S2S(GetUnitName(gv_alv[lv_aSe + 7000]) + "|r - ") +
            gv_alw[110 + GetRandomInt(0, 6)])
      );
      return;
    } else {
      f_aKz(lv_aSe, lv_aSc);
      ShowUnit(gv_akx, true);
      ShowUnit(gv_akM, true);
      ShowUnit(gv_akE, true);
    }
  }
  if (gv_alx.getInt(lv_aSe + 7000) == 3) {
    lv_aSd = 0;
    do {
      if (lv_aSd > 11) {
        break;
      }
      if (lv_aSd < 6) {
        lv_aSg = UnitItemInSlot(gv_alv[lv_aSc], lv_aSd);
      } else {
        lv_aSg = UnitItemInSlot(gv_alv[lv_aSc + 8], lv_aSd - 6);
      }
      lv_aSf = GetItemTypeId(lv_aSg);
      if (lv_aSf == "I05W") {
        RemoveItem(lv_aSg);
        f_aKH(lv_aSe);
        SetPlayerHandicap(Player(8), 1.5);
        SetPlayerTechResearchedSwap("Rhme", 3, Player(8));
        DisplayTimedTextToForce(
          bj_FORCE_ALL_PLAYERS,
          20,
          S2S("   " + gv_alw[75]) +
            (GetUnitName(gv_alv[lv_aSe + 7000]) +
              " sings a song so powerful, Athenian troops are upgraded.")
        );
        lv_aSd = 13;
      }
      lv_aSd = lv_aSd + 1;
    } while (true);
  }
  lv_aSh = null;
}
function f_aSi() {
  var lv_aSj = 0;
  var lv_aSk = 0;
  var lv_aSl = 0;
  var lv_aSm = GetTriggerUnit();
  var lv_aSn = GetRectCenter(gv_aes);
  lv_aSj = f_aKN(lv_aSm);
  if (f_aKR(lv_aSm, lv_aSj) == false) {
    return;
  }
  lv_aSl = 34;
  if (gv_alx.getInt(lv_aSl + 7000) == 1) {
    f_aKz(lv_aSl, lv_aSj);
  }
  if (gv_alx.getInt(lv_aSl + 7000) == 3) {
    f_aKH(lv_aSl);
    f_aKx(35);
  }
  lv_aSl = 35;
  if (gv_alx.getInt(lv_aSl + 7000) == 1) {
    f_aKz(lv_aSl, lv_aSj);
    if (gv_alx.getInt(lv_aSl + 7000) == 2) {
      lv_aSm = CreateUnitAtLoc(Player(9), "hbew", lv_aSn, 235);
      gv_alv[89] = lv_aSm;
      lv_aSn = GetRectCenter(gv_afE);
      lv_aSm = CreateUnitAtLoc(
        gv_amY,
        gv_alx.getInt(GetRandomInt(468, 487)),
        lv_aSn,
        0.0
      );
      lv_aSm = CreateUnitAtLoc(
        gv_amY,
        gv_alx.getInt(GetRandomInt(468, 487)),
        lv_aSn,
        0.0
      );
      lv_aSm = CreateUnitAtLoc(
        gv_amY,
        gv_alx.getInt(GetRandomInt(468, 487)),
        lv_aSn,
        0.0
      );
      lv_aSm = CreateUnitAtLoc(
        gv_amY,
        gv_alx.getInt(GetRandomInt(468, 487)),
        lv_aSn,
        0.0
      );
      lv_aSn = GetRectCenter(gv_afF);
      lv_aSm = CreateUnitAtLoc(
        gv_amY,
        gv_alx.getInt(GetRandomInt(468, 487)),
        lv_aSn,
        0.0
      );
      lv_aSm = CreateUnitAtLoc(
        gv_amY,
        gv_alx.getInt(GetRandomInt(468, 487)),
        lv_aSn,
        0.0
      );
      lv_aSm = CreateUnitAtLoc(
        gv_amY,
        gv_alx.getInt(GetRandomInt(468, 487)),
        lv_aSn,
        0.0
      );
      lv_aSn = GetRectCenter(gv_afG);
      lv_aSm = CreateUnitAtLoc(
        gv_amY,
        gv_alx.getInt(GetRandomInt(468, 487)),
        lv_aSn,
        0.0
      );
      lv_aSm = CreateUnitAtLoc(
        gv_amY,
        gv_alx.getInt(GetRandomInt(468, 487)),
        lv_aSn,
        0.0
      );
      lv_aSn = GetRectCenter(gv_aer);
      lv_aSm = CreateUnitAtLoc(
        gv_amY,
        gv_alx.getInt(GetRandomInt(468, 487)),
        lv_aSn,
        0.0
      );
    }
  }
  if (gv_alx.getInt(lv_aSl + 7000) == 3) {
    f_aKH(lv_aSl);
    f_aKx(36);
  }
  lv_aSl = 36;
  if (gv_alx.getInt(lv_aSl + 7000) == 1) {
    f_aKz(lv_aSl, lv_aSj);
  }
  if (gv_alx.getInt(lv_aSl + 7000) == 3) {
    f_aKH(lv_aSl);
  }
  lv_aSm = null;
  RemoveLocation(lv_aSn);
  lv_aSn = null;
}
function f_aSo() {
  var lv_aSp = 0;
  var lv_aSq = 0;
  var lv_aSr = 0;
  var lv_aSs = GetTriggerUnit();
  lv_aSp = f_aKN(lv_aSs);
  if (f_aKR(lv_aSs, lv_aSp) == false) {
    return;
  }
  lv_aSr = 37;
  if (gv_alx.getInt(lv_aSr + 7000) == 1) {
    f_aKz(lv_aSr, lv_aSp);
  }
  if (gv_alx.getInt(lv_aSr + 7000) == 3) {
    f_aKH(lv_aSr);
    f_aKx(38);
  }
  lv_aSr = 38;
  if (gv_alx.getInt(lv_aSr + 7000) == 1) {
    f_aKz(lv_aSr, lv_aSp);
  }
  if (gv_alx.getInt(lv_aSr + 7000) == 3) {
    f_aKH(lv_aSr);
    f_aKx(39);
    f_aKx(40);
  }
  lv_aSr = 39;
  if (gv_alx.getInt(lv_aSr + 7000) == 1) {
    f_aKz(lv_aSr, lv_aSp);
  }
  if (gv_alx.getInt(lv_aSr + 7000) == 3) {
    f_aKH(lv_aSr);
  }
  lv_aSr = 40;
  if (gv_alx.getInt(lv_aSr + 7000) == 1) {
    f_aKz(lv_aSr, lv_aSp);
    if (gv_alx.getInt(lv_aSr + 7000) == 2) {
      SetUnitInvulnerable(gv_ald, false);
    }
  }
  if (gv_alx.getInt(lv_aSr + 7000) == 3) {
    f_aKH(lv_aSr);
  }
  lv_aSs = null;
}
function f_aSt() {
  var lv_aSu = 0;
  var lv_aSv = 0;
  var lv_aSw = 0;
  var lv_aSx = 0;
  var lv_aSy;
  var lv_aSz = GetTriggerUnit();
  var lv_aSA = GetRectCenter(gv_acT);
  lv_aSu = f_aKN(lv_aSz);
  if (f_aKR(lv_aSz, lv_aSu) == false) {
    return;
  }
  lv_aSw = 41;
  if (gv_alx.getInt(lv_aSw + 7000) == 1) {
    f_aKz(lv_aSw, lv_aSu);
    gv_aly[lv_aSw + 7000] = AddSpecialEffectTarget(
      "Abilities\\Spells\\Other\\TalkToMe\\TalkToMe.mdl",
      gv_aku,
      "overhead"
    );
  }
  if (gv_alx.getInt(lv_aSw + 7000) == 3) {
    lv_aSv = 0;
    do {
      if (lv_aSv > 11) {
        break;
      }
      if (lv_aSv < 6) {
        lv_aSy = UnitItemInSlot(gv_alv[lv_aSu], lv_aSv);
      } else {
        lv_aSy = UnitItemInSlot(gv_alv[lv_aSu + 8], lv_aSv - 6);
      }
      lv_aSx = GetItemTypeId(lv_aSy);
      if (lv_aSx == "I05F") {
        RemoveItem(lv_aSy);
        f_aKH(lv_aSw);
        f_aKx(42);
        lv_aSv = 13;
      }
      lv_aSv = lv_aSv + 1;
    } while (true);
  }
  lv_aSw = 42;
  if (gv_alx.getInt(lv_aSw + 7000) == 1) {
    f_aKz(lv_aSw, lv_aSu);
    if (gv_alx.getInt(lv_aSw + 7000) == 2) {
      lv_aSA = GetRectCenter(gv_ade);
      CreateItemLoc("I05G", lv_aSA);
      lv_aSA = GetRectCenter(gv_adf);
      CreateItemLoc("I05G", lv_aSA);
      lv_aSA = GetRectCenter(gv_adg);
      CreateItemLoc("I05G", lv_aSA);
      lv_aSA = GetRectCenter(gv_adh);
      CreateItemLoc("I05G", lv_aSA);
      lv_aSA = GetRectCenter(gv_adi);
      CreateItemLoc("I05G", lv_aSA);
      lv_aSA = GetRectCenter(gv_adj);
      CreateItemLoc("I05G", lv_aSA);
      lv_aSA = GetRectCenter(gv_aeD);
      CreateItemLoc("I05H", lv_aSA);
      lv_aSA = GetRectCenter(gv_aeF);
      CreateItemLoc("I05H", lv_aSA);
      lv_aSA = GetRectCenter(gv_aeG);
      CreateItemLoc("I05H", lv_aSA);
      lv_aSA = GetRectCenter(gv_aeH);
      CreateItemLoc("I05H", lv_aSA);
      lv_aSA = GetRectCenter(gv_aeI);
      CreateItemLoc("I05H", lv_aSA);
      lv_aSA = GetRectCenter(gv_aeJ);
      CreateItemLoc("I05H", lv_aSA);
      lv_aSA = GetRectCenter(gv_aeK);
      CreateItemLoc("I05H", lv_aSA);
      lv_aSA = GetRectCenter(gv_aeL);
      CreateItemLoc("I05H", lv_aSA);
      lv_aSA = GetRectCenter(gv_aeM);
      CreateItemLoc("I05H", lv_aSA);
      lv_aSA = GetRectCenter(gv_aeE);
      CreateItemLoc("I05H", lv_aSA);
      lv_aSA = GetRectCenter(gv_adk);
      CreateItemLoc("I05I", lv_aSA);
      lv_aSA = GetRectCenter(gv_adl);
      CreateItemLoc("I05I", lv_aSA);
      lv_aSA = GetRectCenter(gv_adm);
      CreateItemLoc("I05I", lv_aSA);
    }
  }
  if (gv_alx.getInt(lv_aSw + 7000) == 3) {
    f_aKH(lv_aSw);
    f_aKx(43);
  }
  lv_aSw = 43;
  if (gv_alx.getInt(lv_aSw + 7000) == 1) {
    f_aKz(lv_aSw, lv_aSu);
  }
  if (gv_alx.getInt(lv_aSw + 7000) == 3) {
    f_aKH(lv_aSw);
    f_aKx(44);
  }
  lv_aSw = 44;
  if (gv_alx.getInt(lv_aSw + 7000) == 1) {
    f_aKz(lv_aSw, lv_aSu);
    if (gv_alx.getInt(lv_aSw + 7000) == 2) {
      UnitAddItemByIdSwapped("I05L", gv_alv[lv_aSu + 8]);
    }
  }
  if (gv_alx.getInt(lv_aSw + 7000) == 3) {
    f_aKH(lv_aSw);
  }
  lv_aSy = null;
  lv_aSz = null;
  RemoveLocation(lv_aSA);
  lv_aSA = null;
}
function f_aSB() {
  var lv_aSC = 0;
  var lv_aSD = 0;
  var lv_aSE = 0;
  var lv_aSF = GetTriggerUnit();
  var lv_aSG = GetRectCenter(gv_acT);
  lv_aSC = f_aKN(lv_aSF);
  if (f_aKR(lv_aSF, lv_aSC) == false) {
    return;
  }
  lv_aSE = 45;
  if (gv_alx.getInt(lv_aSE + 7000) == 1) {
    f_aKz(lv_aSE, lv_aSC);
  }
  if (gv_alx.getInt(lv_aSE + 7000) == 3) {
    f_aKH(lv_aSE);
    f_aKx(46);
  }
  lv_aSE = 46;
  if (gv_alx.getInt(lv_aSE + 7000) == 1) {
    f_aKz(lv_aSE, lv_aSC);
    if (gv_alx.getInt(lv_aSE + 7000) == 2) {
      ShowUnit(gv_akY, true);
    }
  }
  if (gv_alx.getInt(lv_aSE + 7000) == 3) {
    f_aKH(lv_aSE);
    f_aKx(47);
  }
  lv_aSE = 47;
  if (gv_alx.getInt(lv_aSE + 7000) == 1) {
    f_aKz(lv_aSE, lv_aSC);
  }
  if (gv_alx.getInt(lv_aSE + 7000) == 3) {
    f_aKH(lv_aSE);
    f_aKx(48);
  }
  lv_aSE = 48;
  if (gv_alx.getInt(lv_aSE + 7000) == 1) {
    f_aKz(lv_aSE, lv_aSC);
    if (gv_alx.getInt(lv_aSE + 7000) == 2) {
      lv_aSG = GetRectCenter(gv_afj);
      CreateNUnitsAtLoc(1, "nchr", Player(9), lv_aSG, 140);
      lv_aSG = GetRectCenter(gv_afn);
      CreateNUnitsAtLoc(1, "nchg", Player(9), lv_aSG, 215);
      lv_aSG = GetRectCenter(gv_afl);
      CreateNUnitsAtLoc(1, "nchw", Player(9), lv_aSG, 270);
      lv_aSG = GetRectCenter(gv_afk);
      CreateNUnitsAtLoc(1, "oshm", Player(9), lv_aSG, 360);
      lv_aSG = GetRectCenter(gv_afm);
      CreateNUnitsAtLoc(1, "nw2w", Player(9), lv_aSG, 325);
    }
  }
  if (gv_alx.getInt(lv_aSE + 7000) == 3) {
    f_aKH(lv_aSE);
  }
  lv_aSF = null;
  RemoveLocation(lv_aSG);
  lv_aSG = null;
}
function f_aSH() {
  var lv_aSI = 0;
  var lv_aSJ = 0;
  var lv_aSK = 0;
  var lv_aSL = GetTriggerUnit();
  lv_aSI = f_aKN(lv_aSL);
  if (f_aKR(lv_aSL, lv_aSI) == false) {
    return;
  }
  lv_aSK = 56;
  if (gv_alx.getInt(lv_aSK + 7000) == 1) {
    f_aKz(lv_aSK, lv_aSI);
  }
  if (gv_alx.getInt(lv_aSK + 7000) == 3) {
    f_aKH(lv_aSK);
    UnitRemoveAbility(gv_akn, "Abit");
  }
  lv_aSL = null;
}
function f_aSM() {
  var lv_aSN = 0;
  var lv_aSO = 0;
  var lv_aSP = 0;
  var lv_aSQ = 0;
  var lv_aSR = GetTriggerUnit();
  var lv_aSS;
  lv_aSN = f_aKN(lv_aSR);
  if (f_aKR(lv_aSR, lv_aSN) == false) {
    return;
  }
  lv_aSQ = 44;
  if (gv_alx.getInt(lv_aSQ + 7000) == 2) {
    lv_aSO = 0;
    do {
      if (lv_aSO > 11) {
        break;
      }
      if (lv_aSO < 6) {
        lv_aSS = UnitItemInSlot(gv_alv[lv_aSN], lv_aSO);
      } else {
        lv_aSS = UnitItemInSlot(gv_alv[lv_aSN + 8], lv_aSO - 6);
      }
      lv_aSP = GetItemTypeId(lv_aSS);
      if (lv_aSP == "I05L") {
        RemoveItem(lv_aSS);
        f_aKF(lv_aSQ);
        lv_aSO = 13;
      }
      lv_aSO = lv_aSO + 1;
    } while (true);
  }
  lv_aSQ = 49;
  if (gv_alx.getInt(lv_aSQ + 7000) == 1) {
    f_aKz(lv_aSQ, lv_aSN);
  }
  if (gv_alx.getInt(lv_aSQ + 7000) == 3) {
    f_aKH(lv_aSQ);
    f_aKx(50);
  }
  lv_aSQ = 50;
  if (gv_alx.getInt(lv_aSQ + 7000) == 1) {
    f_aKz(lv_aSQ, lv_aSN);
    if (gv_alx.getInt(lv_aSQ + 7000) == 2) {
      ShowUnit(gv_akZ, true);
      ShowUnit(gv_akJ, true);
      ShowUnit(gv_akO, true);
    }
  }
  if (gv_alx.getInt(lv_aSQ + 7000) == 3) {
    f_aKH(lv_aSQ);
    f_aKx(51);
  }
  lv_aSQ = 51;
  if (gv_alx.getInt(lv_aSQ + 7000) == 1) {
    f_aKz(lv_aSQ, lv_aSN);
    if (gv_alx.getInt(lv_aSQ + 7000) == 2) {
      ModifyGateBJ(1, gv_alr);
      PingMinimapForForce(
        bj_FORCE_ALL_PLAYERS,
        GetUnitX(gv_akK),
        GetUnitY(gv_akK),
        3
      );
    }
  }
  if (gv_alx.getInt(lv_aSQ + 7000) == 3) {
    f_aKH(lv_aSQ);
    f_aKx(52);
  }
  lv_aSQ = 52;
  if (gv_alx.getInt(lv_aSQ + 7000) == 1) {
    f_aKz(lv_aSQ, lv_aSN);
  }
  if (gv_alx.getInt(lv_aSQ + 7000) == 3) {
    f_aKH(lv_aSQ);
  }
  lv_aSR = null;
}
function f_aST() {
  var lv_aSU = 0;
  var lv_aSV = 0;
  var lv_aSW = GetTriggerUnit();
  lv_aSU = f_aKN(lv_aSW);
  if (f_aKR(lv_aSW, lv_aSU) == false) {
    return;
  }
  lv_aSV = 53;
  if (gv_alx.getInt(lv_aSV + 7000) == 1) {
    f_aKz(lv_aSV, lv_aSU);
  }
  lv_aSW = null;
}
function f_aSX() {
  var lv_aSY = 0;
  var lv_aSZ = 0;
  var lv_aTa = 0;
  var lv_aTb = 0;
  var lv_aTc = GetTriggerUnit();
  lv_aSY = f_aKN(lv_aTc);
  if (f_aKR(lv_aTc, lv_aSY) == false) {
    return;
  }
  f_aKF(53);
  lv_aSZ = 53;
  if (gv_alx.getInt(lv_aSZ + 7000) == 3) {
    f_aKH(53);
    f_aKx(54);
  }
  lv_aSZ = 54;
  if (gv_alx.getInt(lv_aSZ + 7000) == 1) {
    lv_aTb = 120 + GetRandomInt(0, 12);
    gv_alw[lv_aSZ + 7300] = S2S(
      gv_alw[lv_aTb] +
        " Riddle me this. Tell me that. Answer me right and leon you may fight. Type 'the answer is' and then the solution."
    );
    lv_aTa = 0;
    do {
      if (lv_aTa > 7) {
        break;
      }
      TriggerRegisterPlayerChatEvent(
        gv_agL,
        Player(lv_aTa),
        S2S("the answer is " + gv_alw[lv_aTb + 15]),
        false
      );
      lv_aTa = lv_aTa + 1;
    } while (true);
    EnableTrigger(gv_agL);
    f_aKz(lv_aSZ, lv_aSY);
  }
  if (gv_alx.getInt(lv_aSZ + 7000) == 3) {
    f_aKH(lv_aSZ);
    ShowUnit(gv_akN, true);
  }
  lv_aSZ = 58;
  if (gv_alx.getInt(lv_aSZ + 7000) == 1) {
    f_aKz(lv_aSZ, lv_aSY);
    EnableTrigger(gv_ajd);
  }
  if (gv_alx.getInt(lv_aSZ + 7000) == 3) {
    f_aKH(lv_aSZ);
  }
  lv_aTc = null;
}
function f_aTd() {
  f_aKF(54);
  f_aKx(58);
}
function f_aTe() {
  var lv_aTf = GetTriggerUnit();
  var lv_aTg = GetRectCenter(gv_aff);
  if (GetUnitTypeId(lv_aTf) == "n000") {
    IssuePointOrderByIdLoc(lv_aTf, 851986, lv_aTg);
  }
  lv_aTf = null;
  RemoveLocation(lv_aTg);
  lv_aTg = null;
}
function f_aTh() {
  var lv_aTi = GetTriggerUnit();
  var lv_aTj = GetRectCenter(gv_afg);
  if (GetUnitTypeId(lv_aTi) == "n000") {
    IssuePointOrderByIdLoc(lv_aTi, 851986, lv_aTj);
  }
  lv_aTi = null;
  RemoveLocation(lv_aTj);
  lv_aTj = null;
}
function f_aTk() {
  var lv_aTl = GetTriggerUnit();
  var lv_aTm = GetRectCenter(gv_afd);
  if (GetUnitTypeId(lv_aTl) == "n000") {
    IssuePointOrderByIdLoc(lv_aTl, 851986, lv_aTm);
  }
  lv_aTl = null;
  RemoveLocation(lv_aTm);
  lv_aTm = null;
}
function f_aTn() {
  var lv_aTo = GetTriggerUnit();
  if (GetUnitTypeId(lv_aTo) == "n000") {
    RemoveUnit(lv_aTo);
    f_aKF(19);
  }
  lv_aTo = null;
}
function f_aTp() {
  if (GetUnitTypeId(GetTriggerUnit()) == "hbew") {
    IssuePointOrderById(
      GetTriggerUnit(),
      851986,
      GetRectCenterX(gv_afE),
      GetRectCenterY(gv_afE)
    );
    SetUnitUserData(GetTriggerUnit(), 1);
  }
}
function f_aTq() {
  if (GetUnitTypeId(GetTriggerUnit()) == "hbew") {
    IssuePointOrderById(
      GetTriggerUnit(),
      851986,
      GetRectCenterX(gv_afF),
      GetRectCenterY(gv_afF)
    );
    SetUnitUserData(GetTriggerUnit(), 2);
  }
}
function f_aTr() {
  if (GetUnitTypeId(GetTriggerUnit()) == "hbew") {
    IssuePointOrderById(
      GetTriggerUnit(),
      851986,
      GetRectCenterX(gv_afG),
      GetRectCenterY(gv_afG)
    );
    SetUnitUserData(GetTriggerUnit(), 3);
  }
}
function f_aTs() {
  if (GetUnitTypeId(GetTriggerUnit()) == "hbew") {
    IssuePointOrderById(
      GetTriggerUnit(),
      851986,
      GetRectCenterX(gv_aer),
      GetRectCenterY(gv_aer)
    );
    SetUnitUserData(GetTriggerUnit(), 4);
  }
}
function f_aTt() {
  var lv_aTu = GetTriggerUnit();
  if (GetUnitTypeId(lv_aTu) == "hbew") {
    RemoveUnit(lv_aTu);
    f_aKF(35);
  }
  lv_aTu = null;
}
function f_aTv() {
  var lv_aTw;
  var lv_aTx = 7550;
  var lv_aTy = 0.0;
  var lv_aTz;
  lv_aTw = GetRandomInt(1, 3);
  if (lv_aTw == 2) {
    lv_aTx = 5630;
    lv_aTy = 1340;
  }
  if (lv_aTw == 3) {
    lv_aTx = 7930;
    lv_aTy = 1940;
  }
  if (GetUnitTypeId(gv_alv[89]) == "uabo") {
    if (gv_alx.getInt(169) == 25) {
      lv_aTz = CreateUnit(gv_amY, "nfov", lv_aTx, lv_aTy, 0.0);
    } else {
      lv_aTz = CreateUnit(gv_amY, "nfgu", lv_aTx, lv_aTy, 0.0);
    }
  } else {
    if (gv_alx.getInt(169) == 25) {
      lv_aTz = CreateUnit(gv_amY, "n009", lv_aTx, lv_aTy, 0.0);
    } else {
      lv_aTz = CreateUnit(gv_amY, "n008", lv_aTx, lv_aTy, 0.0);
    }
  }
  IssueTargetOrderById(lv_aTz, gv_aas, gv_alv[89]);
  gv_alx[169] = gv_alx.getInt(169) + 1;
  lv_aTz = null;
}
function f_aTA() {
  var lv_aTB = 0;
  DestroyTimerDialog(gv_alA[9]);
  DestroyTimer(gv_alV);
  DisableTrigger(gv_agV);
  do {
    if (lv_aTB > 7) {
      break;
    }
    if (RectContainsUnit(gv_aen, gv_alv[lv_aTB])) {
      DestroyEffect(
        AddSpecialEffectTarget(
          "Abilities\\Spells\\Human\\MassTeleport\\MassTeleportCaster.mdl",
          gv_alv[lv_aTB],
          "origin"
        )
      );
      SetUnitPosition(gv_alv[lv_aTB], -10176, -6928);
      PanCameraToTimedForPlayer(Player(lv_aTB), -10176, -6928, 0);
    }
    lv_aTB = lv_aTB + 1;
  } while (true);
  if (GetWidgetLife(gv_alv[89]) > 0.405) {
    SetUnitPosition(gv_alv[89], 8052.5, 9442.8);
  }
  ShowUnit(gv_akn, true);
  f_aKF(56);
}
function f_aRa() {
  var lv_aTC;
  TimerStart(gv_alV, 3 * 60, false, f_aTA);
  gv_alA[9] = CreateTimerDialog(gv_alV);
  TimerDialogSetTitle(
    gv_alA[9],
    S2S("Keep " + GetUnitName(gv_alv[89])) + " Alive"
  );
  TimerDialogDisplay(gv_alA[9], true);
}
function f_aTD() {
  var lv_aTE = GetTriggerUnit();
  var lv_aTF = GetUnitTypeId(lv_aTE);
  if (
    lv_aTF == "nchr" ||
    lv_aTF == "nchg" ||
    lv_aTF == "nchw" ||
    lv_aTF == "oshm" ||
    lv_aTF == "nw2w"
  ) {
    if (gv_alx.getInt(48 + 7000) > 0 && GetUnitUserData(lv_aTE) != 10) {
      SetUnitUserData(lv_aTE, 10);
      f_aKF(48);
      DisplayTimedTextToForce(
        gv_alH,
        10,
        "   |cff47a1ee" +
          S2S(
            GetUnitName(lv_aTE) +
              "|r - Yes, I will return immediately and prepare for battle."
          )
      );
      DestroyEffect(
        AddSpecialEffectTarget(
          "Abilities\\Spells\\Human\\MassTeleport\\MassTeleportCaster.mdl",
          lv_aTE,
          "origin"
        )
      );
      SetUnitPosition(lv_aTE, GetRectCenterX(gv_aep), GetRectCenterY(gv_aep));
    }
  }
  lv_aTE = null;
}
function f_aTG() {
  var lv_aTH = LoadInteger(gv_abY, 0, GetHandleId(GetExpiredTimer()));
  var lv_aTI = f_aOa(gv_acZ, "x");
  var lv_aTJ = f_aOa(gv_acZ, "y");
  ReviveHero(gv_alv[lv_aTH], lv_aTI, lv_aTJ, true);
  PanCameraToTimedForPlayer(Player(lv_aTH), lv_aTI, lv_aTJ, 0.0);
  SetUnitPosition(gv_alv[8 + lv_aTH], lv_aTI, lv_aTJ);
  SetUnitLifePercentBJ(gv_alv[lv_aTH], 15);
  SuspendHeroXP(gv_alv[lv_aTH], !true);
  SetUnitColor(gv_alv[lv_aTH], ConvertPlayerColor(lv_aTH));
}
function f_aTK() {
  var lv_aTL = LoadInteger(gv_abY, 0, GetHandleId(GetExpiredTimer()));
  var lv_aTM;
  var lv_aTN;
  ReviveHero(
    gv_alv[lv_aTL],
    GetUnitX(gv_alv[lv_aTL]),
    GetUnitY(gv_alv[lv_aTL]),
    true
  );
  SetUnitState(
    gv_alv[lv_aTL],
    UNIT_STATE_LIFE,
    GetUnitState(gv_alv[lv_aTL], UNIT_STATE_MAX_LIFE) * 0.4
  );
  SetUnitState(
    gv_alv[lv_aTL],
    UNIT_STATE_MANA,
    GetUnitState(gv_alv[lv_aTL], UNIT_STATE_MAX_MANA) * 0.2
  );
  DestroyTimerDialog(gv_alA[lv_aTL]);
  lv_aTM = 0;
  do {
    if (lv_aTM > 11) {
      break;
    }
    if (lv_aTM < 6) {
      lv_aTN = UnitItemInSlot(gv_alv[lv_aTL], lv_aTM);
    } else {
      lv_aTN = UnitItemInSlot(gv_alv[lv_aTL + 8], lv_aTM - 6);
    }
    if (GetItemTypeId(lv_aTN) == "ankh") {
      if (GetItemCharges(lv_aTN) > 1) {
        SetItemCharges(lv_aTN, GetItemCharges(lv_aTN) - 1);
      } else {
        RemoveItem(lv_aTN);
      }
      lv_aTM = 13;
    }
    lv_aTM = lv_aTM + 1;
  } while (true);
  lv_aTN = null;
}
function f_aTO() {
  var lv_aTP = LoadInteger(gv_abY, 0, GetHandleId(GetExpiredTimer()));
  gv_alx[240 + lv_aTP] = 0;
  f_aJk(GetExpiredTimer());
}
function f_aTQ() {
  var lv_aTR = LoadInteger(gv_abY, 0, GetHandleId(GetExpiredTimer()));
  var lv_aTS = f_aJj();
  SaveInteger(gv_abY, 0, GetHandleId(lv_aTS), lv_aTR);
  TimerStart(lv_aTS, 300, false, f_aTO);
  gv_alx[240 + lv_aTR] = 1;
  ReviveHero(
    gv_alv[lv_aTR],
    GetUnitX(gv_alv[lv_aTR]),
    GetUnitY(gv_alv[lv_aTR]),
    true
  );
  SetUnitState(gv_alv[lv_aTR], UNIT_STATE_LIFE, 100000);
  SetUnitState(gv_alv[lv_aTR], UNIT_STATE_MANA, 100000);
  DestroyTimerDialog(gv_alA[lv_aTR]);
  lv_aTS = null;
}
function f_aTT() {
  var lv_aTU = LoadInteger(gv_abY, 0, GetHandleId(GetExpiredTimer()));
  ReviveHero(
    gv_alv[lv_aTU],
    GetUnitX(gv_alv[lv_aTU]),
    GetUnitY(gv_alv[lv_aTU]),
    true
  );
  SetUnitLifePercentBJ(gv_alv[lv_aTU], 50);
  SetUnitManaPercentBJ(gv_alv[lv_aTU], 50);
  DestroyTimerDialog(gv_alA[lv_aTU]);
}
function f_aTV() {
  var lv_aTW = GetRectCenterX(gv_aee);
  var lv_aTX = GetRectCenterY(gv_aee);
  var lv_aTY = LoadInteger(gv_abY, 0, GetHandleId(GetExpiredTimer()));
  var lv_aTZ = GetOwningPlayer(gv_alv[lv_aTY]);
  gv_alx[150 + lv_aTY] = 0;
  f_aMN(gv_amw.getInt(lv_aTY));
  DestroyTimerDialog(gv_alA[lv_aTY]);
  if (GetHeroLevel(gv_alv[lv_aTY]) > 9) {
    lv_aTW = GetRectCenterX(gv_acT);
    lv_aTX = GetRectCenterY(gv_acT);
  }
  ReviveHero(gv_alv[lv_aTY], lv_aTW, lv_aTX, true);
  GroupRemoveUnit(gv_alF, gv_alv[lv_aTY]);
  PanCameraToTimedForPlayer(lv_aTZ, lv_aTW, lv_aTX, 0.0);
  SetUnitPosition(gv_alv[8 + lv_aTY], lv_aTW, lv_aTX);
  lv_aTZ = null;
}
function f_aUa() {
  var lv_aUb;
  var lv_aUc = GetTriggerUnit();
  var lv_aUd = GetOwningPlayer(lv_aUc);
  var lv_aUe = GetPlayerId(lv_aUd);
  var lv_aUf = GetKillingUnit();
  var lv_aUg = 0;
  var lv_aUh = 0;
  var lv_aUi = 0;
  var lv_aUj;
  var lv_aUk;
  var lv_aUl = null;
  if (IsUnitType(lv_aUc, UNIT_TYPE_HERO)) {
    lv_aUg = 1;
  }
  if (GetUnitTypeId(lv_aUf) == "Ewar") {
    RemoveItem(UnitItemInSlot(lv_aUc, GetRandomInt(0, 5)));
  }
  if (lv_aUg == 1 && gv_alx.getInt(188) == 4) {
    if (gv_alx.getInt(180 + lv_aUe) == 1 || gv_alx.getInt(180 + lv_aUe) == 2) {
      lv_aUg = 0;
      gv_alx[180 + lv_aUe] = gv_alx.getInt(180 + lv_aUe) + 2;
      lv_aUi = 0;
      do {
        if (lv_aUi > 7) {
          break;
        }
        SetPlayerAllianceStateBJ(Player(lv_aUe), Player(lv_aUi), 3);
        SetPlayerAllianceStateBJ(Player(lv_aUi), Player(lv_aUe), 3);
        lv_aUi = lv_aUi + 1;
      } while (true);
      TimerStart(gv_alz[lv_aUe], 1, false, f_aTG);
      SaveInteger(gv_abY, 0, GetHandleId(gv_alz[lv_aUe]), lv_aUe);
    }
  }
  if (lv_aUg == 1) {
    if (
      !IsUnitInGroup(gv_alv[lv_aUe], gv_alE) &&
      GetInventoryIndexOfItemTypeBJ(gv_alv[lv_aUe], "ram3") +
        GetInventoryIndexOfItemTypeBJ(gv_alv[lv_aUe], "rugt") >
        0
    ) {
      lv_aUg = 0;
      MultiboardSetItemValueBJ(gv_alP, 1, lv_aUe + 2, "Bokor");
      MultiboardSetItemColorBJ(gv_alP, 1, lv_aUe + 2, 100, 0.0, 0.0, 0);
      TimerStart(gv_alz[lv_aUe], 7, false, f_aTT);
      SaveInteger(gv_abY, 0, GetHandleId(gv_alz[lv_aUe]), lv_aUe);
      gv_alA[lv_aUe] = CreateTimerDialogBJ(
        gv_alz[lv_aUe],
        S2S(GetPlayerName(lv_aUd) + " Revives")
      );
      bj_crippledTimer[100] = f_aJj();
      SaveInteger(gv_abY, 0, GetHandleId(bj_crippledTimer[100]), lv_aUe);
      GroupAddUnit(gv_alE, gv_alv[lv_aUe]);
      TimerStart(bj_crippledTimer[100], 180, false, f_aMJ);
    }
  }
  if (lv_aUg == 1 && gv_alx.getInt(240 + lv_aUe) == 0) {
    if (GetInventoryIndexOfItemTypeBJ(gv_alv[lv_aUe], "I066") > 0) {
      lv_aUg = 0;
      MultiboardSetItemValueBJ(gv_alP, 1, lv_aUe + 2, "LoA");
      MultiboardSetItemColorBJ(gv_alP, 1, lv_aUe + 2, 100, 0.0, 0.0, 0);
      TimerStart(gv_alz[lv_aUe], 4, false, f_aTQ);
      SaveInteger(gv_abY, 0, GetHandleId(gv_alz[lv_aUe]), lv_aUe);
      gv_alA[lv_aUe] = CreateTimerDialogBJ(
        gv_alz[lv_aUe],
        S2S(GetPlayerName(lv_aUd) + " Revives")
      );
    }
  }
  if (lv_aUg == 1) {
    if (
      GetInventoryIndexOfItemTypeBJ(gv_alv[lv_aUe], "ankh") > 0 ||
      GetInventoryIndexOfItemTypeBJ(gv_alv[lv_aUe + 8], "ankh") > 0
    ) {
      lv_aUg = 0;
      MultiboardSetItemValueBJ(gv_alP, 1, lv_aUe + 2, "Ankh");
      MultiboardSetItemColorBJ(gv_alP, 1, lv_aUe + 2, 100, 0.0, 0.0, 0);
      TimerStart(gv_alz[lv_aUe], 7, false, f_aTK);
      SaveInteger(gv_abY, 0, GetHandleId(gv_alz[lv_aUe]), lv_aUe);
      gv_alA[lv_aUe] = CreateTimerDialogBJ(
        gv_alz[lv_aUe],
        S2S(GetPlayerName(lv_aUd) + " Revives")
      );
    }
  }
  if (lv_aUg == 1) {
    gv_alx[150 + lv_aUe] = 1;
    if (GetWidgetLife(gv_alv[32 + lv_aUe]) > 0.405) {
      KillUnit(gv_alv[32 + lv_aUe]);
    }
    if (gv_alx.getInt(390 + lv_aUe) != 1) {
      lv_aUh = R2I(
        (GetPlayerState(lv_aUd, PLAYER_STATE_RESOURCE_GOLD) *
          (0.15 + gv_aao[lv_aUe] / 100)) /
          f_azK(gv_alv[lv_aUe])
      );
      DisplayTextToForce(
        f_aCc(lv_aUd),
        "|cffff0000Death takes its toll of " + S2S(I2S(lv_aUh) + " gold.|r")
      );
      SetPlayerStateBJ(
        lv_aUd,
        PLAYER_STATE_RESOURCE_GOLD,
        GetPlayerState(lv_aUd, PLAYER_STATE_RESOURCE_GOLD) - lv_aUh
      );
    } else {
      gv_alx[390 + lv_aUe] = 0;
    }
    MultiboardSetItemValueBJ(gv_alP, 1, lv_aUe + 2, "Dead");
    MultiboardSetItemColorBJ(gv_alP, 1, lv_aUe + 2, 100, 0.0, 0.0, 0);
    TimerStart(
      gv_alz[lv_aUe],
      (5 + IMinBJ(GetUnitLevel(gv_alv[lv_aUe]), 30) + gv_aao[lv_aUe] * 1.5) /
        f_azM(gv_alv[lv_aUe]),
      false,
      f_aTV
    );
    gv_aao[lv_aUe] = gv_aao[lv_aUe] + 5;
    gv_alA[lv_aUe] = CreateTimerDialogBJ(
      gv_alz[lv_aUe],
      S2S(GetPlayerName(lv_aUd) + " Revives")
    );
    SaveInteger(gv_abY, 0, GetHandleId(gv_alz[lv_aUe]), lv_aUe);
    GroupAddUnit(gv_alF, gv_alv[lv_aUe]);
    f_aMR(gv_amw.getInt(lv_aUe));
    if (gv_acN != null) {
      SetHeroStr(gv_acN, GetHeroStr(gv_acN, false) + 15, true);
      f_aLX(
        AddSpecialEffectTarget(
          "Abilities\\Spells\\NightElf\\Taunt\\TauntCaster.mdl",
          gv_acN,
          "origin"
        ),
        1
      );
      DisplayTimedTextToForce(
        gv_alH,
        5,
        "|cff00ff00Hades:|r You fool, your death only makes me more powerful!"
      );
    }
  }
  lv_aUf = null;
  lv_aUb = null;
  lv_aUc = null;
  lv_aUd = null;
  RemoveLocation(lv_aUl);
  lv_aUl = null;
}
function f_aUm() {
  var lv_aUn = GetTriggerUnit();
  var lv_aUo = GetOwningPlayer(lv_aUn);
  MultiboardSetItemValueBJ(
    gv_alP,
    4,
    GetPlayerId(lv_aUo) + 2,
    S2S(gv_alw[75] + I2S(GetHeroLevel(lv_aUn))) + "|r"
  );
  SetHeroStr(lv_aUn, GetHeroStr(lv_aUn, false) + 1, true);
  if (GetHeroLevel(lv_aUn) > 90) {
    UnitModifySkillPoints(lv_aUn, 2);
  }
  lv_aUn = null;
  lv_aUo = null;
}
function f_aUp() {
  var lv_aUq = CreateTrigger();
  TriggerRegisterAnyUnitEventBJ(lv_aUq, EVENT_PLAYER_HERO_LEVEL);
  TriggerAddAction(lv_aUq, f_aUm);
}
function f_aUr() {
  IssueImmediateOrderById(GetAttacker(), 851972);
}
function f_aUs() {
  return IsUnitAlly(GetTriggerUnit(), GetOwningPlayer(GetAttacker()));
}
function f_aUt() {
  var lv_aUu = CreateTrigger();
  var lv_aUv = 0;
  do {
    if (lv_aUv > 9) {
      break;
    }
    TriggerRegisterPlayerUnitEvent(
      lv_aUu,
      Player(lv_aUv),
      EVENT_PLAYER_UNIT_ATTACKED,
      null
    );
    lv_aUv = lv_aUv + 1;
  } while (true);
  TriggerAddCondition(lv_aUu, Condition(f_aUs));
  TriggerAddAction(lv_aUu, f_aUr);
}
function f_aUw() {
  var lv_aUx = GetTriggerUnit();
  var lv_aUy = GetOwningPlayer(lv_aUx);
  var lv_aUz =
    GetHeroStr(lv_aUx, false) +
    GetHeroAgi(lv_aUx, false) +
    GetHeroInt(lv_aUx, false);
  var lv_aUA = GetHeroLevel(lv_aUx);
  var lv_aUB = R2I(0.01 * Pow(I2R(lv_aUA), 2) + 1.5 * lv_aUA + 50);
  var lv_aUC = 116 * 60 + GetPlayerId(GetOwningPlayer(lv_aUx));
  UnitRemoveAbility(lv_aUx, "Ansp");
  if (lv_aUz < lv_aUB) {
    SetHeroStr(lv_aUx, GetHeroStr(lv_aUx, false) + 1, true);
    gv_alx[lv_aUC] = gv_alx.getInt(lv_aUC) + 1;
  } else {
    DisplayTextToForce(
      f_aCc(lv_aUy),
      S2S("|cffff0000Sorry, your hero may only have " + I2S(lv_aUB)) +
        " total stats at level " +
        I2S(lv_aUA) +
        "."
    );
  }
  lv_aUx = null;
  lv_aUy = null;
}
function f_aUD() {
  return GetLearnedSkill() == "Ansp";
}
function f_aUE() {
  var lv_aUF = CreateTrigger();
  TriggerRegisterAnyUnitEventBJ(lv_aUF, EVENT_PLAYER_HERO_SKILL);
  TriggerAddCondition(lv_aUF, Condition(f_aUD));
  TriggerAddAction(lv_aUF, f_aUw);
}
function f_aUG() {
  var lv_aUH = GetTriggerUnit();
  var lv_aUI = GetOwningPlayer(lv_aUH);
  var lv_aUJ =
    GetHeroStr(lv_aUH, false) +
    GetHeroAgi(lv_aUH, false) +
    GetHeroInt(lv_aUH, false);
  var lv_aUK = GetHeroLevel(lv_aUH);
  var lv_aUL = R2I(0.01 * Pow(I2R(lv_aUK), 2) + 1.5 * lv_aUK + 50);
  var lv_aUM = 77 * 90 + GetPlayerId(GetOwningPlayer(lv_aUH));
  UnitRemoveAbility(lv_aUH, "Asb1");
  if (lv_aUJ < lv_aUL) {
    SetHeroAgi(lv_aUH, GetHeroAgi(lv_aUH, false) + 1, true);
    gv_alx[lv_aUM] = gv_alx.getInt(lv_aUM) + 1;
  } else {
    DisplayTextToForce(
      f_aCc(lv_aUI),
      S2S("|cffff0000Sorry, your hero may only have " + I2S(lv_aUL)) +
        " total stats at level " +
        I2S(lv_aUK) +
        "."
    );
  }
  lv_aUH = null;
  lv_aUI = null;
}
function f_aUN() {
  return GetLearnedSkill() == "Asb1";
}
function f_aUO() {
  var lv_aUP = CreateTrigger();
  TriggerRegisterAnyUnitEventBJ(lv_aUP, EVENT_PLAYER_HERO_SKILL);
  TriggerAddCondition(lv_aUP, Condition(f_aUN));
  TriggerAddAction(lv_aUP, f_aUG);
}
function f_aUQ() {
  var lv_aUR = GetTriggerUnit();
  var lv_aUS = GetOwningPlayer(lv_aUR);
  var lv_aUT =
    GetHeroStr(lv_aUR, false) +
    GetHeroAgi(lv_aUR, false) +
    GetHeroInt(lv_aUR, false);
  var lv_aUU = GetHeroLevel(lv_aUR);
  var lv_aUV = R2I(0.01 * Pow(I2R(lv_aUU), 2) + 1.5 * lv_aUU + 50);
  var lv_aUW = 150 * 46 + GetPlayerId(GetOwningPlayer(lv_aUR));
  UnitRemoveAbility(lv_aUR, "Asb2");
  if (lv_aUT < lv_aUV) {
    SetHeroInt(lv_aUR, GetHeroInt(lv_aUR, false) + 1, true);
    gv_alx[lv_aUW] = gv_alx.getInt(lv_aUW) + 1;
  } else {
    DisplayTextToForce(
      f_aCc(lv_aUS),
      S2S("|cffff0000Sorry, your hero may only have " + I2S(lv_aUV)) +
        " total stats at level " +
        I2S(lv_aUU) +
        "."
    );
  }
  lv_aUR = null;
  lv_aUS = null;
}
function f_aUX() {
  return GetLearnedSkill() == "Asb2";
}
function f_aUY() {
  var lv_aUZ = CreateTrigger();
  TriggerRegisterAnyUnitEventBJ(lv_aUZ, EVENT_PLAYER_HERO_SKILL);
  TriggerAddCondition(lv_aUZ, Condition(f_aUX));
  TriggerAddAction(lv_aUZ, f_aUQ);
}
function f_aVa() {
  var lv_aVb = 0;
  var lv_aVc;
  var lv_aVd;
  var lv_aVe;
  var lv_aVf;
  do {
    if (lv_aVb > 7) {
      break;
    }
    if (GetPlayerSlotState(Player(lv_aVb)) == PLAYER_SLOT_STATE_PLAYING) {
      if (GetWidgetLife(gv_alv[lv_aVb]) > 0.405) {
        lv_aVf = GetUnitLifePercent(gv_alv[lv_aVb]);
        MultiboardSetItemValueBJ(
          gv_alP,
          1,
          lv_aVb + 2,
          S2S(I2S(R2I(lv_aVf)) + "%")
        );
        MultiboardSetItemColorBJ(
          gv_alP,
          1,
          lv_aVb + 2,
          100 - lv_aVf,
          lv_aVf,
          0.0,
          0
        );
        SetUnitLifePercentBJ(gv_alv[lv_aVb + 8], lv_aVf);
        SetUnitManaPercentBJ(
          gv_alv[lv_aVb + 8],
          GetUnitManaPercent(gv_alv[lv_aVb])
        );
        lv_aVc = GetUnitFacing(gv_alv[lv_aVb]) + 180;
        if (lv_aVc >= 360) {
          lv_aVc = lv_aVc - 360;
        }
        lv_aVd = GetUnitX(gv_alv[lv_aVb]) + 100 * Cos(lv_aVc * bj_DEGTORAD);
        lv_aVe = GetUnitY(gv_alv[lv_aVb]) + 100 * Sin(lv_aVc * bj_DEGTORAD);
        lv_aVc = f_aMC(
          GetUnitX(gv_alv[lv_aVb + 8]),
          GetUnitY(gv_alv[lv_aVb + 8]),
          lv_aVd,
          lv_aVe
        );
        if (lv_aVc > 400) {
          if (lv_aVc > 800) {
            SetUnitPosition(gv_alv[lv_aVb + 8], lv_aVd, lv_aVe);
          } else {
            IssuePointOrderById(gv_alv[lv_aVb + 8], 851986, lv_aVd, lv_aVe);
          }
        }
        if (gv_alv[lv_aVb + 40] != null) {
          if (IsUnitHidden(gv_alv[lv_aVb + 40]) == false) {
            if (
              f_aMC(
                GetUnitX(gv_alv[lv_aVb + 40]),
                GetUnitY(gv_alv[lv_aVb + 40]),
                GetUnitX(gv_alv[lv_aVb]),
                GetUnitY(gv_alv[lv_aVb])
              ) > 600
            ) {
              ShowUnit(gv_alv[lv_aVb + 40], false);
            }
          }
        }
        if (
          RectContainsUnit(gv_aeT, gv_alv[lv_aVb]) ||
          RectContainsUnit(gv_aeS, gv_alv[lv_aVb])
        ) {
          if (
            GetWidgetLife(gv_alv[lv_aVb]) > 0.405 &&
            !IsUnitPaused(gv_alv[lv_aVb])
          ) {
            SetWidgetLife(
              gv_alv[lv_aVb],
              GetUnitState(gv_alv[lv_aVb], UNIT_STATE_LIFE) -
                GetUnitState(gv_alv[lv_aVb], UNIT_STATE_MAX_LIFE) * 0.01
            );
          }
        }
      } else {
        lv_aVd = GetUnitX(gv_alv[lv_aVb]);
        lv_aVe = GetUnitY(gv_alv[lv_aVb]);
        lv_aVc = f_aMC(
          GetUnitX(gv_alv[lv_aVb + 8]),
          GetUnitY(gv_alv[lv_aVb + 8]),
          lv_aVd,
          lv_aVe
        );
        if (lv_aVc > 200) {
          SetUnitPosition(gv_alv[lv_aVb + 8], lv_aVd, lv_aVe);
        }
      }
    }
    lv_aVb = lv_aVb + 1;
  } while (true);
  if (gv_alx.getInt(57 + 7000) == 2 && gv_alx.getInt(168) > 7) {
    lv_aVb = gv_alx.getInt(168) - 8;
    if (
      f_aMC(
        GetUnitX(gv_alv[lv_aVb]),
        GetUnitY(gv_alv[lv_aVb]),
        GetUnitX(gv_akt),
        GetUnitY(gv_akt)
      ) > 1800
    ) {
      RemoveUnit(gv_akt);
      SetPlayerAllianceStateBJ(Player(lv_aVb), Player(9), 2);
      SetPlayerAllianceStateBJ(Player(9), Player(lv_aVb), 2);
      gv_alx[168] = 0;
      gv_alx[188] = 0;
    }
  }
}
function f_aVg() {
  var lv_aVh = GetPlayerId(GetTriggerPlayer());
  var lv_aVi;
  var lv_aVj;
  if (gv_alO == 1) {
    gv_alO = 0;
  } else {
    if (gv_alv[lv_aVh + 40] == null) {
      gv_alv[lv_aVh + 40] = CreateUnit(
        Player(lv_aVh),
        "hrdh",
        3550,
        10800,
        0.0
      );
    }
    lv_aVi =
      GetUnitX(gv_alv[lv_aVh]) +
      100 * Cos(GetUnitFacing(gv_alv[lv_aVh]) * bj_DEGTORAD);
    lv_aVj =
      GetUnitY(gv_alv[lv_aVh]) +
      100 * Sin(GetUnitFacing(gv_alv[lv_aVh]) * bj_DEGTORAD);
    SetUnitPosition(gv_alv[lv_aVh + 40], lv_aVi, lv_aVj);
    SetUnitFacing(gv_alv[lv_aVh + 40], GetUnitFacing(gv_alv[lv_aVh]));
    ShowUnit(gv_alv[lv_aVh + 40], true);
    if (Player(lv_aVh) == GetLocalPlayer()) {
      ClearSelection();
      SelectUnit(gv_alv[lv_aVh + 8], true);
    }
  }
}
function f_aVk() {
  if (GetEnumUnit() != gv_amK) {
    RemoveUnit(GetEnumUnit());
  }
}
function f_aVl() {
  var lv_aVm = GetTriggerPlayer();
  var lv_aVn = GetPlayerId(lv_aVm);
  DestroyTimerDialog(gv_alA[lv_aVn]);
  ForGroupBJ(f_aCa(lv_aVm), f_aVk);
  ForGroupBJ(f_aCa(lv_aVm), f_aVk);
  QuestMessageBJ(
    gv_alH,
    3,
    S2S(GetPlayerName(GetTriggerPlayer()) + " has left the game.")
  );
  MultiboardSetItemValueBJ(gv_alP, 2, lv_aVn + 2, "... left ...");
  MultiboardSetItemColorBJ(gv_alP, 2, lv_aVn + 2, 50, 50, 50, 0);
  MultiboardSetItemColorBJ(gv_alP, 3, lv_aVn + 2, 50, 50, 50, 0);
  if (gv_alx.getInt(180 + lv_aVn) == 1 || gv_alx.getInt(180 + lv_aVn) == 2) {
    gv_alx[180 + lv_aVn] = gv_alx.getInt(180 + lv_aVn) + 2;
  }
  lv_aVm = null;
}
function f_aVo() {
  var lv_aVp = GetExpiredTimer();
  var lv_aVq = LoadInteger(gv_abY, 0, GetHandleId(lv_aVp));
  var lv_aVr = Atan2(
    gv_aqx[lv_aVq] - GetUnitY(gv_aqz[lv_aVq]),
    gv_aqw[lv_aVq] - GetUnitX(gv_aqz[lv_aVq])
  );
  SetUnitX(
    gv_aqz[lv_aVq],
    GetUnitX(gv_aqz[lv_aVq]) + Cos(lv_aVr) * gv_aqy[lv_aVq]
  );
  SetUnitY(
    gv_aqz[lv_aVq],
    GetUnitY(gv_aqz[lv_aVq]) + Sin(lv_aVr) * gv_aqy[lv_aVq]
  );
  if (
    IsUnitInRangeXY(
      gv_aqz[lv_aVq],
      gv_aqw[lv_aVq],
      gv_aqx[lv_aVq],
      gv_aqy[lv_aVq]
    ) ||
    f_aGM(lv_aVq, lv_aVr)
  ) {
    f_aGR(lv_aVq);
    GroupRemoveUnit(gv_acB, gv_aqz[lv_aVq]);
    f_aJk(lv_aVp);
  }
  lv_aVp = null;
}
function f_aVs(lv_aVt, lv_aVu, lv_aVv) {
  gv_aqw[lv_aVt] = lv_aVu;
  gv_aqx[lv_aVt] = lv_aVv;
}
function f_aVw(lv_aVx, lv_aVy, lv_aVz, lv_aVA) {
  var lv_aVB = f_aGP();
  var lv_aVC = f_aJj();
  gv_aqz[lv_aVB] = lv_aVx;
  gv_aqw[lv_aVB] = lv_aVy;
  gv_aqx[lv_aVB] = lv_aVz;
  gv_aqy[lv_aVB] = lv_aVA * 0.025;
  GroupAddUnit(gv_acB, gv_aqz[lv_aVB]);
  SaveInteger(gv_abY, 0, GetHandleId(lv_aVC), lv_aVB);
  TimerStart(lv_aVC, 0.025, true, f_aVo);
  lv_aVC = null;
  return lv_aVB;
}
function f_aVD() {
  var lv_aVE;
  var lv_aVF;
  var lv_aVG = GetUnitAbilityLevel(GetTriggerUnit(), "A076");
  if (GetSpellAbilityId() == "A076") {
    lv_aVF = GetPlayerId(GetOwningPlayer(GetTriggerUnit()));
    lv_aVE = f_aVw(
      CreateUnit(
        GetOwningPlayer(GetTriggerUnit()),
        "ehpr",
        GetUnitX(GetTriggerUnit()),
        GetUnitY(GetTriggerUnit()),
        GetUnitFacing(GetTriggerUnit())
      ),
      GetUnitX(GetSpellTargetUnit()),
      GetUnitY(GetSpellTargetUnit()),
      1137.5
    );
    gv_aqA[lv_aVE] = GetSpellTargetUnit();
    if (lv_aVG == 2) {
      gv_aqB[lv_aVE] =
        (GetHeroStr(GetTriggerUnit(), true) * 1.3 * f_azK(GetTriggerUnit()) +
          gv_alu[1885 + lv_aVG] +
          gv_alu[lv_aVF]) *
        f_azK(GetTriggerUnit());
    } else {
      gv_aqB[lv_aVE] =
        ((GetHeroStr(GetTriggerUnit(), true) * (3 + lv_aVG)) / 3 +
          gv_alu[1885 + lv_aVG] +
          gv_alu[lv_aVF]) *
        f_azM(GetTriggerUnit());
    }
    SetUnitExploded(gv_aqz[lv_aVE], true);
  }
  return false;
}
function f_aVH() {
  var lv_aVI = CreateUnit(Player(0), "ehpr", 0.0, 0.0, 0.0);
  SetUnitExploded(lv_aVI, true);
  UnitApplyTimedLife(lv_aVI, "BTLF", 2);
  gv_ahc = CreateTrigger();
  TriggerRegisterAnyUnitEventBJ(gv_ahc, EVENT_PLAYER_UNIT_SPELL_EFFECT);
  TriggerAddCondition(gv_ahc, Condition(f_aVD));
  gv_alu[1886] = 60;
  gv_alu[1887] = 90;
  gv_alu[1888] = 135;
  gv_alu[1889] = 210;
  gv_alu[1890] = 325;
  gv_alu[1891] = 530;
  lv_aVI = null;
}
function f_aVJ() {
  return GetSpellAbilityId() == "A070";
}
function f_aVK() {
  UnitDamageTarget(
    f_aJt(gv_acx, GetUnitX(GetEnumUnit()), GetUnitY(GetEnumUnit()), 1),
    GetEnumUnit(),
    gv_alN,
    false,
    false,
    ATTACK_TYPE_NORMAL,
    DAMAGE_TYPE_UNIVERSAL,
    null
  );
  DestroyEffect(
    AddSpecialEffectTarget(
      "Abilities\\Spells\\Human\\Feedback\\SpellBreakerAttack.mdl",
      GetEnumUnit(),
      "head"
    )
  );
}
function f_aVL() {
  var lv_aVM = GetPlayerId(GetOwningPlayer(GetTriggerUnit()));
  var lv_aVN = f_aIL();
  var lv_aVO = GetUnitAbilityLevel(GetTriggerUnit(), "A070");
  gv_alN =
    (gv_alu[1035 + lv_aVO] +
      ((GetHeroInt(GetTriggerUnit(), true) + gv_alu[lv_aVM + 8]) *
        (2 + lv_aVO)) /
        4) *
    f_azK(GetTriggerUnit());
  SetWidgetLife(
    GetSpellTargetUnit(),
    GetWidgetLife(GetSpellTargetUnit()) + gv_alN
  );
  gv_acy = GetUnitX(GetSpellTargetUnit());
  gv_acz = GetUnitY(GetSpellTargetUnit());
  gv_acA = 250;
  gv_acx = GetOwningPlayer(GetTriggerUnit());
  GroupEnumUnitsInRange(lv_aVN, gv_acy, gv_acz, 350, Condition(f_aMk));
  gv_alN = gv_alN * 0.5 * f_azM(GetTriggerUnit());
  if (GetSpellTargetUnit() == GetTriggerUnit()) {
    f_aBy(GetTriggerUnit(), 400);
  }
  ForGroup(lv_aVN, f_aVK);
  f_aIM(lv_aVN);
  lv_aVN = null;
}
function f_aVP(lv_aVQ) {
  var lv_aVR = f_aJt(
    GetOwningPlayer(gv_aqG[lv_aVQ]),
    GetUnitX(gv_aqG[lv_aVQ]),
    GetUnitY(gv_aqG[lv_aVQ]),
    2
  );
  var lv_aVS = f_aIL();
  if (gv_aqH[lv_aVQ] > 0.0) {
    gv_aqI[lv_aVQ] = gv_aqI[lv_aVQ] - gv_aqH[lv_aVQ];
  }
  DestroyEffect(
    AddSpecialEffect(
      "Abilities\\Spells\\Orc\\WarStomp\\WarStompCaster.mdl",
      GetUnitX(gv_aqG[lv_aVQ]),
      GetUnitY(gv_aqG[lv_aVQ])
    )
  );
  gv_acy = GetUnitX(gv_aqG[lv_aVQ]);
  gv_acz = GetUnitY(gv_aqG[lv_aVQ]);
  gv_acA = 450;
  gv_acx = GetOwningPlayer(gv_aqG[lv_aVQ]);
  GroupEnumUnitsInRange(lv_aVS, gv_acy, gv_acz, 550, Condition(f_aMk));
  do {
    gv_alM = FirstOfGroup(lv_aVS);
    if (gv_alM == null) {
      break;
    }
    UnitDamageTarget(
      lv_aVR,
      gv_alM,
      gv_aqI[lv_aVQ],
      false,
      false,
      ATTACK_TYPE_HERO,
      DAMAGE_TYPE_NORMAL,
      null
    );
    GroupRemoveUnit(lv_aVS, gv_alM);
  } while (true);
  f_aIM(lv_aVS);
  f_aLN(gv_aqF.getInt(lv_aVQ));
  RemoveSavedInteger(gv_abT, gv_amb, GetHandleId(gv_aqG[lv_aVQ]));
  GroupRemoveUnit(gv_ame, gv_aqG[lv_aVQ]);
  lv_aVR = null;
  lv_aVS = null;
}
function f_aVT(lv_aVU) {
  if (lv_aVU == null) {
    return;
  } else {
    if (gv_aqE.getInt(lv_aVU) != -1) {
      return;
    }
  }
  f_aVP(lv_aVU);
  gv_aqE[lv_aVU] = gv_aqC;
  gv_aqC = lv_aVU;
}
function f_aVV() {
  var lv_aVW = LoadInteger(gv_abY, 0, GetHandleId(GetExpiredTimer()));
  if (gv_alw[GetPlayerId(GetOwningPlayer(gv_aqG[lv_aVW])) + 30] == "I") {
    gv_apr[gv_aqF.getInt(lv_aVW)] = TextTagSize2Height(10);
  } else {
    gv_apr[gv_aqF.getInt(lv_aVW)] = TextTagSize2Height(5.65);
  }
  if (
    GetUnitAbilityLevel(gv_aqG[lv_aVW], "B016") < 1 ||
    GetWidgetLife(gv_aqG[lv_aVW]) < 0.406
  ) {
    f_aJk(GetExpiredTimer());
    f_aVT(lv_aVW);
  }
}
function f_aVX() {
  var lv_aVY = LoadInteger(gv_abT, gv_amb, GetHandleId(GetTriggerUnit()));
  if (IsUnitInGroup(gv_aqG[lv_aVY], gv_ame)) {
    if (GetEventDamage() >= gv_aqH[lv_aVY]) {
      if (GetEventDamage() - gv_aqH[lv_aVY] < GetWidgetLife(gv_aqG[lv_aVY])) {
        UnitAddAbility(gv_aqG[lv_aVY], "A059");
        UnitRemoveAbility(gv_aqG[lv_aVY], "A059");
        SetWidgetLife(
          gv_aqG[lv_aVY],
          GetWidgetLife(gv_aqG[lv_aVY]) + GetEventDamage() - gv_aqH[lv_aVY]
        );
      }
      gv_aqH[lv_aVY] = gv_aqH[lv_aVY] - GetEventDamage();
      UnitRemoveAbility(gv_aqG[lv_aVY], "B016");
    } else {
      UnitAddAbility(gv_aqG[lv_aVY], "A059");
      gv_aqH[lv_aVY] = gv_aqH[lv_aVY] - GetEventDamage();
      f_aLd(gv_aqF.getInt(lv_aVY), (gv_aqH[lv_aVY] / gv_aqI[lv_aVY]) * 100);
      UnitRemoveAbility(gv_aqG[lv_aVY], "A059");
      SetWidgetLife(
        gv_aqG[lv_aVY],
        GetWidgetLife(gv_aqG[lv_aVY]) + GetEventDamage()
      );
    }
  }
  return false;
}
function f_aVZ() {
  return GetSpellAbilityId() == "A07C";
}
function f_aWa() {
  var lv_aWb;
  var lv_aWc;
  var lv_aWd;
  var lv_aWe = GetPlayerId(GetOwningPlayer(GetTriggerUnit()));
  var lv_aWf;
  if (IsUnitInGroup(GetTriggerUnit(), gv_ame)) {
    lv_aWc = LoadInteger(gv_abT, gv_amb, GetHandleId(GetTriggerUnit()));
    if (GetUnitAbilityLevel(gv_aqG[lv_aWc], "B016") > 0) {
      IssueImmediateOrder(gv_aqG[lv_aWc], "stop");
    }
    UnitRemoveAbility(gv_aqG[lv_aWc], "B016");
    PolledWait(0.3);
    f_aVT(lv_aWc);
    UnitRemoveAbility(gv_aqG[lv_aWc], "B016");
    SetUnitState(
      gv_aqG[lv_aWc],
      UNIT_STATE_MANA,
      GetUnitState(gv_aqG[lv_aWc], UNIT_STATE_MANA) +
        BlzGetAbilityManaCost(
          "A07C",
          GetUnitAbilityLevel(gv_aqG[lv_aWc], "A07C") - 1
        )
    );
    BlzEndUnitAbilityCooldown(gv_aqG[lv_aWc], "A07C");
    return;
  }
  lv_aWb = f_aJj();
  lv_aWc = f_aGK();
  gv_aqG[lv_aWc] = GetTriggerUnit();
  lv_aWf = GetUnitAbilityLevel(gv_aqG[lv_aWc], "A07C");
  lv_aWd = (lv_aWf + 1) / 4;
  if (lv_aWf == 3) {
    lv_aWd = lv_aWd + 0.5;
  }
  f_aBy(GetTriggerUnit(), 650);
  gv_aqH[lv_aWc] =
    (gv_alu[1041 + lv_aWf] +
      gv_alu[lv_aWe + 8] +
      (GetHeroInt(gv_aqG[lv_aWc], true) + GetHeroStr(gv_aqG[lv_aWc], true)) *
        lv_aWd *
        f_azM(gv_aqG[lv_aWc])) *
    f_azK(gv_aqG[lv_aWc]);
  if (GetInventoryIndexOfItemTypeBJ(gv_aqG[lv_aWc], "rej4") > 0) {
    gv_aqH[lv_aWc] = gv_aqH[lv_aWc] * 1.2;
  }
  gv_aqI[lv_aWc] = gv_aqH[lv_aWc];
  f_azz(I2S(R2I(gv_aqH[lv_aWc])), GetTriggerUnit(), 2, 60, 0, 11, 0, 50, 80, 0);
  if (GetLocalPlayer() == Player(lv_aWe)) {
    SetTextTagVisibility(bj_lastCreatedTextTag, true);
  } else {
    SetTextTagVisibility(bj_lastCreatedTextTag, false);
  }
  SaveInteger(gv_abT, gv_amb, GetHandleId(gv_aqG[lv_aWc]), lv_aWc);
  GroupAddUnit(gv_ame, gv_aqG[lv_aWc]);
  gv_aqF[lv_aWc] = f_aLD(
    "'",
    40,
    10,
    GetUnitX(gv_aqG[lv_aWc]),
    GetUnitY(gv_aqG[lv_aWc]),
    0.0
  );
  if (gv_alw[lv_aWe + 30] == "I") {
    gv_apr[gv_aqF.getInt(lv_aWc)] = TextTagSize2Height(10 * 1);
  } else {
    gv_apr[gv_aqF.getInt(lv_aWc)] = TextTagSize2Height(5.65 * 1);
  }
  f_aLu(gv_aqF.getInt(lv_aWc), gv_aqG[lv_aWc], -25, 0.0, -120);
  f_aLr(gv_aqF.getInt(lv_aWc), gv_amc);
  f_aLo(gv_aqF.getInt(lv_aWc), gv_amd);
  f_aLd(gv_aqF.getInt(lv_aWc), 100);
  SaveInteger(gv_abY, 0, GetHandleId(lv_aWb), lv_aWc);
  TimerStart(lv_aWb, 0.04, true, f_aVV);
  lv_aWb = null;
}
function f_aWg() {
  var lv_aWh = f_aJt(
    GetOwningPlayer(GetTriggerUnit()),
    GetUnitX(GetEnumUnit()),
    GetUnitY(GetEnumUnit()),
    2
  );
  f_aJA(lv_aWh, "A072", 0);
  IssueTargetOrderById(lv_aWh, 852190, GetEnumUnit());
  UnitDamageTarget(
    lv_aWh,
    GetEnumUnit(),
    gv_alN,
    false,
    false,
    ATTACK_TYPE_NORMAL,
    DAMAGE_TYPE_UNIVERSAL,
    null
  );
  lv_aWh = null;
}
function f_aWi() {
  return GetSpellAbilityId() == "A071";
}
function f_aWj() {
  var lv_aWk = GetSpellTargetLoc();
  var lv_aWl = f_aIL();
  var lv_aWm = GetUnitAbilityLevel(GetTriggerUnit(), "A071");
  var lv_aWn = GetPlayerId(GetOwningPlayer(GetTriggerUnit()));
  gv_acy = GetLocationX(lv_aWk);
  gv_acz = GetLocationY(lv_aWk);
  gv_acA = 200 * f_azK(GetTriggerUnit());
  gv_acx = GetOwningPlayer(GetTriggerUnit());
  GroupEnumUnitsInRange(
    lv_aWl,
    gv_acy,
    gv_acz,
    300 * f_azK(GetTriggerUnit()),
    Condition(f_aMk)
  );
  gv_alN =
    (gv_alu[1023 + lv_aWm] +
      (gv_alu[lv_aWn] * (lv_aWm + 2)) / 3 +
      ((GetHeroInt(GetTriggerUnit(), true) * (lv_aWm + 5)) / 3) *
        gv_aam[lv_aWn]) *
    gv_aan[lv_aWn];
  ForGroup(lv_aWl, f_aWg);
  RemoveLocation(lv_aWk);
  f_aIM(lv_aWl);
  lv_aWl = null;
  lv_aWk = null;
}
function f_aWo() {
  var lv_aWp = GetExpiredTimer();
  var lv_aWq = LoadInteger(gv_abY, 0, GetHandleId(lv_aWp));
  var lv_aWr = Atan2(
    gv_aqN[lv_aWq] - GetUnitY(gv_aqP[lv_aWq]),
    gv_aqM[lv_aWq] - GetUnitX(gv_aqP[lv_aWq])
  );
  SetUnitX(
    gv_aqP[lv_aWq],
    GetUnitX(gv_aqP[lv_aWq]) + Cos(lv_aWr) * gv_aqO[lv_aWq]
  );
  SetUnitY(
    gv_aqP[lv_aWq],
    GetUnitY(gv_aqP[lv_aWq]) + Sin(lv_aWr) * gv_aqO[lv_aWq]
  );
  if (
    IsUnitInRangeXY(
      gv_aqP[lv_aWq],
      gv_aqM[lv_aWq],
      gv_aqN[lv_aWq],
      gv_aqO[lv_aWq]
    ) ||
    f_aGD(lv_aWq, lv_aWr)
  ) {
    f_aGI(lv_aWq);
    GroupRemoveUnit(gv_acB, gv_aqP[lv_aWq]);
    f_aJk(lv_aWp);
  }
  lv_aWp = null;
}
function f_aWs(lv_aWt, lv_aWu, lv_aWv) {
  gv_aqM[lv_aWt] = lv_aWu;
  gv_aqN[lv_aWt] = lv_aWv;
}
function f_aWw(lv_aWx, lv_aWy, lv_aWz, lv_aWA) {
  var lv_aWB = f_aGG();
  var lv_aWC = f_aJj();
  gv_aqP[lv_aWB] = lv_aWx;
  gv_aqM[lv_aWB] = lv_aWy;
  gv_aqN[lv_aWB] = lv_aWz;
  gv_aqO[lv_aWB] = lv_aWA * 0.025;
  GroupAddUnit(gv_acB, gv_aqP[lv_aWB]);
  SaveInteger(gv_abY, 0, GetHandleId(lv_aWC), lv_aWB);
  TimerStart(lv_aWC, 0.025, true, f_aWo);
  lv_aWC = null;
  return lv_aWB;
}
function f_aWD() {
  var lv_aWE;
  var lv_aWF;
  var lv_aWG = f_azK(GetTriggerUnit());
  if (GetSpellAbilityId() == "A03T") {
    lv_aWF =
      ((GetHeroStr(GetTriggerUnit(), true) *
        (GetUnitAbilityLevel(GetTriggerUnit(), "A03T") + 1)) /
        2) *
      lv_aWG;
    lv_aWE = f_aWw(
      GetTriggerUnit(),
      GetUnitX(GetSpellTargetUnit()),
      GetUnitY(GetSpellTargetUnit()),
      200 * lv_aWG
    );
    gv_aqQ[lv_aWE] = 0;
    gv_aqR[lv_aWE] = GetSpellTargetUnit();
    gv_aqS[lv_aWE] =
      (gv_alu[1107 + GetUnitAbilityLevel(gv_aqP[lv_aWE], "A03T")] + lv_aWF) *
      lv_aWG;
    SetUnitAnimationByIndex(gv_aqP[lv_aWE], 5);
  }
  return false;
}
function f_aWH() {
  var lv_aWI = GetExpiredTimer();
  var lv_aWJ = LoadInteger(gv_abY, 0, GetHandleId(lv_aWI));
  gv_aqY[lv_aWJ] = gv_aqY.getInt(lv_aWJ) - 1;
  if (gv_aqY.getInt(lv_aWJ) < 1 || GetWidgetLife(gv_aqW[lv_aWJ]) < 0.406) {
    UnitRemoveAbility(gv_aqW[lv_aWJ], "A096");
    UnitRemoveAbility(gv_aqW[lv_aWJ], "B018");
    f_aGB(lv_aWJ);
    f_aJk(lv_aWI);
  } else {
    SetWidgetLife(
      gv_aqW[lv_aWJ],
      GetWidgetLife(gv_aqW[lv_aWJ]) + gv_aqX[lv_aWJ]
    );
  }
  lv_aWI = null;
}
function f_aWK(lv_aWL) {
  var lv_aWM = f_aGz();
  var lv_aWN = f_aJj();
  var lv_aWO = GetPlayerId(GetOwningPlayer(GetEventDamageSource()));
  gv_aqW[lv_aWM] = GetEventDamageSource();
  gv_aqX[lv_aWM] = (lv_aWL * gv_aam[lv_aWO] * gv_aan[lv_aWO]) / 5;
  gv_aqY[lv_aWM] = R2I(5 * gv_aan[lv_aWO]);
  UnitAddAbility(gv_aqW[lv_aWM], "A096");
  SaveInteger(gv_abY, 0, GetHandleId(lv_aWN), lv_aWM);
  TimerStart(lv_aWN, 1, true, f_aWH);
  lv_aWN = null;
  return lv_aWM;
}
function f_aWP() {
  var lv_aWQ;
  var lv_aWR = f_azK(GetEventDamageSource());
  if (GetUnitAbilityLevel(GetEventDamageSource(), "A04F") > 0) {
    UnitRemoveAbility(GetEventDamageSource(), "A04F");
    lv_aWQ = R2I(
      GetEventDamage() *
        (4 + GetUnitAbilityLevel(GetEventDamageSource(), "A03R")) *
        0.5 +
        lv_aWR * GetHeroStr(GetEventDamageSource(), true)
    );
    f_aWK(lv_aWQ);
    DisableTrigger(gv_abP);
    UnitDamageTarget(
      GetEventDamageSource(),
      GetTriggerUnit(),
      lv_aWQ * lv_aWR,
      true,
      false,
      ATTACK_TYPE_HERO,
      DAMAGE_TYPE_UNKNOWN,
      null
    );
    EnableTrigger(gv_abP);
    f_aMp(
      GetOwningPlayer(GetEventDamageSource()),
      S2S(I2S(lv_aWQ) + "!"),
      255,
      3,
      3,
      GetUnitX(GetEventDamageSource()) - 16,
      GetUnitY(GetEventDamageSource()),
      0.077,
      0.0,
      3,
      12.5
    );
    DestroyEffect(
      AddSpecialEffectTarget(
        "Objects\\Spawnmodels\\Orc\\Orcblood\\BattrollBlood.mdl",
        GetTriggerUnit(),
        "chest"
      )
    );
  }
  return false;
}
function f_aWS() {
  var lv_aWT = LoadInteger(gv_abY, 0, GetHandleId(GetExpiredTimer()));
  if (GetUnitAbilityLevel(gv_alv[lv_aWT], "A04F") > 0) {
    UnitRemoveAbility(gv_alv[lv_aWT], "A04F");
  }
  f_aJk(GetExpiredTimer());
}
function f_aWU() {
  return GetSpellAbilityId() == "A03R";
}
function f_aWV() {
  var lv_aWW = f_aJj();
  UnitAddAbility(GetTriggerUnit(), "A04F");
  IssueTargetOrderById(GetTriggerUnit(), gv_aas, GetSpellTargetUnit());
  SaveInteger(
    gv_abY,
    0,
    GetHandleId(lv_aWW),
    GetPlayerId(GetOwningPlayer(GetTriggerUnit()))
  );
  TimerStart(lv_aWW, 1, false, f_aWS);
  lv_aWW = null;
}
function f_aWX() {
  if (
    GetUnitAbilityLevel(GetEnumUnit(), "B00G") > 0 &&
    !IsUnitInGroup(GetEnumUnit(), gv_amf)
  ) {
    GroupAddUnit(bj_groupAddGroupDest, GetEnumUnit());
    GroupAddUnit(gv_amf, GetEnumUnit());
  }
}
function f_aWY() {
  if (
    GetUnitAbilityLevel(GetEnumUnit(), "B00G") > 0 &&
    GetWidgetLife(GetEnumUnit()) > 0.405
  ) {
    IssueTargetOrderById(GetEnumUnit(), gv_aas, bj_ghoul[0]);
  } else {
    GroupRemoveUnit(gv_amf, GetEnumUnit());
    GroupRemoveUnit(bj_groupRemoveGroupDest, GetEnumUnit());
  }
}
function f_aWZ() {
  var lv_aXa = LoadInteger(gv_abY, 0, GetHandleId(GetExpiredTimer()));
  var lv_aXb;
  gv_ard[lv_aXa] = gv_ard.getInt(lv_aXa) + 1;
  if (gv_ard.getInt(lv_aXa) < 51 && GetWidgetLife(gv_arc[lv_aXa]) > 0.405) {
    bj_ghoul[0] = gv_arc[lv_aXa];
    bj_groupRemoveGroupDest = gv_are[lv_aXa];
    ForGroup(gv_are[lv_aXa], f_aWY);
    gv_are[lv_aXa] = bj_groupRemoveGroupDest;
  } else {
    f_aIM(gv_are[lv_aXa]);
    UnitRemoveAbility(gv_arc[lv_aXa], "A097");
    UnitRemoveAbility(gv_arc[lv_aXa], "A04W");
    UnitRemoveAbility(gv_arc[lv_aXa], "B00F");
    f_aGx(lv_aXa);
    f_aJk(GetExpiredTimer());
  }
  lv_aXb = null;
}
function f_aXc() {
  var lv_aXd = f_aGv();
  var lv_aXe = f_aJj();
  var lv_aXf = f_aIL();
  gv_arc[lv_aXd] = GetTriggerUnit();
  gv_ard[lv_aXd] = 0;
  gv_are[lv_aXd] = f_aIL();
  gv_acx = GetOwningPlayer(gv_arc[lv_aXd]);
  gv_acy = GetUnitX(gv_arc[lv_aXd]);
  gv_acz = GetUnitY(gv_arc[lv_aXd]);
  gv_acA = 400;
  GroupEnumUnitsInRange(lv_aXf, gv_acy, gv_acz, 500, Condition(f_aMk));
  bj_groupAddGroupDest = gv_are[lv_aXd];
  ForGroup(lv_aXf, f_aWX);
  f_aIM(lv_aXf);
  UnitAddAbility(gv_arc[lv_aXd], "A097");
  UnitAddAbility(gv_arc[lv_aXd], "A04W");
  SetUnitAbilityLevel(
    gv_arc[lv_aXd],
    "A04W",
    GetUnitAbilityLevel(gv_arc[lv_aXd], "A04A")
  );
  SetUnitAbilityLevel(
    gv_arc[lv_aXd],
    "A097",
    GetUnitAbilityLevel(gv_arc[lv_aXd], "A04A")
  );
  SaveInteger(gv_abY, 0, GetHandleId(lv_aXe), lv_aXd);
  TimerStart(lv_aXe, 0.2, true, f_aWZ);
  lv_aXe = null;
  lv_aXf = null;
  return lv_aXd;
}
function f_aXg() {
  return GetSpellAbilityId() == "A04A";
}
function f_aXh() {
  var lv_aXi = GetEnumUnit();
  if (
    gv_ami ||
    ((GetWidgetLife(lv_aXi) < 0.406 ||
      GetUnitAbilityLevel(lv_aXi, "B008") < 1) &&
      !IsUnitInRange(lv_aXi, gv_amh, 500) &&
      IsUnitInGroup(lv_aXi, gv_amg))
  ) {
    GroupRemoveUnit(gv_amg, lv_aXi);
    UnitRemoveAbility(lv_aXi, "A04P");
  }
  lv_aXi = null;
}
function f_aXj() {
  var lv_aXk = f_aGt();
  gv_ari[lv_aXk] = GetOrderedUnit();
  gv_arj[lv_aXk] = f_aIL();
  AddUnitAnimationProperties(gv_ari[lv_aXk], "Defend", true);
  UnitAddAbility(gv_ari[lv_aXk], "A04O");
  return lv_aXk;
}
function f_aXl(lv_aXm) {
  AddUnitAnimationProperties(gv_ari[lv_aXm], "Defend", false);
  UnitRemoveAbility(gv_ari[lv_aXm], "A04O");
  gv_ami = true;
  gv_amg = gv_arj[lv_aXm];
  ForGroup(gv_arj[lv_aXm], f_aXh);
  gv_ami = false;
  f_aIJ(gv_arj[lv_aXm]);
  f_aIM(gv_arj[lv_aXm]);
}
function f_aXn(lv_aXo) {
  if (lv_aXo == null) {
    return;
  } else {
    if (gv_arh.getInt(lv_aXo) != -1) {
      return;
    }
  }
  f_aXl(lv_aXo);
  gv_arh[lv_aXo] = gv_arf;
  gv_arf = lv_aXo;
}
function f_aXp() {
  var lv_aXq = GetExpiredTimer();
  var lv_aXr = LoadInteger(gv_abY, 0, GetHandleId(lv_aXq));
  var lv_aXs;
  var lv_aXt;
  if (
    GetWidgetLife(gv_ari[lv_aXr]) < 406 ||
    GetUnitAbilityLevel(gv_ari[lv_aXr], "B009") < 1
  ) {
    f_aXn(lv_aXr);
    f_aJk(lv_aXq);
  } else {
    lv_aXt = f_aIL();
    GroupEnumUnitsInRange(
      lv_aXt,
      GetUnitX(gv_ari[lv_aXr]),
      GetUnitY(gv_ari[lv_aXr]),
      600,
      null
    );
    do {
      lv_aXs = FirstOfGroup(lv_aXt);
      if (lv_aXs == null) {
        break;
      }
      if (
        !f_aMi(lv_aXs) &&
        GetWidgetLife(lv_aXs) > 0.405 &&
        IsUnitAlly(lv_aXs, GetOwningPlayer(gv_ari[lv_aXr])) &&
        GetUnitAbilityLevel(lv_aXs, "B008") > 0 &&
        GetUnitAbilityLevel(lv_aXs, "A04P") < 1 &&
        !IsUnitInGroup(lv_aXs, gv_arj[lv_aXr])
      ) {
        GroupAddUnit(gv_arj[lv_aXr], lv_aXs);
        UnitAddAbility(lv_aXs, "A04P");
        SetUnitAbilityLevel(
          lv_aXs,
          "A04Q",
          GetUnitAbilityLevel(gv_ari[lv_aXr], "A042") + R2I(f_ayQ(lv_aXs) / 2)
        );
      }
      GroupRemoveUnit(lv_aXt, lv_aXs);
    } while (true);
    gv_amg = gv_arj[lv_aXr];
    gv_amh = gv_ari[lv_aXr];
    ForGroup(gv_arj[lv_aXr], f_aXh);
    f_aIM(lv_aXt);
  }
  lv_aXq = null;
  lv_aXt = null;
  lv_aXs = null;
}
function f_aXu() {
  return (
    GetIssuedOrderId() == 852177 &&
    GetUnitAbilityLevel(GetOrderedUnit(), "A042") > 0
  );
}
function f_aXv() {
  var lv_aXw = f_aJj();
  SaveInteger(gv_abY, 0, GetHandleId(lv_aXw), f_aXj());
  TimerStart(lv_aXw, 0.2, true, f_aXp);
  lv_aXw = null;
}
function f_aXx() {
  var lv_aXy;
  var lv_aXz = GetEventDamageSource();
  if (
    GetUnitAbilityLevel(GetTriggerUnit(), "B00C") > 0 &&
    GetUnitAbilityLevel(lv_aXz, "A047") > 0
  ) {
    gv_aaj = f_aBD(
      lv_aXz,
      (GetHeroAgi(lv_aXz, true) + GetEventDamage()) * f_azM(lv_aXz) * 0.15
    );
    UnitDamageTarget(
      f_aJt(
        GetOwningPlayer(lv_aXz),
        GetUnitX(GetTriggerUnit()),
        GetUnitY(GetTriggerUnit()),
        1
      ),
      GetTriggerUnit(),
      gv_aaj * f_azK(lv_aXz),
      false,
      false,
      ATTACK_TYPE_NORMAL,
      DAMAGE_TYPE_UNIVERSAL,
      null
    );
    lv_aXy =
      (GetEventDamage() + gv_aaj) *
      gv_alu[1089 + GetUnitAbilityLevel(lv_aXz, "A047")];
    SetWidgetLife(lv_aXz, GetWidgetLife(lv_aXz) + lv_aXy * f_azK(lv_aXz));
    f_aMp(
      GetOwningPlayer(lv_aXz),
      S2S("+" + I2S(R2I(lv_aXy + 0.5))),
      128,
      255,
      0,
      GetUnitX(lv_aXz) - 16,
      GetUnitY(lv_aXz),
      0.08,
      0.0,
      3,
      10
    );
    f_aAj(lv_aXz);
  }
  lv_aXz = null;
  return false;
}
function f_aXA() {
  var lv_aXB = GetExpiredTimer();
  var lv_aXC = LoadInteger(gv_abY, 0, GetHandleId(lv_aXB));
  var lv_aXD = Atan2(
    gv_aro[lv_aXC] - GetUnitY(gv_arq[lv_aXC]),
    gv_arn[lv_aXC] - GetUnitX(gv_arq[lv_aXC])
  );
  SetUnitX(
    gv_arq[lv_aXC],
    GetUnitX(gv_arq[lv_aXC]) + Cos(lv_aXD) * gv_arp[lv_aXC]
  );
  SetUnitY(
    gv_arq[lv_aXC],
    GetUnitY(gv_arq[lv_aXC]) + Sin(lv_aXD) * gv_arp[lv_aXC]
  );
  if (
    IsUnitInRangeXY(
      gv_arq[lv_aXC],
      gv_arn[lv_aXC],
      gv_aro[lv_aXC],
      gv_arp[lv_aXC]
    ) ||
    f_aGm(lv_aXC, lv_aXD)
  ) {
    f_aGr(lv_aXC);
    GroupRemoveUnit(gv_acB, gv_arq[lv_aXC]);
    f_aJk(lv_aXB);
  }
  lv_aXB = null;
}
function f_aXE(lv_aXF, lv_aXG, lv_aXH, lv_aXI) {
  var lv_aXJ = f_aGp();
  var lv_aXK = f_aJj();
  gv_arq[lv_aXJ] = lv_aXF;
  gv_arn[lv_aXJ] = lv_aXG;
  gv_aro[lv_aXJ] = lv_aXH;
  gv_arp[lv_aXJ] = lv_aXI * 0.025;
  GroupAddUnit(gv_acB, gv_arq[lv_aXJ]);
  SaveInteger(gv_abY, 0, GetHandleId(lv_aXK), lv_aXJ);
  TimerStart(lv_aXK, 0.025, true, f_aXA);
  lv_aXK = null;
  return lv_aXJ;
}
function f_aXL() {
  GroupClear(gv_alD[LoadInteger(gv_abY, 0, GetHandleId(GetExpiredTimer()))]);
  f_aIJ(gv_alD[LoadInteger(gv_abY, 0, GetHandleId(GetExpiredTimer()))]);
  f_aJk(GetExpiredTimer());
}
function f_aXM() {
  return GetSpellAbilityId() == "A03Z";
}
function f_aXN() {
  var lv_aXO;
  var lv_aXP = GetTriggerUnit();
  var lv_aXQ = 0;
  var lv_aXR = GetUnitAbilityLevel(lv_aXP, "A03Z");
  var lv_aXS = 0.0;
  var lv_aXT = 15.65 * bj_DEGTORAD;
  var lv_aXU = GetPlayerId(GetOwningPlayer(lv_aXP));
  if (lv_aXR == 4) {
    lv_aXR = 5;
  }
  gv_alu[44 + lv_aXU] =
    (gv_alu[1077 + GetUnitAbilityLevel(lv_aXP, "A03Z")] +
      (((lv_aXR + 3) / 2) * GetHeroInt(lv_aXP, true) +
        (lv_aXR / 3) * GetHeroAgi(lv_aXP, true)) *
        f_azM(lv_aXP) +
      gv_alu[lv_aXU]) *
    f_azK(lv_aXP);
  do {
    if (lv_aXQ + 1 > 23) {
      break;
    }
    lv_aXO = f_aXE(
      CreateUnit(
        GetOwningPlayer(lv_aXP),
        "edry",
        GetUnitX(lv_aXP),
        GetUnitY(lv_aXP),
        lv_aXS * bj_RADTODEG
      ),
      GetUnitX(lv_aXP) + 600 * Cos(lv_aXS),
      GetUnitY(lv_aXP) + 600 * Sin(lv_aXS),
      375
    );
    gv_arr[lv_aXO] = f_aJt(
      GetOwningPlayer(lv_aXP),
      GetUnitX(gv_arq[lv_aXO]),
      GetUnitY(gv_arq[lv_aXO]),
      0.0
    );
    gv_ars[lv_aXO] = lv_aXU;
    SetUnitUserData(gv_arq[lv_aXO], lv_aXQ);
    f_aJA(gv_arr[lv_aXO], "A04L", GetUnitAbilityLevel(lv_aXP, "A03Z"));
    lv_aXS = lv_aXS + lv_aXT;
    lv_aXQ = lv_aXQ + 1;
  } while (true);
  lv_aXP = null;
}
function f_aXV() {
  return GetSpellAbilityId() == "A03P";
}
function f_aXW() {
  var lv_aXX = GetSpellTargetUnit();
  var lv_aXY = GetUnitAbilityLevel(GetTriggerUnit(), "A03P");
  var lv_aXZ;
  var lv_aYa;
  if (
    GetUnitAbilityLevel(lv_aXX, "B000") < 1 &&
    IsUnitInGroup(lv_aXX, gv_aaR) == false
  ) {
    lv_aXZ =
      (GetHeroAgi(lv_aXX, true) + f_aBg(lv_aXX, gv_abm)) *
      gv_alu[1300 + lv_aXY] *
      f_azM(lv_aXX) *
      f_azO(GetTriggerUnit());
    lv_aYa =
      (gv_alu[1306 + lv_aXY] + f_aBg(lv_aXX, gv_abl) * 0.25) *
      f_azM(lv_aXX) *
      f_azO(GetTriggerUnit());
    f_aBl(lv_aXX, gv_abm, R2I(lv_aXZ));
    f_aBl(lv_aXX, gv_abl, R2I(lv_aYa));
    GroupAddUnit(gv_aaR, lv_aXX);
    PolledWait(30);
    f_aBl(lv_aXX, gv_abm, -R2I(lv_aXZ));
    f_aBl(lv_aXX, gv_abl, -R2I(lv_aYa));
    UnitRemoveAbility(lv_aXX, "B000");
    GroupRemoveUnit(gv_aaR, lv_aXX);
  } else {
    DisplayTimedTextToPlayer(
      GetOwningPlayer(lv_aXX),
      0,
      0,
      5,
      "This unit is already buffed"
    );
  }
  lv_aXX = null;
}
function f_aYb() {
  return (
    GetIssuedOrderId() == 852067 &&
    GetUnitAbilityLevel(GetTriggerUnit(), "A03P") > 0
  );
}
function f_aYc() {
  IssueImmediateOrderById(
    gv_alv[LoadInteger(gv_abY, 0, GetHandleId(GetExpiredTimer()))],
    852068
  );
  f_aJk(GetExpiredTimer());
}
function f_aYd() {
  var lv_aYe = f_aJj();
  SaveInteger(
    gv_abY,
    0,
    GetHandleId(lv_aYe),
    GetPlayerId(GetOwningPlayer(GetTriggerUnit()))
  );
  TimerStart(lv_aYe, 0.0, false, f_aYc);
  lv_aYe = null;
}
function f_aYf() {
  return (
    (IsUnitType(GetAttacker(), UNIT_TYPE_ANCIENT) == false &&
      !IsUnitInGroup(GetTriggerUnit(), gv_alE) &&
      GetRandomReal(0.0, 100) < 15 * f_azK(GetTriggerUnit()) &&
      IsUnitEnemy(GetAttacker(), GetOwningPlayer(GetTriggerUnit())) &&
      GetUnitAbilityLevel(GetTriggerUnit(), "A03S") > 0) != null
  );
}
function f_aYg() {
  var lv_aYh = f_aJt(
    GetOwningPlayer(GetTriggerUnit()),
    GetUnitX(GetEnumUnit()),
    GetUnitY(GetEnumUnit()),
    0.0
  );
  DestroyEffect(
    AddSpecialEffectTarget(
      "Abilities\\Spells\\Other\\Stampede\\StampedeMissileDeath.mdl",
      GetEnumUnit(),
      "chest"
    )
  );
  UnitDamageTarget(
    lv_aYh,
    GetEnumUnit(),
    gv_aaj,
    false,
    false,
    ATTACK_TYPE_HERO,
    DAMAGE_TYPE_NORMAL,
    WEAPON_TYPE_METAL_HEAVY_SLICE
  );
  f_aJn(lv_aYh);
  lv_aYh = null;
}
function f_aYi() {
  var lv_aYj = f_aJj();
  var lv_aYk = f_aIL();
  GroupAddUnit(gv_alE, GetTriggerUnit());
  gv_acx = GetOwningPlayer(GetTriggerUnit());
  gv_acy = GetUnitX(GetTriggerUnit());
  gv_acz = GetUnitY(GetTriggerUnit());
  gv_acA = 250 * f_azK(GetTriggerUnit());
  SaveInteger(gv_abY, 0, GetHandleId(lv_aYj), GetPlayerId(gv_acx));
  GroupEnumUnitsInRange(
    lv_aYk,
    gv_acy,
    gv_acz,
    350 * f_azK(GetTriggerUnit()),
    Condition(f_aMk)
  );
  gv_aaj =
    (gv_alu[1083 + GetUnitAbilityLevel(GetTriggerUnit(), "A03S")] +
      GetHeroAgi(GetTriggerUnit(), true) * 3) *
    f_azK(GetTriggerUnit());
  ForGroup(lv_aYk, f_aYg);
  SetUnitAnimation(GetTriggerUnit(), "spell");
  QueueUnitAnimation(GetTriggerUnit(), "stand");
  TimerStart(lv_aYj, 0.25 / f_azK(GetTriggerUnit()), false, f_aMJ);
  SetWidgetLife(
    GetTriggerUnit(),
    GetWidgetLife(GetTriggerUnit()) +
      (I2R(GetHeroAgi(GetTriggerUnit(), true)) / 2) * f_azK(GetTriggerUnit())
  );
  f_aIM(lv_aYk);
  lv_aYk = null;
  lv_aYj = null;
}
function f_aYl() {
  var lv_aYm = GetExpiredTimer();
  var lv_aYn = LoadInteger(gv_abY, 0, GetHandleId(lv_aYm));
  var lv_aYo = Atan2(
    gv_arx[lv_aYn] - GetUnitY(gv_arz[lv_aYn]),
    gv_arw[lv_aYn] - GetUnitX(gv_arz[lv_aYn])
  );
  SetUnitX(
    gv_arz[lv_aYn],
    GetUnitX(gv_arz[lv_aYn]) + Cos(lv_aYo) * gv_ary[lv_aYn]
  );
  SetUnitY(
    gv_arz[lv_aYn],
    GetUnitY(gv_arz[lv_aYn]) + Sin(lv_aYo) * gv_ary[lv_aYn]
  );
  if (
    IsUnitInRangeXY(
      gv_arz[lv_aYn],
      gv_arw[lv_aYn],
      gv_arx[lv_aYn],
      gv_ary[lv_aYn]
    ) ||
    f_aGf(lv_aYn, lv_aYo)
  ) {
    f_aGk(lv_aYn);
    GroupRemoveUnit(gv_acB, gv_arz[lv_aYn]);
    f_aJk(lv_aYm);
  }
  lv_aYm = null;
}
function f_aYp(lv_aYq, lv_aYr, lv_aYs) {
  gv_arw[lv_aYq] = lv_aYr;
  gv_arx[lv_aYq] = lv_aYs;
}
function f_aYt(lv_aYu, lv_aYv, lv_aYw, lv_aYx) {
  var lv_aYy = f_aGi();
  var lv_aYz = f_aJj();
  gv_arz[lv_aYy] = lv_aYu;
  gv_arw[lv_aYy] = lv_aYv;
  gv_arx[lv_aYy] = lv_aYw;
  gv_ary[lv_aYy] = lv_aYx * 0.025;
  GroupAddUnit(gv_acB, gv_arz[lv_aYy]);
  SaveInteger(gv_abY, 0, GetHandleId(lv_aYz), lv_aYy);
  TimerStart(lv_aYz, 0.025, true, f_aYl);
  lv_aYz = null;
  return lv_aYy;
}
function f_aYA() {
  var lv_aYB;
  var lv_aYC = GetUnitAbilityLevel(GetTriggerUnit(), "A046");
  if (GetSpellAbilityId() == "A046") {
    lv_aYB = f_aYt(
      GetTriggerUnit(),
      GetUnitX(GetSpellTargetUnit()),
      GetUnitY(GetSpellTargetUnit()),
      250
    );
    SetUnitAnimationByIndex(gv_arz[lv_aYB], 6);
    gv_arB[lv_aYB] = GetSpellTargetUnit();
    gv_arA[lv_aYB] = 0;
    gv_arC[lv_aYB] =
      (gv_alu[1071 + lv_aYC] +
        (((lv_aYC + 3) * GetHeroStr(gv_arz[lv_aYB], true) +
          lv_aYC * GetHeroAgi(gv_arz[lv_aYB], true)) /
          3) *
          f_azM(gv_arz[lv_aYB])) *
      f_azK(gv_arz[lv_aYB]);
  }
  return false;
}
function f_aYD() {
  var lv_aYE = LoadInteger(gv_abY, 0, GetHandleId(GetExpiredTimer()));
  if (
    GetWidgetLife(gv_arG[lv_aYE]) < 0.406 ||
    GetUnitAbilityLevel(gv_arG[lv_aYE], "B015") < 1
  ) {
    UnitRemoveAbility(gv_arG[lv_aYE], "A05H");
    f_aGd(lv_aYE);
    f_aJk(GetExpiredTimer());
  }
}
function f_aYF() {
  return GetSpellAbilityId() == "A078";
}
function f_aYG() {
  var lv_aYH = f_aJj();
  var lv_aYI = f_aGb();
  gv_arG[lv_aYI] = GetTriggerUnit();
  UnitAddAbility(gv_arG[lv_aYI], "A05H");
  SaveInteger(gv_abY, 0, GetHandleId(lv_aYH), lv_aYI);
  TimerStart(lv_aYH, 0.3, true, f_aYD);
  lv_aYH = null;
}
function f_aYJ() {
  var lv_aYK;
  var lv_aYL = GetUnitAbilityLevel(GetEventDamageSource(), "A078") + 2;
  if (GetUnitAbilityLevel(GetEventDamageSource(), "A05H") > 0) {
    lv_aYK = f_aJt(
      GetOwningPlayer(GetEventDamageSource()),
      GetUnitX(GetTriggerUnit()),
      GetUnitY(GetTriggerUnit()),
      2
    );
    f_aJA(lv_aYK, "A07B", 0);
    IssueTargetOrderById(lv_aYK, 852095, GetTriggerUnit());
    if (lv_aYL == 5) {
      lv_aYL = lv_aYL * f_azK(GetEventDamageSource()) * 0.5;
    } else {
      lv_aYL = lv_aYL * 0.5;
    }
    gv_aaj =
      (GetEventDamage() +
        GetHeroAgi(GetEventDamageSource(), true) *
          f_azM(GetEventDamageSource()) *
          0.2) *
      lv_aYL;
    UnitDamageTarget(
      lv_aYK,
      GetTriggerUnit(),
      gv_aaj * f_azK(GetEventDamageSource()),
      false,
      false,
      ATTACK_TYPE_CHAOS,
      DAMAGE_TYPE_UNIVERSAL,
      null
    );
    f_aMp(
      null,
      S2S("+" + I2S(R2I(gv_aaj))),
      255,
      0,
      0,
      GetUnitX(GetEventDamageSource()),
      GetUnitY(GetEventDamageSource()),
      0.08,
      0.0,
      3,
      15
    );
    UnitRemoveAbility(GetEventDamageSource(), "B015");
  }
  lv_aYK = null;
  return false;
}
function f_aYM() {
  var lv_aYN = LoadInteger(gv_abY, 0, GetHandleId(GetExpiredTimer()));
  f_aJn(gv_arK[lv_aYN]);
  f_aFZ(lv_aYN);
  f_aJk(GetExpiredTimer());
}
function f_aYO() {
  var lv_aYP = GetExpiredTimer();
  var lv_aYQ = LoadInteger(gv_abY, 0, GetHandleId(lv_aYP));
  var lv_aYR = Atan2(
    gv_arP[lv_aYQ] - GetUnitY(gv_arR[lv_aYQ]),
    gv_arO[lv_aYQ] - GetUnitX(gv_arR[lv_aYQ])
  );
  SetUnitX(
    gv_arR[lv_aYQ],
    GetUnitX(gv_arR[lv_aYQ]) + Cos(lv_aYR) * gv_arQ[lv_aYQ]
  );
  SetUnitY(
    gv_arR[lv_aYQ],
    GetUnitY(gv_arR[lv_aYQ]) + Sin(lv_aYR) * gv_arQ[lv_aYQ]
  );
  if (
    IsUnitInRangeXY(
      gv_arR[lv_aYQ],
      gv_arO[lv_aYQ],
      gv_arP[lv_aYQ],
      gv_arQ[lv_aYQ]
    ) ||
    f_aFQ(lv_aYQ, lv_aYR)
  ) {
    f_aFV(lv_aYQ);
    GroupRemoveUnit(gv_acB, gv_arR[lv_aYQ]);
    f_aJk(lv_aYP);
  }
  lv_aYP = null;
}
function f_aYS(lv_aYT, lv_aYU, lv_aYV, lv_aYW) {
  var lv_aYX = f_aFT();
  var lv_aYY = f_aJj();
  gv_arR[lv_aYX] = lv_aYT;
  gv_arO[lv_aYX] = lv_aYU;
  gv_arP[lv_aYX] = lv_aYV;
  gv_arQ[lv_aYX] = lv_aYW * 0.025;
  GroupAddUnit(gv_acB, gv_arR[lv_aYX]);
  SaveInteger(gv_abY, 0, GetHandleId(lv_aYY), lv_aYX);
  TimerStart(lv_aYY, 0.025, true, f_aYO);
  lv_aYY = null;
  return lv_aYX;
}
function f_aYZ() {
  UnitDamageTarget(
    f_aJt(gv_acx, gv_acy, gv_acz, 1),
    GetEnumUnit(),
    gv_alN,
    false,
    false,
    ATTACK_TYPE_HERO,
    DAMAGE_TYPE_NORMAL,
    null
  );
}
function f_aZa() {
  return GetSpellAbilityId() == "A04V";
}
function f_aZb() {
  var lv_aZc = GetSpellTargetLoc();
  var lv_aZd = f_aYS(
    CreateUnit(
      GetOwningPlayer(GetTriggerUnit()),
      "eshd",
      GetUnitX(GetTriggerUnit()),
      GetUnitY(GetTriggerUnit()),
      GetUnitFacing(GetTriggerUnit())
    ),
    GetLocationX(lv_aZc),
    GetLocationY(lv_aZc),
    900
  );
  gv_arS[lv_aZd] = GetTriggerUnit();
  if (GetUnitAbilityLevel(gv_arS[lv_aZd], "B015") > 0) {
    UnitRemoveAbility(gv_arS[lv_aZd], "B015");
  }
  RemoveLocation(lv_aZc);
  lv_aZc = null;
}
function f_aZe() {
  var lv_aZf = LoadInteger(gv_abY, 0, GetHandleId(GetExpiredTimer()));
  UnitDamageTarget(
    gv_arW[lv_aZf],
    gv_arX[lv_aZf],
    gv_arY[lv_aZf],
    false,
    false,
    ATTACK_TYPE_HERO,
    DAMAGE_TYPE_NORMAL,
    null
  );
  f_aMp(
    null,
    I2S(R2I(gv_arY[lv_aZf] + 0.5)),
    255,
    50,
    25,
    GetUnitX(gv_arX[lv_aZf]),
    GetUnitY(gv_arX[lv_aZf]),
    0.061,
    0.0,
    3,
    10
  );
  gv_arZ[lv_aZf] = gv_arZ.getInt(lv_aZf) - 1;
  if (
    gv_arZ.getInt(lv_aZf) < 1 ||
    GetUnitAbilityLevel(gv_arX[lv_aZf], "B00D") < 1 ||
    GetWidgetLife(gv_arX[lv_aZf]) < 0.406
  ) {
    f_aJn(gv_arW[lv_aZf]);
    f_aFO(lv_aZf);
    f_aJk(GetExpiredTimer());
  }
}
function f_aZg() {
  return GetSpellAbilityId() == "A04U";
}
function f_aZh() {
  var lv_aZi = f_aJj();
  var lv_aZj = f_aFM();
  var lv_aZk = GetUnitAbilityLevel(GetTriggerUnit(), "A04U");
  var lv_aZl = GetPlayerId(GetOwningPlayer(GetTriggerUnit()));
  if (GetUnitAbilityLevel(GetTriggerUnit(), "B015") > 0) {
    UnitRemoveAbility(GetTriggerUnit(), "B015");
  }
  gv_arX[lv_aZj] = GetSpellTargetUnit();
  gv_arZ[lv_aZj] = 5;
  gv_arW[lv_aZj] = f_aJt(
    GetOwningPlayer(GetTriggerUnit()),
    GetUnitX(gv_arX[lv_aZj]),
    GetUnitY(gv_arX[lv_aZj]),
    0.0
  );
  gv_arY[lv_aZj] =
    ((gv_alu[1203 + lv_aZk] +
      gv_alu[lv_aZl] +
      ((3 + lv_aZk) * GetHeroStr(GetTriggerUnit(), true) * 0.5 +
        GetHeroAgi(GetTriggerUnit(), true) * 0.3) *
        gv_aam[lv_aZl]) /
      5) *
    gv_aan[lv_aZl];
  SaveInteger(gv_abY, 0, GetHandleId(lv_aZi), lv_aZj);
  TimerStart(lv_aZi, 1, true, f_aZe);
  lv_aZi = null;
}
function f_aZm() {
  var lv_aZn = LoadInteger(gv_abY, 0, GetHandleId(GetExpiredTimer()));
  RemoveUnit(gv_asd[lv_aZn]);
  f_aFK(lv_aZn);
  f_aJk(GetExpiredTimer());
}
function f_aZo() {
  var lv_aZp;
  var lv_aZq;
  var lv_aZr;
  var lv_aZs;
  var lv_aZt;
  var lv_aZu = GetEventDamageSource();
  if (GetUnitAbilityLevel(lv_aZu, "A06Y") > 0) {
    lv_aZp = GetUnitAbilityLevel(lv_aZu, "A06Y") * 15 * f_azK(lv_aZu);
    lv_aZq = gv_alu[1113 + GetUnitAbilityLevel(lv_aZu, "A06Y")];
    lv_aZq =
      (1 -
        GetWidgetLife(GetTriggerUnit()) /
          GetUnitState(GetTriggerUnit(), UNIT_STATE_MAX_LIFE)) /
      lv_aZq;
    if (
      GetRandomReal(0.0, 100) < 10 * f_azK(lv_aZu) &&
      (UnitHasItemOfTypeBJ(lv_aZu, "mnsf") ||
        UnitHasItemOfTypeBJ(lv_aZu, "rej1"))
    ) {
      if (UnitHasItemOfTypeBJ(lv_aZu, "rej1")) {
        lv_aZp = lv_aZp * 5;
      } else {
        lv_aZp = lv_aZp * 3;
      }
    }
    UnitDamageTarget(
      f_aJt(
        GetOwningPlayer(lv_aZu),
        GetUnitX(GetTriggerUnit()),
        GetUnitY(GetTriggerUnit()),
        1
      ),
      GetTriggerUnit(),
      lv_aZq * lv_aZp,
      false,
      false,
      ATTACK_TYPE_HERO,
      DAMAGE_TYPE_NORMAL,
      null
    );
  }
  if (
    GetUnitAbilityLevel(lv_aZu, "A056") > 0 &&
    GetRandomReal(0.0, 100) <
      5 + 5 * f_azM(lv_aZu) * GetUnitAbilityLevel(lv_aZu, "A056") &&
    !IsUnitInGroup(lv_aZu, gv_alE)
  ) {
    lv_aZq =
      Atan2(
        GetUnitY(GetTriggerUnit()) - GetUnitY(lv_aZu),
        GetUnitX(GetTriggerUnit()) - GetUnitX(lv_aZu)
      ) - GetRandomReal(2.5, 4.8);
    lv_aZs = CreateUnit(
      GetOwningPlayer(lv_aZu),
      "efdr",
      GetUnitX(GetTriggerUnit()) + Cos(lv_aZq) * 100,
      GetUnitY(GetTriggerUnit()) + Sin(lv_aZq) * 100,
      lv_aZq * bj_RADTODEG + 180
    );
    lv_aZt = f_aFI();
    SetUnitVertexColor(lv_aZs, 0, 0, 255, 150);
    SetUnitExploded(lv_aZs, true);
    UnitRemoveAbility(lv_aZs, "Aloc");
    SetUnitAnimation(lv_aZs, "attack");
    UnitDamageTarget(
      lv_aZs,
      GetTriggerUnit(),
      GetEventDamage() * f_azK(lv_aZu),
      true,
      false,
      ATTACK_TYPE_CHAOS,
      DAMAGE_TYPE_UNKNOWN,
      WEAPON_TYPE_METAL_HEAVY_SLICE
    );
    f_aAl(lv_aZu, GetEventDamage() * f_azK(lv_aZu));
    IssueTargetOrderById(GetTriggerUnit(), gv_aas, lv_aZs);
    lv_aZr = f_aJj();
    gv_asd[lv_aZt] = lv_aZs;
    SaveInteger(gv_abY, 0, GetHandleId(lv_aZr), lv_aZt);
    TimerStart(lv_aZr, 0.6, false, f_aZm);
    DestroyEffect(
      AddSpecialEffect(
        "Abilities\\Spells\\Items\\AIil\\AIilTarget.mdl",
        GetUnitX(lv_aZu),
        GetUnitY(lv_aZu)
      )
    );
    GroupAddUnit(gv_alE, lv_aZu);
    lv_aZr = f_aJj();
    SaveInteger(
      gv_abY,
      0,
      GetHandleId(lv_aZr),
      GetPlayerId(GetOwningPlayer(lv_aZu))
    );
    TimerStart(
      lv_aZr,
      (3.3 - GetUnitAbilityLevel(lv_aZu, "A056") * 0.3) / f_azK(lv_aZu),
      false,
      f_aMJ
    );
  }
  lv_aZr = null;
  lv_aZs = null;
  lv_aZu = null;
  return false;
}
function f_aZv() {
  var lv_aZw = GetExpiredTimer();
  var lv_aZx = LoadInteger(gv_abY, 0, GetHandleId(lv_aZw));
  if (
    GetUnitAbilityLevel(gv_ash[lv_aZx], "B007") < 1 ||
    GetWidgetLife(gv_ash[lv_aZx]) < 0.406
  ) {
    UnitRemoveAbility(gv_ash[lv_aZx], "A04M");
    f_aJk(lv_aZw);
    f_aFG(lv_aZx);
  }
  lv_aZw = null;
}
function f_aZy() {
  var lv_aZz;
  var lv_aZA;
  var lv_aZB;
  var lv_aZC;
  var lv_aZD = GetEventDamageSource();
  if (
    GetUnitAbilityLevel(lv_aZD, "A03U") > 0 &&
    GetUnitAbilityLevel(GetTriggerUnit(), "B003") > 0
  ) {
    lv_aZz = f_aBD(
      lv_aZD,
      ((2 + GetUnitAbilityLevel(lv_aZD, "A03U")) / 100) *
        f_azO(lv_aZD) *
        GetRandomReal(0.9, 1.1)
    );
    if (
      UnitHasItemOfTypeBJ(lv_aZD, "ofir") ||
      UnitHasItemOfTypeBJ(lv_aZD, "ocor")
    ) {
      lv_aZz =
        GetUnitState(GetEventDamageSource(), UNIT_STATE_MANA) * lv_aZz * 1.2;
    } else {
      lv_aZz = GetUnitState(GetEventDamageSource(), UNIT_STATE_MANA) * lv_aZz;
    }
    SetUnitState(
      lv_aZD,
      UNIT_STATE_MANA,
      GetUnitState(lv_aZD, UNIT_STATE_MANA) - lv_aZz / 7
    );
    UnitDamageTarget(
      f_aJt(
        GetOwningPlayer(lv_aZD),
        GetUnitX(GetTriggerUnit()),
        GetUnitY(GetTriggerUnit()),
        1
      ),
      GetTriggerUnit(),
      lv_aZz * f_azK(lv_aZD),
      false,
      false,
      ATTACK_TYPE_NORMAL,
      DAMAGE_TYPE_UNIVERSAL,
      null
    );
    f_aMp(
      null,
      S2S("+" + I2S(R2I(lv_aZz + 0.5))),
      0,
      0,
      255,
      GetUnitX(GetTriggerUnit()) - 16,
      GetUnitY(GetTriggerUnit()),
      0.08,
      0.0,
      3,
      12.5
    );
    f_aAj(lv_aZD);
  }
  if (GetUnitAbilityLevel(GetEventDamageSource(), "A040") > 0) {
    lv_aZA = f_aJt(
      GetOwningPlayer(GetEventDamageSource()),
      GetUnitX(GetTriggerUnit()),
      GetUnitY(GetTriggerUnit()),
      1
    );
    f_aJA(
      lv_aZA,
      "A04X",
      GetUnitAbilityLevel(GetEventDamageSource(), "A040") +
        f_ayQ(GetEventDamageSource())
    );
    IssueTargetOrderById(lv_aZA, 852075, GetTriggerUnit());
    if (!IsUnitInGroup(GetTriggerUnit(), gv_amj)) {
      lv_aZB = f_aJj();
      lv_aZC = f_aFE();
      gv_ash[lv_aZC] = GetTriggerUnit();
      UnitAddAbility(gv_ash[lv_aZC], "A04M");
      SetUnitAbilityLevel(
        gv_ash[lv_aZC],
        "A04M",
        GetUnitAbilityLevel(lv_aZA, "A04X")
      );
      SaveInteger(gv_abY, 0, GetHandleId(lv_aZB), lv_aZC);
      TimerStart(lv_aZB, 0.3, true, f_aZv);
    }
  }
  lv_aZB = null;
  lv_aZA = null;
  return false;
}
function f_aZE() {
  return GetSpellAbilityId() == "A048";
}
function f_aZF() {
  UnitDamageTarget(
    GetTriggerUnit(),
    GetEnumUnit(),
    gv_alN,
    false,
    false,
    ATTACK_TYPE_NORMAL,
    DAMAGE_TYPE_UNIVERSAL,
    null
  );
  f_aNn(
    GetEnumUnit(),
    Atan2(
      GetUnitY(GetEnumUnit()) - GetUnitY(GetTriggerUnit()),
      GetUnitX(GetEnumUnit()) - GetUnitX(GetTriggerUnit())
    )
  );
}
function f_aZG() {
  var lv_aZH = GetPlayerId(GetOwningPlayer(GetTriggerUnit()));
  var lv_aZI = f_aIL();
  var lv_aZJ = GetUnitAbilityLevel(GetTriggerUnit(), "A048");
  gv_acy = GetUnitX(GetTriggerUnit());
  gv_acz = GetUnitY(GetTriggerUnit());
  gv_acx = GetOwningPlayer(GetTriggerUnit());
  gv_acA = 300 * f_azM(GetTriggerUnit());
  GroupEnumUnitsInRange(
    lv_aZI,
    gv_acy,
    gv_acz,
    400 * f_azM(GetTriggerUnit()),
    Condition(f_aMk)
  );
  gv_alN =
    gv_alu[999 + lv_aZJ] +
    (((gv_alu[lv_aZH] + GetHeroInt(GetTriggerUnit(), true)) * (lv_aZJ + 4)) /
      5) *
      f_azM(GetTriggerUnit());
  if (lv_aZJ == 3) {
    gv_alN = gv_alN * f_azK(GetTriggerUnit());
  }
  ForGroup(lv_aZI, f_aZF);
  f_aIM(lv_aZI);
  lv_aZI = null;
}
function f_aZK() {
  var lv_aZL = GetExpiredTimer();
  var lv_aZM = LoadInteger(gv_abY, 0, GetHandleId(lv_aZL));
  var lv_aZN = Atan2(
    gv_asm[lv_aZM] - GetUnitY(gv_aso[lv_aZM]),
    gv_asl[lv_aZM] - GetUnitX(gv_aso[lv_aZM])
  );
  SetUnitX(
    gv_aso[lv_aZM],
    GetUnitX(gv_aso[lv_aZM]) + Cos(lv_aZN) * gv_asn[lv_aZM]
  );
  SetUnitY(
    gv_aso[lv_aZM],
    GetUnitY(gv_aso[lv_aZM]) + Sin(lv_aZN) * gv_asn[lv_aZM]
  );
  if (
    IsUnitInRangeXY(
      gv_aso[lv_aZM],
      gv_asl[lv_aZM],
      gv_asm[lv_aZM],
      gv_asn[lv_aZM]
    ) ||
    f_aFx(lv_aZM, lv_aZN)
  ) {
    f_aFC(lv_aZM);
    GroupRemoveUnit(gv_acB, gv_aso[lv_aZM]);
    f_aJk(lv_aZL);
  }
  lv_aZL = null;
}
function f_aZO(lv_aZP, lv_aZQ, lv_aZR) {
  gv_asl[lv_aZP] = lv_aZQ;
  gv_asm[lv_aZP] = lv_aZR;
}
function f_aZS(lv_aZT, lv_aZU, lv_aZV, lv_aZW) {
  var lv_aZX = f_aFA();
  var lv_aZY = f_aJj();
  gv_aso[lv_aZX] = lv_aZT;
  gv_asl[lv_aZX] = lv_aZU;
  gv_asm[lv_aZX] = lv_aZV;
  gv_asn[lv_aZX] = lv_aZW * 0.025;
  GroupAddUnit(gv_acB, gv_aso[lv_aZX]);
  SaveInteger(gv_abY, 0, GetHandleId(lv_aZY), lv_aZX);
  TimerStart(lv_aZY, 0.025, true, f_aZK);
  lv_aZY = null;
  return lv_aZX;
}
function f_aZZ() {
  var lv_baa;
  var lv_bab;
  var lv_bac = GetUnitAbilityLevel(GetTriggerUnit(), "A041");
  if (GetSpellAbilityId() == "A041") {
    lv_bab = GetPlayerId(GetOwningPlayer(GetTriggerUnit()));
    lv_baa = f_aZS(
      CreateUnit(
        GetOwningPlayer(GetTriggerUnit()),
        "echm",
        GetUnitX(GetTriggerUnit()),
        GetUnitY(GetTriggerUnit()),
        GetUnitFacing(GetTriggerUnit())
      ),
      GetUnitX(GetSpellTargetUnit()),
      GetUnitY(GetSpellTargetUnit()),
      667
    );
    gv_asp[lv_baa] =
      (gv_alu[1005 + lv_bac] +
        ((GetHeroInt(GetTriggerUnit(), true) + gv_alu[lv_bab]) * (lv_bac + 2)) /
          3) *
      f_azK(GetTriggerUnit());
    gv_asq[lv_baa] = GetSpellTargetUnit();
  }
  return false;
}
function f_bad() {
  var lv_bae = GetExpiredTimer();
  var lv_baf = LoadInteger(gv_abY, 0, GetHandleId(lv_bae));
  if (
    GetWidgetLife(gv_asu[lv_baf]) < 0.406 ||
    GetUnitAbilityLevel(gv_asu[lv_baf], "B00S") < 1
  ) {
    GroupRemoveUnit(gv_amk, gv_asu[lv_baf]);
    UnitRemoveAbility(gv_asu[lv_baf], "A05W");
    UnitRemoveAbility(gv_asu[lv_baf], "A062");
    UnitRemoveAbility(gv_asu[lv_baf], "A05W");
    RemoveSavedInteger(gv_abT, gv_aml, GetHandleId(gv_asu[lv_baf]));
    f_aFv(lv_baf);
    f_aJk(lv_bae);
  }
  lv_bae = null;
}
function f_bag() {
  return GetSpellAbilityId() == "A064";
}
function f_bah() {
  var lv_bai = GetPlayerId(GetOwningPlayer(GetTriggerUnit()));
  var lv_baj;
  var lv_bak;
  var lv_bal = GetUnitAbilityLevel(GetTriggerUnit(), "A064");
  if (!IsUnitInGroup(GetTriggerUnit(), gv_amk)) {
    lv_baj = f_aJj();
    lv_bak = f_aFt();
    gv_asu[lv_bak] = GetTriggerUnit();
    GroupAddUnit(gv_amk, gv_asu[lv_bak]);
    UnitAddAbility(gv_asu[lv_bak], "A05W");
    UnitAddAbility(gv_asu[lv_bak], "A062");
    SetUnitAbilityLevel(
      gv_asu[lv_bak],
      "A05W",
      lv_bal + IMinBJ(f_ayQ(gv_asu[lv_bak]), lv_bal)
    );
    gv_asv[lv_bak] =
      (gv_alu[1125 + lv_bal] + gv_alu[lv_bai] / 10) * f_azK(gv_asu[lv_bak]);
    gv_asw[lv_bak] = 1 - 1 / f_azK(gv_asu[lv_bak]);
    SaveInteger(gv_abT, gv_aml, GetHandleId(gv_asu[lv_bak]), lv_bak);
    SaveInteger(gv_abY, 0, GetHandleId(lv_baj), lv_bak);
    TimerStart(lv_baj, 0.3, true, f_bad);
  } else {
    lv_bal = lv_bal + IMinBJ(f_ayQ(gv_asu[lv_bak]), lv_bal);
    lv_bak = LoadInteger(gv_abT, gv_aml, GetHandleId(GetTriggerUnit()));
    if (lv_bal > GetUnitAbilityLevel(gv_asu[lv_bak], "A05W")) {
      SetUnitAbilityLevel(gv_asu[lv_bak], "A05W", lv_bal);
      gv_asv[lv_bak] =
        (gv_alu[1125 + lv_bal] + gv_alu[lv_bai] / 10) * f_azK(gv_asu[lv_bak]);
      gv_asw[lv_bak] = 1 - 1 / f_azK(gv_asu[lv_bak]);
    }
  }
  lv_baj = null;
}
function f_bam() {
  var lv_ban = LoadInteger(gv_abT, gv_aml, GetHandleId(GetTriggerUnit()));
  var lv_bao;
  if (
    GetUnitAbilityLevel(GetTriggerUnit(), "B00S") > 0 &&
    IsUnitType(GetEventDamageSource(), UNIT_TYPE_ANCIENT) == false &&
    IsUnitType(GetEventDamageSource(), UNIT_TYPE_STRUCTURE) == false
  ) {
    DestroyEffect(
      AddSpecialEffectTarget(
        "Abilities\\Weapons\\DemolisherFireMissile\\DemolisherFireMissile.mdl",
        GetEventDamageSource(),
        "origin"
      )
    );
    if (
      IsUnitInGroup(GetEventDamageSource(), gv_amn) &&
      GetUnitAbilityLevel(GetEventDamageSource(), "B00K") > 0
    ) {
      lv_bao = LoadInteger(gv_abT, gv_amm, GetHandleId(GetEventDamageSource()));
      UnitDamageTarget(
        gv_asB[lv_bao],
        GetEventDamageSource(),
        gv_asv[lv_ban] *
          (1 + gv_asD.getInt(lv_bao) * gv_abz * f_azK(GetTriggerUnit())),
        false,
        false,
        ATTACK_TYPE_HERO,
        DAMAGE_TYPE_NORMAL,
        null
      );
    } else {
      UnitDamageTarget(
        f_aJt(
          GetOwningPlayer(gv_asu[lv_ban]),
          GetUnitX(gv_asu[lv_ban]),
          GetUnitY(gv_asu[lv_ban]),
          1
        ),
        GetEventDamageSource(),
        gv_asv[lv_ban],
        false,
        false,
        ATTACK_TYPE_HERO,
        DAMAGE_TYPE_NORMAL,
        null
      );
    }
    if (GetWidgetLife(GetTriggerUnit()) > 0.5) {
      SetWidgetLife(
        GetTriggerUnit(),
        GetWidgetLife(GetTriggerUnit()) + GetEventDamage() * gv_asw[lv_ban]
      );
    }
  }
  return false;
}
function f_bap() {
  var lv_baq = LoadInteger(gv_abY, 0, GetHandleId(GetExpiredTimer()));
  if (
    GetWidgetLife(gv_asA[lv_baq]) > 0.405 &&
    GetUnitAbilityLevel(gv_asA[lv_baq], "B00K") > 0
  ) {
    UnitDamageTarget(
      gv_asB[lv_baq],
      gv_asA[lv_baq],
      gv_asC[lv_baq] * f_aAn(gv_asB[lv_baq]),
      false,
      false,
      ATTACK_TYPE_NORMAL,
      DAMAGE_TYPE_UNIVERSAL,
      null
    );
  } else {
    f_aJn(gv_asB[lv_baq]);
    GroupRemoveUnit(gv_amn, gv_asA[lv_baq]);
    f_aFr(lv_baq);
    f_aJk(GetExpiredTimer());
  }
}
function f_bar() {
  return GetSpellAbilityId() == "A065";
}
function f_bas() {
  var lv_bat;
  var lv_bau;
  var lv_bav = GetPlayerId(GetOwningPlayer(GetTriggerUnit()));
  var lv_baw;
  var lv_bax = f_azK(GetTriggerUnit());
  var lv_bay = GetUnitAbilityLevel(GetTriggerUnit(), "A065");
  if (!IsUnitInGroup(GetSpellTargetUnit(), gv_amn)) {
    lv_bat = f_aFp();
    lv_bau = f_aJj();
    gv_asD[lv_bat] = lv_bay;
    lv_baw = (gv_alu[1149 + gv_asD.getInt(lv_bat)] + gv_alu[lv_bav]) * lv_bax;
    gv_asC[lv_bat] =
      ((gv_asD.getInt(lv_bat) * 50 + gv_alu[lv_bav]) / 7) * 0.2 * lv_bax;
    gv_asA[lv_bat] = GetSpellTargetUnit();
    gv_asB[lv_bat] = f_aJt(
      GetOwningPlayer(GetTriggerUnit()),
      GetUnitX(gv_asA[lv_bat]),
      GetUnitY(gv_asA[lv_bat]),
      0.0
    );
    SaveInteger(gv_abT, gv_amm, GetHandleId(gv_asA[lv_bat]), lv_bat);
    GroupAddUnit(gv_amn, gv_asA[lv_bat]);
    SaveInteger(gv_abY, 0, GetHandleId(lv_bau), lv_bat);
    TimerStart(lv_bau, 0.2, true, f_bap);
  } else {
    lv_bat = LoadInteger(gv_abT, gv_amm, GetHandleId(GetSpellTargetUnit()));
    lv_baw = (gv_alu[1149 + lv_bay] + gv_alu[lv_bav]) * lv_bax;
    gv_asD[lv_bat] = lv_bay;
    gv_asC[lv_bat] =
      ((gv_asD.getInt(lv_bat) * 50 + gv_alu[lv_bav]) / 7) * 0.2 * lv_bax;
  }
  if (
    IsUnitInGroup(gv_asA[lv_bat], gv_amn) &&
    GetUnitAbilityLevel(gv_asA[lv_bat], "B00K") > 0
  ) {
    lv_baw = lv_baw * (1 + gv_asD.getInt(lv_bat) * gv_abz * lv_bax);
    gv_asC[lv_bat] = gv_asC[lv_bat] * (1 + gv_asD.getInt(lv_bat) * gv_abz);
  }
  UnitDamageTarget(
    gv_asB[lv_bat],
    gv_asA[lv_bat],
    lv_baw * f_aAn(GetTriggerUnit()),
    false,
    false,
    ATTACK_TYPE_NORMAL,
    DAMAGE_TYPE_UNIVERSAL,
    null
  );
  lv_bau = null;
}
function f_baz() {
  var lv_baA = LoadInteger(gv_abY, 0, GetHandleId(GetExpiredTimer()));
  gv_asK[lv_baA] = gv_asK[lv_baA] - 0.2;
  if (gv_asK[lv_baA] > 0.2 && GetWidgetLife(gv_asH[lv_baA]) > 0.405) {
    UnitDamageTarget(
      gv_asI[lv_baA],
      gv_asH[lv_baA],
      gv_asJ[lv_baA] * f_aAn(gv_asI[lv_baA]),
      false,
      false,
      ATTACK_TYPE_NORMAL,
      DAMAGE_TYPE_UNIVERSAL,
      null
    );
  } else {
    DestroyEffect(gv_asL[lv_baA]);
    RemoveSavedInteger(gv_abT, gv_amp, GetHandleId(gv_asH[lv_baA]));
    GroupRemoveUnit(gv_amo, gv_asH[lv_baA]);
    UnitRemoveAbility(gv_asH[lv_baA], "A06B");
    f_aJn(gv_asI[lv_baA]);
    f_aFn(lv_baA);
    f_aJk(GetExpiredTimer());
  }
}
function f_baB() {
  var lv_baC;
  var lv_baD;
  var lv_baE;
  if (!IsUnitInGroup(GetEnumUnit(), gv_amo)) {
    lv_baC = f_aFl();
    lv_baD = f_aJj();
    gv_asH[lv_baC] = GetEnumUnit();
    gv_asI[lv_baC] = f_aJt(
      GetOwningPlayer(GetTriggerUnit()),
      GetUnitX(gv_asH[lv_baC]),
      GetUnitY(gv_asH[lv_baC]),
      0.0
    );
    gv_asJ[lv_baC] = gv_alN;
    gv_asK[lv_baC] = 8;
    gv_asL[lv_baC] = AddSpecialEffectTarget(
      "Environment\\SmallBuildingFire\\SmallBuildingFire2.mdl",
      gv_asH[lv_baC],
      "head"
    );
    SaveInteger(gv_abT, gv_amp, GetHandleId(gv_asH[lv_baC]), lv_baC);
    if (
      IsUnitInGroup(gv_asH[lv_baC], gv_amn) &&
      GetUnitAbilityLevel(gv_asH[lv_baC], "B00K") > 0
    ) {
      lv_baE = LoadInteger(gv_abT, gv_amm, GetHandleId(gv_asH[lv_baC]));
      gv_asJ[lv_baC] = gv_asJ[lv_baC] * (1 + gv_asD.getInt(lv_baE) * gv_abz);
    }
    UnitAddAbility(gv_asH[lv_baC], "A06B");
    SetUnitAbilityLevel(gv_asH[lv_baC], "A06B", gv_alO);
    GroupAddUnit(gv_amo, gv_asH[lv_baC]);
    SaveInteger(gv_abY, 0, GetHandleId(lv_baD), lv_baC);
    UnitDamageTarget(
      gv_asI[lv_baC],
      gv_asH[lv_baC],
      gv_asJ[lv_baC] * 20 * f_aAn(gv_asI[lv_baC]),
      false,
      false,
      ATTACK_TYPE_NORMAL,
      DAMAGE_TYPE_UNIVERSAL,
      null
    );
    TimerStart(lv_baD, 0.2, true, f_baz);
  } else {
    lv_baC = LoadInteger(gv_abT, gv_amp, GetHandleId(GetEnumUnit()));
    gv_asK[lv_baC] = 8;
  }
  lv_baD = null;
}
function f_baF() {
  return GetSpellAbilityId() == "A068";
}
function f_baG() {
  var lv_baH = f_aIL();
  var lv_baI = GetSpellTargetLoc();
  var lv_baJ = Atan2(
    GetLocationY(lv_baI) - GetUnitY(GetTriggerUnit()),
    GetLocationX(lv_baI) - GetUnitX(GetTriggerUnit())
  );
  var lv_baK = Cos(lv_baJ) * 125;
  var lv_baL = Sin(lv_baJ) * 125;
  var lv_baM = GetUnitX(GetTriggerUnit()) + Cos(lv_baJ) * 62.5;
  var lv_baN = GetUnitY(GetTriggerUnit()) + Sin(lv_baJ) * 62.5;
  var lv_baO = 62.5;
  var lv_baP = GetPlayerId(GetOwningPlayer(GetTriggerUnit()));
  gv_alO = GetUnitAbilityLevel(GetTriggerUnit(), "A068");
  gv_alN =
    ((gv_alu[1137 + gv_alO] + (gv_alu[lv_baP] * (gv_alO + 2)) / 3) / 10) *
    0.2 *
    f_azK(GetTriggerUnit());
  do {
    if (lv_baO > 1000) {
      break;
    }
    gv_acy = lv_baM;
    gv_acz = lv_baN;
    gv_acA = 175 * f_azM(GetTriggerUnit());
    gv_acx = GetOwningPlayer(GetTriggerUnit());
    GroupEnumUnitsInRange(
      lv_baH,
      gv_acy,
      gv_acz,
      300 * f_azM(GetTriggerUnit()),
      Condition(f_aMk)
    );
    f_aLX(AddSpecialEffect("MDX\\MagmaBurst.mdx", lv_baM, lv_baN), 1);
    ForGroup(lv_baH, f_baB);
    lv_baM = lv_baM + lv_baK;
    lv_baN = lv_baN + lv_baL;
    lv_baO = lv_baO + 125;
  } while (true);
  RemoveLocation(lv_baI);
  f_aIM(lv_baH);
  lv_baI = null;
  lv_baH = null;
}
function f_baQ() {
  return GetSpellAbilityId() == "A067";
}
function f_baR() {
  var lv_baS;
  var lv_baT = f_aIL();
  var lv_baU = LoadInteger(gv_abY, 0, GetHandleId(GetExpiredTimer()));
  var lv_baV = gv_alv[100 + lv_baU];
  var lv_baW = gv_alv[108 + lv_baU];
  var lv_baX = GetUnitAbilityLevel(lv_baV, "A067");
  var lv_baY =
    (gv_alu[1131 + lv_baX] + (gv_alu[lv_baU] * (2 + lv_baX)) / 3) *
    f_azK(lv_baV);
  var lv_baZ = f_aJt(
    GetOwningPlayer(lv_baV),
    GetUnitX(lv_baW),
    GetUnitY(lv_baW),
    2
  );
  if (
    IsUnitInGroup(lv_baW, gv_amn) &&
    GetUnitAbilityLevel(lv_baW, "B00K") > 0
  ) {
    lv_baS = LoadInteger(gv_abT, gv_amm, GetHandleId(lv_baW));
    lv_baY = lv_baY * (1 + gv_asD.getInt(lv_baS) * gv_abz * f_azM(lv_baV));
  }
  f_aJA(lv_baZ, "A061", 0);
  IssueTargetOrderById(lv_baZ, 852095, lv_baW);
  UnitDamageTarget(
    lv_baZ,
    lv_baW,
    lv_baY * 0.8 * f_aAn(lv_baV),
    false,
    false,
    ATTACK_TYPE_NORMAL,
    DAMAGE_TYPE_UNIVERSAL,
    null
  );
  lv_baY = lv_baY * 0.6;
  gv_acy = GetUnitX(lv_baW);
  gv_acz = GetUnitY(lv_baW);
  gv_acA = 260 * f_azM(lv_baV);
  gv_acx = GetOwningPlayer(lv_baV);
  GroupEnumUnitsInRange(
    lv_baT,
    gv_acy,
    gv_acz,
    350 * f_azM(lv_baV),
    Condition(f_aMk)
  );
  do {
    lv_baW = FirstOfGroup(lv_baT);
    if (lv_baW == null) {
      break;
    }
    UnitDamageTarget(
      lv_baZ,
      lv_baW,
      lv_baY * f_aAn(lv_baV),
      false,
      false,
      ATTACK_TYPE_MAGIC,
      DAMAGE_TYPE_MAGIC,
      null
    );
    GroupRemoveUnit(lv_baT, lv_baW);
  } while (true);
  f_aIM(lv_baT);
  f_aJk(GetExpiredTimer());
  lv_baV = null;
  lv_baZ = null;
  lv_baT = null;
  lv_baW = null;
}
function f_bba() {
  var lv_bbb = f_aJj();
  var lv_bbc = GetPlayerId(GetOwningPlayer(GetTriggerUnit()));
  gv_alv[100 + lv_bbc] = GetTriggerUnit();
  gv_alv[108 + lv_bbc] = GetSpellTargetUnit();
  DestroyEffect(
    AddSpecialEffectTarget(
      "MDX\\MeteorAttack.mdx",
      gv_alv[108 + lv_bbc],
      "origin"
    )
  );
  SaveInteger(gv_abY, 0, GetHandleId(lv_bbb), lv_bbc);
  TimerStart(lv_bbb, 0.4, false, f_baR);
  lv_bbb = null;
}
function f_bbd() {
  DestroyEffect(
    AddSpecialEffectTarget(
      "Abilities\\Spells\\Other\\Incinerate\\FireLordDeathExplode.mdl",
      GetEnumUnit(),
      "head"
    )
  );
  UnitDamageTarget(
    f_aJt(gv_acx, gv_acy, gv_acz, 1),
    GetEnumUnit(),
    gv_alN,
    false,
    false,
    ATTACK_TYPE_NORMAL,
    DAMAGE_TYPE_UNIVERSAL,
    null
  );
}
function f_bbe() {
  var lv_bbf = LoadInteger(gv_abY, 0, GetHandleId(GetExpiredTimer()));
  var lv_bbg = f_aIL();
  gv_acy = GetUnitX(gv_asP[lv_bbf]);
  gv_acz = GetUnitY(gv_asP[lv_bbf]);
  gv_acA = 600 * f_azM(gv_asP[lv_bbf]);
  gv_acx = GetOwningPlayer(gv_asP[lv_bbf]);
  GroupEnumUnitsInRange(
    lv_bbg,
    gv_acy,
    gv_acz,
    RMinBJ(700 * f_azM(gv_asP[lv_bbf]), 980),
    Condition(f_aMk)
  );
  gv_alN = gv_asQ[lv_bbf] * f_aAn(gv_asP[lv_bbf]);
  ForGroup(lv_bbg, f_bbd);
  if (
    GetWidgetLife(gv_asP[lv_bbf]) < 0.406 ||
    GetUnitCurrentOrder(gv_asP[lv_bbf]) != 852184
  ) {
    GroupRemoveUnit(gv_amq, gv_asP[lv_bbf]);
    f_aFj(lv_bbf);
    f_aJk(GetExpiredTimer());
  }
  f_aIM(lv_bbg);
  lv_bbg = null;
}
function f_bbh() {
  return (
    GetSpellAbilityId() == "A066" && !IsUnitInGroup(GetTriggerUnit(), gv_amq)
  );
}
function f_bbi() {
  var lv_bbj = f_aJj();
  var lv_bbk = f_aFh();
  var lv_bbl = GetPlayerId(GetOwningPlayer(GetTriggerUnit()));
  var lv_bbm = GetUnitAbilityLevel(gv_asP[lv_bbk], "A066");
  gv_asP[lv_bbk] = GetTriggerUnit();
  gv_asQ[lv_bbk] =
    gv_alu[1143 + lv_bbm] +
    (gv_alu[lv_bbl] / (10 - lv_bbm)) * f_azK(gv_asP[lv_bbk]);
  GroupAddUnit(gv_amq, gv_asP[lv_bbk]);
  SaveInteger(gv_abY, 0, GetHandleId(lv_bbj), lv_bbk);
  TimerStart(lv_bbj, 1, true, f_bbe);
  lv_bbj = null;
}
function f_bbn() {
  var lv_bbo = GetExpiredTimer();
  var lv_bbp = LoadInteger(gv_abY, 0, GetHandleId(lv_bbo));
  if (
    GetWidgetLife(gv_asU[lv_bbp]) < 0.406 ||
    GetUnitAbilityLevel(gv_asU[lv_bbp], "B00Y") < 1
  ) {
    GroupRemoveUnit(gv_amr, gv_asU[lv_bbp]);
    UnitRemoveAbility(gv_asU[lv_bbp], "A06H");
    UnitRemoveAbility(gv_asU[lv_bbp], "A062");
    UnitRemoveAbility(gv_asU[lv_bbp], "A06H");
    f_aJn(gv_asV[lv_bbp]);
    RemoveSavedInteger(gv_abT, gv_ams, GetHandleId(gv_asU[lv_bbp]));
    f_aFf(lv_bbp);
    f_aJk(lv_bbo);
  }
  lv_bbo = null;
}
function f_bbq() {
  var lv_bbr;
  if (
    GetUnitAbilityLevel(GetTriggerUnit(), "B00Y") > 0 &&
    IsUnitType(GetEventDamageSource(), UNIT_TYPE_ANCIENT) == false &&
    IsUnitType(GetEventDamageSource(), UNIT_TYPE_STRUCTURE) == false
  ) {
    lv_bbr = LoadInteger(gv_abT, gv_ams, GetHandleId(GetTriggerUnit()));
    IssueTargetOrderById(gv_asV[lv_bbr], 852226, GetEventDamageSource());
  }
  return false;
}
function f_bbs() {
  return GetSpellAbilityId() == "A06L";
}
function f_bbt() {
  var lv_bbu;
  var lv_bbv;
  var lv_bbw = GetUnitAbilityLevel(GetTriggerUnit(), "A06L");
  if (!IsUnitInGroup(GetTriggerUnit(), gv_amr)) {
    lv_bbu = f_aJj();
    lv_bbv = f_aFd();
    gv_asU[lv_bbv] = GetTriggerUnit();
    GroupAddUnit(gv_amr, gv_asU[lv_bbv]);
    UnitAddAbility(gv_asU[lv_bbv], "A06H");
    UnitAddAbility(gv_asU[lv_bbv], "A062");
    SetUnitAbilityLevel(
      gv_asU[lv_bbv],
      "A06H",
      lv_bbw + IMinBJ(f_ayQ(gv_asU[lv_bbv]), lv_bbw)
    );
    gv_asV[lv_bbv] = f_aJt(
      GetOwningPlayer(gv_asU[lv_bbv]),
      GetUnitX(gv_asU[lv_bbv]),
      GetUnitY(gv_asU[lv_bbv]),
      0.0
    );
    f_aJA(gv_asV[lv_bbv], "A06J", 0);
    SaveInteger(gv_abT, gv_ams, GetHandleId(gv_asU[lv_bbv]), lv_bbv);
    SaveInteger(gv_abY, 0, GetHandleId(lv_bbu), lv_bbv);
    TimerStart(lv_bbu, 0.3, true, f_bbn);
  } else {
    lv_bbv = LoadInteger(gv_abT, gv_ams, GetHandleId(GetTriggerUnit()));
    lv_bbw = lv_bbw + IMinBJ(f_ayQ(gv_asU[lv_bbv]), lv_bbw);
    if (lv_bbw > GetUnitAbilityLevel(gv_asU[lv_bbv], "A06H")) {
      SetUnitAbilityLevel(gv_asU[lv_bbv], "A06H", lv_bbw);
    }
  }
  lv_bbu = null;
}
function f_bbx() {
  var lv_bby = GetExpiredTimer();
  var lv_bbz = LoadInteger(gv_abY, 0, GetHandleId(lv_bby));
  var lv_bbA = Atan2(
    gv_ata[lv_bbz] - GetUnitY(gv_atc[lv_bbz]),
    gv_asZ[lv_bbz] - GetUnitX(gv_atc[lv_bbz])
  );
  SetUnitX(
    gv_atc[lv_bbz],
    GetUnitX(gv_atc[lv_bbz]) + Cos(lv_bbA) * gv_atb[lv_bbz]
  );
  SetUnitY(
    gv_atc[lv_bbz],
    GetUnitY(gv_atc[lv_bbz]) + Sin(lv_bbA) * gv_atb[lv_bbz]
  );
  if (
    IsUnitInRangeXY(
      gv_atc[lv_bbz],
      gv_asZ[lv_bbz],
      gv_ata[lv_bbz],
      gv_atb[lv_bbz]
    ) ||
    f_aEW(lv_bbz, lv_bbA)
  ) {
    f_aFb(lv_bbz);
    GroupRemoveUnit(gv_acB, gv_atc[lv_bbz]);
    f_aJk(lv_bby);
  }
  lv_bby = null;
}
function f_bbB(lv_bbC, lv_bbD, lv_bbE, lv_bbF) {
  var lv_bbG = f_aEZ();
  var lv_bbH = f_aJj();
  gv_atc[lv_bbG] = lv_bbC;
  gv_asZ[lv_bbG] = lv_bbD;
  gv_ata[lv_bbG] = lv_bbE;
  gv_atb[lv_bbG] = lv_bbF * 0.025;
  GroupAddUnit(gv_acB, gv_atc[lv_bbG]);
  SaveInteger(gv_abY, 0, GetHandleId(lv_bbH), lv_bbG);
  TimerStart(lv_bbH, 0.025, true, f_bbx);
  lv_bbH = null;
  return lv_bbG;
}
function f_bbI() {
  return GetSpellAbilityId() == "A06M";
}
function f_bbJ() {
  var lv_bbK = LoadInteger(gv_abY, 0, GetHandleId(GetExpiredTimer()));
  var lv_bbL = f_aIL();
  var lv_bbM;
  var lv_bbN = f_aJt(
    GetOwningPlayer(gv_ath[lv_bbK]),
    GetLocationX(gv_ati[lv_bbK]),
    GetLocationY(gv_ati[lv_bbK]),
    2
  );
  var lv_bbO =
    (1 + 0.24 * f_azK(gv_ath[lv_bbK])) * SquareRoot(f_azM(gv_ath[lv_bbK]));
  var gv_aaj;
  gv_acx = GetOwningPlayer(gv_ath[lv_bbK]);
  gv_acy = GetLocationX(gv_ati[lv_bbK]);
  gv_acz = GetLocationY(gv_ati[lv_bbK]);
  gv_acA = 600;
  GroupEnumUnitsInRange(lv_bbL, gv_acy, gv_acz, 700, Condition(f_aMk));
  UnitApplyTimedLife(
    CreateUnitAtLoc(
      Player(PLAYER_NEUTRAL_PASSIVE),
      "nthr",
      gv_ati[lv_bbK],
      0.0
    ),
    "BTLF",
    1
  );
  do {
    lv_bbM = FirstOfGroup(lv_bbL);
    if (lv_bbM == null) {
      break;
    }
    gv_aaj = gv_atj[lv_bbK];
    if (GetUnitAbilityLevel(lv_bbM, "Bfro") > 0) {
      gv_aaj = gv_aaj * lv_bbO;
    }
    if (GetUnitAbilityLevel(lv_bbM, "B010") > 0) {
      gv_aaj = gv_aaj * lv_bbO;
    }
    UnitDamageTarget(
      lv_bbN,
      lv_bbM,
      gv_aaj,
      false,
      false,
      ATTACK_TYPE_NORMAL,
      DAMAGE_TYPE_UNIVERSAL,
      null
    );
    GroupRemoveUnit(lv_bbL, lv_bbM);
  } while (true);
  RemoveLocation(gv_ati[lv_bbK]);
  f_aEU(lv_bbK);
  f_aJk(GetExpiredTimer());
  f_aIM(lv_bbL);
  lv_bbL = null;
  lv_bbM = null;
  lv_bbN = null;
}
function f_bbP() {
  var lv_bbQ;
  var lv_bbR = f_aES();
  var lv_bbS = 0;
  var lv_bbT = 0.0;
  var lv_bbU = 15.65 * bj_DEGTORAD;
  var lv_bbV = GetPlayerId(GetOwningPlayer(GetTriggerUnit()));
  var lv_bbW = f_aJj();
  var lv_bbX = GetUnitAbilityLevel(gv_ath[lv_bbR], "A06M");
  gv_ath[lv_bbR] = GetTriggerUnit();
  gv_ati[lv_bbR] = GetSpellTargetLoc();
  gv_atj[lv_bbR] =
    (gv_alu[1161 + lv_bbX] + (gv_alu[lv_bbV] * (3 + lv_bbX)) / 4) *
    f_azK(gv_ath[lv_bbR]);
  if (lv_bbX == 3) {
    gv_atj[lv_bbR] = gv_atj[lv_bbR] * f_azM(gv_ath[lv_bbR]);
  }
  do {
    if (lv_bbS + 1 > 23) {
      break;
    }
    lv_bbQ = f_bbB(
      CreateUnit(
        GetOwningPlayer(gv_ath[lv_bbR]),
        "enec",
        GetLocationX(gv_ati[lv_bbR]) + 600 * Cos(lv_bbT),
        GetLocationY(gv_ati[lv_bbR]) + 600 * Sin(lv_bbT),
        lv_bbT * bj_RADTODEG
      ),
      GetLocationX(gv_ati[lv_bbR]),
      GetLocationY(gv_ati[lv_bbR]),
      375
    );
    gv_atd[lv_bbQ] = f_aJt(
      GetOwningPlayer(gv_ath[lv_bbR]),
      GetUnitX(gv_atc[lv_bbQ]),
      GetUnitY(gv_atc[lv_bbQ]),
      0.0
    );
    f_aJA(gv_atd[lv_bbQ], "A05G", 0);
    lv_bbT = lv_bbT + lv_bbU;
    lv_bbS = lv_bbS + 1;
  } while (true);
  SaveInteger(gv_abY, 0, GetHandleId(lv_bbW), lv_bbR);
  TimerStart(lv_bbW, 1.5, false, f_bbJ);
  lv_bbW = null;
}
function f_bbY() {
  var lv_bbZ = f_aJt(gv_acx, gv_acy, gv_acz, 2);
  f_aJA(lv_bbZ, "A06J", 0);
  IssueTargetOrderById(lv_bbZ, 852226, GetEnumUnit());
  if (GetUnitAbilityLevel(GetEnumUnit(), "A04Y") > 0) {
    UnitDamageTarget(
      lv_bbZ,
      GetEnumUnit(),
      gv_alN * 1.4 * f_azM(lv_bbZ),
      false,
      false,
      ATTACK_TYPE_NORMAL,
      DAMAGE_TYPE_UNIVERSAL,
      null
    );
  } else {
    UnitDamageTarget(
      lv_bbZ,
      GetEnumUnit(),
      gv_alN,
      false,
      false,
      ATTACK_TYPE_NORMAL,
      DAMAGE_TYPE_UNIVERSAL,
      null
    );
  }
  lv_bbZ = null;
}
function f_bca() {
  return GetSpellAbilityId() == "A06P";
}
function f_bcb() {
  var lv_bcc = GetSpellTargetLoc();
  var lv_bcd = f_aIL();
  var lv_bce = GetPlayerId(GetOwningPlayer(GetTriggerUnit()));
  var lv_bcf = GetUnitAbilityLevel(GetTriggerUnit(), "A06P");
  gv_alN =
    (gv_alu[1167 + lv_bcf] + ((lv_bcf + 4) / 5) * gv_alu[lv_bce]) *
    f_azK(GetTriggerUnit());
  gv_acy = GetLocationX(lv_bcc);
  gv_acz = GetLocationY(lv_bcc);
  gv_acA = 270 * f_azM(GetTriggerUnit());
  gv_acx = GetOwningPlayer(GetTriggerUnit());
  DestroyEffect(AddSpecialEffect("MDX\\WaterMagic.mdx", gv_acy, gv_acz));
  GroupEnumUnitsInRange(lv_bcd, gv_acy, gv_acz, 400, Condition(f_aMk));
  ForGroup(lv_bcd, f_bbY);
  RemoveLocation(lv_bcc);
  f_aIM(lv_bcd);
  lv_bcd = null;
  lv_bcc = null;
}
function f_bcg() {
  var lv_bch = f_aJt(gv_acx, gv_acy, gv_acz, 1);
  UnitDamageTarget(
    lv_bch,
    GetEnumUnit(),
    gv_alN,
    false,
    false,
    ATTACK_TYPE_NORMAL,
    DAMAGE_TYPE_UNIVERSAL,
    null
  );
  DestroyEffect(
    AddSpecialEffectTarget(
      "Abilities\\Spells\\Human\\Feedback\\ArcaneTowerAttack.mdl",
      GetEnumUnit(),
      "head"
    )
  );
  lv_bch = null;
}
function f_bci(lv_bcj) {
  var lv_bck;
  var lv_bcl = f_aIL();
  UnitRemoveAbility(gv_atn[lv_bcj], "A04Y");
  UnitRemoveAbility(gv_atn[lv_bcj], "B010");
  DestroyEffect(
    AddSpecialEffect(
      "MDX\\FreezingRing.mdx",
      GetUnitX(gv_atn[lv_bcj]),
      GetUnitY(gv_atn[lv_bcj])
    )
  );
  gv_acy = GetUnitX(gv_atn[lv_bcj]);
  gv_acz = GetUnitY(gv_atn[lv_bcj]);
  gv_acA = 300;
  gv_acx = GetOwningPlayer(gv_ato[lv_bcj]);
  GroupEnumUnitsInRange(lv_bcl, gv_acy, gv_acz, 400, Condition(f_aMk));
  gv_alN = gv_atp[lv_bcj];
  ForGroup(lv_bcl, f_bcg);
  f_aIM(lv_bcl);
  lv_bcl = null;
}
function f_bcm(lv_bcn) {
  if (lv_bcn == null) {
    return;
  } else {
    if (gv_atm.getInt(lv_bcn) != -1) {
      return;
    }
  }
  f_bci(lv_bcn);
  gv_atm[lv_bcn] = gv_atk;
  gv_atk = lv_bcn;
}
function f_bco() {
  var lv_bcp = LoadInteger(gv_abY, 0, GetHandleId(GetExpiredTimer()));
  if (
    GetWidgetLife(gv_atn[lv_bcp]) < 0.406 ||
    GetUnitAbilityLevel(gv_atn[lv_bcp], "A04Y") > 4
  ) {
    f_bcm(lv_bcp);
    f_aJk(GetExpiredTimer());
  }
  if (GetUnitAbilityLevel(gv_atn[lv_bcp], "A04Y") < 6) {
    SetUnitAbilityLevel(
      gv_atn[lv_bcp],
      "A04Y",
      GetUnitAbilityLevel(gv_atn[lv_bcp], "A04Y") + 1
    );
  }
}
function f_bcq() {
  return GetSpellAbilityId() == "A06Q";
}
function f_bcr() {
  var lv_bcs = f_aJj();
  var lv_bct = f_aEQ();
  var lv_bcu = GetPlayerId(GetOwningPlayer(GetTriggerUnit()));
  gv_atn[lv_bct] = GetSpellTargetUnit();
  gv_ato[lv_bct] = GetTriggerUnit();
  gv_atp[lv_bct] =
    (gv_alu[1155 + GetUnitAbilityLevel(gv_ato[lv_bct], "A06Q")] +
      ((GetUnitAbilityLevel(gv_ato[lv_bct], "A06Q") + 2) / 3) *
        gv_alu[lv_bcu]) *
    f_azK(GetTriggerUnit());
  UnitAddAbility(gv_atn[lv_bct], "A04Y");
  SaveInteger(gv_abY, 0, GetHandleId(lv_bcs), lv_bct);
  TimerStart(lv_bcs, 1, true, f_bco);
  lv_bcs = null;
}
function f_bcv() {
  var lv_bcw = f_aIL();
  var lv_bcx;
  var lv_bcy = LoadInteger(gv_abY, 0, GetHandleId(GetExpiredTimer()));
  var lv_bcz = f_aJt(gv_atw[lv_bcy], gv_att[lv_bcy], gv_atu[lv_bcy], 2);
  gv_acy = gv_att[lv_bcy];
  gv_acz = gv_atu[lv_bcy];
  gv_acA = 225 * f_azM(lv_bcz);
  gv_acx = gv_atw[lv_bcy];
  f_aJA(lv_bcz, "A06J", 0);
  GroupEnumUnitsInRange(
    lv_bcw,
    gv_acy,
    gv_acz,
    325 * f_azM(lv_bcz),
    Condition(f_aMk)
  );
  do {
    lv_bcx = FirstOfGroup(lv_bcw);
    if (lv_bcx == null) {
      break;
    }
    IssueTargetOrderById(lv_bcz, 852226, lv_bcx);
    if (GetUnitAbilityLevel(lv_bcx, "A04Y") > 0) {
      UnitDamageTarget(
        lv_bcz,
        lv_bcx,
        gv_atv[lv_bcy] * 1.3 * f_azK(lv_bcz),
        false,
        false,
        ATTACK_TYPE_NORMAL,
        DAMAGE_TYPE_UNIVERSAL,
        null
      );
    } else {
      UnitDamageTarget(
        lv_bcz,
        lv_bcx,
        gv_atv[lv_bcy],
        false,
        false,
        ATTACK_TYPE_NORMAL,
        DAMAGE_TYPE_UNIVERSAL,
        null
      );
    }
    GroupRemoveUnit(lv_bcw, lv_bcx);
  } while (true);
  f_aEO(lv_bcy);
  f_aJk(GetExpiredTimer());
  f_aIM(lv_bcw);
  lv_bcw = null;
  lv_bcx = null;
  lv_bcz = null;
}
function f_bcA() {
  var lv_bcB = LoadInteger(gv_abY, 0, GetHandleId(GetExpiredTimer()));
  var lv_bcC = f_aEM();
  var lv_bcD = f_aJj();
  gv_atv[lv_bcC] = gv_atC[lv_bcB];
  gv_atw[lv_bcC] = GetOwningPlayer(gv_atB[lv_bcB]);
  gv_att[lv_bcC] =
    GetLocationX(gv_atA[lv_bcB]) +
    Cos(GetRandomReal(-360, 360) * bj_DEGTORAD) * GetRandomReal(-450, 450);
  gv_atu[lv_bcC] =
    GetLocationY(gv_atA[lv_bcB]) +
    Sin(GetRandomReal(-360, 360) * bj_DEGTORAD) * GetRandomReal(-450, 450);
  AddSpecialEffect(
    "MDX\\SnowyBlizzardTarget.mdx",
    gv_att[lv_bcC],
    gv_atu[lv_bcC]
  );
  SaveInteger(gv_abY, 0, GetHandleId(lv_bcD), lv_bcC);
  TimerStart(lv_bcD, 0.7, false, f_bcv);
  if (
    GetWidgetLife(gv_atB[lv_bcB]) < 0.406 ||
    GetUnitCurrentOrder(gv_atB[lv_bcB]) != 852600
  ) {
    RemoveLocation(gv_atA[lv_bcB]);
    f_aEK(lv_bcB);
    f_aJk(GetExpiredTimer());
  }
  lv_bcD = null;
}
function f_bcE() {
  return GetSpellAbilityId() == "A06K";
}
function f_bcF() {
  var lv_bcG = f_aJj();
  var lv_bcH = f_aEI();
  var lv_bcI = GetPlayerId(GetOwningPlayer(GetTriggerUnit()));
  gv_atA[lv_bcH] = GetSpellTargetLoc();
  gv_atB[lv_bcH] = GetTriggerUnit();
  gv_atC[lv_bcH] =
    gv_alu[1173 + GetUnitAbilityLevel(gv_atB[lv_bcH], "A06K")] +
    (gv_alu[lv_bcI] / (15 - GetUnitAbilityLevel(gv_atB[lv_bcH], "A06K"))) *
      f_azK(gv_atB[lv_bcH]);
  SaveInteger(gv_abY, 0, GetHandleId(lv_bcG), lv_bcH);
  TimerStart(lv_bcG, 0.2, true, f_bcA);
  lv_bcG = null;
}
function f_bcJ() {
  return GetSpellAbilityId() == "A05D";
}
function f_bcK() {
  var lv_bcL = GetUnitAbilityLevel(GetTriggerUnit(), "A05D") * 30 + 1;
  var lv_bcM = GetPlayerId(GetOwningPlayer(GetTriggerUnit()));
  var lv_bcN = GetUnitAbilityLevel(GetTriggerUnit(), "A05D");
  var lv_bcO =
    (gv_alu[1179 + lv_bcN] + (gv_alu[lv_bcM] * (2 + lv_bcN)) / 3) *
    f_azK(GetTriggerUnit());
  if (GetWidgetLife(GetTriggerUnit()) > lv_bcL) {
    SetWidgetLife(GetTriggerUnit(), GetWidgetLife(GetTriggerUnit()) - lv_bcL);
    UnitDamageTarget(
      f_aJt(
        GetOwningPlayer(GetTriggerUnit()),
        GetUnitX(GetSpellTargetUnit()),
        GetUnitY(GetSpellTargetUnit()),
        1
      ),
      GetSpellTargetUnit(),
      lv_bcO,
      false,
      false,
      ATTACK_TYPE_NORMAL,
      DAMAGE_TYPE_UNIVERSAL,
      null
    );
    SetWidgetLife(
      GetTriggerUnit(),
      GetWidgetLife(GetTriggerUnit()) +
        lv_bcO * 0.1 * GetUnitAbilityLevel(GetTriggerUnit(), "A05D")
    );
    f_aLX(
      AddSpecialEffectTarget(
        "Abilities\\Spells\\Orc\\Voodoo\\VoodooAuraTarget.mdl",
        GetSpellTargetUnit(),
        "chest"
      ),
      1
    );
    f_aLX(
      AddSpecialEffectTarget(
        "Abilities\\Spells\\Items\\StaffOfSanctuary\\Staff_Sanctuary_Target.mdl",
        GetTriggerUnit(),
        "chest"
      ),
      1
    );
  }
}
function f_bcP() {
  var lv_bcQ;
  if (
    GetUnitAbilityLevel(GetTriggerUnit(), "A05D") > 0 &&
    GetIssuedOrderId() == 852119
  ) {
    lv_bcQ = GetUnitAbilityLevel(GetTriggerUnit(), "A05D") * 30 + 1;
    if (GetWidgetLife(GetTriggerUnit()) < lv_bcQ) {
      PauseUnit(GetTriggerUnit(), true);
      IssueImmediateOrderById(GetTriggerUnit(), 851972);
      PauseUnit(GetTriggerUnit(), false);
      f_aMm(
        GetOwningPlayer(GetTriggerUnit()),
        "You do not have enough life to cast Mojo!"
      );
    }
  }
  return false;
}
function f_bcR() {
  var lv_bcS = LoadInteger(gv_abY, 0, GetHandleId(GetExpiredTimer()));
  var lv_bcT = 0.0;
  var lv_bcU;
  var lv_bcV;
  if (
    GetUnitCurrentOrder(gv_atH[lv_bcS]) == 852221 &&
    GetWidgetLife(gv_atH[lv_bcS]) > 0.405
  ) {
    lv_bcU = f_aIL();
    gv_acy = GetUnitX(gv_atG[lv_bcS]);
    gv_acz = GetUnitY(gv_atG[lv_bcS]);
    gv_acA = 600;
    gv_acx = GetOwningPlayer(gv_atH[lv_bcS]);
    GroupEnumUnitsInRange(lv_bcU, gv_acy, gv_acz, 700, Condition(f_aMk));
    do {
      lv_bcV = FirstOfGroup(lv_bcU);
      if (lv_bcV == null) {
        break;
      }
      lv_bcT = lv_bcT + gv_atI[lv_bcS];
      UnitDamageTarget(
        gv_atG[lv_bcS],
        lv_bcV,
        gv_atI[lv_bcS],
        false,
        false,
        ATTACK_TYPE_NORMAL,
        DAMAGE_TYPE_UNIVERSAL,
        null
      );
      IssueTargetOrderById(gv_atG[lv_bcS], 852230, lv_bcV);
      GroupRemoveUnit(lv_bcU, lv_bcV);
    } while (true);
    f_aIM(lv_bcU);
    lv_bcU = f_aIL();
    gv_acy = GetUnitX(gv_atG[lv_bcS]);
    gv_acz = GetUnitY(gv_atG[lv_bcS]);
    gv_acA = 600;
    gv_acx = GetOwningPlayer(gv_atH[lv_bcS]);
    GroupEnumUnitsInRange(lv_bcU, gv_acy, gv_acz, 700, Condition(f_aMl));
    bj_groupCountUnits = 0;
    ForGroup(lv_bcU, CountUnitsInGroupEnum);
    lv_bcT = lv_bcT / bj_groupCountUnits;
    do {
      lv_bcV = FirstOfGroup(lv_bcU);
      if (lv_bcV == null) {
        break;
      }
      SetWidgetLife(lv_bcV, GetWidgetLife(lv_bcV) + lv_bcT);
      f_aLX(
        AddSpecialEffectTarget(
          "Abilities\\Spells\\Items\\ResourceItems\\ResourceEffectTarget.mdl",
          lv_bcV,
          "origin"
        ),
        0.5
      );
      GroupRemoveUnit(lv_bcU, lv_bcV);
    } while (true);
    f_aIM(lv_bcU);
  } else {
    DestroyEffect(
      AddSpecialEffect(
        "Objects\\Spawnmodels\\Human\\HCancelDeath\\HCancelDeath.mdl",
        GetUnitX(gv_atG[lv_bcS]),
        GetUnitY(gv_atG[lv_bcS])
      )
    );
    RemoveUnit(gv_atG[lv_bcS]);
    f_aEG(lv_bcS);
    f_aJk(GetExpiredTimer());
  }
  lv_bcU = null;
  lv_bcV = null;
}
function f_bcW() {
  return GetSpellAbilityId() == "A05C";
}
function f_bcX() {
  var lv_bcY = f_aJj();
  var lv_bcZ = f_aEE();
  var lv_bda = GetPlayerId(GetOwningPlayer(GetTriggerUnit()));
  var lv_bdb = GetSpellTargetLoc();
  gv_atH[lv_bcZ] = GetTriggerUnit();
  gv_atG[lv_bcZ] = CreateUnit(
    GetOwningPlayer(gv_atH[lv_bcZ]),
    "emtg",
    GetLocationX(lv_bdb),
    GetLocationY(lv_bdb),
    0.0
  );
  UnitAddAbility(gv_atG[lv_bcZ], "A05F");
  gv_atI[lv_bcZ] =
    (gv_alu[1191 + GetUnitAbilityLevel(gv_atH[lv_bcZ], "A05C")] +
      gv_alu[lv_bda] / (10 - GetUnitAbilityLevel(gv_atH[lv_bcZ], "A05C"))) *
    f_azK(gv_atH[lv_bcZ]);
  SaveInteger(gv_abY, 0, GetHandleId(lv_bcY), lv_bcZ);
  TimerStart(lv_bcY, 1, true, f_bcR);
  RemoveLocation(lv_bdb);
  lv_bdb = null;
  lv_bcY = null;
}
function f_bdc() {
  var lv_bdd = LoadInteger(gv_abY, 0, GetHandleId(GetExpiredTimer()));
  gv_atN[lv_bdd] = gv_atN[lv_bdd] - 0.25;
  if (GetWidgetLife(gv_atM[lv_bdd]) < 0.406 || gv_atN[lv_bdd] < 0.25) {
    UnitRemoveAbility(gv_atM[lv_bdd], "A06U");
    UnitRemoveAbility(gv_atM[lv_bdd], "B00P");
    f_aEC(lv_bdd);
    f_aJk(GetExpiredTimer());
  }
}
function f_bde(lv_bdf, lv_bdg) {
  var lv_bdh = f_aEA();
  var lv_bdi = f_aJj();
  gv_atM[lv_bdh] = lv_bdf;
  gv_atN[lv_bdh] = 9;
  UnitAddAbility(gv_atM[lv_bdh], "A06U");
  SetUnitAbilityLevel(gv_atM[lv_bdh], "A04B", lv_bdg);
  SaveInteger(gv_abY, 0, GetHandleId(lv_bdi), lv_bdh);
  TimerStart(lv_bdi, 0.25, true, f_bdc);
  lv_bdi = null;
  return lv_bdh;
}
function f_bdj() {
  var lv_bdk = GetExpiredTimer();
  var lv_bdl = LoadInteger(gv_abY, 0, GetHandleId(lv_bdk));
  var lv_bdm = Atan2(
    gv_atS[lv_bdl] - GetUnitY(gv_atU[lv_bdl]),
    gv_atR[lv_bdl] - GetUnitX(gv_atU[lv_bdl])
  );
  SetUnitX(
    gv_atU[lv_bdl],
    GetUnitX(gv_atU[lv_bdl]) + Cos(lv_bdm) * gv_atT[lv_bdl]
  );
  SetUnitY(
    gv_atU[lv_bdl],
    GetUnitY(gv_atU[lv_bdl]) + Sin(lv_bdm) * gv_atT[lv_bdl]
  );
  if (
    IsUnitInRangeXY(
      gv_atU[lv_bdl],
      gv_atR[lv_bdl],
      gv_atS[lv_bdl],
      gv_atT[lv_bdl]
    ) ||
    f_aEt(lv_bdl, lv_bdm)
  ) {
    f_aEy(lv_bdl);
    GroupRemoveUnit(gv_acB, gv_atU[lv_bdl]);
    f_aJk(lv_bdk);
  }
  lv_bdk = null;
}
function f_bdn(lv_bdo, lv_bdp, lv_bdq, lv_bdr) {
  var lv_bds = f_aEw();
  var lv_bdt = f_aJj();
  gv_atU[lv_bds] = lv_bdo;
  gv_atR[lv_bds] = lv_bdp;
  gv_atS[lv_bds] = lv_bdq;
  gv_atT[lv_bds] = lv_bdr * 0.025;
  GroupAddUnit(gv_acB, gv_atU[lv_bds]);
  SaveInteger(gv_abY, 0, GetHandleId(lv_bdt), lv_bds);
  TimerStart(lv_bdt, 0.025, true, f_bdj);
  lv_bdt = null;
  return lv_bds;
}
function f_bdu() {
  var lv_bdv;
  var lv_bdw;
  var lv_bdx = GetPlayerId(GetOwningPlayer(GetTriggerUnit()));
  if (GetSpellAbilityId() == "A05E" && GetWidgetLife(GetTriggerUnit()) > 75) {
    lv_bdw = GetSpellTargetLoc();
    gv_alN = Atan2(
      GetLocationY(lv_bdw) - GetUnitY(GetTriggerUnit()),
      GetLocationX(lv_bdw) - GetUnitX(GetTriggerUnit())
    );
    lv_bdv = f_bdn(
      CreateUnit(
        GetOwningPlayer(GetTriggerUnit()),
        "ensh",
        GetUnitX(GetTriggerUnit()),
        GetUnitY(GetTriggerUnit()),
        0.0
      ),
      GetUnitX(GetTriggerUnit()) + Cos(gv_alN) * 800,
      GetUnitY(GetTriggerUnit()) + Sin(gv_alN) * 800,
      750
    );
    gv_atV[lv_bdv] = f_aIL();
    gv_atW[lv_bdv] = GetUnitAbilityLevel(GetTriggerUnit(), "A05E");
    gv_atX[lv_bdv] =
      (((GetWidgetLife(GetTriggerUnit()) +
        gv_alu[lv_bdx] * f_azM(GetTriggerUnit()) * 4) *
        (gv_atW.getInt(lv_bdv) * 5 + 5)) /
        100) *
      f_azK(GetTriggerUnit());
    SetWidgetLife(GetTriggerUnit(), GetWidgetLife(GetTriggerUnit()) - 75);
    RemoveLocation(lv_bdw);
  }
  lv_bdw = null;
  return false;
}
function f_bdy() {
  if (
    GetUnitAbilityLevel(GetTriggerUnit(), "A05E") > 0 &&
    GetIssuedOrderId() == 852580
  ) {
    if (GetWidgetLife(GetTriggerUnit()) < 75 + 1) {
      PauseUnit(GetTriggerUnit(), true);
      IssueImmediateOrderById(GetTriggerUnit(), 851972);
      PauseUnit(GetTriggerUnit(), false);
      f_aMm(
        GetOwningPlayer(GetTriggerUnit()),
        "You do not have enough life to cast Wail of the Banshee!"
      );
    }
  }
  return false;
}
function f_bdz() {
  var lv_bdA = 1;
  var lv_bdB;
  var lv_bdC = LoadInteger(gv_abY, 0, GetHandleId(GetExpiredTimer()));
  gv_aui[lv_bdC] = gv_aui[lv_bdC] - 0.75;
  gv_auh[lv_bdC] =
    GetWidgetLife(gv_auj[lv_bdC]) *
    gv_alu[1222 + GetUnitAbilityLevel(gv_auj[lv_bdC], "A05B")] *
    f_azM(gv_auj[lv_bdC]);
  do {
    if (lv_bdA > 3) {
      break;
    }
    if (
      GetWidgetLife(gv_aub[gv_auc.getInt(lv_bdC) + lv_bdA]) > 0.405 &&
      gv_auf.getInt(gv_aug.getInt(lv_bdC) + lv_bdA) > 0
    ) {
      if (
        !IsUnitInRange(
          gv_aub[gv_auc.getInt(lv_bdC) + lv_bdA],
          gv_auj[lv_bdC],
          800
        )
      ) {
        SetUnitPosition(
          gv_aub[gv_auc.getInt(lv_bdC) + lv_bdA],
          GetUnitX(gv_auj[lv_bdC]),
          GetUnitY(gv_auj[lv_bdC])
        );
      }
      if (
        GetWidgetLife(gv_aud[gv_aue.getInt(lv_bdC) + lv_bdA]) > 0.405 &&
        IsUnitInRange(
          gv_aub[gv_auc.getInt(lv_bdC) + lv_bdA],
          gv_aud[gv_aue.getInt(lv_bdC) + lv_bdA],
          300
        )
      ) {
        DestroyEffect(
          AddSpecialEffectTarget(
            "Abilities\\Spells\\Undead\\AnimateDead\\AnimateDeadTarget.mdl",
            gv_aud[gv_aue.getInt(lv_bdC) + lv_bdA],
            "origin"
          )
        );
        UnitDamageTarget(
          gv_aub[gv_auc.getInt(lv_bdC) + lv_bdA],
          gv_aud[gv_aue.getInt(lv_bdC) + lv_bdA],
          gv_auh[lv_bdC],
          false,
          false,
          ATTACK_TYPE_NORMAL,
          DAMAGE_TYPE_UNIVERSAL,
          null
        );
        gv_auf[gv_aug.getInt(lv_bdC) + lv_bdA] =
          gv_auf.getInt(gv_aug.getInt(lv_bdC) + lv_bdA) - 1;
        gv_aud[gv_aue.getInt(lv_bdC) + lv_bdA] = null;
      } else {
        if (GetWidgetLife(gv_aud[gv_aue.getInt(lv_bdC) + lv_bdA]) < 0.406) {
          gv_aud[gv_aue.getInt(lv_bdC) + lv_bdA] = null;
        }
        if (
          !IsUnitInRange(
            gv_aub[gv_auc.getInt(lv_bdC) + lv_bdA],
            gv_aud[gv_aue.getInt(lv_bdC) + lv_bdA],
            570
          )
        ) {
          gv_aud[gv_aue.getInt(lv_bdC) + lv_bdA] = null;
        }
      }
      if (gv_aud[gv_aue.getInt(lv_bdC) + lv_bdA] == null) {
        gv_acy = GetUnitX(gv_aub[gv_auc.getInt(lv_bdC) + lv_bdA]);
        gv_acz = GetUnitY(gv_aub[gv_auc.getInt(lv_bdC) + lv_bdA]);
        gv_acA = 500;
        gv_acx = GetOwningPlayer(gv_aub[gv_auc.getInt(lv_bdC) + lv_bdA]);
        lv_bdB = f_aIL();
        GroupEnumUnitsInRange(lv_bdB, gv_acy, gv_acz, 580, Condition(f_aMk));
        bj_groupRandomConsidered = 0;
        bj_groupRandomCurrentPick = null;
        ForGroup(lv_bdB, GroupPickRandomUnitEnum);
        gv_aud[gv_aue.getInt(lv_bdC) + lv_bdA] = bj_groupRandomCurrentPick;
        f_aIM(lv_bdB);
      }
      if (gv_aud[gv_aue.getInt(lv_bdC) + lv_bdA] == null) {
        IssuePointOrderById(
          gv_aub[gv_auc.getInt(lv_bdC) + lv_bdA],
          851986,
          GetUnitX(gv_auj[lv_bdC]) + GetRandomReal(-400, 400),
          GetUnitY(gv_auj[lv_bdC]) + GetRandomReal(-450, 450)
        );
      } else {
        IssuePointOrderById(
          gv_aub[gv_auc.getInt(lv_bdC) + lv_bdA],
          851986,
          GetUnitX(gv_aud[gv_aue.getInt(lv_bdC) + lv_bdA]),
          GetUnitY(gv_aud[gv_aue.getInt(lv_bdC) + lv_bdA])
        );
      }
      if (gv_auf.getInt(gv_aug.getInt(lv_bdC) + lv_bdA) < 1) {
        KillUnit(gv_aub[gv_auc.getInt(lv_bdC) + lv_bdA]);
        gv_auk[lv_bdC] = gv_auk.getInt(lv_bdC) - 1;
      }
    }
    lv_bdA = lv_bdA + 1;
  } while (true);
  if (
    GetWidgetLife(gv_auj[lv_bdC]) < 0.406 ||
    gv_aui[lv_bdC] < 0.5 ||
    gv_auk.getInt(lv_bdC) < 1
  ) {
    if (gv_auk.getInt(lv_bdC) > 0) {
      lv_bdA = 1;
      do {
        if (lv_bdA > 3) {
          break;
        }
        if (GetWidgetLife(gv_aub[gv_auc.getInt(lv_bdC) + lv_bdA]) > 0.405) {
          KillUnit(gv_aub[gv_auc.getInt(lv_bdC) + lv_bdA]);
        }
        lv_bdA = lv_bdA + 1;
      } while (true);
    }
    f_aEr(lv_bdC);
    f_aJk(GetExpiredTimer());
  }
  lv_bdB = null;
}
function f_bdD() {
  return GetSpellAbilityId() == "A05B";
}
function f_bdE() {
  var lv_bdF = f_aEp();
  var lv_bdG = 1;
  var lv_bdH = f_aJj();
  if (
    GetWidgetLife(GetTriggerUnit()) >
    GetUnitAbilityLevel(GetTriggerUnit(), "A05B") * 90 + 1
  ) {
    gv_auj[lv_bdF] = GetTriggerUnit();
    SetWidgetLife(
      gv_auj[lv_bdF],
      GetWidgetLife(gv_auj[lv_bdF]) -
        GetUnitAbilityLevel(gv_auj[lv_bdF], "A05B") * 90
    );
    gv_auh[lv_bdF] =
      GetWidgetLife(gv_auj[lv_bdF]) *
      gv_alu[1222 + GetUnitAbilityLevel(gv_auj[lv_bdF], "A05B")] *
      f_azK(gv_auj[lv_bdF]);
    gv_aui[lv_bdF] = 15 + I2R(f_ayQ(GetTriggerUnit())) * 1.5;
    gv_auk[lv_bdF] = 3;
    do {
      if (lv_bdG > gv_auk.getInt(lv_bdF)) {
        break;
      }
      gv_aub[gv_auc.getInt(lv_bdF) + lv_bdG] = CreateUnit(
        GetOwningPlayer(gv_auj[lv_bdF]),
        "nssn",
        GetUnitX(gv_auj[lv_bdF]),
        GetUnitY(gv_auj[lv_bdF]),
        0.0
      );
      gv_aud[gv_aue.getInt(lv_bdF) + lv_bdG] = null;
      gv_auf[gv_aug.getInt(lv_bdF) + lv_bdG] = R2I(4 * f_azM(gv_auj[lv_bdF]));
      lv_bdG = lv_bdG + 1;
    } while (true);
    SaveInteger(gv_abY, 0, GetHandleId(lv_bdH), lv_bdF);
    TimerStart(lv_bdH, 0.75, true, f_bdz);
  } else {
    f_aJk(lv_bdH);
  }
  lv_bdH = null;
}
function f_bdI() {
  var lv_bdJ;
  if (
    GetUnitAbilityLevel(GetTriggerUnit(), "A05B") > 0 &&
    GetIssuedOrderId() == 852526
  ) {
    lv_bdJ = GetUnitAbilityLevel(GetTriggerUnit(), "A05B") * 90;
    if (GetWidgetLife(GetTriggerUnit()) < lv_bdJ + 1) {
      PauseUnit(GetTriggerUnit(), true);
      IssueImmediateOrderById(GetTriggerUnit(), 851972);
      PauseUnit(GetTriggerUnit(), false);
      f_aMm(
        GetOwningPlayer(GetTriggerUnit()),
        "You do not have enough life to cast Grave Dance!"
      );
    }
  }
  return false;
}
function f_bdK() {
  var lv_bdL = LoadInteger(gv_abY, 0, GetHandleId(GetExpiredTimer()));
  UnitDamageTarget(
    gv_auo[lv_bdL],
    gv_aup[lv_bdL],
    gv_aur[lv_bdL],
    false,
    false,
    ATTACK_TYPE_HERO,
    DAMAGE_TYPE_NORMAL,
    null
  );
  gv_auq[lv_bdL] = gv_auq.getInt(lv_bdL) - 1;
  if (
    gv_auq.getInt(lv_bdL) < 1 ||
    GetUnitAbilityLevel(gv_aup[lv_bdL], "B002") < 1 ||
    GetWidgetLife(gv_aup[lv_bdL]) < 0.406
  ) {
    f_aJn(gv_auo[lv_bdL]);
    f_aEn(lv_bdL);
    f_aJk(GetExpiredTimer());
  }
}
function f_bdM() {
  return GetSpellAbilityId() == "A05I";
}
function f_bdN() {
  var lv_bdO = f_aJj();
  var lv_bdP = f_aEl();
  var lv_bdQ = GetPlayerId(GetOwningPlayer(GetTriggerUnit()));
  gv_aup[lv_bdP] = GetSpellTargetUnit();
  gv_aur[lv_bdP] =
    (gv_alu[1215 + GetUnitAbilityLevel(GetTriggerUnit(), "A05I")] +
      gv_alu[lv_bdQ]) *
    gv_aam[lv_bdQ];
  gv_auq[lv_bdP] = 5 + R2I(f_ayQ(GetTriggerUnit()) / 3);
  gv_auo[lv_bdP] = f_aJt(
    GetOwningPlayer(GetTriggerUnit()),
    GetUnitX(gv_aup[lv_bdP]),
    GetUnitY(gv_aup[lv_bdP]),
    0.0
  );
  SaveInteger(gv_abY, 0, GetHandleId(lv_bdO), lv_bdP);
  TimerStart(lv_bdO, 1, true, f_bdK);
  lv_bdO = null;
}
function f_bdR() {
  var lv_bdS = LoadInteger(gv_abY, 0, GetHandleId(GetExpiredTimer()));
  if (
    GetUnitAbilityLevel(gv_auv[lv_bdS], "B00U") < 1 ||
    gv_aux.getInt(lv_bdS) < 1 ||
    GetWidgetLife(gv_auv[lv_bdS]) < 0.406
  ) {
    f_aJk(GetExpiredTimer());
    f_aEj(lv_bdS);
  } else {
    gv_aux[lv_bdS] = gv_aux.getInt(lv_bdS) - 1;
    SetWidgetLife(
      gv_auv[lv_bdS],
      GetWidgetLife(gv_auv[lv_bdS]) + gv_auw[lv_bdS]
    );
  }
}
function f_bdT() {
  return GetSpellAbilityId() == "A06F";
}
function f_bdU() {
  var lv_bdV = f_aJj();
  var lv_bdW = f_aEh();
  var lv_bdX = GetPlayerId(GetOwningPlayer(GetTriggerUnit()));
  var lv_bdY = GetUnitAbilityLevel(GetTriggerUnit(), "A06F");
  gv_auv[lv_bdW] = GetSpellTargetUnit();
  gv_auw[lv_bdW] =
    ((lv_bdY * 200 +
      100 +
      ((gv_alu[lv_bdX + 8] + GetHeroInt(gv_alv[lv_bdX], true)) * (lv_bdY + 2)) /
        4) *
      f_azK(GetTriggerUnit())) /
    40;
  gv_aux[lv_bdW] = R2I(
    (40 + lv_bdY) * f_azO(GetTriggerUnit()) * f_azO(GetSpellTargetUnit())
  );
  SaveInteger(gv_abY, 0, GetHandleId(lv_bdV), lv_bdW);
  TimerStart(lv_bdV, 0.2, true, f_bdR);
  lv_bdV = null;
}
function f_bdZ() {
  var lv_bea = LoadInteger(gv_abY, 0, GetHandleId(GetExpiredTimer()));
  gv_auC[lv_bea] = gv_auC[lv_bea] - 0.2;
  if (
    gv_auC[lv_bea] < 0.0 ||
    GetUnitAbilityLevel(gv_auB[lv_bea], "B00V") < 1 ||
    GetWidgetLife(gv_auB[lv_bea]) < 0.406
  ) {
    UnitRemoveAbility(gv_auB[lv_bea], "B00V");
    GroupRemoveUnit(gv_amu, gv_auB[lv_bea]);
    UnitRemoveAbility(gv_auB[lv_bea], "A06A");
    RemoveSavedInteger(gv_abT, gv_amt, GetHandleId(gv_auB[lv_bea]));
    f_aEf(lv_bea);
    f_aJk(GetExpiredTimer());
  } else {
    UnitDamageTarget(
      gv_auB[lv_bea + 100],
      gv_auB[lv_bea],
      gv_auD[lv_bea],
      false,
      false,
      ATTACK_TYPE_NORMAL,
      DAMAGE_TYPE_UNIVERSAL,
      null
    );
  }
}
function f_beb() {
  return GetSpellAbilityId() == "A06E";
}
function f_bec() {
  var lv_bed = GetPlayerId(GetOwningPlayer(GetTriggerUnit()));
  var lv_bee;
  var lv_bef;
  var lv_beg = GetUnitAbilityLevel(GetTriggerUnit(), "A06E");
  var lv_beh = 0;
  var lv_bei = GetRandomReal(1, 3) + lv_beg;
  if (IsUnitType(GetSpellTargetUnit(), UNIT_TYPE_HERO)) {
    lv_bei = lv_bei / 2;
  } else {
    if (IsUnitType(GetSpellTargetUnit(), UNIT_TYPE_GIANT)) {
      lv_bei = lv_bei / 1.66;
    }
  }
  if (UnitHasItemOfTypeBJ(GetTriggerUnit(), "ccmd")) {
    lv_bei = lv_bei * 1.2;
  } else {
    if (UnitHasItemOfTypeBJ(GetTriggerUnit(), "rots")) {
      lv_bei = lv_bei * 1.4;
    }
  }
  if (lv_bei > 8) {
    lv_bei = 8;
  }
  if (!IsUnitInGroup(GetSpellTargetUnit(), gv_amu)) {
    lv_bee = f_aEd();
    lv_bef = f_aJj();
    gv_auB[lv_bee] = GetSpellTargetUnit();
    gv_auB[lv_bee + 100] = GetTriggerUnit();
    SaveInteger(gv_abT, gv_amt, GetHandleId(gv_auB[lv_bee]), lv_bee);
    GroupAddUnit(gv_amu, gv_auB[lv_bee]);
    UnitAddAbility(gv_auB[lv_bee], "A06A");
    SaveInteger(gv_abY, 0, GetHandleId(lv_bef), lv_bee);
    TimerStart(lv_bef, 0.2, true, f_bdZ);
  } else {
    lv_bee = LoadInteger(gv_abT, gv_amt, GetHandleId(GetSpellTargetUnit()));
  }
  SetUnitAbilityLevel(gv_auB[lv_bee], "A06A", lv_beg);
  f_aMp(
    null,
    S2S(I2S(R2I(lv_bei + 0.5)) + "!"),
    50,
    255,
    200,
    GetUnitX(gv_auB[lv_bee]),
    GetUnitY(gv_auB[lv_bee]),
    0.039,
    0.457,
    1.5,
    20
  );
  gv_auD[lv_bee] =
    ((20 +
      5 * lv_beg * lv_beg +
      5 * lv_beg +
      ((gv_alu[lv_bed] + GetHeroInt(gv_auB[lv_bee + 100], true)) *
        (lv_beg + 2)) /
        3 /
        (5 - lv_beh)) /
      5) *
    f_azK(gv_auB[lv_bee + 100]);
  gv_auC[lv_bee] = lv_bei * f_azM(gv_auB[lv_bee + 100]);
  lv_bef = null;
}
function f_bej() {
  var lv_bek = LoadInteger(gv_abY, 0, GetHandleId(GetExpiredTimer()));
  var lv_bel;
  DestroyEffect(
    AddSpecialEffectTarget(
      "Abilities\\Weapons\\Bolt\\BoltImpact.mdl",
      gv_auH[lv_bek],
      "origin"
    )
  );
  UnitDamageTarget(
    gv_auI[lv_bek],
    gv_auH[lv_bek],
    gv_auJ[lv_bek],
    false,
    false,
    ATTACK_TYPE_NORMAL,
    DAMAGE_TYPE_UNIVERSAL,
    null
  );
  gv_auL[lv_bek] = gv_auL.getInt(lv_bek) - 1;
  if (gv_auL.getInt(lv_bek) < 1 || gv_auH[lv_bek] == null) {
    DestroyLightning(gv_auK[lv_bek]);
    f_aJn(gv_auI[lv_bek]);
    f_aEb(lv_bek);
    f_aJk(GetExpiredTimer());
  } else {
    gv_acy = GetUnitX(gv_auH[lv_bek]);
    gv_acz = GetUnitY(gv_auH[lv_bek]);
    gv_acA = 500;
    gv_acx = GetOwningPlayer(gv_auI[lv_bek]);
    lv_bel = f_aIL();
    GroupEnumUnitsInRange(
      lv_bel,
      GetUnitX(gv_auH[lv_bek]),
      GetUnitY(gv_auH[lv_bek]),
      600,
      Condition(f_aMk)
    );
    GroupRemoveUnit(lv_bel, gv_auH[lv_bek]);
    bj_groupRandomConsidered = 0;
    bj_groupRandomCurrentPick = null;
    ForGroup(lv_bel, GroupPickRandomUnitEnum);
    MoveLightning(
      gv_auK[lv_bek],
      false,
      GetUnitX(gv_auH[lv_bek]),
      GetUnitY(gv_auH[lv_bek]),
      GetUnitX(bj_groupRandomCurrentPick),
      GetUnitY(bj_groupRandomCurrentPick)
    );
    gv_auH[lv_bek] = bj_groupRandomCurrentPick;
    gv_auJ[lv_bek] = gv_auJ[lv_bek] * 0.95;
    f_aIM(lv_bel);
  }
  lv_bel = null;
}
function f_bem() {
  return GetSpellAbilityId() == "A06D";
}
function f_ben() {
  var lv_beo = f_aJj();
  var lv_bep = f_aDZ();
  var lv_beq = GetPlayerId(GetOwningPlayer(GetTriggerUnit()));
  var lv_ber = GetUnitAbilityLevel(GetTriggerUnit(), "A06D");
  gv_auI[lv_bep] = f_aJt(
    GetOwningPlayer(GetTriggerUnit()),
    GetUnitX(GetTriggerUnit()),
    GetUnitY(GetTriggerUnit()),
    0.0
  );
  gv_auH[lv_bep] = GetSpellTargetUnit();
  gv_auK[lv_bep] = AddLightning(
    "CLPB",
    false,
    GetUnitX(GetTriggerUnit()),
    GetUnitY(GetTriggerUnit()),
    GetUnitX(gv_auH[lv_bep]),
    GetUnitY(gv_auH[lv_bep])
  );
  gv_auJ[lv_bep] =
    (gv_alu[1101 + lv_ber] +
      ((gv_alu[lv_beq] + GetHeroInt(GetTriggerUnit(), true)) * (2 + lv_ber)) /
        4) *
    gv_aam[lv_beq];
  gv_auL[lv_bep] = (8 + lv_ber) / 2 + f_ayQ(GetTriggerUnit());
  SaveInteger(gv_abY, 0, GetHandleId(lv_beo), lv_bep);
  TimerStart(lv_beo, 0.45, true, f_bej);
  lv_beo = null;
}
function f_bes() {
  SetWidgetLife(GetEnumUnit(), GetWidgetLife(GetEnumUnit()) + gv_alN);
}
function f_bet() {
  var lv_beu = GetExpiredTimer();
  var lv_bev;
  var lv_bew = LoadInteger(gv_abY, 0, GetHandleId(lv_beu));
  gv_auS[lv_bew] = gv_auS.getInt(lv_bew) + 1;
  if (gv_auS.getInt(lv_bew) + 1 > 5) {
    gv_auS[lv_bew] = 0;
    lv_bev = f_aIL();
    gv_acy = GetUnitX(gv_auP[lv_bew]);
    gv_acz = GetUnitY(gv_auP[lv_bew]);
    gv_acx = GetOwningPlayer(gv_auP[lv_bew]);
    gv_acA = 800;
    GroupEnumUnitsInRange(lv_bev, gv_acy, gv_acz, 900, Condition(f_aMk));
    bj_groupRandomConsidered = 0;
    bj_groupRandomCurrentPick = null;
    ForGroup(lv_bev, GroupPickRandomUnitEnum);
    UnitDamageTarget(
      f_aJt(
        GetOwningPlayer(gv_auP[lv_bew]),
        GetUnitX(bj_groupRandomCurrentPick),
        GetUnitY(bj_groupRandomCurrentPick),
        1
      ),
      bj_groupRandomCurrentPick,
      gv_auQ[lv_bew],
      false,
      true,
      ATTACK_TYPE_NORMAL,
      DAMAGE_TYPE_UNIVERSAL,
      null
    );
    DestroyEffect(
      AddSpecialEffectTarget(
        "MDX\\LightningWrath.mdx",
        bj_groupRandomCurrentPick,
        "origin"
      )
    );
  }
  f_aIM(lv_bev);
  lv_bev = f_aIL();
  GroupEnumUnitsInRange(
    lv_bev,
    gv_acy,
    gv_acz,
    750 * f_azM(gv_auP[lv_bew]),
    Condition(f_aMl)
  );
  gv_alN = gv_auR[lv_bew];
  ForGroup(lv_bev, f_bes);
  if (
    GetUnitCurrentOrder(gv_auP[lv_bew]) != 852184 ||
    GetWidgetLife(gv_auP[lv_bew]) < 0.406
  ) {
    GroupRemoveUnit(gv_amv, gv_auP[lv_bew]);
    f_aDX(lv_bew);
    f_aJk(lv_beu);
  }
  lv_beu = null;
}
function f_bex() {
  if (
    IsUnitEnemy(GetEventDamageSource(), GetOwningPlayer(GetTriggerUnit())) &&
    IsUnitType(GetEventDamageSource(), UNIT_TYPE_MELEE_ATTACKER) &&
    IsUnitInGroup(GetTriggerUnit(), gv_amv)
  ) {
    f_aNn(
      GetEventDamageSource(),
      Atan2(
        GetUnitY(GetEventDamageSource()) - GetUnitY(GetTriggerUnit()),
        GetUnitX(GetEventDamageSource()) - GetUnitX(GetTriggerUnit())
      )
    );
  }
  return false;
}
function f_bey() {
  return (
    GetSpellAbilityId() == "A06G" && !IsUnitInGroup(GetTriggerUnit(), gv_amv)
  );
}
function f_bez() {
  var lv_beA = f_aJj();
  var lv_beB = f_aDV();
  var lv_beC = GetPlayerId(GetOwningPlayer(GetTriggerUnit()));
  var lv_beD = GetUnitAbilityLevel(gv_auP[lv_beB], "A06G");
  gv_auP[lv_beB] = GetTriggerUnit();
  GroupAddUnit(gv_amv, gv_auP[lv_beB]);
  gv_auQ[lv_beB] =
    (gv_alu[1095 + lv_beD] + (gv_alu[lv_beC] * (lv_beD + 3)) / 4) *
    gv_aam[lv_beC];
  gv_auR[lv_beB] =
    ((5 * lv_beD * lv_beD +
      30 +
      ((GetHeroInt(GetTriggerUnit(), true) + gv_alu[lv_beC + 8]) *
        (lv_beD + 3)) /
        25) *
      gv_aam[lv_beC]) /
    5;
  gv_auS[lv_beB] = 1;
  SaveInteger(gv_abY, 0, GetHandleId(lv_beA), lv_beB);
  TimerStart(lv_beA, 0.2 / gv_aan[lv_beC], true, f_bet);
  lv_beA = null;
}
function f_beE() {
  return GetSpellAbilityId() == "A053";
}
function f_beF() {
  var lv_beG = GetPlayerId(GetOwningPlayer(GetTriggerUnit()));
  SetWidgetLife(
    GetSpellTargetUnit(),
    GetWidgetLife(GetSpellTargetUnit()) +
      (GetHeroInt(GetTriggerUnit(), true) * f_azK(GetTriggerUnit()) +
        gv_alu[1059 + GetUnitAbilityLevel(GetTriggerUnit(), "A053")] +
        gv_alu[lv_beG + 8]) *
        f_azM(GetTriggerUnit())
  );
}
function f_beH() {
  var lv_beI = GetPlayerId(GetOwningPlayer(GetEventDamageSource()));
  var lv_beJ;
  var lv_beK = GetUnitAbilityLevel(gv_alv[lv_beI], "A052");
  if (GetUnitAbilityLevel(GetTriggerUnit(), "B00L") > 0 && lv_beK > 0) {
    lv_beJ = f_aIL();
    gv_acy = GetUnitX(GetTriggerUnit());
    gv_acz = GetUnitY(GetTriggerUnit());
    gv_acx = GetOwningPlayer(gv_alv[lv_beI]);
    gv_acA = 300 * f_azK(gv_alv[lv_beI]);
    GroupEnumUnitsInRange(
      lv_beJ,
      gv_acy,
      gv_acz,
      400 * f_azK(gv_alv[lv_beI]),
      Condition(f_aMl)
    );
    if (
      UnitHasItemOfTypeBJ(gv_alv[lv_beI], "sor1") ||
      UnitHasItemOfTypeBJ(gv_alv[lv_beI], "sora")
    ) {
      gv_alN =
        (GetEventDamage() +
          R2I(GetHeroInt(gv_alv[lv_beI], true) / 3) +
          gv_alu[lv_beI + 8] * 0.7) *
        gv_alu[1047 + lv_beK] *
        gv_aam[lv_beI];
    } else {
      gv_alN =
        (GetEventDamage() + R2I(GetHeroInt(gv_alv[lv_beI], true) / 4)) *
        gv_alu[1047 + lv_beK] *
        gv_aam[lv_beI];
    }
    ForGroup(lv_beJ, f_bes);
    f_aLX(
      AddSpecialEffect(
        "MDX\\HolyBlessing.mdx",
        GetUnitX(GetTriggerUnit()),
        GetUnitY(GetTriggerUnit())
      ),
      0.5
    );
    f_aIM(lv_beJ);
  }
  lv_beJ = null;
  return false;
}
function f_beL() {
  return GetSpellAbilityId() == "A051";
}
function f_beM() {
  var lv_beN = f_aJt(
    GetOwningPlayer(GetTriggerUnit()),
    GetUnitX(GetEnumUnit()),
    GetUnitX(GetEnumUnit()),
    2
  );
  f_aJA(
    lv_beN,
    "A058",
    GetUnitAbilityLevel(GetTriggerUnit(), "A051") + f_ayQ(GetTriggerUnit())
  );
  UnitDamageTarget(
    lv_beN,
    GetEnumUnit(),
    gv_alN,
    false,
    false,
    ATTACK_TYPE_NORMAL,
    DAMAGE_TYPE_UNIVERSAL,
    null
  );
  IssueTargetOrderById(lv_beN, 852075, GetEnumUnit());
  lv_beN = null;
}
function f_beO() {
  if (GetWidgetLife(GetEnumUnit()) > 0.405) {
    SetWidgetLife(GetEnumUnit(), GetWidgetLife(GetEnumUnit()) + gv_alN);
  }
}
function f_beP() {
  var lv_beQ = GetSpellTargetLoc();
  var lv_beR = GetPlayerId(GetOwningPlayer(GetTriggerUnit()));
  var lv_beS = f_aIL();
  var lv_beT = GetUnitAbilityLevel(GetTriggerUnit(), "A051");
  gv_acy = GetLocationX(lv_beQ);
  gv_acz = GetLocationY(lv_beQ);
  gv_acx = GetOwningPlayer(GetTriggerUnit());
  gv_acA = 250 * f_azK(GetTriggerUnit());
  DestroyEffect(
    AddSpecialEffect(
      "Abilities\\Spells\\Human\\Resurrect\\ResurrectCaster.mdl",
      gv_acy,
      gv_acz
    )
  );
  GroupEnumUnitsInRange(
    lv_beS,
    gv_acy,
    gv_acz,
    350 * f_azK(GetTriggerUnit()),
    Condition(f_aMk)
  );
  gv_alN =
    (gv_alu[1065 + lv_beT] +
      ((lv_beT + 1) / 2) * gv_alu[lv_beR] * gv_aan[lv_beR]) *
    gv_aam[lv_beR];
  ForGroup(lv_beS, f_beM);
  f_aIM(lv_beS);
  gv_aaQ = GetUnitsInRangeOfLocMatching(gv_acA, lv_beQ, Condition(f_aAT));
  gv_alN =
    (gv_alu[1065 + lv_beT] +
      ((lv_beT + 1) / 4) * gv_alu[lv_beR + 8] * gv_aan[lv_beR]) *
    gv_aam[lv_beR];
  ForGroup(gv_aaQ, f_beO);
  DestroyGroup(gv_aaQ);
  RemoveLocation(lv_beQ);
  lv_beS = null;
  lv_beQ = null;
}
function f_beU() {
  var lv_beV = LoadInteger(gv_abT, gv_auX, GetHandleId(GetTriggerUnit()));
  var lv_beW = GetEventDamage();
  var lv_beX;
  if (GetUnitAbilityLevel(gv_auY[lv_beV], "A055") > 0) {
    lv_beX = f_aJj();
    if (lv_beW > GetWidgetLife(gv_auY[lv_beV]) && lv_beW < gv_auZ[lv_beV]) {
      UnitAddAbility(gv_auY[lv_beV], "A059");
      UnitRemoveAbility(gv_auY[lv_beV], "A059");
      SetWidgetLife(gv_auY[lv_beV], GetWidgetLife(gv_auY[lv_beV]));
    } else {
      if (lv_beW < GetWidgetLife(gv_auY[lv_beV]) && lv_beW > gv_auZ[lv_beV]) {
        SetWidgetLife(
          gv_auY[lv_beV],
          GetWidgetLife(gv_auY[lv_beV]) + gv_auZ[lv_beV]
        );
      }
    }
  }
  lv_beX = null;
  return false;
}
function f_beY() {
  var lv_beZ = GetExpiredTimer();
  var lv_bfa = LoadInteger(gv_abY, 0, GetHandleId(lv_beZ));
  if (
    GetWidgetLife(gv_auY[lv_bfa]) < 0.406 ||
    GetUnitAbilityLevel(gv_auY[lv_bfa], "B00M") < 1
  ) {
    RemoveSavedInteger(gv_abT, gv_auX, GetHandleId(gv_auY[lv_bfa]));
    GroupRemoveUnit(gv_auW, gv_auY[lv_bfa]);
    UnitRemoveAbility(gv_auY[lv_bfa], "A055");
    f_aDT(lv_bfa);
    f_aJk(lv_beZ);
  } else {
    SetWidgetLife(
      gv_auY[lv_bfa],
      GetWidgetLife(gv_auY[lv_bfa]) + gv_ava[lv_bfa]
    );
  }
  lv_beZ = null;
}
function f_bfb() {
  return GetSpellAbilityId() == "A050";
}
function f_bfc() {
  var lv_bfd;
  var lv_bfe;
  var lv_bff =
    GetUnitAbilityLevel(GetTriggerUnit(), "A050") + f_ayQ(GetTriggerUnit());
  if (!IsUnitInGroup(GetSpellTargetUnit(), gv_auW)) {
    lv_bfd = f_aJj();
    lv_bfe = f_aDR();
    gv_auY[lv_bfe] = GetSpellTargetUnit();
    gv_auZ[lv_bfe] = 10 * (1 + lv_bff);
    gv_ava[lv_bfe] =
      ((GetHeroInt(GetTriggerUnit(), true) * f_azK(GetSpellTargetUnit()) +
        gv_alu[GetPlayerId(GetOwningPlayer(GetTriggerUnit())) + 8]) *
        f_azK(GetSpellTargetUnit())) /
      (63 - 5 * lv_bff);
    SaveInteger(gv_abT, gv_auX, GetHandleId(gv_auY[lv_bfe]), lv_bfe);
    UnitAddAbility(gv_auY[lv_bfe], "A055");
    SetUnitAbilityLevel(gv_auY[lv_bfe], "A055", lv_bff);
    GroupAddUnit(gv_auW, gv_auY[lv_bfe]);
    SaveInteger(gv_abY, 0, GetHandleId(lv_bfd), lv_bfe);
    TimerStart(lv_bfd, 0.3, true, f_beY);
  } else {
    lv_bfe = LoadInteger(gv_abT, gv_auX, GetHandleId(GetSpellTargetUnit()));
    if (lv_bff != GetUnitAbilityLevel(gv_auY[lv_bfe], "A055")) {
      SetUnitAbilityLevel(gv_auY[lv_bfe], "A055", lv_bff);
      gv_auZ[lv_bfe] = 20;
    }
  }
  lv_bfd = null;
}
function f_bfg() {
  var lv_bfh = 0;
  do {
    if (lv_bfh > 7) {
      break;
    }
    if (GetSpellAbilityId() == gv_amw.getInt(lv_bfh)) {
      return true;
    }
    lv_bfh = lv_bfh + 1;
  } while (true);
  return false;
}
function f_bfi() {
  var lv_bfj = 0;
  var lv_bfk = GetTriggerUnit();
  var lv_bfl = GetPlayerId(GetOwningPlayer(GetTriggerUnit()));
  var lv_bfm;
  do {
    if (lv_bfj > 7) {
      break;
    }
    if (GetSpellAbilityId() == gv_amw.getInt(lv_bfj)) {
      lv_bfm = Player(lv_bfj);
      f_aMN(gv_amw.getInt(lv_bfj));
      DestroyTimerDialog(gv_alA[lv_bfj]);
      PauseTimer(gv_alz[lv_bfj]);
      ReviveHero(
        gv_alv[lv_bfj],
        GetUnitX(lv_bfk) + 50,
        GetUnitY(lv_bfk) + 10,
        true
      );
      GroupRemoveUnit(gv_alF, gv_alv[lv_bfj]);
      SetUnitX(gv_alv[8 + lv_bfj], GetUnitX(lv_bfk));
      SetUnitY(gv_alv[8 + lv_bfj], GetUnitY(lv_bfk));
      SetWidgetLife(
        gv_alv[lv_bfj],
        GetWidgetLife(gv_alv[lv_bfj]) *
          gv_alu[1053 + GetUnitAbilityLevel(lv_bfk, "A05A")]
      );
      SetUnitState(
        gv_alv[lv_bfj],
        UNIT_STATE_MANA,
        GetUnitState(gv_alv[lv_bfj], UNIT_STATE_MAX_MANA) *
          gv_alu[1053 + GetUnitAbilityLevel(lv_bfk, "A05A")]
      );
      SetUnitState(
        lv_bfk,
        UNIT_STATE_MANA,
        GetUnitState(lv_bfk, UNIT_STATE_MANA) -
          100 -
          50 * GetUnitAbilityLevel(lv_bfk, "A05A")
      );
      gv_alO = 1;
      if (GetLocalPlayer() == lv_bfm) {
        PanCameraToTimed(GetUnitX(lv_bfk), GetUnitY(lv_bfk), 0.0);
        ForceUICancel();
      }
      lv_bfj = 8;
    }
    lv_bfj = lv_bfj + 1;
  } while (true);
  lv_bfm = null;
  lv_bfk = null;
}
function f_bfn() {
  var lv_bfo = 0;
  gv_ahQ = CreateTrigger();
  TriggerRegisterAnyUnitEventBJ(gv_ahQ, EVENT_PLAYER_UNIT_SPELL_EFFECT);
  TriggerAddCondition(gv_ahQ, Condition(f_bfg));
  TriggerAddAction(gv_ahQ, f_bfi);
  gv_amw[0] = "A04Z";
  gv_amw[1] = "A05J";
  gv_amw[2] = "A05K";
  gv_amw[3] = "A05L";
  gv_amw[4] = "A05M";
  gv_amw[5] = "A05N";
  gv_amw[6] = "A05R";
  gv_amw[7] = "A05S";
  do {
    if (lv_bfo > 7) {
      break;
    }
    f_aMN(gv_amw.getInt(lv_bfo));
    lv_bfo = lv_bfo + 1;
  } while (true);
  gv_alu[1054] = 0.15;
  gv_alu[1055] = 0.25;
  gv_alu[1056] = 0.35;
  gv_alu[1057] = 0.5;
  gv_alu[1058] = 0.65;
  gv_alu[1059] = 0.8;
}
function f_bfp() {
  var lv_bfq;
  var lv_bfr;
  var lv_bfs;
  var lv_bft = GetEventDamageSource();
  if (
    IsUnitEnemy(GetTriggerUnit(), GetOwningPlayer(lv_bft)) &&
    GetRandomReal(0, 100) < 17 * f_azM(lv_bft) &&
    GetUnitAbilityLevel(lv_bft, "A045") > 0 &&
    !IsUnitInGroup(lv_bft, gv_alE)
  ) {
    lv_bfr = f_aJj();
    lv_bfs = f_aJt(
      GetOwningPlayer(lv_bft),
      GetUnitX(GetTriggerUnit()),
      GetUnitY(GetTriggerUnit()),
      2
    );
    f_aJA(lv_bfs, "A069", GetUnitAbilityLevel(lv_bft, "A045") + f_ayQ(lv_bft));
    IssueTargetOrderById(lv_bfs, 852095, GetTriggerUnit());
    GroupAddUnit(gv_alE, lv_bft);
    SaveInteger(
      gv_abY,
      0,
      GetHandleId(lv_bfr),
      GetPlayerId(GetOwningPlayer(lv_bft))
    );
    TimerStart(lv_bfr, 3 / f_azM(lv_bft), false, f_aMJ);
    f_aNn(
      GetTriggerUnit(),
      Atan2(
        GetUnitY(GetTriggerUnit()) - GetUnitY(lv_bft),
        GetUnitX(GetTriggerUnit()) - GetUnitX(lv_bft)
      )
    );
  }
  if (
    IsUnitEnemy(GetTriggerUnit(), GetOwningPlayer(lv_bft)) &&
    GetRandomReal(0.0, 100) < 17 * f_azK(lv_bft) &&
    GetUnitAbilityLevel(lv_bft, "A044") > 0
  ) {
    lv_bfq =
      GetEventDamage() *
      0.3 *
      GetUnitAbilityLevel(lv_bft, "A044") *
      f_azM(lv_bft);
    f_aAl(lv_bft, lv_bfq);
    UnitDamageTarget(
      f_aJt(
        GetOwningPlayer(lv_bft),
        GetUnitX(GetTriggerUnit()),
        GetUnitY(GetTriggerUnit()),
        1
      ),
      GetTriggerUnit(),
      lv_bfq * f_azK(lv_bft),
      false,
      false,
      ATTACK_TYPE_CHAOS,
      DAMAGE_TYPE_NORMAL,
      null
    );
    f_aMp(
      null,
      S2S(I2S(R2I(lv_bfq + 0.5)) + "!"),
      255,
      0,
      0,
      GetUnitX(lv_bft),
      GetUnitY(lv_bft),
      0.08,
      0.0,
      3,
      10
    );
  }
  if (
    GetUnitAbilityLevel(lv_bft, "A049") > 0 &&
    GetUnitAbilityLevel(GetTriggerUnit(), "B00E") > 0
  ) {
    lv_bfq =
      f_aMC(
        GetUnitX(lv_bft),
        GetUnitY(lv_bft),
        GetUnitX(GetTriggerUnit()),
        GetUnitY(GetTriggerUnit())
      ) *
      (0.1 + 0.07 * GetUnitAbilityLevel(lv_bft, "A049")) *
      f_azO(lv_bft) *
      GetRandomReal(0.85, 1.15);
    if (
      UnitHasItemOfTypeBJ(lv_bft, "sor6") ||
      UnitHasItemOfTypeBJ(lv_bft, "sor5")
    ) {
      lv_bfq = lv_bfq * GetRandomReal(1.4, 1.65);
    }
    lv_bfq = f_aBD(lv_bft, lv_bfq);
    UnitDamageTarget(
      f_aJt(
        GetOwningPlayer(lv_bft),
        GetUnitX(GetTriggerUnit()),
        GetUnitY(GetTriggerUnit()),
        1
      ),
      GetTriggerUnit(),
      lv_bfq * f_azK(lv_bft),
      false,
      false,
      ATTACK_TYPE_NORMAL,
      DAMAGE_TYPE_UNIVERSAL,
      null
    );
    f_aMp(
      null,
      S2S("+" + I2S(R2I(lv_bfq + 0.5))),
      28,
      230,
      185,
      GetUnitX(GetTriggerUnit()),
      GetUnitY(GetTriggerUnit()),
      0.08,
      0.0,
      3,
      15
    );
    f_aAj(lv_bft);
  }
  lv_bfr = null;
  lv_bfs = null;
  lv_bft = null;
  return false;
}
function f_bfu() {
  f_aIU(Condition(f_bfp));
}
function f_bfv() {
  return GetSpellAbilityId() == "A03X";
}
function f_bfw() {
  var lv_bfx = LoadInteger(gv_abY, 0, GetHandleId(GetExpiredTimer()));
  if (
    GetUnitAbilityLevel(gv_ave[lv_bfx], "B005") < 1 ||
    GetWidgetLife(gv_ave[lv_bfx]) < 0.406
  ) {
    UnitRemoveAbility(gv_ave[lv_bfx], "A05T");
    UnitRemoveAbility(gv_ave[lv_bfx], "B004");
    f_aBl(
      gv_ave[lv_bfx],
      gv_abm,
      -LoadInteger(gv_abY, 1, GetHandleId(GetExpiredTimer()))
    );
    f_aDP(lv_bfx);
    f_aJk(GetExpiredTimer());
  }
}
function f_bfy() {
  var lv_bfz = f_aJj();
  var lv_bfA = f_aDN();
  var lv_bfB = f_aJt(
    GetOwningPlayer(GetTriggerUnit()),
    GetUnitX(GetTriggerUnit()),
    GetUnitY(GetTriggerUnit()),
    2
  );
  var lv_bfC = GetUnitAbilityLevel(GetTriggerUnit(), "A03X");
  var lv_bfD = 0.32 - 0.05 * lv_bfC;
  var lv_bfE;
  gv_ave[lv_bfA] = GetTriggerUnit();
  lv_bfC = lv_bfC + f_ayQ(gv_ave[lv_bfA]);
  if (
    GetUnitState(gv_ave[lv_bfA], UNIT_STATE_MANA) /
      GetUnitState(gv_ave[lv_bfA], UNIT_STATE_MAX_MANA) <
    lv_bfD
  ) {
    SetUnitState(gv_ave[lv_bfA], UNIT_STATE_MANA, 0.0);
  } else {
    SetUnitState(
      gv_ave[lv_bfA],
      UNIT_STATE_MANA,
      GetUnitState(gv_ave[lv_bfA], UNIT_STATE_MANA) -
        GetUnitState(gv_ave[lv_bfA], UNIT_STATE_MAX_MANA) * lv_bfD
    );
  }
  f_aJA(lv_bfB, "A04K", lv_bfC + f_ayQ(gv_ave[lv_bfA]));
  UnitAddAbility(gv_ave[lv_bfA], "A05T");
  lv_bfE = R2I(
    (GetHeroAgi(gv_ave[lv_bfA], true) +
      12 +
      R2I(f_aBg(gv_ave[lv_bfA], gv_abm) / 2)) *
      (3 + lv_bfC) *
      0.07
  );
  f_aBl(gv_ave[lv_bfA], gv_abm, lv_bfE);
  IssueTargetOrderById(lv_bfB, 852190, gv_ave[lv_bfA]);
  SaveInteger(gv_abY, 0, GetHandleId(lv_bfz), lv_bfA);
  SaveInteger(gv_abY, 1, GetHandleId(lv_bfz), lv_bfE);
  TimerStart(lv_bfz, 0.3, true, f_bfw);
  lv_bfz = null;
  lv_bfB = null;
}
function f_bfF() {
  var lv_bfG = LoadInteger(gv_abY, 0, GetHandleId(GetExpiredTimer()));
  if (gv_avl.getInt(lv_bfG) > 0 && GetWidgetLife(gv_avi[lv_bfG]) > 0.405) {
    if (gv_avl.getInt(lv_bfG) > 6) {
      IssuePointOrderById(
        gv_avi[lv_bfG],
        851986,
        GetRandomReal(
          GetUnitX(gv_avi[lv_bfG]) - 300,
          GetUnitX(gv_avi[lv_bfG]) + 300
        ),
        GetRandomReal(
          GetUnitY(gv_avi[lv_bfG]) - 300,
          GetUnitY(gv_avi[lv_bfG]) + 300
        )
      );
    }
    UnitDamageTarget(
      gv_avj[lv_bfG],
      gv_avi[lv_bfG],
      gv_avk[lv_bfG],
      false,
      false,
      ATTACK_TYPE_NORMAL,
      DAMAGE_TYPE_UNIVERSAL,
      null
    );
    gv_avl[lv_bfG] = gv_avl.getInt(lv_bfG) - 1;
  } else {
    DestroyEffect(gv_avm[lv_bfG]);
    f_aJn(gv_avj[lv_bfG]);
    f_aDL(lv_bfG);
    f_aJk(GetExpiredTimer());
  }
}
function f_bfH(lv_bfI, lv_bfJ, lv_bfK) {
  var lv_bfL = f_aDJ();
  var lv_bfM = f_aJj();
  gv_avi[lv_bfL] = lv_bfI;
  gv_avj[lv_bfL] = f_aJt(
    lv_bfJ,
    GetUnitX(gv_avi[lv_bfL]),
    GetUnitY(gv_avi[lv_bfL]),
    0.0
  );
  gv_avl[lv_bfL] = 8;
  gv_avk[lv_bfL] = lv_bfK;
  gv_avm[lv_bfL] = AddSpecialEffectTarget(
    "Abilities\\Spells\\Other\\SoulBurn\\SoulBurnbuff.mdl",
    gv_avi[lv_bfL],
    "overhead"
  );
  SaveInteger(gv_abY, 0, GetHandleId(lv_bfM), lv_bfL);
  TimerStart(lv_bfM, 1, true, f_bfF);
  return lv_bfL;
}
function f_bfN() {
  var lv_bfO = GetExpiredTimer();
  var lv_bfP = LoadInteger(gv_abY, 0, GetHandleId(lv_bfO));
  var lv_bfQ = Atan2(
    gv_avr[lv_bfP] - GetUnitY(gv_avt[lv_bfP]),
    gv_avq[lv_bfP] - GetUnitX(gv_avt[lv_bfP])
  );
  SetUnitX(
    gv_avt[lv_bfP],
    GetUnitX(gv_avt[lv_bfP]) + Cos(lv_bfQ) * gv_avs[lv_bfP]
  );
  SetUnitY(
    gv_avt[lv_bfP],
    GetUnitY(gv_avt[lv_bfP]) + Sin(lv_bfQ) * gv_avs[lv_bfP]
  );
  if (
    IsUnitInRangeXY(
      gv_avt[lv_bfP],
      gv_avq[lv_bfP],
      gv_avr[lv_bfP],
      gv_avs[lv_bfP]
    ) ||
    f_aDC(lv_bfP, lv_bfQ)
  ) {
    f_aDH(lv_bfP);
    GroupRemoveUnit(gv_acB, gv_avt[lv_bfP]);
    f_aJk(lv_bfO);
  }
  lv_bfO = null;
}
function f_bfR(lv_bfS, lv_bfT, lv_bfU, lv_bfV) {
  var lv_bfW = f_aDF();
  var lv_bfX = f_aJj();
  gv_avt[lv_bfW] = lv_bfS;
  gv_avq[lv_bfW] = lv_bfT;
  gv_avr[lv_bfW] = lv_bfU;
  gv_avs[lv_bfW] = lv_bfV * 0.025;
  GroupAddUnit(gv_acB, gv_avt[lv_bfW]);
  SaveInteger(gv_abY, 0, GetHandleId(lv_bfX), lv_bfW);
  TimerStart(lv_bfX, 0.025, true, f_bfN);
  lv_bfX = null;
  return lv_bfW;
}
function f_bfY() {
  var lv_bfZ;
  var lv_bga;
  var lv_bgb;
  if (GetSpellAbilityId() == "A03V") {
    lv_bgb = GetSpellTargetLoc();
    lv_bga = GetPlayerId(GetOwningPlayer(GetTriggerUnit()));
    lv_bfZ = f_bfR(
      CreateUnit(
        GetOwningPlayer(GetTriggerUnit()),
        "ehip",
        GetUnitX(GetTriggerUnit()),
        GetUnitY(GetTriggerUnit()),
        GetUnitFacing(GetTriggerUnit())
      ),
      GetLocationX(lv_bgb),
      GetLocationY(lv_bgb),
      500
    );
    gv_avu[lv_bfZ] =
      ((gv_alu[1119 + GetUnitAbilityLevel(GetTriggerUnit(), "A03V")] +
        3 * GetHeroInt(GetTriggerUnit(), true) +
        GetHeroAgi(GetTriggerUnit(), true) +
        gv_alu[lv_bga]) /
        8) *
      f_azK(GetTriggerUnit());
    RemoveLocation(lv_bgb);
  }
  lv_bgb = null;
  return false;
}
function f_bgc() {
  var lv_bgd;
  var lv_bge = GetEventDamageSource();
  if (
    GetUnitAbilityLevel(lv_bge, "A05O") > 0 &&
    GetUnitAbilityLevel(GetTriggerUnit(), "B00X") > 0
  ) {
    lv_bgd = f_aBD(
      lv_bge,
      GetHeroInt(lv_bge, true) *
        (0.22 + 0.23 * f_azO(lv_bge) * GetUnitAbilityLevel(lv_bge, "A05O")) *
        GetRandomReal(0.9, 1.1)
    );
    if (
      GetInventoryIndexOfItemTypeBJ(lv_bge, "shcw") +
        GetInventoryIndexOfItemTypeBJ(lv_bge, "shtm") >
      0
    ) {
      lv_bgd = lv_bgd * 1.2;
    }
    UnitDamageTarget(
      f_aJt(
        GetOwningPlayer(lv_bge),
        GetUnitX(GetTriggerUnit()),
        GetUnitY(GetTriggerUnit()),
        1
      ),
      GetTriggerUnit(),
      lv_bgd * f_azK(lv_bge),
      false,
      false,
      ATTACK_TYPE_NORMAL,
      DAMAGE_TYPE_UNIVERSAL,
      null
    );
    f_aMp(
      null,
      S2S("+" + I2S(R2I(lv_bgd + 0.5))),
      0,
      100,
      150,
      GetUnitX(GetTriggerUnit()),
      GetUnitY(GetTriggerUnit()),
      0.08,
      0.0,
      3,
      15
    );
    f_aAj(lv_bge);
  }
  lv_bge = null;
  return false;
}
function f_bgf() {
  f_aIU(Condition(f_bgc));
}
function f_bgg() {
  var lv_bgh = LoadInteger(gv_abY, 0, GetHandleId(GetExpiredTimer()));
  do {
    gv_alM = FirstOfGroup(gv_avz[lv_bgh]);
    if (gv_alM == null) {
      break;
    }
    if (GetWidgetLife(gv_alM) > 0.405) {
      SetUnitPosition(gv_avA[lv_bgh], GetUnitX(gv_alM), GetUnitY(gv_alM));
      UnitDamageTarget(
        gv_avA[lv_bgh],
        gv_alM,
        gv_avy[lv_bgh],
        false,
        false,
        ATTACK_TYPE_NORMAL,
        DAMAGE_TYPE_UNIVERSAL,
        null
      );
    }
    GroupRemoveUnit(gv_avz[lv_bgh], gv_alM);
  } while (true);
  f_aJn(gv_avA[lv_bgh]);
  f_aIM(gv_avz[lv_bgh]);
  f_aDA(lv_bgh);
  f_aJk(GetExpiredTimer());
}
function f_bgi() {
  var lv_bgj = GetExpiredTimer();
  var lv_bgk = LoadInteger(gv_abY, 0, GetHandleId(lv_bgj));
  var lv_bgl = Atan2(
    gv_avF[lv_bgk] - GetUnitY(gv_avH[lv_bgk]),
    gv_avE[lv_bgk] - GetUnitX(gv_avH[lv_bgk])
  );
  SetUnitX(
    gv_avH[lv_bgk],
    GetUnitX(gv_avH[lv_bgk]) + Cos(lv_bgl) * gv_avG[lv_bgk]
  );
  SetUnitY(
    gv_avH[lv_bgk],
    GetUnitY(gv_avH[lv_bgk]) + Sin(lv_bgl) * gv_avG[lv_bgk]
  );
  if (
    IsUnitInRangeXY(
      gv_avH[lv_bgk],
      gv_avE[lv_bgk],
      gv_avF[lv_bgk],
      gv_avG[lv_bgk]
    ) ||
    f_aDr(lv_bgk, lv_bgl)
  ) {
    f_aDw(lv_bgk);
    GroupRemoveUnit(gv_acB, gv_avH[lv_bgk]);
    f_aJk(lv_bgj);
  }
  lv_bgj = null;
}
function f_bgm(lv_bgn, lv_bgo, lv_bgp, lv_bgq) {
  var lv_bgr = f_aDu();
  var lv_bgs = f_aJj();
  gv_avH[lv_bgr] = lv_bgn;
  gv_avE[lv_bgr] = lv_bgo;
  gv_avF[lv_bgr] = lv_bgp;
  gv_avG[lv_bgr] = lv_bgq * 0.025;
  GroupAddUnit(gv_acB, gv_avH[lv_bgr]);
  SaveInteger(gv_abY, 0, GetHandleId(lv_bgs), lv_bgr);
  TimerStart(lv_bgs, 0.025, true, f_bgi);
  lv_bgs = null;
  return lv_bgr;
}
function f_bgt() {
  if (GetWidgetLife(GetEnumUnit()) > 0.405) {
    DestroyEffect(
      AddSpecialEffectTarget(
        "Abilities\\Spells\\NightElf\\Starfall\\StarfallTarget.mdl",
        GetEnumUnit(),
        "origin"
      )
    );
  } else {
    GroupRemoveUnit(bj_groupRemoveGroupDest, GetEnumUnit());
  }
}
function f_bgu() {
  var lv_bgv;
  var lv_bgw;
  var lv_bgx;
  var lv_bgy;
  var lv_bgz = GetTriggerUnit();
  if (GetSpellAbilityId() == "A06R") {
    lv_bgy = GetUnitAbilityLevel(lv_bgz, "A06R");
    lv_bgw = GetSpellTargetLoc();
    lv_bgx = GetPlayerId(GetOwningPlayer(lv_bgz));
    lv_bgv = f_bgm(
      CreateUnit(
        GetOwningPlayer(lv_bgz),
        "ebal",
        GetUnitX(lv_bgz),
        GetUnitY(lv_bgz),
        GetUnitFacing(lv_bgz)
      ),
      GetLocationX(lv_bgw),
      GetLocationY(lv_bgw),
      750
    );
    gv_avI[lv_bgv] =
      gv_alu[1011 + lv_bgy] +
      ((gv_alu[lv_bgx] + GetHeroInt(lv_bgz, true)) * (lv_bgy + 1)) / 3;
    RemoveLocation(lv_bgw);
  }
  lv_bgz = null;
  lv_bgw = null;
  return false;
}
function f_bgA() {
  if (GetWidgetLife(GetEnumUnit()) > 0.405) {
    SetWidgetLife(GetEnumUnit(), GetWidgetLife(GetEnumUnit()) + gv_alN);
  } else {
    GroupRemoveUnit(bj_groupRemoveGroupDest, GetEnumUnit());
  }
}
function f_bgB() {
  var lv_bgC = GetExpiredTimer();
  var lv_bgD = LoadInteger(gv_abY, 0, GetHandleId(lv_bgC));
  gv_alN = gv_avN[lv_bgD];
  bj_groupRemoveGroupDest = gv_avM[lv_bgD];
  ForGroup(gv_avM[lv_bgD], f_bgA);
  gv_avM[lv_bgD] = bj_groupRemoveGroupDest;
  gv_avO[lv_bgD] = gv_avO.getInt(lv_bgD) - 1;
  bj_groupCountUnits = 0;
  ForGroup(gv_avM[lv_bgD], CountUnitsInGroupEnum);
  if (gv_avO.getInt(lv_bgD) < 1 || bj_groupCountUnits < 1) {
    f_aJk(lv_bgC);
    f_aIM(gv_avM[lv_bgD]);
    f_aDp(lv_bgD);
  }
  lv_bgC = null;
}
function f_bgE() {
  return GetSpellAbilityId() == "A074";
}
function f_bgF() {
  var lv_bgG = GetSpellTargetLoc();
  var lv_bgH;
  var lv_bgI = f_aDn();
  var lv_bgJ = f_aJj();
  var lv_bgK = f_aIL();
  var lv_bgL = GetPlayerId(GetOwningPlayer(GetTriggerUnit()));
  var lv_bgM = GetUnitAbilityLevel(GetTriggerUnit(), "A074");
  gv_acy = GetLocationX(lv_bgG);
  gv_acz = GetLocationY(lv_bgG);
  gv_acx = GetOwningPlayer(GetTriggerUnit());
  gv_acA = 200 * f_azK(GetTriggerUnit());
  GroupEnumUnitsInRangeOfLoc(
    lv_bgK,
    lv_bgG,
    300 * f_azK(GetTriggerUnit()),
    Condition(f_aAT)
  );
  gv_avN[lv_bgI] =
    ((gv_alu[1017 + lv_bgM] +
      (0.3 + 0.15 * lv_bgM) *
        (GetHeroInt(GetTriggerUnit(), true) + gv_alu[lv_bgL + 8] / 1.6)) /
      8) *
    gv_aam[lv_bgL];
  gv_avM[lv_bgI] = f_aIL();
  gv_avO[lv_bgI] = 8;
  if (lv_bgM == 2) {
    gv_avN[lv_bgI] = gv_avN[lv_bgI] * f_azM(GetTriggerUnit());
  }
  do {
    lv_bgH = FirstOfGroup(lv_bgK);
    if (lv_bgH == null) {
      break;
    }
    GroupAddUnit(gv_avM[lv_bgI], lv_bgH);
    f_aLX(
      AddSpecialEffectTarget(
        "Abilities\\Spells\\Items\\HealingSalve\\HealingSalveTarget.mdl",
        lv_bgH,
        "head"
      ),
      4
    );
    GroupRemoveUnit(lv_bgK, lv_bgH);
  } while (true);
  f_aIM(lv_bgK);
  SaveInteger(gv_abY, 0, GetHandleId(lv_bgJ), lv_bgI);
  TimerStart(lv_bgJ, 0.49, true, f_bgB);
  RemoveLocation(lv_bgG);
  lv_bgJ = null;
  lv_bgG = null;
  lv_bgK = null;
  lv_bgH = null;
}
function f_bgN() {
  var lv_bgO = GetExpiredTimer();
  var lv_bgP = LoadInteger(gv_abY, 0, GetHandleId(lv_bgO));
  if (
    GetUnitAbilityLevel(gv_avS[lv_bgP], "B001") < 1 ||
    GetWidgetLife(gv_avS[lv_bgP]) < 0.406
  ) {
    GroupRemoveUnit(gv_amx, gv_avS[lv_bgP]);
    UnitRemoveAbility(gv_avS[lv_bgP], "A04G");
    RemoveSavedInteger(gv_abT, gv_amy, GetHandleId(gv_avS[lv_bgP]));
    f_aJk(lv_bgO);
    f_aDl(lv_bgP);
  }
  lv_bgO = null;
}
function f_bgQ() {
  return GetSpellAbilityId() == "A03Q";
}
function f_bgR() {
  var lv_bgS;
  var lv_bgT;
  if (!IsUnitInGroup(GetTriggerUnit(), gv_amx)) {
    lv_bgT = f_aDj();
    gv_avS[lv_bgT] = GetTriggerUnit();
    UnitAddAbility(gv_avS[lv_bgT], "A04G");
    GroupAddUnit(gv_amx, gv_avS[lv_bgT]);
    SaveInteger(gv_abT, gv_amy, GetHandleId(gv_avS[lv_bgT]), lv_bgT);
    lv_bgS = f_aJj();
    SaveInteger(gv_abY, 0, GetHandleId(lv_bgS), lv_bgT);
    TimerStart(lv_bgS, 0.3, true, f_bgN);
  } else {
    lv_bgT = LoadInteger(gv_abT, gv_amy, GetHandleId(GetTriggerUnit()));
  }
  lv_bgS = null;
}
function f_bgU() {
  var lv_bgV = GetExpiredTimer();
  var lv_bgW = LoadInteger(gv_abY, 0, GetHandleId(lv_bgV));
  SetUnitPositionLoc(gv_alv[lv_bgW], gv_alC[60 + lv_bgW]);
  PanCameraToTimedLocForPlayer(Player(lv_bgW), gv_alC[60 + lv_bgW], 0);
  DestroyEffect(
    AddSpecialEffectTarget(
      "Abilities\\Spells\\Human\\MassTeleport\\MassTeleportTarget.mdl",
      gv_alv[lv_bgW],
      "origin"
    )
  );
  PauseUnit(gv_alv[lv_bgW], false);
  f_aJk(lv_bgV);
  lv_bgV = null;
}
function f_bgX() {
  var lv_bgY = GetPlayerId(GetOwningPlayer(GetTriggerUnit()));
  var lv_bgZ = GetPlayerState(Player(lv_bgY), PLAYER_STATE_RESOURCE_FOOD_USED);
  var lv_bha = GetSpellAbilityId();
  var lv_bhb = 0;
  var lv_bhc = 0;
  var lv_bhd;
  if (lv_bha == "A07T") {
    lv_bhb = 20;
    lv_bhc = 100;
  }
  if (lv_bha == "A07S") {
    lv_bhb = 30;
    if (gv_alv[lv_bgY] != null) {
      gv_alC[50 + lv_bgY] = GetUnitLoc(gv_alv[lv_bgY]);
      DisplayTimedTextToPlayer(
        Player(lv_bgY),
        0,
        0,
        20,
        S2S(gv_alw[82] + "Favor Teleport Beacon set to current location.")
      );
    } else {
      gv_alC[50 + lv_bgY] = GetRectCenter(gv_aep);
    }
    lv_bhc = 100;
  }
  gv_alC[60 + lv_bgY] = gv_alC[50 + lv_bgY];
  if (lv_bha == "A07E") {
    lv_bhb = 18;
    gv_alC[60 + lv_bgY] = GetRectCenter(gv_aep);
  }
  if (lv_bha == "A07F") {
    lv_bhb = 20;
    gv_alC[60 + lv_bgY] = GetRectCenter(gv_adw);
    lv_bhc = 30;
  }
  if (lv_bha == "A07G") {
    lv_bhb = 22;
    gv_alC[60 + lv_bgY] = GetRectCenter(gv_adC);
    lv_bhc = 55;
  }
  if (lv_bha == "A07H") {
    lv_bhb = 24;
    gv_alC[60 + lv_bgY] = GetRectCenter(gv_afi);
    lv_bhc = 85;
  }
  if (GetHeroLevel(gv_alv[lv_bgY]) < lv_bhc) {
    f_aMm(
      Player(lv_bgY),
      S2S("You are too weak to pray this level " + I2S(lv_bhc)) + " prayer."
    );
    lv_bhb = 0;
  }
  if (lv_bgZ < lv_bhb) {
    f_aMm(
      Player(lv_bgY),
      S2S("You need " + I2S(lv_bhb - lv_bgZ)) +
        " more favor to have that prayer answered."
    );
    lv_bhb = 0;
  }
  if (lv_bhb > 0) {
    SetPlayerState(
      Player(lv_bgY),
      PLAYER_STATE_RESOURCE_FOOD_USED,
      lv_bgZ - lv_bhb
    );
    if (GetWidgetLife(gv_alv[lv_bgY]) > 0.405) {
      PauseUnit(gv_alv[lv_bgY], true);
      DestroyEffect(
        AddSpecialEffectTarget(
          "Abilities\\Spells\\Human\\MassTeleport\\MassTeleportCaster.mdl",
          gv_alv[lv_bgY],
          "origin"
        )
      );
      lv_bhd = f_aJj();
      SaveInteger(gv_abY, 0, GetHandleId(lv_bhd), lv_bgY);
      TimerStart(lv_bhd, 1, false, f_bgU);
    }
  }
  lv_bhd = null;
}
function f_bhe() {
  var lv_bhf = LoadInteger(gv_abY, 0, GetHandleId(GetExpiredTimer()));
  gv_alu[lv_bhf] = gv_alu[lv_bhf] - 250;
  gv_alu[lv_bhf + 8] = gv_alu[lv_bhf + 8] - 250;
  UnitRemoveAbility(gv_alv[lv_bhf], "A08C");
  UnitRemoveAbility(gv_alv[lv_bhf], "B01E");
  f_aJk(GetExpiredTimer());
}
function f_bhg() {
  return GetSpellAbilityId() == "A07I";
}
function f_bhh() {
  var lv_bhi;
  var lv_bhj = GetOwningPlayer(GetTriggerUnit());
  var lv_bhk = GetPlayerId(lv_bhj);
  if (GetPlayerState(lv_bhj, PLAYER_STATE_RESOURCE_FOOD_USED) < 75) {
    f_aMm(
      lv_bhj,
      S2S(
        "You need " +
          I2S(75 - GetPlayerState(lv_bhj, PLAYER_STATE_RESOURCE_FOOD_USED))
      ) + " more favor to have that prayer answered."
    );
  } else {
    SetPlayerState(
      lv_bhj,
      PLAYER_STATE_RESOURCE_FOOD_USED,
      GetPlayerState(lv_bhj, PLAYER_STATE_RESOURCE_FOOD_USED) - 75
    );
    gv_alu[lv_bhk] = gv_alu[lv_bhk] + 250;
    gv_alu[lv_bhk + 8] = gv_alu[lv_bhk + 8] + 250;
    UnitAddAbility(gv_alv[lv_bhk], "A08C");
    lv_bhi = f_aJj();
    SaveInteger(gv_abY, 0, GetHandleId(lv_bhi), lv_bhk);
    TimerStart(lv_bhi, 30, false, f_bhe);
  }
  lv_bhj = null;
  lv_bhi = null;
}
function f_bhl() {
  var lv_bhm = LoadInteger(gv_abY, 0, GetHandleId(GetExpiredTimer()));
  UnitRemoveAbility(gv_alv[lv_bhm], "A08D");
  UnitRemoveAbility(gv_alv[lv_bhm], "B01F");
  f_aJk(GetExpiredTimer());
}
function f_bhn() {
  return GetSpellAbilityId() == "A07J";
}
function f_bho() {
  var lv_bhp;
  var lv_bhq = GetOwningPlayer(GetTriggerUnit());
  var lv_bhr = GetPlayerId(lv_bhq);
  if (GetPlayerState(lv_bhq, PLAYER_STATE_RESOURCE_FOOD_USED) < 75) {
    f_aMm(
      lv_bhq,
      S2S(
        "You need " +
          I2S(75 - GetPlayerState(lv_bhq, PLAYER_STATE_RESOURCE_FOOD_USED))
      ) + " more favor to have that prayer answered."
    );
  } else {
    SetPlayerState(
      lv_bhq,
      PLAYER_STATE_RESOURCE_FOOD_USED,
      GetPlayerState(lv_bhq, PLAYER_STATE_RESOURCE_FOOD_USED) - 75
    );
    UnitAddAbility(gv_alv[lv_bhr], "A08D");
    lv_bhp = f_aJj();
    SaveInteger(gv_abY, 0, GetHandleId(lv_bhp), lv_bhr);
    TimerStart(lv_bhp, 30, false, f_bhl);
  }
  lv_bhq = null;
  lv_bhp = null;
}
function f_bhs() {
  var lv_bht;
  if (GetUnitAbilityLevel(GetEventDamageSource(), "A08D") > 0) {
    lv_bht = f_aJt(
      GetOwningPlayer(GetEventDamageSource()),
      GetUnitX(GetTriggerUnit()),
      GetUnitY(GetTriggerUnit()),
      1
    );
    UnitDamageTarget(
      lv_bht,
      GetTriggerUnit(),
      GetEventDamage() * 0.25 * f_azK(GetEventDamageSource()),
      false,
      false,
      ATTACK_TYPE_CHAOS,
      DAMAGE_TYPE_NORMAL,
      null
    );
    f_aMp(
      GetOwningPlayer(GetEventDamageSource()),
      S2S(
        "+" + I2S(R2I(GetEventDamage() * 0.25 * f_azM(GetEventDamageSource())))
      ) + "!",
      255,
      3,
      3,
      GetUnitX(GetEventDamageSource()) - 16,
      GetUnitY(GetEventDamageSource()),
      0.077,
      0.0,
      3,
      12.5
    );
  }
  lv_bht = null;
  return false;
}
function f_bhu() {
  var lv_bhv = GetExpiredTimer();
  var lv_bhw = LoadInteger(gv_abY, 0, GetHandleId(lv_bhv));
  UnitRemoveAbility(gv_alv[lv_bhw], "A07L");
  UnitRemoveAbility(gv_alv[lv_bhw], "A06I");
  UnitRemoveAbility(gv_alv[lv_bhw], "A08E");
  f_aJk(lv_bhv);
  lv_bhv = null;
}
function f_bhx() {
  return GetSpellAbilityId() == "A07K";
}
function f_bhy() {
  var lv_bhz;
  var lv_bhA = GetOwningPlayer(GetTriggerUnit());
  var lv_bhB = GetPlayerId(lv_bhA);
  if (GetPlayerState(lv_bhA, PLAYER_STATE_RESOURCE_FOOD_USED) < 75) {
    f_aMm(
      lv_bhA,
      S2S(
        "You need " +
          I2S(75 - GetPlayerState(lv_bhA, PLAYER_STATE_RESOURCE_FOOD_USED))
      ) + " more favor to have that prayer answered."
    );
  } else {
    SetPlayerState(
      lv_bhA,
      PLAYER_STATE_RESOURCE_FOOD_USED,
      GetPlayerState(lv_bhA, PLAYER_STATE_RESOURCE_FOOD_USED) - 75
    );
    UnitAddAbility(gv_alv[lv_bhB], "A07L");
    UnitAddAbility(gv_alv[lv_bhB], "A06I");
    UnitAddAbility(gv_alv[lv_bhB], "A08E");
    lv_bhz = f_aJj();
    SaveInteger(gv_abY, 0, GetHandleId(lv_bhz), lv_bhB);
    TimerStart(lv_bhz, 30, false, f_bhu);
  }
  lv_bhA = null;
  lv_bhz = null;
}
function f_bhC() {
  return GetSpellAbilityId() == "A06S";
}
function f_bhD() {
  var lv_bhE = GetOwningPlayer(GetTriggerUnit());
  var lv_bhF = GetPlayerId(lv_bhE);
  if (GetPlayerState(lv_bhE, PLAYER_STATE_RESOURCE_FOOD_USED) < 100) {
    f_aMm(
      lv_bhE,
      S2S(
        "You need " +
          I2S(100 - GetPlayerState(lv_bhE, PLAYER_STATE_RESOURCE_FOOD_USED))
      ) + " more favor to have that prayer answered."
    );
  } else {
    SetPlayerState(
      lv_bhE,
      PLAYER_STATE_RESOURCE_FOOD_USED,
      GetPlayerState(lv_bhE, PLAYER_STATE_RESOURCE_FOOD_USED) - 100
    );
    SetUnitLifePercentBJ(gv_alv[lv_bhF], 100);
    SetUnitManaPercentBJ(gv_alv[lv_bhF], 100);
    DestroyEffect(
      AddSpecialEffectTarget(
        "Abilities\\Spells\\Items\\AIre\\AIreTarget.mdl",
        gv_alv[lv_bhF],
        "origin"
      )
    );
  }
  lv_bhE = null;
}
function f_bhG() {
  return GetSpellAbilityId() == "A06W";
}
function f_bhH() {
  var lv_bhI = GetOwningPlayer(GetTriggerUnit());
  var lv_bhJ = GetPlayerState(lv_bhI, PLAYER_STATE_RESOURCE_FOOD_USED);
  var lv_bhK;
  if (lv_bhJ < 100) {
    f_aMm(
      lv_bhI,
      S2S("You need " + I2S(100 - lv_bhJ)) +
        " more favor to have that prayer answered."
    );
  } else {
    SetPlayerState(lv_bhI, PLAYER_STATE_RESOURCE_FOOD_USED, lv_bhJ - 100);
    lv_bhJ = 0;
    do {
      if (lv_bhJ > 7) {
        break;
      }
      lv_bhK = 0.5 * GetUnitState(gv_alv[lv_bhJ], UNIT_STATE_MAX_LIFE);
      SetUnitState(
        gv_alv[lv_bhJ],
        UNIT_STATE_LIFE,
        GetUnitState(gv_alv[lv_bhJ], UNIT_STATE_LIFE) + lv_bhK
      );
      DestroyEffect(
        AddSpecialEffectTarget(
          "Abilities\\Spells\\Orc\\HealingWave\\HealingWaveTarget.mdl",
          gv_alv[lv_bhJ],
          "origin"
        )
      );
      lv_bhJ = lv_bhJ + 1;
    } while (true);
  }
  lv_bhI = null;
}
function f_bhL() {
  var lv_bhM = GetExpiredTimer();
  var lv_bhN = 0;
  do {
    if (lv_bhN > 7) {
      break;
    }
    UnitRemoveAbility(gv_alv[lv_bhN], "A07P");
    UnitRemoveAbility(gv_alv[lv_bhN], "A07Q");
    UnitRemoveAbility(gv_alv[lv_bhN], "A08F");
    lv_bhN = lv_bhN + 1;
  } while (true);
  f_aJk(lv_bhM);
  lv_bhM = null;
}
function f_bhO() {
  return GetSpellAbilityId() == "A06V";
}
function f_bhP() {
  var lv_bhQ;
  var lv_bhR = GetOwningPlayer(GetTriggerUnit());
  var lv_bhS = GetPlayerState(lv_bhR, PLAYER_STATE_RESOURCE_FOOD_USED);
  if (lv_bhS < 100) {
    f_aMm(
      lv_bhR,
      S2S("You need " + I2S(100 - lv_bhS)) +
        " more favor to have that prayer answered."
    );
  } else {
    SetPlayerState(lv_bhR, PLAYER_STATE_RESOURCE_FOOD_USED, lv_bhS - 100);
    lv_bhS = 0;
    do {
      if (lv_bhS > 7) {
        break;
      }
      UnitAddAbility(gv_alv[lv_bhS], "A07P");
      UnitAddAbility(gv_alv[lv_bhS], "A07Q");
      UnitAddAbility(gv_alv[lv_bhS], "A08F");
      lv_bhS = lv_bhS + 1;
    } while (true);
    lv_bhQ = f_aJj();
    TimerStart(lv_bhQ, 25, false, f_bhL);
  }
  lv_bhR = null;
  lv_bhQ = null;
}
function f_bhT() {
  if (GetUnitAbilityLevel(GetEventDamageSource(), "A08F") > 0) {
    SetWidgetLife(
      GetEventDamageSource(),
      GetWidgetLife(GetEventDamageSource()) +
        GetEventDamage() * 0.1 * f_azK(GetEventDamageSource())
    );
    f_aLX(
      AddSpecialEffectTarget(
        "Abilities\\Spells\\Undead\\VampiricAura\\VampiricAuraTarget.mdl",
        GetEventDamageSource(),
        "chest"
      ),
      0.1
    );
  }
  return false;
}
function f_bhU() {
  var lv_bhV = GetExpiredTimer();
  var lv_bhW;
  var lv_bhX;
  var lv_bhY = 0;
  do {
    if (lv_bhY > 7) {
      break;
    }
    lv_bhW = GetUnitState(gv_alv[lv_bhY], UNIT_STATE_LIFE);
    lv_bhX = 0.75 * GetUnitState(gv_alv[lv_bhY], UNIT_STATE_MAX_LIFE);
    SetUnitState(gv_alv[lv_bhY], UNIT_STATE_LIFE, lv_bhW + lv_bhX);
    SetUnitInvulnerable(gv_alv[lv_bhY], false);
    DestroyEffect(gv_aly[200 + lv_bhY]);
    lv_bhY = lv_bhY + 1;
  } while (true);
  f_aJk(lv_bhV);
  lv_bhV = null;
}
function f_bhZ() {
  return GetSpellAbilityId() == "A06X";
}
function f_bia() {
  var lv_bib;
  var lv_bic = GetOwningPlayer(GetTriggerUnit());
  var lv_bid = GetPlayerState(lv_bic, PLAYER_STATE_RESOURCE_FOOD_USED);
  if (lv_bid < 150) {
    f_aMm(
      lv_bic,
      S2S("You need " + I2S(150 - lv_bid)) +
        " more favor to have that prayer answered."
    );
  } else {
    SetPlayerState(lv_bic, PLAYER_STATE_RESOURCE_FOOD_USED, lv_bid - 150);
    lv_bid = 0;
    do {
      if (lv_bid > 7) {
        break;
      }
      SetUnitInvulnerable(gv_alv[lv_bid], true);
      DestroyEffect(gv_aly[200 + lv_bid]);
      gv_aly[200 + lv_bid] = AddSpecialEffectTarget(
        "Abilities\\Spells\\Human\\DivineShield\\DivineShieldTarget.mdl",
        gv_alv[lv_bid],
        "origin"
      );
      lv_bid = lv_bid + 1;
    } while (true);
    lv_bib = f_aJj();
    TimerStart(lv_bib, 3, false, f_bhU);
  }
  lv_bic = null;
  lv_bib = null;
}
function f_bie() {
  return IsUnitType(GetTriggerUnit(), UNIT_TYPE_HERO) != null;
}
function f_bif() {
  gv_acQ = GetRectCenter(gv_adt);
  SetUnitPositionLoc(GetTriggerUnit(), gv_acQ);
  PanCameraToTimedLocForPlayer(GetOwningPlayer(GetTriggerUnit()), gv_acQ, 0);
  RemoveLocation(gv_acQ);
}
function f_big() {
  return IsUnitType(GetTriggerUnit(), UNIT_TYPE_HERO) != null;
}
function f_bih() {
  gv_acQ = GetRectCenter(gv_adu);
  SetUnitPositionLoc(GetTriggerUnit(), gv_acQ);
  PanCameraToTimedLocForPlayer(GetOwningPlayer(GetTriggerUnit()), gv_acQ, 0);
  RemoveLocation(gv_acQ);
}
function f_bii() {
  return IsUnitType(GetTriggerUnit(), UNIT_TYPE_HERO) != null;
}
function f_bij() {
  gv_acQ = GetRectCenter(gv_aec);
  SetUnitPositionLoc(GetTriggerUnit(), gv_acQ);
  PanCameraToTimedLocForPlayer(GetOwningPlayer(GetTriggerUnit()), gv_acQ, 0);
  RemoveLocation(gv_acQ);
}
function f_bik() {
  return IsUnitType(GetTriggerUnit(), UNIT_TYPE_HERO) != null;
}
function f_bil() {
  gv_acQ = GetRectCenter(gv_afC);
  SetUnitPositionLoc(GetTriggerUnit(), gv_acQ);
  PanCameraToTimedLocForPlayer(GetOwningPlayer(GetTriggerUnit()), gv_acQ, 0);
  RemoveLocation(gv_acQ);
}
function f_bim() {
  return IsUnitType(GetTriggerUnit(), UNIT_TYPE_HERO) != null;
}
function f_bin() {
  gv_acQ = GetRectCenter(gv_adH);
  SetUnitPositionLoc(GetTriggerUnit(), gv_acQ);
  PanCameraToTimedLocForPlayer(GetOwningPlayer(GetTriggerUnit()), gv_acQ, 0);
  RemoveLocation(gv_acQ);
}
function f_bio() {
  return IsUnitType(GetTriggerUnit(), UNIT_TYPE_HERO) != null;
}
function f_bip() {
  gv_acQ = GetRectCenter(gv_adJ);
  SetUnitPositionLoc(GetTriggerUnit(), gv_acQ);
  PanCameraToTimedLocForPlayer(GetOwningPlayer(GetTriggerUnit()), gv_acQ, 0);
  RemoveLocation(gv_acQ);
}
function f_biq() {
  return IsUnitDeadBJ(gv_ako) && IsUnitDeadBJ(gv_akA) && IsUnitDeadBJ(gv_akg);
}
function f_bir() {
  return f_biq();
}
function f_bis() {
  ModifyGateBJ(1, gv_als);
  gv_acQ = GetRectCenter(gv_aeP);
  PingMinimapLocForForce(bj_FORCE_ALL_PLAYERS, gv_acQ, 3);
  RemoveLocation(gv_acQ);
}
function f_bit() {
  gv_acQ = GetDestructableLoc(gv_alt);
  ModifyGateBJ(1, gv_alt);
  PingMinimapLocForForce(bj_FORCE_ALL_PLAYERS, gv_acQ, 3);
  RemoveLocation(gv_acQ);
}
function f_biu() {
  var lv_biv = GetEventDamageSource();
  var lv_biw = GetTriggerUnit();
  var lv_bix = GetRandomReal(0.0, 100);
  if (
    (GetInventoryIndexOfItemTypeBJ(lv_biv, "tbar") > 0 && 5 > lv_bix) ||
    (GetInventoryIndexOfItemTypeBJ(lv_biv, "tbsm") > 0 && 10 > lv_bix)
  ) {
    SetUnitX(gv_amF, GetUnitX(lv_biw));
    SetUnitY(gv_amF, GetUnitY(lv_biw));
    IssueTargetOrderById(gv_amF, 852190, lv_biw);
  }
  lv_biv = null;
  lv_biw = null;
  return false;
}
function f_biy() {
  var lv_biz = GetEventDamageSource();
  if (GetInventoryIndexOfItemTypeBJ(lv_biz, "bzbf") > 0) {
    SetUnitState(
      lv_biz,
      UNIT_STATE_MANA,
      GetUnitState(lv_biz, UNIT_STATE_MANA) + GetEventDamage() * 0.15
    );
    DestroyEffect(AddSpecialEffectTarget(gv_amA, lv_biz, "origin"));
  }
  lv_biz = null;
  return false;
}
function f_biA() {
  var lv_biB = GetEventDamageSource();
  if (
    GetInventoryIndexOfItemTypeBJ(lv_biB, "btst") > 0 &&
    GetRandomInt(0, 100) < 11 * f_azM(lv_biB)
  ) {
    UnitDamageTarget(
      lv_biB,
      GetTriggerUnit(),
      400 * f_azK(lv_biB),
      true,
      false,
      ATTACK_TYPE_HERO,
      DAMAGE_TYPE_NORMAL,
      null
    );
    f_aMp(
      null,
      "400",
      255,
      50,
      25,
      GetUnitX(GetTriggerUnit()),
      GetUnitY(GetTriggerUnit()),
      0.061,
      0.0,
      3,
      9
    );
    DestroyEffect(AddSpecialEffectTarget(gv_amB, GetTriggerUnit(), "origin"));
    f_aAl(lv_biB, 400 * f_azM(lv_biB));
  }
  lv_biB = null;
  return false;
}
function f_biC() {
  var lv_biD = GetTriggerUnit();
  var lv_biE = GetSpellAbilityId();
  f_aBN(0.1);
  if (
    lv_biE == "A047" ||
    lv_biE == "A03U" ||
    lv_biE == "A049" ||
    lv_biE == "A05O"
  ) {
    if (f_ayQ(lv_biD) < 3) {
      f_aAj(lv_biD);
      lv_biD = null;
      return;
    }
  }
  if (GetInventoryIndexOfItemTypeBJ(lv_biD, "bfhr") > 0) {
    DestroyEffect(AddSpecialEffectTarget(gv_amC, lv_biD, "origin"));
    SetUnitState(
      lv_biD,
      UNIT_STATE_MANA,
      GetUnitState(lv_biD, UNIT_STATE_MANA) +
        GetUnitState(lv_biD, UNIT_STATE_MAX_MANA) * 0.025
    );
  }
  if (GetInventoryIndexOfItemTypeBJ(lv_biD, "tmsc") > 0) {
    DestroyEffect(AddSpecialEffectTarget(gv_amC, lv_biD, "origin"));
    SetUnitState(
      lv_biD,
      UNIT_STATE_MANA,
      GetUnitState(lv_biD, UNIT_STATE_MANA) +
        GetUnitState(lv_biD, UNIT_STATE_MAX_MANA) * 0.04 * f_azK(lv_biD)
    );
  }
  if (GetInventoryIndexOfItemTypeBJ(lv_biD, "tgxp") > 0) {
    DestroyEffect(AddSpecialEffectTarget(gv_amC, lv_biD, "origin"));
    SetUnitState(
      lv_biD,
      UNIT_STATE_MANA,
      GetUnitState(lv_biD, UNIT_STATE_MANA) +
        GetUnitState(lv_biD, UNIT_STATE_MAX_MANA) * 0.025 * f_azK(lv_biD)
    );
  }
  if (GetInventoryIndexOfItemTypeBJ(lv_biD, "jpnt") > 0) {
    DestroyEffect(AddSpecialEffectTarget(gv_amC, lv_biD, "origin"));
    SetUnitState(
      lv_biD,
      UNIT_STATE_MANA,
      GetUnitState(lv_biD, UNIT_STATE_MANA) +
        GetUnitState(lv_biD, UNIT_STATE_MAX_MANA) * 0.03 * f_azK(lv_biD)
    );
  }
  lv_biD = null;
}
function f_biF() {
  var lv_biG = GetTriggerUnit();
  if (GetInventoryIndexOfItemTypeBJ(lv_biG, "fwss") > 0) {
    DestroyEffect(AddSpecialEffectTarget(gv_amD, lv_biG, "origin"));
    IssueTargetOrderById(gv_amF, 852075, GetAttacker());
    SetUnitPosition(gv_amF, GetUnitX(GetAttacker()), GetUnitY(GetAttacker()));
  }
  lv_biG = null;
  return false;
}
function f_biH() {
  var lv_biI = GetEventDamageSource();
  if (
    GetInventoryIndexOfItemTypeBJ(lv_biI, "ches") > 0 &&
    GetRandomInt(0, 100) < 11 * f_azK(lv_biI)
  ) {
    UnitDamageTarget(
      lv_biI,
      GetTriggerUnit(),
      450 * f_azK(lv_biI),
      true,
      false,
      ATTACK_TYPE_HERO,
      DAMAGE_TYPE_NORMAL,
      null
    );
    DestroyEffect(AddSpecialEffectTarget(gv_amE, GetTriggerUnit(), "origin"));
  }
  lv_biI = null;
  return false;
}
function f_biJ() {
  var lv_biK = GetEventDamageSource();
  var gv_aaj;
  if (
    GetInventoryIndexOfItemTypeBJ(lv_biK, "bzbe") > 0 &&
    GetRandomInt(0, 100) < 10 * f_azK(lv_biK)
  ) {
    gv_aaj = 800 * f_azM(lv_biK);
    if (GetUnitAbilityLevel(lv_biK, "A056") > 0) {
      gv_aaj =
        gv_aaj *
        (1 +
          0.06 *
            GetUnitAbilityLevel(lv_biK, "A056") *
            f_azK(lv_biK) *
            f_azK(lv_biK));
    }
    if (
      GetInventoryIndexOfItemTypeBJ(lv_biK, "mnsf") +
        GetInventoryIndexOfItemTypeBJ(lv_biK, "rej1") +
        GetInventoryIndexOfItemTypeBJ(lv_biK, "stre") +
        GetInventoryIndexOfItemTypeBJ(lv_biK, "stwa") >
      0
    ) {
      gv_aaj = gv_aaj * 1.3 * f_azO(lv_biK);
    }
    f_aMp(
      null,
      "800",
      255,
      50,
      25,
      GetUnitX(GetTriggerUnit()),
      GetUnitY(GetTriggerUnit()),
      0.061,
      0.0,
      3,
      9
    );
    UnitDamageTarget(
      lv_biK,
      GetTriggerUnit(),
      gv_aaj * f_azM(lv_biK),
      true,
      false,
      ATTACK_TYPE_HERO,
      DAMAGE_TYPE_NORMAL,
      null
    );
    f_aAl(lv_biK, gv_aaj * f_azM(lv_biK));
    DestroyEffect(AddSpecialEffectTarget(gv_amz, GetTriggerUnit(), "origin"));
  }
  lv_biK = null;
  return false;
}
function f_biL() {
  var lv_biM = GetTriggerUnit();
  var lv_biN = GetPlayerId(GetOwningPlayer(GetAttacker()));
  if (
    GetInventoryIndexOfItemTypeBJ(lv_biM, "wolg") +
      GetInventoryIndexOfItemTypeBJ(lv_biM, "I018") +
      GetInventoryIndexOfItemTypeBJ(lv_biM, "I01A") +
      GetInventoryIndexOfItemTypeBJ(lv_biM, "I01B") +
      GetInventoryIndexOfItemTypeBJ(lv_biM, "I015") >
    0
  ) {
    DestroyEffect(AddSpecialEffectTarget(gv_amJ, lv_biM, "origin"));
    SetUnitPosition(gv_amK, GetUnitX(GetAttacker()), GetUnitY(GetAttacker()));
    IssueTargetOrderById(gv_amK, 852075, GetAttacker());
  }
  if (lv_biN < 9 && GetAttacker() == gv_alv[lv_biN]) {
    gv_aaT[lv_biN] = GetTriggerUnit();
  }
  lv_biM = null;
  return false;
}
function f_biO() {
  var lv_biP = GetEventDamageSource();
  if (
    GetRandomReal(0.0, 100) < 7 * f_azM(lv_biP) &&
    (UnitHasItemOfTypeBJ(lv_biP, "ccmd") ||
      UnitHasItemOfTypeBJ(lv_biP, "rots")) &&
    1 == 0
  ) {
    SetUnitAbilityLevel(gv_amF, "A06E", GetUnitAbilityLevel(lv_biP, "A06E"));
    SetUnitOwner(gv_amF, GetOwningPlayer(lv_biP), false);
    SetUnitX(gv_amF, GetUnitX(GetTriggerUnit()));
    SetUnitY(gv_amF, GetUnitY(GetTriggerUnit()));
    IssueTargetOrderById(gv_amF, 852171, GetTriggerUnit());
    UnitResetCooldown(gv_amF);
    f_aLX(AddSpecialEffectTarget(gv_amG, lv_biP, "origin"), 0.1);
  }
  lv_biP = null;
  return false;
}
function f_biQ() {
  var lv_biR = GetEventDamageSource();
  if (
    GetRandomReal(0.0, 100) < 7.5 * f_azK(lv_biR) &&
    GetInventoryIndexOfItemTypeBJ(lv_biR, "oslo") +
      GetInventoryIndexOfItemTypeBJ(lv_biR, "oven") >
      0
  ) {
    SetUnitX(gv_amF, GetUnitX(GetTriggerUnit()));
    SetUnitY(gv_amF, GetUnitY(GetTriggerUnit()));
    IssueTargetOrderById(gv_amF, 852231, GetTriggerUnit());
    f_aLX(AddSpecialEffectTarget(gv_amH, lv_biR, "origin"), 0.1);
    if (f_aML(GetEventDamage() * 1.5) > 0.0) {
      UnitDamageTarget(
        gv_amK,
        GetTriggerUnit(),
        GetEventDamage() * 1.25 * f_azM(lv_biR),
        true,
        true,
        ATTACK_TYPE_HERO,
        DAMAGE_TYPE_NORMAL,
        null
      );
      f_aMp(
        null,
        S2S(I2S(f_aML(GetEventDamage() * 1.5)) + "!"),
        255,
        0,
        0,
        GetUnitX(lv_biR),
        GetUnitY(lv_biR),
        0.077,
        0.0,
        3,
        12.5
      );
    }
  }
  lv_biR = null;
  return false;
}
function f_biS() {
  var lv_biT = GetEventDamageSource();
  var lv_biU = 2.5;
  if (
    GetRandomReal(0.0, 100) < 7 * f_azK(lv_biT) &&
    (UnitHasItemOfTypeBJ(lv_biT, "mnsf") || UnitHasItemOfTypeBJ(lv_biT, "rej1"))
  ) {
    if (UnitHasItemOfTypeBJ(lv_biT, "rej1")) {
      lv_biU = 4;
    }
    UnitDamageTarget(
      gv_amK,
      GetTriggerUnit(),
      GetEventDamage() * lv_biU * f_azK(lv_biT),
      true,
      true,
      ATTACK_TYPE_CHAOS,
      DAMAGE_TYPE_NORMAL,
      null
    );
    f_aAl(lv_biT, GetEventDamage() * lv_biU * f_azK(lv_biT));
    f_aMp(
      null,
      S2S(I2S(f_aML(GetEventDamage() * lv_biU)) + "!"),
      255,
      0,
      0,
      GetUnitX(lv_biT),
      GetUnitY(lv_biT),
      0.077,
      0.0,
      3,
      12.5
    );
  }
  lv_biT = null;
  return false;
}
function f_biV() {
  var lv_biW = GetEventDamageSource();
  var lv_biX;
  if (
    GetInventoryIndexOfItemTypeBJ(lv_biW, "shcw") +
      GetInventoryIndexOfItemTypeBJ(lv_biW, "shtm") >
    0
  ) {
    if (
      (GetTimeOfDay() > 18 && GetTimeOfDay() < 0.24) ||
      (GetTimeOfDay() > 0.0 && GetTimeOfDay() < 0.8)
    ) {
      if (GetRandomReal(0.0, 100) < 4 * f_azK(lv_biW)) {
        BlzEndUnitAbilityCooldown(lv_biW, "A03Q");
        BlzEndUnitAbilityCooldown(lv_biW, "A06R");
        BlzEndUnitAbilityCooldown(lv_biW, "A074");
        f_aLX(AddSpecialEffectTarget(gv_amI, lv_biW, "overhead"), 0.2);
      }
    } else {
      if (GetRandomReal(0.0, 100) < 2 * f_azK(lv_biW)) {
        BlzEndUnitAbilityCooldown(lv_biW, "A03Q");
        BlzEndUnitAbilityCooldown(lv_biW, "A06R");
        BlzEndUnitAbilityCooldown(lv_biW, "A074");
        f_aLX(AddSpecialEffectTarget(gv_amI, lv_biW, "overhead"), 0.2);
      }
    }
  }
  lv_biW = null;
  return false;
}
function f_biY() {
  var lv_biZ = GetEventDamageSource();
  var lv_bja = 1 * f_azM(lv_biZ);
  if (UnitHasItemOfTypeBJ(lv_biZ, "I061")) {
    if (
      IsUnitType(GetTriggerUnit(), UNIT_TYPE_HERO) == false &&
      IsUnitType(GetTriggerUnit(), UNIT_TYPE_GIANT) == false
    ) {
      lv_bja = lv_bja * 2.5;
    }
    if (GetRandomReal(0, 100) < 2 * lv_bja) {
      SetUnitState(
        GetTriggerUnit(),
        UNIT_STATE_LIFE,
        GetUnitState(GetTriggerUnit(), UNIT_STATE_LIFE) * (1 - 0.05 * lv_bja)
      );
    }
  }
  lv_biZ = null;
  return false;
}
function f_bjb() {
  var lv_bjc = GetEventDamageSource();
  if (UnitHasItemOfTypeBJ(lv_bjc, "I065")) {
    UnitDamageTarget(
      gv_amK,
      GetTriggerUnit(),
      GetWidgetLife(lv_bjc) * 0.035 * f_azK(lv_bjc),
      true,
      false,
      ATTACK_TYPE_HERO,
      DAMAGE_TYPE_NORMAL,
      null
    );
    f_aAl(lv_bjc, GetWidgetLife(lv_bjc) * 0.035 * f_azK(lv_bjc));
    f_aMp(
      null,
      S2S("+" + I2S(f_aML(GetWidgetLife(lv_bjc) * 0.035))),
      255,
      25,
      25,
      GetUnitX(lv_bjc) + 50,
      GetUnitY(lv_bjc),
      0.077,
      0.0,
      3,
      12.5
    );
  }
  lv_bjc = null;
  return false;
}
function f_bjd() {
  var lv_bje = GetTriggerUnit();
  if (GetUnitAbilityLevel(lv_bje, "Buhf") > 0) {
    SetWidgetLife(lv_bje, GetWidgetLife(lv_bje) - GetEventDamage() * 0.4);
  }
  lv_bje = null;
  return false;
}
function f_bjf() {
  var lv_bjg = 0;
  var lv_bjh;
  var lv_bji;
  var lv_bjj;
  var lv_bjk;
  do {
    if (lv_bjg > 7) {
      break;
    }
    if (f_aJX(lv_bjg, "I04U")) {
      if (GetRandomInt(1, 12) == 1) {
        lv_bjh = 1;
        do {
          if (lv_bjh > 12) {
            break;
          }
          if (lv_bjg < 8) {
            lv_bji = GetUnitX(gv_alv[lv_bjg]);
            lv_bjj = GetUnitY(gv_alv[lv_bjg]);
            lv_bjk = CreateUnit(Player(lv_bjg), "n00T", lv_bji, lv_bjj, 0.0);
          } else {
            lv_bji = GetUnitX(gv_alv[lv_bjg - 8]);
            lv_bjj = GetUnitY(gv_alv[lv_bjg - 8]);
            lv_bjk = CreateUnit(
              Player(lv_bjg - 8),
              "n00T",
              lv_bji,
              lv_bjj,
              0.0
            );
          }
          UnitApplyTimedLife(lv_bjk, "BTLF", I2R(GetRandomInt(20, 30)));
          lv_bji =
            lv_bji +
            GetRandomInt(200, 300) *
              Cos(lv_bjh * GetRandomInt(45, 75) * bj_DEGTORAD);
          lv_bjj =
            lv_bjj +
            GetRandomInt(200, 300) *
              Sin(lv_bjh * GetRandomInt(45, 75) * bj_DEGTORAD);
          IssuePointOrderById(lv_bjk, gv_aas, lv_bji, lv_bjj);
          lv_bjh = lv_bjh + 1;
        } while (true);
      }
    }
    if (f_aJX(lv_bjg, "I06C")) {
      if (GetRandomInt(1, 12) == 1) {
        lv_bjh = GetRandomInt(1, 3);
        if (lv_bjh == 1) {
          DestroyEffect(
            AddSpecialEffectTarget(
              "Objects\\Spawnmodels\\Demon\\InfernalMeteor\\InfernalMeteor.mdl",
              gv_alv[lv_bjg],
              "origin"
            )
          );
        }
        if (lv_bjh == 2) {
          DestroyEffect(
            AddSpecialEffectTarget(
              "Objects\\Spawnmodels\\Demon\\InfernalMeteor\\InfernalMeteor2.mdl",
              gv_alv[lv_bjg],
              "origin"
            )
          );
        }
        if (lv_bjh == 3) {
          DestroyEffect(
            AddSpecialEffectTarget(
              "Objects\\Spawnmodels\\Demon\\InfernalMeteor\\InfernalMeteor3.mdl",
              gv_alv[lv_bjg],
              "origin"
            )
          );
        }
      }
    }
    lv_bjg = lv_bjg + 1;
  } while (true);
  lv_bjk = null;
}
function f_bjl() {
  SetUnitPosition(gv_amM, GetUnitX(GetEnumUnit()), GetUnitY(GetEnumUnit()));
  IssueTargetOrderById(gv_amM, 852095, GetEnumUnit());
  UnitDamageTarget(
    gv_amM,
    GetEnumUnit(),
    gv_aaj,
    false,
    true,
    ATTACK_TYPE_CHAOS,
    DAMAGE_TYPE_UNIVERSAL,
    null
  );
}
function f_bjm() {
  return (
    GetWidgetLife(GetFilterUnit()) > 0.405 &&
    IsUnitEnemy(GetFilterUnit(), GetOwningPlayer(GetAttacker()))
  );
}
function f_bjn() {
  var lv_bjo = GetAttacker();
  var lv_bjp = 0;
  if (UnitHasItemOfTypeBJ(lv_bjo, "klmm")) {
    lv_bjp = 4;
  } else {
    if (UnitHasItemOfTypeBJ(lv_bjo, "rej2")) {
      lv_bjp = 6;
    }
  }
  if (GetRandomReal(0.0, 100) < lv_bjp * f_azM(lv_bjo)) {
    SetUnitOwner(gv_amM, GetOwningPlayer(lv_bjo), false);
    f_aLX(AddSpecialEffect(gv_amN, GetUnitX(lv_bjo), GetUnitY(lv_bjo)), 1);
    GroupClear(gv_abF);
    gv_aaj = 300 * f_azM(lv_bjo);
    GroupEnumUnitsInRange(
      gv_abF,
      GetUnitX(lv_bjo),
      GetUnitY(lv_bjo),
      200 * f_azM(lv_bjo),
      Condition(f_bjm)
    );
    ForGroup(gv_abF, f_bjl);
    f_aIJ(gv_abF);
  }
  lv_bjo = null;
  return false;
}
function f_bjq() {
  var lv_bjr = CreateTrigger();
  TriggerRegisterAnyUnitEventBJ(lv_bjr, EVENT_PLAYER_UNIT_ATTACKED);
  TriggerAddCondition(lv_bjr, Condition(f_bjn));
  gv_amM = CreateUnit(Player(0), gv_acw, 0.0, 0.0, 0.0);
  UnitAddAbility(gv_amM, "A08Y");
  Preload(gv_amN);
}
function f_bjs() {
  return (
    IsUnitInRange(GetFilterUnit(), bj_ghoul[26], 200) &&
    GetWidgetLife(GetFilterUnit()) > 0.405 &&
    !IsUnitInGroup(GetFilterUnit(), bj_randomSubGroupGroup) &&
    IsUnitEnemy(GetFilterUnit(), GetOwningPlayer(bj_ghoul[26]))
  );
}
function f_bjt() {
  var lv_bju = GetEventDamageSource();
  var lv_bjv = GetUnitFacing(lv_bju) * bj_DEGTORAD;
  var lv_bjw = GetUnitX(lv_bju) + 900 * Cos(lv_bjv);
  var lv_bjx = GetUnitY(lv_bju) + 900 * Sin(lv_bjv);
  var lv_bjy = f_aHP(
    CreateUnit(
      GetOwningPlayer(lv_bju),
      "h00I",
      GetUnitX(lv_bju),
      GetUnitY(lv_bju),
      GetUnitFacing(lv_bju)
    ),
    lv_bjw,
    lv_bjx,
    22,
    0.02
  );
  gv_avT[lv_bjy] = f_aIL();
  if (1 == 1) {
  } else {
    if (gv_aaT[GetPlayerId(GetOwningPlayer(lv_bju))] == GetTriggerUnit()) {
      gv_avU[lv_bjy] =
        (GetEventDamage() + GetHeroStr(lv_bju, true)) * 1.5 * f_azK(lv_bju);
      DisplayTimedTextToPlayer(GetOwningPlayer(lv_bju), 0, 0, 3, "atk-d");
    } else {
      gv_avU[lv_bjy] =
        (GetEventDamage() + GetHeroStr(lv_bju, true) * 0.2) *
        1.5 *
        f_azK(lv_bju);
      DisplayTimedTextToPlayer(GetOwningPlayer(lv_bju), 0, 0, 3, "reflect-d");
    }
  }
  lv_bju = null;
  return lv_bjy;
}
function f_bjz() {
  var lv_bjA = GetEventDamageSource();
  if (
    GetRandomReal(0.0, 100) < 9 * f_azM(lv_bjA) &&
    (UnitHasItemOfTypeBJ(lv_bjA, "flag") || UnitHasItemOfTypeBJ(lv_bjA, "sfog"))
  ) {
    f_aLX(
      AddSpecialEffect(
        "Abilities\\Spells\\Other\\HowlOfTerror\\HowlCaster.mdl",
        GetUnitX(lv_bjA),
        GetUnitY(lv_bjA)
      ),
      1
    );
    f_bjt();
  }
  lv_bjA = null;
  return false;
}
function f_bjB(lv_bjC) {
  var lv_bjD = f_aHX(
    CreateUnit(
      GetOwningPlayer(GetEventDamageSource()),
      "h00J",
      GetUnitX(GetTriggerUnit()),
      GetUnitY(GetTriggerUnit()),
      0.0
    ),
    GetUnitX(lv_bjC),
    GetUnitY(lv_bjC),
    15,
    0.02
  );
  gv_avV[lv_bjD] = lv_bjC;
  return lv_bjD;
}
function f_bjE() {
  return (
    !f_aMi(GetFilterUnit()) &&
    IsUnitEnemy(GetFilterUnit(), GetOwningPlayer(GetEventDamageSource())) &&
    GetWidgetLife(GetFilterUnit()) > 0.405 &&
    IsUnitInRange(GetFilterUnit(), GetTriggerUnit(), 600)
  );
}
function f_bjF() {
  var lv_bjG;
  var lv_bjH = GetPlayerId(GetOwningPlayer(GetEventDamageSource()));
  if (lv_bjH > 8) {
    return false;
  } else {
    if (GetEventDamageSource() == gv_amO) {
      return false;
    }
  }
  if (UnitHasItemOfTypeBJ(gv_alv[lv_bjH], "rde0")) {
    lv_bjG = GetRandomInt(0, 100);
  } else {
    if (UnitHasItemOfTypeBJ(gv_alv[lv_bjH], "rnsp")) {
      lv_bjG = GetRandomInt(0, 70);
    } else {
      return false;
    }
  }
  if (lv_bjG < 7.5 * gv_aan[lv_bjH]) {
    SetUnitPosition(
      gv_amO,
      GetUnitX(GetTriggerUnit()),
      GetUnitY(GetTriggerUnit())
    );
    SetUnitOwner(gv_amO, Player(lv_bjH), false);
    IssueTargetOrderById(gv_amO, 852226, GetTriggerUnit());
    GroupClear(gv_abF);
    GroupEnumUnitsInRange(
      gv_abF,
      GetUnitX(GetTriggerUnit()),
      GetUnitY(GetTriggerUnit()),
      700,
      Condition(f_bjE)
    );
    bj_groupRandomConsidered = 0;
    bj_groupRandomCurrentPick = null;
    ForGroup(gv_abF, GroupPickRandomUnitEnum);
    if (bj_groupRandomCurrentPick != null) {
      f_bjB(bj_groupRandomCurrentPick);
    }
    f_aIJ(gv_abF);
  }
  return false;
}
function f_bjI() {
  var lv_bjJ = LoadInteger(gv_abY, 0, GetHandleId(GetExpiredTimer()));
  gv_alu[gv_awb.getInt(lv_bjJ)] =
    gv_alu[gv_awb.getInt(lv_bjJ)] - gv_avZ[lv_bjJ];
  gv_alu[gv_awb.getInt(lv_bjJ) + 8] =
    gv_alu[gv_awb.getInt(lv_bjJ) + 8] - gv_awa[lv_bjJ];
  f_aJk(GetExpiredTimer());
  f_aDb(lv_bjJ);
}
function f_bjK() {
  return GetSpellAbilityId() == "A08Z";
}
function f_bjL() {
  var lv_bjM = f_aCZ();
  var lv_bjN = f_aJj();
  gv_awb[lv_bjM] = GetPlayerId(GetOwningPlayer(GetTriggerUnit()));
  gv_avZ[lv_bjM] =
    gv_alu[gv_awb.getInt(lv_bjM)] * 0.4 * gv_aan[gv_awb.getInt(lv_bjM)];
  gv_awa[lv_bjM] =
    gv_alu[gv_awb.getInt(lv_bjM) + 8] * 0.4 * gv_aan[gv_awb.getInt(lv_bjM)];
  gv_alu[gv_awb.getInt(lv_bjM)] =
    gv_alu[gv_awb.getInt(lv_bjM)] + gv_avZ[lv_bjM];
  gv_alu[gv_awb.getInt(lv_bjM) + 8] =
    gv_alu[gv_awb.getInt(lv_bjM) + 8] + gv_awa[lv_bjM];
  SaveInteger(gv_abY, 0, GetHandleId(lv_bjN), lv_bjM);
  TimerStart(lv_bjN, 30 * gv_aan[gv_awb.getInt(lv_bjM)], false, f_bjI);
  lv_bjN = null;
}
function f_bjO() {
  return GetIssuedOrderId() > 852001 && GetIssuedOrderId() < 852008;
}
function f_bjP() {
  var lv_bjQ = GetItemCharges(GetOrderTargetItem());
  var lv_bjR = GetIssuedOrderId() - 852002;
  var lv_bjS = GetOrderedUnit();
  var lv_bjT;
  if (GetOrderTargetItem() == UnitItemInSlot(lv_bjS, lv_bjR)) {
    if (lv_bjQ > 1) {
      lv_bjQ = R2I(lv_bjQ / 2);
      SetItemCharges(
        GetOrderTargetItem(),
        GetItemCharges(GetOrderTargetItem()) - lv_bjQ
      );
      gv_alx[380 + GetPlayerId(GetOwningPlayer(lv_bjS))] = 1;
      lv_bjT = UnitAddItemByIdSwapped(
        GetItemTypeId(GetOrderTargetItem()),
        lv_bjS
      );
      SetItemPlayer(lv_bjT, GetOwningPlayer(lv_bjS), false);
      gv_alx[380 + GetPlayerId(GetOwningPlayer(lv_bjS))] = 0;
      SetItemCharges(lv_bjT, lv_bjQ);
    }
  } else {
    if (
      lv_bjQ > 0 &&
      GetItemTypeId(GetOrderTargetItem()) ==
        GetItemTypeId(UnitItemInSlot(lv_bjS, lv_bjR))
    ) {
      lv_bjQ =
        GetItemCharges(GetOrderTargetItem()) +
        GetItemCharges(UnitItemInSlot(lv_bjS, lv_bjR));
      if (lv_bjQ < 8) {
        SetItemCharges(GetOrderTargetItem(), lv_bjQ);
        RemoveItem(UnitItemInSlot(lv_bjS, lv_bjR));
      } else {
        SetItemCharges(GetOrderTargetItem(), 7);
        SetItemCharges(UnitItemInSlot(lv_bjS, lv_bjR), lv_bjQ - 7);
      }
    }
  }
  lv_bjS = null;
  lv_bjT = null;
}
function f_bjU() {
  var lv_bjV = GetExpiredTimer();
  var lv_bjW = LoadInteger(gv_abY, 0, GetHandleId(lv_bjV));
  var lv_bjX = CreateItem(
    gv_alx.getInt(lv_bjW + 160),
    GetUnitX(gv_alv[lv_bjW]),
    GetUnitY(gv_alv[lv_bjW])
  );
  DisplayTextToPlayer(
    GetOwningPlayer(gv_alv[lv_bjW]),
    0,
    0,
    "|cffffcc00It's a success!"
  );
  PauseUnit(gv_alv[lv_bjW], false);
  SetItemPlayer(lv_bjX, Player(lv_bjW), false);
  UnitAddItem(gv_alv[lv_bjW], lv_bjX);
  SetItemUserData(lv_bjX, lv_bjW + 1);
  f_aJk(lv_bjV);
  lv_bjV = null;
  lv_bjX = null;
}
function f_bjY() {
  var lv_bjZ = GetOwningPlayer(GetTriggerUnit());
  var lv_bka = GetPlayerId(lv_bjZ);
  var lv_bkb = [];
  var lv_bkc =
    S2I(SubString(GetItemName(GetManipulatedItem()), 3, 6)) * 34 + 966;
  var lv_bkd = 0;
  var lv_bke = 0;
  var lv_bkf = gv_alx.getInt(lv_bkc + 30);
  var lv_bkg = true;
  var lv_bkh = false;
  var lv_bki;
  var lv_bkj = 0;
  var lv_bkk = false;
  var lv_bkl = 0;
  var lv_bkm = [];
  var lv_bkn = [];
  lv_bkb[1] = gv_alv[lv_bka];
  lv_bkb[2] = gv_alv[8 + lv_bka];
  lv_bkb[3] = gv_alv[40 + lv_bka];
  do {
    if (lv_bke == lv_bkf || lv_bkg == false) {
      break;
    }
    lv_bkj = gv_alx.getInt(lv_bkc + lv_bke);
    lv_bkk = gv_alx.getInt(lv_bkc + lv_bke + 10) == 1;
    lv_bkl = gv_alx.getInt(lv_bkc + lv_bke + 20);
    lv_bke = lv_bke + 1;
    lv_bkh = false;
    do {
      if (lv_bkd > 5 || lv_bkh) {
        break;
      }
      lv_bki = UnitItemInSlot(lv_bkb[1], lv_bkd);
      if (GetItemTypeId(lv_bki) == lv_bkj) {
        if (!lv_bkk) {
          lv_bkm[lv_bke] = lv_bki;
          lv_bkn[lv_bke] = lv_bkb[1];
          UnitRemoveItem(lv_bkb[1], lv_bki);
          lv_bkh = true;
          if (true) {
            break;
          }
        } else {
          if (GetItemCharges(lv_bki) >= lv_bkl) {
            lv_bkm[lv_bke] = lv_bki;
            lv_bkn[lv_bke] = lv_bkb[1];
            UnitRemoveItem(lv_bkb[1], lv_bki);
            lv_bkh = true;
            if (true) {
              break;
            }
          }
        }
      }
      lv_bkd = lv_bkd + 1;
    } while (true);
    lv_bkd = 0;
    do {
      if (lv_bkd > 5 || lv_bkh) {
        break;
      }
      lv_bki = UnitItemInSlot(lv_bkb[2], lv_bkd);
      if (GetItemTypeId(lv_bki) == lv_bkj) {
        if (!lv_bkk) {
          lv_bkm[lv_bke] = lv_bki;
          lv_bkn[lv_bke] = lv_bkb[2];
          UnitRemoveItem(lv_bkb[2], lv_bki);
          lv_bkh = true;
          if (true) {
            break;
          }
        } else {
          if (GetItemCharges(lv_bki) >= lv_bkl) {
            lv_bkm[lv_bke] = lv_bki;
            lv_bkn[lv_bke] = lv_bkb[2];
            UnitRemoveItem(lv_bkb[2], lv_bki);
            lv_bkh = true;
            if (true) {
              break;
            }
          }
        }
      }
      lv_bkd = lv_bkd + 1;
    } while (true);
    lv_bkd = 0;
    do {
      if (lv_bkd > 5 || lv_bkh) {
        break;
      }
      lv_bki = UnitItemInSlot(lv_bkb[3], lv_bkd);
      if (GetItemTypeId(lv_bki) == lv_bkj) {
        if (!lv_bkk) {
          lv_bkm[lv_bke] = lv_bki;
          lv_bkn[lv_bke] = lv_bkb[3];
          UnitRemoveItem(lv_bkb[3], lv_bki);
          lv_bkh = true;
          if (true) {
            break;
          }
        } else {
          if (GetItemCharges(lv_bki) >= lv_bkl) {
            lv_bkm[lv_bke] = lv_bki;
            lv_bkn[lv_bke] = lv_bkb[3];
            UnitRemoveItem(lv_bkb[3], lv_bki);
            lv_bkh = true;
            if (true) {
              break;
            }
          }
        }
      }
      lv_bkd = lv_bkd + 1;
    } while (true);
    lv_bkd = 0;
    lv_bkg = lv_bkh;
  } while (true);
  if (!lv_bkg) {
    f_aMm(lv_bjZ, "You are missing components.");
    lv_bke = 1;
    do {
      if (lv_bke > lv_bkf) {
        break;
      }
      UnitAddItem(lv_bkn[lv_bke], lv_bkm[lv_bke]);
      lv_bke = lv_bke + 1;
    } while (true);
    SetPlayerState(
      lv_bjZ,
      PLAYER_STATE_RESOURCE_GOLD,
      GetPlayerState(gv_alL, PLAYER_STATE_RESOURCE_GOLD) +
        LoadInteger(
          gv_abT,
          gv_acl,
          StringHash(GetItemName(GetManipulatedItem()))
        )
    );
    SetPlayerState(
      lv_bjZ,
      PLAYER_STATE_RESOURCE_LUMBER,
      GetPlayerState(gv_alL, PLAYER_STATE_RESOURCE_LUMBER) +
        LoadInteger(
          gv_abT,
          gv_acm,
          StringHash(GetItemName(GetManipulatedItem()))
        )
    );
  } else {
    lv_bke = 1;
    do {
      if (lv_bke > lv_bkf) {
        break;
      }
      if (GetItemType(lv_bkm[lv_bke]) != ITEM_TYPE_CHARGED) {
        RemoveItem(lv_bkm[lv_bke]);
      } else {
        lv_bkl = gv_alx.getInt(lv_bkc + lv_bke + 19);
        if (GetItemCharges(lv_bkm[lv_bke]) == lv_bkl) {
          RemoveItem(lv_bkm[lv_bke]);
        } else {
          SetItemCharges(
            lv_bkm[lv_bke],
            GetItemCharges(lv_bkm[lv_bke]) - lv_bkl
          );
          UnitAddItem(lv_bkn[lv_bke], lv_bkm[lv_bke]);
        }
      }
      lv_bke = lv_bke + 1;
    } while (true);
    PauseUnit(lv_bkb[1], true);
    gv_amP = CreateSound(
      "Buildings\\Human\\Blacksmith\\BlacksmithWhat1.wav",
      false,
      true,
      true,
      10,
      10,
      "SpellsEAX"
    );
    SetSoundChannel(gv_amP, 5);
    SetSoundDistances(gv_amP, 1000, 5000);
    SetSoundDistanceCutoff(gv_amP, 5000);
    SetSoundPosition(gv_amP, GetUnitX(lv_bkb[1]), GetUnitY(lv_bkb[1]), 0.0);
    SetSoundVolume(gv_amP, 127);
    StartSound(gv_amP);
    KillSoundWhenDone(gv_amP);
    gv_amQ = f_aJj();
    SaveInteger(gv_abY, 0, GetHandleId(gv_amQ), lv_bka);
    gv_alx[lv_bka + 160] = gv_alx.getInt(lv_bkc + 31);
    TimerStart(gv_amQ, 2, false, f_bjU);
  }
  lv_bke = 1;
  do {
    if (lv_bke > lv_bkf) {
      break;
    }
    lv_bkm[lv_bke] = null;
    lv_bkn[lv_bke] = null;
    lv_bke = lv_bke + 1;
  } while (true);
  lv_bjZ = null;
  lv_bkb[1] = null;
  lv_bkb[2] = null;
  lv_bkb[3] = null;
  lv_bki = null;
}
function f_bko() {
  var lv_bkp = GetItemName(GetManipulatedItem());
  var lv_bkq = SubString(lv_bkp, 6, 7);
  var lv_bkr = S2I(SubString(lv_bkp, 7, 10));
  var lv_bks = S2I(SubString(lv_bkp, 3, 6)) * 34 + 966;
  gv_alL = GetOwningPlayer(GetTriggerUnit());
  gv_alM = gv_alv[GetPlayerId(gv_alL)];
  if (GetItemType(GetManipulatedItem()) != ITEM_TYPE_PURCHASABLE) {
    return false;
  }
  if (lv_bkq != "A" && lv_bkq != SubString(GetUnitName(gv_alM), 2, 3)) {
    f_aMm(gv_alL, "You can't use this item.");
    SetPlayerState(
      gv_alL,
      PLAYER_STATE_RESOURCE_GOLD,
      GetPlayerState(gv_alL, PLAYER_STATE_RESOURCE_GOLD) +
        LoadInteger(
          gv_abT,
          gv_acl,
          StringHash(GetItemName(GetManipulatedItem()))
        )
    );
    SetPlayerState(
      gv_alL,
      PLAYER_STATE_RESOURCE_LUMBER,
      GetPlayerState(gv_alL, PLAYER_STATE_RESOURCE_LUMBER) +
        LoadInteger(
          gv_abT,
          gv_acm,
          StringHash(GetItemName(GetManipulatedItem()))
        )
    );
    return false;
  }
  if (GetHeroLevel(gv_alM) < lv_bkr) {
    f_aMm(gv_alL, "You are not experienced enough to use this item.");
    SetPlayerState(
      gv_alL,
      PLAYER_STATE_RESOURCE_GOLD,
      GetPlayerState(gv_alL, PLAYER_STATE_RESOURCE_GOLD) +
        LoadInteger(
          gv_abT,
          gv_acl,
          StringHash(GetItemName(GetManipulatedItem()))
        )
    );
    SetPlayerState(
      gv_alL,
      PLAYER_STATE_RESOURCE_LUMBER,
      GetPlayerState(gv_alL, PLAYER_STATE_RESOURCE_LUMBER) +
        LoadInteger(
          gv_abT,
          gv_acm,
          StringHash(GetItemName(GetManipulatedItem()))
        )
    );
    return false;
  }
  return true;
}
function f_bkt() {
  var lv_bku = CreateTrigger();
  TriggerRegisterAnyUnitEventBJ(lv_bku, EVENT_PLAYER_UNIT_PICKUP_ITEM);
  TriggerAddCondition(lv_bku, Condition(f_bko));
  TriggerAddAction(lv_bku, f_bjY);
}
function f_aQq() {
  gv_alx[1000] = "cnob";
  gv_alx[1001] = "wild";
  gv_alx[1011] = 1;
  gv_alx[1021] = 1;
  gv_alx[1002] = "srrc";
  gv_alx[1012] = 1;
  gv_alx[1022] = 1;
  gv_alx[1030] = 3;
  gv_alx[1031] = "rde1";
  gv_alx[1032] = 0;
  gv_alx[1033] = 0;
  gv_alx[1034] = "rat6";
  gv_alx[1035] = "fgsk";
  gv_alx[1045] = 1;
  gv_alx[1055] = 1;
  gv_alx[1036] = "srrc";
  gv_alx[1046] = 1;
  gv_alx[1056] = 1;
  gv_alx[1064] = 3;
  gv_alx[1065] = "rde2";
  gv_alx[1066] = 0;
  gv_alx[1067] = 0;
  gv_alx[1068] = "ratc";
  gv_alx[1069] = "fgdg";
  gv_alx[1079] = 1;
  gv_alx[1089] = 1;
  gv_alx[1070] = "srrc";
  gv_alx[1080] = 1;
  gv_alx[1090] = 1;
  gv_alx[1098] = 3;
  gv_alx[1099] = "rde3";
  gv_alx[1100] = 0;
  gv_alx[1101] = 0;
  gv_alx[1102] = "rde3";
  gv_alx[1103] = "wild";
  gv_alx[1113] = 1;
  gv_alx[1123] = 1;
  gv_alx[1104] = "srrc";
  gv_alx[1114] = 1;
  gv_alx[1124] = 1;
  gv_alx[1105] = "wswd";
  gv_alx[1115] = 1;
  gv_alx[1125] = 1;
  gv_alx[1132] = 4;
  gv_alx[1133] = "rlif";
  gv_alx[1134] = 0;
  gv_alx[1135] = 0;
  gv_alx[1136] = "rde1";
  gv_alx[1137] = "fgsk";
  gv_alx[1147] = 1;
  gv_alx[1157] = 1;
  gv_alx[1138] = "srrc";
  gv_alx[1148] = 1;
  gv_alx[1158] = 1;
  gv_alx[1139] = "wswd";
  gv_alx[1149] = 1;
  gv_alx[1159] = 1;
  gv_alx[1166] = 4;
  gv_alx[1167] = "ciri";
  gv_alx[1168] = 0;
  gv_alx[1169] = 0;
  gv_alx[1170] = "rde2";
  gv_alx[1171] = "fgdg";
  gv_alx[1181] = 1;
  gv_alx[1191] = 1;
  gv_alx[1172] = "srrc";
  gv_alx[1182] = 1;
  gv_alx[1192] = 1;
  gv_alx[1173] = "wswd";
  gv_alx[1183] = 1;
  gv_alx[1193] = 1;
  gv_alx[1200] = 4;
  gv_alx[1201] = "brac";
  gv_alx[1202] = 0;
  gv_alx[1203] = 0;
  gv_alx[1204] = "rlif";
  gv_alx[1205] = "wild";
  gv_alx[1215] = 1;
  gv_alx[1225] = 1;
  gv_alx[1206] = "fgsk";
  gv_alx[1216] = 1;
  gv_alx[1226] = 1;
  gv_alx[1207] = "srrc";
  gv_alx[1217] = 1;
  gv_alx[1227] = 1;
  gv_alx[1208] = "wswd";
  gv_alx[1218] = 1;
  gv_alx[1228] = 1;
  gv_alx[1209] = "fgrg";
  gv_alx[1219] = 1;
  gv_alx[1229] = 1;
  gv_alx[1234] = 6;
  gv_alx[1235] = "sbch";
  gv_alx[1236] = 0;
  gv_alx[1237] = 0;
  gv_alx[1238] = "ciri";
  gv_alx[1239] = "fgdg";
  gv_alx[1249] = 1;
  gv_alx[1259] = 1;
  gv_alx[1240] = "fgsk";
  gv_alx[1250] = 1;
  gv_alx[1260] = 1;
  gv_alx[1241] = "srrc";
  gv_alx[1251] = 1;
  gv_alx[1261] = 1;
  gv_alx[1242] = "wswd";
  gv_alx[1252] = 1;
  gv_alx[1262] = 1;
  gv_alx[1243] = "fgrg";
  gv_alx[1253] = 1;
  gv_alx[1263] = 1;
  gv_alx[1268] = 6;
  gv_alx[1269] = "rag1";
  gv_alx[1270] = 0;
  gv_alx[1271] = 0;
  gv_alx[1272] = "brac";
  gv_alx[1273] = "fgdg";
  gv_alx[1283] = 1;
  gv_alx[1293] = 1;
  gv_alx[1274] = "wild";
  gv_alx[1284] = 1;
  gv_alx[1294] = 1;
  gv_alx[1275] = "srrc";
  gv_alx[1285] = 1;
  gv_alx[1295] = 1;
  gv_alx[1276] = "wswd";
  gv_alx[1286] = 1;
  gv_alx[1296] = 1;
  gv_alx[1277] = "fgrg";
  gv_alx[1287] = 1;
  gv_alx[1297] = 1;
  gv_alx[1302] = 6;
  gv_alx[1303] = "rwiz";
  gv_alx[1304] = 0;
  gv_alx[1305] = 0;
  gv_alx[1306] = "hcun";
  gv_alx[1307] = "fgdg";
  gv_alx[1317] = 1;
  gv_alx[1327] = 1;
  gv_alx[1308] = "srrc";
  gv_alx[1318] = 1;
  gv_alx[1328] = 1;
  gv_alx[1336] = 3;
  gv_alx[1337] = "evtl";
  gv_alx[1338] = 0;
  gv_alx[1339] = 0;
  gv_alx[1340] = "gcel";
  gv_alx[1341] = "fgsk";
  gv_alx[1351] = 1;
  gv_alx[1361] = 1;
  gv_alx[1342] = "srrc";
  gv_alx[1352] = 1;
  gv_alx[1362] = 1;
  gv_alx[1370] = 3;
  gv_alx[1371] = "ssil";
  gv_alx[1372] = 0;
  gv_alx[1373] = 0;
  gv_alx[1374] = "gcel";
  gv_alx[1375] = "wild";
  gv_alx[1385] = 1;
  gv_alx[1395] = 1;
  gv_alx[1376] = "srrc";
  gv_alx[1386] = 1;
  gv_alx[1396] = 1;
  gv_alx[1404] = 3;
  gv_alx[1405] = "stel";
  gv_alx[1406] = 0;
  gv_alx[1407] = 0;
  gv_alx[1408] = "stel";
  gv_alx[1409] = "wild";
  gv_alx[1419] = 1;
  gv_alx[1429] = 1;
  gv_alx[1410] = "srrc";
  gv_alx[1420] = 1;
  gv_alx[1430] = 1;
  gv_alx[1411] = "wswd";
  gv_alx[1421] = 1;
  gv_alx[1431] = 1;
  gv_alx[1438] = 4;
  gv_alx[1439] = "lhst";
  gv_alx[1440] = 0;
  gv_alx[1441] = 0;
  gv_alx[1442] = "ssil";
  gv_alx[1443] = "fgsk";
  gv_alx[1453] = 1;
  gv_alx[1463] = 1;
  gv_alx[1444] = "srrc";
  gv_alx[1454] = 1;
  gv_alx[1464] = 1;
  gv_alx[1445] = "wswd";
  gv_alx[1455] = 1;
  gv_alx[1465] = 1;
  gv_alx[1472] = 4;
  gv_alx[1473] = "ward";
  gv_alx[1474] = 0;
  gv_alx[1475] = 0;
  gv_alx[1476] = "evtl";
  gv_alx[1477] = "fgsk";
  gv_alx[1487] = 1;
  gv_alx[1497] = 1;
  gv_alx[1478] = "srrc";
  gv_alx[1488] = 1;
  gv_alx[1498] = 1;
  gv_alx[1479] = "wswd";
  gv_alx[1489] = 1;
  gv_alx[1499] = 1;
  gv_alx[1506] = 4;
  gv_alx[1507] = "I000";
  gv_alx[1508] = 0;
  gv_alx[1509] = 0;
  gv_alx[1510] = "I000";
  gv_alx[1511] = "wild";
  gv_alx[1521] = 1;
  gv_alx[1531] = 1;
  gv_alx[1512] = "fgdg";
  gv_alx[1522] = 1;
  gv_alx[1532] = 1;
  gv_alx[1513] = "srrc";
  gv_alx[1523] = 1;
  gv_alx[1533] = 1;
  gv_alx[1514] = "wswd";
  gv_alx[1524] = 1;
  gv_alx[1534] = 1;
  gv_alx[1515] = "fgrg";
  gv_alx[1525] = 1;
  gv_alx[1535] = 1;
  gv_alx[1540] = 6;
  gv_alx[1541] = "I001";
  gv_alx[1542] = 0;
  gv_alx[1543] = 0;
  gv_alx[1544] = "ward";
  gv_alx[1545] = "fgsk";
  gv_alx[1555] = 1;
  gv_alx[1565] = 1;
  gv_alx[1546] = "fgdg";
  gv_alx[1556] = 1;
  gv_alx[1566] = 1;
  gv_alx[1547] = "srrc";
  gv_alx[1557] = 1;
  gv_alx[1567] = 1;
  gv_alx[1548] = "wswd";
  gv_alx[1558] = 1;
  gv_alx[1568] = 1;
  gv_alx[1549] = "fgrg";
  gv_alx[1559] = 1;
  gv_alx[1569] = 1;
  gv_alx[1574] = 6;
  gv_alx[1575] = "I002";
  gv_alx[1576] = 0;
  gv_alx[1577] = 0;
  gv_alx[1578] = "lhst";
  gv_alx[1579] = "fgsk";
  gv_alx[1589] = 1;
  gv_alx[1599] = 1;
  gv_alx[1580] = "wild";
  gv_alx[1590] = 1;
  gv_alx[1600] = 1;
  gv_alx[1581] = "srrc";
  gv_alx[1591] = 1;
  gv_alx[1601] = 1;
  gv_alx[1582] = "wswd";
  gv_alx[1592] = 1;
  gv_alx[1602] = 1;
  gv_alx[1583] = "fgrg";
  gv_alx[1593] = 1;
  gv_alx[1603] = 1;
  gv_alx[1608] = 6;
  gv_alx[1609] = "I003";
  gv_alx[1610] = 0;
  gv_alx[1611] = 0;
  gv_alx[1612] = "wild";
  gv_alx[1622] = 1;
  gv_alx[1632] = 1;
  gv_alx[1613] = "srrc";
  gv_alx[1623] = 1;
  gv_alx[1633] = 1;
  gv_alx[1614] = "pmna";
  gv_alx[1642] = 3;
  gv_alx[1643] = "I004";
  gv_alx[1644] = 0;
  gv_alx[1645] = 0;
  gv_alx[1646] = "fgsk";
  gv_alx[1656] = 1;
  gv_alx[1666] = 1;
  gv_alx[1647] = "srrc";
  gv_alx[1657] = 1;
  gv_alx[1667] = 1;
  gv_alx[1648] = "penr";
  gv_alx[1676] = 3;
  gv_alx[1677] = "I005";
  gv_alx[1678] = 0;
  gv_alx[1679] = 0;
  gv_alx[1680] = "fgdg";
  gv_alx[1690] = 1;
  gv_alx[1700] = 1;
  gv_alx[1681] = "srrc";
  gv_alx[1691] = 1;
  gv_alx[1701] = 1;
  gv_alx[1682] = "prvt";
  gv_alx[1710] = 3;
  gv_alx[1711] = "I006";
  gv_alx[1712] = 0;
  gv_alx[1713] = 0;
  gv_alx[1714] = "wild";
  gv_alx[1724] = 1;
  gv_alx[1734] = 1;
  gv_alx[1715] = "srrc";
  gv_alx[1725] = 1;
  gv_alx[1735] = 1;
  gv_alx[1716] = "wswd";
  gv_alx[1726] = 1;
  gv_alx[1736] = 1;
  gv_alx[1717] = "I004";
  gv_alx[1744] = 4;
  gv_alx[1745] = "I007";
  gv_alx[1746] = 0;
  gv_alx[1747] = 0;
  gv_alx[1748] = "fgsk";
  gv_alx[1758] = 1;
  gv_alx[1768] = 1;
  gv_alx[1749] = "srrc";
  gv_alx[1759] = 1;
  gv_alx[1769] = 1;
  gv_alx[1750] = "wswd";
  gv_alx[1760] = 1;
  gv_alx[1770] = 1;
  gv_alx[1751] = "I006";
  gv_alx[1778] = 4;
  gv_alx[1779] = "I008";
  gv_alx[1780] = 0;
  gv_alx[1781] = 0;
  gv_alx[1782] = "fgdg";
  gv_alx[1792] = 1;
  gv_alx[1802] = 1;
  gv_alx[1783] = "srrc";
  gv_alx[1793] = 1;
  gv_alx[1803] = 1;
  gv_alx[1784] = "wswd";
  gv_alx[1794] = 1;
  gv_alx[1804] = 1;
  gv_alx[1785] = "I005";
  gv_alx[1812] = 4;
  gv_alx[1813] = "I009";
  gv_alx[1814] = 0;
  gv_alx[1815] = 0;
  gv_alx[1816] = "wild";
  gv_alx[1820] = 1;
  gv_alx[1836] = 1;
  gv_alx[1817] = "fgsk";
  gv_alx[1827] = 1;
  gv_alx[1837] = 1;
  gv_alx[1818] = "srrc";
  gv_alx[1828] = 1;
  gv_alx[1838] = 1;
  gv_alx[1819] = "wswd";
  gv_alx[1829] = 1;
  gv_alx[1839] = 1;
  gv_alx[1820] = "fgrg";
  gv_alx[1830] = 1;
  gv_alx[1840] = 1;
  gv_alx[1821] = "I007";
  gv_alx[1846] = 6;
  gv_alx[1847] = "I00A";
  gv_alx[1848] = 0;
  gv_alx[1849] = 0;
  gv_alx[1850] = "fgdg";
  gv_alx[1860] = 1;
  gv_alx[1870] = 1;
  gv_alx[1851] = "fgsk";
  gv_alx[1861] = 1;
  gv_alx[1871] = 1;
  gv_alx[1852] = "srrc";
  gv_alx[1862] = 1;
  gv_alx[1872] = 1;
  gv_alx[1853] = "wswd";
  gv_alx[1863] = 1;
  gv_alx[1873] = 1;
  gv_alx[1854] = "fgrg";
  gv_alx[1864] = 1;
  gv_alx[1874] = 1;
  gv_alx[1855] = "I008";
  gv_alx[1880] = 6;
  gv_alx[1881] = "I00B";
  gv_alx[1882] = 0;
  gv_alx[1883] = 0;
  gv_alx[1884] = "fgdg";
  gv_alx[1894] = 1;
  gv_alx[1904] = 1;
  gv_alx[1885] = "wild";
  gv_alx[1895] = 1;
  gv_alx[1905] = 1;
  gv_alx[1886] = "srrc";
  gv_alx[1896] = 1;
  gv_alx[1906] = 1;
  gv_alx[1887] = "wswd";
  gv_alx[1897] = 1;
  gv_alx[1907] = 1;
  gv_alx[1888] = "fgrg";
  gv_alx[1898] = 1;
  gv_alx[1908] = 1;
  gv_alx[1889] = "I009";
  gv_alx[1914] = 6;
  gv_alx[1915] = "I00C";
  gv_alx[1916] = 0;
  gv_alx[1917] = 0;
  gv_alx[1918] = "sbch";
  gv_alx[1919] = "sand";
  gv_alx[1929] = 1;
  gv_alx[1939] = 1;
  gv_alx[1920] = "totw";
  gv_alx[1930] = 1;
  gv_alx[1940] = 2;
  gv_alx[1921] = "will";
  gv_alx[1931] = 1;
  gv_alx[1941] = 1;
  gv_alx[1948] = 4;
  gv_alx[1949] = "I00D";
  gv_alx[1950] = 0;
  gv_alx[1951] = 0;
  gv_alx[1952] = "rag1";
  gv_alx[1953] = "hlst";
  gv_alx[1963] = 1;
  gv_alx[1973] = 1;
  gv_alx[1954] = "totw";
  gv_alx[1964] = 1;
  gv_alx[1974] = 2;
  gv_alx[1955] = "will";
  gv_alx[1965] = 1;
  gv_alx[1975] = 1;
  gv_alx[1982] = 4;
  gv_alx[1983] = "I00E";
  gv_alx[1984] = 0;
  gv_alx[1985] = 0;
  gv_alx[1986] = "rwiz";
  gv_alx[1987] = "sand";
  gv_alx[1997] = 1;
  gv_alx[2007] = 1;
  gv_alx[1988] = "totw";
  gv_alx[1998] = 1;
  gv_alx[2008] = 2;
  gv_alx[1989] = "will";
  gv_alx[1999] = 1;
  gv_alx[2009] = 1;
  gv_alx[2016] = 4;
  gv_alx[2017] = "I00F";
  gv_alx[2018] = 0;
  gv_alx[2019] = 0;
  gv_alx[2020] = "I00E";
  gv_alx[2021] = "sand";
  gv_alx[2031] = 1;
  gv_alx[2041] = 1;
  gv_alx[2022] = "whwd";
  gv_alx[2032] = 1;
  gv_alx[2042] = 1;
  gv_alx[2023] = "will";
  gv_alx[2033] = 1;
  gv_alx[2043] = 2;
  gv_alx[2024] = "wlsd";
  gv_alx[2034] = 1;
  gv_alx[2044] = 1;
  gv_alx[2050] = 5;
  gv_alx[2051] = "I00M";
  gv_alx[2052] = 0;
  gv_alx[2053] = 0;
  gv_alx[2054] = "I00D";
  gv_alx[2055] = "sand";
  gv_alx[2065] = 1;
  gv_alx[2075] = 1;
  gv_alx[2056] = "whwd";
  gv_alx[2066] = 1;
  gv_alx[2076] = 1;
  gv_alx[2057] = "will";
  gv_alx[2067] = 1;
  gv_alx[2077] = 2;
  gv_alx[2058] = "wlsd";
  gv_alx[2068] = 1;
  gv_alx[2078] = 1;
  gv_alx[2084] = 5;
  gv_alx[2085] = "I00N";
  gv_alx[2086] = 0;
  gv_alx[2087] = 0;
  gv_alx[2088] = "I00F";
  gv_alx[2089] = "hlst";
  gv_alx[2099] = 1;
  gv_alx[2109] = 1;
  gv_alx[2090] = "whwd";
  gv_alx[2100] = 1;
  gv_alx[2110] = 1;
  gv_alx[2091] = "will";
  gv_alx[2101] = 1;
  gv_alx[2111] = 2;
  gv_alx[2092] = "wlsd";
  gv_alx[2102] = 1;
  gv_alx[2112] = 1;
  gv_alx[2118] = 5;
  gv_alx[2119] = "I00O";
  gv_alx[2120] = 0;
  gv_alx[2121] = 0;
  gv_alx[2122] = "I00M";
  gv_alx[2123] = "sand";
  gv_alx[2133] = 1;
  gv_alx[2143] = 2;
  gv_alx[2124] = "whwd";
  gv_alx[2134] = 1;
  gv_alx[2144] = 1;
  gv_alx[2125] = "I01H";
  gv_alx[2135] = 1;
  gv_alx[2145] = 1;
  gv_alx[2126] = "wlsd";
  gv_alx[2136] = 1;
  gv_alx[2146] = 2;
  gv_alx[2127] = "woms";
  gv_alx[2137] = 1;
  gv_alx[2147] = 1;
  gv_alx[2152] = 6;
  gv_alx[2153] = "I00V";
  gv_alx[2154] = 0;
  gv_alx[2155] = 0;
  gv_alx[2156] = "I00O";
  gv_alx[2157] = "sand";
  gv_alx[2167] = 1;
  gv_alx[2177] = 2;
  gv_alx[2158] = "whwd";
  gv_alx[2168] = 1;
  gv_alx[2178] = 1;
  gv_alx[2159] = "I01H";
  gv_alx[2169] = 1;
  gv_alx[2179] = 1;
  gv_alx[2160] = "wlsd";
  gv_alx[2170] = 1;
  gv_alx[2180] = 2;
  gv_alx[2161] = "woms";
  gv_alx[2171] = 1;
  gv_alx[2181] = 1;
  gv_alx[2186] = 6;
  gv_alx[2187] = "I00W";
  gv_alx[2188] = 0;
  gv_alx[2189] = 0;
  gv_alx[2190] = "I00N";
  gv_alx[2191] = "sand";
  gv_alx[2201] = 1;
  gv_alx[2211] = 2;
  gv_alx[2192] = "whwd";
  gv_alx[2202] = 1;
  gv_alx[2212] = 1;
  gv_alx[2193] = "I01H";
  gv_alx[2203] = 1;
  gv_alx[2213] = 1;
  gv_alx[2194] = "wlsd";
  gv_alx[2204] = 1;
  gv_alx[2214] = 2;
  gv_alx[2195] = "woms";
  gv_alx[2205] = 1;
  gv_alx[2215] = 1;
  gv_alx[2220] = 6;
  gv_alx[2221] = "I00X";
  gv_alx[2222] = 0;
  gv_alx[2223] = 0;
  gv_alx[2224] = "I001";
  gv_alx[2225] = "rej3";
  gv_alx[2235] = 1;
  gv_alx[2245] = 1;
  gv_alx[2226] = "totw";
  gv_alx[2236] = 1;
  gv_alx[2246] = 2;
  gv_alx[2227] = "will";
  gv_alx[2237] = 1;
  gv_alx[2247] = 1;
  gv_alx[2254] = 4;
  gv_alx[2255] = "I00H";
  gv_alx[2256] = 0;
  gv_alx[2257] = 0;
  gv_alx[2258] = "I002";
  gv_alx[2259] = "sand";
  gv_alx[2269] = 1;
  gv_alx[2279] = 1;
  gv_alx[2260] = "totw";
  gv_alx[2270] = 1;
  gv_alx[2280] = 2;
  gv_alx[2261] = "will";
  gv_alx[2271] = 1;
  gv_alx[2281] = 1;
  gv_alx[2288] = 4;
  gv_alx[2289] = "I00G";
  gv_alx[2290] = 0;
  gv_alx[2291] = 0;
  gv_alx[2292] = "I003";
  gv_alx[2293] = "sres";
  gv_alx[2303] = 1;
  gv_alx[2313] = 1;
  gv_alx[2294] = "totw";
  gv_alx[2304] = 1;
  gv_alx[2314] = 2;
  gv_alx[2295] = "will";
  gv_alx[2305] = 1;
  gv_alx[2315] = 1;
  gv_alx[2322] = 4;
  gv_alx[2323] = "I00I";
  gv_alx[2324] = 0;
  gv_alx[2325] = 0;
  gv_alx[2326] = "I00G";
  gv_alx[2327] = "sand";
  gv_alx[2337] = 1;
  gv_alx[2347] = 1;
  gv_alx[2328] = "whwd";
  gv_alx[2338] = 1;
  gv_alx[2348] = 1;
  gv_alx[2329] = "will";
  gv_alx[2339] = 1;
  gv_alx[2349] = 2;
  gv_alx[2330] = "wlsd";
  gv_alx[2340] = 1;
  gv_alx[2350] = 1;
  gv_alx[2356] = 5;
  gv_alx[2357] = "I00P";
  gv_alx[2358] = 0;
  gv_alx[2359] = 0;
  gv_alx[2360] = "I00I";
  gv_alx[2361] = "sres";
  gv_alx[2371] = 1;
  gv_alx[2381] = 1;
  gv_alx[2362] = "whwd";
  gv_alx[2372] = 1;
  gv_alx[2382] = 1;
  gv_alx[2363] = "will";
  gv_alx[2373] = 1;
  gv_alx[2383] = 2;
  gv_alx[2364] = "wlsd";
  gv_alx[2374] = 1;
  gv_alx[2384] = 1;
  gv_alx[2390] = 5;
  gv_alx[2391] = "I00Q";
  gv_alx[2392] = 0;
  gv_alx[2393] = 0;
  gv_alx[2394] = "I00H";
  gv_alx[2395] = "sand";
  gv_alx[2405] = 1;
  gv_alx[2415] = 1;
  gv_alx[2396] = "whwd";
  gv_alx[2406] = 1;
  gv_alx[2416] = 1;
  gv_alx[2397] = "will";
  gv_alx[2407] = 1;
  gv_alx[2417] = 2;
  gv_alx[2398] = "wlsd";
  gv_alx[2408] = 1;
  gv_alx[2418] = 1;
  gv_alx[2424] = 5;
  gv_alx[2425] = "I00R";
  gv_alx[2426] = 0;
  gv_alx[2427] = 0;
  gv_alx[2428] = "I00P";
  gv_alx[2429] = "sand";
  gv_alx[2439] = 1;
  gv_alx[2449] = 1;
  gv_alx[2430] = "hlst";
  gv_alx[2440] = 1;
  gv_alx[2450] = 1;
  gv_alx[2431] = "whwd";
  gv_alx[2441] = 1;
  gv_alx[2451] = 1;
  gv_alx[2432] = "I01H";
  gv_alx[2442] = 1;
  gv_alx[2452] = 1;
  gv_alx[2433] = "wlsd";
  gv_alx[2443] = 1;
  gv_alx[2453] = 2;
  gv_alx[2434] = "woms";
  gv_alx[2444] = 1;
  gv_alx[2454] = 1;
  gv_alx[2458] = 7;
  gv_alx[2459] = "I00Y";
  gv_alx[2460] = 0;
  gv_alx[2461] = 0;
  gv_alx[2462] = "I00R";
  gv_alx[2463] = "sand";
  gv_alx[2473] = 1;
  gv_alx[2483] = 1;
  gv_alx[2464] = "sres";
  gv_alx[2474] = 1;
  gv_alx[2484] = 1;
  gv_alx[2465] = "whwd";
  gv_alx[2475] = 1;
  gv_alx[2485] = 1;
  gv_alx[2466] = "I01H";
  gv_alx[2476] = 1;
  gv_alx[2486] = 1;
  gv_alx[2467] = "wlsd";
  gv_alx[2477] = 1;
  gv_alx[2487] = 2;
  gv_alx[2468] = "woms";
  gv_alx[2478] = 1;
  gv_alx[2488] = 1;
  gv_alx[2492] = 7;
  gv_alx[2493] = "I00Z";
  gv_alx[2494] = 0;
  gv_alx[2495] = 0;
  gv_alx[2496] = "I00Q";
  gv_alx[2497] = "sand";
  gv_alx[2507] = 1;
  gv_alx[2517] = 2;
  gv_alx[2498] = "whwd";
  gv_alx[2508] = 1;
  gv_alx[2518] = 1;
  gv_alx[2499] = "I01H";
  gv_alx[2509] = 1;
  gv_alx[2519] = 1;
  gv_alx[2500] = "wlsd";
  gv_alx[2510] = 1;
  gv_alx[2520] = 2;
  gv_alx[2501] = "woms";
  gv_alx[2511] = 1;
  gv_alx[2521] = 1;
  gv_alx[2526] = 6;
  gv_alx[2527] = "I010";
  gv_alx[2528] = 0;
  gv_alx[2529] = 0;
  gv_alx[2530] = "I00A";
  gv_alx[2531] = "hlst";
  gv_alx[2541] = 1;
  gv_alx[2551] = 1;
  gv_alx[2532] = "totw";
  gv_alx[2542] = 1;
  gv_alx[2552] = 2;
  gv_alx[2533] = "will";
  gv_alx[2543] = 1;
  gv_alx[2553] = 1;
  gv_alx[2560] = 4;
  gv_alx[2561] = "I00J";
  gv_alx[2562] = 0;
  gv_alx[2563] = 0;
  gv_alx[2564] = "I00B";
  gv_alx[2565] = "rej3";
  gv_alx[2575] = 1;
  gv_alx[2585] = 1;
  gv_alx[2566] = "totw";
  gv_alx[2576] = 1;
  gv_alx[2586] = 2;
  gv_alx[2567] = "will";
  gv_alx[2577] = 1;
  gv_alx[2587] = 1;
  gv_alx[2594] = 4;
  gv_alx[2595] = "I00L";
  gv_alx[2596] = 0;
  gv_alx[2597] = 0;
  gv_alx[2598] = "I00C";
  gv_alx[2599] = "rej3";
  gv_alx[2609] = 1;
  gv_alx[2619] = 1;
  gv_alx[2600] = "totw";
  gv_alx[2610] = 1;
  gv_alx[2620] = 2;
  gv_alx[2601] = "will";
  gv_alx[2611] = 1;
  gv_alx[2621] = 1;
  gv_alx[2628] = 4;
  gv_alx[2629] = "I00K";
  gv_alx[2630] = 0;
  gv_alx[2631] = 0;
  gv_alx[2632] = "I00J";
  gv_alx[2633] = "hlst";
  gv_alx[2643] = 1;
  gv_alx[2653] = 1;
  gv_alx[2634] = "whwd";
  gv_alx[2644] = 1;
  gv_alx[2654] = 1;
  gv_alx[2635] = "will";
  gv_alx[2645] = 1;
  gv_alx[2655] = 2;
  gv_alx[2636] = "wlsd";
  gv_alx[2646] = 1;
  gv_alx[2656] = 1;
  gv_alx[2662] = 5;
  gv_alx[2663] = "I00S";
  gv_alx[2664] = 0;
  gv_alx[2665] = 0;
  gv_alx[2666] = "I00L";
  gv_alx[2667] = "rej3";
  gv_alx[2677] = 1;
  gv_alx[2687] = 1;
  gv_alx[2668] = "whwd";
  gv_alx[2678] = 1;
  gv_alx[2688] = 1;
  gv_alx[2669] = "will";
  gv_alx[2679] = 1;
  gv_alx[2689] = 2;
  gv_alx[2670] = "wlsd";
  gv_alx[2680] = 1;
  gv_alx[2690] = 1;
  gv_alx[2696] = 5;
  gv_alx[2697] = "I00T";
  gv_alx[2698] = 0;
  gv_alx[2699] = 0;
  gv_alx[2700] = "I00K";
  gv_alx[2701] = "hlst";
  gv_alx[2711] = 1;
  gv_alx[2721] = 1;
  gv_alx[2702] = "whwd";
  gv_alx[2712] = 1;
  gv_alx[2722] = 1;
  gv_alx[2703] = "will";
  gv_alx[2713] = 1;
  gv_alx[2723] = 2;
  gv_alx[2704] = "wlsd";
  gv_alx[2714] = 1;
  gv_alx[2724] = 1;
  gv_alx[2730] = 5;
  gv_alx[2731] = "I00U";
  gv_alx[2732] = 0;
  gv_alx[2733] = 0;
  gv_alx[2734] = "I00S";
  gv_alx[2735] = "hlst";
  gv_alx[2745] = 1;
  gv_alx[2755] = 1;
  gv_alx[2736] = "rej3";
  gv_alx[2746] = 1;
  gv_alx[2756] = 1;
  gv_alx[2737] = "whwd";
  gv_alx[2747] = 1;
  gv_alx[2757] = 1;
  gv_alx[2738] = "I01H";
  gv_alx[2748] = 1;
  gv_alx[2758] = 1;
  gv_alx[2739] = "wlsd";
  gv_alx[2749] = 1;
  gv_alx[2759] = 2;
  gv_alx[2740] = "woms";
  gv_alx[2750] = 1;
  gv_alx[2760] = 1;
  gv_alx[2764] = 7;
  gv_alx[2765] = "I011";
  gv_alx[2766] = 0;
  gv_alx[2767] = 0;
  gv_alx[2768] = "I00T";
  gv_alx[2769] = "rej3";
  gv_alx[2779] = 1;
  gv_alx[2789] = 2;
  gv_alx[2770] = "whwd";
  gv_alx[2780] = 1;
  gv_alx[2790] = 1;
  gv_alx[2771] = "I01H";
  gv_alx[2781] = 1;
  gv_alx[2791] = 1;
  gv_alx[2772] = "wlsd";
  gv_alx[2782] = 1;
  gv_alx[2792] = 2;
  gv_alx[2773] = "woms";
  gv_alx[2783] = 1;
  gv_alx[2793] = 1;
  gv_alx[2798] = 6;
  gv_alx[2799] = "I012";
  gv_alx[2800] = 0;
  gv_alx[2801] = 0;
  gv_alx[2802] = "I00U";
  gv_alx[2803] = "hlst";
  gv_alx[2813] = 1;
  gv_alx[2823] = 2;
  gv_alx[2804] = "whwd";
  gv_alx[2814] = 1;
  gv_alx[2824] = 1;
  gv_alx[2805] = "I01H";
  gv_alx[2815] = 1;
  gv_alx[2825] = 1;
  gv_alx[2806] = "wlsd";
  gv_alx[2816] = 1;
  gv_alx[2826] = 2;
  gv_alx[2807] = "woms";
  gv_alx[2817] = 1;
  gv_alx[2827] = 1;
  gv_alx[2832] = 6;
  gv_alx[2833] = "I013";
  gv_alx[2834] = 0;
  gv_alx[2835] = 0;
  gv_alx[2836] = "amrc";
  gv_alx[2837] = "bfhr";
  gv_alx[2838] = "I00A";
  gv_alx[2839] = "hlst";
  gv_alx[2849] = 1;
  gv_alx[2859] = 1;
  gv_alx[2840] = "shar";
  gv_alx[2850] = 1;
  gv_alx[2860] = 1;
  gv_alx[2841] = "whwd";
  gv_alx[2851] = 1;
  gv_alx[2861] = 1;
  gv_alx[2842] = "I01H";
  gv_alx[2852] = 1;
  gv_alx[2862] = 1;
  gv_alx[2843] = "I01C";
  gv_alx[2866] = 8;
  gv_alx[2867] = "tgxp";
  gv_alx[2868] = 0;
  gv_alx[2869] = 0;
  gv_alx[2870] = "arsh";
  gv_alx[2871] = "bfhr";
  gv_alx[2872] = "I00C";
  gv_alx[2873] = "rej3";
  gv_alx[2883] = 1;
  gv_alx[2893] = 1;
  gv_alx[2874] = "shar";
  gv_alx[2884] = 1;
  gv_alx[2894] = 1;
  gv_alx[2875] = "whwd";
  gv_alx[2885] = 1;
  gv_alx[2895] = 1;
  gv_alx[2876] = "I01H";
  gv_alx[2886] = 1;
  gv_alx[2896] = 1;
  gv_alx[2877] = "I01C";
  gv_alx[2900] = 8;
  gv_alx[2901] = "tmsc";
  gv_alx[2902] = 0;
  gv_alx[2903] = 0;
  gv_alx[2904] = "anfg";
  gv_alx[2905] = "asbl";
  gv_alx[2906] = "rag1";
  gv_alx[2907] = "sand";
  gv_alx[2917] = 1;
  gv_alx[2927] = 2;
  gv_alx[2908] = "whwd";
  gv_alx[2918] = 1;
  gv_alx[2928] = 1;
  gv_alx[2909] = "I01H";
  gv_alx[2919] = 1;
  gv_alx[2929] = 1;
  gv_alx[2910] = "I01C";
  gv_alx[2934] = 7;
  gv_alx[2935] = "tmmt";
  gv_alx[2936] = 0;
  gv_alx[2937] = 0;
  gv_alx[2938] = "axas";
  gv_alx[2939] = "blba";
  gv_alx[2940] = "I002";
  gv_alx[2941] = "sand";
  gv_alx[2951] = 1;
  gv_alx[2961] = 1;
  gv_alx[2942] = "shar";
  gv_alx[2952] = 1;
  gv_alx[2962] = 1;
  gv_alx[2943] = "whwd";
  gv_alx[2953] = 1;
  gv_alx[2963] = 1;
  gv_alx[2944] = "I01H";
  gv_alx[2954] = 1;
  gv_alx[2964] = 1;
  gv_alx[2945] = "I01C";
  gv_alx[2968] = 8;
  gv_alx[2969] = "uflg";
  gv_alx[2970] = 0;
  gv_alx[2971] = 0;
  gv_alx[2972] = "arsc";
  gv_alx[2973] = "blba";
  gv_alx[2974] = "I003";
  gv_alx[2975] = "shar";
  gv_alx[2985] = 1;
  gv_alx[2995] = 1;
  gv_alx[2976] = "sres";
  gv_alx[2986] = 1;
  gv_alx[2996] = 1;
  gv_alx[2977] = "whwd";
  gv_alx[2987] = 1;
  gv_alx[2997] = 1;
  gv_alx[2978] = "I01H";
  gv_alx[2988] = 1;
  gv_alx[2998] = 1;
  gv_alx[2979] = "I01C";
  gv_alx[3002] = 8;
  gv_alx[3003] = "vddl";
  gv_alx[3004] = 0;
  gv_alx[3005] = 0;
  gv_alx[3006] = "pams";
  gv_alx[3007] = "arsc";
  gv_alx[3008] = "sbch";
  gv_alx[3009] = "sand";
  gv_alx[3019] = 1;
  gv_alx[3029] = 1;
  gv_alx[3010] = "sres";
  gv_alx[3020] = 1;
  gv_alx[3030] = 1;
  gv_alx[3011] = "whwd";
  gv_alx[3021] = 1;
  gv_alx[3031] = 1;
  gv_alx[3012] = "I01H";
  gv_alx[3022] = 1;
  gv_alx[3032] = 1;
  gv_alx[3013] = "I01C";
  gv_alx[3036] = 8;
  gv_alx[3037] = "kybl";
  gv_alx[3038] = 0;
  gv_alx[3039] = 0;
  gv_alx[3040] = "btst";
  gv_alx[3041] = "asbl";
  gv_alx[3042] = "rwiz";
  gv_alx[3043] = "shar";
  gv_alx[3053] = 1;
  gv_alx[3063] = 1;
  gv_alx[3044] = "sand";
  gv_alx[3054] = 1;
  gv_alx[3064] = 1;
  gv_alx[3045] = "whwd";
  gv_alx[3055] = 1;
  gv_alx[3065] = 1;
  gv_alx[3046] = "I01H";
  gv_alx[3056] = 1;
  gv_alx[3066] = 1;
  gv_alx[3047] = "I01C";
  gv_alx[3070] = 8;
  gv_alx[3071] = "ches";
  gv_alx[3072] = 0;
  gv_alx[3073] = 0;
  gv_alx[3074] = "pams";
  gv_alx[3075] = "btst";
  gv_alx[3076] = "I001";
  gv_alx[3077] = "shar";
  gv_alx[3087] = 1;
  gv_alx[3097] = 1;
  gv_alx[3078] = "sres";
  gv_alx[3088] = 1;
  gv_alx[3098] = 1;
  gv_alx[3079] = "whwd";
  gv_alx[3089] = 1;
  gv_alx[3099] = 1;
  gv_alx[3080] = "I01H";
  gv_alx[3090] = 1;
  gv_alx[3100] = 1;
  gv_alx[3081] = "I01C";
  gv_alx[3104] = 8;
  gv_alx[3105] = "bzbe";
  gv_alx[3106] = 0;
  gv_alx[3107] = 0;
  gv_alx[3108] = "amrc";
  gv_alx[3109] = "arsh";
  gv_alx[3110] = "I00B";
  gv_alx[3111] = "hlst";
  gv_alx[3121] = 1;
  gv_alx[3131] = 1;
  gv_alx[3112] = "sand";
  gv_alx[3122] = 1;
  gv_alx[3132] = 1;
  gv_alx[3113] = "whwd";
  gv_alx[3123] = 1;
  gv_alx[3133] = 1;
  gv_alx[3114] = "I01H";
  gv_alx[3124] = 1;
  gv_alx[3134] = 1;
  gv_alx[3115] = "I01C";
  gv_alx[3138] = 8;
  gv_alx[3139] = "engs";
  gv_alx[3140] = 0;
  gv_alx[3141] = 0;
  gv_alx[3142] = "cosl";
  gv_alx[3143] = "I00P";
  gv_alx[3144] = "I00I";
  gv_alx[3145] = "hlst";
  gv_alx[3155] = 1;
  gv_alx[3165] = 1;
  gv_alx[3146] = "sand";
  gv_alx[3156] = 1;
  gv_alx[3166] = 1;
  gv_alx[3147] = "sres";
  gv_alx[3157] = 1;
  gv_alx[3167] = 1;
  gv_alx[3148] = "whwd";
  gv_alx[3158] = 1;
  gv_alx[3168] = 1;
  gv_alx[3149] = "I01H";
  gv_alx[3159] = 1;
  gv_alx[3169] = 2;
  gv_alx[3150] = "I01C";
  gv_alx[3151] = "I01D";
  gv_alx[3161] = 1;
  gv_alx[3171] = 1;
  gv_alx[3172] = 10;
  gv_alx[3173] = "gopr";
  gv_alx[3174] = 0;
  gv_alx[3175] = 0;
  gv_alx[3176] = "cosl";
  gv_alx[3177] = "I00O";
  gv_alx[3178] = "I00G";
  gv_alx[3179] = "sand";
  gv_alx[3189] = 1;
  gv_alx[3199] = 3;
  gv_alx[3180] = "whwd";
  gv_alx[3190] = 1;
  gv_alx[3200] = 1;
  gv_alx[3181] = "I01H";
  gv_alx[3191] = 1;
  gv_alx[3201] = 2;
  gv_alx[3182] = "I01C";
  gv_alx[3183] = "I01D";
  gv_alx[3193] = 1;
  gv_alx[3203] = 1;
  gv_alx[3206] = 8;
  gv_alx[3207] = "azhr";
  gv_alx[3208] = 0;
  gv_alx[3209] = 0;
  gv_alx[3210] = "rat3";
  gv_alx[3211] = "I00N";
  gv_alx[3212] = "kybl";
  gv_alx[3213] = "sand";
  gv_alx[3223] = 1;
  gv_alx[3233] = 2;
  gv_alx[3214] = "shar";
  gv_alx[3224] = 1;
  gv_alx[3234] = 1;
  gv_alx[3215] = "whwd";
  gv_alx[3225] = 1;
  gv_alx[3235] = 1;
  gv_alx[3216] = "I01H";
  gv_alx[3226] = 1;
  gv_alx[3236] = 2;
  gv_alx[3217] = "I01C";
  gv_alx[3218] = "I01D";
  gv_alx[3228] = 1;
  gv_alx[3238] = 1;
  gv_alx[3240] = 9;
  gv_alx[3241] = "cnhn";
  gv_alx[3242] = 0;
  gv_alx[3243] = 0;
  gv_alx[3244] = "crdt";
  gv_alx[3245] = "I00M";
  gv_alx[3246] = "tmmt";
  gv_alx[3247] = "rej3";
  gv_alx[3257] = 1;
  gv_alx[3267] = 1;
  gv_alx[3248] = "sand";
  gv_alx[3258] = 1;
  gv_alx[3268] = 2;
  gv_alx[3249] = "whwd";
  gv_alx[3259] = 1;
  gv_alx[3269] = 1;
  gv_alx[3250] = "I01H";
  gv_alx[3260] = 1;
  gv_alx[3270] = 2;
  gv_alx[3251] = "I01C";
  gv_alx[3252] = "I01D";
  gv_alx[3262] = 1;
  gv_alx[3272] = 1;
  gv_alx[3274] = 9;
  gv_alx[3275] = "dkfw";
  gv_alx[3276] = 0;
  gv_alx[3277] = 0;
  gv_alx[3278] = "brag";
  gv_alx[3279] = "I00Q";
  gv_alx[3280] = "I00F";
  gv_alx[3281] = "hlst";
  gv_alx[3291] = 1;
  gv_alx[3301] = 1;
  gv_alx[3282] = "shar";
  gv_alx[3292] = 1;
  gv_alx[3302] = 1;
  gv_alx[3283] = "sand";
  gv_alx[3293] = 1;
  gv_alx[3303] = 1;
  gv_alx[3284] = "whwd";
  gv_alx[3294] = 1;
  gv_alx[3304] = 1;
  gv_alx[3285] = "I01H";
  gv_alx[3295] = 1;
  gv_alx[3305] = 2;
  gv_alx[3286] = "I01C";
  gv_alx[3287] = "I01D";
  gv_alx[3297] = 1;
  gv_alx[3307] = 1;
  gv_alx[3308] = 10;
  gv_alx[3309] = "k3m3";
  gv_alx[3310] = 0;
  gv_alx[3311] = 0;
  gv_alx[3312] = "crdt";
  gv_alx[3313] = "I00R";
  gv_alx[3314] = "kybl";
  gv_alx[3315] = "shar";
  gv_alx[3325] = 1;
  gv_alx[3335] = 1;
  gv_alx[3316] = "rej3";
  gv_alx[3326] = 1;
  gv_alx[3336] = 2;
  gv_alx[3317] = "whwd";
  gv_alx[3327] = 1;
  gv_alx[3337] = 1;
  gv_alx[3318] = "I01H";
  gv_alx[3328] = 1;
  gv_alx[3338] = 2;
  gv_alx[3319] = "I01C";
  gv_alx[3320] = "I01D";
  gv_alx[3330] = 1;
  gv_alx[3340] = 1;
  gv_alx[3342] = 9;
  gv_alx[3343] = "mgtk";
  gv_alx[3344] = 0;
  gv_alx[3345] = 0;
  gv_alx[3346] = "rat3";
  gv_alx[3347] = "I00S";
  gv_alx[3348] = "engs";
  gv_alx[3349] = "hlst";
  gv_alx[3359] = 1;
  gv_alx[3369] = 1;
  gv_alx[3350] = "rej3";
  gv_alx[3360] = 1;
  gv_alx[3370] = 2;
  gv_alx[3351] = "whwd";
  gv_alx[3361] = 1;
  gv_alx[3371] = 1;
  gv_alx[3352] = "I01H";
  gv_alx[3362] = 1;
  gv_alx[3372] = 2;
  gv_alx[3353] = "I01C";
  gv_alx[3354] = "I01D";
  gv_alx[3364] = 1;
  gv_alx[3374] = 1;
  gv_alx[3376] = 9;
  gv_alx[3377] = "mort";
  gv_alx[3378] = 0;
  gv_alx[3379] = 0;
  gv_alx[3380] = "brag";
  gv_alx[3381] = "I00S";
  gv_alx[3382] = "engs";
  gv_alx[3383] = "hlst";
  gv_alx[3393] = 1;
  gv_alx[3403] = 2;
  gv_alx[3384] = "shar";
  gv_alx[3394] = 1;
  gv_alx[3404] = 1;
  gv_alx[3385] = "whwd";
  gv_alx[3395] = 1;
  gv_alx[3405] = 1;
  gv_alx[3386] = "I01H";
  gv_alx[3396] = 1;
  gv_alx[3406] = 2;
  gv_alx[3387] = "I01C";
  gv_alx[3388] = "I01D";
  gv_alx[3398] = 1;
  gv_alx[3408] = 1;
  gv_alx[3410] = 9;
  gv_alx[3411] = "kymn";
  gv_alx[3412] = 0;
  gv_alx[3413] = 0;
  gv_alx[3414] = "stpg";
  gv_alx[3415] = "I00U";
  gv_alx[3416] = "I00K";
  gv_alx[3417] = "hlst";
  gv_alx[3427] = 1;
  gv_alx[3437] = 1;
  gv_alx[3418] = "shar";
  gv_alx[3428] = 1;
  gv_alx[3438] = 1;
  gv_alx[3419] = "rej3";
  gv_alx[3429] = 1;
  gv_alx[3439] = 1;
  gv_alx[3420] = "whwd";
  gv_alx[3430] = 1;
  gv_alx[3440] = 1;
  gv_alx[3421] = "I01H";
  gv_alx[3431] = 1;
  gv_alx[3441] = 2;
  gv_alx[3422] = "I01C";
  gv_alx[3423] = "I01D";
  gv_alx[3433] = 1;
  gv_alx[3443] = 1;
  gv_alx[3444] = 10;
  gv_alx[3445] = "k3m1";
  gv_alx[3446] = 0;
  gv_alx[3447] = 0;
  gv_alx[3448] = "stpg";
  gv_alx[3449] = "I00T";
  gv_alx[3450] = "tmsc";
  gv_alx[3451] = "shar";
  gv_alx[3461] = 1;
  gv_alx[3471] = 2;
  gv_alx[3452] = "rej3";
  gv_alx[3462] = 1;
  gv_alx[3472] = 1;
  gv_alx[3453] = "whwd";
  gv_alx[3463] = 1;
  gv_alx[3473] = 1;
  gv_alx[3454] = "I01H";
  gv_alx[3464] = 1;
  gv_alx[3474] = 2;
  gv_alx[3455] = "I01C";
  gv_alx[3456] = "I01D";
  gv_alx[3466] = 1;
  gv_alx[3476] = 1;
  gv_alx[3478] = 9;
  gv_alx[3479] = "jpnt";
  gv_alx[3480] = 0;
  gv_alx[3481] = 0;
  gv_alx[3482] = "drph";
  gv_alx[3483] = "I00Z";
  gv_alx[3484] = "I00W";
  gv_alx[3485] = "sand";
  gv_alx[3495] = 1;
  gv_alx[3505] = 4;
  gv_alx[3486] = "wlsd";
  gv_alx[3496] = 1;
  gv_alx[3506] = 3;
  gv_alx[3487] = "I01D";
  gv_alx[3497] = 1;
  gv_alx[3507] = 2;
  gv_alx[3488] = "whwd";
  gv_alx[3498] = 1;
  gv_alx[3508] = 2;
  gv_alx[3489] = "I01H";
  gv_alx[3499] = 1;
  gv_alx[3509] = 3;
  gv_alx[3512] = 8;
  gv_alx[3513] = "phlt";
  gv_alx[3514] = 0;
  gv_alx[3515] = 0;
  gv_alx[3516] = "drph";
  gv_alx[3517] = "I010";
  gv_alx[3518] = "I00Y";
  gv_alx[3519] = "sand";
  gv_alx[3529] = 1;
  gv_alx[3539] = 4;
  gv_alx[3520] = "whwd";
  gv_alx[3530] = 1;
  gv_alx[3540] = 2;
  gv_alx[3521] = "I01H";
  gv_alx[3531] = 1;
  gv_alx[3541] = 3;
  gv_alx[3522] = "wlsd";
  gv_alx[3532] = 1;
  gv_alx[3542] = 3;
  gv_alx[3523] = "I01D";
  gv_alx[3533] = 1;
  gv_alx[3543] = 2;
  gv_alx[3546] = 8;
  gv_alx[3547] = "sclp";
  gv_alx[3548] = 0;
  gv_alx[3549] = 0;
  gv_alx[3550] = "drph";
  gv_alx[3551] = "I00V";
  gv_alx[3552] = "I00W";
  gv_alx[3553] = "sand";
  gv_alx[3563] = 1;
  gv_alx[3573] = 4;
  gv_alx[3554] = "whwd";
  gv_alx[3564] = 1;
  gv_alx[3574] = 2;
  gv_alx[3555] = "I01H";
  gv_alx[3565] = 1;
  gv_alx[3575] = 3;
  gv_alx[3556] = "wlsd";
  gv_alx[3566] = 1;
  gv_alx[3576] = 3;
  gv_alx[3557] = "I01D";
  gv_alx[3567] = 1;
  gv_alx[3577] = 2;
  gv_alx[3580] = 8;
  gv_alx[3581] = "sorf";
  gv_alx[3582] = 0;
  gv_alx[3583] = 0;
  gv_alx[3584] = "shen";
  gv_alx[3585] = "I00Z";
  gv_alx[3586] = "I012";
  gv_alx[3587] = "rej3";
  gv_alx[3597] = 1;
  gv_alx[3607] = 4;
  gv_alx[3588] = "whwd";
  gv_alx[3598] = 1;
  gv_alx[3608] = 2;
  gv_alx[3589] = "I01H";
  gv_alx[3599] = 1;
  gv_alx[3609] = 3;
  gv_alx[3590] = "woms";
  gv_alx[3600] = 1;
  gv_alx[3610] = 3;
  gv_alx[3591] = "I01D";
  gv_alx[3601] = 1;
  gv_alx[3611] = 2;
  gv_alx[3614] = 8;
  gv_alx[3615] = "shwd";
  gv_alx[3616] = 0;
  gv_alx[3617] = 0;
  gv_alx[3618] = "shen";
  gv_alx[3619] = "I00Y";
  gv_alx[3620] = "I013";
  gv_alx[3621] = "rej3";
  gv_alx[3631] = 1;
  gv_alx[3641] = 4;
  gv_alx[3622] = "whwd";
  gv_alx[3632] = 1;
  gv_alx[3642] = 2;
  gv_alx[3623] = "I01H";
  gv_alx[3633] = 1;
  gv_alx[3643] = 3;
  gv_alx[3624] = "woms";
  gv_alx[3634] = 1;
  gv_alx[3644] = 3;
  gv_alx[3625] = "I01D";
  gv_alx[3635] = 1;
  gv_alx[3655] = 2;
  gv_alx[3648] = 8;
  gv_alx[3649] = "skrt";
  gv_alx[3650] = 0;
  gv_alx[3651] = 0;
  gv_alx[3652] = "shen";
  gv_alx[3653] = "I011";
  gv_alx[3654] = "I013";
  gv_alx[3655] = "rej3";
  gv_alx[3665] = 1;
  gv_alx[3675] = 4;
  gv_alx[3656] = "whwd";
  gv_alx[3666] = 1;
  gv_alx[3676] = 2;
  gv_alx[3657] = "I01H";
  gv_alx[3667] = 1;
  gv_alx[3677] = 3;
  gv_alx[3658] = "woms";
  gv_alx[3668] = 1;
  gv_alx[3678] = 3;
  gv_alx[3659] = "I01D";
  gv_alx[3669] = 1;
  gv_alx[3679] = 2;
  gv_alx[3682] = 9;
  gv_alx[3683] = "glsk";
  gv_alx[3684] = 0;
  gv_alx[3685] = 0;
  gv_alx[3686] = "envl";
  gv_alx[3687] = "I00Z";
  gv_alx[3688] = "I00X";
  gv_alx[3689] = "shar";
  gv_alx[3699] = 1;
  gv_alx[3709] = 4;
  gv_alx[3690] = "whwd";
  gv_alx[3700] = 1;
  gv_alx[3710] = 2;
  gv_alx[3691] = "I01H";
  gv_alx[3701] = 1;
  gv_alx[3711] = 3;
  gv_alx[3692] = "will";
  gv_alx[3702] = 1;
  gv_alx[3712] = 3;
  gv_alx[3693] = "I01D";
  gv_alx[3703] = 1;
  gv_alx[3713] = 2;
  gv_alx[3716] = 8;
  gv_alx[3717] = "kysn";
  gv_alx[3718] = 0;
  gv_alx[3719] = 0;
  gv_alx[3720] = "envl";
  gv_alx[3721] = "I010";
  gv_alx[3722] = "I00Y";
  gv_alx[3723] = "shar";
  gv_alx[3733] = 1;
  gv_alx[3743] = 4;
  gv_alx[3724] = "whwd";
  gv_alx[3734] = 1;
  gv_alx[3744] = 2;
  gv_alx[3725] = "I01H";
  gv_alx[3735] = 1;
  gv_alx[3745] = 3;
  gv_alx[3726] = "will";
  gv_alx[3736] = 1;
  gv_alx[3746] = 3;
  gv_alx[3727] = "I01D";
  gv_alx[3737] = 1;
  gv_alx[3747] = 2;
  gv_alx[3750] = 8;
  gv_alx[3751] = "sehr";
  gv_alx[3752] = 0;
  gv_alx[3753] = 0;
  gv_alx[3754] = "envl";
  gv_alx[3755] = "I00V";
  gv_alx[3756] = "I00X";
  gv_alx[3757] = "shar";
  gv_alx[3767] = 1;
  gv_alx[3777] = 4;
  gv_alx[3758] = "whwd";
  gv_alx[3768] = 1;
  gv_alx[3778] = 2;
  gv_alx[3759] = "I01H";
  gv_alx[3769] = 1;
  gv_alx[3779] = 3;
  gv_alx[3760] = "will";
  gv_alx[3770] = 1;
  gv_alx[3780] = 3;
  gv_alx[3761] = "I01D";
  gv_alx[3771] = 1;
  gv_alx[3781] = 2;
  gv_alx[3784] = 8;
  gv_alx[3785] = "thle";
  gv_alx[3786] = 0;
  gv_alx[3787] = 0;
  gv_alx[3788] = "rej3";
  gv_alx[3798] = 1;
  gv_alx[3808] = 3;
  gv_alx[3789] = "whwd";
  gv_alx[3799] = 1;
  gv_alx[3809] = 2;
  gv_alx[3790] = "I01H";
  gv_alx[3800] = 1;
  gv_alx[3810] = 2;
  gv_alx[3791] = "I01E";
  gv_alx[3818] = 4;
  gv_alx[3819] = "bzbf";
  gv_alx[3820] = 0;
  gv_alx[3821] = 0;
  gv_alx[3822] = "sand";
  gv_alx[3832] = 1;
  gv_alx[3842] = 3;
  gv_alx[3823] = "whwd";
  gv_alx[3833] = 1;
  gv_alx[3843] = 2;
  gv_alx[3824] = "I01H";
  gv_alx[3834] = 1;
  gv_alx[3844] = 2;
  gv_alx[3825] = "I01E";
  gv_alx[3852] = 4;
  gv_alx[3853] = "gmfr";
  gv_alx[3854] = 0;
  gv_alx[3855] = 0;
  gv_alx[3856] = "shar";
  gv_alx[3866] = 1;
  gv_alx[3876] = 3;
  gv_alx[3857] = "whwd";
  gv_alx[3867] = 1;
  gv_alx[3877] = 2;
  gv_alx[3858] = "I01H";
  gv_alx[3868] = 1;
  gv_alx[3878] = 2;
  gv_alx[3859] = "I01E";
  gv_alx[3886] = 4;
  gv_alx[3887] = "ledg";
  gv_alx[3888] = 0;
  gv_alx[3889] = 0;
  gv_alx[3890] = "sres";
  gv_alx[3900] = 1;
  gv_alx[3910] = 3;
  gv_alx[3891] = "whwd";
  gv_alx[3901] = 1;
  gv_alx[3911] = 2;
  gv_alx[3892] = "I01H";
  gv_alx[3902] = 1;
  gv_alx[3912] = 2;
  gv_alx[3893] = "I01E";
  gv_alx[3920] = 4;
  gv_alx[3921] = "kygh";
  gv_alx[3922] = 0;
  gv_alx[3923] = 0;
  gv_alx[3924] = "sand";
  gv_alx[3934] = 1;
  gv_alx[3944] = 5;
  gv_alx[3925] = "whwd";
  gv_alx[3935] = 1;
  gv_alx[3945] = 3;
  gv_alx[3926] = "I01H";
  gv_alx[3936] = 1;
  gv_alx[3946] = 3;
  gv_alx[3927] = "I01X";
  gv_alx[3954] = 4;
  gv_alx[3955] = "k3m2";
  gv_alx[3956] = 0;
  gv_alx[3957] = 0;
  gv_alx[3958] = "hlst";
  gv_alx[3968] = 1;
  gv_alx[3978] = 5;
  gv_alx[3959] = "whwd";
  gv_alx[3969] = 1;
  gv_alx[3979] = 3;
  gv_alx[3960] = "I01H";
  gv_alx[3970] = 1;
  gv_alx[3980] = 3;
  gv_alx[3961] = "I01X";
  gv_alx[3988] = 4;
  gv_alx[3989] = "dphe";
  gv_alx[3990] = 0;
  gv_alx[3991] = 0;
  gv_alx[3992] = "sand";
  gv_alx[4002] = 1;
  gv_alx[4012] = 5;
  gv_alx[3993] = "whwd";
  gv_alx[4003] = 1;
  gv_alx[4013] = 3;
  gv_alx[3994] = "I01H";
  gv_alx[4004] = 1;
  gv_alx[4014] = 4;
  gv_alx[3995] = "I01Y";
  gv_alx[4022] = 4;
  gv_alx[4023] = "dthb";
  gv_alx[4024] = 0;
  gv_alx[4025] = 0;
  gv_alx[4026] = "hlst";
  gv_alx[4036] = 1;
  gv_alx[4046] = 5;
  gv_alx[4027] = "whwd";
  gv_alx[4037] = 1;
  gv_alx[4047] = 3;
  gv_alx[4028] = "I01H";
  gv_alx[4038] = 1;
  gv_alx[4048] = 4;
  gv_alx[4029] = "I01Y";
  gv_alx[4056] = 4;
  gv_alx[4057] = "ktrm";
  gv_alx[4058] = 0;
  gv_alx[4059] = 0;
  gv_alx[4060] = "sand";
  gv_alx[4070] = 1;
  gv_alx[4080] = 5;
  gv_alx[4061] = "whwd";
  gv_alx[4071] = 1;
  gv_alx[4081] = 3;
  gv_alx[4062] = "I01H";
  gv_alx[4072] = 1;
  gv_alx[4082] = 5;
  gv_alx[4063] = "I01Z";
  gv_alx[4090] = 4;
  gv_alx[4091] = "wtlg";
  gv_alx[4092] = 0;
  gv_alx[4093] = 0;
  gv_alx[4094] = "hlst";
  gv_alx[4104] = 1;
  gv_alx[4114] = 5;
  gv_alx[4095] = "whwd";
  gv_alx[4105] = 1;
  gv_alx[4115] = 3;
  gv_alx[4096] = "I01H";
  gv_alx[4106] = 1;
  gv_alx[4116] = 5;
  gv_alx[4097] = "I01Z";
  gv_alx[4124] = 4;
  gv_alx[4125] = "wolg";
  gv_alx[4126] = 0;
  gv_alx[4127] = 0;
  gv_alx[4128] = "k3m2";
  gv_alx[4129] = "dthb";
  gv_alx[4130] = "wtlg";
  gv_alx[4131] = "sand";
  gv_alx[4141] = 1;
  gv_alx[4151] = 5;
  gv_alx[4132] = "whwd";
  gv_alx[4142] = 1;
  gv_alx[4152] = 5;
  gv_alx[4133] = "I01H";
  gv_alx[4143] = 1;
  gv_alx[4153] = 7;
  gv_alx[4158] = 6;
  gv_alx[4159] = "I014";
  gv_alx[4160] = 0;
  gv_alx[4161] = 0;
  gv_alx[4162] = "k3m2";
  gv_alx[4163] = "dthb";
  gv_alx[4164] = "wolg";
  gv_alx[4165] = "sand";
  gv_alx[4175] = 1;
  gv_alx[4185] = 4;
  gv_alx[4166] = "shar";
  gv_alx[4176] = 1;
  gv_alx[4186] = 1;
  gv_alx[4167] = "whwd";
  gv_alx[4177] = 1;
  gv_alx[4187] = 5;
  gv_alx[4168] = "I01H";
  gv_alx[4178] = 1;
  gv_alx[4188] = 7;
  gv_alx[4192] = 7;
  gv_alx[4193] = "I015";
  gv_alx[4194] = 0;
  gv_alx[4195] = 0;
  gv_alx[4196] = "k3m2";
  gv_alx[4197] = "ktrm";
  gv_alx[4198] = "wtlg";
  gv_alx[4199] = "sand";
  gv_alx[4209] = 1;
  gv_alx[4219] = 2;
  gv_alx[4200] = "hlst";
  gv_alx[4210] = 1;
  gv_alx[4220] = 1;
  gv_alx[4201] = "rej3";
  gv_alx[4211] = 1;
  gv_alx[4221] = 1;
  gv_alx[4202] = "shar";
  gv_alx[4212] = 1;
  gv_alx[4222] = 1;
  gv_alx[4203] = "whwd";
  gv_alx[4213] = 1;
  gv_alx[4223] = 5;
  gv_alx[4204] = "I01H";
  gv_alx[4214] = 1;
  gv_alx[4224] = 7;
  gv_alx[4226] = 9;
  gv_alx[4227] = "I016";
  gv_alx[4228] = 0;
  gv_alx[4229] = 0;
  gv_alx[4230] = "dphe";
  gv_alx[4231] = "dthb";
  gv_alx[4232] = "wtlg";
  gv_alx[4233] = "sand";
  gv_alx[4243] = 1;
  gv_alx[4253] = 3;
  gv_alx[4234] = "hlst";
  gv_alx[4244] = 1;
  gv_alx[4254] = 1;
  gv_alx[4235] = "rej3";
  gv_alx[4245] = 1;
  gv_alx[4255] = 1;
  gv_alx[4236] = "whwd";
  gv_alx[4246] = 1;
  gv_alx[4256] = 5;
  gv_alx[4237] = "I01H";
  gv_alx[4247] = 1;
  gv_alx[4257] = 7;
  gv_alx[4260] = 8;
  gv_alx[4261] = "I017";
  gv_alx[4262] = 0;
  gv_alx[4263] = 0;
  gv_alx[4264] = "dphe";
  gv_alx[4265] = "ktrm";
  gv_alx[4266] = "wolg";
  gv_alx[4267] = "hlst";
  gv_alx[4277] = 1;
  gv_alx[4287] = 5;
  gv_alx[4268] = "whwd";
  gv_alx[4278] = 1;
  gv_alx[4288] = 5;
  gv_alx[4269] = "I01H";
  gv_alx[4279] = 1;
  gv_alx[4289] = 7;
  gv_alx[4294] = 6;
  gv_alx[4295] = "I018";
  gv_alx[4296] = 0;
  gv_alx[4297] = 0;
  gv_alx[4298] = "dphe";
  gv_alx[4299] = "ktrm";
  gv_alx[4300] = "wtlg";
  gv_alx[4301] = "hlst";
  gv_alx[4311] = 1;
  gv_alx[4321] = 2;
  gv_alx[4302] = "shar";
  gv_alx[4312] = 1;
  gv_alx[4322] = 1;
  gv_alx[4303] = "rej3";
  gv_alx[4313] = 1;
  gv_alx[4323] = 2;
  gv_alx[4304] = "whwd";
  gv_alx[4314] = 1;
  gv_alx[4324] = 5;
  gv_alx[4305] = "I01H";
  gv_alx[4315] = 1;
  gv_alx[4325] = 7;
  gv_alx[4328] = 8;
  gv_alx[4329] = "I019";
  gv_alx[4330] = 0;
  gv_alx[4331] = 0;
  gv_alx[4332] = "dphe";
  gv_alx[4333] = "dthb";
  gv_alx[4334] = "wolg";
  gv_alx[4335] = "hlst";
  gv_alx[4345] = 1;
  gv_alx[4355] = 1;
  gv_alx[4336] = "shar";
  gv_alx[4346] = 1;
  gv_alx[4356] = 3;
  gv_alx[4337] = "rej3";
  gv_alx[4347] = 1;
  gv_alx[4357] = 1;
  gv_alx[4338] = "whwd";
  gv_alx[4348] = 1;
  gv_alx[4358] = 5;
  gv_alx[4339] = "I01H";
  gv_alx[4349] = 1;
  gv_alx[4359] = 7;
  gv_alx[4362] = 8;
  gv_alx[4363] = "I01A";
  gv_alx[4364] = 0;
  gv_alx[4365] = 0;
  gv_alx[4366] = "k3m2";
  gv_alx[4367] = "ktrm";
  gv_alx[4368] = "wolg";
  gv_alx[4369] = "hlst";
  gv_alx[4379] = 1;
  gv_alx[4389] = 2;
  gv_alx[4370] = "shar";
  gv_alx[4380] = 1;
  gv_alx[4390] = 1;
  gv_alx[4371] = "rej3";
  gv_alx[4381] = 1;
  gv_alx[4391] = 2;
  gv_alx[4372] = "whwd";
  gv_alx[4382] = 1;
  gv_alx[4392] = 5;
  gv_alx[4373] = "I01H";
  gv_alx[4383] = 1;
  gv_alx[4393] = 7;
  gv_alx[4396] = 8;
  gv_alx[4397] = "I01B";
  gv_alx[4398] = 0;
  gv_alx[4399] = 0;
  gv_alx[4400] = "wild";
  gv_alx[4410] = 1;
  gv_alx[4420] = 1;
  gv_alx[4401] = "fgsk";
  gv_alx[4411] = 1;
  gv_alx[4421] = 1;
  gv_alx[4402] = "fgdg";
  gv_alx[4412] = 1;
  gv_alx[4422] = 1;
  gv_alx[4403] = "whwd";
  gv_alx[4413] = 1;
  gv_alx[4423] = 1;
  gv_alx[4430] = 4;
  gv_alx[4431] = "gobm";
  gv_alx[4432] = 0;
  gv_alx[4433] = 0;
  gv_alx[4434] = "gvsm";
  gv_alx[4435] = "gobm";
  gv_alx[4436] = "gemt";
  gv_alx[4437] = "whwd";
  gv_alx[4447] = 1;
  gv_alx[4457] = 1;
  gv_alx[4438] = "I01I";
  gv_alx[4464] = 5;
  gv_alx[4465] = "tels";
  gv_alx[4466] = 0;
  gv_alx[4467] = 0;
  gv_alx[4468] = "tels";
  gv_alx[4469] = "whwd";
  gv_alx[4479] = 1;
  gv_alx[4489] = 2;
  gv_alx[4470] = "I01H";
  gv_alx[4480] = 1;
  gv_alx[4490] = 1;
  gv_alx[4471] = "I01V";
  gv_alx[4498] = 4;
  gv_alx[4499] = "rej4";
  gv_alx[4500] = 0;
  gv_alx[4501] = 0;
  gv_alx[4502] = "wild";
  gv_alx[4512] = 1;
  gv_alx[4522] = 1;
  gv_alx[4503] = "fgsk";
  gv_alx[4513] = 1;
  gv_alx[4523] = 1;
  gv_alx[4504] = "fgdg";
  gv_alx[4514] = 1;
  gv_alx[4524] = 1;
  gv_alx[4505] = "whwd";
  gv_alx[4515] = 1;
  gv_alx[4525] = 1;
  gv_alx[4532] = 4;
  gv_alx[4533] = "hbth";
  gv_alx[4534] = 0;
  gv_alx[4535] = 0;
  gv_alx[4536] = "rej6";
  gv_alx[4537] = "hbth";
  gv_alx[4538] = "grsl";
  gv_alx[4539] = "whwd";
  gv_alx[4549] = 1;
  gv_alx[4559] = 1;
  gv_alx[4540] = "I01J";
  gv_alx[4566] = 5;
  gv_alx[4567] = "sfog";
  gv_alx[4568] = 0;
  gv_alx[4569] = 0;
  gv_alx[4570] = "sfog";
  gv_alx[4571] = "whwd";
  gv_alx[4581] = 1;
  gv_alx[4591] = 2;
  gv_alx[4572] = "I01H";
  gv_alx[4582] = 1;
  gv_alx[4592] = 1;
  gv_alx[4573] = "I01V";
  gv_alx[4600] = 4;
  gv_alx[4601] = "flag";
  gv_alx[4602] = 0;
  gv_alx[4603] = 0;
  gv_alx[4604] = "wild";
  gv_alx[4614] = 1;
  gv_alx[4624] = 1;
  gv_alx[4605] = "fgsk";
  gv_alx[4615] = 1;
  gv_alx[4625] = 1;
  gv_alx[4606] = "fgdg";
  gv_alx[4616] = 1;
  gv_alx[4626] = 1;
  gv_alx[4607] = "whwd";
  gv_alx[4617] = 1;
  gv_alx[4627] = 1;
  gv_alx[4634] = 4;
  gv_alx[4635] = "jdrn";
  gv_alx[4636] = 0;
  gv_alx[4637] = 0;
  gv_alx[4638] = "jdrn";
  gv_alx[4639] = "iwbr";
  gv_alx[4640] = "kgal";
  gv_alx[4641] = "whwd";
  gv_alx[4651] = 1;
  gv_alx[4661] = 1;
  gv_alx[4642] = "I01K";
  gv_alx[4668] = 5;
  gv_alx[4669] = "klmm";
  gv_alx[4670] = 0;
  gv_alx[4671] = 0;
  gv_alx[4672] = "klmm";
  gv_alx[4673] = "whwd";
  gv_alx[4683] = 1;
  gv_alx[4693] = 2;
  gv_alx[4674] = "I01H";
  gv_alx[4684] = 1;
  gv_alx[4694] = 1;
  gv_alx[4675] = "I01V";
  gv_alx[4702] = 4;
  gv_alx[4703] = "rej2";
  gv_alx[4704] = 0;
  gv_alx[4705] = 0;
  gv_alx[4706] = "wild";
  gv_alx[4716] = 1;
  gv_alx[4726] = 1;
  gv_alx[4707] = "fgsk";
  gv_alx[4717] = 1;
  gv_alx[4727] = 1;
  gv_alx[4708] = "fgdg";
  gv_alx[4718] = 1;
  gv_alx[4728] = 1;
  gv_alx[4709] = "whwd";
  gv_alx[4719] = 1;
  gv_alx[4729] = 1;
  gv_alx[4736] = 4;
  gv_alx[4737] = "mlst";
  gv_alx[4738] = 0;
  gv_alx[4739] = 0;
  gv_alx[4740] = "lnrn";
  gv_alx[4741] = "mlst";
  gv_alx[4742] = "rej5";
  gv_alx[4743] = "whwd";
  gv_alx[4753] = 1;
  gv_alx[4763] = 1;
  gv_alx[4744] = "I01L";
  gv_alx[4770] = 5;
  gv_alx[4771] = "mnsf";
  gv_alx[4772] = 0;
  gv_alx[4773] = 0;
  gv_alx[4774] = "mnsf";
  gv_alx[4775] = "whwd";
  gv_alx[4785] = 1;
  gv_alx[4795] = 2;
  gv_alx[4776] = "I01H";
  gv_alx[4786] = 1;
  gv_alx[4796] = 1;
  gv_alx[4777] = "I01V";
  gv_alx[4804] = 4;
  gv_alx[4805] = "rej1";
  gv_alx[4806] = 0;
  gv_alx[4807] = 0;
  gv_alx[4808] = "wild";
  gv_alx[4818] = 1;
  gv_alx[4828] = 1;
  gv_alx[4809] = "fgsk";
  gv_alx[4819] = 1;
  gv_alx[4829] = 1;
  gv_alx[4810] = "fgdg";
  gv_alx[4820] = 1;
  gv_alx[4830] = 1;
  gv_alx[4811] = "whwd";
  gv_alx[4821] = 1;
  gv_alx[4831] = 1;
  gv_alx[4838] = 4;
  gv_alx[4839] = "lure";
  gv_alx[4840] = 0;
  gv_alx[4841] = 0;
  gv_alx[4842] = "lure";
  gv_alx[4843] = "nspi";
  gv_alx[4844] = "nflg";
  gv_alx[4845] = "whwd";
  gv_alx[4855] = 1;
  gv_alx[4865] = 1;
  gv_alx[4846] = "I01M";
  gv_alx[4872] = 5;
  gv_alx[4873] = "ocor";
  gv_alx[4874] = 0;
  gv_alx[4875] = 0;
  gv_alx[4876] = "ocor";
  gv_alx[4877] = "whwd";
  gv_alx[4887] = 1;
  gv_alx[4897] = 2;
  gv_alx[4878] = "I01H";
  gv_alx[4888] = 1;
  gv_alx[4898] = 1;
  gv_alx[4879] = "I01V";
  gv_alx[4906] = 4;
  gv_alx[4907] = "ofir";
  gv_alx[4908] = 0;
  gv_alx[4909] = 0;
  gv_alx[4910] = "wild";
  gv_alx[4920] = 1;
  gv_alx[4930] = 1;
  gv_alx[4911] = "fgsk";
  gv_alx[4921] = 1;
  gv_alx[4931] = 1;
  gv_alx[4912] = "fgdg";
  gv_alx[4922] = 1;
  gv_alx[4932] = 1;
  gv_alx[4913] = "whwd";
  gv_alx[4923] = 1;
  gv_alx[4933] = 1;
  gv_alx[4940] = 4;
  gv_alx[4941] = "gldo";
  gv_alx[4942] = 0;
  gv_alx[4943] = 0;
  gv_alx[4944] = "olig";
  gv_alx[4945] = "gldo";
  gv_alx[4946] = "oli2";
  gv_alx[4947] = "whwd";
  gv_alx[4957] = 1;
  gv_alx[4967] = 1;
  gv_alx[4948] = "I01N";
  gv_alx[4974] = 5;
  gv_alx[4975] = "oslo";
  gv_alx[4976] = 0;
  gv_alx[4977] = 0;
  gv_alx[4978] = "oslo";
  gv_alx[4979] = "whwd";
  gv_alx[4989] = 1;
  gv_alx[4999] = 2;
  gv_alx[4980] = "I01H";
  gv_alx[4990] = 1;
  gv_alx[5000] = 1;
  gv_alx[4981] = "I01V";
  gv_alx[5008] = 4;
  gv_alx[5009] = "oven";
  gv_alx[5010] = 0;
  gv_alx[5011] = 0;
  gv_alx[5012] = "wild";
  gv_alx[5022] = 1;
  gv_alx[5032] = 1;
  gv_alx[5013] = "fgsk";
  gv_alx[5023] = 1;
  gv_alx[5033] = 1;
  gv_alx[5014] = "fgdg";
  gv_alx[5024] = 1;
  gv_alx[5034] = 1;
  gv_alx[5015] = "whwd";
  gv_alx[5025] = 1;
  gv_alx[5035] = 1;
  gv_alx[5042] = 4;
  gv_alx[5043] = "pgin";
  gv_alx[5044] = 0;
  gv_alx[5045] = 0;
  gv_alx[5046] = "oflg";
  gv_alx[5047] = "pspd";
  gv_alx[5048] = "pgin";
  gv_alx[5049] = "whwd";
  gv_alx[5059] = 1;
  gv_alx[5069] = 1;
  gv_alx[5050] = "I01O";
  gv_alx[5076] = 5;
  gv_alx[5077] = "rde0";
  gv_alx[5078] = 0;
  gv_alx[5079] = 0;
  gv_alx[5080] = "rde0";
  gv_alx[5081] = "whwd";
  gv_alx[5091] = 1;
  gv_alx[5101] = 2;
  gv_alx[5082] = "I01H";
  gv_alx[5092] = 1;
  gv_alx[5102] = 1;
  gv_alx[5083] = "I01V";
  gv_alx[5110] = 4;
  gv_alx[5111] = "rnsp";
  gv_alx[5112] = 0;
  gv_alx[5113] = 0;
  gv_alx[5114] = "wild";
  gv_alx[5124] = 1;
  gv_alx[5134] = 1;
  gv_alx[5115] = "fgsk";
  gv_alx[5125] = 1;
  gv_alx[5135] = 1;
  gv_alx[5116] = "fgdg";
  gv_alx[5126] = 1;
  gv_alx[5136] = 1;
  gv_alx[5117] = "whwd";
  gv_alx[5127] = 1;
  gv_alx[5137] = 1;
  gv_alx[5144] = 4;
  gv_alx[5145] = "ram1";
  gv_alx[5146] = 0;
  gv_alx[5147] = 0;
  gv_alx[5148] = "ram4";
  gv_alx[5149] = "ram1";
  gv_alx[5150] = "ram2";
  gv_alx[5151] = "whwd";
  gv_alx[5161] = 1;
  gv_alx[5171] = 1;
  gv_alx[5152] = "I01P";
  gv_alx[5178] = 5;
  gv_alx[5179] = "ram3";
  gv_alx[5180] = 0;
  gv_alx[5181] = 0;
  gv_alx[5182] = "ram3";
  gv_alx[5183] = "whwd";
  gv_alx[5193] = 1;
  gv_alx[5203] = 2;
  gv_alx[5184] = "I01H";
  gv_alx[5194] = 1;
  gv_alx[5204] = 1;
  gv_alx[5185] = "I01V";
  gv_alx[5212] = 4;
  gv_alx[5213] = "rugt";
  gv_alx[5214] = 0;
  gv_alx[5215] = 0;
  gv_alx[5216] = "wild";
  gv_alx[5226] = 1;
  gv_alx[5236] = 1;
  gv_alx[5217] = "fgsk";
  gv_alx[5227] = 1;
  gv_alx[5237] = 1;
  gv_alx[5218] = "fgdg";
  gv_alx[5228] = 1;
  gv_alx[5238] = 1;
  gv_alx[5219] = "whwd";
  gv_alx[5229] = 1;
  gv_alx[5239] = 1;
  gv_alx[5246] = 4;
  gv_alx[5247] = "schl";
  gv_alx[5248] = 0;
  gv_alx[5249] = 0;
  gv_alx[5250] = "rump";
  gv_alx[5251] = "horl";
  gv_alx[5252] = "schl";
  gv_alx[5253] = "whwd";
  gv_alx[5263] = 1;
  gv_alx[5273] = 1;
  gv_alx[5254] = "I01Q";
  gv_alx[5280] = 5;
  gv_alx[5281] = "ccmd";
  gv_alx[5282] = 0;
  gv_alx[5283] = 0;
  gv_alx[5284] = "ccmd";
  gv_alx[5285] = "whwd";
  gv_alx[5295] = 1;
  gv_alx[5305] = 2;
  gv_alx[5286] = "I01H";
  gv_alx[5296] = 1;
  gv_alx[5306] = 1;
  gv_alx[5287] = "I01V";
  gv_alx[5314] = 4;
  gv_alx[5315] = "rots";
  gv_alx[5316] = 0;
  gv_alx[5317] = 0;
  gv_alx[5318] = "wild";
  gv_alx[5328] = 1;
  gv_alx[5338] = 1;
  gv_alx[5319] = "fgsk";
  gv_alx[5329] = 1;
  gv_alx[5339] = 1;
  gv_alx[5320] = "fgdg";
  gv_alx[5330] = 1;
  gv_alx[5340] = 1;
  gv_alx[5321] = "whwd";
  gv_alx[5331] = 1;
  gv_alx[5341] = 1;
  gv_alx[5348] = 4;
  gv_alx[5349] = "scul";
  gv_alx[5350] = 0;
  gv_alx[5351] = 0;
  gv_alx[5352] = "scul";
  gv_alx[5353] = "srtl";
  gv_alx[5354] = "srbd";
  gv_alx[5355] = "whwd";
  gv_alx[5365] = 1;
  gv_alx[5375] = 1;
  gv_alx[5356] = "I01R";
  gv_alx[5382] = 5;
  gv_alx[5383] = "sor1";
  gv_alx[5384] = 0;
  gv_alx[5385] = 0;
  gv_alx[5386] = "sor1";
  gv_alx[5387] = "whwd";
  gv_alx[5397] = 1;
  gv_alx[5407] = 2;
  gv_alx[5388] = "I01H";
  gv_alx[5398] = 1;
  gv_alx[5408] = 1;
  gv_alx[5389] = "I01V";
  gv_alx[5416] = 4;
  gv_alx[5417] = "sora";
  gv_alx[5418] = 0;
  gv_alx[5419] = 0;
  gv_alx[5420] = "wild";
  gv_alx[5430] = 1;
  gv_alx[5440] = 1;
  gv_alx[5421] = "fgsk";
  gv_alx[5431] = 1;
  gv_alx[5441] = 1;
  gv_alx[5422] = "fgdg";
  gv_alx[5432] = 1;
  gv_alx[5442] = 1;
  gv_alx[5423] = "whwd";
  gv_alx[5433] = 1;
  gv_alx[5443] = 1;
  gv_alx[5450] = 4;
  gv_alx[5451] = "sor2";
  gv_alx[5452] = 0;
  gv_alx[5453] = 0;
  gv_alx[5454] = "sor4";
  gv_alx[5455] = "sor3";
  gv_alx[5456] = "sor2";
  gv_alx[5457] = "whwd";
  gv_alx[5467] = 1;
  gv_alx[5477] = 1;
  gv_alx[5458] = "I01S";
  gv_alx[5484] = 5;
  gv_alx[5485] = "sor5";
  gv_alx[5486] = 0;
  gv_alx[5487] = 0;
  gv_alx[5488] = "sor5";
  gv_alx[5489] = "whwd";
  gv_alx[5499] = 1;
  gv_alx[5509] = 2;
  gv_alx[5490] = "I01H";
  gv_alx[5500] = 1;
  gv_alx[5510] = 1;
  gv_alx[5491] = "I01V";
  gv_alx[5518] = 4;
  gv_alx[5519] = "sor6";
  gv_alx[5520] = 0;
  gv_alx[5521] = 0;
  gv_alx[5522] = "wild";
  gv_alx[5532] = 1;
  gv_alx[5542] = 1;
  gv_alx[5523] = "fgsk";
  gv_alx[5533] = 1;
  gv_alx[5543] = 1;
  gv_alx[5524] = "fgdg";
  gv_alx[5534] = 1;
  gv_alx[5544] = 1;
  gv_alx[5525] = "whwd";
  gv_alx[5535] = 1;
  gv_alx[5545] = 1;
  gv_alx[5552] = 4;
  gv_alx[5553] = "sor8";
  gv_alx[5554] = 0;
  gv_alx[5555] = 0;
  gv_alx[5556] = "sor9";
  gv_alx[5557] = "sor8";
  gv_alx[5558] = "sor7";
  gv_alx[5559] = "whwd";
  gv_alx[5569] = 1;
  gv_alx[5579] = 1;
  gv_alx[5560] = "I01T";
  gv_alx[5586] = 5;
  gv_alx[5587] = "shcw";
  gv_alx[5588] = 0;
  gv_alx[5589] = 0;
  gv_alx[5590] = "shcw";
  gv_alx[5591] = "whwd";
  gv_alx[5601] = 1;
  gv_alx[5611] = 2;
  gv_alx[5592] = "I01H";
  gv_alx[5602] = 1;
  gv_alx[5612] = 1;
  gv_alx[5593] = "I01V";
  gv_alx[5620] = 4;
  gv_alx[5621] = "shtm";
  gv_alx[5622] = 0;
  gv_alx[5623] = 0;
  gv_alx[5624] = "hlst";
  gv_alx[5634] = 1;
  gv_alx[5644] = 1;
  gv_alx[5625] = "whwd";
  gv_alx[5635] = 1;
  gv_alx[5645] = 1;
  gv_alx[5654] = 2;
  gv_alx[5655] = "gsou";
  gv_alx[5656] = 0;
  gv_alx[5657] = 0;
  gv_alx[5658] = "gsou";
  gv_alx[5659] = "hlst";
  gv_alx[5669] = 1;
  gv_alx[5679] = 3;
  gv_alx[5660] = "whwd";
  gv_alx[5670] = 1;
  gv_alx[5680] = 2;
  gv_alx[5661] = "I01H";
  gv_alx[5671] = 1;
  gv_alx[5681] = 1;
  gv_alx[5662] = "I01D";
  gv_alx[5672] = 1;
  gv_alx[5682] = 1;
  gv_alx[5663] = "I01W";
  gv_alx[5688] = 6;
  gv_alx[5689] = "sbok";
  gv_alx[5690] = 0;
  gv_alx[5691] = 0;
  gv_alx[5692] = "shar";
  gv_alx[5702] = 1;
  gv_alx[5712] = 1;
  gv_alx[5693] = "whwd";
  gv_alx[5703] = 1;
  gv_alx[5713] = 1;
  gv_alx[5722] = 2;
  gv_alx[5723] = "sprn";
  gv_alx[5724] = 0;
  gv_alx[5725] = 0;
  gv_alx[5726] = "sprn";
  gv_alx[5727] = "shar";
  gv_alx[5737] = 1;
  gv_alx[5747] = 3;
  gv_alx[5728] = "whwd";
  gv_alx[5738] = 1;
  gv_alx[5748] = 2;
  gv_alx[5729] = "I01H";
  gv_alx[5739] = 1;
  gv_alx[5749] = 1;
  gv_alx[5730] = "I01D";
  gv_alx[5740] = 1;
  gv_alx[5750] = 1;
  gv_alx[5731] = "I01W";
  gv_alx[5756] = 6;
  gv_alx[5757] = "spre";
  gv_alx[5758] = 0;
  gv_alx[5759] = 0;
  gv_alx[5760] = "sand";
  gv_alx[5770] = 1;
  gv_alx[5780] = 1;
  gv_alx[5761] = "whwd";
  gv_alx[5771] = 1;
  gv_alx[5781] = 1;
  gv_alx[5790] = 2;
  gv_alx[5791] = "stre";
  gv_alx[5792] = 0;
  gv_alx[5793] = 0;
  gv_alx[5794] = "stre";
  gv_alx[5795] = "sand";
  gv_alx[5805] = 1;
  gv_alx[5815] = 3;
  gv_alx[5796] = "whwd";
  gv_alx[5806] = 1;
  gv_alx[5816] = 2;
  gv_alx[5797] = "I01H";
  gv_alx[5807] = 1;
  gv_alx[5817] = 1;
  gv_alx[5798] = "I01D";
  gv_alx[5808] = 1;
  gv_alx[5818] = 1;
  gv_alx[5799] = "I01W";
  gv_alx[5824] = 6;
  gv_alx[5825] = "stwa";
  gv_alx[5826] = 0;
  gv_alx[5827] = 0;
  gv_alx[5828] = "sand";
  gv_alx[5838] = 1;
  gv_alx[5848] = 1;
  gv_alx[5829] = "whwd";
  gv_alx[5839] = 1;
  gv_alx[5849] = 1;
  gv_alx[5858] = 2;
  gv_alx[5859] = "thdm";
  gv_alx[5860] = 0;
  gv_alx[5861] = 0;
  gv_alx[5862] = "thdm";
  gv_alx[5863] = "sand";
  gv_alx[5873] = 1;
  gv_alx[5883] = 3;
  gv_alx[5864] = "whwd";
  gv_alx[5874] = 1;
  gv_alx[5884] = 2;
  gv_alx[5865] = "I01H";
  gv_alx[5875] = 1;
  gv_alx[5885] = 1;
  gv_alx[5866] = "I01D";
  gv_alx[5876] = 1;
  gv_alx[5886] = 1;
  gv_alx[5867] = "I01W";
  gv_alx[5892] = 6;
  gv_alx[5893] = "tbak";
  gv_alx[5894] = 0;
  gv_alx[5895] = 0;
  gv_alx[5896] = "sres";
  gv_alx[5906] = 1;
  gv_alx[5916] = 1;
  gv_alx[5897] = "whwd";
  gv_alx[5907] = 1;
  gv_alx[5917] = 1;
  gv_alx[5926] = 2;
  gv_alx[5927] = "tbar";
  gv_alx[5928] = 0;
  gv_alx[5929] = 0;
  gv_alx[5930] = "tbar";
  gv_alx[5931] = "sres";
  gv_alx[5941] = 1;
  gv_alx[5951] = 3;
  gv_alx[5932] = "whwd";
  gv_alx[5942] = 1;
  gv_alx[5952] = 2;
  gv_alx[5933] = "I01H";
  gv_alx[5943] = 1;
  gv_alx[5953] = 1;
  gv_alx[5934] = "I01D";
  gv_alx[5944] = 1;
  gv_alx[5954] = 1;
  gv_alx[5935] = "I01W";
  gv_alx[5960] = 6;
  gv_alx[5961] = "tbsm";
  gv_alx[5962] = 0;
  gv_alx[5963] = 0;
  gv_alx[5964] = "rej3";
  gv_alx[5974] = 1;
  gv_alx[5984] = 1;
  gv_alx[5965] = "whwd";
  gv_alx[5975] = 1;
  gv_alx[5985] = 1;
  gv_alx[5994] = 2;
  gv_alx[5995] = "tfar";
  gv_alx[5996] = 0;
  gv_alx[5997] = 0;
  gv_alx[5998] = "tfar";
  gv_alx[5999] = "rej3";
  gv_alx[6009] = 1;
  gv_alx[6019] = 3;
  gv_alx[6000] = "whwd";
  gv_alx[6010] = 1;
  gv_alx[6020] = 2;
  gv_alx[6001] = "I01H";
  gv_alx[6011] = 1;
  gv_alx[6021] = 1;
  gv_alx[6002] = "I01D";
  gv_alx[6012] = 1;
  gv_alx[6022] = 1;
  gv_alx[6003] = "I01W";
  gv_alx[6028] = 6;
  gv_alx[6029] = "tlum";
  gv_alx[6030] = 0;
  gv_alx[6031] = 0;
}
function f_bkv() {
  var lv_bkw = GetManipulatingUnit();
  var lv_bkx = GetManipulatedItem();
  var lv_bky = GetOwningPlayer(lv_bkw);
  var lv_bkz = GetPlayerId(lv_bky);
  var lv_bkA = 0;
  var lv_bkB = GetItemTypeId(lv_bkx);
  if (IsUnitType(lv_bkw, UNIT_TYPE_HERO)) {
    if (LoadInteger(gv_abT, gv_acj, StringHash(GetItemName(lv_bkx))) > 0) {
      gv_alu[GetPlayerId(lv_bky)] =
        gv_alu[GetPlayerId(lv_bky)] -
        LoadInteger(gv_abT, gv_acj, StringHash(GetItemName(lv_bkx)));
    }
    if (LoadInteger(gv_abT, gv_ack, StringHash(GetItemName(lv_bkx))) > 0) {
      gv_alu[GetPlayerId(lv_bky) + 8] =
        gv_alu[GetPlayerId(lv_bky) + 8] -
        LoadInteger(gv_abT, gv_ack, StringHash(GetItemName(lv_bkx)));
    }
    if (GetItemTypeId(lv_bkx) == "I066") {
      f_aPJ(gv_alv[lv_bkz]);
    }
    if (lv_bkw == gv_alv[lv_bkz]) {
      do {
        if (lv_bkA > gv_aaE.getInt(1)) {
          break;
        }
        if (lv_bkB == gv_aav.getInt(lv_bkA)) {
          f_aBl(lv_bkw, gv_abl, -gv_aaw.getInt(lv_bkA));
          f_aBl(lv_bkw, gv_abm, -gv_aax.getInt(lv_bkA));
          f_aBl(lv_bkw, gv_abn, -gv_aay.getInt(lv_bkA));
          f_aBl(lv_bkw, gv_abo, -gv_aaz.getInt(lv_bkA));
          f_aBl(lv_bkw, gv_abp, -gv_aaA.getInt(lv_bkA));
          f_aBl(lv_bkw, gv_abq, -gv_aaB.getInt(lv_bkA));
          lv_bkA = gv_aaE.getInt(1);
        }
        lv_bkA = lv_bkA + 1;
      } while (true);
    }
  }
  lv_bkw = null;
  lv_bkx = null;
  lv_bky = null;
}
function f_bkC() {
  var lv_bkD = GetTriggerUnit();
  var lv_bkE = GetPlayerId(GetOwningPlayer(lv_bkD));
  var lv_bkF = GetManipulatedItem();
  var lv_bkG = GetItemTypeId(lv_bkF);
  var lv_bkH = UnitItemInSlot(gv_alv[lv_bkE], 5);
  var lv_bkI = 0;
  var lv_bkJ;
  var lv_bkK;
  gv_acx = GetOwningPlayer(lv_bkD);
  if (lv_bkG == "I05M") {
    UnitModifySkillPoints(gv_alv[lv_bkE], 1);
  } else {
    if (lv_bkG == "I062" || lv_bkG == "I063" || lv_bkG == "I05X") {
      SetItemDroppable(lv_bkF, false);
      PolledWait(60);
      SetItemDroppable(lv_bkF, true);
    } else {
      do {
        if (lv_bkI > gv_aaE.getInt(2)) {
          break;
        }
        if (lv_bkG == gv_aaF.getInt(lv_bkI)) {
          if (lv_bkI < 10) {
            SetUnitState(
              gv_alv[lv_bkE],
              UNIT_STATE_LIFE,
              GetUnitState(gv_alv[lv_bkE], UNIT_STATE_LIFE) +
                gv_aaG.getInt(lv_bkI) * gv_aan[lv_bkE]
            );
          } else {
            if (lv_bkI < 20) {
              SetUnitState(
                gv_alv[lv_bkE],
                UNIT_STATE_MANA,
                GetUnitState(gv_alv[lv_bkE], UNIT_STATE_MANA) +
                  gv_aaH.getInt(lv_bkI) * gv_aan[lv_bkE]
              );
            } else {
              if (lv_bkG == "shas") {
                SetUnitX(gv_alv[lv_bkE + 8], GetUnitX(gv_alv[lv_bkE]));
                SetUnitY(gv_alv[lv_bkE + 8], GetUnitY(gv_alv[lv_bkE]));
              } else {
                lv_bkJ = CreateGroup();
                GroupEnumUnitsInRange(
                  lv_bkJ,
                  GetUnitX(gv_alv[lv_bkE]),
                  GetUnitY(gv_alv[lv_bkE]),
                  600 * gv_aam[lv_bkE],
                  Condition(f_aAU)
                );
                do {
                  lv_bkK = FirstOfGroup(lv_bkJ);
                  if (lv_bkK == null) {
                    break;
                  }
                  SetUnitState(
                    lv_bkK,
                    UNIT_STATE_LIFE,
                    GetUnitState(lv_bkK, UNIT_STATE_LIFE) +
                      gv_aaG.getInt(lv_bkI) * f_azM(lv_bkK)
                  );
                  SetUnitState(
                    lv_bkK,
                    UNIT_STATE_MANA,
                    GetUnitState(lv_bkK, UNIT_STATE_MANA) +
                      gv_aaH.getInt(lv_bkI) * f_azM(lv_bkK)
                  );
                  GroupRemoveUnit(lv_bkJ, lv_bkK);
                  lv_bkK = null;
                } while (true);
                DestroyGroup(lv_bkJ);
              }
            }
          }
          lv_bkI = 50;
        } else {
          lv_bkI = lv_bkI + 1;
        }
      } while (true);
      if (
        lv_bkI < 50 &&
        GetUnitTypeId(lv_bkD) == "e000" &&
        GetWidgetLife(gv_alv[lv_bkE]) > 0.405
      ) {
        if (lv_bkG == "stwp") {
          SetUnitPosition(gv_alv[lv_bkE], GetUnitX(lv_bkD), GetUnitX(lv_bkD));
        }
        if (lv_bkH != null) {
          UnitRemoveItem(gv_alv[lv_bkE], lv_bkH);
        }
        gv_alx[8106 + lv_bkE] = 1;
        lv_bkF = UnitAddItemById(gv_alv[lv_bkE], lv_bkG);
        gv_alx[8106 + lv_bkE] = 0;
        UnitUseItem(gv_alv[lv_bkE], lv_bkF);
        if (lv_bkF != null) {
          RemoveItem(lv_bkF);
        }
        if (lv_bkH != null) {
          UnitAddItem(gv_alv[lv_bkE], lv_bkH);
        }
      }
    }
  }
  lv_bkD = null;
  lv_bkF = null;
  lv_bkH = null;
  lv_bkJ = null;
}
function f_bkL() {
  var lv_bkM = GetTriggerPlayer();
  var lv_bkN = GetPlayerId(lv_bkM);
  var lv_bkO;
  if (f_aJX(lv_bkN, "I06A")) {
    lv_bkO = "Atlas, Avatar of Earth";
    gv_alC[50 + lv_bkN] = Location(3650, 14400);
    if (gv_alx.getInt(2 + 7000) == 2) {
      lv_bkO = "Themus, Avatar of Justice";
      gv_alC[50 + lv_bkN] = Location(-11850, 3150);
    }
    if (gv_alx.getInt(3 + 7000) == 2) {
      lv_bkO = "Uranus, Avatar of Air";
      gv_alC[50 + lv_bkN] = Location(-8400, 12500);
    }
    if (gv_alx.getInt(4 + 7000) == 2) {
      lv_bkO = "Oceanus, Avatar of Water";
      gv_alC[50 + lv_bkN] = Location(3100, -8150);
    }
    if (gv_alx.getInt(5 + 7000) == 2) {
      lv_bkO = "Rhea, Mistress of Pain";
      gv_alC[50 + lv_bkN] = Location(-8150, -2600);
    }
    if (gv_alx.getInt(6 + 7000) == 2) {
      lv_bkO = "Thea, Avatar of Nature";
      gv_alC[50 + lv_bkN] = Location(-2700, -5100);
    }
    if (gv_alx.getInt(7 + 7000) == 2) {
      lv_bkO = "Gaea, Avatar of the Elements";
      gv_alC[50 + lv_bkN] = Location(-2450, -13300);
    }
    if (gv_alx.getInt(8 + 7000) == 2) {
      lv_bkO = "Cronus, Avatar of Death";
      gv_alC[50 + lv_bkN] = Location(-12500, -1500);
    }
    if (gv_alx.getInt(9 + 7000) == 2) {
      lv_bkO = "Persephone, Queen of the Underworld";
      gv_alC[50 + lv_bkN] = Location(-13500, 13000);
    }
    DisplayTimedTextToPlayer(
      lv_bkM,
      0,
      0,
      20,
      S2S(gv_alw[82] + "Favor Teleport Beacon set to: ") + lv_bkO
    );
  }
  lv_bkM = null;
}
function f_bkP() {
  var lv_bkQ = GetTriggerPlayer();
  var lv_bkR = GetPlayerId(lv_bkQ);
  var lv_bkS;
  if (f_aJX(lv_bkR, "I06B")) {
    if (gv_alx.getInt(280 + lv_bkR) != 1) {
      gv_alx[280 + lv_bkR] = 1;
      UnitResetCooldown(gv_alv[lv_bkR]);
      DisplayTimedTextToPlayer(
        lv_bkQ,
        0,
        0,
        20,
        S2S(gv_alw[82] + "Your hero experiences a rapid cooldown.")
      );
    } else {
      DisplayTimedTextToPlayer(
        lv_bkQ,
        0,
        0,
        20,
        S2S(gv_alw[82] + "The primal mana seems to still be charging.")
      );
    }
  }
  lv_bkQ = null;
}
function f_bkT() {
  var lv_bkU = GetPlayerId(GetOwningPlayer(GetTriggerUnit()));
  var lv_bkV = 0;
  var lv_bkW = GetItemTypeId(GetManipulatedItem());
  var lv_bkX;
  var lv_bkY;
  if (lv_bkW == "rhe3") {
    PingMinimapForForce(
      bj_FORCE_ALL_PLAYERS,
      GetUnitX(gv_akl),
      GetUnitY(gv_akl),
      3
    );
    PingMinimapForForce(
      bj_FORCE_ALL_PLAYERS,
      GetUnitX(gv_akm),
      GetUnitY(gv_akm),
      3
    );
    PingMinimapForForce(
      bj_FORCE_ALL_PLAYERS,
      GetUnitX(gv_akf),
      GetUnitY(gv_akf),
      3
    );
    PingMinimapForForce(
      bj_FORCE_ALL_PLAYERS,
      GetUnitX(gv_akk),
      GetUnitY(gv_akk),
      3
    );
    PingMinimapForForce(
      bj_FORCE_ALL_PLAYERS,
      GetUnitX(gv_aks),
      GetUnitY(gv_aks),
      3
    );
  }
  if (lv_bkW == "rma2") {
    PingMinimapForForce(
      bj_FORCE_ALL_PLAYERS,
      GetRectCenterX(gv_adR),
      GetRectCenterY(gv_adR),
      3
    );
  }
  if (lv_bkW == "rre2") {
    PingMinimapForForce(
      bj_FORCE_ALL_PLAYERS,
      GetRectCenterX(gv_acY),
      GetRectCenterY(gv_acY),
      3
    );
  }
  if (lv_bkW == "I03F") {
    lv_bkX = GetRectCenterX(gv_aep);
    lv_bkY = GetRectCenterY(gv_aep);
    lv_bkV = 1;
  }
  if (lv_bkW == "I03E") {
    lv_bkX = GetRectCenterX(gv_adw);
    lv_bkY = GetRectCenterY(gv_adw);
    lv_bkV = 30;
  }
  if (lv_bkW == "I03H") {
    lv_bkX = GetRectCenterX(gv_adC);
    lv_bkY = GetRectCenterY(gv_adC);
    lv_bkV = 55;
  }
  if (lv_bkW == "I03G") {
    lv_bkX = GetRectCenterX(gv_afi);
    lv_bkY = GetRectCenterY(gv_afi);
    lv_bkV = 85;
  }
  if (lv_bkV > 0 && GetHeroLevel(gv_alv[lv_bkU]) >= lv_bkV) {
    SetUnitPosition(gv_alv[lv_bkU], lv_bkX, lv_bkY);
    PanCameraToTimedForPlayer(Player(lv_bkU), lv_bkX, lv_bkY, 0.0);
    DestroyEffect(
      AddSpecialEffectTarget(
        "Abilities\\Spells\\Human\\MassTeleport\\MassTeleportCaster.mdl",
        gv_alv[lv_bkU],
        "origin"
      )
    );
  } else {
    if (lv_bkV == 30) {
      SetPlayerState(
        GetOwningPlayer(GetTriggerUnit()),
        PLAYER_STATE_RESOURCE_GOLD,
        GetPlayerState(
          GetOwningPlayer(GetTriggerUnit()),
          PLAYER_STATE_RESOURCE_GOLD
        ) + 250
      );
      f_aMm(
        GetOwningPlayer(GetTriggerUnit()),
        "You need to be level 30 to teleport to Sparta."
      );
    }
    if (lv_bkV == 55) {
      SetPlayerState(
        GetOwningPlayer(GetTriggerUnit()),
        PLAYER_STATE_RESOURCE_GOLD,
        GetPlayerState(
          GetOwningPlayer(GetTriggerUnit()),
          PLAYER_STATE_RESOURCE_GOLD
        ) + 500
      );
      f_aMm(
        GetOwningPlayer(GetTriggerUnit()),
        "You need to be level 55 to teleport to Sparta."
      );
    }
    if (lv_bkV == 85) {
      SetPlayerState(
        GetOwningPlayer(GetTriggerUnit()),
        PLAYER_STATE_RESOURCE_GOLD,
        GetPlayerState(
          GetOwningPlayer(GetTriggerUnit()),
          PLAYER_STATE_RESOURCE_GOLD
        ) + 1000
      );
      f_aMm(
        GetOwningPlayer(GetTriggerUnit()),
        "You need to be level 85 to teleport to Sparta."
      );
    }
  }
}
function f_bkZ() {
  var lv_bla = 0;
  var lv_blb = 0;
  var lv_blc = 0;
  var lv_bld = 0;
  var lv_ble = GetTriggerUnit();
  var lv_blf = GetPlayerId(GetOwningPlayer(lv_ble));
  var lv_blg = GetManipulatedItem();
  var lv_blh = GetItemTypeId(lv_blg);
  var lv_bli = GetItemCharges(lv_blg);
  do {
    lv_blb = lv_blb + 1;
    if (lv_blb > 2) {
      break;
    }
    do {
      if (lv_bla > 5) {
        break;
      }
      gv_amR = UnitItemInSlot(lv_ble, lv_bla);
      lv_blc = GetItemCharges(gv_amR);
      if (lv_blc < 7 && gv_amR != lv_blg && GetItemTypeId(gv_amR) == lv_blh) {
        lv_bld = 7 - lv_blc;
        if (lv_bli > lv_bld) {
          SetItemCharges(gv_amR, 7);
          lv_bli = lv_bli - lv_bld;
          SetItemCharges(lv_blg, lv_bli);
        } else {
          SetItemCharges(gv_amR, lv_blc + lv_bli);
          RemoveItem(lv_blg);
          lv_ble = null;
          lv_blg = null;
          return;
        }
      }
      lv_bla = lv_bla + 1;
    } while (true);
    if (lv_ble == gv_alv[lv_bla]) {
      lv_ble = gv_alv[lv_bla + 8];
    } else {
      lv_ble = gv_alv[lv_bla];
    }
    lv_bla = 0;
  } while (true);
  lv_ble = null;
  lv_blg = null;
}
function f_blj(lv_blk) {
  if (lv_blk == "4") {
    return "a Dryad";
  } else {
    if (lv_blk == "6") {
      return "a Javalineer";
    } else {
      if (lv_blk == "E") {
        return "an Assassin";
      } else {
        if (lv_blk == "D") {
          return "an Amazon";
        } else {
          if (lv_blk == "3") {
            return "a Bokor";
          } else {
            if (lv_blk == "B") {
              return "a Temple Guardian";
            } else {
              if (lv_blk == "1") {
                return "a Pyromancer";
              } else {
                if (lv_blk == "2") {
                  return "a Hydromancer";
                } else {
                  if (lv_blk == "5") {
                    return "a Priestess";
                  } else {
                    if (lv_blk == "7") {
                      return "an Arcane Ranger";
                    } else {
                      if (lv_blk == "F") {
                        return "a Spell Blade";
                      } else {
                        if (lv_blk == "C") {
                          return "a Spartan Warrior";
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }
  return "All Classes";
}
function f_bll(lv_blm, lv_bln, lv_blo, lv_blp) {
  var lv_blq = GetItemTypeId(lv_blp);
  var lv_blr = GetPlayerId(lv_bln) * 5 + 200;
  RemoveItem(lv_blp);
  if (!f_aMV(lv_blm)) {
    f_aMX(lv_blm);
    gv_alx[lv_blr + 4] = 1;
  } else {
    f_aMm(lv_bln, "You already have your ultimate skill");
    CreateItem(
      lv_blq,
      GetUnitX(lv_blo) + GetRandomReal(-20, 20),
      GetUnitY(lv_blo) + GetRandomReal(-20, 20)
    );
  }
}
function f_bls(lv_blt, lv_blu) {
  var lv_blv = 0;
  var lv_blw = 0;
  do {
    if (lv_blv > 5) {
      break;
    }
    if (
      SubString(GetItemName(UnitItemInSlot(lv_blt, lv_blv)), 9, 10) == lv_blu
    ) {
      lv_blw = lv_blw + 1;
    }
    lv_blv = lv_blv + 1;
  } while (true);
  lv_blv = 0;
  return lv_blw;
}
function f_blx() {
  var lv_bly = GetItemTypeId(GetManipulatedItem());
  var lv_blz = 0;
  var lv_blA = false;
  do {
    if (lv_blz > 6) {
      break;
    }
    if (
      GetItemTypeId(UnitItemInSlot(GetManipulatingUnit(), lv_blz)) == lv_bly &&
      UnitItemInSlot(GetManipulatingUnit(), lv_blz) != GetManipulatedItem()
    ) {
      lv_blz = 6;
      UnitRemoveItemSwapped(GetManipulatedItem(), GetManipulatingUnit());
      DisplayTimedTextToPlayer(
        GetOwningPlayer(GetManipulatingUnit()),
        0,
        0,
        10.0,
        "You can't have 2 of these items."
      );
    }
    lv_blz = lv_blz + 1;
  } while (true);
}
function f_blB() {
  var lv_blC = GetManipulatingUnit();
  var lv_blD = GetManipulatedItem();
  var lv_blE = 0;
  var lv_blF = GetPlayerId(GetOwningPlayer(lv_blC));
  var lv_blG = GetItemName(lv_blD);
  var lv_blH = GetHeroLevel(gv_alv[lv_blF]);
  var lv_blI = false;
  var lv_blJ = SubString(lv_blG, 9, 10);
  var lv_blK = f_blj(SubString(lv_blG, 4, 5));
  var lv_blL = GetItemTypeId(lv_blD);
  if (
    GetItemUserData(lv_blD) == 3 ||
    gv_alx.getInt(8106 + lv_blF) == 1 ||
    GetItemType(lv_blD) == ITEM_TYPE_POWERUP ||
    GetItemType(lv_blD) == ITEM_TYPE_PURCHASABLE
  ) {
    lv_blI = true;
  }
  if (
    GetItemPlayer(lv_blD) != Player(PLAYER_NEUTRAL_PASSIVE) &&
    GetItemPlayer(lv_blD) != GetOwningPlayer(lv_blC)
  ) {
    UnitRemoveItem(lv_blC, lv_blD);
    f_aMm(
      GetOwningPlayer(lv_blC),
      S2S(
        "Sorry, that item is owned by " + GetPlayerName(GetItemPlayer(lv_blD))
      ) + "."
    );
  } else {
    if (
      GetItemType(lv_blD) == ITEM_TYPE_CHARGED &&
      lv_blI == false &&
      gv_alx.getInt(380 + lv_blF) != 1 &&
      lv_blL != "ankh"
    ) {
      f_bkZ();
    }
  }
  if (lv_blC == gv_alv[lv_blF + 8] || lv_blC == gv_alv[lv_blF + 40]) {
    lv_blH = lv_blH + 5;
  }
  if (S2I(SubString(lv_blG, 5, 8)) > lv_blH && lv_blI == false) {
    lv_blI = true;
    UnitRemoveItem(lv_blC, lv_blD);
    f_aMm(
      GetOwningPlayer(lv_blC),
      S2S(
        "You are too weak to hold this level " +
          I2S(S2I(SubString(lv_blG, 5, 8)))
      ) +
        " " +
        lv_blG
    );
  }
  if (
    SubString(GetUnitName(gv_alv[lv_blF]), 2, 3) != SubString(lv_blG, 4, 5) &&
    lv_blK != "All Classes" &&
    lv_blI == false
  ) {
    lv_blI = true;
    f_aMm(GetOwningPlayer(lv_blC), S2S("This belongs to " + lv_blK) + "!");
    UnitRemoveItem(lv_blC, lv_blD);
  }
  if (SubString(lv_blG, 8, 9) == "3" && lv_blI == false) {
    f_aCv(1, gv_alv[lv_blF], GetOwningPlayer(lv_blC), lv_blC, lv_blD);
  }
  if (
    SubString(lv_blG, 8, 9) == "2" &&
    (lv_blC == gv_alv[lv_blF + 8] || lv_blC == gv_alv[lv_blF + 40]) &&
    lv_blI == false
  ) {
    UnitRemoveItem(lv_blC, lv_blD);
    f_aMm(
      GetOwningPlayer(lv_blC),
      "Your backpack cannot hold this item, only your hero or your horse can."
    );
    lv_blI = true;
  }
  if (lv_blC != gv_alv[lv_blF] && lv_blC != gv_alv[lv_blF + 8]) {
    lv_blI = true;
  }
  if (lv_blC == gv_alv[lv_blF]) {
    lv_blE = 0;
    do {
      if (lv_blE > gv_aaE.getInt(1)) {
        break;
      }
      if (lv_blL == gv_aav.getInt(lv_blE)) {
        f_aBl(lv_blC, gv_abl, gv_aaw.getInt(lv_blE));
        f_aBl(lv_blC, gv_abm, gv_aax.getInt(lv_blE));
        f_aBl(lv_blC, gv_abn, gv_aay.getInt(lv_blE));
        f_aBl(lv_blC, gv_abo, gv_aaz.getInt(lv_blE));
        f_aBl(lv_blC, gv_abp, gv_aaA.getInt(lv_blE));
        f_aBl(lv_blC, gv_abq, gv_aaB.getInt(lv_blE));
        lv_blE = gv_aaE.getInt(1);
      }
      lv_blE = lv_blE + 1;
    } while (true);
  }
  lv_blE = 0;
  do {
    if (lv_blE > 18) {
      break;
    }
    if (lv_blL == gv_aau.getInt(lv_blE)) {
      f_blx();
    }
    lv_blE = lv_blE + 1;
  } while (true);
  if (lv_blJ == "2" && lv_blI == false) {
    if (
      f_bls(lv_blC, "b") > 0 ||
      f_bls(lv_blC, "c") > 0 ||
      f_bls(lv_blC, "d") > 0 ||
      f_bls(lv_blC, "e") > 0
    ) {
      lv_blI = true;
      UnitRemoveItem(lv_blC, lv_blD);
      f_aMm(
        GetOwningPlayer(lv_blC),
        "You still wear one of your class items !"
      );
    } else {
      if (f_bls(lv_blC, "2") > 1) {
        lv_blI = true;
        UnitRemoveItem(lv_blC, lv_blD);
        f_aMm(
          GetOwningPlayer(lv_blC),
          "You already wear your classes Gear/Equipment !"
        );
      }
    }
  }
  if (lv_blJ == "3" && lv_blI == false) {
    if (f_bls(lv_blC, "3") > 1) {
      lv_blI = true;
      UnitRemoveItem(lv_blC, lv_blD);
      f_aMm(GetOwningPlayer(lv_blC), "You already wear a relic!");
    }
  }
  if (lv_blJ == "4" && lv_blI == false) {
    if (f_bls(lv_blC, "4") > 1) {
      lv_blI = true;
      UnitRemoveItem(lv_blC, lv_blD);
      f_aMm(GetOwningPlayer(lv_blC), "You already wear a dragonscale item!");
    }
  }
  if (lv_blJ == "5" && lv_blI == false) {
    if (f_bls(lv_blC, "8") > 0) {
      lv_blI = true;
      UnitRemoveItem(lv_blC, lv_blD);
      DisplayTimedTextToPlayer(
        GetOwningPlayer(lv_blC),
        0,
        0,
        60,
        "You already wear an olympian regalia!"
      );
    } else {
      if (f_bls(lv_blC, "5") > 1) {
        lv_blI = true;
        UnitRemoveItem(lv_blC, lv_blD);
        DisplayTimedTextToPlayer(
          GetOwningPlayer(lv_blC),
          0,
          0,
          60,
          "You already wear an olympian sword!"
        );
      }
    }
  }
  if (lv_blJ == "6" && lv_blI == false) {
    if (f_bls(lv_blC, "8") > 0) {
      lv_blI = true;
      UnitRemoveItem(lv_blC, lv_blD);
      DisplayTimedTextToPlayer(
        GetOwningPlayer(lv_blC),
        0,
        0,
        60,
        "You already wear an olympian regalia!"
      );
    } else {
      if (f_bls(lv_blC, "6") > 1) {
        lv_blI = true;
        UnitRemoveItem(lv_blC, lv_blD);
        DisplayTimedTextToPlayer(
          GetOwningPlayer(lv_blC),
          0,
          0,
          60,
          "You already wear an olympian helmet!"
        );
      }
    }
  }
  if (lv_blJ == "7" && lv_blI == false) {
    if (f_bls(lv_blC, "8") > 0) {
      lv_blI = true;
      UnitRemoveItem(lv_blC, lv_blD);
      DisplayTimedTextToPlayer(
        GetOwningPlayer(lv_blC),
        0,
        0,
        60,
        "You already wear an olympian regalia!"
      );
    } else {
      if (f_bls(lv_blC, "7") > 1) {
        lv_blI = true;
        UnitRemoveItem(lv_blC, lv_blD);
        DisplayTimedTextToPlayer(
          GetOwningPlayer(lv_blC),
          0,
          0,
          60,
          "You already wear an olympian armor!"
        );
      }
    }
  }
  if (lv_blJ == "8" && lv_blI == false) {
    if (
      f_bls(lv_blC, "5") > 0 ||
      f_bls(lv_blC, "6") > 0 ||
      f_bls(lv_blC, "7") > 0
    ) {
      lv_blI = true;
      UnitRemoveItem(lv_blC, lv_blD);
      DisplayTimedTextToPlayer(
        GetOwningPlayer(lv_blC),
        0,
        0,
        60,
        "You still wear a part of the regalia!"
      );
    } else {
      if (f_bls(lv_blC, "8") > 1) {
        lv_blI = true;
        UnitRemoveItem(lv_blC, lv_blD);
        DisplayTimedTextToPlayer(
          GetOwningPlayer(lv_blC),
          0,
          0,
          60,
          "You already wear an olympian regalia item!"
        );
      }
    }
  }
  if (lv_blJ == "9" && lv_blI == false) {
    if (f_bls(lv_blC, "9") > 1) {
      lv_blI = true;
      UnitRemoveItem(lv_blC, lv_blD);
      f_aMm(GetOwningPlayer(lv_blC), "You already wear a lion item!");
    }
  }
  if (lv_blJ == "a" && lv_blI == false) {
    if (f_bls(lv_blC, "a") > 1) {
      lv_blI = true;
      UnitRemoveItem(lv_blC, lv_blD);
      f_aMm(GetOwningPlayer(lv_blC), "You already wear a god item!");
    }
  }
  if (lv_blJ == "b" && lv_blI == false) {
    if (f_bls(lv_blC, "2") > 0) {
      lv_blI = true;
      UnitRemoveItem(lv_blC, lv_blD);
      f_aMm(GetOwningPlayer(lv_blC), "You already wear your complete gear !");
    } else {
      if (f_bls(lv_blC, "b") > 1) {
        lv_blI = true;
        UnitRemoveItem(lv_blC, lv_blD);
        f_aMm(
          GetOwningPlayer(lv_blC),
          S2S("You already wear " + lv_blG) + " !"
        );
      }
    }
  }
  if (lv_blJ == "c" && lv_blI == false) {
    if (f_bls(lv_blC, "2") > 0) {
      lv_blI = true;
      UnitRemoveItem(lv_blC, lv_blD);
      f_aMm(GetOwningPlayer(lv_blC), "You already wear your complete gear !");
    } else {
      if (f_bls(lv_blC, "c") > 1) {
        lv_blI = true;
        UnitRemoveItem(lv_blC, lv_blD);
        f_aMm(
          GetOwningPlayer(lv_blC),
          S2S("You already wear " + lv_blG) + " !"
        );
      }
    }
  }
  if (lv_blJ == "d" && lv_blI == false) {
    if (f_bls(lv_blC, "2") > 0) {
      lv_blI = true;
      UnitRemoveItem(lv_blC, lv_blD);
      f_aMm(GetOwningPlayer(lv_blC), "You already wear your complete gear !");
    } else {
      if (f_bls(lv_blC, "d") > 1) {
        lv_blI = true;
        UnitRemoveItem(lv_blC, lv_blD);
        f_aMm(
          GetOwningPlayer(lv_blC),
          S2S("You already wear " + lv_blG) + " !"
        );
      }
    }
  }
  if (lv_blJ == "e" && lv_blI == false) {
    if (f_bls(lv_blC, "2") > 0) {
      lv_blI = true;
      UnitRemoveItem(lv_blC, lv_blD);
      f_aMm(GetOwningPlayer(lv_blC), "You already wear your complete gear !");
    } else {
      if (f_bls(lv_blC, "e") > 1) {
        lv_blI = true;
        UnitRemoveItem(lv_blC, lv_blD);
        f_aMm(
          GetOwningPlayer(lv_blC),
          S2S("You already wear " + lv_blG) + " !"
        );
      }
    }
  }
  if (IsUnitType(lv_blC, UNIT_TYPE_HERO)) {
    if (LoadInteger(gv_abT, gv_acj, StringHash(GetItemName(lv_blD))) > 0) {
      gv_alu[lv_blF] =
        gv_alu[lv_blF] +
        LoadInteger(gv_abT, gv_acj, StringHash(GetItemName(lv_blD)));
    }
    if (LoadInteger(gv_abT, gv_ack, StringHash(GetItemName(lv_blD))) > 0) {
      gv_alu[lv_blF + 8] =
        gv_alu[lv_blF + 8] +
        LoadInteger(gv_abT, gv_ack, StringHash(GetItemName(lv_blD)));
    }
    if (lv_blL == "I066") {
      f_aPG(gv_alv[lv_blF]);
    }
  }
  if (lv_blL == "I05Q" || lv_blL == "I05R" || lv_blL == "I05S") {
    lv_blI = true;
    if (GetHeroLevel(gv_alv[lv_blF]) > 64) {
      if (lv_blL == "I05Q" && GetHeroStr(gv_alv[lv_blF], false) > 3) {
        SetHeroStr(gv_alv[lv_blF], GetHeroStr(gv_alv[lv_blF], false) - 3, true);
        lv_blI = false;
      }
      if (lv_blL == "I05S" && GetHeroInt(gv_alv[lv_blF], false) > 3) {
        SetHeroInt(gv_alv[lv_blF], GetHeroInt(gv_alv[lv_blF], false) - 3, true);
        lv_blI = false;
      }
      if (lv_blL == "I05R" && GetHeroAgi(gv_alv[lv_blF], false) > 3) {
        SetHeroAgi(gv_alv[lv_blF], GetHeroAgi(gv_alv[lv_blF], false) - 3, true);
        lv_blI = false;
      }
      if (lv_blI) {
        SetPlayerState(
          GetOwningPlayer(lv_blC),
          PLAYER_STATE_RESOURCE_GOLD,
          GetPlayerState(GetOwningPlayer(lv_blC), PLAYER_STATE_RESOURCE_GOLD) +
            25000
        );
        SetPlayerState(
          GetOwningPlayer(lv_blC),
          PLAYER_STATE_RESOURCE_LUMBER,
          GetPlayerState(
            GetOwningPlayer(lv_blC),
            PLAYER_STATE_RESOURCE_LUMBER
          ) + 1
        );
        f_aMm(
          GetOwningPlayer(lv_blC),
          "You cannot retrain a stat if it has less than 3 points!"
        );
      } else {
        UnitModifySkillPoints(gv_alv[lv_blF], 2);
      }
    } else {
      SetPlayerState(
        GetOwningPlayer(lv_blC),
        PLAYER_STATE_RESOURCE_GOLD,
        GetPlayerState(GetOwningPlayer(lv_blC), PLAYER_STATE_RESOURCE_GOLD) +
          25000
      );
      SetPlayerState(
        GetOwningPlayer(lv_blC),
        PLAYER_STATE_RESOURCE_LUMBER,
        GetPlayerState(GetOwningPlayer(lv_blC), PLAYER_STATE_RESOURCE_LUMBER) +
          1
      );
      f_aMm(
        GetOwningPlayer(lv_blC),
        "You cannot use retraining tomes till level 65!"
      );
    }
  }
  lv_blC = null;
  lv_blD = null;
}
function f_blM() {
  SetItemPlayer(GetSoldItem(), GetOwningPlayer(GetBuyingUnit()), true);
}
function f_blN() {
  var lv_blO = GetEnteringUnit();
  var lv_blP = true;
  if (IsUnitAlly(lv_blO, Player(8)) || IsUnitType(lv_blO, UNIT_TYPE_GIANT)) {
    lv_blP = false;
  } else {
    if (
      GetOwningPlayer(lv_blO) == Player(10) ||
      GetOwningPlayer(lv_blO) == Player(11)
    ) {
      lv_blP = false;
    } else {
      if (
        lv_blO == gv_akI ||
        lv_blO == gv_akv ||
        lv_blO == gv_alc ||
        lv_blO == gv_akx ||
        lv_blO == gv_akz ||
        lv_blO == gv_akE
      ) {
        lv_blP = false;
      } else {
        if (
          lv_blO == gv_akM ||
          lv_blO == gv_akZ ||
          lv_blO == gv_akJ ||
          lv_blO == gv_akO ||
          lv_blO == gv_akp ||
          lv_blO == gv_ald ||
          lv_blO == gv_akY
        ) {
          lv_blP = false;
        }
      }
    }
  }
  lv_blO = null;
  return lv_blP;
}
function f_blQ() {
  KillUnit(GetEnteringUnit());
}
function f_blR() {
  var lv_blS = GetOwningPlayer(GetTriggerUnit());
  var lv_blT = GetPlayerId(lv_blS);
  if (gv_alw[lv_blT] != "Athens") {
    if (lv_blS == GetLocalPlayer()) {
      StartSound(gv_agc);
    }
    DisplayTextToPlayer(
      lv_blS,
      0.0,
      0.0,
      "|cffff8000Entered: |r|cff0080ffAthens|r"
    );
    gv_alw[lv_blT] = "Athens";
  }
  lv_blS = null;
}
function f_blU() {
  return IsUnitType(GetTriggerUnit(), UNIT_TYPE_HERO) != null;
}
function f_blV() {
  var lv_blW = CreateRegion();
  var lv_blX = CreateTrigger();
  RegionAddRect(lv_blW, gv_acT);
  TriggerRegisterEnterRegion(lv_blX, lv_blW, null);
  TriggerAddCondition(lv_blX, Condition(f_blU));
  TriggerAddAction(lv_blX, f_blR);
  lv_blW = null;
}
function f_blY() {
  var lv_blZ = GetOwningPlayer(GetTriggerUnit());
  var lv_bma = GetPlayerId(lv_blZ);
  if (gv_alw[lv_bma] != "Goblins") {
    gv_amU = gv_amU + 1;
    ForceAddPlayer(gv_amW, lv_blZ);
    if (lv_blZ == GetLocalPlayer()) {
      StartSound(gv_agc);
    }
    DisplayTextToPlayer(
      lv_blZ,
      0.0,
      0.0,
      "|cffff8000Entered: |r|cff0080ffAthen's Fields (Western)|r"
    );
    gv_alw[lv_bma] = "Goblins";
  }
  if (!gv_amT) {
    gv_amT = true;
    EnableTrigger(gv_aiz);
    ExecuteFunc("f_bmb");
  }
  lv_blZ = null;
}
function f_bmc() {
  return IsUnitType(GetTriggerUnit(), UNIT_TYPE_HERO) != null;
}
function f_bmd() {
  var lv_bme = CreateRegion();
  var lv_bmf = CreateTrigger();
  RegionAddRect(lv_bme, gv_aee);
  RegionAddRect(lv_bme, gv_aef);
  TriggerRegisterEnterRegion(lv_bmf, lv_bme, null);
  TriggerAddCondition(lv_bmf, Condition(f_bmc));
  TriggerAddAction(lv_bmf, f_blY);
  lv_bme = null;
}
function f_bmg() {
  var lv_bmh = GetEnumPlayer();
  if (gv_alw[GetPlayerId(lv_bmh)] != "Goblins") {
    ForceRemovePlayer(gv_amW, lv_bmh);
    gv_amU = gv_amU - 1;
  }
  lv_bmh = null;
}
function f_bmi() {
  var lv_bmj = GetEnumUnit();
  GroupRemoveUnit(gv_amS, lv_bmj);
  RemoveUnit(lv_bmj);
  lv_bmj = null;
}
function f_bmk() {
  var lv_bml = GetEnumUnit();
  if (GetWidgetLife(lv_bml) < 0.406) {
    GroupRemoveUnit(gv_amS, lv_bml);
  } else {
    gv_amV = gv_amV + 1;
    if (RectContainsCoords(gv_aef, GetUnitX(lv_bml), GetUnitY(lv_bml))) {
      IssuePointOrderById(
        lv_bml,
        gv_aar,
        GetRandomReal(1600, 5024),
        GetRandomReal(8512, 12960)
      );
    } else {
      IssuePointOrderById(
        lv_bml,
        gv_aar,
        GetRandomReal(3328, 5312),
        GetRandomReal(12288, 14912)
      );
    }
  }
  lv_bml = null;
}
function f_bmb() {
  var lv_bmm = 0;
  var lv_bmn;
  ForForce(gv_amW, f_bmg);
  if (gv_amU == 0) {
    DisableTrigger(gv_aiz);
    ForGroup(gv_amS, f_bmi);
    gv_amV = 0;
    gv_amT = false;
    return false;
  }
  gv_amV = 0;
  ForGroup(gv_amS, f_bmk);
  do {
    if (lv_bmm > gv_amU) {
      break;
    }
    if (gv_amV >= gv_amX) {
      if (true) {
        break;
      }
    }
    lv_bmn = CreateUnit(
      gv_amY,
      gv_alx.getInt(GetRandomInt(400, 414)),
      GetRandomReal(1664, 4864),
      GetRandomReal(9056, 12736),
      0.0
    );
    IssuePointOrderById(
      lv_bmn,
      gv_aar,
      GetRandomReal(3328, 5312),
      GetRandomReal(12288, 14912)
    );
    GroupAddUnit(gv_amS, lv_bmn);
    lv_bmn = CreateUnit(
      gv_amY,
      gv_alx.getInt(GetRandomInt(400, 414)),
      GetRandomReal(3200, 5152),
      GetRandomReal(13792, 14752),
      0.0
    );
    IssuePointOrderById(
      lv_bmn,
      gv_aar,
      GetRandomReal(3328, 5312),
      GetRandomReal(12288, 14912)
    );
    GroupAddUnit(gv_amS, lv_bmn);
    gv_amV = gv_amV + 2;
    lv_bmm = lv_bmm + 1;
  } while (true);
  lv_bmn = null;
  return false;
}
function f_bmo() {
  var lv_bmp = GetOwningPlayer(GetTriggerUnit());
  var lv_bmq = GetPlayerId(lv_bmp);
  if (gv_alw[lv_bmq] != "Bandits") {
    gv_anb = gv_anb + 1;
    ForceAddPlayer(gv_and, lv_bmp);
    if (lv_bmp == GetLocalPlayer()) {
      StartSound(gv_agc);
    }
    DisplayTextToPlayer(
      lv_bmp,
      0.0,
      0.0,
      "|cffff8000Entered: |r|cff0080ffAthen's Fields (Southern)|r"
    );
    gv_alw[lv_bmq] = "Bandits";
  }
  if (!gv_ana) {
    gv_ana = true;
    EnableTrigger(gv_aiA);
    ExecuteFunc("f_bmr");
  }
  lv_bmp = null;
}
function f_bms() {
  return IsUnitType(GetTriggerUnit(), UNIT_TYPE_HERO) != null;
}
function f_bmt() {
  var lv_bmu = CreateRegion();
  var lv_bmv = CreateTrigger();
  RegionAddRect(lv_bmu, gv_acV);
  RegionAddRect(lv_bmu, gv_acW);
  RegionAddRect(lv_bmu, gv_acX);
  TriggerRegisterEnterRegion(lv_bmv, lv_bmu, null);
  TriggerAddCondition(lv_bmv, Condition(f_bms));
  TriggerAddAction(lv_bmv, f_bmo);
  lv_bmu = null;
}
function f_bmw() {
  var lv_bmx = GetEnumPlayer();
  if (gv_alw[GetPlayerId(lv_bmx)] != "Bandits") {
    ForceRemovePlayer(gv_and, lv_bmx);
    gv_anb = gv_anb - 1;
  }
  lv_bmx = null;
}
function f_bmy() {
  var lv_bmz = GetEnumUnit();
  GroupRemoveUnit(gv_amZ, lv_bmz);
  RemoveUnit(lv_bmz);
  lv_bmz = null;
}
function f_bmA() {
  var lv_bmB = GetEnumUnit();
  if (GetWidgetLife(lv_bmB) < 0.406) {
    GroupRemoveUnit(gv_amZ, lv_bmB);
  } else {
    gv_anc = gv_anc + 1;
    if (
      RectContainsCoords(gv_acV, GetUnitX(lv_bmB), GetUnitY(lv_bmB)) ||
      RectContainsCoords(gv_acW, GetUnitX(lv_bmB), GetUnitY(lv_bmB))
    ) {
      IssuePointOrderById(
        lv_bmB,
        gv_aar,
        GetRandomReal(2912, 8224),
        GetRandomReal(3456, 7968)
      );
    } else {
      if (RectContainsCoords(gv_acX, GetUnitX(lv_bmB), GetUnitY(lv_bmB))) {
        IssuePointOrderById(
          lv_bmB,
          gv_aar,
          GetRandomReal(1824, 2912),
          GetRandomReal(1600, 4032)
        );
      } else {
        IssuePointOrderById(
          lv_bmB,
          gv_aar,
          GetRandomReal(3253, 5386.67),
          GetRandomReal(2560, 6645.33)
        );
      }
    }
  }
  lv_bmB = null;
}
function f_bmr() {
  var lv_bmC = 1;
  var lv_bmD;
  ForForce(gv_and, f_bmw);
  if (gv_anb == 0) {
    DisableTrigger(gv_aiA);
    ForGroup(gv_amZ, f_bmy);
    gv_anc = 0;
    gv_ana = false;
    return false;
  }
  gv_anc = 0;
  ForGroup(gv_amZ, f_bmA);
  do {
    if (lv_bmC > gv_anb) {
      break;
    }
    if (gv_anc >= 20) {
      if (true) {
        break;
      }
    }
    lv_bmD = CreateUnit(
      gv_amY,
      gv_alx.getInt(GetRandomInt(416, 435)),
      GetRandomReal(3328, 5024),
      GetRandomReal(3624, 7072),
      0.0
    );
    IssuePointOrderById(
      lv_bmD,
      gv_aar,
      GetRandomReal(3253, 5386.67),
      GetRandomReal(2560, 6645.33)
    );
    GroupAddUnit(gv_amZ, lv_bmD);
    lv_bmD = CreateUnit(
      gv_amY,
      gv_alx.getInt(GetRandomInt(416, 435)),
      GetRandomReal(5024, 7776),
      GetRandomReal(3456, 7936),
      0.0
    );
    IssuePointOrderById(
      lv_bmD,
      gv_aar,
      GetRandomReal(3253, 5386.67),
      GetRandomReal(2560, 6645.33)
    );
    GroupAddUnit(gv_amZ, lv_bmD);
    gv_anc = gv_anc + 2;
    lv_bmC = lv_bmC + 1;
  } while (true);
  lv_bmD = null;
  return false;
}
function f_bmE() {
  return GetUnitTypeId(GetEnteringUnit()) == "nwlt";
}
function f_bmF() {
  gv_alM = GetEnteringUnit();
  GroupRemoveUnit(gv_ane, gv_alM);
  RemoveUnit(gv_alM);
}
function f_bmG() {
  var lv_bmH = GetOwningPlayer(GetTriggerUnit());
  var lv_bmI = GetPlayerId(lv_bmH);
  if (gv_alw[lv_bmI] != "Wolves") {
    gv_ang = gv_ang + 1;
    ForceAddPlayer(gv_ani, lv_bmH);
    if (lv_bmH == GetLocalPlayer()) {
      StartSound(gv_agc);
    }
    DisplayTextToPlayer(
      lv_bmH,
      0.0,
      0.0,
      "|cffff8000Entered: |r|cff0080ffAthen's Fields (Eastern)|r"
    );
    gv_alw[lv_bmI] = "Wolves";
  }
  if (!gv_anf) {
    gv_anf = true;
    EnableTrigger(gv_aiC);
    ExecuteFunc("f_bmJ");
  }
  lv_bmH = null;
}
function f_bmK() {
  return IsUnitType(GetTriggerUnit(), UNIT_TYPE_HERO) != null;
}
function f_bmL() {
  var lv_bmM = CreateRegion();
  var lv_bmN = CreateTrigger();
  RegionAddRect(lv_bmM, gv_afI);
  RegionAddRect(lv_bmM, gv_afJ);
  RegionAddRect(lv_bmM, gv_afK);
  RegionAddRect(lv_bmM, gv_afL);
  RegionAddRect(lv_bmM, gv_afM);
  TriggerRegisterEnterRegion(lv_bmN, lv_bmM, null);
  TriggerAddCondition(lv_bmN, Condition(f_bmK));
  TriggerAddAction(lv_bmN, f_bmG);
  lv_bmM = null;
}
function f_bmO() {
  var lv_bmP = GetEnumPlayer();
  if (gv_alw[GetPlayerId(lv_bmP)] != "Wolves") {
    ForceRemovePlayer(gv_ani, lv_bmP);
    gv_ang = gv_ang - 1;
  }
  lv_bmP = null;
}
function f_bmQ() {
  var lv_bmR = GetEnumUnit();
  GroupRemoveUnit(gv_ane, lv_bmR);
  RemoveUnit(lv_bmR);
  lv_bmR = null;
}
function f_bmS() {
  var lv_bmT = GetEnumUnit();
  if (GetWidgetLife(lv_bmT) < 0.406) {
    GroupRemoveUnit(gv_ane, lv_bmT);
  } else {
    gv_anh = gv_anh + 1;
    if (
      RectContainsCoords(gv_afI, GetUnitX(lv_bmT), GetUnitY(lv_bmT)) ||
      RectContainsCoords(gv_afJ, GetUnitX(lv_bmT), GetUnitY(lv_bmT))
    ) {
      IssuePointOrderById(
        lv_bmT,
        gv_aar,
        GetRandomReal(10336, 11616),
        GetRandomReal(11136, 13184)
      );
    } else {
      if (
        RectContainsCoords(gv_afK, GetUnitX(lv_bmT), GetUnitY(lv_bmT)) ||
        RectContainsCoords(gv_afL, GetUnitX(lv_bmT), GetUnitY(lv_bmT)) ||
        RectContainsCoords(gv_afM, GetUnitX(lv_bmT), GetUnitY(lv_bmT))
      ) {
        IssuePointOrderById(
          lv_bmT,
          gv_aar,
          GetRandomReal(11616, 13504),
          GetRandomReal(11968, 14432)
        );
      } else {
        IssuePointOrderById(
          lv_bmT,
          gv_aar,
          GetRandomReal(11436.8, 12505.6),
          GetRandomReal(12288, 9834.67)
        );
      }
    }
  }
  lv_bmT = null;
}
function f_bmJ() {
  var lv_bmU = 0;
  var lv_bmV;
  ForForce(gv_ani, f_bmO);
  if (gv_ang == 0) {
    DisableTrigger(gv_aiC);
    ForGroup(gv_ane, f_bmQ);
    gv_anh = 0;
    gv_anf = false;
    return false;
  }
  gv_anh = 0;
  ForGroup(gv_ane, f_bmS);
  do {
    if (lv_bmU > gv_ang) {
      break;
    }
    if (gv_anh >= gv_anj) {
      if (true) {
        break;
      }
    }
    lv_bmV = CreateUnit(
      gv_amY,
      gv_alx.getInt(415),
      GetRandomReal(12480, 14208),
      GetRandomReal(13760, 14432),
      0.0
    );
    IssuePointOrderById(
      lv_bmV,
      gv_aar,
      GetRandomReal(11436.8, 12505.6),
      GetRandomReal(12288, 9834.67)
    );
    GroupAddUnit(gv_ane, lv_bmV);
    lv_bmV = CreateUnit(
      gv_amY,
      gv_alx.getInt(415),
      GetRandomReal(10912, 12512),
      GetRandomReal(12352, 12832),
      0.0
    );
    IssuePointOrderById(
      lv_bmV,
      gv_aar,
      GetRandomReal(11436.8, 12505.6),
      GetRandomReal(12288, 9834.67)
    );
    GroupAddUnit(gv_ane, lv_bmV);
    gv_anh = gv_anh + 2;
    lv_bmU = lv_bmU + 1;
  } while (true);
  lv_bmV = null;
  return false;
}
function f_bmW() {
  var lv_bmX = GetOwningPlayer(GetTriggerUnit());
  var lv_bmY = GetPlayerId(lv_bmX);
  if (GetHeroLevel(GetTriggerUnit()) > 24) {
    if (gv_alw[lv_bmY] != "Trolls") {
      gv_anm = gv_anm + 1;
      ForceAddPlayer(gv_ano, lv_bmX);
      if (lv_bmX == GetLocalPlayer()) {
        StartSound(gv_agc);
      }
      DisplayTextToPlayer(
        lv_bmX,
        0.0,
        0.0,
        "|cffff8000Entered: |r|cff0080ffTroll Foothills|r"
      );
      gv_alw[lv_bmY] = "Trolls";
    }
    if (!gv_anl) {
      gv_anl = true;
      EnableTrigger(gv_aiD);
      ExecuteFunc("f_bmZ");
    }
  } else {
    DisplayTimedTextToPlayer(
      lv_bmX,
      0.0,
      0.0,
      5,
      S2S(gv_alw[77] + "You are too weak to enter this level 25 area!")
    );
    gv_alM = f_aJt(
      Player(PLAYER_NEUTRAL_PASSIVE),
      GetUnitX(GetTriggerUnit()),
      GetUnitY(GetTriggerUnit()),
      2
    );
    f_aJA(gv_alM, "A077", 0);
    IssueTargetOrderById(gv_alM, 852095, GetTriggerUnit());
    f_aNn(
      GetTriggerUnit(),
      bj_DEGTORAD * (GetUnitFacing(GetTriggerUnit()) - 180)
    );
  }
  lv_bmX = null;
}
function f_bna() {
  return (
    (IsUnitType(GetTriggerUnit(), UNIT_TYPE_HERO) &&
      IsUnitInGroup(GetTriggerUnit(), gv_acB) == false) != null
  );
}
function f_bnb() {
  var lv_bnc = CreateRegion();
  var lv_bnd = CreateTrigger();
  RegionAddRect(lv_bnc, gv_aft);
  RegionAddRect(lv_bnc, gv_afu);
  RegionAddRect(lv_bnc, gv_afv);
  RegionAddRect(lv_bnc, gv_afw);
  RegionAddRect(lv_bnc, gv_afx);
  RegionAddRect(lv_bnc, gv_afy);
  RegionAddRect(lv_bnc, gv_afz);
  RegionAddRect(lv_bnc, gv_afA);
  TriggerRegisterEnterRegion(lv_bnd, lv_bnc, null);
  TriggerAddCondition(lv_bnd, Condition(f_bna));
  TriggerAddAction(lv_bnd, f_bmW);
  lv_bnc = null;
}
function f_bne() {
  var lv_bnf = GetEnumPlayer();
  if (gv_alw[GetPlayerId(lv_bnf)] != "Trolls") {
    ForceRemovePlayer(gv_ano, lv_bnf);
    gv_anm = gv_anm - 1;
  }
  lv_bnf = null;
}
function f_bng() {
  var lv_bnh = GetEnumUnit();
  GroupRemoveUnit(gv_ank, lv_bnh);
  RemoveUnit(lv_bnh);
  lv_bnh = null;
}
function f_bni() {
  var lv_bnj = GetEnumUnit();
  if (GetWidgetLife(lv_bnj) < 0.406) {
    GroupRemoveUnit(gv_ank, lv_bnj);
  } else {
    gv_ann = gv_ann + 1;
    if (RectContainsCoords(gv_aft, GetUnitX(lv_bnj), GetUnitY(lv_bnj))) {
      IssuePointOrderById(
        lv_bnj,
        gv_aar,
        GetRandomReal(-10715, -3840),
        GetRandomReal(96, 3424)
      );
    } else {
      if (
        RectContainsCoords(gv_afu, GetUnitX(lv_bnj), GetUnitY(lv_bnj)) ||
        RectContainsCoords(gv_afA, GetUnitX(lv_bnj), GetUnitY(lv_bnj))
      ) {
        IssuePointOrderById(
          lv_bnj,
          gv_aar,
          GetRandomReal(-10144, -960),
          GetRandomReal(3424, 5344)
        );
      } else {
        if (
          RectContainsCoords(gv_afv, GetUnitX(lv_bnj), GetUnitY(lv_bnj)) ||
          RectContainsCoords(gv_afw, GetUnitX(lv_bnj), GetUnitY(lv_bnj)) ||
          RectContainsCoords(gv_afx, GetUnitX(lv_bnj), GetUnitY(lv_bnj))
        ) {
          IssuePointOrderById(
            lv_bnj,
            gv_aar,
            GetRandomReal(-4608, 1600),
            GetRandomReal(6240, 9376)
          );
        } else {
          if (
            RectContainsCoords(gv_afy, GetUnitX(lv_bnj), GetUnitY(lv_bnj)) ||
            RectContainsCoords(gv_afz, GetUnitX(lv_bnj), GetUnitY(lv_bnj))
          ) {
            IssuePointOrderById(
              lv_bnj,
              gv_aar,
              GetRandomReal(-2208, 1152),
              GetRandomReal(8448, 10080)
            );
          } else {
            IssuePointOrderById(
              lv_bnj,
              gv_aar,
              GetRandomReal(-5848, 576),
              GetRandomReal(5536, 6940)
            );
          }
        }
      }
    }
  }
  lv_bnj = null;
}
function f_bmZ() {
  var lv_bnk = 0;
  var lv_bnl;
  ForForce(gv_ano, f_bne);
  if (gv_anm == 0) {
    DisableTrigger(gv_aiD);
    ForGroup(gv_ank, f_bng);
    gv_ann = 0;
    gv_anl = false;
    return false;
  }
  gv_ann = 0;
  ForGroup(gv_ank, f_bni);
  do {
    if (lv_bnk > gv_anm) {
      break;
    }
    if (gv_ann >= gv_anp) {
      if (true) {
        break;
      }
    }
    lv_bnl = CreateUnit(
      gv_amY,
      gv_alx.getInt(GetRandomInt(436, 450)),
      GetRandomReal(-9184, -3712),
      GetRandomReal(1536, 2560),
      0.0
    );
    IssuePointOrderById(
      lv_bnl,
      gv_aar,
      GetRandomReal(-5848, 576),
      GetRandomReal(5536, 6940)
    );
    GroupAddUnit(gv_ank, lv_bnl);
    lv_bnl = CreateUnit(
      gv_amY,
      gv_alx.getInt(GetRandomInt(436, 450)),
      GetRandomReal(-5568, -5024),
      GetRandomReal(4352, 7296),
      0.0
    );
    IssuePointOrderById(
      lv_bnl,
      gv_aar,
      GetRandomReal(-5848, 576),
      GetRandomReal(5536, 6940)
    );
    GroupAddUnit(gv_ank, lv_bnl);
    lv_bnl = CreateUnit(
      gv_amY,
      gv_alx.getInt(GetRandomInt(436, 450)),
      GetRandomReal(-2560, -1376),
      GetRandomReal(6592, 9632),
      0.0
    );
    IssuePointOrderById(
      lv_bnl,
      gv_aar,
      GetRandomReal(-5848, 576),
      GetRandomReal(5536, 6940)
    );
    GroupAddUnit(gv_ank, lv_bnl);
    lv_bnl = CreateUnit(
      gv_amY,
      gv_alx.getInt(GetRandomInt(436, 450)),
      GetRandomReal(-3584, 96),
      GetRandomReal(5408, 6592),
      0.0
    );
    IssuePointOrderById(
      lv_bnl,
      gv_aar,
      GetRandomReal(-5848, 576),
      GetRandomReal(5536, 6940)
    );
    GroupAddUnit(gv_ank, lv_bnl);
    gv_ann = gv_ann + 4;
    lv_bnk = lv_bnk + 1;
  } while (true);
  lv_bnl = null;
  return false;
}
function f_bnm() {
  var lv_bnn = GetOwningPlayer(GetTriggerUnit());
  var lv_bno = GetPlayerId(lv_bnn);
  if (gv_alw[lv_bno] != "Corinth") {
    if (lv_bnn == GetLocalPlayer()) {
      StartSound(gv_agc);
    }
    DisplayTextToPlayer(
      lv_bnn,
      0.0,
      0.0,
      "|cffff8000Entered: |r|cff0080ffCorinth|r"
    );
    gv_alw[lv_bno] = "Corinth";
  }
  lv_bnn = null;
}
function f_bnp() {
  return IsUnitType(GetTriggerUnit(), UNIT_TYPE_HERO) != null;
}
function f_bnq() {
  var lv_bnr = CreateRegion();
  var lv_bns = CreateTrigger();
  RegionAddRect(lv_bnr, gv_adv);
  TriggerRegisterEnterRegion(lv_bns, lv_bnr, null);
  TriggerAddCondition(lv_bns, Condition(f_bnp));
  TriggerAddAction(lv_bns, f_bnm);
  lv_bnr = null;
}
function f_bnt() {
  return (
    (IsUnitType(GetTriggerUnit(), UNIT_TYPE_HERO) &&
      IsUnitInGroup(GetTriggerUnit(), gv_acB) == false) != null
  );
}
function f_bnu() {
  var lv_bnv = GetOwningPlayer(GetTriggerUnit());
  var lv_bnw = GetPlayerId(lv_bnv);
  if (GetHeroLevel(GetTriggerUnit()) > 39) {
    if (gv_alw[lv_bnw] != "MinotaurB") {
      if (lv_bnv == GetLocalPlayer()) {
        StartSound(gv_agc);
      }
      DisplayTextToPlayer(
        lv_bnv,
        0.0,
        0.0,
        "|cffff8000Entered: |r|cff0080ffMinotaur Mountains (Base)|r"
      );
      gv_alw[lv_bnw] = "MinotaurB";
    }
  } else {
    if (lv_bnw < 9) {
      DisplayTimedTextToPlayer(
        lv_bnv,
        0.0,
        0.0,
        5,
        S2S(gv_alw[77] + "You are too weak to enter this level 40 area!")
      );
      SetUnitPositionLoc(GetTriggerUnit(), gv_aaP[2]);
      PanCameraToTimedForPlayer(
        lv_bnv,
        GetUnitX(GetTriggerUnit()),
        GetUnitY(GetTriggerUnit()),
        0.0
      );
    }
  }
  lv_bnv = null;
}
function f_bnx() {
  var lv_bny = CreateRegion();
  var lv_bnz = CreateTrigger();
  RegionAddRect(lv_bny, gv_aew);
  RegionAddRect(lv_bny, gv_aex);
  TriggerRegisterEnterRegion(lv_bnz, lv_bny, null);
  TriggerAddCondition(lv_bnz, Condition(f_bnt));
  TriggerAddAction(lv_bnz, f_bnu);
  lv_bny = null;
}
function f_bnA() {
  return (
    (IsUnitType(GetTriggerUnit(), UNIT_TYPE_HERO) &&
      IsUnitInGroup(GetTriggerUnit(), gv_acB) == false) != null
  );
}
function f_bnB() {
  var lv_bnC = GetOwningPlayer(GetTriggerUnit());
  var lv_bnD = GetPlayerId(lv_bnC);
  if (GetHeroLevel(GetTriggerUnit()) > 34) {
    if (gv_alw[lv_bnD] != "Harpies") {
      gv_ans = gv_ans + 1;
      ForceAddPlayer(gv_anu, lv_bnC);
      if (lv_bnC == GetLocalPlayer()) {
        StartSound(gv_agc);
      }
      DisplayTextToPlayer(
        lv_bnC,
        0.0,
        0.0,
        "|cffff8000Entered: |r|cff0080ffMinotaur Mountains (Crest)|r"
      );
      gv_alw[lv_bnD] = "Harpies";
    }
    if (!gv_anr) {
      gv_anr = true;
      EnableTrigger(gv_aiE);
      ExecuteFunc("f_bnE");
    }
  } else {
    if (lv_bnD < 9) {
      DisplayTimedTextToPlayer(
        lv_bnC,
        0.0,
        0.0,
        10,
        S2S(gv_alw[77] + "You are too weak to enter this level 35 area!")
      );
      gv_alM = f_aJt(
        Player(PLAYER_NEUTRAL_PASSIVE),
        GetUnitX(GetTriggerUnit()),
        GetUnitY(GetTriggerUnit()),
        2
      );
      f_aJA(gv_alM, "A077", 0);
      IssueTargetOrderById(gv_alM, 852095, GetTriggerUnit());
      f_aNn(
        GetTriggerUnit(),
        bj_DEGTORAD * (GetUnitFacing(GetTriggerUnit()) - 180)
      );
    }
  }
  lv_bnC = null;
}
function f_bnF() {
  var lv_bnG = CreateTrigger();
  var lv_bnH = CreateRegion();
  RegionAddRect(lv_bnH, gv_aet);
  RegionAddRect(lv_bnH, gv_aeu);
  RegionAddRect(lv_bnH, gv_aev);
  TriggerRegisterEnterRegion(lv_bnG, lv_bnH, null);
  TriggerAddCondition(lv_bnG, Condition(f_bnA));
  TriggerAddAction(lv_bnG, f_bnB);
  lv_bnH = null;
}
function f_bnI() {
  var lv_bnJ = GetEnumPlayer();
  if (gv_alw[GetPlayerId(lv_bnJ)] != "Harpies") {
    ForceRemovePlayer(gv_anu, lv_bnJ);
    gv_ans = gv_ans - 1;
  }
  lv_bnJ = null;
}
function f_bnK() {
  var lv_bnL = GetEnumUnit();
  GroupRemoveUnit(gv_anq, lv_bnL);
  RemoveUnit(lv_bnL);
  lv_bnL = null;
}
function f_bnM() {
  var lv_bnN = GetEnumUnit();
  if (GetWidgetLife(lv_bnN) < 0.406) {
    GroupRemoveUnit(gv_anq, lv_bnN);
  } else {
    gv_ant = gv_ant + 1;
    if (
      RectContainsCoords(gv_aet, GetUnitX(lv_bnN), GetUnitY(lv_bnN)) ||
      RectContainsCoords(gv_aeu, GetUnitX(lv_bnN), GetUnitY(lv_bnN))
    ) {
      IssuePointOrderById(
        lv_bnN,
        gv_aar,
        GetRandomReal(-8864, -5600),
        GetRandomReal(6752, 9184)
      );
    } else {
      if (RectContainsCoords(gv_aev, GetUnitX(lv_bnN), GetUnitY(lv_bnN))) {
        IssuePointOrderById(
          lv_bnN,
          gv_aar,
          GetRandomReal(-8832, -7008),
          GetRandomReal(6080, 6752)
        );
      } else {
        IssuePointOrderById(
          lv_bnN,
          gv_aar,
          GetRandomReal(-8850.67, -5888),
          GetRandomReal(6752, 7786.67)
        );
      }
    }
  }
  lv_bnN = null;
}
function f_bnE() {
  var lv_bnO = 0;
  var lv_bnP;
  ForForce(gv_anu, f_bnI);
  if (gv_ans == 0) {
    DisableTrigger(gv_aiE);
    ForGroup(gv_anq, f_bnK);
    gv_ant = 0;
    gv_anr = false;
    return false;
  }
  gv_ant = 0;
  ForGroup(gv_anq, f_bnM);
  do {
    if (lv_bnO > gv_ans) {
      break;
    }
    if (gv_ant >= gv_anv) {
      if (true) {
        break;
      }
    }
    lv_bnP = CreateUnit(
      gv_amY,
      gv_alx.getInt(451),
      GetRandomReal(-8448, -6816),
      GetRandomReal(6368, 8128),
      0.0
    );
    IssuePointOrderById(
      lv_bnP,
      gv_aar,
      GetRandomReal(-8850.67, -5888),
      GetRandomReal(6752, 7786.67)
    );
    GroupAddUnit(gv_anq, lv_bnP);
    lv_bnP = CreateUnit(
      gv_amY,
      gv_alx.getInt(451),
      GetRandomReal(-6688, -5056),
      GetRandomReal(7424, 9184),
      0.0
    );
    IssuePointOrderById(
      lv_bnP,
      gv_aar,
      GetRandomReal(-8850.67, -5888),
      GetRandomReal(6752, 7786.67)
    );
    GroupAddUnit(gv_anq, lv_bnP);
    gv_ant = gv_ant + 2;
    lv_bnO = lv_bnO + 1;
  } while (true);
  lv_bnP = null;
  return false;
}
function f_bnQ() {
  return (
    (IsUnitType(GetTriggerUnit(), UNIT_TYPE_HERO) &&
      IsUnitInGroup(GetTriggerUnit(), gv_acB) == false) != null
  );
}
function f_bnR() {
  var lv_bnS = GetOwningPlayer(GetTriggerUnit());
  var lv_bnT = GetPlayerId(lv_bnS);
  if (GetHeroLevel(GetTriggerUnit()) > 39) {
    if (gv_alw[lv_bnT] != "Peak") {
      gv_any = gv_any + 1;
      ForceAddPlayer(gv_anA, lv_bnS);
      if (lv_bnS == GetLocalPlayer()) {
        StartSound(gv_agc);
      }
      DisplayTextToPlayer(
        lv_bnS,
        0.0,
        0.0,
        "|cffff8000Entered: |r|cff0080ffMinotaur Mountains (Peak)|r"
      );
      gv_alw[lv_bnT] = "Peak";
    }
    if (!gv_anx) {
      gv_anx = true;
      EnableTrigger(gv_aiF);
      ExecuteFunc("f_bnU");
    }
  } else {
    if (lv_bnT < 9) {
      DisplayTimedTextToPlayer(
        lv_bnS,
        0.0,
        0.0,
        10,
        S2S(gv_alw[77] + "You are too weak to enter this level 40 area!")
      );
      gv_alM = f_aJt(
        Player(PLAYER_NEUTRAL_PASSIVE),
        GetUnitX(GetTriggerUnit()),
        GetUnitY(GetTriggerUnit()),
        2
      );
      f_aJA(gv_alM, "A077", 0);
      IssueTargetOrderById(gv_alM, 852095, GetTriggerUnit());
      SetUnitPositionLoc(GetTriggerUnit(), gv_aaP[2]);
      PanCameraToTimedForPlayer(
        lv_bnS,
        GetUnitX(GetTriggerUnit()),
        GetUnitY(GetTriggerUnit()),
        0.0
      );
    }
  }
  lv_bnS = null;
}
function f_bnV() {
  var lv_bnW = CreateTrigger();
  var lv_bnX = CreateRegion();
  RegionAddRect(lv_bnX, gv_aey);
  RegionAddRect(lv_bnX, gv_aez);
  TriggerRegisterEnterRegion(lv_bnW, lv_bnX, null);
  TriggerAddCondition(lv_bnW, Condition(f_bnQ));
  TriggerAddAction(lv_bnW, f_bnR);
}
function f_bnY() {
  var lv_bnZ = GetEnumPlayer();
  if (gv_alw[GetPlayerId(lv_bnZ)] != "Peak") {
    ForceRemovePlayer(gv_anA, lv_bnZ);
    gv_any = gv_any - 1;
  }
  lv_bnZ = null;
}
function f_boa() {
  var lv_bob = GetEnumUnit();
  GroupRemoveUnit(gv_anw, lv_bob);
  RemoveUnit(lv_bob);
  lv_bob = null;
}
function f_boc() {
  var lv_bod = GetEnumUnit();
  if (GetWidgetLife(lv_bod) < 0.406) {
    GroupRemoveUnit(gv_anw, lv_bod);
  } else {
    gv_anz = gv_anz + 1;
    if (RectContainsCoords(gv_aey, GetUnitX(lv_bod), GetUnitY(lv_bod))) {
      IssuePointOrderById(
        lv_bod,
        gv_aar,
        GetRandomReal(-14560, -8832),
        GetRandomReal(6304, 12320)
      );
    } else {
      if (RectContainsCoords(gv_aez, GetUnitX(lv_bod), GetUnitY(lv_bod))) {
        IssuePointOrderById(
          lv_bod,
          gv_aar,
          GetRandomReal(-14752, -11264),
          GetRandomReal(12320, 13376)
        );
      } else {
        IssuePointOrderById(
          lv_bod,
          gv_aar,
          GetRandomReal(-14656, -10047),
          GetRandomReal(9312, 12848)
        );
      }
    }
  }
  lv_bod = null;
}
function f_bnU() {
  var lv_boe = 0;
  var lv_bof;
  ForForce(gv_anA, f_bnY);
  if (gv_any == 0) {
    DisableTrigger(gv_aiF);
    ForGroup(gv_anw, f_boa);
    gv_anz = 0;
    gv_anx = false;
    return false;
  }
  gv_anz = 0;
  ForGroup(gv_anw, f_boc);
  do {
    if (lv_boe > gv_any) {
      break;
    }
    if (gv_anz >= gv_anB) {
      if (true) {
        break;
      }
    }
    lv_bof = CreateUnit(
      gv_amY,
      gv_alx.getInt(452),
      GetRandomReal(-11712, -9344),
      GetRandomReal(10784, 11712),
      0.0
    );
    IssuePointOrderById(
      lv_bof,
      gv_aar,
      GetRandomReal(-14656, -10047),
      GetRandomReal(9312, 12848)
    );
    GroupAddUnit(gv_anw, lv_bof);
    lv_bof = CreateUnit(
      gv_amY,
      gv_alx.getInt(452),
      GetRandomReal(-14592, -13824),
      GetRandomReal(9152, 10240),
      0.0
    );
    IssuePointOrderById(
      lv_bof,
      gv_aar,
      GetRandomReal(-14656, -10047),
      GetRandomReal(9312, 12848)
    );
    GroupAddUnit(gv_anw, lv_bof);
    lv_bof = CreateUnit(
      gv_amY,
      gv_alx.getInt(452),
      GetRandomReal(-12288, -10048),
      GetRandomReal(6624, 7520),
      0.0
    );
    IssuePointOrderById(
      lv_bof,
      gv_aar,
      GetRandomReal(-14656, -10047),
      GetRandomReal(9312, 12848)
    );
    GroupAddUnit(gv_anw, lv_bof);
    gv_anz = gv_anz + 3;
    lv_boe = lv_boe + 1;
  } while (true);
  lv_bof = null;
  return false;
}
function f_bog() {
  return IsUnitType(GetTriggerUnit(), UNIT_TYPE_HERO) != null;
}
function f_boh() {
  var lv_boi = GetOwningPlayer(GetTriggerUnit());
  var lv_boj = GetPlayerId(lv_boi);
  if (GetHeroLevel(GetTriggerUnit()) > 54) {
    if (gv_alw[lv_boj] != "CreteT") {
      if (lv_boi == GetLocalPlayer()) {
        StartSound(gv_agc);
      }
      DisplayTextToPlayer(
        lv_boi,
        0.0,
        0.0,
        "|cffff8000Entered: |r|cff0080ffIsle of Crete|r"
      );
      gv_alw[lv_boj] = "CreteT";
    }
  } else {
    if (lv_boj < 9) {
      DisplayTimedTextToPlayer(
        lv_boi,
        0.0,
        0.0,
        10,
        S2S(
          gv_alw[77] +
            "You are too weak to enter this level 55 area, you are transported to Athens!"
        )
      );
      SetUnitPositionLoc(GetTriggerUnit(), gv_aaP[1]);
      PanCameraToTimedForPlayer(
        lv_boi,
        GetUnitX(GetTriggerUnit()),
        GetUnitY(GetTriggerUnit()),
        0.0
      );
    }
  }
  lv_boi = null;
}
function f_bok() {
  var lv_bol = CreateRegion();
  var lv_bom = CreateTrigger();
  RegionAddRect(lv_bol, gv_adB);
  TriggerRegisterEnterRegion(lv_bom, lv_bol, null);
  TriggerAddCondition(lv_bom, Condition(f_bog));
  TriggerAddAction(lv_bom, f_boh);
  lv_bol = null;
}
function f_bon() {
  return (
    (IsUnitType(GetTriggerUnit(), UNIT_TYPE_HERO) &&
      IsUnitInGroup(GetTriggerUnit(), gv_acB) == false) != null
  );
}
function f_boo() {
  var lv_bop = GetOwningPlayer(GetTriggerUnit());
  var lv_boq = GetPlayerId(lv_bop);
  if (GetHeroLevel(GetTriggerUnit()) > 54) {
    if (gv_alw[lv_boq] != "Naga") {
      gv_anE = gv_anE + 1;
      ForceAddPlayer(gv_anG, lv_bop);
      if (lv_bop == GetLocalPlayer()) {
        StartSound(gv_agc);
      }
      DisplayTextToPlayer(
        lv_bop,
        0.0,
        0.0,
        "|cffff8000Entered: |r|cff0080ffCrete Wilderness|r"
      );
      gv_alw[lv_boq] = "Naga";
    }
    if (!gv_anD) {
      gv_anD = true;
      EnableTrigger(gv_aiG);
      ExecuteFunc("f_bor");
    }
  } else {
    if (lv_boq < 9) {
      DisplayTimedTextToPlayer(
        lv_bop,
        0.0,
        0.0,
        10,
        S2S(gv_alw[77] + "You are too weak to enter this level 55 area!")
      );
      SetUnitPositionLoc(GetTriggerUnit(), gv_aaP[2]);
      PanCameraToTimedForPlayer(
        lv_bop,
        GetUnitX(GetTriggerUnit()),
        GetUnitY(GetTriggerUnit()),
        0.0
      );
    }
  }
  lv_bop = null;
}
function f_bos() {
  var lv_bot = CreateTrigger();
  var lv_bou = CreateRegion();
  RegionAddRect(lv_bou, gv_adx);
  RegionAddRect(lv_bou, gv_ady);
  RegionAddRect(lv_bou, gv_adz);
  RegionAddRect(lv_bou, gv_adA);
  TriggerRegisterEnterRegion(lv_bot, lv_bou, null);
  TriggerAddCondition(lv_bot, Condition(f_bon));
  TriggerAddAction(lv_bot, f_boo);
}
function f_bov() {
  var lv_bow = GetEnumPlayer();
  if (gv_alw[GetPlayerId(lv_bow)] != "Naga") {
    ForceRemovePlayer(gv_anG, lv_bow);
    gv_anE = gv_anE - 1;
  }
  lv_bow = null;
}
function f_box() {
  var lv_boy = GetEnumUnit();
  GroupRemoveUnit(gv_anC, lv_boy);
  RemoveUnit(lv_boy);
  lv_boy = null;
}
function f_boz() {
  var lv_boA = GetEnumUnit();
  if (GetWidgetLife(lv_boA) < 0.406) {
    GroupRemoveUnit(gv_anC, lv_boA);
  } else {
    gv_anF = gv_anF + 1;
    if (
      RectContainsCoords(gv_adx, GetUnitX(lv_boA), GetUnitY(lv_boA)) ||
      RectContainsCoords(gv_ady, GetUnitX(lv_boA), GetUnitY(lv_boA))
    ) {
      IssuePointOrderById(
        lv_boA,
        gv_aar,
        GetRandomReal(1792, 6048),
        GetRandomReal(-6592, -3616)
      );
    } else {
      if (
        RectContainsCoords(gv_adz, GetUnitX(lv_boA), GetUnitY(lv_boA)) ||
        RectContainsCoords(gv_adA, GetUnitX(lv_boA), GetUnitY(lv_boA))
      ) {
        IssuePointOrderById(
          lv_boA,
          gv_aar,
          GetRandomReal(2944, 5152),
          GetRandomReal(-8480, -6592)
        );
      } else {
        IssuePointOrderById(
          lv_boA,
          gv_aar,
          GetRandomReal(2592, 4592),
          GetRandomReal(-7376, -5016)
        );
      }
    }
  }
  lv_boA = null;
}
function f_bor() {
  var lv_boB = 0;
  var lv_boC;
  ForForce(gv_anG, f_bov);
  if (gv_anE == 0) {
    DisableTrigger(gv_aiG);
    ForGroup(gv_anC, f_box);
    gv_anF = 0;
    gv_anD = false;
    return false;
  }
  gv_anF = 0;
  ForGroup(gv_anC, f_boz);
  do {
    if (lv_boB > gv_anE) {
      break;
    }
    if (gv_anF >= gv_anH) {
      if (true) {
        break;
      }
    }
    lv_boC = CreateUnit(
      gv_amY,
      gv_alx.getInt(GetRandomInt(453, 467)),
      GetRandomReal(3584, 4224),
      GetRandomReal(-7392, -6336),
      0.0
    );
    IssuePointOrderById(
      lv_boC,
      gv_aar,
      GetRandomReal(2592, 4592),
      GetRandomReal(-7376, -5016)
    );
    GroupAddUnit(gv_anC, lv_boC);
    lv_boC = CreateUnit(
      gv_amY,
      gv_alx.getInt(GetRandomInt(453, 467)),
      GetRandomReal(2880, 5184),
      GetRandomReal(-3648, -3424),
      0.0
    );
    IssuePointOrderById(
      lv_boC,
      gv_aar,
      GetRandomReal(2592, 4592),
      GetRandomReal(-7376, -5016)
    );
    GroupAddUnit(gv_anC, lv_boC);
    gv_anF = gv_anF + 2;
    lv_boB = lv_boB + 1;
  } while (true);
  lv_boC = null;
  return false;
}
function f_boD() {
  return (
    (IsUnitType(GetTriggerUnit(), UNIT_TYPE_HERO) &&
      IsUnitInGroup(GetTriggerUnit(), gv_acB) == false) != null
  );
}
function f_boE() {
  var lv_boF = GetOwningPlayer(GetTriggerUnit());
  var lv_boG = GetPlayerId(lv_boF);
  if (GetHeroLevel(GetTriggerUnit()) > 74) {
    if (gv_alw[lv_boG] != "Satyr") {
      gv_anK = gv_anK + 1;
      ForceAddPlayer(gv_anM, lv_boF);
      if (lv_boF == GetLocalPlayer()) {
        StartSound(gv_agc);
      }
      DisplayTextToPlayer(
        lv_boF,
        0.0,
        0.0,
        "|cffff8000Entered: |r|cff0080ffSatyr Woodlands|r"
      );
      gv_alw[lv_boG] = "Satyr";
    }
    if (!gv_anJ) {
      gv_anJ = true;
      EnableTrigger(gv_aiH);
      ExecuteFunc("f_boH");
    }
  } else {
    if (lv_boG < 9) {
      DisplayTimedTextToPlayer(
        lv_boF,
        0.0,
        0.0,
        10,
        S2S(gv_alw[77] + "You are too weak to enter this level 75 area!")
      );
      SetUnitPositionLoc(GetTriggerUnit(), gv_aaP[2]);
      PanCameraToTimedForPlayer(
        lv_boF,
        GetUnitX(GetTriggerUnit()),
        GetUnitY(GetTriggerUnit()),
        0.0
      );
    }
  }
  lv_boF = null;
}
function f_boI() {
  var lv_boJ = CreateTrigger();
  var lv_boK = CreateRegion();
  RegionAddRect(lv_boK, gv_aeX);
  RegionAddRect(lv_boK, gv_aeY);
  RegionAddRect(lv_boK, gv_aeZ);
  RegionAddRect(lv_boK, gv_afa);
  TriggerRegisterEnterRegion(lv_boJ, lv_boK, null);
  TriggerAddCondition(lv_boJ, Condition(f_boD));
  TriggerAddAction(lv_boJ, f_boE);
}
function f_boL() {
  var lv_boM = GetEnumPlayer();
  if (gv_alw[GetPlayerId(lv_boM)] != "Satyr") {
    ForceRemovePlayer(gv_anM, lv_boM);
    gv_anK = gv_anK - 1;
  }
  lv_boM = null;
}
function f_boN() {
  var lv_boO = GetEnumUnit();
  GroupRemoveUnit(gv_anI, lv_boO);
  RemoveUnit(lv_boO);
  lv_boO = null;
}
function f_boP() {
  var lv_boQ = GetEnumUnit();
  if (GetWidgetLife(lv_boQ) < 0.406) {
    GroupRemoveUnit(gv_anI, lv_boQ);
  } else {
    gv_anL = gv_anL + 1;
    if (RectContainsCoords(gv_aeX, GetUnitX(lv_boQ), GetUnitY(lv_boQ))) {
      IssuePointOrderById(
        lv_boQ,
        gv_aar,
        GetRandomReal(-10880, -4832),
        GetRandomReal(-4512, -3296)
      );
    } else {
      if (
        RectContainsCoords(gv_aeY, GetUnitX(lv_boQ), GetUnitY(lv_boQ)) ||
        RectContainsCoords(gv_aeY, GetUnitX(lv_boQ), GetUnitY(lv_boQ))
      ) {
        IssuePointOrderById(
          lv_boQ,
          gv_aar,
          GetRandomReal(-7808, -3552),
          GetRandomReal(-3296, -571)
        );
      } else {
        if (RectContainsCoords(gv_aeZ, GetUnitX(lv_boQ), GetUnitY(lv_boQ))) {
          IssuePointOrderById(
            lv_boQ,
            gv_aar,
            GetRandomReal(-3584, -488),
            GetRandomReal(-1568, -367)
          );
        } else {
          IssuePointOrderById(
            lv_boQ,
            gv_aar,
            GetRandomReal(-6784, -3434),
            GetRandomReal(-3168, -720)
          );
        }
      }
    }
  }
  lv_boQ = null;
}
function f_boH() {
  var lv_boR = 0;
  var lv_boS;
  ForForce(gv_anM, f_boL);
  if (gv_anK == 0) {
    DisableTrigger(gv_aiH);
    ForGroup(gv_anI, f_boN);
    gv_anL = 0;
    gv_anJ = false;
    return false;
  }
  gv_anL = 0;
  ForGroup(gv_anI, f_boP);
  do {
    if (lv_boR > gv_anK) {
      break;
    }
    if (gv_anL >= 20) {
      if (true) {
        break;
      }
    }
    lv_boS = CreateUnit(
      gv_amY,
      gv_alx.getInt(GetRandomInt(468, 487)),
      GetRandomReal(-8736, -7872),
      GetRandomReal(-4640, -3584),
      0.0
    );
    IssuePointOrderById(
      lv_boS,
      gv_aar,
      GetRandomReal(-6784, -3434),
      GetRandomReal(-3168, -720)
    );
    GroupAddUnit(gv_anI, lv_boS);
    lv_boS = CreateUnit(
      gv_amY,
      gv_alx.getInt(GetRandomInt(468, 487)),
      GetRandomReal(-7296, -6528),
      GetRandomReal(-1536, -384),
      0.0
    );
    IssuePointOrderById(
      lv_boS,
      gv_aar,
      GetRandomReal(-6784, -3434),
      GetRandomReal(-3168, -720)
    );
    GroupAddUnit(gv_anI, lv_boS);
    lv_boS = CreateUnit(
      gv_amY,
      gv_alx.getInt(GetRandomInt(468, 487)),
      GetRandomReal(-2432, -1920),
      GetRandomReal(-1600, 0.0),
      0.0
    );
    IssuePointOrderById(
      lv_boS,
      gv_aar,
      GetRandomReal(-6784, -3434),
      GetRandomReal(-3168, -720)
    );
    GroupAddUnit(gv_anI, lv_boS);
    gv_anL = gv_anL + 3;
    lv_boR = lv_boR + 1;
  } while (true);
  lv_boS = null;
  return false;
}
function f_boT() {
  return (
    (IsUnitType(GetTriggerUnit(), UNIT_TYPE_HERO) &&
      IsUnitInGroup(GetTriggerUnit(), gv_acB) == false) != null
  );
}
function f_boU() {
  var lv_boV = GetOwningPlayer(GetTriggerUnit());
  var lv_boW = GetPlayerId(lv_boV);
  if (GetHeroLevel(GetTriggerUnit()) > 84) {
    if (gv_alw[lv_boW] != "Treant") {
      gv_anP = gv_anP + 1;
      ForceAddPlayer(gv_anR, lv_boV);
      if (lv_boV == GetLocalPlayer()) {
        StartSound(gv_agc);
      }
      DisplayTextToPlayer(
        lv_boV,
        0.0,
        0.0,
        "|cffff8000Entered: |r|cff0080ffEvil Forest|r"
      );
      gv_alw[lv_boW] = "Treant";
    }
    if (!gv_anO) {
      gv_anO = true;
      EnableTrigger(gv_aiI);
      ExecuteFunc("f_boX");
    }
  } else {
    if (lv_boW < 9) {
      DisplayTimedTextToPlayer(
        lv_boV,
        0.0,
        0.0,
        10,
        S2S(gv_alw[77] + "You are too weak to enter this level 85 area!")
      );
      SetUnitPositionLoc(GetTriggerUnit(), gv_aaP[2]);
      PanCameraToTimedForPlayer(
        lv_boV,
        GetUnitX(GetTriggerUnit()),
        GetUnitY(GetTriggerUnit()),
        0.0
      );
    }
  }
  lv_boV = null;
}
function f_boY() {
  var lv_boZ = CreateTrigger();
  var lv_bpa = CreateRegion();
  RegionAddRect(lv_bpa, gv_adM);
  RegionAddRect(lv_bpa, gv_adN);
  RegionAddRect(lv_bpa, gv_adO);
  RegionAddRect(lv_bpa, gv_adP);
  RegionAddRect(lv_bpa, gv_adQ);
  TriggerRegisterEnterRegion(lv_boZ, lv_bpa, null);
  TriggerAddCondition(lv_boZ, Condition(f_boT));
  TriggerAddAction(lv_boZ, f_boU);
}
function f_bpb() {
  var lv_bpc = GetEnumPlayer();
  if (gv_alw[GetPlayerId(lv_bpc)] != "Treant") {
    ForceRemovePlayer(gv_anR, lv_bpc);
    gv_anP = gv_anP - 1;
  }
  lv_bpc = null;
}
function f_bpd() {
  var lv_bpe = GetEnumUnit();
  GroupRemoveUnit(gv_anN, lv_bpe);
  RemoveUnit(lv_bpe);
  lv_bpe = null;
}
function f_bpf() {
  var lv_bpg = GetEnumUnit();
  if (GetWidgetLife(lv_bpg) < 0.406) {
    GroupRemoveUnit(gv_anN, lv_bpg);
  } else {
    gv_anQ = gv_anQ + 1;
    if (RectContainsCoords(gv_adM, GetUnitX(lv_bpg), GetUnitY(lv_bpg))) {
      IssuePointOrderById(
        lv_bpg,
        gv_aar,
        GetRandomReal(-13024, -11136),
        GetRandomReal(-4960, -2126)
      );
    } else {
      if (RectContainsCoords(gv_adN, GetUnitX(lv_bpg), GetUnitY(lv_bpg))) {
        IssuePointOrderById(
          lv_bpg,
          gv_aar,
          GetRandomReal(-12416, -9216),
          GetRandomReal(-6048, -4608)
        );
      } else {
        if (
          RectContainsCoords(gv_adO, GetUnitX(lv_bpg), GetUnitY(lv_bpg)) ||
          RectContainsCoords(gv_adQ, GetUnitX(lv_bpg), GetUnitY(lv_bpg))
        ) {
          IssuePointOrderById(
            lv_bpg,
            gv_aar,
            GetRandomReal(-4960, -3456),
            GetRandomReal(-7680, -4512)
          );
        } else {
          if (RectContainsCoords(gv_adP, GetUnitX(lv_bpg), GetUnitY(lv_bpg))) {
            IssuePointOrderById(
              lv_bpg,
              gv_aar,
              GetRandomReal(-8556.8, -3456),
              GetRandomReal(-9888, -5348)
            );
          } else {
            IssuePointOrderById(
              lv_bpg,
              gv_aar,
              GetRandomReal(-8556.8, -5256),
              GetRandomReal(-6764.8, -5268)
            );
          }
        }
      }
    }
  }
  lv_bpg = null;
}
function f_boX() {
  var lv_bph = 0;
  var lv_bpi;
  ForForce(gv_anR, f_bpb);
  if (gv_anP == 0) {
    DisableTrigger(gv_aiI);
    ForGroup(gv_anN, f_bpd);
    gv_anQ = 0;
    gv_anO = false;
    return false;
  }
  gv_anQ = 0;
  ForGroup(gv_anN, f_bpf);
  do {
    if (lv_bph > gv_anP) {
      break;
    }
    if (gv_anQ >= 20) {
      if (true) {
        break;
      }
    }
    lv_bpi = CreateUnit(
      gv_amY,
      gv_alx.getInt(GetRandomInt(488, 501)),
      GetRandomReal(-12928, -12384),
      GetRandomReal(-3424, -2240),
      0.0
    );
    IssuePointOrderById(
      lv_bpi,
      gv_aar,
      GetRandomReal(-8556.8, -5256),
      GetRandomReal(-6764.8, -5268)
    );
    GroupAddUnit(gv_anN, lv_bpi);
    lv_bpi = CreateUnit(
      gv_amY,
      gv_alx.getInt(GetRandomInt(488, 501)),
      GetRandomReal(-2912, -2368),
      GetRandomReal(-6080, -4800),
      0.0
    );
    IssuePointOrderById(
      lv_bpi,
      gv_aar,
      GetRandomReal(-8556.8, -5256),
      GetRandomReal(-6764.8, -5268)
    );
    GroupAddUnit(gv_anN, lv_bpi);
    lv_bpi = CreateUnit(
      gv_amY,
      gv_alx.getInt(GetRandomInt(488, 501)),
      GetRandomReal(-7360, -6720),
      GetRandomReal(-8128, -6944),
      0.0
    );
    IssuePointOrderById(
      lv_bpi,
      gv_aar,
      GetRandomReal(-8556.8, -5256),
      GetRandomReal(-6764.8, -5268)
    );
    GroupAddUnit(gv_anN, lv_bpi);
    lv_bpi = CreateUnit(
      gv_amY,
      gv_alx.getInt(GetRandomInt(488, 501)),
      GetRandomReal(-5824, -5440),
      GetRandomReal(-9664, -8512),
      0.0
    );
    IssuePointOrderById(
      lv_bpi,
      gv_aar,
      GetRandomReal(-8556.8, -5256),
      GetRandomReal(-6764.8, -5268)
    );
    GroupAddUnit(gv_anN, lv_bpi);
    gv_anQ = gv_anQ + 4;
    lv_bph = lv_bph + 1;
  } while (true);
  lv_bpi = null;
  return false;
}
function f_bpj() {
  return (
    (IsUnitType(GetTriggerUnit(), UNIT_TYPE_HERO) &&
      IsUnitInGroup(GetTriggerUnit(), gv_acB) == false) != null
  );
}
function f_bpk() {
  var lv_bpl = GetOwningPlayer(GetTriggerUnit());
  var lv_bpm = GetPlayerId(lv_bpl);
  if (GetHeroLevel(GetTriggerUnit()) > 84) {
    if (gv_alw[lv_bpm] != "Sparta") {
      if (lv_bpl == GetLocalPlayer()) {
        StartSound(gv_agc);
      }
      DisplayTextToPlayer(
        lv_bpl,
        0.0,
        0.0,
        "|cffff8000Entered: |r|cff0080ffSparta|r"
      );
      gv_alw[lv_bpm] = "Sparta";
    }
  } else {
    if (lv_bpm < 9) {
      DisplayTimedTextToPlayer(
        lv_bpl,
        0.0,
        0.0,
        10,
        S2S(gv_alw[77] + "You are too weak to enter this level 85 area!")
      );
      SetUnitPositionLoc(GetTriggerUnit(), gv_aaP[2]);
      PanCameraToTimedForPlayer(
        lv_bpl,
        GetUnitX(GetTriggerUnit()),
        GetUnitY(GetTriggerUnit()),
        0.0
      );
    }
  }
  lv_bpl = null;
}
function f_bpn() {
  var lv_bpo = CreateRegion();
  var lv_bpp = CreateTrigger();
  RegionAddRect(lv_bpo, gv_afh);
  TriggerRegisterEnterRegion(lv_bpp, lv_bpo, null);
  TriggerAddCondition(lv_bpp, Condition(f_bpj));
  TriggerAddAction(lv_bpp, f_bpk);
  lv_bpo = null;
}
function f_bpq() {
  return (
    (IsUnitType(GetTriggerUnit(), UNIT_TYPE_HERO) &&
      IsUnitInGroup(GetTriggerUnit(), gv_acB) == false) != null
  );
}
function f_bpr() {
  var lv_bps = GetOwningPlayer(GetTriggerUnit());
  var lv_bpt = GetPlayerId(lv_bps);
  if (GetHeroLevel(GetTriggerUnit()) > 99) {
    if (gv_alw[lv_bpt] != "Centaurs") {
      gv_anU = gv_anU + 1;
      ForceAddPlayer(gv_anW, lv_bps);
      if (lv_bps == GetLocalPlayer()) {
        StartSound(gv_agc);
      }
      DisplayTextToPlayer(
        lv_bps,
        0.0,
        0.0,
        "|cffff8000Entered: |r|cff0080ffCentaurian Canyons|r"
      );
      gv_alw[lv_bpt] = "Centaurs";
    }
    if (!gv_anT) {
      gv_anT = true;
      EnableTrigger(gv_aiJ);
      ExecuteFunc("f_bpu");
    }
  } else {
    if (lv_bpt < 9) {
      DisplayTimedTextToPlayer(
        lv_bps,
        0.0,
        0.0,
        10,
        S2S(gv_alw[77] + "You are too weak to enter this level 100 area!")
      );
      SetUnitPositionLoc(GetTriggerUnit(), gv_aaP[4]);
      PanCameraToTimedForPlayer(
        lv_bps,
        GetUnitX(GetTriggerUnit()),
        GetUnitY(GetTriggerUnit()),
        0.0
      );
    }
  }
  lv_bps = null;
}
function f_bpv() {
  var lv_bpw = CreateTrigger();
  var lv_bpx = CreateRegion();
  RegionAddRect(lv_bpx, gv_adn);
  RegionAddRect(lv_bpx, gv_ado);
  RegionAddRect(lv_bpx, gv_adp);
  RegionAddRect(lv_bpx, gv_adq);
  TriggerRegisterEnterRegion(lv_bpw, lv_bpx, null);
  TriggerAddCondition(lv_bpw, Condition(f_bpq));
  TriggerAddAction(lv_bpw, f_bpr);
}
function f_bpy() {
  var lv_bpz = GetEnumPlayer();
  if (gv_alw[GetPlayerId(lv_bpz)] != "Centaurs") {
    ForceRemovePlayer(gv_anW, lv_bpz);
    gv_anU = gv_anU - 1;
  }
  lv_bpz = null;
}
function f_bpA() {
  var lv_bpB = GetEnumUnit();
  GroupRemoveUnit(gv_anS, lv_bpB);
  RemoveUnit(lv_bpB);
  lv_bpB = null;
}
function f_bpC() {
  var lv_bpD = GetEnumUnit();
  if (GetWidgetLife(lv_bpD) < 0.406) {
    GroupRemoveUnit(gv_anS, lv_bpD);
  } else {
    gv_anV = gv_anV + 1;
    if (
      RectContainsCoords(gv_adn, GetUnitX(lv_bpD), GetUnitY(lv_bpD)) ||
      RectContainsCoords(gv_adq, GetUnitX(lv_bpD), GetUnitY(lv_bpD))
    ) {
      IssuePointOrderById(
        lv_bpD,
        gv_aar,
        GetRandomReal(-13152, -1024),
        GetRandomReal(-11648, -9888)
      );
    } else {
      if (RectContainsCoords(gv_adp, GetUnitX(lv_bpD), GetUnitY(lv_bpD))) {
        IssuePointOrderById(
          lv_bpD,
          gv_aar,
          GetRandomReal(-10752, -2144),
          GetRandomReal(-13920, -11616)
        );
      } else {
        IssuePointOrderById(
          lv_bpD,
          gv_aar,
          GetRandomReal(-9632, -3865),
          GetRandomReal(-12000, -10480)
        );
      }
    }
  }
  lv_bpD = null;
}
function f_bpu() {
  var lv_bpE = 0;
  var lv_bpF;
  ForForce(gv_anW, f_bpy);
  if (gv_anU == 0) {
    DisableTrigger(gv_aiJ);
    ForGroup(gv_anS, f_bpA);
    gv_anV = 0;
    gv_anT = false;
    return false;
  }
  gv_anV = 0;
  ForGroup(gv_anS, f_bpC);
  do {
    if (lv_bpE > gv_anU) {
      break;
    }
    if (gv_anV >= 20) {
      if (true) {
        break;
      }
    }
    lv_bpF = CreateUnit(
      gv_amY,
      gv_alx.getInt(GetRandomInt(502, 515)),
      GetRandomReal(-6272, -4096),
      GetRandomReal(-11648, -11008),
      0.0
    );
    IssuePointOrderById(
      lv_bpF,
      gv_aar,
      GetRandomReal(-9632, -3865),
      GetRandomReal(-12000, -10480)
    );
    GroupAddUnit(gv_anS, lv_bpF);
    lv_bpF = CreateUnit(
      gv_amY,
      gv_alx.getInt(GetRandomInt(502, 515)),
      GetRandomReal(-12704, -11712),
      GetRandomReal(-12352, -10624),
      0.0
    );
    IssuePointOrderById(
      lv_bpF,
      gv_aar,
      GetRandomReal(-9632, -3865),
      GetRandomReal(-12000, -10480)
    );
    GroupAddUnit(gv_anS, lv_bpF);
    lv_bpF = CreateUnit(
      gv_amY,
      gv_alx.getInt(GetRandomInt(502, 515)),
      GetRandomReal(-3328, -906),
      GetRandomReal(-12640, -12384),
      0.0
    );
    IssuePointOrderById(
      lv_bpF,
      gv_aar,
      GetRandomReal(-9632, -3865),
      GetRandomReal(-12000, -10480)
    );
    GroupAddUnit(gv_anS, lv_bpF);
    gv_anV = gv_anV + 3;
    lv_bpE = lv_bpE + 1;
  } while (true);
  lv_bpF = null;
  return false;
}
function f_bpG() {
  return (
    GetUnitTypeId(GetEnteringUnit()) == "nfor" &&
    GetUnitTypeId(GetEnteringUnit()) == "ngh2" &&
    GetUnitTypeId(GetEnteringUnit()) == "ngh1"
  );
}
function f_bpH() {
  gv_alM = GetEnteringUnit();
  GroupRemoveUnit(gv_anX, gv_alM);
  RemoveUnit(gv_alM);
}
function f_bpI() {
  return (
    (IsUnitType(GetTriggerUnit(), UNIT_TYPE_HERO) &&
      IsUnitInGroup(GetTriggerUnit(), gv_acB) == false) != null
  );
}
function f_bpJ() {
  var lv_bpK = GetOwningPlayer(GetTriggerUnit());
  var lv_bpL = GetPlayerId(lv_bpK);
  if (GetHeroLevel(GetTriggerUnit()) > 109) {
    if (gv_alw[lv_bpL] != "Undead") {
      gv_anZ = gv_anZ + 1;
      ForceAddPlayer(gv_aob, lv_bpK);
      if (lv_bpK == GetLocalPlayer()) {
        StartSound(gv_agc);
      }
      DisplayTextToPlayer(
        lv_bpK,
        0.0,
        0.0,
        "|cffff8000Entered: |r|cff0080ffThe Rhodes|r"
      );
      gv_alw[lv_bpL] = "Undead";
    }
    if (!gv_anY) {
      gv_anY = true;
      EnableTrigger(gv_aiL);
      ExecuteFunc("f_bpM");
    }
  } else {
    if (lv_bpL < 9) {
      DisplayTimedTextToPlayer(
        lv_bpK,
        0.0,
        0.0,
        10,
        S2S(
          gv_alw[77] +
            "You are too weak to enter this level 110 area, you are transported to the Evil Forest!"
        )
      );
      SetUnitPosition(GetTriggerUnit(), -12864, -1376);
      PanCameraToTimedForPlayer(
        lv_bpK,
        GetUnitX(GetTriggerUnit()),
        GetUnitY(GetTriggerUnit()),
        0.0
      );
    }
  }
  lv_bpK = null;
}
function f_bpN() {
  var lv_bpO = CreateTrigger();
  var lv_bpP = CreateRegion();
  RegionAddRect(lv_bpP, gv_aeT);
  RegionAddRect(lv_bpP, gv_aeU);
  RegionAddRect(lv_bpP, gv_aeS);
  RegionAddRect(lv_bpP, gv_aeR);
  TriggerRegisterEnterRegion(lv_bpO, lv_bpP, null);
  TriggerAddCondition(lv_bpO, Condition(f_bpI));
  TriggerAddAction(lv_bpO, f_bpJ);
}
function f_bpQ() {
  var lv_bpR = GetEnumPlayer();
  if (gv_alw[GetPlayerId(lv_bpR)] != "Undead") {
    ForceRemovePlayer(gv_aob, lv_bpR);
    gv_anZ = gv_anZ - 1;
  }
  lv_bpR = null;
}
function f_bpS() {
  var lv_bpT = GetEnumUnit();
  GroupRemoveUnit(gv_anX, lv_bpT);
  RemoveUnit(lv_bpT);
  lv_bpT = null;
}
function f_bpU() {
  var lv_bpV = GetEnumUnit();
  if (GetWidgetLife(lv_bpV) < 0.406) {
    GroupRemoveUnit(gv_anX, lv_bpV);
  } else {
    gv_aoa = gv_aoa + 1;
    if (GetUnitUserData(lv_bpV) == 1) {
      IssuePointOrderById(
        lv_bpV,
        gv_aar,
        GetRectCenterX(gv_afU),
        GetRectCenterY(gv_afU)
      );
      if (RectContainsCoords(gv_afU, GetUnitX(lv_bpV), GetUnitY(lv_bpV))) {
        SetUnitUserData(lv_bpV, 5);
      }
    } else {
      if (GetUnitUserData(lv_bpV) == 5) {
        IssuePointOrderById(
          lv_bpV,
          gv_aar,
          GetRectCenterX(gv_afQ),
          GetRectCenterY(gv_afQ)
        );
        if (RectContainsCoords(gv_afQ, GetUnitX(lv_bpV), GetUnitY(lv_bpV))) {
          SetUnitUserData(lv_bpV, 1);
        }
      } else {
        if (GetUnitUserData(lv_bpV) == 2) {
          IssuePointOrderById(
            lv_bpV,
            gv_aar,
            GetRectCenterX(gv_afU),
            GetRectCenterY(gv_afU)
          );
          if (RectContainsCoords(gv_afU, GetUnitX(lv_bpV), GetUnitY(lv_bpV))) {
            SetUnitUserData(lv_bpV, 6);
          }
        } else {
          if (GetUnitUserData(lv_bpV) == 6) {
            IssuePointOrderById(
              lv_bpV,
              gv_aar,
              GetRectCenterX(gv_afT),
              GetRectCenterY(gv_afT)
            );
            if (
              RectContainsCoords(gv_afT, GetUnitX(lv_bpV), GetUnitY(lv_bpV))
            ) {
              SetUnitUserData(lv_bpV, 2);
            }
          } else {
            if (GetUnitUserData(lv_bpV) == 3) {
              IssuePointOrderById(
                lv_bpV,
                gv_aar,
                GetRectCenterX(gv_afV),
                GetRectCenterY(gv_afV)
              );
              if (
                RectContainsCoords(gv_afV, GetUnitX(lv_bpV), GetUnitY(lv_bpV))
              ) {
                SetUnitUserData(lv_bpV, 7);
              }
            } else {
              if (GetUnitUserData(lv_bpV) == 7) {
                IssuePointOrderById(
                  lv_bpV,
                  gv_aar,
                  GetRectCenterX(gv_afR),
                  GetRectCenterY(gv_afR)
                );
                if (
                  RectContainsCoords(gv_afR, GetUnitX(lv_bpV), GetUnitY(lv_bpV))
                ) {
                  SetUnitUserData(lv_bpV, 3);
                }
              } else {
                if (GetUnitUserData(lv_bpV) == 4) {
                  IssuePointOrderById(
                    lv_bpV,
                    gv_aar,
                    GetRectCenterX(gv_afW),
                    GetRectCenterY(gv_afW)
                  );
                  if (
                    RectContainsCoords(
                      gv_afW,
                      GetUnitX(lv_bpV),
                      GetUnitY(lv_bpV)
                    )
                  ) {
                    SetUnitUserData(lv_bpV, 8);
                  }
                } else {
                  if (GetUnitUserData(lv_bpV) == 8) {
                    IssuePointOrderById(
                      lv_bpV,
                      gv_aar,
                      GetRectCenterX(gv_afS),
                      GetRectCenterY(gv_afS)
                    );
                    if (
                      RectContainsCoords(
                        gv_afS,
                        GetUnitX(lv_bpV),
                        GetUnitY(lv_bpV)
                      )
                    ) {
                      SetUnitUserData(lv_bpV, 4);
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }
  lv_bpV = null;
}
function f_bpM() {
  var lv_bpW = 0;
  var lv_bpX;
  ForForce(gv_aob, f_bpQ);
  if (gv_anZ == 0) {
    DisableTrigger(gv_aiL);
    ForGroup(gv_anX, f_bpS);
    gv_aoa = 0;
    gv_anY = false;
    return false;
  }
  gv_aoa = 0;
  ForGroup(gv_anX, f_bpU);
  do {
    if (lv_bpW > gv_anZ) {
      break;
    }
    if (gv_aoa >= gv_aoc) {
      if (true) {
        break;
      }
    }
    lv_bpX = CreateUnit(
      gv_amY,
      gv_alx.getInt(GetRandomInt(516, 530)),
      GetRectCenterX(gv_afQ),
      GetRectCenterY(gv_afQ),
      0.0
    );
    IssuePointOrderById(
      lv_bpX,
      gv_aar,
      GetRectCenterX(gv_afU),
      GetRectCenterY(gv_afU)
    );
    GroupAddUnit(gv_anX, lv_bpX);
    SetUnitUserData(lv_bpX, 1);
    f_aLX(
      AddSpecialEffectTarget(
        "Abilities\\Spells\\Undead\\Darksummoning\\DarkSummonTarget.mdl",
        lv_bpX,
        "origin"
      ),
      1
    );
    lv_bpX = CreateUnit(
      gv_amY,
      gv_alx.getInt(GetRandomInt(516, 530)),
      GetRectCenterX(gv_afT),
      GetRectCenterY(gv_afT),
      0.0
    );
    IssuePointOrderById(
      lv_bpX,
      gv_aar,
      GetRectCenterX(gv_afU),
      GetRectCenterY(gv_afU)
    );
    GroupAddUnit(gv_anX, lv_bpX);
    SetUnitUserData(lv_bpX, 2);
    f_aLX(
      AddSpecialEffectTarget(
        "Abilities\\Spells\\Undead\\Darksummoning\\DarkSummonTarget.mdl",
        lv_bpX,
        "origin"
      ),
      1
    );
    lv_bpX = CreateUnit(
      gv_amY,
      gv_alx.getInt(GetRandomInt(516, 530)),
      GetRectCenterX(gv_afR),
      GetRectCenterY(gv_afR),
      0.0
    );
    IssuePointOrderById(
      lv_bpX,
      gv_aar,
      GetRectCenterX(gv_afV),
      GetRectCenterY(gv_afV)
    );
    GroupAddUnit(gv_anX, lv_bpX);
    SetUnitUserData(lv_bpX, 3);
    f_aLX(
      AddSpecialEffectTarget(
        "Abilities\\Spells\\Undead\\Darksummoning\\DarkSummonTarget.mdl",
        lv_bpX,
        "origin"
      ),
      1
    );
    lv_bpX = CreateUnit(
      gv_amY,
      gv_alx.getInt(GetRandomInt(516, 530)),
      GetRectCenterX(gv_afS),
      GetRectCenterY(gv_afS),
      0.0
    );
    IssuePointOrderById(
      lv_bpX,
      gv_aar,
      GetRectCenterX(gv_afW),
      GetRectCenterY(gv_afW)
    );
    GroupAddUnit(gv_anX, lv_bpX);
    SetUnitUserData(lv_bpX, 4);
    f_aLX(
      AddSpecialEffectTarget(
        "Abilities\\Spells\\Undead\\Darksummoning\\DarkSummonTarget.mdl",
        lv_bpX,
        "origin"
      ),
      1
    );
    gv_aoa = gv_aoa + 4;
    lv_bpW = lv_bpW + 1;
  } while (true);
  lv_bpX = null;
  return false;
}
function f_bpY() {
  return (
    (IsUnitType(GetTriggerUnit(), UNIT_TYPE_HERO) &&
      IsUnitInGroup(GetTriggerUnit(), gv_acB) == false) != null
  );
}
function f_bpZ() {
  var lv_bqa = GetOwningPlayer(GetTriggerUnit());
  var lv_bqb = GetPlayerId(lv_bqa);
  if (GetHeroLevel(GetTriggerUnit()) > 129) {
    if (gv_alw[lv_bqb] != "Citadel") {
      gv_aof = gv_aof + 1;
      ForceAddPlayer(gv_aoh, lv_bqa);
      if (lv_bqa == GetLocalPlayer()) {
        StartSound(gv_agc);
      }
      DisplayTextToPlayer(
        lv_bqa,
        0.0,
        0.0,
        "|cffff8000Entered: |r|cff0080ffThe Frozen Citadel|r"
      );
      gv_alw[lv_bqb] = "Citadel";
    }
    if (!gv_aoe) {
      gv_aoe = true;
      EnableTrigger(gv_aiM);
      ExecuteFunc("f_bqc");
    }
  } else {
    if (lv_bqb < 9) {
      DisplayTimedTextToPlayer(
        lv_bqa,
        0.0,
        0.0,
        10,
        S2S(
          gv_alw[77] +
            "You are too weak to enter this level 130 area, you are transported to Draco's Encampment!"
        )
      );
      SetUnitPosition(GetTriggerUnit(), -13024, 13600);
      PanCameraToTimedForPlayer(
        lv_bqa,
        GetUnitX(GetTriggerUnit()),
        GetUnitY(GetTriggerUnit()),
        0.0
      );
    }
  }
  lv_bqa = null;
}
function f_bqd() {
  var lv_bqe = CreateTrigger();
  var lv_bqf = CreateRegion();
  RegionAddRect(lv_bqf, gv_adS);
  TriggerRegisterEnterRegion(lv_bqe, lv_bqf, null);
  TriggerAddCondition(lv_bqe, Condition(f_bpY));
  TriggerAddAction(lv_bqe, f_bpZ);
}
function f_bqg() {
  var lv_bqh = GetEnumPlayer();
  if (gv_alw[GetPlayerId(lv_bqh)] != "Citadel") {
    ForceRemovePlayer(gv_aoh, lv_bqh);
    gv_aof = gv_aof - 1;
  }
  lv_bqh = null;
}
function f_bqi() {
  var lv_bqj = GetEnumUnit();
  GroupRemoveUnit(gv_aod, lv_bqj);
  RemoveUnit(lv_bqj);
  lv_bqj = null;
}
function f_bqk() {
  var lv_bql = GetEnumUnit();
  if (GetWidgetLife(lv_bql) < 0.405) {
    GroupRemoveUnit(gv_aod, lv_bql);
  } else {
    gv_aog = gv_aog + 1;
    if (GetUnitUserData(lv_bql) == 4) {
      IssuePointOrderById(
        lv_bql,
        gv_aar,
        GetRectCenterX(gv_adT),
        GetRectCenterY(gv_adT)
      );
      if (RectContainsCoords(gv_adT, GetUnitX(lv_bql), GetUnitY(lv_bql))) {
        SetUnitUserData(lv_bql, 1);
      }
    } else {
      if (GetUnitUserData(lv_bql) == 1) {
        IssuePointOrderById(
          lv_bql,
          gv_aar,
          GetRectCenterX(gv_adU),
          GetRectCenterY(gv_adU)
        );
        if (RectContainsCoords(gv_adU, GetUnitX(lv_bql), GetUnitY(lv_bql))) {
          SetUnitUserData(lv_bql, 4);
        }
      } else {
        if (GetUnitUserData(lv_bql) == 5) {
          IssuePointOrderById(
            lv_bql,
            gv_aar,
            GetRectCenterX(gv_adV),
            GetRectCenterY(gv_adV)
          );
          if (RectContainsCoords(gv_adV, GetUnitX(lv_bql), GetUnitY(lv_bql))) {
            SetUnitUserData(lv_bql, 2);
          }
        } else {
          if (GetUnitUserData(lv_bql) == 2) {
            IssuePointOrderById(
              lv_bql,
              gv_aar,
              GetRectCenterX(gv_adW),
              GetRectCenterY(gv_adW)
            );
            if (
              RectContainsCoords(gv_adW, GetUnitX(lv_bql), GetUnitY(lv_bql))
            ) {
              SetUnitUserData(lv_bql, 5);
            }
          } else {
            if (GetUnitUserData(lv_bql) == 6) {
              IssuePointOrderById(
                lv_bql,
                gv_aar,
                GetRectCenterX(gv_adX),
                GetRectCenterY(gv_adX)
              );
              if (
                RectContainsCoords(gv_adX, GetUnitX(lv_bql), GetUnitY(lv_bql))
              ) {
                SetUnitUserData(lv_bql, 3);
              }
            } else {
              if (GetUnitUserData(lv_bql) == 3) {
                IssuePointOrderById(
                  lv_bql,
                  gv_aar,
                  GetRectCenterX(gv_adY),
                  GetRectCenterY(gv_adY)
                );
                if (
                  RectContainsCoords(gv_adY, GetUnitX(lv_bql), GetUnitY(lv_bql))
                ) {
                  SetUnitUserData(lv_bql, 6);
                }
              }
            }
          }
        }
      }
    }
  }
  lv_bql = null;
}
function f_bqc() {
  var lv_bqm;
  ForForce(gv_aoh, f_bqg);
  if (gv_aof == 0) {
    DisableTrigger(gv_aiM);
    DisableTrigger(gv_aiW);
    ForGroup(gv_anX, f_bqi);
    gv_aog = 0;
    gv_aoe = false;
    return false;
  }
  gv_aog = 0;
  ForGroup(gv_aod, f_bqk);
  if (gv_aog <= 20) {
    if (gv_aoi) {
      lv_bqm = CreateUnit(
        gv_amY,
        gv_alx.getInt(GetRandomInt(531, 533)),
        GetRectCenterX(gv_adT),
        GetRectCenterY(gv_adT),
        0.0
      );
      IssuePointOrderById(
        lv_bqm,
        gv_aar,
        GetRectCenterX(gv_adU),
        GetRectCenterY(gv_adU)
      );
      GroupAddUnit(gv_aod, lv_bqm);
      SetUnitUserData(lv_bqm, 1);
      f_aLX(
        AddSpecialEffectTarget(
          "Abilities\\Spells\\Undead\\FrostNova\\FrostNovaTarget.mdl",
          lv_bqm,
          "origin"
        ),
        1
      );
      lv_bqm = CreateUnit(
        gv_amY,
        gv_alx.getInt(GetRandomInt(531, 533)),
        GetRectCenterX(gv_adX),
        GetRectCenterY(gv_adX),
        0.0
      );
      IssuePointOrderById(
        lv_bqm,
        gv_aar,
        GetRectCenterX(gv_adY),
        GetRectCenterY(gv_adY)
      );
      GroupAddUnit(gv_aod, lv_bqm);
      SetUnitUserData(lv_bqm, 3);
      f_aLX(
        AddSpecialEffectTarget(
          "Abilities\\Spells\\Undead\\FrostNova\\FrostNovaTarget.mdl",
          lv_bqm,
          "origin"
        ),
        1
      );
      gv_aog = gv_aog + 2;
      if (gv_aoj) {
        lv_bqm = CreateUnit(
          gv_amY,
          gv_alx.getInt(GetRandomInt(531, 533)),
          GetRectCenterX(gv_adV),
          GetRectCenterY(gv_adV),
          0.0
        );
        IssuePointOrderById(
          lv_bqm,
          gv_aar,
          GetRectCenterX(gv_adW),
          GetRectCenterY(gv_adW)
        );
        GroupAddUnit(gv_aod, lv_bqm);
        SetUnitUserData(lv_bqm, 2);
        f_aLX(
          AddSpecialEffectTarget(
            "Abilities\\Spells\\Undead\\FrostNova\\FrostNovaTarget.mdl",
            lv_bqm,
            "origin"
          ),
          1
        );
        gv_aog = gv_aog + 1;
      }
    }
  }
  lv_bqm = null;
  return false;
}
function f_bqn() {
  var lv_bqo = f_aJt(
    Player(11),
    GetUnitX(GetEnumUnit()),
    GetUnitY(GetEnumUnit()),
    2
  );
  f_aJA(lv_bqo, "A057", 0);
  f_aJA(lv_bqo, "A043", 0);
  IssueTargetOrderById(lv_bqo, 852190, GetEnumUnit());
  IssueTargetOrderById(lv_bqo, 852075, GetEnumUnit());
  if (GetUnitAbilityLevel(GetEnumUnit(), "B00I") > 0) {
    UnitDamageTarget(
      gv_aaU[1],
      GetEnumUnit(),
      GetUnitState(GetEnumUnit(), UNIT_STATE_MAX_LIFE) * 0.1,
      false,
      false,
      ATTACK_TYPE_HERO,
      DAMAGE_TYPE_NORMAL,
      null
    );
  }
  lv_bqo = null;
}
function f_bqp() {
  if (GetWidgetLife(gv_aaU[1]) < 0.406) {
    DisplayTimedTextToForce(
      gv_alH,
      5,
      "|cff00ff00Atlas:|r No... How can this be?! You haven't seen the last of me mortal!"
    );
    f_aJk(gv_aok);
  } else {
    SaveInteger(
      gv_abY,
      0,
      GetHandleId(gv_aok),
      LoadInteger(gv_abY, 0, GetHandleId(gv_aok)) + 1
    );
    if (LoadInteger(gv_abY, 0, GetHandleId(gv_aok)) < 15) {
      if (!gv_aol) {
        DisplayTimedTextToForce(
          gv_alH,
          3,
          "|cffff8a08The Earth begins to shatter..."
        );
        gv_aol = true;
      }
      GroupClear(gv_abF);
      GroupEnumUnitsInRange(
        gv_abF,
        GetUnitX(gv_aaU[1]),
        GetUnitY(gv_aaU[1]),
        800,
        Condition(f_aOo)
      );
      f_aLX(
        AddSpecialEffect(
          "Abilities\\Spells\\Orc\\EarthQuake\\EarthQuakeTarget.mdl",
          GetUnitX(gv_aaU[1]),
          GetUnitY(gv_aaU[1])
        ),
        1
      );
      ForGroup(gv_abF, f_bqn);
      f_aIJ(gv_abF);
    } else {
      if (gv_aol) {
        DisplayTimedTextToForce(
          gv_alH,
          3,
          "|cffff8a08The Earth remains still..."
        );
        gv_aol = false;
      }
    }
    if (LoadInteger(gv_abY, 0, GetHandleId(gv_aok)) == 30) {
      SaveInteger(gv_abY, 0, GetHandleId(gv_aok), 0);
    }
    if (!RectContainsUnit(gv_acU, gv_aaU[1])) {
      gv_acL = GetUnitName(gv_aaU[1]);
      SetUnitPosition(
        gv_aaU[1],
        LoadInteger(gv_abT, gv_acK, StringHash(S2S(gv_acL + "_X"))),
        LoadInteger(gv_abT, gv_acK, StringHash(S2S(gv_acL + "_Y")))
      );
    }
    if (f_aNV(gv_acU) < 1) {
      PauseTimer(gv_aok);
      f_aCq(1, gv_aaU[1], gv_acU, gv_aiN);
    }
  }
}
function f_bqq() {
  DisplayTimedTextToForce(
    gv_alH,
    5,
    "|cff00ff00Altas:|r So you dare challege me? Well prepare to feel the earth shatter!"
  );
  SaveInteger(gv_abY, 0, GetHandleId(gv_aok), 0);
  gv_aol = false;
  TimerStart(gv_aok, 1, true, f_bqp);
  DisableTrigger(gv_aiN);
}
function f_bqr() {
  if (GetWidgetLife(gv_aaU[2]) < 0.406) {
    DisplayTimedTextToForce(
      gv_alH,
      5,
      "|cff00ff00Themus:|r So justice does also lies in our enemies..."
    );
    f_aJk(gv_aom);
  } else {
    if (!RectContainsUnit(gv_afr, gv_aaU[2])) {
      gv_acL = GetUnitName(gv_aaU[2]);
      SetUnitPosition(
        gv_aaU[2],
        LoadInteger(gv_abT, gv_acK, StringHash(S2S(gv_acL + "_X"))),
        LoadInteger(gv_abT, gv_acK, StringHash(S2S(gv_acL + "_Y")))
      );
    }
    if (f_aNV(gv_afr) < 1) {
      PauseTimer(gv_aom);
      f_aCq(1, gv_aaU[2], gv_afr, gv_aiO);
    }
  }
}
function f_bqs() {
  DisplayTimedTextToForce(
    gv_alH,
    5,
    "|cff00ff00Themus:|r You lack the power of Justice! In this stage you won't even come near to defeating Hades."
  );
  IssueImmediateOrderById(gv_aaU[2], 852123);
  TimerStart(gv_aom, 1, true, f_bqr);
  DisableTrigger(gv_aiO);
}
function f_bqt() {
  UnitDamageTarget(
    gv_aaU[3],
    GetEnumUnit(),
    1100 / f_azM(GetEnumUnit()),
    true,
    true,
    ATTACK_TYPE_NORMAL,
    DAMAGE_TYPE_UNIVERSAL,
    null
  );
}
function f_bqu() {
  var lv_bqv = GetEventDamageSource();
  if (
    !gv_aoo &&
    IsUnitType(lv_bqv, UNIT_TYPE_HERO) &&
    GetTriggerUnit() == gv_aaU[3] &&
    gv_aak == 0
  ) {
  } else {
    if (
      IsUnitType(lv_bqv, UNIT_TYPE_HERO) &&
      GetRandomReal(0.0, 100) < 8 &&
      GetTriggerUnit() == gv_aaU[3] &&
      LoadInteger(gv_abY, 2, GetHandleId(gv_aon)) > 2
    ) {
      SaveInteger(
        gv_abY,
        2,
        GetHandleId(gv_aon),
        LoadInteger(gv_abY, 2, GetHandleId(gv_aon)) - 6
      );
      SetUnitPosition(gv_aop, GetUnitX(lv_bqv), GetUnitY(lv_bqv));
      IssueTargetOrderById(gv_aop, 852144, lv_bqv);
      DisplayTimedTextToForce(
        gv_alH,
        5,
        "|cff00ff00Uranus:|r The skies are bent to my will!"
      );
    }
  }
  lv_bqv = null;
  return false;
}
function f_bqw() {
  if (GetWidgetLife(gv_aaU[3]) < 0.406) {
    DisplayTimedTextToForce(
      gv_alH,
      5,
      "|cff00ff00Uranus:|r Fear the skies for you shall no longer see one soon..."
    );
    f_aJk(gv_aon);
  } else {
    SaveInteger(
      gv_abY,
      0,
      GetHandleId(gv_aon),
      LoadInteger(gv_abY, 0, GetHandleId(gv_aon)) + 1
    );
    SaveInteger(
      gv_abY,
      2,
      GetHandleId(gv_aon),
      IMinBJ(LoadInteger(gv_abY, 2, GetHandleId(gv_aon)) + 1, 5)
    );
    if (LoadInteger(gv_abY, 0, GetHandleId(gv_aon)) == 5) {
      GroupClear(gv_abF);
      GroupEnumUnitsInRect(gv_abF, gv_afD, Condition(f_aOo));
      bj_groupRandomConsidered = 0;
      bj_groupRandomCurrentPick = null;
      ForGroup(gv_abF, GroupPickRandomUnitEnum);
      f_aIJ(gv_abF);
      DisplayTimedTextToForce(gv_alH, 3, "|cffff8a08Energy gathers...");
      gv_alu[40] = GetUnitX(bj_groupRandomCurrentPick);
      gv_alu[41] = GetUnitY(bj_groupRandomCurrentPick);
      f_aLX(
        AddSpecialEffect(
          "Abilities\\Spells\\Human\\FlameStrike\\FlameStrikeTarget.mdl",
          gv_alu[40],
          gv_alu[41]
        ),
        3
      );
    }
    if (LoadInteger(gv_abY, 0, GetHandleId(gv_aon)) == 8) {
      GroupClear(gv_abF);
      GroupEnumUnitsInRange(
        gv_abF,
        gv_alu[40],
        gv_alu[41],
        300,
        Condition(f_aOo)
      );
      f_aLX(
        AddSpecialEffect("MDX\\LightningWrath.mdx", gv_alu[40], gv_alu[41]),
        1
      );
      ForGroup(gv_abF, f_bqt);
      f_aIJ(gv_abF);
    }
    if (LoadInteger(gv_abY, 0, GetHandleId(gv_aon)) == 15) {
      SaveInteger(gv_abY, 0, GetHandleId(gv_aon), 0);
    }
    if (!RectContainsUnit(gv_afD, gv_aaU[3])) {
      gv_acL = GetUnitName(gv_aaU[3]);
      SetUnitPosition(
        gv_aaU[3],
        LoadInteger(gv_abT, gv_acK, StringHash(S2S(gv_acL + "_X"))),
        LoadInteger(gv_abT, gv_acK, StringHash(S2S(gv_acL + "_Y")))
      );
    }
    if (f_aNV(gv_afD) < 1) {
      PauseTimer(gv_aon);
      f_aCq(1, gv_aaU[3], gv_afD, gv_aiP);
    }
  }
}
function f_bqx() {
  DisplayTimedTextToForce(
    gv_alH,
    5,
    "|cff00ff00Uranus:|r So you really did defeat Atlas huh? I heard him but you shall scream louder!"
  );
  TimerStart(gv_aon, 1, true, f_bqw);
  gv_aoo = false;
  SaveInteger(gv_abY, 0, GetHandleId(gv_aon), 0);
  SaveInteger(gv_abY, 2, GetHandleId(gv_aon), 0);
  DisableTrigger(gv_aiP);
}
function f_bqy() {
  if (GetWidgetLife(gv_aaU[4]) < 0.406) {
    DisplayTimedTextToForce(
      gv_alH,
      5,
      "|cff00ff00Oceanus:|r I am the ocean! I can never die..."
    );
    f_aJk(gv_aoq);
    ForGroup(gv_aor, f_aOp);
    f_aIM(gv_aor);
  } else {
    SaveInteger(
      gv_abY,
      0,
      GetHandleId(gv_aoq),
      LoadInteger(gv_abY, 0, GetHandleId(gv_aoq)) + 1
    );
    if (LoadInteger(gv_abY, 0, GetHandleId(gv_aoq)) == 5) {
      DisplayTimedTextToForce(
        gv_alH,
        5,
        "|cff00ff00Oceanus:|r Rise! Those consumed by the sea!"
      );
      GroupAddUnit(
        gv_aor,
        CreateUnit(
          Player(11),
          "u001",
          GetUnitX(gv_aaU[4]) + GetRandomReal(400, 600),
          GetUnitY(gv_aaU[4]) + GetRandomReal(400, 600),
          0.0
        )
      );
      GroupAddUnit(
        gv_aor,
        CreateUnit(
          Player(11),
          "u001",
          GetUnitX(gv_aaU[4]) - GetRandomReal(400, 600),
          GetUnitY(gv_aaU[4]) - GetRandomReal(400, 600),
          0.0
        )
      );
    }
    if (LoadInteger(gv_abY, 0, GetHandleId(gv_aoq)) == 25) {
      DisplayTimedTextToForce(
        gv_alH,
        5,
        "|cff00ff00Oceanus:|r Come forth thundering tides!"
      );
      SetUnitAnimation(gv_aaU[4], "death");
      GroupClear(gv_abF);
      GroupEnumUnitsInRange(
        gv_abF,
        GetUnitX(gv_aaU[4]),
        GetUnitY(gv_aaU[4]),
        400,
        Condition(f_aOo)
      );
      do {
        bj_ghoul[23] = FirstOfGroup(gv_abF);
        if (bj_ghoul[23] == null) {
          break;
        }
        f_aNE(
          bj_ghoul[23],
          "Abilities\\Weapons\\ZigguratFrostMissile\\ZigguratFrostMissile.mdl",
          500,
          14,
          0.2,
          0.02
        );
        DestroyEffect(
          AddSpecialEffectTarget(
            "Objects\\Spawnmodels\\NightElf\\NECancelDeath\\NECancelDeath.mdl",
            bj_ghoul[23],
            "head"
          )
        );
        UnitDamageTarget(
          gv_aaU[4],
          bj_ghoul[23],
          100,
          false,
          false,
          ATTACK_TYPE_NORMAL,
          DAMAGE_TYPE_UNIVERSAL,
          null
        );
        GroupRemoveUnit(gv_abF, bj_ghoul[23]);
      } while (true);
      f_aIJ(gv_abF);
      SaveInteger(gv_abY, 0, GetHandleId(gv_aoq), 0);
    }
    if (!RectContainsUnit(gv_aeC, gv_aaU[4])) {
      gv_acL = GetUnitName(gv_aaU[4]);
      SetUnitPosition(
        gv_aaU[4],
        LoadInteger(gv_abT, gv_acK, StringHash(S2S(gv_acL + "_X"))),
        LoadInteger(gv_abT, gv_acK, StringHash(S2S(gv_acL + "_Y")))
      );
    }
    if (f_aNV(gv_aeC) < 1) {
      PauseTimer(gv_aoq);
      ForGroup(gv_aor, f_aOp);
      GroupClear(gv_aor);
      f_aCq(1, gv_aaU[4], gv_aeC, gv_aiQ);
    }
  }
}
function f_bqz() {
  DisplayTimedTextToForce(
    gv_alH,
    5,
    "|cff00ff00Oceanus:|r Imbecile, you are in my domain now. Death shall come swiftly upon these waves."
  );
  TimerStart(gv_aoq, 1, true, f_bqy);
  SaveInteger(gv_abY, 0, GetHandleId(gv_aoq), 0);
  DisableTrigger(gv_aiQ);
}
function f_bqA() {
  if (GetWidgetLife(GetEnumUnit()) > 0.405) {
    IssuePointOrderById(
      GetEnumUnit(),
      851986,
      GetRectCenterX(gv_aeW),
      GetRectCenterY(gv_aeW)
    );
  } else {
    GroupRemoveUnit(gv_aov, GetEnumUnit());
  }
}
function f_bqB() {
  ForGroup(gv_aov, f_aOp);
  GroupClear(gv_aov);
  gv_aot = 200;
  SetUnitScalePercent(gv_aaU[5], gv_aot, gv_aot, gv_aot);
  SetHeroStr(gv_aaU[5], 25, false);
  PauseTimer(gv_aos);
  DisableTrigger(gv_aou);
  if (GetWidgetLife(gv_akF) > 0.405) {
    SetUnitState(gv_akF, UNIT_STATE_LIFE, 999999);
    SetUnitState(gv_akF, UNIT_STATE_MANA, 999999);
  } else {
    gv_akF = CreateUnit(
      Player(10),
      "n007",
      LoadInteger(gv_abT, gv_acK, StringHash(S2S(gv_acL + "_X"))),
      LoadInteger(gv_abT, gv_acK, StringHash(S2S(gv_acL + "_Y"))),
      0.0
    );
  }
  gv_acL = GetUnitName(gv_akF);
  SetUnitPosition(
    gv_akF,
    LoadInteger(gv_abT, gv_acK, StringHash(S2S(gv_acL + "_X"))),
    LoadInteger(gv_abT, gv_acK, StringHash(S2S(gv_acL + "_Y")))
  );
  SetUnitFacing(
    gv_akF,
    LoadInteger(gv_abT, gv_acK, StringHash(S2S(gv_acL + "_A")))
  );
  if (GetWidgetLife(gv_akG) > 0.405) {
    SetUnitState(gv_akG, UNIT_STATE_LIFE, 999999);
    SetUnitState(gv_akG, UNIT_STATE_MANA, 999999);
  } else {
    gv_akG = CreateUnit(
      Player(10),
      "n00I",
      LoadInteger(gv_abT, gv_acK, StringHash(S2S(gv_acL + "_X"))),
      LoadInteger(gv_abT, gv_acK, StringHash(S2S(gv_acL + "_Y"))),
      0.0
    );
  }
  gv_acL = GetUnitName(gv_akG);
  SetUnitPosition(
    gv_akG,
    LoadInteger(gv_abT, gv_acK, StringHash(S2S(gv_acL + "_X"))),
    LoadInteger(gv_abT, gv_acK, StringHash(S2S(gv_acL + "_Y")))
  );
  SetUnitFacing(
    gv_akG,
    LoadInteger(gv_abT, gv_acK, StringHash(S2S(gv_acL + "_A")))
  );
  f_aCq(1, gv_aaU[5], gv_aeQ, gv_aiR);
}
function f_bqC() {
  if (GetWidgetLife(gv_aaU[5]) < 0.406) {
    DisplayTimedTextToForce(
      gv_alH,
      5,
      "|cff00ff00Rhea:|r Chronos, why have you forsaken me my husband?"
    );
    ForGroup(gv_aov, f_aOp);
    if (GetWidgetLife(gv_akF) > 0.405) {
      KillUnit(gv_akF);
    }
    if (GetWidgetLife(gv_akG) > 0.405) {
      KillUnit(gv_akG);
    }
    f_aJk(gv_aos);
  } else {
    SaveInteger(
      gv_abY,
      0,
      GetHandleId(gv_aos),
      LoadInteger(gv_abY, 0, GetHandleId(gv_aos)) + 1
    );
    if (LoadInteger(gv_abY, 0, GetHandleId(gv_aos)) == 5) {
      GroupAddUnit(gv_aov, CreateUnit(Player(11), "u002", -9344, -416, 0.0));
      ForGroup(gv_aov, f_bqA);
    }
    if (LoadInteger(gv_abY, 0, GetHandleId(gv_aos)) == 10) {
      GroupAddUnit(gv_aov, CreateUnit(Player(11), "u002", -8724, -1380, 0.0));
      ForGroup(gv_aov, f_bqA);
    }
    if (LoadInteger(gv_abY, 0, GetHandleId(gv_aos)) == 15) {
      GroupAddUnit(gv_aov, CreateUnit(Player(11), "u002", -10434, -2015, 0.0));
      ForGroup(gv_aov, f_bqA);
      SaveInteger(gv_abY, 0, GetHandleId(gv_aos), 0);
    }
    if (!RectContainsUnit(gv_aeQ, gv_aaU[5])) {
      gv_acL = GetUnitName(gv_aaU[5]);
      SetUnitPosition(
        gv_aaU[5],
        LoadInteger(gv_abT, gv_acK, StringHash(S2S(gv_acL + "_X"))),
        LoadInteger(gv_abT, gv_acK, StringHash(S2S(gv_acL + "_Y")))
      );
    }
    if (!RectContainsUnit(gv_aeQ, gv_akF)) {
      gv_acL = GetUnitName(gv_akF);
      SetUnitPosition(
        gv_akF,
        LoadInteger(gv_abT, gv_acK, StringHash(S2S(gv_acL + "_X"))),
        LoadInteger(gv_abT, gv_acK, StringHash(S2S(gv_acL + "_Y")))
      );
    }
    if (!RectContainsUnit(gv_aeQ, gv_akG)) {
      gv_acL = GetUnitName(gv_akG);
      SetUnitPosition(
        gv_akG,
        LoadInteger(gv_abT, gv_acK, StringHash(S2S(gv_acL + "_X"))),
        LoadInteger(gv_abT, gv_acK, StringHash(S2S(gv_acL + "_Y")))
      );
    }
    ForGroup(gv_aov, f_bqA);
    if (f_aNV(gv_aeQ) < 1) {
      f_bqB();
    }
  }
}
function f_bqD() {
  DisplayTimedTextToForce(
    gv_alH,
    5,
    "|cff00ff00Rhea:|r I am Rhea, mother of the Gods, you cannot defeat me.\n          I will slay you where you stand, mortal!"
  );
  SaveInteger(gv_abY, 0, GetHandleId(gv_aos), 0);
  EnableTrigger(gv_aou);
  TimerStart(gv_aos, 1, true, f_bqC);
  DisableTrigger(gv_aiR);
}
function f_bqE() {
  return IsUnitInGroup(GetEnteringUnit(), gv_aov);
}
function f_bqF() {
  var lv_bqG = GetTriggerUnit();
  GroupRemoveUnit(gv_aov, lv_bqG);
  SetUnitExploded(lv_bqG, true);
  KillUnit(lv_bqG);
  gv_aot = gv_aot + 20;
  SetUnitScalePercent(gv_aaU[5], gv_aot, gv_aot, gv_aot);
  SetHeroStr(gv_aaU[5], GetHeroStr(gv_aaU[5], false) + 50, false);
  f_aLX(
    AddSpecialEffectTarget(
      "Abilities\\Spells\\NightElf\\Taunt\\TauntCaster.mdl",
      gv_aaU[5],
      "origin"
    ),
    1
  );
  DisplayTimedTextToForce(
    gv_alH,
    5,
    "|cff00ff00Rhea:|r I feel the power flowing through me!"
  );
}
function f_bqH() {
  var lv_bqI = GetUnitFacing(gv_aaU[6]);
  var lv_bqJ = CreateUnit(
    Player(11),
    "h007",
    GetUnitX(gv_aaU[6]),
    GetUnitY(gv_aaU[6]),
    lv_bqI
  );
  var lv_bqK = f_aIf(
    lv_bqJ,
    GetUnitX(gv_aaU[6]) + CosBJ(lv_bqI) * 600,
    GetUnitY(gv_aaU[6]) + SinBJ(lv_bqI) * 600,
    17.5,
    0.02
  );
  gv_awc[lv_bqK] = 0;
  lv_bqJ = null;
  return lv_bqK;
}
function f_bqL() {
  var lv_bqM = GetExpiredTimer();
  var lv_bqN = LoadInteger(gv_abY, 0, GetHandleId(lv_bqM));
  gv_awh[lv_bqN] = gv_awh[lv_bqN] + 0.1;
  gv_awi[lv_bqN] = gv_awi[lv_bqN] + 0.02;
  SetUnitScale(gv_awg[lv_bqN], gv_awi[lv_bqN], gv_awi[lv_bqN], gv_awi[lv_bqN]);
  if (gv_awh[lv_bqN] > 3 || GetWidgetLife(gv_awg[lv_bqN]) < 0.406) {
    f_aCU(lv_bqN);
    f_aJk(lv_bqM);
  }
  lv_bqM = null;
}
function f_bqO(lv_bqP) {
  var lv_bqQ = f_aCS();
  var lv_bqR = f_aJj();
  gv_awg[lv_bqQ] = lv_bqP;
  gv_awi[lv_bqQ] = 0.1;
  gv_awh[lv_bqQ] = 0.1;
  SaveInteger(gv_abY, 0, GetHandleId(lv_bqR), lv_bqQ);
  TimerStart(lv_bqR, 0.1, true, f_bqL);
  lv_bqR = null;
  return lv_bqQ;
}
function f_bqS() {
  if (GetWidgetLife(gv_aaU[6]) < 0.406) {
    DisplayTimedTextToForce(
      gv_alH,
      5,
      "|cff00ff00Thea:|r ...Is this my legend? Even the deadly forest and shining sun could not stop you, Champion.\n           I will return to the sky..."
    );
    f_aJk(gv_aow);
    ForGroup(gv_aox, f_aOp);
  } else {
    SaveInteger(
      gv_abY,
      0,
      GetHandleId(gv_aow),
      LoadInteger(gv_abY, 0, GetHandleId(gv_aow)) + 1
    );
    if (LoadInteger(gv_abY, 0, GetHandleId(gv_aow)) == 10) {
      DisplayTimedTextToForce(gv_alH, 3, "|cffff8a08Roots shatter the ground");
      f_bqH();
    }
    if (LoadInteger(gv_abY, 0, GetHandleId(gv_aow)) == 20) {
      DisplayTimedTextToForce(
        gv_alH,
        5,
        "|cff00ff00Thea:|r Forest bend to my will! Root and branch, limb and vine, ensnare and pierce the intruder!"
      );
      GroupClear(gv_abF);
      GroupEnumUnitsInRect(gv_abF, gv_afq, Condition(f_aOo));
      do {
        gv_alM = FirstOfGroup(gv_abF);
        if (gv_alM == null) {
          break;
        }
        SetUnitPosition(gv_aoy, GetUnitX(gv_alM), GetUnitY(gv_alM));
        IssueTargetOrderById(gv_aoy, 852527, gv_alM);
        bj_ghoul[26] = CreateUnit(
          Player(11),
          "hpea",
          GetUnitX(gv_alM),
          GetUnitY(gv_alM),
          0.0
        );
        SetUnitScale(bj_ghoul[26], 2, 2, 2);
        f_aLX(
          AddSpecialEffectTarget(
            "Abilities\\Weapons\\TreantMissile\\TreantMissile.mdl",
            bj_ghoul[26],
            "origin"
          ),
          1
        );
        GroupRemoveUnit(gv_abF, gv_alM);
      } while (true);
      f_aIJ(gv_abF);
    }
    if (LoadInteger(gv_abY, 0, GetHandleId(gv_aow)) == 30) {
      DisplayTimedTextToForce(
        gv_alH,
        3,
        "|cffff8a08You hear something breaking up the ground"
      );
      bj_ghoul[26] = CreateUnit(
        Player(11),
        "e004",
        GetUnitX(gv_aaU[6]) + GetRandomReal(-200, 200),
        GetUnitY(gv_aaU[6]) + GetRandomReal(-200, 200),
        0.0
      );
      SetUnitInvulnerable(bj_ghoul[26], true);
      GroupAddUnit(gv_aox, bj_ghoul[26]);
      f_bqO(bj_ghoul[26]);
      SetUnitExploded(bj_ghoul[26], true);
      SaveInteger(gv_abY, 0, GetHandleId(gv_aow), 0);
    }
    if (!RectContainsUnit(gv_afq, gv_aaU[6])) {
      gv_acL = GetUnitName(gv_aaU[6]);
      SetUnitPosition(
        gv_aaU[6],
        LoadInteger(gv_abT, gv_acK, StringHash(S2S(gv_acL + "_X"))),
        LoadInteger(gv_abT, gv_acK, StringHash(S2S(gv_acL + "_Y")))
      );
    }
    if (f_aNV(gv_afq) < 1) {
      PauseTimer(gv_aow);
      ForGroup(gv_aox, f_aOp);
      GroupClear(gv_aox);
      f_aCq(1, gv_aaU[6], gv_afq, gv_aiS);
    }
  }
}
function f_bqT() {
  DisplayTimedTextToForce(
    gv_alH,
    10,
    "|cff00ff00Thea:|r Legend has it an ancient and terrible Deity dwells deep in the heart of the forest...\n         Have you come looking for me, Champion of Greece?\n         You shall not escape these woods alive. "
  );
  SaveInteger(gv_abY, 0, GetHandleId(gv_aow), 0);
  TimerStart(gv_aow, 1, true, f_bqS);
  DisableTrigger(gv_aiS);
}
function f_bqU() {
  if (
    GetWidgetLife(gv_aaU[6]) > 0.405 &&
    IsUnitInGroup(GetTriggerUnit(), gv_aox)
  ) {
    SetWidgetLife(gv_aaU[6], GetWidgetLife(gv_aaU[6]) + 500);
    DisplayTimedTextToForce(
      gv_alH,
      5,
      "|cff00ff00Thea:|r How dare you slay my child!? \n        Return to the earth and let the shining rays grant me your energy!"
    );
    f_aLX(
      AddSpecialEffectTarget(
        "Abilities\\Spells\\Human\\ReviveHuman\\ReviveHuman.mdl",
        gv_aaU[6],
        "origin"
      ),
      1
    );
  }
  return false;
}
function f_bqV() {
  var lv_bqW = CreateTrigger();
  TriggerRegisterAnyUnitEventBJ(lv_bqW, EVENT_PLAYER_UNIT_DEATH);
  TriggerAddCondition(lv_bqW, Condition(f_bqU));
  gv_aiS = CreateTrigger();
  TriggerRegisterEnterRectSimple(gv_aiS, gv_afq);
  TriggerAddCondition(gv_aiS, Condition(f_aOn));
  TriggerAddAction(gv_aiS, f_bqT);
  gv_aoy = CreateUnit(Player(11), "hpea", 0.0, 0.0, 0.0);
  UnitAddAbility(gv_aoy, "A07U");
  UnitAddAbility(gv_aoy, "A07V");
  gv_aow = f_aJj();
  gv_aox = f_aIL();
  SuspendHeroXP(gv_aaU[6], true);
  Preload(
    "Abilities\\Spells\\NightElf\\EntanglingRoots\\EntanglingRootsTarget.mdl"
  );
  Preload("Abilities\\Weapons\\TreantMissile\\TreantMissile.mdl");
  Preload("Abilities\\Spells\\Human\\ReviveHuman\\ReviveHuman.mdl");
}
function f_bqX(lv_bqY) {
  DisplayTimedTextToForce(
    gv_alH,
    5,
    "|cff00ff00Gaea:|r Searing flames, heat and lava come to my aid!"
  );
  f_aLX(
    AddSpecialEffectTarget(
      "Abilities\\Spells\\Other\\Incinerate\\FireLordDeathExplode.mdl",
      lv_bqY,
      "origin"
    ),
    1
  );
  UnitDamageTarget(
    gv_aaU[7],
    lv_bqY,
    1250,
    false,
    true,
    ATTACK_TYPE_NORMAL,
    DAMAGE_TYPE_UNIVERSAL,
    null
  );
}
function f_bqZ() {
  if (GetWidgetLife(gv_aaU[7]) < 0.406) {
    if (GetWidgetLife(gv_aoz) > 0.405) {
      KillUnit(gv_aoz);
    }
    DisplayTimedTextToForce(
      gv_alH,
      5,
      "|cff00ff00Gaea:|r I am the earth, and with me goes the fate of the land...\n          soon you shall all perish in the flames of vengeance."
    );
    f_aJk(gv_aoA);
  } else {
    if (
      GetWidgetLife(gv_aoz) < 0.405 &&
      GetUnitLifePercent(gv_aaU[7]) < 100 - 25 * (gv_aaL.getInt(7) + 1)
    ) {
      SaveInteger(gv_abY, 0, GetHandleId(gv_aoA), 29);
      gv_aaL[7] = gv_aaL.getInt(7) + 1;
    }
    SaveInteger(
      gv_abY,
      0,
      GetHandleId(gv_aoA),
      LoadInteger(gv_abY, 0, GetHandleId(gv_aoA)) + 1
    );
    if (LoadInteger(gv_abY, 0, GetHandleId(gv_aoA)) == 1) {
      gv_aoz = CreateUnitAtLoc(
        Player(11),
        gv_aoB.getInt(GetUnitUserData(gv_aaU[7])),
        gv_alC[GetRandomInt(80, 85)],
        0.0
      );
      UnitApplyTimedLife(gv_aoz, "BTLF", 30);
      if (GetUnitTypeId(gv_aoz) == "u003") {
        UnitRemoveAbility(gv_aaU[7], "Alit");
        UnitAddAbility(gv_aaU[7], "A085");
      }
      if (GetUnitTypeId(gv_aoz) == "u004") {
        UnitAddAbility(gv_aaU[7], "A086");
        UnitAddAbility(gv_aaU[7], "A087");
      }
      DisplayTimedTextToForce(
        gv_alH,
        5,
        S2S("|cff00ff00Gaea:|r Arise mighty " + GetUnitName(gv_aoz)) +
          " and give me strength!"
      );
      SetUnitUserData(gv_aaU[7], GetUnitUserData(gv_aaU[7]) + 1);
      if (GetUnitUserData(gv_aaU[7]) > 3) {
        SetUnitUserData(gv_aaU[7], 0);
      }
    }
    if (ModuloInteger(LoadInteger(gv_abY, 0, GetHandleId(gv_aoA)), 5) == 0) {
      GroupClear(gv_abF);
      GroupEnumUnitsInRange(
        gv_abF,
        GetUnitX(gv_aaU[7]),
        GetUnitY(gv_aaU[7]),
        275,
        Condition(f_aOo)
      );
      bj_groupCountUnits = 0;
      ForGroup(gv_abF, CountUnitsInGroupEnum);
      f_aIJ(gv_abF);
      if (bj_groupCountUnits == 0) {
        GroupClear(gv_abF);
        bj_forLoopAIndex = 0;
        do {
          if (bj_forLoopAIndex > 7) {
            break;
          }
          if (
            RectContainsUnit(gv_aea, gv_alv[bj_forLoopAIndex]) &&
            GetWidgetLife(gv_alv[bj_forLoopAIndex]) > 0.405
          ) {
            GroupAddUnit(gv_abF, gv_alv[bj_forLoopAIndex]);
          }
          bj_forLoopAIndex = bj_forLoopAIndex + 1;
        } while (true);
        bj_groupRandomConsidered = 0;
        bj_groupRandomCurrentPick = null;
        ForGroup(gv_abF, GroupPickRandomUnitEnum);
        f_aIJ(gv_abF);
        f_bqX(bj_groupRandomCurrentPick);
      }
    }
    if (
      ModuloInteger(LoadInteger(gv_abY, 0, GetHandleId(gv_aoA)), 3) == 0 &&
      GetUnitTypeId(gv_aoz) == "u004"
    ) {
      GroupClear(gv_abF);
      GroupEnumUnitsInRect(gv_abF, gv_aea, Condition(f_aOo));
      bj_groupRandomConsidered = 0;
      bj_groupRandomCurrentPick = null;
      ForGroup(gv_abF, GroupPickRandomUnitEnum);
      f_aIJ(gv_abF);
      DisplayTimedTextToForce(
        gv_alH,
        5,
        "|cff00ff00Gaea:|r Searing lightning immobilize my foe!"
      );
      UnitAddAbility(gv_aaU[7], "A088");
      UnitAddAbility(gv_aaU[7], "A089");
      IssueTargetOrderById(gv_aaU[7], 852230, bj_groupRandomCurrentPick);
      IssueTargetOrderById(gv_aaU[7], 852075, bj_groupRandomCurrentPick);
      UnitDamageTarget(
        gv_aaU[7],
        bj_groupRandomCurrentPick,
        300,
        true,
        true,
        ATTACK_TYPE_NORMAL,
        DAMAGE_TYPE_UNIVERSAL,
        null
      );
      if (GetUnitState(bj_groupRandomCurrentPick, UNIT_STATE_MANA) > 1) {
        if (GetUnitState(bj_groupRandomCurrentPick, UNIT_STATE_MANA) > 300) {
          UnitDamageTarget(
            gv_aaU[7],
            bj_groupRandomCurrentPick,
            300,
            false,
            false,
            ATTACK_TYPE_NORMAL,
            DAMAGE_TYPE_UNIVERSAL,
            null
          );
          f_aMp(
            null,
            S2S("-" + I2S(f_aML(300))),
            128,
            255,
            0,
            GetUnitX(bj_groupRandomCurrentPick),
            GetUnitY(bj_groupRandomCurrentPick),
            0.029,
            0.0,
            3,
            10
          );
        } else {
          UnitDamageTarget(
            gv_aaU[7],
            bj_groupRandomCurrentPick,
            GetUnitState(bj_groupRandomCurrentPick, UNIT_STATE_MANA),
            false,
            false,
            ATTACK_TYPE_MAGIC,
            DAMAGE_TYPE_MAGIC,
            null
          );
          f_aMp(
            null,
            S2S(
              "-" +
                I2S(
                  f_aML(
                    GetUnitState(bj_groupRandomCurrentPick, UNIT_STATE_MANA)
                  )
                )
            ),
            128,
            255,
            0,
            GetUnitX(bj_groupRandomCurrentPick),
            GetUnitY(bj_groupRandomCurrentPick),
            0.029,
            0.0,
            3,
            10
          );
        }
        SetUnitState(
          bj_groupRandomCurrentPick,
          UNIT_STATE_MANA,
          GetUnitState(bj_groupRandomCurrentPick, UNIT_STATE_MANA) - 300
        );
      }
      UnitRemoveAbility(gv_aaU[7], "A088");
      UnitRemoveAbility(gv_aaU[7], "A089");
    }
    if (LoadInteger(gv_abY, 0, GetHandleId(gv_aoA)) == 30) {
      SaveInteger(gv_abY, 0, GetHandleId(gv_aoA), 0);
    }
    if (!RectContainsUnit(gv_aea, gv_aaU[7])) {
      gv_acL = GetUnitName(gv_aaU[7]);
      SetUnitPosition(
        gv_aaU[7],
        LoadInteger(gv_abT, gv_acK, StringHash(S2S(gv_acL + "_X"))),
        LoadInteger(gv_abT, gv_acK, StringHash(S2S(gv_acL + "_Y")))
      );
    }
    if (f_aNV(gv_aea) < 1) {
      if (GetWidgetLife(gv_aoz) > 0.405) {
        KillUnit(gv_aoz);
      }
      PauseTimer(gv_aoA);
      f_aCq(1, gv_aaU[7], gv_aea, gv_aiT);
      gv_aaL[7] = 0;
    }
  }
}
function f_bra() {
  DisplayTimedTextToForce(
    gv_alH,
    5,
    "|cff00ff00Gaea:|r You stand on hallowed ground, brave warrior. \n          But I am the Earth, and you cannot defeat me here."
  );
  SaveInteger(gv_abY, 0, GetHandleId(gv_aoA), 0);
  SetUnitUserData(gv_aaU[7], 0);
  f_bqX(GetTriggerUnit());
  TimerStart(gv_aoA, 1, true, f_bqZ);
  gv_aaL[7] = 0;
  DisableTrigger(gv_aiT);
}
function f_brb() {
  if (GetTriggerUnit() == gv_aoz && GetWidgetLife(gv_aaU[7]) > 0.405) {
    if (GetUnitTypeId(gv_aoz) == "u003") {
      UnitAddAbility(gv_aaU[7], "Alit");
      UnitRemoveAbility(gv_aaU[7], "A085");
    }
    if (GetUnitTypeId(gv_aoz) == "u004") {
      UnitRemoveAbility(gv_aaU[7], "A086");
      UnitRemoveAbility(gv_aaU[7], "A087");
    }
  }
  return false;
}
function f_brc() {
  var lv_brd = Atan2(
    GetUnitY(GetEnumUnit()) - GetUnitY(gv_aoD),
    GetUnitX(GetEnumUnit()) - GetUnitX(gv_aoD)
  );
  var lv_bre =
    f_aMC(
      GetUnitX(gv_aoD),
      GetUnitY(gv_aoD),
      GetUnitX(GetEnumUnit()),
      GetUnitY(GetEnumUnit())
    ) - 5;
  var lv_brf = GetUnitX(gv_aoD) + lv_bre * Cos(lv_brd);
  var lv_brg = GetUnitY(gv_aoD) + lv_bre * Sin(lv_brd);
  SetUnitPosition(GetEnumUnit(), lv_brf, lv_brg);
  PauseUnit(GetEnumUnit(), true);
  IssueImmediateOrderById(GetEnumUnit(), 851972);
  PauseUnit(GetEnumUnit(), false);
  UnitDamageTarget(
    gv_aoD,
    GetEnumUnit(),
    GetWidgetLife(GetEnumUnit()) * 0.002,
    false,
    false,
    ATTACK_TYPE_CHAOS,
    DAMAGE_TYPE_UNIVERSAL,
    null
  );
}
function f_brh() {
  var lv_bri = GetExpiredTimer();
  if (GetWidgetLife(gv_aoD) < 0.406) {
    f_aJk(lv_bri);
    GroupClear(gv_abF);
    GroupEnumUnitsInRange(
      gv_abF,
      GetUnitX(gv_aoD),
      GetUnitY(gv_aoD),
      400,
      Condition(f_aOo)
    );
    do {
      gv_alM = FirstOfGroup(gv_abF);
      if (gv_alM == null) {
        break;
      }
      UnitDamageTarget(
        gv_aoD,
        gv_alM,
        500,
        false,
        false,
        ATTACK_TYPE_CHAOS,
        DAMAGE_TYPE_UNIVERSAL,
        null
      );
      GroupRemoveUnit(gv_abF, gv_alM);
    } while (true);
    f_aIJ(gv_abF);
  } else {
    GroupClear(gv_abF);
    GroupEnumUnitsInRect(gv_abF, gv_adD, Condition(f_aOo));
    ForGroup(gv_abF, f_brc);
    f_aIJ(gv_abF);
  }
  lv_bri = null;
}
function f_brj() {
  var lv_brk = GetExpiredTimer();
  if (GetWidgetLife(gv_aoF) < 0.406) {
    f_aJk(lv_brk);
    PauseUnit(gv_aoE, false);
    ShowUnit(gv_aoE, true);
    DestroyEffect(gv_aoG);
    if (GetUnitUserData(gv_aoF) == 1) {
      SetWidgetLife(gv_aoE, 2000);
    }
  } else {
    SaveInteger(
      gv_abY,
      0,
      GetHandleId(lv_brk),
      LoadInteger(gv_abY, 0, GetHandleId(lv_brk)) - 1
    );
    f_aMp(
      null,
      S2S(I2S(LoadInteger(gv_abY, 0, GetHandleId(lv_brk))) + "!"),
      255,
      255,
      255,
      GetUnitX(gv_aoE),
      GetUnitY(gv_aoE),
      0.077,
      0.0,
      3,
      12.5
    );
    if (
      GetWidgetLife(gv_aoE) >
      GetUnitState(gv_aoE, UNIT_STATE_MAX_LIFE) * 0.1
    ) {
      UnitDamageTarget(
        gv_aaU[8],
        gv_aoE,
        GetUnitState(gv_aoE, UNIT_STATE_MAX_LIFE) * 0.1,
        false,
        false,
        ATTACK_TYPE_CHAOS,
        DAMAGE_TYPE_UNIVERSAL,
        null
      );
    } else {
      if (GetUnitUserData(gv_aoF) != 1) {
        SetUnitUserData(gv_aoF, 1);
        f_aMp(
          null,
          "Your ally is on the verge of death but is still clinging to life!",
          255,
          255,
          255,
          GetUnitX(gv_aoE),
          GetUnitY(gv_aoE),
          0.034,
          0.0,
          5,
          12.5
        );
      }
    }
    if (LoadInteger(gv_abY, 0, GetHandleId(lv_brk)) < 1) {
      f_aJk(lv_brk);
      PauseUnit(gv_aoE, false);
      ShowUnit(gv_aoE, true);
      KillUnit(gv_aoE);
      DisplayTimedTextToForce(
        gv_alH,
        5,
        "|cff00ff00Cronus:|r Be reincarnated my new found warrior!"
      );
      GroupAddUnit(
        gv_aoH,
        CreateUnit(Player(11), "n00J", GetUnitX(gv_aoF), GetUnitY(gv_aoF), 0.0)
      );
      KillUnit(gv_aoF);
      DestroyEffect(gv_aoG);
    }
  }
}
function f_brl() {
  if (GetWidgetLife(gv_aaU[8]) < 0.406) {
    DisplayTimedTextToForce(
      gv_alH,
      5,
      "|cff00ff00Cronus:|r Like the sands of an hourglass, I shall last forever.\n            You have not seen the last of me, mortal..."
    );
    f_aJk(gv_aoC);
    if (GetWidgetLife(gv_aoD) > 0.405) {
      KillUnit(gv_aoD);
    }
    if (GetWidgetLife(gv_aoF) > 0.405) {
      KillUnit(gv_aoF);
    }
    ForGroup(gv_aoH, f_aOp);
    f_aIM(gv_aoH);
    f_aIJ(gv_aoH);
  } else {
    SaveInteger(
      gv_abY,
      0,
      GetHandleId(gv_aoC),
      LoadInteger(gv_abY, 0, GetHandleId(gv_aoC)) + 1
    );
    if (LoadInteger(gv_abY, 0, GetHandleId(gv_aoC)) == 3) {
      DisplayTimedTextToForce(
        gv_alH,
        5,
        "|cff00ff00Cronus:|r May the fabrics of time pull you to your demise!"
      );
    }
    if (LoadInteger(gv_abY, 0, GetHandleId(gv_aoC)) == 5) {
      GroupClear(gv_abF);
      GroupEnumUnitsInRect(gv_abF, gv_adE, Condition(f_aOo));
      bj_groupRandomConsidered = 0;
      bj_groupRandomCurrentPick = null;
      ForGroup(gv_abF, GroupPickRandomUnitEnum);
      f_aIJ(gv_abF);
      gv_aoD = CreateUnit(
        Player(11),
        "u005",
        RMaxBJ(GetUnitX(bj_groupRandomCurrentPick), 13440),
        GetUnitY(bj_groupRandomCurrentPick),
        0.0
      );
      UnitApplyTimedLife(gv_aoD, "BTLF", 5);
      TimerStart(f_aJj(), 0.1, true, f_brh);
    }
    if (LoadInteger(gv_abY, 0, GetHandleId(gv_aoC)) == 10) {
      GroupClear(gv_abF);
      GroupEnumUnitsInRect(gv_abF, gv_adE, Condition(f_aOo));
      bj_groupRandomConsidered = 0;
      bj_groupRandomCurrentPick = null;
      ForGroup(gv_abF, GroupPickRandomUnitEnum);
      f_aIJ(gv_abF);
      gv_aoE = bj_groupRandomCurrentPick;
      if (bj_groupRandomCurrentPick == null) {
        SetUnitState(
          gv_aaU[8],
          UNIT_STATE_LIFE,
          GetUnitState(gv_aaU[8], UNIT_STATE_LIFE) +
            GetUnitState(gv_aaU[8], UNIT_STATE_MAX_LIFE) * 0.3
        );
        DisplayTimedTextToForce(
          gv_alH,
          5,
          "|cff00ff00Cronus:|r failed to find a target and healed 30% instead"
        );
      } else {
        DisplayTimedTextToForce(
          gv_alH,
          5,
          S2S("|cff00ff00Cronus:|r " + GetPlayerName(GetOwningPlayer(gv_aoE))) +
            " your grave calls..."
        );
      }
    }
    if (LoadInteger(gv_abY, 0, GetHandleId(gv_aoC)) == 15) {
      DisplayTimedTextToForce(
        gv_alH,
        5,
        "|cff00ff00Cronus:|r You shall be reincarnated into my service!"
      );
      PauseUnit(gv_aoE, true);
      ShowUnit(gv_aoE, false);
      gv_aoF = CreateUnit(
        Player(11),
        "u006",
        GetUnitX(gv_aoE),
        GetUnitY(gv_aoE),
        0.0
      );
      gv_aoG = AddSpecialEffect(
        "Abilities\\Spells\\Undead\\UnholyAura\\UnholyAura.mdl",
        GetUnitX(gv_aoF),
        GetUnitY(gv_aoF)
      );
      bj_crippledTimer[10] = f_aJj();
      TimerStart(bj_crippledTimer[10], 1, true, f_brj);
      f_aMp(
        null,
        "10!",
        255,
        255,
        255,
        GetUnitX(gv_aoE),
        GetUnitY(gv_aoE),
        0.077,
        0.0,
        3,
        12.5
      );
      SaveInteger(gv_abY, 0, GetHandleId(bj_crippledTimer[10]), 10);
    }
    if (LoadInteger(gv_abY, 0, GetHandleId(gv_aoC)) == 30) {
      SaveInteger(gv_abY, 0, GetHandleId(gv_aoC), 0);
    }
    if (!RectContainsUnit(gv_adD, gv_aaU[8])) {
      gv_acL = GetUnitName(gv_aaU[8]);
      SetUnitPosition(
        gv_aaU[8],
        LoadInteger(gv_abT, gv_acK, StringHash(S2S(gv_acL + "_X"))),
        LoadInteger(gv_abT, gv_acK, StringHash(S2S(gv_acL + "_Y")))
      );
    }
    if (f_aNV(gv_adD) < 1) {
      if (GetWidgetLife(gv_aoD) > 0.405) {
        KillUnit(gv_aoD);
      }
      if (GetWidgetLife(gv_aoF) > 0.405) {
        KillUnit(gv_aoF);
      }
      ForGroup(gv_aoH, f_aOp);
      PauseTimer(gv_aoC);
      f_aCq(1, gv_aaU[8], gv_adD, gv_aiU);
    }
  }
}
function f_brm() {
  DisplayTimedTextToForce(
    gv_alH,
    5,
    "|cff00ff00Cronus:|r You have come far mortal, but your journey ends here! I am Cronus,\n             Father of Time and god of death. Your bones will litter the ground beneath me!"
  );
  SaveInteger(gv_abY, 0, GetHandleId(gv_aoC), 0);
  TimerStart(gv_aoC, 1, true, f_brl);
  DisableTrigger(gv_aiU);
}
function f_brn() {
  if (!IsUnitInGroup(GetEnumUnit(), gv_awj)) {
    GroupAddUnit(gv_awj, GetEnumUnit());
    GroupAddUnit(bj_randomSubGroupGroup, GetEnumUnit());
  }
}
function f_bro() {
  SetUnitX(GetEnumUnit(), GetUnitX(gv_alM));
  SetUnitY(GetEnumUnit(), GetUnitY(gv_alM));
  IssueImmediateOrderById(GetEnumUnit(), 851972);
}
function f_brp() {
  GroupRemoveUnit(gv_awj, GetEnumUnit());
}
function f_brq() {
  var lv_brr = GetRandomInt(86, 90);
  var lv_brs = CreateUnitAtLoc(Player(11), "h00H", gv_alC[lv_brr], 0.0);
  var lv_brt = f_aHz(
    lv_brs,
    GetLocationX(gv_alC[lv_brr + 5]),
    GetLocationY(gv_alC[lv_brr + 5]),
    15,
    0.02
  );
  gv_awk[lv_brt] = lv_brr + 5;
  gv_awl[lv_brt] = f_aIL();
  lv_brs = null;
  return lv_brt;
}
function f_bru() {
  DisplayTimedTextToPlayer(
    GetOwningPlayer(GetTriggerUnit()),
    0.0,
    0.0,
    10,
    S2S(gv_alw[77] + "Mystical magics push you back...")
  );
  f_aNE(
    GetTriggerUnit(),
    "Objects\\Spawnmodels\\Undead\\ImpaleTargetDust\\ImpaleTargetDust.mdl",
    200,
    15,
    0.1,
    0.02
  );
}
function f_brv() {
  f_aLX(
    AddSpecialEffectTarget("MDX\\iceberg.mdx", GetEnumUnit(), "overhead"),
    1
  );
  UnitDamageTarget(
    gv_akA,
    GetEnumUnit(),
    1000,
    false,
    false,
    ATTACK_TYPE_NORMAL,
    DAMAGE_TYPE_UNIVERSAL,
    null
  );
}
function f_brw() {
  if (GetWidgetLife(gv_akA) < 0.406) {
    DisplayTimedTextToForce(
      gv_alH,
      5,
      "|cffff8a08The Ice Queen has been alerted to your presence, expect her to give you a rather cold reception in her halls."
    );
    f_aJk(gv_aoI);
    StartSound(gv_agg);
  } else {
    SaveInteger(
      gv_abY,
      0,
      GetHandleId(gv_aoI),
      LoadInteger(gv_abY, 0, GetHandleId(gv_aoI)) + 1
    );
    if (LoadInteger(gv_abY, 0, GetHandleId(gv_aoI)) == 10) {
      DisplayTimedTextToForce(gv_alH, 5, "|cffff8a08Ice falls!");
      GroupClear(gv_abF);
      GroupEnumUnitsInRect(gv_abF, gv_afP, Condition(f_aOo));
      ForGroup(gv_abF, f_brv);
      f_aIJ(gv_abF);
      SaveInteger(gv_abY, 0, GetHandleId(gv_aoI), 0);
    }
    if (!RectContainsUnit(gv_afP, gv_akA)) {
      gv_acL = GetUnitName(gv_akA);
      SetUnitPosition(
        gv_akA,
        LoadInteger(gv_abT, gv_acK, StringHash(S2S(gv_acL + "_X"))),
        LoadInteger(gv_abT, gv_acK, StringHash(S2S(gv_acL + "_Y")))
      );
    }
    if (f_aNV(gv_afP) < 1) {
      PauseTimer(gv_aoI);
      f_aCq(1, gv_akA, gv_afP, gv_aiY);
    }
  }
}
function f_brx() {
  DisplayTimedTextToForce(
    gv_alH,
    5,
    "|cffff8a08You have climbed the hill, now look ahead..."
  );
  StartSound(gv_agf);
  SaveInteger(gv_abY, 0, GetHandleId(gv_aoI), 0);
  TimerStart(gv_aoI, 1, true, f_brw);
  DisableTrigger(gv_aiY);
}
function f_bry() {
  var lv_brz = GetExpiredTimer();
  var lv_brA = LoadInteger(gv_abY, 0, GetHandleId(lv_brz));
  IssuePointOrderById(gv_awp[lv_brA], 852488, gv_awq[lv_brA], gv_awr[lv_brA]);
  gv_awq[lv_brA] =
    gv_awq[lv_brA] + Cos(GetUnitFacing(gv_akg) * bj_DEGTORAD) * 150;
  gv_awr[lv_brA] =
    gv_awr[lv_brA] + Sin(GetUnitFacing(gv_akg) * bj_DEGTORAD) * 150;
  gv_aws[lv_brA] = gv_aws.getInt(lv_brA) + 1;
  if (gv_aws.getInt(lv_brA) > 5) {
    f_aJk(lv_brz);
    f_aCO(lv_brA);
  }
  lv_brz = null;
}
function f_brB() {
  var lv_brC = f_aCM();
  var lv_brD = f_aJj();
  SaveInteger(gv_abY, 0, GetHandleId(lv_brD), lv_brC);
  TimerStart(lv_brD, 1, true, f_bry);
  gv_awp[lv_brC] = CreateUnit(
    Player(11),
    gv_acw,
    GetUnitX(gv_akg),
    GetUnitY(gv_akg),
    0.0
  );
  UnitAddAbility(gv_awp[lv_brC], "A08J");
  gv_awq[lv_brC] =
    GetUnitX(gv_akg) + Cos(GetUnitFacing(gv_akg) * bj_DEGTORAD) * 100;
  gv_awr[lv_brC] =
    GetUnitY(gv_akg) + Sin(GetUnitFacing(gv_akg) * bj_DEGTORAD) * 100;
  gv_aws[lv_brC] = 0;
  lv_brD = null;
  return lv_brC;
}
function f_brE() {
  if (GetWidgetLife(gv_akg) < 0.406) {
    DisplayTimedTextToForce(
      gv_alH,
      5,
      "|cffff8a08Flames burst ahead... a slope stands  before you. Take a quick walk?"
    );
    f_aLX(
      AddSpecialEffect(
        "Abilities\\Spells\\Human\\FlameStrike\\FlameStrike1.mdl",
        9505,
        -1140
      ),
      3
    );
    f_aLX(
      AddSpecialEffect(
        "Abilities\\Spells\\Human\\FlameStrike\\FlameStrike1.mdl",
        10168,
        -840
      ),
      3
    );
    f_aLX(
      AddSpecialEffect(
        "Abilities\\Spells\\Human\\FlameStrike\\FlameStrike1.mdl",
        9505,
        -500
      ),
      3
    );
    f_aJk(gv_aoJ);
  } else {
    SaveInteger(
      gv_abY,
      0,
      GetHandleId(gv_aoJ),
      LoadInteger(gv_abY, 0, GetHandleId(gv_aoJ)) + 1
    );
    if (LoadInteger(gv_abY, 0, GetHandleId(gv_aoJ)) == 10) {
      DisplayTimedTextToForce(
        gv_alH,
        5,
        "|cffff8a08You hear crackles of flame..."
      );
      f_brB();
      SaveInteger(gv_abY, 0, GetHandleId(gv_aoJ), 0);
    }
    if (!RectContainsUnit(gv_aga, gv_akg)) {
      gv_acL = GetUnitName(gv_akg);
      SetUnitPosition(
        gv_akg,
        LoadInteger(gv_abT, gv_acK, StringHash(S2S(gv_acL + "_X"))),
        LoadInteger(gv_abT, gv_acK, StringHash(S2S(gv_acL + "_Y")))
      );
    }
    if (f_aNV(gv_aga) < 1) {
      PauseTimer(gv_aoJ);
      f_aCq(1, gv_akg, gv_aga, gv_aiZ);
    }
  }
}
function f_brF() {
  DisplayTimedTextToForce(
    gv_alH,
    5,
    "|cffff8a08You hear the hissing of a dragon..."
  );
  StartSound(gv_agh);
  SaveInteger(gv_abY, 0, GetHandleId(gv_aoJ), 0);
  TimerStart(gv_aoJ, 1, true, f_brE);
  DisableTrigger(gv_aiZ);
}
function f_brG() {
  var lv_brH =
    450 -
    f_aMC(
      GetUnitX(GetEnumUnit()),
      GetUnitY(GetEnumUnit()),
      gv_alu[42],
      gv_alu[43]
    );
  if (lv_brH > 0) {
    f_aNE(
      GetEnumUnit(),
      "Objects\\Spawnmodels\\Undead\\ImpaleTargetDust\\ImpaleTargetDust.mdl",
      400,
      10,
      0.1,
      0.02
    );
  }
}
function f_brI() {
  var lv_brJ;
  var lv_brK;
  var lv_brL;
  var lv_brM;
  var lv_brN = 0;
  do {
    if (lv_brN > 7) {
      break;
    }
    lv_brL = GetUnitX(gv_alv[lv_brN]);
    lv_brM = GetUnitY(gv_alv[lv_brN]);
    if (RectContainsCoords(gv_ads, lv_brL, lv_brM)) {
      lv_brL = lv_brL + 10 * Cos(GetUnitFacing(gv_alv[lv_brN]) * bj_DEGTORAD);
      lv_brM = lv_brM + 10 * Sin(GetUnitFacing(gv_alv[lv_brN]) * bj_DEGTORAD);
      SetUnitPosition(gv_alv[lv_brN], lv_brL, lv_brM);
    }
    lv_brN = lv_brN + 1;
  } while (true);
  if (LoadInteger(gv_abY, 0, GetHandleId(gv_aoK)) > 7) {
    lv_brN = 0;
    do {
      if (lv_brN > 7) {
        break;
      }
      lv_brL = GetUnitX(gv_alv[lv_brN]);
      lv_brM = GetUnitY(gv_alv[lv_brN]);
      lv_brK = (450 - f_aMC(lv_brL, lv_brM, gv_alu[42], gv_alu[43])) / 20;
      if (lv_brK > 0) {
        lv_brJ = bj_RADTODEG * Atan2(lv_brM - gv_alu[43], lv_brL - gv_alu[42]);
        lv_brL = lv_brL + lv_brK * Cos(lv_brJ * bj_DEGTORAD);
        lv_brM = lv_brM + lv_brK * Sin(lv_brJ * bj_DEGTORAD);
        SetUnitPosition(gv_alv[lv_brN], lv_brL, lv_brM);
      }
      lv_brN = lv_brN + 1;
    } while (true);
    lv_brL = GetUnitX(gv_ako);
    lv_brM = GetUnitY(gv_ako);
    lv_brK = (450 - f_aMC(lv_brL, lv_brM, gv_alu[42], gv_alu[43])) / 20;
    if (lv_brK > 0) {
      lv_brJ = bj_RADTODEG * Atan2(lv_brM - gv_alu[43], lv_brL - gv_alu[42]);
      lv_brL = lv_brL + lv_brK * Cos(lv_brJ * bj_DEGTORAD);
      lv_brM = lv_brM + lv_brK * Sin(lv_brJ * bj_DEGTORAD);
      SetUnitPosition(gv_ako, lv_brL, lv_brM);
    }
  }
}
function f_brO() {
  var lv_brP;
  var lv_brQ;
  if (GetWidgetLife(gv_ako) < 0.406) {
    DisplayTimedTextToForce(
      gv_alH,
      5,
      "|cffff8a08The cold feeling lifts away... an even larger gate opens..."
    );
    StartSound(gv_agg);
    f_aJk(gv_aoK);
    f_aJk(gv_aoL);
    ForGroup(gv_aoM, f_aOp);
    f_aIM(gv_aoM);
    if (gv_aly[128] != null) {
      DestroyEffect(gv_aly[128]);
    }
  } else {
    if (LoadInteger(gv_abY, 0, GetHandleId(gv_aoK)) == 0) {
      gv_alM = CreateUnitAtLoc(
        Player(11),
        "n00H",
        gv_alC[GetRandomInt(96, 98)],
        0
      );
      DestroyEffect(
        AddSpecialEffect(
          "Abilities\\Spells\\Demon\\DarkPortal\\DarkPortalTarget.mdl",
          GetUnitX(gv_alM),
          GetUnitY(gv_alM)
        )
      );
      IssuePointOrderById(gv_alM, gv_aas, GetUnitX(gv_ako), GetUnitY(gv_ako));
      GroupAddUnit(gv_aoM, gv_alM);
      GroupClear(gv_abF);
      GroupEnumUnitsInRange(
        gv_abF,
        GetUnitX(gv_ako),
        GetUnitY(gv_ako),
        1000,
        Condition(f_aOo)
      );
      bj_groupRandomConsidered = 0;
      bj_groupRandomCurrentPick = null;
      ForGroup(gv_abF, GroupPickRandomUnitEnum);
      f_aIJ(gv_abF);
      if (bj_groupRandomCurrentPick != null) {
        gv_aoN = bj_groupRandomCurrentPick;
        SetUnitAnimation(gv_ako, "spell");
        SetUnitFacingTimed(
          gv_ako,
          Atan2(
            GetUnitY(gv_ako) - GetUnitY(gv_aoN),
            GetUnitX(gv_ako) - GetUnitX(gv_aoN)
          ) * bj_RADTODEG,
          1
        );
        f_aLX(
          AddSpecialEffect(
            "Abilities\\Spells\\Human\\ControlMagic\\ControlMagicTarget.mdl",
            GetUnitX(gv_aoN),
            GetUnitY(gv_aoN)
          ),
          3
        );
      } else {
        SaveInteger(gv_abY, 0, GetHandleId(gv_aoK), 6);
      }
    }
    if (5 - LoadInteger(gv_abY, 0, GetHandleId(gv_aoK)) > 0) {
      f_aMp(
        null,
        I2S(5 - LoadInteger(gv_abY, 0, GetHandleId(gv_aoK))),
        200,
        100,
        50,
        GetUnitX(gv_aoN),
        GetUnitY(gv_aoN),
        0.077,
        0.0,
        1,
        15
      );
      SetUnitFacingTimed(
        gv_ako,
        Atan2(
          GetUnitY(gv_ako) - GetUnitY(gv_aoN),
          GetUnitX(gv_ako) - GetUnitX(gv_aoN)
        ) * bj_RADTODEG,
        1
      );
    }
    if (LoadInteger(gv_abY, 0, GetHandleId(gv_aoK)) == 4) {
      gv_alu[42] = GetUnitX(gv_aoN);
      gv_alu[43] = GetUnitY(gv_aoN);
      gv_aly[128] = AddSpecialEffect(
        "Abilities\\Spells\\Human\\FlameStrike\\FlameStrikeTarget.mdl",
        gv_alu[42],
        gv_alu[43]
      );
    }
    if (LoadInteger(gv_abY, 0, GetHandleId(gv_aoK)) == 5) {
      DestroyEffect(gv_aly[128]);
      gv_aly[128] = AddSpecialEffect(
        "Units\\Demon\\Infernal\\InfernalBirth.mdl",
        gv_alu[42],
        gv_alu[43]
      );
      lv_brP = 0;
      do {
        if (lv_brP > 7) {
          break;
        }
        lv_brQ =
          450 -
          f_aMC(
            GetUnitX(gv_alv[lv_brP]),
            GetUnitY(gv_alv[lv_brP]),
            gv_alu[42],
            gv_alu[43]
          );
        if (lv_brQ > 0) {
          UnitDamageTarget(
            gv_ako,
            gv_alv[lv_brP],
            lv_brQ * 13,
            true,
            false,
            ATTACK_TYPE_NORMAL,
            DAMAGE_TYPE_MAGIC,
            WEAPON_TYPE_WHOKNOWS
          );
          f_aNE(
            gv_alv[lv_brP],
            "Objects\\Spawnmodels\\Undead\\ImpaleTargetDust\\ImpaleTargetDust.mdl",
            400,
            10,
            0.1,
            0.02
          );
        }
        lv_brP = lv_brP + 1;
      } while (true);
      lv_brQ =
        450 - f_aMC(GetUnitX(gv_ako), GetUnitY(gv_ako), gv_alu[42], gv_alu[43]);
      if (lv_brQ > 0) {
        f_aNE(
          gv_ako,
          "Objects\\Spawnmodels\\Undead\\ImpaleTargetDust\\ImpaleTargetDust.mdl",
          400,
          10,
          0.1,
          0.02
        );
      }
      ForGroup(gv_aoM, f_brG);
    }
    SaveInteger(
      gv_abY,
      0,
      GetHandleId(gv_aoK),
      LoadInteger(gv_abY, 0, GetHandleId(gv_aoK)) + 1
    );
    if (LoadInteger(gv_abY, 0, GetHandleId(gv_aoK)) > 7) {
      DestroyEffect(gv_aly[128]);
      SaveInteger(gv_abY, 0, GetHandleId(gv_aoK), 0);
    }
  }
  if (f_aNV(gv_afO) == 0) {
    if (gv_aly[128] != null) {
      DestroyEffect(gv_aly[128]);
    }
    ForGroup(gv_aoM, f_aOp);
    PauseTimer(gv_aoK);
    PauseTimer(gv_aoL);
    f_aCq(1, gv_ako, gv_afO, gv_aja);
  }
}
function f_brR() {
  DisplayTimedTextToForce(
    gv_alH,
    5,
    "|cffff8a08Magics are at work, an intense chill covers you..."
  );
  StartSound(gv_age);
  SaveInteger(gv_abY, 0, GetHandleId(gv_aoK), 0);
  TimerStart(gv_aoK, 1, true, f_brO);
  TimerStart(gv_aoL, 0.02, true, f_brI);
  DisableTrigger(gv_aja);
}
function f_brS() {
  if (GetWidgetLife(GetEnumUnit()) > 0.405) {
    IssuePointOrderById(
      GetEnumUnit(),
      gv_aas,
      GetUnitX(gv_aaU[9]) + GetRandomReal(-800, 800),
      GetUnitY(gv_aaU[9]) + GetRandomReal(-800, 800)
    );
  }
}
function f_brT() {
  f_aNE(
    GetEnumUnit(),
    "Objects\\Spawnmodels\\Undead\\ImpaleTargetDust\\ImpaleTargetDust.mdl",
    -200,
    10,
    0.1,
    0.02
  );
}
function f_brU() {
  var lv_brV = 0;
  var lv_brW;
  var lv_brX;
  var lv_brY;
  var lv_brZ;
  if (LoadInteger(gv_abY, 0, GetHandleId(gv_aoP)) == 1 && gv_aoV < 490) {
    gv_aoU = gv_aoU + 15;
    gv_aoV = gv_aoV + 5;
    gv_aoS = gv_aoS + gv_aoV * Cos(gv_aoU * bj_DEGTORAD);
    gv_aoT = gv_aoT + gv_aoV * Sin(gv_aoU * bj_DEGTORAD);
    DestroyEffect(
      AddSpecialEffect(
        "Abilities\\Weapons\\FrostWyrmMissile\\FrostWyrmMissile.mdl",
        gv_aoS,
        gv_aoT
      )
    );
  }
  do {
    if (lv_brV > 7) {
      break;
    }
    lv_brW = GetUnitX(gv_alv[lv_brV]);
    lv_brX = GetUnitY(gv_alv[lv_brV]);
    if (gv_aoV < 490) {
      if (
        f_aMC(lv_brW, lv_brX, gv_aoS, gv_aoT) < 200 &&
        !IsUnitInGroup(gv_alv[lv_brV], gv_aoR)
      ) {
        UnitDamageTarget(
          gv_aaU[9],
          gv_alv[lv_brV],
          1500 - GetHeroStr(gv_alv[lv_brV], true),
          true,
          false,
          ATTACK_TYPE_NORMAL,
          DAMAGE_TYPE_UNIVERSAL,
          WEAPON_TYPE_WHOKNOWS
        );
        GroupAddUnit(gv_aoR, gv_alv[lv_brV]);
      }
    }
    if (RectContainsCoords(gv_aeP, lv_brW, lv_brX)) {
      lv_brZ = f_aMC(lv_brW, lv_brX, GetUnitX(gv_aaU[9]), GetUnitY(gv_aaU[9]));
      if (lv_brZ > 380 && lv_brZ < 850) {
        lv_brW =
          lv_brW + 11.25 * Cos(GetUnitFacing(gv_alv[lv_brV]) * bj_DEGTORAD);
        lv_brX =
          lv_brX + 11.25 * Sin(GetUnitFacing(gv_alv[lv_brV]) * bj_DEGTORAD);
        SetUnitPosition(gv_alv[lv_brV], lv_brW, lv_brX);
      }
      if (gv_aoV < 300 && lv_brZ < 380) {
        lv_brY =
          180 +
          bj_RADTODEG *
            Atan2(GetUnitY(gv_aaU[9]) - lv_brX, GetUnitX(gv_aaU[9]) - lv_brW);
        lv_brW = lv_brW + 11.25 * Cos(lv_brY * bj_DEGTORAD);
        lv_brX = lv_brX + 11.25 * Sin(lv_brY * bj_DEGTORAD);
        SetUnitPosition(gv_alv[lv_brV], lv_brW, lv_brX);
        DestroyEffect(
          AddSpecialEffect(
            "Abilities\\Weapons\\GryphonRiderMissile\\GryphonRiderMissileTarget.mdl",
            lv_brW,
            lv_brX
          )
        );
      }
    }
    lv_brV = lv_brV + 1;
  } while (true);
  if (gv_aoV > 490 || LoadInteger(gv_abY, 0, GetHandleId(gv_aoP)) == 2) {
    SaveInteger(gv_abY, 0, GetHandleId(gv_aoP), 0);
    GroupClear(gv_aoR);
    f_aIM(gv_aoR);
  }
}
function f_bsa() {
  if (GetWidgetLife(gv_aaU[9]) < 0.406) {
    DisplayTimedTextToForce(
      gv_alH,
      5,
      "|cff00ff00Persephone:|r Hades, Lord of Hell awaits you now Mortal. My husband is not \n                    as forgiving as I, and you will not see tomorrows sunrise!"
    );
    f_aJk(gv_aoO);
    f_aJk(gv_aoP);
    ForGroup(gv_aoQ, f_aOp);
  } else {
    SaveInteger(
      gv_abY,
      0,
      GetHandleId(gv_aoO),
      LoadInteger(gv_abY, 0, GetHandleId(gv_aoO)) + 1
    );
    if (LoadInteger(gv_abY, 0, GetHandleId(gv_aoO)) == 7) {
      DisplayTimedTextToForce(
        gv_alH,
        5,
        "|cffff8a08Persephone begins chanting in the tongue of the Underworld!"
      );
      GroupClear(gv_abF);
      GroupEnumUnitsInRange(
        gv_abF,
        GetUnitX(gv_aaU[9]),
        GetUnitY(gv_aaU[9]),
        450,
        Condition(f_aOo)
      );
      ForGroup(gv_abF, f_brT);
      f_aIJ(gv_abF);
    }
    if (LoadInteger(gv_abY, 0, GetHandleId(gv_aoO)) == 9) {
      DisplayTimedTextToForce(
        gv_alH,
        5,
        "|cff00ff00Persephone:|r Vex Lo Ber Jah Ko... Ring of Frozen Death, destroy them!"
      );
      gv_aoR = f_aIL();
      SaveInteger(gv_abY, 0, GetHandleId(gv_aoP), 1);
      gv_aoS = GetUnitX(gv_aaU[9]) - 200;
      gv_aoT = GetUnitY(gv_aaU[9]) + GetRandomInt(0, 200) - 100;
      gv_aoU = 225;
      gv_aoV = 100;
    }
    if (LoadInteger(gv_abY, 0, GetHandleId(gv_aoO)) == 15) {
      SaveInteger(gv_abY, 0, GetHandleId(gv_aoO), 0);
      gv_alM = CreateUnitAtLoc(
        Player(11),
        gv_alx.getInt(GetRandomInt(540, 542)),
        gv_alC[GetRandomInt(99, 102)],
        0.0
      );
      DestroyEffect(
        AddSpecialEffectTarget(
          "Abilities\\Spells\\Demon\\DarkPortal\\DarkPortalTarget.mdl",
          gv_alM,
          "overhead"
        )
      );
      GroupAddUnit(gv_aoQ, gv_alM);
      gv_alM = CreateUnitAtLoc(
        Player(11),
        gv_alx.getInt(GetRandomInt(540, 542)),
        gv_alC[GetRandomInt(99, 102)],
        0.0
      );
      DestroyEffect(
        AddSpecialEffectTarget(
          "Abilities\\Spells\\Demon\\DarkPortal\\DarkPortalTarget.mdl",
          gv_alM,
          "overhead"
        )
      );
      GroupAddUnit(gv_aoQ, gv_alM);
    }
    ForGroup(gv_aoQ, f_brS);
    if (!RectContainsUnit(gv_aeP, gv_aaU[9])) {
      gv_acL = GetUnitName(gv_aaU[9]);
      SetUnitPosition(
        gv_aaU[9],
        LoadInteger(gv_abT, gv_acK, StringHash(S2S(gv_acL + "_X"))),
        LoadInteger(gv_abT, gv_acK, StringHash(S2S(gv_acL + "_Y")))
      );
    }
    if (f_aNV(gv_aeP) < 1) {
      SaveInteger(gv_abY, 0, GetHandleId(gv_aoO), 2);
      PauseTimer(gv_aoO);
      PauseTimer(gv_aoP);
      ForGroup(gv_aoQ, f_aOp);
      GroupClear(gv_aoQ);
      f_aCq(1, gv_aaU[9], gv_aeP, gv_ajb);
    }
  }
}
function f_bsb() {
  DisplayTimedTextToForce(
    gv_alH,
    5,
    "|cff00ff00Persephone:|r Your journey ends here, warrior.\n              You will not escape the frozen realm of Persephone!"
  );
  SaveInteger(gv_abY, 0, GetHandleId(gv_aoO), 0);
  TimerStart(gv_aoO, 1, true, f_bsa);
  TimerStart(gv_aoP, 0.03, true, f_brU);
  DisableTrigger(gv_ajb);
}
function f_bsc() {
  var lv_bsd = f_aCK();
  gv_aww[lv_bsd] = GetEventDamageSource();
  gv_awx[lv_bsd] = GetTriggerUnit();
  PauseUnit(gv_awx[lv_bsd], true);
  PauseUnit(gv_aww[lv_bsd], true);
  return lv_bsd;
}
function f_bse(lv_bsf) {
  PauseUnit(gv_awx[lv_bsf], false);
  PauseUnit(gv_aww[lv_bsf], false);
  f_aNE(
    gv_awx[lv_bsf],
    "Objects\\Spawnmodels\\Undead\\ImpaleTargetDust\\ImpaleTargetDust.mdl",
    400,
    30,
    1,
    0.02
  );
}
function f_bsg(lv_bsh) {
  if (lv_bsh == null) {
    return;
  } else {
    if (gv_awv.getInt(lv_bsh) != -1) {
      return;
    }
  }
  f_bse(lv_bsh);
  gv_awv[lv_bsh] = gv_awt;
  gv_awt = lv_bsh;
}
function f_bsi() {
  var lv_bsj = GetExpiredTimer();
  var lv_bsk;
  var lv_bsl;
  var lv_bsm = LoadInteger(gv_abY, 0, GetHandleId(lv_bsj));
  if (
    GetRandomInt(0, 100) == 1 ||
    GetWidgetLife(gv_aww[lv_bsm]) < 0.406 ||
    GetWidgetLife(gv_awx[lv_bsm]) < 0.406
  ) {
    f_aJk(lv_bsj);
    f_bsg(lv_bsm);
  } else {
    SetUnitFacing(gv_aww[lv_bsm], GetUnitFacing(gv_aww[lv_bsm]) + gv_aoX);
    lv_bsk =
      GetUnitX(gv_aww[lv_bsm]) +
      100 * Cos(GetUnitFacing(gv_aww[lv_bsm]) * bj_DEGTORAD);
    lv_bsl =
      GetUnitY(gv_aww[lv_bsm]) +
      100 * Sin(GetUnitFacing(gv_aww[lv_bsm]) * bj_DEGTORAD);
    SetUnitX(gv_awx[lv_bsm], lv_bsk);
    SetUnitY(gv_awx[lv_bsm], lv_bsl);
  }
  lv_bsj = null;
}
function f_bsn() {
  var lv_bso = GetEventDamageSource();
  var lv_bsp;
  if (
    !IsUnitPaused(GetTriggerUnit()) &&
    GetRandomInt(0, 100) < 9 &&
    (GetUnitTypeId(lv_bso) == "n00L" ||
      GetUnitTypeId(lv_bso) == "n00K" ||
      GetUnitTypeId(lv_bso) == "narg")
  ) {
    lv_bsp = f_aJj();
    SaveInteger(gv_abY, 0, GetHandleId(lv_bsp), f_bsc());
    TimerStart(lv_bsp, 0.02, true, f_bsi);
  }
  lv_bsp = null;
  lv_bso = null;
  return false;
}
function f_bsq() {
  var lv_bsr;
  PauseTimer(gv_aoW);
  lv_bsr = 1;
  do {
    if (lv_bsr > 12) {
      break;
    }
    if (!(gv_aly[lv_bsr] == null)) {
      DestroyEffect(gv_aly[lv_bsr]);
    }
    lv_bsr = lv_bsr + 1;
  } while (true);
  if (GetWidgetLife(gv_akL) > 0.405) {
    SetUnitState(gv_akL, UNIT_STATE_LIFE, 999999);
    SetUnitState(gv_akL, UNIT_STATE_MANA, 999999);
  } else {
    gv_akL = CreateUnit(
      Player(10),
      "narg",
      LoadInteger(gv_abT, gv_acK, StringHash(S2S(gv_acL + "_X"))),
      LoadInteger(gv_abT, gv_acK, StringHash(S2S(gv_acL + "_Y"))),
      0.0
    );
  }
  gv_acL = GetUnitName(gv_akL);
  SetUnitPosition(
    gv_akL,
    LoadInteger(gv_abT, gv_acK, StringHash(S2S(gv_acL + "_X"))),
    LoadInteger(gv_abT, gv_acK, StringHash(S2S(gv_acL + "_Y")))
  );
  SetUnitFacing(
    gv_akL,
    LoadInteger(gv_abT, gv_acK, StringHash(S2S(gv_acL + "_A")))
  );
  if (GetWidgetLife(gv_akH) > 0.405) {
    SetUnitState(gv_akH, UNIT_STATE_LIFE, 999999);
    SetUnitState(gv_akH, UNIT_STATE_MANA, 999999);
  } else {
    gv_akH = CreateUnit(
      Player(10),
      "n00L",
      LoadInteger(gv_abT, gv_acK, StringHash(S2S(gv_acL + "_X"))),
      LoadInteger(gv_abT, gv_acK, StringHash(S2S(gv_acL + "_Y"))),
      0.0
    );
  }
  gv_acL = GetUnitName(gv_akH);
  SetUnitPosition(
    gv_akH,
    LoadInteger(gv_abT, gv_acK, StringHash(S2S(gv_acL + "_X"))),
    LoadInteger(gv_abT, gv_acK, StringHash(S2S(gv_acL + "_Y")))
  );
  SetUnitFacing(
    gv_akH,
    LoadInteger(gv_abT, gv_acK, StringHash(S2S(gv_acL + "_A")))
  );
  if (GetWidgetLife(gv_aky) > 0.405) {
    SetUnitState(gv_aky, UNIT_STATE_LIFE, 999999);
    SetUnitState(gv_aky, UNIT_STATE_MANA, 999999);
  } else {
    gv_aky = CreateUnit(
      Player(10),
      "n00K",
      LoadInteger(gv_abT, gv_acK, StringHash(S2S(gv_acL + "_X"))),
      LoadInteger(gv_abT, gv_acK, StringHash(S2S(gv_acL + "_Y"))),
      0.0
    );
  }
  gv_acL = GetUnitName(gv_aky);
  SetUnitPosition(
    gv_aky,
    LoadInteger(gv_abT, gv_acK, StringHash(S2S(gv_acL + "_X"))),
    LoadInteger(gv_abT, gv_acK, StringHash(S2S(gv_acL + "_Y")))
  );
  SetUnitFacing(
    gv_aky,
    LoadInteger(gv_abT, gv_acK, StringHash(S2S(gv_acL + "_A")))
  );
  f_aCq(1, gv_akK, gv_aeq, gv_ajc);
}
function f_bss() {
  var lv_bst;
  var lv_bsu;
  var lv_bsv;
  var lv_bsw;
  var lv_bsx;
  if (GetWidgetLife(gv_akK) < 0.406) {
    PauseTimer(gv_aoW);
    if (GetWidgetLife(gv_akL) > 0.405) {
      KillUnit(gv_akL);
    }
    if (GetWidgetLife(gv_akH) > 0.405) {
      KillUnit(gv_akH);
    }
    if (GetWidgetLife(gv_aky) > 0.405) {
      KillUnit(gv_aky);
    }
    lv_bsu = 1;
    do {
      if (lv_bsu > 12) {
        break;
      }
      if (gv_aly[lv_bsu] != null) {
        DestroyEffect(gv_aly[lv_bsu]);
      }
      lv_bsu = lv_bsu + 1;
    } while (true);
    DisplayTimedTextToForce(
      gv_alH,
      5,
      "|cff00ff00Medusa:|r You have escaped death..."
    );
  } else {
    if (LoadInteger(gv_abY, 0, GetHandleId(gv_aoW)) > 0) {
      if (GetRandomInt(1, 200) == 1) {
        if (gv_aoX == 6.5) {
          gv_aoX = -6.5;
        } else {
          gv_aoX = 6.5;
        }
      }
      SetUnitFacing(gv_akK, GetUnitFacing(gv_akK) + gv_aoX);
      lv_bsv = 25;
      lv_bsu = 1;
      do {
        if (lv_bsu > 12) {
          break;
        }
        lv_bsw =
          GetUnitX(gv_akK) + lv_bsv * Cos(GetUnitFacing(gv_akK) * bj_DEGTORAD);
        lv_bsx =
          GetUnitY(gv_akK) + lv_bsv * Sin(GetUnitFacing(gv_akK) * bj_DEGTORAD);
        DestroyEffect(gv_aly[lv_bsu]);
        gv_aly[lv_bsu] = AddSpecialEffect(
          "Abilities\\Spells\\Human\\FlameStrike\\FlameStrikeDamageTarget.mdl",
          lv_bsw,
          lv_bsx
        );
        lv_bst = 0;
        do {
          if (lv_bst > 7) {
            break;
          }
          if (GetPlayerSlotState(Player(lv_bst)) == PLAYER_SLOT_STATE_PLAYING) {
            if (
              f_aMC(
                GetUnitX(gv_alv[lv_bst]),
                GetUnitY(gv_alv[lv_bst]),
                lv_bsw,
                lv_bsx
              ) < 50
            ) {
              KillUnit(gv_alv[lv_bst]);
            }
          }
          lv_bst = lv_bst + 1;
        } while (true);
        lv_bsv = lv_bsv + 50;
        lv_bsu = lv_bsu + 1;
      } while (true);
    }
  }
  if (f_aNV(gv_aeq) < 1) {
    f_bsq();
  }
}
function f_bsy() {
  DisplayTimedTextToForce(
    gv_alH,
    5,
    "|cff00ff00Medusa:|r Time is short mortal..."
  );
  StartSound(gv_agi);
  gv_aoX = 6.5;
  SaveInteger(gv_abY, 0, GetHandleId(gv_aoW), 1);
  TimerStart(gv_aoW, 0.05, true, f_bss);
  DisableTrigger(gv_ajc);
}
function f_bsz() {
  var lv_bsA = GetExpiredTimer();
  var lv_bsB = LoadInteger(gv_abY, 0, GetHandleId(lv_bsA));
  gv_aoZ = gv_aoZ + 0.03;
  if (
    gv_aoZ > 6 ||
    GetWidgetLife(gv_awE[lv_bsB]) < 0.406 ||
    GetWidgetLife(gv_akN) < 0.406
  ) {
    gv_apa = true;
  } else {
    if (IsUnitInRange(gv_awE[lv_bsB], gv_akN, 150)) {
      KillUnit(gv_awE[lv_bsB]);
      gv_apa = true;
    } else {
      SetUnitPosition(
        gv_awE[lv_bsB],
        GetUnitX(gv_awE[lv_bsB]) - gv_awF[lv_bsB],
        GetUnitY(gv_awE[lv_bsB]) - gv_awG[lv_bsB]
      );
      IssueImmediateOrderById(gv_awE[lv_bsB], 851972);
    }
  }
  if (gv_apa) {
    gv_apa = false;
    f_aJk(lv_bsA);
    f_aCI(lv_bsB);
  }
}
function f_bsC(lv_bsD) {
  var lv_bsE = f_aJj();
  var lv_bsF = f_aCG();
  var lv_bsG = GetUnitX(gv_akN);
  var lv_bsH = GetUnitY(gv_akN);
  var lv_bsI = Atan2(
    GetUnitY(lv_bsD) - GetUnitY(gv_akN),
    GetUnitX(lv_bsD) - GetUnitX(gv_akN)
  );
  gv_awF[lv_bsF] = 10 * Cos(lv_bsI);
  gv_awG[lv_bsF] = 10 * Sin(lv_bsI);
  gv_awE[lv_bsF] = lv_bsD;
  gv_awD[lv_bsF] = 0;
  gv_aoZ = 0.0;
  do {
    if (IsUnitInRangeXY(lv_bsD, lv_bsG, lv_bsH, 10)) {
      break;
    }
    lv_bsG = lv_bsG + gv_awF[lv_bsF];
    lv_bsH = lv_bsH + gv_awG[lv_bsF];
    gv_awB[gv_awC.getInt(lv_bsF) + gv_awD.getInt(lv_bsF)] = AddSpecialEffect(
      "Abilities\\Spells\\Human\\FlameStrike\\FlameStrikeEmbers.mdl",
      lv_bsG,
      lv_bsH
    );
    gv_awD[lv_bsF] = gv_awD.getInt(lv_bsF) + 1;
  } while (true);
  IssueImmediateOrderById(gv_akN, 851993);
  SetUnitFacingTimed(gv_akN, lv_bsI * bj_RADTODEG, 0);
  SaveInteger(gv_abY, 0, GetHandleId(lv_bsE), lv_bsF);
  TimerStart(lv_bsE, 0.03, true, f_bsz);
  lv_bsE = null;
  return lv_bsF;
}
function f_bsJ() {
  var lv_bsK = 0;
  if (GetWidgetLife(gv_akN) < 0.406) {
    DisplayTimedTextToForce(
      gv_alH,
      5,
      "|cffff8a08You have defeated the mighty lion, what remains?"
    );
    f_aJk(gv_aoY);
  } else {
    SaveInteger(
      gv_abY,
      0,
      GetHandleId(gv_aoY),
      LoadInteger(gv_abY, 0, GetHandleId(gv_aoY)) + 1
    );
    if (LoadInteger(gv_abY, 0, GetHandleId(gv_aoY)) == 10) {
      SaveInteger(gv_abY, 0, GetHandleId(gv_aoY), 0);
      GroupClear(gv_abF);
      do {
        if (lv_bsK > 7) {
          break;
        }
        if (
          IsUnitInRange(gv_alv[lv_bsK], gv_akN, 800) &&
          GetWidgetLife(gv_alv[lv_bsK]) > 0.405
        ) {
          GroupAddUnit(gv_abF, gv_alv[lv_bsK]);
        }
        lv_bsK = lv_bsK + 1;
      } while (true);
      bj_groupRandomConsidered = 0;
      bj_groupRandomCurrentPick = null;
      ForGroup(gv_abF, GroupPickRandomUnitEnum);
      if (bj_groupRandomCurrentPick != null) {
        f_bsC(bj_groupRandomCurrentPick);
        DisplayTimedTextToForce(
          gv_alH,
          5,
          S2S(
            "|cffff8a08Nemean Lion sets his eyes on " +
              GetPlayerName(GetOwningPlayer(bj_groupRandomCurrentPick))
          ) + "!"
        );
      }
    }
    if (!RectContainsUnit(gv_afZ, gv_akN)) {
      gv_acL = GetUnitName(gv_akN);
      SetUnitPosition(
        gv_akN,
        LoadInteger(gv_abT, gv_acK, StringHash(S2S(gv_acL + "_X"))),
        LoadInteger(gv_abT, gv_acK, StringHash(S2S(gv_acL + "_Y")))
      );
    }
    if (f_aNV(gv_afZ) < 1) {
      PauseTimer(gv_aoY);
      f_aCq(1, gv_akN, gv_afZ, gv_ajd);
    }
  }
}
function f_bsL() {
  DisplayTimedTextToForce(gv_alH, 5, "|cffff8a08You hear a loud roar...");
  SaveInteger(gv_abY, 0, GetHandleId(gv_aoY), 0);
  StartSound(gv_agd);
  TimerStart(gv_aoY, 1, true, f_bsJ);
  DisableTrigger(gv_ajd);
}
function f_bsM() {
  var lv_bsN;
  var lv_bsO;
  var lv_bsP;
  if (GetWidgetLife(gv_akI) < 0.406) {
    DisplayTimedTextToForce(
      gv_alH,
      5,
      "|cffff8a08You have defeated the Ladon... What is that burning, pulsing object on the ground?"
    );
    PauseTimer(gv_apb);
  } else {
    SaveInteger(gv_abY, 0, GetHandleId(gv_apb), 0);
    if (LoadInteger(gv_abY, 0, GetHandleId(gv_apb)) == 1) {
      lv_bsO = 0;
      do {
        if (lv_bsO > 6) {
          break;
        }
        DestroyEffect(gv_aly[120 + lv_bsO]);
        lv_bsO = lv_bsO + 1;
      } while (true);
      lv_bsN = f_aNO(GetUnitX(gv_akI), GetUnitY(gv_akI), 1000);
      if (lv_bsN < 8) {
        IssueImmediateOrderById(gv_akI, 851993);
        gv_apc = GetUnitX(gv_alv[lv_bsN]);
        gv_apd = GetUnitY(gv_alv[lv_bsN]);
        lv_bsP =
          bj_RADTODEG *
          Atan2(gv_apd - GetUnitY(gv_akI), gv_apc - GetUnitX(gv_akI));
        SetUnitFacingTimed(gv_akI, lv_bsP, 0);
        gv_aly[127] = AddSpecialEffect(
          "Abilities\\Spells\\Human\\FlameStrike\\FlameStrikeTarget.mdl",
          gv_apc,
          gv_apd
        );
      } else {
        SaveInteger(gv_abY, 0, GetHandleId(gv_apb), 3);
      }
    }
    if (LoadInteger(gv_abY, 0, GetHandleId(gv_apb)) == 2) {
      DestroyEffect(gv_aly[127]);
      gv_aly[120] = AddSpecialEffect(
        "Abilities\\Spells\\Human\\FlameStrike\\FlameStrike1.mdl",
        gv_apc,
        gv_apd
      );
      lv_bsO = 1;
      do {
        if (lv_bsO > 6) {
          break;
        }
        lv_bsP = lv_bsO * 60;
        gv_aly[120 + lv_bsO] = AddSpecialEffect(
          "Abilities\\Spells\\Human\\FlameStrike\\FlameStrike1.mdl",
          gv_apc + 200 * Cos(lv_bsP * bj_DEGTORAD),
          gv_apd + 200 * Sin(lv_bsP * bj_DEGTORAD)
        );
        lv_bsO = lv_bsO + 1;
      } while (true);
      lv_bsO = 0;
      do {
        if (lv_bsO > 7) {
          break;
        }
        if (
          f_aMC(
            gv_apc,
            gv_apd,
            GetUnitX(gv_alv[lv_bsO]),
            GetUnitY(gv_alv[lv_bsO])
          ) < 800
        ) {
          UnitDamageTarget(
            gv_akI,
            gv_alv[lv_bsO],
            2000 + I2R(GetRandomInt(0, 10) * 100),
            true,
            false,
            ATTACK_TYPE_NORMAL,
            DAMAGE_TYPE_MAGIC,
            WEAPON_TYPE_WHOKNOWS
          );
        }
        lv_bsO = lv_bsO + 1;
      } while (true);
      IssueImmediateOrderById(gv_akI, 851972);
    }
    if (
      LoadInteger(gv_abY, 0, GetHandleId(gv_apb)) == 3 ||
      LoadInteger(gv_abY, 0, GetHandleId(gv_apb)) == 6
    ) {
      lv_bsN = f_aNO(GetUnitX(gv_akI), GetUnitY(gv_akI), 700);
      if (lv_bsN < 8) {
        IssueTargetOrderById(gv_akI, 852189, gv_alv[lv_bsN]);
        UnitDamageTarget(
          gv_akI,
          gv_alv[lv_bsN],
          400,
          true,
          false,
          ATTACK_TYPE_NORMAL,
          DAMAGE_TYPE_MAGIC,
          WEAPON_TYPE_WHOKNOWS
        );
      }
    }
    if (LoadInteger(gv_abY, 0, GetHandleId(gv_apb)) == 4) {
      lv_bsN = f_aNO(GetUnitX(gv_akI), GetUnitY(gv_akI), 600);
      if (lv_bsN < 8) {
        IssueTargetOrderById(gv_akI, 852171, gv_alv[lv_bsN]);
      }
    }
    if (LoadInteger(gv_abY, 0, GetHandleId(gv_apb)) == 8) {
      SaveInteger(gv_abY, 0, GetHandleId(gv_apb), 0);
    }
    if (!RectContainsUnit(gv_aeo, gv_akI)) {
      SetUnitPosition(gv_akI, -11095, 7177);
    }
    if (f_aNV(gv_aeo) < 1) {
      PauseTimer(gv_apb);
      f_aCq(1, gv_akI, gv_aeo, gv_aje);
    }
  }
}
function f_bsQ() {
  DisplayTimedTextToForce(
    gv_alH,
    5,
    "|cffff8a08You hear the great dragon Ladon..."
  );
  SaveInteger(gv_abY, 0, GetHandleId(gv_apb), 0);
  StartSound(gv_agj);
  TimerStart(gv_apb, 1.5, true, f_bsM);
  DisableTrigger(gv_aje);
}
function f_bsR() {
  var lv_bsS;
  var lv_bsT;
  var lv_bsU;
  if (GetWidgetLife(gv_akI) > 0.405) {
    lv_bsS = f_aOa(gv_aeo, "x");
    lv_bsT = f_aOa(gv_aeo, "y");
    IssuePointOrderById(gv_akI, gv_aar, lv_bsS, lv_bsT);
  }
  if (GetWidgetLife(gv_akB) > 0.405) {
    IssuePointOrderById(gv_akB, 851986, 8052.5, 9442.8);
  }
  if (GetWidgetLife(gv_akw) > 0.405) {
    lv_bsS = f_aOa(gv_acT, "x");
    lv_bsT = f_aOa(gv_acT, "y");
    IssuePointOrderById(gv_akw, 851986, lv_bsS, lv_bsT);
  }
  if (gv_alx.getInt(35 + 7000) == 2) {
    if (gv_alv[89] != null && GetWidgetLife(gv_alv[89]) > 0.405) {
      lv_bsU = GetUnitUserData(gv_alv[89]);
      if (lv_bsU == 1) {
        lv_bsS = GetRectCenterX(gv_afE);
        lv_bsT = GetRectCenterY(gv_afE);
      }
      if (lv_bsU == 2) {
        lv_bsS = GetRectCenterX(gv_afF);
        lv_bsT = GetRectCenterY(gv_afF);
      }
      if (lv_bsU == 3) {
        lv_bsS = GetRectCenterX(gv_afG);
        lv_bsT = GetRectCenterY(gv_afG);
      }
      if (lv_bsU == 4) {
        lv_bsS = GetRectCenterX(gv_aer);
        lv_bsT = GetRectCenterY(gv_aer);
      }
      IssuePointOrderById(gv_alv[89], 851986, lv_bsS, lv_bsT);
    }
  }
}
function f_bsV() {
  AddHeroXP(GetEnumUnit(), gv_alO, true);
}
function f_bsW() {
  var lv_bsX = GetEnumPlayer();
  var lv_bsY = R2I(gv_alO * f_azM(gv_alv[GetPlayerId(lv_bsX)]));
  if (f_aJX(GetPlayerId(lv_bsX), "I06E")) {
    if (f_aJX(GetPlayerId(lv_bsX), "I06D")) {
      lv_bsY = R2I(
        lv_bsY *
          (1 +
            0.25 *
              f_azK(gv_alv[GetPlayerId(lv_bsX)]) *
              f_azM(gv_alv[GetPlayerId(lv_bsX)]))
      );
    } else {
      lv_bsY = R2I(lv_bsY * (1 + 0.25 * f_azK(gv_alv[GetPlayerId(lv_bsX)])));
    }
  }
  SetPlayerState(
    lv_bsX,
    PLAYER_STATE_RESOURCE_GOLD,
    GetPlayerState(lv_bsX, PLAYER_STATE_RESOURCE_GOLD) + lv_bsY
  );
  lv_bsX = null;
}
function f_bsZ() {
  gv_alM = GetFilterUnit();
  if (
    GetHeroLevel(gv_alM) >= gv_alO &&
    IsUnitType(gv_alM, UNIT_TYPE_HERO) &&
    IsUnitAlly(gv_alM, gv_alL)
  ) {
    gv_alI = gv_alI - 0.075;
    gv_alJ = gv_alJ - 0.1;
    ForceAddPlayer(gv_alK, GetOwningPlayer(gv_alM));
    return true;
  }
  return false;
}
function f_bta() {
  var lv_btb = GetTriggerUnit();
  var lv_btc = GetUnitLevel(lv_btb);
  var lv_btd = CreateTextTag();
  var lv_bte = CreateTextTag();
  var lv_btf = CreateGroup();
  var lv_btg = GetUnitX(lv_btb);
  var lv_bth = GetUnitY(lv_btb);
  gv_alL = GetOwningPlayer(GetKillingUnit());
  gv_alO = lv_btc - 5;
  gv_alI = 1;
  gv_alJ = 1;
  GroupEnumUnitsInRange(lv_btf, lv_btg, lv_bth, 1000, Condition(f_bsZ));
  if (lv_btc > 72) {
    gv_alO =
      R2I((gv_alx.getInt(72) + 6 * (150 - lv_btc)) * gv_alI + 0.5) +
      GetRandomInt(-1, 2);
  } else {
    gv_alO = R2I(gv_alx.getInt(lv_btc) * gv_alI + 0.5) + GetRandomInt(-1, 2);
  }
  gv_alO = R2I(gv_alO * 0.5 * gv_aak);
  SetTextTagText(lv_bte, "|cff900090+" + I2S(gv_alO) + " exp", 0.021);
  SetTextTagPos(lv_bte, lv_btg + 5, lv_bth, 50);
  SetTextTagVelocity(lv_bte, 0.0, 0.036);
  SetTextTagPermanent(lv_bte, false);
  SetTextTagLifespan(lv_bte, 3);
  SetTextTagVisibility(lv_bte, IsPlayerInForce(GetLocalPlayer(), gv_alK));
  ForGroup(lv_btf, f_bsV);
  if (lv_btc > 72) {
    gv_alO =
      R2I((gv_alx.getInt(144) + 12 * (150 - lv_btc)) * gv_alI + 0.5) +
      GetRandomInt(-1, 4);
  } else {
    gv_alO =
      R2I(gv_alx.getInt(lv_btc + 72) * gv_alI + 0.5) + GetRandomInt(-1, 6);
  }
  gv_alO = R2I(gv_alO * 0.5 * gv_aak);
  DestroyEffect(
    AddSpecialEffectTarget(
      "UI\\Feedback\\GoldCredit\\GoldCredit.mdl",
      lv_btb,
      "origin"
    )
  );
  SetTextTagText(lv_btd, "|cffffcc00+" + I2S(gv_alO) + " g", 0.021);
  SetTextTagPos(lv_btd, lv_btg, lv_bth, 0.0);
  SetTextTagVelocity(lv_btd, 0.0, 0.036);
  SetTextTagPermanent(lv_btd, false);
  SetTextTagLifespan(lv_btd, 3);
  SetTextTagVisibility(lv_btd, IsPlayerInForce(GetLocalPlayer(), gv_alK));
  ForForce(gv_alK, f_bsW);
  ForceClear(gv_alK);
  DestroyGroup(lv_btf);
  lv_btf = null;
  lv_btb = null;
  lv_btd = null;
  lv_bte = null;
}
function f_bti() {
  var lv_btj = CreateTrigger();
  TriggerRegisterPlayerUnitEvent(
    lv_btj,
    Player(10),
    EVENT_PLAYER_UNIT_DEATH,
    null
  );
  TriggerRegisterPlayerUnitEvent(
    lv_btj,
    Player(11),
    EVENT_PLAYER_UNIT_DEATH,
    null
  );
  TriggerAddAction(lv_btj, f_bta);
}
function f_btk() {
  var lv_btl = GetDyingUnit();
  var lv_btm = GetUnitTypeId(lv_btl);
  var lv_btn = GetKillingUnit();
  var lv_bto = GetOwningPlayer(lv_btn);
  var lv_btp = GetUnitX(lv_btl);
  var lv_btq = GetUnitY(lv_btl);
  var lv_btr = 0;
  var lv_bts = GetRandomInt(1, 100);
  var lv_btt;
  var lv_btu = S2I(SubString(GetUnitName(lv_btl), 5, 8));
  if (IsUnitType(lv_btl, UNIT_TYPE_ANCIENT)) {
    return;
  }
  gv_alx[196] = gv_alx.getInt(196) + 1;
  if (gv_alx.getInt(196) > gv_alx.getInt(195)) {
    gv_alx[196] = gv_alx.getInt(196) - gv_alx.getInt(195);
    do {
      if (lv_btr > 7) {
        break;
      }
      if (
        GetPlayerState(Player(lv_btr), PLAYER_STATE_RESOURCE_FOOD_USED) < 200
      ) {
        lv_btt = 1;
        if (GetUnitLevel(lv_btl) > 50) {
          lv_btt = lv_btt + 1;
        } else {
          if (GetUnitLevel(lv_btl) > 29 && GetRandomInt(1, 2) == 1) {
            lv_btt = lv_btt + 1;
          }
        }
        if (f_aJX(lv_btr, "I06D")) {
          lv_btt = lv_btt + 1;
          lv_btt = R2I(lv_btt * f_azK(gv_alv[lv_btr]));
        } else {
          lv_btt = R2I(lv_btt * f_azM(gv_alv[lv_btr]));
        }
        SetPlayerState(
          Player(lv_btr),
          PLAYER_STATE_RESOURCE_FOOD_USED,
          GetPlayerState(Player(lv_btr), PLAYER_STATE_RESOURCE_FOOD_USED) +
            lv_btt
        );
      }
      if (
        GetPlayerState(Player(lv_btr), PLAYER_STATE_RESOURCE_FOOD_USED) > 200
      ) {
        SetPlayerState(Player(lv_btr), PLAYER_STATE_RESOURCE_FOOD_USED, 200);
      }
      lv_btr = lv_btr + 1;
    } while (true);
  }
  if (lv_btm == "nkob") {
    f_aKF(11);
    f_aKF(13);
  }
  if (lv_btm == "nkot") {
    if (lv_bts <= 5) {
      CreateItem(30 + gv_ama.getInt(GetRandomInt(0, 8)), lv_btp, lv_btq);
    }
  }
  if (lv_btm == "nkog") {
    f_aKF(12);
    f_aKF(13);
  }
  if (lv_btm == "nkol") {
    f_aKF(12);
    f_aKF(13);
  }
  if (lv_btm == "nban") {
    f_aKF(14);
    f_aKF(15);
    if (lv_bts <= 5) {
      CreateItem(40 + gv_ama.getInt(GetRandomInt(0, 8)), lv_btp, lv_btq);
    }
    lv_btt = GetRandomInt(1, 60);
    if (lv_btt == 1) {
      CreateItem("fgsk", lv_btp, lv_btq);
    } else {
      if (lv_btt == 2) {
        CreateItem("wild", lv_btp, lv_btq);
      } else {
        if (lv_btt == 3) {
          CreateItem("fgdg", lv_btp, lv_btq);
        }
      }
    }
  }
  if (lv_btm == "nass") {
    f_aKF(14);
    f_aKF(15);
    lv_btt = GetRandomInt(1, 60);
    if (lv_btt == 1) {
      CreateItem("fgsk", lv_btp, lv_btq);
    } else {
      if (lv_btt == 2) {
        CreateItem("wild", lv_btp, lv_btq);
      } else {
        if (lv_btt == 3) {
          CreateItem("fgdg", lv_btp, lv_btq);
        }
      }
    }
  }
  if (lv_btm == "ntn2") {
    gv_alx[14 + 7400] = gv_alx.getInt(14 + 7400) + 99;
    if (gv_alx.getInt(14 + 7000) != 2) {
      gv_alx[14 + 7400] = gv_alx.getInt(14 + 7400) + 1;
    }
    f_aKF(14);
  }
  if (lv_btm == "nbld") {
    f_aKF(16);
    lv_btt = GetRandomInt(1, 30);
    if (lv_btt == 1) {
      CreateItem("fgsk", lv_btp, lv_btq);
    } else {
      if (lv_btt == 2) {
        CreateItem("wild", lv_btp, lv_btq);
      } else {
        if (lv_btt == 3) {
          CreateItem("fgdg", lv_btp, lv_btq);
        }
      }
    }
  }
  if (lv_btm == "nwlt") {
    lv_btt = GetRandomInt(1, 30);
    if (lv_btt == 1) {
      CreateItem("fgsk", lv_btp, lv_btq);
    } else {
      if (lv_btt == 2) {
        CreateItem("wild", lv_btp, lv_btq);
      } else {
        if (lv_btt == 3) {
          CreateItem("fgdg", lv_btp, lv_btq);
        }
      }
    }
  }
  if (lv_btm == "nqbh") {
    if (lv_bts <= 5) {
      CreateItem(gv_ama.getInt(50 + GetRandomInt(0, 8)), lv_btp, lv_btq);
    }
  }
  if (lv_btm == "nftt") {
    f_aKF(21);
    lv_btt = GetRandomInt(1, 25);
    if (lv_btt == 1) {
      CreateItem("fgsk", lv_btp, lv_btq);
    } else {
      if (lv_btt == 2) {
        CreateItem("wild", lv_btp, lv_btq);
      } else {
        if (lv_btt == 3) {
          CreateItem("fgdg", lv_btp, lv_btq);
        } else {
          if (lv_btt == 4) {
            CreateItem("srrc", lv_btp, lv_btq);
          }
        }
      }
    }
  }
  if (lv_btm == "nftb") {
    f_aKF(21);
    lv_btt = GetRandomInt(1, 25);
    if (lv_btt == 1) {
      CreateItem("fgsk", lv_btp, lv_btq);
    } else {
      if (lv_btt == 2) {
        CreateItem("wild", lv_btp, lv_btq);
      } else {
        if (lv_btt == 3) {
          CreateItem("fgdg", lv_btp, lv_btq);
        } else {
          if (lv_btt == 4) {
            CreateItem("srrc", lv_btp, lv_btq);
          }
        }
      }
    }
  }
  if (lv_btm == "nfsp") {
    if (lv_bts <= 5) {
      CreateItem(gv_ama.getInt(60 + GetRandomInt(0, 8)), lv_btp, lv_btq);
    }
  }
  if (lv_btm == "ngnv") {
    if (lv_bts <= 5) {
      CreateItem(gv_ama.getInt(60 + GetRandomInt(0, 8)), lv_btp, lv_btq);
    }
  }
  if (lv_btm == "nftk") {
    CreateItem(gv_ama.getInt(600 + GetRandomInt(0, 2)), lv_btp, lv_btq);
    CreateItem("srrc", lv_btp, lv_btq);
    CreateItem("whwd", lv_btp, lv_btq);
    f_aKF(22);
    PolledWait(200 / gv_aal);
    if (gv_alc == null || true) {
      gv_alc = CreateUnit(Player(10), "nftk", -10192, 1709, 22);
      DisplayTimedTextToForce(gv_alH, 5, "Troll Chieftain has revived.");
    }
  }
  if (lv_btm == "nhrr") {
    f_aKF(23);
    if (lv_bts <= 5) {
      CreateItem("wswd", lv_btp, lv_btq);
    }
  }
  if (lv_btm == "nhns") {
    gv_alx[23 + 7400] = gv_alx.getInt(23 + 7400) + 99;
    if (gv_alx.getInt(23 + 7000) != 2) {
      gv_alx[23 + 7400] = gv_alx.getInt(23 + 7400) + 1;
    }
    f_aKF(23);
  }
  if (lv_btm == "nhrq") {
    CreateItem("wswd", lv_btp, lv_btq);
  }
  if (lv_btm == "nhrh") {
    f_aKF(25);
    CreateItem("wswd", lv_btp, lv_btq);
  }
  if (lv_btm == "nbdo" || lv_btm == "nbda" || lv_btm == "nbdw") {
    if (gv_alx.getInt(26 + 7000) != 2) {
      gv_alx[26 + 7400] = gv_alx.getInt(26 + 7400) + 1;
    }
    f_aKF(26);
  }
  if (lv_btm == "nbdw") {
    CreateItem(gv_ama.getInt(70 + GetRandomInt(0, 3)), lv_btp, lv_btq);
    PolledWait(200 / gv_aal);
    CreateUnit(Player(10), "nbdw", -650, 14283, 212);
    CreateUnit(Player(10), "nbdo", -800, 14283, 212);
    CreateUnit(Player(10), "nbdo", -500, 14283, 212);
    CreateUnit(Player(10), "nbdo", -650, 14170, 212);
    CreateUnit(Player(10), "nbdo", -650, 14390, 212);
    CreateUnit(Player(10), "nbda", -550, 14450, 212);
    CreateUnit(Player(10), "nbda", -400, 14350, 212);
    DisplayTimedTextToForce(gv_alH, 5, "Minotaur Chieftain has revived.");
  }
  if (lv_btm == "ofrt" || lv_btm == "ntnt" || lv_btm == "ntt2") {
    gv_alx[26 + 7400] = gv_alx.getInt(26 + 7400) + 99;
    if (gv_alx.getInt(26 + 7000) != 2) {
      gv_alx[26 + 7400] = gv_alx.getInt(26 + 7400) + 1;
    }
    f_aKF(26);
  }
  if (lv_btm == "nbzd") {
    f_aKF(30);
    CreateItem(gv_ama.getInt(185 + GetRandomInt(0, 2)), lv_btp, lv_btq);
    CreateItem("I01X", lv_btp, lv_btq);
    CreateItem("I01D", lv_btp, lv_btq);
    RemoveUnit(gv_akI);
    f_aKd(gv_akI, 1);
    SaveInteger(gv_abY, 0, GetHandleId(gv_apb), 0);
    PolledWait(900 / gv_aal);
    gv_akI = CreateUnit(Player(10), "nbzd", -11094, 7053, 270);
    DisplayTimedTextToForce(gv_alH, 7, "|cffff8a08Ladon|r has revived.");
    ResumeTimer(gv_apb);
  }
  if (lv_btm == "nmrr") {
    f_aKF(31);
    f_aKF(33);
    if (GetRandomInt(1, 40) <= 1) {
      CreateItem("fgrg", lv_btp, lv_btq);
    }
  }
  if (lv_btm == "nmmu") {
    f_aKF(31);
    f_aKF(33);
    if (lv_bts <= 5) {
      CreateItem("fgrg", lv_btp, lv_btq);
    }
  }
  if (lv_btm == "nmrm") {
    f_aKF(31);
    f_aKF(33);
    if (lv_bts <= 10) {
      CreateItem("fgrg", lv_btp, lv_btq);
    }
  }
  if (lv_btm == "nmg0" || lv_btm == "nmg1") {
    gv_alx[31 + 7400] = gv_alx.getInt(31 + 7400) + 99;
    if (gv_alx.getInt(31 + 7000) != 2) {
      gv_alx[31 + 7400] = gv_alx.getInt(31 + 7400) + 1;
    }
    f_aKF(31);
  }
  if (lv_btm == "nahy") {
    if (gv_alx.getInt(32 + 7000) < 3) {
      lv_btt = 1;
    } else {
      lv_btt = 4;
    }
    if (GetRandomInt(1, lv_btt) < 3) {
      CreateItem("I01C", lv_btp, lv_btq);
    }
    if (GetRandomInt(1, lv_btt) == 1) {
      CreateItem("I05M", lv_btp, lv_btq);
    }
    f_aKF(32);
    PolledWait(400 / gv_aal);
    gv_akz = CreateUnit(Player(10), "nahy", 5890, -9701, 109.55);
    DisplayTimedTextToForce(gv_alH, 5, "The Hydra has revived.");
  }
  if (lv_btm == "nsat") {
    f_aKF(34);
    if (GetRandomInt(1, 40) <= 1) {
      CreateItem("totw", lv_btp, lv_btq);
    }
  }
  if (lv_btm == "nstl") {
    f_aKF(34);
    if (GetRandomInt(1, 20) <= 1) {
      CreateItem("totw", lv_btp, lv_btq);
    }
  }
  if (lv_btm == "nsth") {
    f_aKF(34);
    if (GetRandomInt(1, 10) <= 1) {
      CreateItem("totw", lv_btp, lv_btq);
    }
  }
  if (lv_btm == "nfrl") {
    f_aKF(37);
    f_aKF(39);
    if (GetRandomInt(1, 40) <= 1) {
      CreateItem("will", lv_btp, lv_btq);
    }
  }
  if (lv_btm == "nfrb") {
    f_aKF(37);
    f_aKF(39);
    if (lv_bts <= 5) {
      CreateItem("will", lv_btp, lv_btq);
    }
  }
  if (lv_btm == "nfrg") {
    f_aKF(38);
    if (lv_bts <= 10) {
      CreateItem("will", lv_btp, lv_btq);
    }
  }
  if (lv_btm == "nsqa") {
    f_aKF(40);
    CreateItem(gv_ama.getInt(120 + GetRandomInt(0, 2)), lv_btp, lv_btq);
    CreateItem("will", lv_btp, lv_btq);
    EnableTrigger(gv_aig);
    gv_ald = null;
    PolledWait(400 / gv_aal);
    if (gv_ald == null) {
      gv_ald = CreateUnit(Player(10), "nsqa", -11814, -1684, 236);
      DisplayTimedTextToForce(gv_alH, 5, "The Blackspot Raven has revived.");
    }
  }
  if (lv_btm == "ncks") {
    f_aKF(45);
  }
  if (lv_btm == "ncim") {
    f_aKF(45);
  }
  if (lv_btm == "ncnt" || lv_btm == "nct1" || lv_btm == "nct2") {
    gv_alx[45 + 7400] = gv_alx.getInt(45 + 7400) + 99;
    if (gv_alx.getInt(45 + 7000) != 2) {
      gv_alx[45 + 7400] = gv_alx.getInt(45 + 7400) + 1;
    }
    f_aKF(45);
  }
  if (lv_btm == "ncnk") {
    f_aKF(46);
    if (lv_btl == gv_akY) {
      CreateItem("I01H", lv_btp, lv_btq);
    }
  }
  if (lv_btm == "ndrd") {
    CreateItem(gv_ama.getInt(90 + GetRandomInt(0, 2)), lv_btp, lv_btq);
    if (gv_alx.getInt(29 + 7000) < 3) {
      CreateItem("I05D", lv_btp, lv_btq);
    }
    PolledWait(400 / gv_aal);
    CreateUnit(Player(10), "ndrd", 14255, 6527, 245);
    DisplayTimedTextToForce(gv_alH, 5, "The Cyclops has revived.");
  }
  if (lv_btm == "nfor") {
    f_aKF(49);
    f_aKF(52);
    if (GetRandomInt(1, 40) <= 1) {
      CreateItem("wlsd", lv_btp, lv_btq);
    }
  }
  if (lv_btm == "ngh2") {
    f_aKF(49);
    f_aKF(52);
    if (lv_bts <= 5) {
      CreateItem("wlsd", lv_btp, lv_btq);
    }
  }
  if (lv_btm == "ngh1") {
    f_aKF(49);
    f_aKF(52);
    if (lv_bts <= 10) {
      CreateItem("wlsd", lv_btp, lv_btq);
    }
  }
  if (lv_btm == "n004") {
    f_aKF(50);
  }
  if (lv_btm == "nowb") {
    f_aKF(50);
  }
  if (lv_btm == "nwns") {
    f_aKF(50);
  }
  if (lv_btm == "ntks") {
    if (GetRandomInt(1, 40) <= 1) {
      CreateItem("woms", lv_btp, lv_btq);
    }
  }
  if (lv_btm == "nmgd") {
    if (lv_bts <= 5) {
      CreateItem("woms", lv_btp, lv_btq);
    }
  }
  if (lv_btm == "nrvs") {
    if (lv_bts <= 10) {
      CreateItem("woms", lv_btp, lv_btq);
    }
  }
  if (lv_btm == "ndqt") {
    f_aKF(51);
    CreateItem(gv_ama.getInt(150 + GetRandomInt(0, 4)), lv_btp, lv_btq);
    KillDestructable(gv_alo);
    ShowUnit(gv_akR, true);
    f_aKx(53);
    PolledWait(400 / gv_aal);
    gv_akK = CreateUnit(Player(10), "ndqt", 3931, -14074, 28);
    f_bsq();
    DisplayTimedTextToForce(gv_alH, 5, "Medusa has revived.");
  }
  if (lv_btm == "nanw") {
    CreateItem(gv_ama.getInt(180), lv_btp, lv_btq);
    f_aKF(58);
  }
  if (lv_btm == "nwld") {
    CreateItem(gv_ama.getInt(202 + GetRandomInt(0, 4)), lv_btp, lv_btq);
    gv_aoi = true;
    DisableTrigger(gv_aiW);
  }
  if (lv_btm == "nbdm") {
    CreateItem(gv_ama.getInt(202 + GetRandomInt(0, 4)), lv_btp, lv_btq);
    gv_aoj = true;
  }
  if (lv_btm == "npfm") {
    CreateItem(gv_ama.getInt(202 + GetRandomInt(0, 4)), lv_btp, lv_btq);
    DisableTrigger(gv_aiX);
  }
  if (lv_btm == "n006") {
    gv_alx[197] = gv_alx.getInt(197) + 1;
    if (gv_alx.getInt(197) > 2) {
      f_aKF(55);
      CreateItem("I05W", lv_btp, lv_btq);
    }
  }
  if (lv_btu > 30) {
    if (GetRandomInt(1, 100) <= 1) {
      CreateItem("whwd", lv_btp, lv_btq);
    }
  }
  if (lv_btu > 45) {
    if (GetRandomInt(1, 300) <= 1) {
      CreateItem("I06E", lv_btp, lv_btq);
    }
  }
  if (lv_btu > 60) {
    if (GetRandomInt(1, 400) <= 1) {
      CreateItem("I06D", lv_btp, lv_btq);
    }
  }
  if (lv_btu > 80) {
    if (GetRandomInt(1, 800) == 1) {
      CreateItem("I064", lv_btp, lv_btq);
    }
    if (GetRandomInt(1, 800) == 1) {
      CreateItem("I067", lv_btp, lv_btq);
    }
    if (GetRandomInt(1, 1000) == 1) {
      CreateItem("I06B", lv_btp, lv_btq);
    }
  }
  if (lv_btu > 100) {
    if (SubString(GetUnitName(lv_btl), 4, 5) == "A") {
      if (GetRandomInt(1, 100) <= 10) {
        CreateItem("I01H", lv_btp, lv_btq);
      }
    } else {
      if (GetRandomInt(1, 100) <= 1) {
        CreateItem("I01H", lv_btp, lv_btq);
      }
    }
  }
  lv_btl = null;
  lv_btn = null;
  lv_bto = null;
}
function f_btv() {
  var lv_btw = GetTriggerUnit();
  var lv_btx = 400 / gv_aal;
  var lv_bty = 0;
  do {
    if (lv_bty > 8) {
      break;
    }
    if (lv_btw == gv_aaU[lv_bty]) {
      lv_bty = 12;
    }
    lv_bty = lv_bty + 1;
  } while (true);
  if (lv_bty == 13) {
    PolledWait(lv_btx);
    ReviveHero(lv_btw, GetUnitX(lv_btw), GetUnitY(lv_btw), false);
    if (lv_btw == gv_aaU[1]) {
      f_aCq(1, gv_aaU[1], gv_acU, gv_aiN);
    } else {
      if (lv_btw == gv_aaU[2]) {
        f_aCq(1, gv_aaU[2], gv_afr, gv_aiO);
      } else {
        if (lv_btw == gv_aaU[3]) {
          f_aCq(1, gv_aaU[3], gv_afD, gv_aiP);
        } else {
          if (lv_btw == gv_aaU[4]) {
            PauseTimer(gv_aoq);
            f_aCq(1, gv_aaU[4], gv_aeC, gv_aiQ);
          } else {
            if (lv_btw == gv_aaU[5]) {
              f_bqB();
            } else {
              if (lv_btw == gv_aaU[6]) {
                PauseTimer(gv_aow);
                ForGroup(gv_aox, f_aOp);
                GroupClear(gv_aox);
                f_aCq(1, gv_aaU[6], gv_afq, gv_aiS);
              } else {
                if (lv_btw == gv_aaU[7]) {
                  if (GetWidgetLife(gv_aoz) > 0.405) {
                    KillUnit(gv_aoz);
                  }
                  PauseTimer(gv_aoA);
                  f_aCq(1, gv_aaU[7], gv_aea, gv_aiT);
                } else {
                  if (lv_btw == gv_aaU[8]) {
                    if (GetWidgetLife(gv_aoD) > 0.405) {
                      KillUnit(gv_aoD);
                    }
                    if (GetWidgetLife(gv_aoF) > 0.405) {
                      KillUnit(gv_aoF);
                    }
                    PauseTimer(gv_aoC);
                    f_aCq(1, gv_aaU[8], gv_adD, gv_aiU);
                  } else {
                    if (lv_btw == gv_aaU[9]) {
                      SaveInteger(gv_abY, 0, GetHandleId(gv_aoO), 2);
                      PauseTimer(gv_aoO);
                      PauseTimer(gv_aoP);
                      ForGroup(gv_aoQ, f_aOp);
                      GroupClear(gv_aoQ);
                      f_aCq(1, gv_aaU[9], gv_aeP, gv_ajb);
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
    DisplayTextToPlayer(
      GetLocalPlayer(),
      0,
      0,
      S2S(GetUnitName(lv_btw) + " has revived")
    );
  }
  lv_btw = null;
}
function f_btz() {
  var lv_btA = GetDyingUnit();
  var lv_btB = GetKillingUnit();
  var lv_btC = GetOwningPlayer(lv_btB);
  var lv_btD = 0;
  var lv_btE = GetUnitX(lv_btA);
  var lv_btF = GetUnitY(lv_btA);
  var lv_btG = GetPlayerId(lv_btC);
  var lv_btH = 10;
  if (GetUnitTypeId(lv_btA) == "Nalc") {
    CreateItem(gv_ama.getInt(350 + GetRandomInt(0, 11)), lv_btE, lv_btF);
    lv_btD = 1;
  }
  if (GetUnitTypeId(lv_btA) == "Nbst") {
    if (lv_btA == gv_aaU[2]) {
      CreateItem(gv_ama.getInt(260 + GetRandomInt(0, 11)), lv_btE, lv_btF);
      lv_btD = 2;
    }
  }
  if (GetUnitTypeId(lv_btA) == "Obla") {
    CreateItem(gv_ama.getInt(515 + GetRandomInt(0, 11)), lv_btE, lv_btF);
    CreateItem(gv_ama.getInt(260 + GetRandomInt(0, 11)), lv_btE, lv_btF);
    lv_btD = 3;
  }
  if (GetUnitTypeId(lv_btA) == "Nbrn") {
    CreateItem(gv_ama.getInt(275 + GetRandomInt(0, 11)), lv_btE, lv_btF);
    CreateItem(gv_ama.getInt(335 + GetRandomInt(0, 11)), lv_btE, lv_btF);
    lv_btD = 4;
  }
  if (GetUnitTypeId(lv_btA) == "Hmkg") {
    CreateItem(gv_ama.getInt(260 + GetRandomInt(0, 11)), lv_btE, lv_btF);
    CreateItem(gv_ama.getInt(275 + GetRandomInt(0, 11)), lv_btE, lv_btF);
    CreateItem(gv_ama.getInt(335 + GetRandomInt(0, 11)), lv_btE, lv_btF);
    lv_btD = 5;
  }
  if (GetUnitTypeId(lv_btA) == "Npbm") {
    if (GetRandomInt(1, 50) == 1) {
      CreateItem(gv_ama.getInt(155), lv_btE, lv_btF);
    }
    CreateItem(gv_ama.getInt(260 + GetRandomInt(0, 11)), lv_btE, lv_btF);
    CreateItem(gv_ama.getInt(275 + GetRandomInt(0, 11)), lv_btE, lv_btF);
    CreateItem(gv_ama.getInt(130 + GetRandomInt(0, 8)), lv_btE, lv_btF);
    f_aKd(lv_btA, 1);
    lv_btD = 6;
  }
  if (GetUnitTypeId(lv_btA) == "Nngs") {
    if (GetRandomInt(1, 50) == 1) {
      CreateItem(gv_ama.getInt(155), lv_btE, lv_btF);
    }
    if (
      UnitHasItemOfTypeBJ(gv_alv[lv_btG], "tbar") ||
      UnitHasItemOfTypeBJ(gv_alv[lv_btG], "tfar")
    ) {
      lv_btH = R2I(10 * f_azK(gv_alv[lv_btG]));
    }
    if (GetRandomInt(0, 100) < lv_btH) {
      CreateItem(gv_ama.getInt(209), lv_btE, lv_btF);
    }
    CreateItem("I05M", lv_btE, lv_btF);
    CreateItem("I05M", lv_btE, lv_btF);
    f_aKd(lv_btA, 1);
    lv_btD = 7;
  }
  if (GetUnitTypeId(lv_btA) == "Nplh") {
    if (GetRandomInt(1, 50) == 1) {
      CreateItem(gv_ama.getInt(155), lv_btE, lv_btF);
    }
    if (f_ayK(gv_alv[lv_btG])) {
      lv_btH = R2I(13 * f_azM(gv_alv[lv_btG]));
    }
    if (GetRandomInt(0, 100) < lv_btH) {
      CreateItem(gv_ama.getInt(181), lv_btE, lv_btF);
    }
    CreateItem("I05M", lv_btE, lv_btF);
    CreateItem("I05M", lv_btE, lv_btF);
    f_aKd(lv_btA, 1);
    lv_btD = 8;
  }
  if (GetUnitTypeId(lv_btA) == "Ntin") {
    CreateItem("I01Y", lv_btE, lv_btF);
    CreateItem("woms", lv_btE, lv_btF);
    if (GetRandomInt(1, 20) == 1) {
      CreateItem(gv_ama.getInt(365 + GetRandomInt(0, 5)), lv_btE, lv_btF);
    }
    lv_btD = 9;
  }
  if (lv_btD > 5) {
    if (GetRandomInt(1, 4) == 1) {
      CreateItem("I01H", lv_btE, lv_btF);
    }
  }
  if (lv_btD > 0) {
    if (lv_btD > 4) {
      if (f_aJX(lv_btG, "I06F") == false) {
        if (GetRandomInt(1, R2I(23 / f_azK(gv_alv[lv_btG]))) == 1) {
          SetItemPlayer(
            CreateItem("I06F", lv_btE, lv_btF),
            GetOwningPlayer(lv_btB),
            false
          );
        }
      } else {
        if (GetRandomInt(1, 35) == 1) {
          CreateItem("I06F", lv_btE, lv_btF);
        }
      }
    }
    gv_alw[lv_btD + 7000] =
      S2S(gv_alw[lv_btD + 7000] + " -- |cffffd700") +
      GetPlayerName(GetOwningPlayer(lv_btB)) +
      "|r";
    f_aKF(lv_btD);
    gv_alx[7000] = gv_alx.getInt(7000) + 1;
    lv_btG = 0;
    do {
      if (lv_btG > 7) {
        break;
      }
      if (
        GetPlayerState(Player(lv_btG), PLAYER_STATE_RESOURCE_FOOD_USED) < 181
      ) {
        SetPlayerState(
          Player(lv_btG),
          PLAYER_STATE_RESOURCE_FOOD_USED,
          GetPlayerState(Player(lv_btG), PLAYER_STATE_RESOURCE_FOOD_USED) + 20
        );
      } else {
        SetPlayerState(Player(lv_btG), PLAYER_STATE_RESOURCE_FOOD_USED, 200);
      }
      lv_btG = lv_btG + 1;
    } while (true);
  }
  lv_btA = null;
  lv_btB = null;
  lv_btC = null;
}
function f_btI() {
  var lv_btJ = CreateTrigger();
  TriggerRegisterPlayerUnitEvent(
    lv_btJ,
    Player(11),
    EVENT_PLAYER_UNIT_DEATH,
    null
  );
  TriggerAddAction(lv_btJ, f_btz);
}
function f_btK() {
  var lv_btL = GetDyingUnit();
  var lv_btM = GetKillingUnit();
  var lv_btN = GetUnitTypeId(lv_btL);
  var lv_btO = GetUnitX(lv_btL);
  var lv_btP = GetUnitY(lv_btL);
  if (IsUnitType(lv_btL, UNIT_TYPE_ANCIENT)) {
    return;
  }
  if (gv_alx.getInt(17 + 7000) == 2) {
    if (lv_btN == "nwlt") {
      if (GetRandomInt(1, 2) <= 1) {
        CreateItem("I057", lv_btO, lv_btP);
      }
    }
  }
  if (gv_alx.getInt(24 + 7000) == 2) {
    if (lv_btN == "nhrr") {
      if (GetRandomInt(1, 2) <= 1) {
        CreateItem("I05B", lv_btO, lv_btP);
      }
    }
  }
  if (gv_alx.getInt(28 + 7000) == 2) {
    if (lv_btN == "nmgw") {
      if (GetRandomInt(1, 2) <= 1) {
        CreateItem("I05C", lv_btO, lv_btP);
      }
    }
  }
  if (gv_alx.getInt(36 + 7000) == 2) {
    if (lv_btN == "nsat" || lv_btN == "nstl" || lv_btN == "nsth") {
      if (GetRandomInt(1, 10) <= 3) {
        CreateItem("I05E", lv_btO, lv_btP);
      }
    }
  }
  if (gv_alx.getInt(43 + 7000) == 2) {
    if (lv_btN == "nfrl" || lv_btN == "nfrb" || lv_btN == "nfrg") {
      if (GetRandomInt(1, 10) <= 3) {
        CreateItem("I05J", lv_btO, lv_btP);
      }
    }
  }
  if (gv_alx.getInt(47 + 7000) == 2) {
    if (lv_btN == "ncks" || lv_btN == "ncim") {
      if (GetRandomInt(1, 10) <= 3) {
        CreateItem("I05K", lv_btO, lv_btP);
      }
    }
  }
  if (gv_alx.getInt(35 + 7000) == 2 || gv_alx.getInt(35 + 7000) == 1) {
    if (lv_btN == "hbew") {
      DisplayTimedTextToPlayer(
        Player(0),
        0,
        0,
        10,
        S2S("caravan died " + I2S(gv_alx.getInt(35 + 7000)))
      );
      DestroyQuest(gv_alB[35]);
      gv_alx[35 + 7000] = 0;
      f_aKx(35);
    }
  }
  lv_btL = null;
  lv_btM = null;
}
function f_btQ() {
  var lv_btR = I2R(GetRandomInt(8, 14) * 30);
  f_aBR("Abilities\\Spells\\Human\\CallToArms\\HumanCallToArmsWhat1.wav");
  TimerStart(gv_alT, lv_btR, false, null);
  TriggerRegisterTimerExpireEvent(gv_ajk, gv_alT);
  TimerStart(gv_alU, lv_btR - 60, false, null);
  TriggerRegisterTimerExpireEvent(gv_ajj, gv_alU);
  DestroyTimerDialog(gv_alA[8]);
  gv_alA[8] = CreateTimerDialog(gv_alT);
  TimerDialogSetTitle(gv_alA[8], "Next Attack");
  TimerDialogDisplay(gv_alA[8], true);
  DestroyTrigger(gv_aji);
}
function f_btS() {
  var lv_btT = GetEnumUnit();
  if (GetWidgetLife(lv_btT) < 0.405) {
    GroupRemoveUnit(gv_alG, lv_btT);
  } else {
    IssuePointOrderById(
      lv_btT,
      851986,
      GetRandomReal(6848, 8000),
      GetRandomReal(12160, 12544)
    );
    SetUnitLifePercentBJ(lv_btT, 100);
  }
  lv_btT = null;
}
function f_btU() {
  var lv_btV = 0;
  do {
    if (lv_btV > 7) {
      break;
    }
    gv_alx[280 + lv_btV] = 0;
    lv_btV = lv_btV + 1;
  } while (true);
  f_aBR("Abilities\\Spells\\Human\\CallToArms\\HumanCallToArmsWhat1.wav");
  DisplayTimedTextToForce(
    gv_alH,
    20,
    S2S("   " + gv_alw[75]) + "Serius|r - " + gv_alw[90 + GetRandomInt(0, 4)]
  );
  ForGroup(gv_alG, f_btS);
}
function f_btW() {
  var lv_btX = R2I(gv_alx.getInt(194) / 15) + 900;
  var lv_btY = 7392;
  var lv_btZ = 14432;
  f_aOe(4, gv_ama.getInt(lv_btX), Player(11), lv_btY, lv_btZ, bj_UNIT_FACING);
  f_aOe(
    3,
    gv_ama.getInt(lv_btX + 1),
    Player(11),
    lv_btY,
    lv_btZ,
    bj_UNIT_FACING
  );
  f_aOe(
    2,
    gv_ama.getInt(lv_btX + 2),
    Player(11),
    lv_btY,
    lv_btZ,
    bj_UNIT_FACING
  );
  TriggerSleepAction(8);
}
function f_bua() {
  var lv_bub = 0;
  var lv_buc = 0;
  var lv_bud = 0;
  var lv_bue = 0;
  var lv_buf = 0.0;
  gv_alx[194] = 0;
  do {
    if (lv_bud > 7) {
      break;
    }
    if (
      GetPlayerController(Player(lv_bud)) == MAP_CONTROL_USER &&
      GetPlayerSlotState(Player(lv_bud)) == PLAYER_SLOT_STATE_PLAYING
    ) {
      if (GetHeroLevel(gv_alv[lv_bud]) > lv_bue) {
        lv_bue = GetHeroLevel(gv_alv[lv_bud]);
      }
      lv_bub = lv_bub + GetHeroLevel(gv_alv[lv_bud]);
      lv_buc = lv_buc + 1;
    }
    lv_bud = lv_bud + 1;
  } while (true);
  gv_alx[194] = R2I(lv_bub / lv_buc);
  gv_alx[195] = lv_buc;
  if (lv_bue < 1) {
    lv_bue = 10;
  }
  DestroyTimerDialog(gv_alA[8]);
  QuestMessageBJ(
    gv_alH,
    1,
    S2S(
      "Hades has unleashed a horde of demons to attack Athens. |cffff0000Threat Level: " +
        I2S(gv_alx.getInt(194))
    ) + "|r"
  );
  PingMinimapForForce(gv_alH, 7392, 14432, 15);
  f_btW();
  f_btW();
  f_btW();
  gv_alZ = CreateUnit(Player(11), "E003", 7392, 14432, bj_UNIT_FACING);
  SetHeroLevel(gv_alZ, lv_bue, false);
  lv_bud = 4;
  do {
    if (lv_bud > 7) {
      break;
    }
    if (
      GetPlayerController(Player(lv_bud)) == MAP_CONTROL_USER &&
      GetPlayerSlotState(Player(lv_bud)) == PLAYER_SLOT_STATE_PLAYING
    ) {
      gv_alx[194] = GetHeroLevel(gv_alv[lv_bud]);
      f_btW();
    }
    lv_bud = lv_bud + 1;
  } while (true);
  DestroyTimerDialog(gv_alA[8]);
  lv_buf = I2R(GetRandomInt(599 + R2I(lv_bub / lv_buc) * 3, 1200));
  TimerStart(gv_alT, lv_buf, false, null);
  TimerStart(gv_alU, lv_buf - 60, false, null);
  gv_alA[8] = CreateTimerDialog(gv_alT);
  TimerDialogSetTitle(gv_alA[8], "Next Attack");
  TimerDialogDisplay(gv_alA[8], true);
}
function f_bug() {
  var lv_buh = GetTriggerUnit();
  if (GetOwningPlayer(lv_buh) == Player(11)) {
    IssuePointOrderById(lv_buh, gv_aas, GetUnitX(gv_akj), GetUnitY(gv_akj));
  }
  lv_buh = null;
}
function f_bui() {
  var lv_buj = GetEnumUnit();
  IssuePointOrderById(lv_buj, gv_aas, GetUnitX(gv_akj), GetUnitY(gv_akj));
  lv_buj = null;
}
function f_buk() {
  ForGroupBJ(f_aBX(Rect(5824, 8352, 9088, 14656), Player(11)), f_bui);
}
function f_bul() {
  var lv_bum = 0;
  do {
    if (lv_bum > 7) {
      break;
    }
    DestroyTimerDialog(gv_alA[lv_bum]);
    lv_bum = lv_bum + 1;
  } while (true);
  ClearTextMessagesBJ(f_aCc(GetTriggerPlayer()));
  DisplayTextToForce(
    gv_alH,
    "Athens has been destroyed!  All is lost in the West!  Evil has triumphed!"
  );
  DisplayTextToForce(gv_alH, "    ");
  DisplayTextToForce(
    gv_alH,
    "    Save your character!  The game will end in two minutes."
  );
  TriggerSleepAction(120);
  lv_bum = 0;
  do {
    if (lv_bum > 7) {
      break;
    }
    CustomDefeatBJ(Player(-1 + bj_forLoopAIndex), "Defeat!");
    lv_bum = lv_bum + 1;
  } while (true);
}
function f_bun() {
  var lv_buo = GetTriggerUnit();
  var lv_bup = GetOwningPlayer(lv_buo);
  var lv_buq = GetUnitTypeId(lv_buo);
  var lv_bur = 0;
  if (lv_bup == Player(8)) {
    if (lv_buq == "hcth") {
      gv_alx[8100] = gv_alx.getInt(8100) - 1;
    }
    if (lv_buq == "nhea") {
      gv_alx[8101] = gv_alx.getInt(8101) - 1;
    }
    if (lv_buq == "hmil") {
      gv_alx[8102] = gv_alx.getInt(8102) - 1;
    }
    if (lv_buq == "hgry") {
      gv_alx[8103] = gv_alx.getInt(8103) - 1;
    }
    if (lv_buq == "uabo" || lv_buq == "edot") {
      do {
        if (lv_bur > 7) {
          break;
        }
        if (
          RectContainsCoords(
            gv_aen,
            GetUnitX(gv_alv[lv_bur]),
            GetUnitY(gv_alv[lv_bur])
          )
        ) {
          SetUnitPosition(gv_alv[lv_bur], -10176, -6928);
          PanCameraToTimedForPlayer(Player(lv_bur), -10176, -6928, 0);
          KillUnit(gv_alv[lv_bur]);
        }
        lv_bur = lv_bur + 1;
      } while (true);
      gv_alx[56 + 7100] = 0;
      gv_alx[56 + 7200] = 0;
      DestroyTimerDialog(gv_alA[9]);
      DestroyTimer(gv_alV);
      DisableTrigger(gv_agV);
      f_aKF(56);
    }
  }
  if (lv_bup == Player(9)) {
    if (IsUnitType(lv_buo, UNIT_TYPE_HERO)) {
      if (
        (lv_buq == "Ewar" && gv_alx.getInt(57 + 7000) != 2) ||
        lv_buq == "Harf"
      ) {
        PolledWait(300);
      }
      ReviveHero(lv_buo, 13632, 14240, true);
      IssuePointOrderById(lv_buo, 851986, 8052.5, 9442.8);
    }
    if (lv_buq == "Ewar" && gv_alx.getInt(57 + 7000) == 2) {
      UnitRemoveAbility(lv_buo, "A08Q");
      lv_bur = gv_alx.getInt(168) - 8;
      SetPlayerAllianceStateBJ(Player(lv_bur), Player(9), 2);
      SetPlayerAllianceStateBJ(Player(9), Player(lv_bur), 2);
      SetUnitPosition(gv_alv[lv_bur], 11041, 6050);
      SetUnitPosition(gv_alv[lv_bur + 8], 10900, 6200);
      PanCameraToTimedForPlayer(Player(lv_bur), 11041, 6050, 0);
      UnitAddItemByIdSwapped("I060", gv_alv[lv_bur + 8]);
      f_aKF(57);
      gv_alx[168] = 0;
      gv_alx[188] = 0;
    }
  }
  lv_buo = null;
  lv_bup = null;
}
function f_bus() {
  var lv_but;
  var lv_buu;
  var lv_buv = null;
  var lv_buw = 0;
  var lv_bux = null;
  if (gv_alx.getInt(8100) < 5) {
    lv_buw = "hcth";
    gv_alx[8100] = gv_alx.getInt(8100) + 1;
  } else {
    if (gv_alx.getInt(8101) < 3) {
      lv_buw = "nhea";
      gv_alx[8101] = gv_alx.getInt(8101) + 1;
    } else {
      if (gv_alx.getInt(8102) < 9) {
        lv_buw = "hmil";
        gv_alx[8102] = gv_alx.getInt(8102) + 1;
      } else {
        if (gv_alx.getInt(8103) < 8) {
          lv_buw = "hgry";
          gv_alx[8103] = gv_alx.getInt(8103) + 1;
        }
      }
    }
  }
  lv_bux = f_aBX(gv_aeg, Player(8));
  lv_buv = GroupPickRandomUnit(lv_bux);
  lv_but = f_aOa(gv_acT, "x");
  lv_buu = f_aOa(gv_acT, "y");
  IssuePointOrderById(lv_buv, 851986, lv_but, lv_buu);
  if (lv_buw != 0) {
    lv_buv = CreateUnit(Player(8), lv_buw, 10200, 8500, 0.0);
    GroupAddUnit(gv_alG, lv_buv);
    lv_but = f_aOa(gv_acT, "x");
    lv_buu = f_aOa(gv_acT, "y");
    IssuePointOrderById(lv_buv, 851986, lv_but, lv_buu);
  }
  lv_bux = f_aBX(gv_acT, Player(8));
  lv_buv = GroupPickRandomUnit(lv_bux);
  if (GetRandomInt(1, 10) == 1) {
    lv_but = f_aOa(gv_adv, "x");
    lv_buu = f_aOa(gv_adv, "y");
    IssuePointOrderById(lv_buv, 851986, lv_but, lv_buu);
  }
  if (GetRandomInt(1, 10) == 1) {
    lv_bux = f_aBX(gv_adv, Player(8));
    lv_buv = GroupPickRandomUnit(lv_bux);
    lv_but = f_aOa(gv_acT, "x");
    lv_buu = f_aOa(gv_acT, "y");
    IssuePointOrderById(lv_buv, 851986, lv_but, lv_buu);
  }
  lv_buv = null;
  DestroyGroup(lv_bux);
}
function f_buy() {
  var lv_buz = GetRandomInt(0, 4);
  DestroyEffect(gv_aly[108 + lv_buz]);
  gv_alC[108 + lv_buz] = GetRandomLocInRect(Rect(6752, 12768, 7968, 13920));
  gv_aly[108 + lv_buz] = AddSpecialEffectLoc(
    "Abilities\\Spells\\Orc\\CommandAura\\CommandAura.mdl",
    gv_alC[108 + lv_buz]
  );
}
function f_buA() {
  var lv_buB = 0;
  var lv_buC = 0;
  var lv_buD;
  var lv_buE;
  do {
    if (lv_buB > 4) {
      break;
    }
    lv_buC = 0;
    do {
      if (lv_buC > 7) {
        break;
      }
      if (GetPlayerSlotState(Player(lv_buC)) == PLAYER_SLOT_STATE_PLAYING) {
        lv_buD = GetUnitX(gv_alv[lv_buC]);
        lv_buE = GetUnitY(gv_alv[lv_buC]);
        if (
          f_aMC(
            GetLocationX(gv_alC[108 + lv_buB]),
            GetLocationY(gv_alC[108 + lv_buB]),
            lv_buD,
            lv_buE
          ) < 150
        ) {
          UnitDamageTarget(
            gv_alv[lv_buC],
            gv_alv[lv_buC],
            GetUnitStateSwap(UNIT_STATE_MAX_LIFE, gv_alv[lv_buC]) * 0.1,
            true,
            false,
            ATTACK_TYPE_NORMAL,
            DAMAGE_TYPE_MAGIC,
            WEAPON_TYPE_WHOKNOWS
          );
          DestroyEffect(
            AddSpecialEffectTarget(
              "Abilities\\Spells\\Undead\\Impale\\ImpaleHitTarget.mdl",
              gv_alv[lv_buC],
              "overhead"
            )
          );
        }
      }
      lv_buC = lv_buC + 1;
    } while (true);
    lv_buB = lv_buB + 1;
  } while (true);
}
function f_buF() {
  var lv_buG = GetRectCenterX(gv_afH);
  var lv_buH = GetRectCenterY(gv_afH);
  var lv_buI;
  var lv_buJ;
  var lv_buK = GetRandomReal(6688, 8128);
  var lv_buL = 12500;
  var lv_buM;
  var lv_buN;
  var lv_buO;
  var lv_buP;
  do {
    if (lv_buH < lv_buL) {
      break;
    }
    lv_buM = 1;
    do {
      if (lv_buM > 3) {
        break;
      }
      if (lv_buM == 3) {
        lv_buN = bj_RADTODEG * Atan2(lv_buL - lv_buH, lv_buK - lv_buG);
        lv_buO = 100;
      } else {
        lv_buN = 20 * lv_buM * lv_buM + GetRandomInt(113, 117) * lv_buM;
        lv_buO = GetRandomReal(75, 125);
      }
      lv_buI = lv_buG + lv_buO * Cos(lv_buN * bj_DEGTORAD);
      lv_buJ = lv_buH + lv_buO * Sin(lv_buN * bj_DEGTORAD);
      gv_aly[100 + lv_buM] = AddSpecialEffect(
        "Abilities\\Spells\\Human\\FlameStrike\\FlameStrikeEmbers.mdl",
        lv_buI,
        lv_buJ
      );
      lv_buP = 0;
      do {
        if (lv_buP > 7) {
          break;
        }
        if (
          f_aMC(
            lv_buI,
            lv_buJ,
            GetUnitX(gv_alv[lv_buP]),
            GetUnitY(gv_alv[lv_buP])
          ) < 200
        ) {
          UnitDamageTarget(
            gv_alv[lv_buP],
            gv_alv[lv_buP],
            ((lv_buI - lv_buK) / 100) *
              (GetUnitStateSwap(UNIT_STATE_MAX_LIFE, gv_alv[lv_buP]) * 0.1),
            true,
            false,
            ATTACK_TYPE_NORMAL,
            DAMAGE_TYPE_MAGIC,
            WEAPON_TYPE_WHOKNOWS
          );
        }
        lv_buP = lv_buP + 1;
      } while (true);
      if (lv_buM == 3) {
        lv_buG = lv_buI;
      }
      lv_buM = lv_buM + 1;
    } while (true);
    TriggerSleepAction(0.05);
    DestroyEffect(gv_aly[101]);
    DestroyEffect(gv_aly[102]);
    DestroyEffect(gv_aly[103]);
    lv_buH = lv_buH - 75;
  } while (true);
}
function f_buQ() {
  var lv_buR = GetTriggerUnit();
  if (IsUnitType(lv_buR, UNIT_TYPE_HERO)) {
    EnableTrigger(gv_aju);
    ExecuteFunc("f_buS");
  }
  lv_buR = null;
}
function f_buS() {
  var lv_buT = GetRandomInt(0, 3);
  var lv_buU = GetRandomReal(7040, 7936);
  var lv_buV = GetRandomReal(13920, 14208);
  var lv_buW = 0;
  var lv_buX = 0;
  DestroyEffect(gv_aly[104 + lv_buT]);
  gv_aly[104 + lv_buT] = AddSpecialEffect(
    "Abilities\\Spells\\Human\\FlameStrike\\FlameStrike1.mdl",
    lv_buU,
    lv_buV
  );
  lv_buW = 0;
  do {
    if (lv_buW > 7) {
      break;
    }
    if (GetPlayerSlotState(Player(lv_buW)) == PLAYER_SLOT_STATE_PLAYING) {
      if (
        f_aMC(
          GetUnitX(gv_alv[lv_buW]),
          GetUnitY(gv_alv[lv_buW]),
          lv_buU,
          lv_buV
        ) < 250
      ) {
        UnitDamageTarget(
          gv_alv[lv_buW],
          gv_alv[lv_buW],
          250,
          true,
          false,
          ATTACK_TYPE_NORMAL,
          DAMAGE_TYPE_MAGIC,
          WEAPON_TYPE_WHOKNOWS
        );
      }
      if (RectContainsUnit(gv_aeb, gv_alv[lv_buW])) {
        lv_buX = 1;
      }
    }
    lv_buW = lv_buW + 1;
  } while (true);
  if (lv_buX == 0) {
    DisableTrigger(gv_aju);
  }
}
function f_buY() {
  var lv_buZ = GetTriggerUnit();
  var lv_bva = GetUnitX(lv_buZ);
  var lv_bvb = GetUnitY(lv_buZ);
  if (IsUnitType(lv_buZ, UNIT_TYPE_HERO)) {
    if (gv_alx.getInt(198) == 0) {
      gv_alx[198] = 1;
      lv_buZ = CreateUnit(
        gv_amY,
        gv_ama.getInt(920 + GetRandomInt(0, 3)),
        lv_bva,
        lv_bvb + 100,
        270
      );
      IssuePointOrderById(lv_buZ, gv_aas, GetUnitX(gv_akj), GetUnitY(gv_akj));
      TriggerSleepAction(2);
      gv_alx[198] = 0;
    }
  }
  lv_buZ = null;
}
function f_bvc() {
  var lv_bvd = GetExpiredTimer();
  SetUnitOwner(gv_ala, Player(9), true);
  f_aJk(lv_bvd);
  lv_bvd = null;
}
function f_bve() {
  var lv_bvf = GetExpiredTimer();
  var lv_bvg = gv_ala;
  var lv_bvh = CreateTextTag();
  var lv_bvi = GetUnitX(lv_bvg);
  var lv_bvj = GetUnitY(lv_bvg);
  SetTextTagText(
    lv_bvh,
    S2S(
      I2S(
        R2I(
          GetUnitState(lv_bvg, UNIT_STATE_MAX_LIFE) -
            GetUnitState(lv_bvg, UNIT_STATE_LIFE)
        )
      ) + " Total Damage"
    ),
    0.023
  );
  SetTextTagPos(lv_bvh, lv_bvi + 5, lv_bvj, 50);
  SetTextTagVelocity(lv_bvh, 0.0, 0.036);
  SetTextTagPermanent(lv_bvh, false);
  SetTextTagLifespan(lv_bvh, 5);
  SetTextTagVisibility(lv_bvh, true);
  SetWidgetLife(lv_bvg, GetUnitState(lv_bvg, UNIT_STATE_MAX_LIFE));
  SetUnitOwner(lv_bvg, Player(14), true);
  f_aJk(lv_bvf);
  gv_alx[178] = 0;
  lv_bvg = null;
  lv_bvh = null;
  lv_bvf = null;
}
function f_bvk() {
  if (gv_alx.getInt(178) == 0) {
    gv_alx[178] = 1;
    TimerStart(f_aJj(), 1, false, f_bvc);
    TimerStart(f_aJj(), 2, false, f_bve);
  }
}
function f_bvl() {
  var lv_bvm = GetExpiredTimer();
  SetUnitOwner(gv_aki, Player(9), true);
  f_aJk(lv_bvm);
  lv_bvm = null;
}
function f_bvn() {
  var lv_bvo = gv_aki;
  var lv_bvp = CreateTextTag();
  var lv_bvq = GetUnitX(lv_bvo);
  var lv_bvr = GetUnitY(lv_bvo);
  SetTextTagText(
    lv_bvp,
    S2S(
      I2S(
        R2I(
          GetUnitState(lv_bvo, UNIT_STATE_MAX_LIFE) -
            GetUnitState(lv_bvo, UNIT_STATE_LIFE)
        )
      ) + " Damage"
    ),
    0.023
  );
  SetTextTagPos(lv_bvp, lv_bvq + 5, lv_bvr, 50);
  SetTextTagVelocity(lv_bvp, 0.0, 0.036);
  SetTextTagPermanent(lv_bvp, false);
  SetTextTagLifespan(lv_bvp, 5);
  SetTextTagVisibility(lv_bvp, true);
  SetWidgetLife(lv_bvo, GetUnitState(lv_bvo, UNIT_STATE_MAX_LIFE));
  SetUnitOwner(lv_bvo, Player(14), true);
  gv_alx[179] = 0;
  lv_bvo = null;
  lv_bvp = null;
}
function f_bvs() {
  if (gv_alx.getInt(179) == 0) {
    gv_alx[179] = 1;
    TimerStart(f_aJj(), 1, false, f_bvl);
    TimerStart(f_aJj(), 2, false, f_bvn);
  }
}
function f_bvt() {
  gv_alR = CreateMultiboard();
  MultiboardSetColumnCount(gv_alR, 2);
  MultiboardSetTitleText(gv_alR, "Battle Arena Duel");
}
function f_bvu() {
  var lv_bvv = 10;
  var lv_bvw = 0;
  var lv_bvx = null;
  DestroyTimerDialog(gv_alA[9]);
  if (gv_alx.getInt(188) == 1 || gv_alx.getInt(188) == 2) {
    QuestMessageBJ(
      gv_alH,
      1,
      S2S("|cffff0000No duel.  Team " + I2S(gv_alx.getInt(188))) +
        " did not enter the battle arena.|r"
    );
    gv_alx[188] = 0;
    gv_alx[189] = 10;
    gv_alx[190] = 10;
    lv_bvx = GetRectCenter(gv_acY);
    PingMinimapLocForForce(gv_alH, lv_bvx, 5);
    lv_bvw = 0;
    do {
      if (lv_bvw > 7) {
        break;
      }
      if (gv_alx.getInt(180 + lv_bvw) > 0) {
        gv_alx[180 + lv_bvw] = 0;
        lv_bvx = GetRandomLocInRect(gv_acZ);
        SetUnitColor(gv_alv[lv_bvw], ConvertPlayerColor(lv_bvw));
        SetUnitPositionLoc(gv_alv[lv_bvw], lv_bvx);
        PanCameraToTimedLocForPlayer(Player(lv_bvw), lv_bvx, 0);
      }
      lv_bvw = lv_bvw + 1;
    } while (true);
    MultiboardDisplay(gv_alR, false);
    MultiboardDisplay(gv_alP, false);
    MultiboardDisplay(gv_alQ, true);
    MultiboardMinimize(gv_alQ, true);
    lv_bvx = null;
    RemoveLocation(lv_bvx);
    return;
  }
  gv_alx[188] = 4;
  QuestMessageBJ(
    gv_alH,
    1,
    S2S(
      "|cffff0000  FIGHT NOW!!|r -- TEAM 1 with " +
        GetPlayerName(Player(gv_alx.getInt(189)))
    ) +
      " vs TEAM 2 with " +
      GetPlayerName(Player(gv_alx.getInt(190))) +
      "."
  );
  lv_bvw = 0;
  do {
    if (lv_bvw > 7) {
      break;
    }
    lv_bvv = 0;
    do {
      if (lv_bvv > 7) {
        break;
      }
      if (lv_bvw != lv_bvv) {
        if (gv_alx.getInt(180 + lv_bvw) == gv_alx.getInt(180 + lv_bvv)) {
          SetPlayerAllianceStateBJ(Player(lv_bvw), Player(lv_bvv), 2);
        }
        if (
          gv_alx.getInt(180 + lv_bvw) > 0 &&
          gv_alx.getInt(180 + lv_bvv) == 0
        ) {
          SetPlayerAllianceStateBJ(Player(lv_bvw), Player(lv_bvv), 6);
        }
        if (
          gv_alx.getInt(180 + lv_bvw) == 0 &&
          gv_alx.getInt(180 + lv_bvv) > 0
        ) {
          SetPlayerAllianceStateBJ(Player(lv_bvw), Player(lv_bvv), 6);
        }
        if (
          gv_alx.getInt(180 + lv_bvw) == 1 &&
          gv_alx.getInt(180 + lv_bvv) == 2
        ) {
          SetPlayerAllianceStateBJ(Player(lv_bvw), Player(lv_bvv), 0);
        }
        if (
          gv_alx.getInt(180 + lv_bvw) == 2 &&
          gv_alx.getInt(180 + lv_bvv) == 1
        ) {
          SetPlayerAllianceStateBJ(Player(lv_bvw), Player(lv_bvv), 0);
        }
      }
      lv_bvv = lv_bvv + 1;
    } while (true);
    if (gv_alx.getInt(180 + lv_bvw) > 0) {
      SuspendHeroXP(gv_alv[lv_bvw], !false);
    }
    lv_bvw = lv_bvw + 1;
  } while (true);
  lv_bvx = null;
  RemoveLocation(lv_bvx);
}
function f_bvy() {
  var lv_bvz = GetTriggerUnit();
  var lv_bvA = GetTriggerPlayer();
  var lv_bvB = GetPlayerId(lv_bvA);
  var lv_bvC = null;
  var lv_bvD = 0;
  if (
    GetItemTypeId(GetManipulatedItem()) != "I05N" &&
    GetItemTypeId(GetManipulatedItem()) != "I05O"
  ) {
    RemoveLocation(lv_bvC);
    return;
  }
  if (gv_alx.getInt(188) == 4) {
    DisplayTextToForce(
      f_aCc(lv_bvA),
      "|cffff0000The battle arena is busy at the moment.|r"
    );
    RemoveLocation(lv_bvC);
    return;
  }
  if (gv_alx.getInt(188) == 0) {
    lv_bvD = 0;
    do {
      if (lv_bvD > 7) {
        break;
      }
      gv_alx[180 + lv_bvD] = 0;
      lv_bvD = lv_bvD + 1;
    } while (true);
    gv_alx[189] = 10;
    gv_alx[190] = 10;
    lv_bvD = 0;
  }
  if (GetItemTypeId(GetManipulatedItem()) == "I05N") {
    lv_bvD = 1;
    lv_bvC = GetRandomLocInRect(gv_afo);
    if (gv_alx.getInt(188) == 2) {
      gv_alx[188] = 3;
    }
  }
  if (GetItemTypeId(GetManipulatedItem()) == "I05O") {
    lv_bvD = 2;
    lv_bvC = GetRandomLocInRect(gv_afp);
    if (gv_alx.getInt(188) == 1) {
      gv_alx[188] = 3;
    }
  }
  if (gv_alx.getInt(188 + lv_bvD) == 10) {
    gv_alx[188 + lv_bvD] = lv_bvB;
    QuestMessageBJ(
      gv_alH,
      1,
      S2S(GetPlayerName(lv_bvA) + " is leading TEAM ") +
        I2S(lv_bvD) +
        " in the duel!"
    );
  } else {
    QuestMessageBJ(
      gv_alH,
      1,
      S2S(GetPlayerName(lv_bvA) + " has joined TEAM ") +
        I2S(lv_bvD) +
        " in the duel!"
    );
  }
  gv_alx[180 + lv_bvB] = lv_bvD;
  SetUnitColor(lv_bvz, ConvertPlayerColor(gv_alx.getInt(188 + lv_bvD)));
  SetUnitPositionLoc(lv_bvz, lv_bvC);
  PanCameraToTimedLocForPlayer(lv_bvA, lv_bvC, 0);
  if (gv_alx.getInt(188) == 0) {
    gv_alx[188] = lv_bvD;
    TimerStart(gv_alz[9], 30, false, f_bvu);
    gv_alA[9] = CreateTimerDialogBJ(gv_alz[9], "Battle begins in");
    SaveInteger(gv_abY, 0, GetHandleId(gv_alz[9]), 9);
    TimerDialogDisplay(gv_alA[9], true);
    MultiboardSetRowCount(gv_alR, 11);
    MultiboardDisplay(gv_alQ, false);
    MultiboardDisplay(gv_alP, false);
    MultiboardDisplay(gv_alR, true);
    MultiboardMinimize(gv_alR, false);
    EnableTrigger(gv_ajA);
    ExecuteFunc("f_bvE");
  }
  lv_bvz = null;
  lv_bvA = null;
  lv_bvC = null;
  RemoveLocation(lv_bvC);
}
function f_bvF(lv_bvG, lv_bvH) {
  var lv_bvI = 0;
  var lv_bvJ = "";
  MultiboardSetItemValueBJ(gv_alR, 1, lv_bvH, GetPlayerName(Player(lv_bvG)));
  MultiboardSetItemStyleBJ(gv_alR, 1, lv_bvH, true, false);
  MultiboardSetItemWidthBJ(gv_alR, 1, lv_bvH, 10);
  MultiboardSetItemColorBJ(gv_alR, 1, lv_bvH, 100, 100, 100, 0);
  do {
    if (lv_bvI > R2I(GetUnitLifePercent(gv_alv[lv_bvG]) / 5)) {
      break;
    }
    lv_bvJ = S2S(lv_bvJ + "Â§");
    lv_bvI = lv_bvI + 1;
  } while (true);
  MultiboardSetItemColorBJ(
    gv_alR,
    2,
    lv_bvH,
    100 - GetUnitLifePercent(gv_alv[lv_bvG]),
    GetUnitLifePercent(gv_alv[lv_bvG]),
    0.0,
    0
  );
  if (gv_alx.getInt(180 + lv_bvG) > 2) {
    lv_bvJ = " -=- eliminated -=- ";
    MultiboardSetItemColorBJ(gv_alR, 2, lv_bvH, 100, 0.0, 0.0, 0);
  }
  if (gv_alx.getInt(180 + lv_bvG) == 0) {
    lv_bvJ = " ";
  }
  MultiboardSetItemValueBJ(gv_alR, 2, lv_bvH, lv_bvJ);
  MultiboardSetItemStyleBJ(gv_alR, 2, lv_bvH, true, false);
  MultiboardSetItemWidthBJ(gv_alR, 2, lv_bvH, 10);
}
function f_bvE() {
  var lv_bvK = 0;
  var lv_bvL = 0;
  var lv_bvM = 0;
  var lv_bvN = 0;
  var lv_bvO = 0;
  var lv_bvP;
  var lv_bvQ;
  var lv_bvR;
  if (gv_alx.getInt(188) == 0) {
    DisableTrigger(gv_ajA);
    return;
  }
  lv_bvK = 0;
  lv_bvL = 3;
  do {
    if (lv_bvK > 7) {
      break;
    }
    if (gv_alx.getInt(180 + lv_bvK) > 0) {
      lv_bvL = lv_bvL + 1;
    }
    lv_bvK = lv_bvK + 1;
  } while (true);
  MultiboardSetRowCount(gv_alR, lv_bvL);
  lv_bvL = 1;
  MultiboardSetItemValueBJ(gv_alR, 1, lv_bvL, "    ..-= TEAM ONE =-..");
  MultiboardSetItemWidthBJ(gv_alR, 1, lv_bvL, 10);
  MultiboardSetItemStyleBJ(gv_alR, 1, lv_bvL, true, false);
  MultiboardSetItemColorBJ(gv_alR, 1, lv_bvL, 28, 63, 93, 0);
  MultiboardSetItemValueBJ(gv_alR, 2, lv_bvL, "Life");
  MultiboardSetItemWidthBJ(gv_alR, 2, lv_bvL, 10);
  MultiboardSetItemStyleBJ(gv_alR, 2, lv_bvL, true, false);
  MultiboardSetItemColorBJ(gv_alR, 2, lv_bvL, 28, 63, 93, 0);
  lv_bvK = 0;
  do {
    if (lv_bvK > 7) {
      break;
    }
    if (gv_alx.getInt(180 + lv_bvK) == 1) {
      lv_bvL = lv_bvL + 1;
      f_bvF(lv_bvK, lv_bvL);
      lv_bvM = lv_bvM + 1;
    }
    if (gv_alx.getInt(180 + lv_bvK) == 3) {
      lv_bvL = lv_bvL + 1;
      f_bvF(lv_bvK, lv_bvL);
    }
    lv_bvK = lv_bvK + 1;
  } while (true);
  lv_bvL = lv_bvL + 1;
  MultiboardSetItemValueBJ(gv_alR, 1, lv_bvL, " ");
  MultiboardSetItemWidthBJ(gv_alR, 1, lv_bvL, 10);
  MultiboardSetItemStyleBJ(gv_alR, 1, lv_bvL, true, false);
  MultiboardSetItemColorBJ(gv_alR, 1, lv_bvL, 28, 63, 93, 0);
  MultiboardSetItemValueBJ(gv_alR, 2, lv_bvL, " ");
  MultiboardSetItemWidthBJ(gv_alR, 2, lv_bvL, 10);
  MultiboardSetItemStyleBJ(gv_alR, 2, lv_bvL, true, false);
  MultiboardSetItemColorBJ(gv_alR, 2, lv_bvL, 28, 63, 93, 0);
  lv_bvL = lv_bvL + 1;
  MultiboardSetItemValueBJ(gv_alR, 1, lv_bvL, "    ..-= TEAM TWO =-..");
  MultiboardSetItemWidthBJ(gv_alR, 1, lv_bvL, 10);
  MultiboardSetItemStyleBJ(gv_alR, 1, lv_bvL, true, false);
  MultiboardSetItemColorBJ(gv_alR, 1, lv_bvL, 28, 63, 93, 0);
  MultiboardSetItemValueBJ(gv_alR, 2, lv_bvL, "Life");
  MultiboardSetItemWidthBJ(gv_alR, 2, lv_bvL, 10);
  MultiboardSetItemStyleBJ(gv_alR, 2, lv_bvL, true, false);
  MultiboardSetItemColorBJ(gv_alR, 2, lv_bvL, 28, 63, 93, 0);
  lv_bvK = 0;
  do {
    if (lv_bvK > 7) {
      break;
    }
    if (gv_alx.getInt(180 + lv_bvK) == 2) {
      lv_bvL = lv_bvL + 1;
      f_bvF(lv_bvK, lv_bvL);
      lv_bvN = lv_bvN + 1;
    }
    if (gv_alx.getInt(180 + lv_bvK) == 4) {
      lv_bvL = lv_bvL + 1;
      f_bvF(lv_bvK, lv_bvL);
    }
    lv_bvK = lv_bvK + 1;
  } while (true);
  if (gv_alx.getInt(188) == 4) {
    if (lv_bvM == 0 && lv_bvN == 0) {
      QuestMessageBJ(
        gv_alH,
        1,
        S2S(
          "|cffff0000ARENA TIE:|r TEAM 1 with " +
            GetPlayerName(Player(gv_alx.getInt(189)))
        ) +
          " ties with TEAM 2 with " +
          GetPlayerName(Player(gv_alx.getInt(190))) +
          "."
      );
      lv_bvO = 3;
    } else {
      if (lv_bvM == 0) {
        QuestMessageBJ(
          gv_alH,
          1,
          S2S(
            "|cffff0000ARENA WINNER:|r TEAM 2 with " +
              GetPlayerName(Player(gv_alx.getInt(190)))
          ) +
            " defeats TEAM 1 with " +
            GetPlayerName(Player(gv_alx.getInt(189))) +
            "."
        );
        lv_bvO = 2;
      }
      if (lv_bvN == 0) {
        QuestMessageBJ(
          gv_alH,
          1,
          S2S(
            "|cffff0000ARENA WINNER:|r TEAM 1 with " +
              GetPlayerName(Player(gv_alx.getInt(189)))
          ) +
            " defeats TEAM 2 with " +
            GetPlayerName(Player(gv_alx.getInt(190))) +
            "."
        );
        lv_bvO = 1;
      }
    }
  }
  if (lv_bvO > 0) {
    gv_alx[188] = 5;
    lv_bvL = 0;
    do {
      if (lv_bvL > 7) {
        break;
      }
      SetPlayerAllianceStateBJ(Player(lv_bvL), Player(0), 3);
      SetPlayerAllianceStateBJ(Player(lv_bvL), Player(1), 3);
      SetPlayerAllianceStateBJ(Player(lv_bvL), Player(2), 3);
      SetPlayerAllianceStateBJ(Player(lv_bvL), Player(3), 3);
      SetPlayerAllianceStateBJ(Player(lv_bvL), Player(4), 3);
      SetPlayerAllianceStateBJ(Player(lv_bvL), Player(5), 3);
      SetPlayerAllianceStateBJ(Player(lv_bvL), Player(6), 3);
      SetPlayerAllianceStateBJ(Player(lv_bvL), Player(7), 3);
      SetUnitColor(gv_alv[lv_bvL], ConvertPlayerColor(lv_bvL));
      SuspendHeroXP(gv_alv[lv_bvL], !true);
      if (
        RectContainsCoords(
          gv_acY,
          GetUnitX(gv_alv[lv_bvL]),
          GetUnitY(gv_alv[lv_bvL])
        )
      ) {
        lv_bvQ = f_aOa(gv_acZ, "x");
        lv_bvR = f_aOa(gv_acZ, "y");
        SetUnitPosition(gv_alv[lv_bvL], lv_bvQ, lv_bvR);
        PanCameraToTimedForPlayer(Player(lv_bvL), lv_bvQ, lv_bvR, 0);
        SetUnitLifePercentBJ(gv_alv[lv_bvL], 100);
      }
      lv_bvL = lv_bvL + 1;
    } while (true);
    TriggerSleepAction(5);
    lv_bvL = 0;
    do {
      if (lv_bvL > 7) {
        break;
      }
      gv_alx[180 + lv_bvL] = 0;
      lv_bvL = lv_bvL + 1;
    } while (true);
    MultiboardDisplay(gv_alR, false);
    MultiboardDisplay(gv_alP, false);
    MultiboardDisplay(gv_alQ, true);
    MultiboardMinimize(gv_alQ, false);
    gv_alx[188] = 0;
    gv_alx[189] = 10;
    gv_alx[190] = 10;
  }
}
function f_bvS() {
  var lv_bvT = GetTriggerUnit();
  var lv_bvU = GetPlayerId(GetOwningPlayer(lv_bvT));
  if (gv_alx.getInt(180 + lv_bvU) > 0 && gv_alx.getInt(180 + lv_bvU) < 3) {
    gv_alx[180 + lv_bvU] = gv_alx.getInt(180 + lv_bvU) + 2;
  }
  lv_bvT = null;
}
function f_bvV() {
  var lv_bvW = 0;
  var lv_bvX = 10;
  do {
    if (lv_bvW > 7) {
      break;
    }
    if (
      GetPlayerController(Player(lv_bvW)) == MAP_CONTROL_USER &&
      GetPlayerSlotState(Player(lv_bvW)) == PLAYER_SLOT_STATE_PLAYING
    ) {
      lv_bvX = lv_bvW;
      lv_bvW = 10;
    }
    lv_bvW = lv_bvW + 1;
  } while (true);
  if (gv_alx.getInt(192) != lv_bvX) {
    gv_alx[192] = lv_bvX;
    DisplayTimedTextToForce(
      bj_FORCE_ALL_PLAYERS,
      15,
      S2S("   " + gv_alw[60 + lv_bvX]) +
        GetPlayerName(Player(lv_bvX)) +
        "|r now has access to the hosting commands."
    );
  }
}
function f_bvY() {
  var lv_bvZ = GetExpiredTimer();
  var lv_bwa = LoadInteger(gv_abY, 0, GetHandleId(lv_bvZ));
  SetUnitPosition(
    gv_alv[lv_bwa],
    GetUnitX(gv_alv[90 + lv_bwa]),
    GetUnitY(gv_alv[90 + lv_bwa])
  );
  RemoveUnit(gv_alv[90 + lv_bwa]);
  ShowUnit(gv_alv[lv_bwa], true);
  if (Player(lv_bwa) == GetLocalPlayer()) {
    ClearSelection();
    SelectUnit(gv_alv[lv_bwa], true);
  }
  DestroyEffect(
    AddSpecialEffectTarget(
      "Abilities\\Spells\\Human\\Polymorph\\PolyMorphDoneGround.mdl",
      gv_alv[lv_bwa],
      "origin"
    )
  );
  gv_alx[170 + lv_bwa] = 0;
  f_aJk(lv_bvZ);
  lv_bvZ = null;
}
function f_bwb() {
  var lv_bwc = GetTriggerPlayer();
  var lv_bwd = f_aOl(
    SubStringBJ(StringCase(GetEventPlayerChatString(), false), 6, 11)
  );
  var lv_bwe;
  if (
    GetWidgetLife(gv_alv[lv_bwd]) > 0.405 &&
    gv_alx.getInt(192) == GetPlayerId(lv_bwc) &&
    gv_alx.getInt(170 + lv_bwd) != 1 &&
    lv_bwd < 8
  ) {
    gv_alx[170 + lv_bwd] = 1;
    ShowUnit(gv_alv[lv_bwd], false);
    gv_alv[90 + lv_bwd] = CreateUnit(
      Player(lv_bwd),
      gv_ama.getInt(800 + GetRandomInt(0, 12)),
      GetUnitX(gv_alv[lv_bwd]),
      GetUnitY(gv_alv[lv_bwd]),
      GetRandomReal(0, 360)
    );
    UnitApplyTimedLife(gv_alv[90 + lv_bwd], "BOhx", 5);
    if (lv_bwc == GetLocalPlayer()) {
      ClearSelection();
      SelectUnit(gv_alv[90 + lv_bwd], true);
    }
    DestroyEffect(
      AddSpecialEffectTarget(
        "Abilities\\Spells\\Human\\Polymorph\\PolyMorphDoneGround.mdl",
        gv_alv[90 + lv_bwd],
        "origin"
      )
    );
    lv_bwe = f_aJj();
    TimerStart(lv_bwe, 5, false, f_bvY);
    SaveInteger(gv_abY, 0, GetHandleId(lv_bwe), lv_bwd);
  }
  lv_bwc = null;
  lv_bwe = null;
}
function f_bwf() {
  var lv_bwg = GetPlayerId(GetTriggerPlayer());
  var lv_bwh = f_aOl(
    SubStringBJ(StringCase(GetEventPlayerChatString(), false), 7, 12)
  );
  var lv_bwi = 0.0;
  if (gv_alx.getInt(192) != lv_bwg) {
    return;
  }
  if (lv_bwh < 8 && gv_alx.getInt(180 + lv_bwh) == 0) {
    lv_bwi = GetUnitStateSwap(UNIT_STATE_LIFE, gv_alv[lv_bwh]) / 1 - 1;
    DestroyEffect(
      AddSpecialEffectTarget(
        "Units\\Demon\\Infernal\\InfernalBirth.mdl",
        gv_alv[lv_bwh],
        "origin"
      )
    );
    UnitDamageTargetBJ(
      gv_alv[lv_bwh],
      gv_alv[lv_bwh],
      lv_bwi,
      ATTACK_TYPE_NORMAL,
      DAMAGE_TYPE_MAGIC
    );
    CameraSetEQNoiseForPlayer(Player(lv_bwh), 3);
    CameraClearNoiseForPlayer(Player(lv_bwh));
  }
}
function f_bwj() {
  var lv_bwk = GetPlayerId(GetTriggerPlayer());
  var lv_bwl = f_aOl(
    SubStringBJ(StringCase(GetEventPlayerChatString(), false), 7, 12)
  );
  if (gv_alx.getInt(192) != lv_bwk) {
    return;
  }
  if (lv_bwl < 8 && gv_alx.getInt(180 + lv_bwl) == 0) {
    gv_alx[390 + lv_bwl] = 1;
    if (GetWidgetLife(gv_alv[lv_bwl]) > 0.405) {
      KillUnit(gv_alv[lv_bwl]);
      CameraSetEQNoiseForPlayer(Player(lv_bwl), 5);
      CameraClearNoiseForPlayer(Player(lv_bwl));
    }
  }
}
function f_bwm() {
  var lv_bwn = GetPlayerId(GetTriggerPlayer());
  var lv_bwo = f_aOl(
    SubStringBJ(StringCase(GetEventPlayerChatString(), false), 7, 12)
  );
  if (gv_alx.getInt(192) != lv_bwn) {
    return;
  }
  if (lv_bwo < 8) {
    CustomDefeatBJ(
      Player(lv_bwo),
      S2S("You have been booted by " + GetPlayerName(Player(lv_bwn)))
    );
    ForGroupBJ(f_aCa(Player(lv_bwo)), f_aVk);
  }
}
function f_bwp() {
  if (GetLocalPlayer() == GetTriggerPlayer()) {
    MultiboardDisplay(gv_alP, false);
    MultiboardDisplay(gv_alR, false);
    MultiboardDisplay(gv_alQ, true);
    MultiboardMinimize(gv_alQ, false);
  }
}
function f_bwq() {
  if (GetLocalPlayer() == GetTriggerPlayer()) {
    MultiboardDisplay(gv_alQ, false);
    MultiboardDisplay(gv_alR, false);
    MultiboardDisplay(gv_alP, true);
    MultiboardMinimize(gv_alP, false);
  }
}
function f_bwr() {
  var lv_bws = GetPlayerId(GetTriggerPlayer());
  if (GetWidgetLife(gv_alv[lv_bws]) > 0.405) {
    SetUnitExploded(gv_alv[lv_bws], true);
    KillUnit(gv_alv[lv_bws]);
    CameraSetEQNoiseForPlayer(Player(lv_bws), 5);
    CameraClearNoiseForPlayer(Player(lv_bws));
  }
}
function f_bwt() {
  if (GetPlayerId(GetLocalPlayer()) == GetPlayerId(GetTriggerPlayer())) {
    ClearTextMessages();
  }
}
function f_bwu() {
  var lv_bwv = GetEnumItem();
  var lv_bww = GetItemPlayer(lv_bwv);
  var lv_bwx = GetPlayerId(lv_bww);
  if (lv_bwx < 8) {
    if (gv_alv[lv_bwx] == null) {
      RemoveItem(lv_bwv);
    }
  }
  lv_bww = null;
  lv_bwv = null;
}
function f_bwy() {
  var lv_bwz = GetTriggerPlayer();
  var lv_bwA = GetPlayerId(lv_bwz);
  var lv_bwB = 0;
  var lv_bwC = gv_alv[lv_bwA + 8];
  if (gv_alx.getInt(150 + lv_bwA) > 0) {
    lv_bwC = null;
    return;
  }
  do {
    if (lv_bwB > 5) {
      break;
    }
    gv_amR = UnitItemInSlot(gv_alv[lv_bwA], lv_bwB);
    if (gv_amR != null) {
      RemoveItem(gv_amR);
    }
    gv_amR = UnitItemInSlot(lv_bwC, lv_bwB);
    if (gv_amR != null) {
      RemoveItem(gv_amR);
    }
    lv_bwB = lv_bwB + 1;
  } while (true);
  RemoveUnit(gv_alv[lv_bwA]);
  RemoveUnit(gv_alv[lv_bwA + 8]);
  SetPlayerState(lv_bwz, PLAYER_STATE_RESOURCE_GOLD, 0);
  SetPlayerState(lv_bwz, PLAYER_STATE_RESOURCE_LUMBER, 0);
  gv_alv[lv_bwA] = null;
  gv_alL = Player(PLAYER_NEUTRAL_PASSIVE);
  SetPlayerAlliance(gv_alL, lv_bwz, ALLIANCE_SHARED_CONTROL, true);
  SetPlayerAlliance(gv_alL, lv_bwz, ALLIANCE_SHARED_VISION, true);
  if (lv_bwz == GetLocalPlayer()) {
    SetCameraBoundsToRect(gv_aei);
    PanCameraToTimed(-14200, -15000, 0.0);
  }
  SetPlayerAlliance(Player(9), lv_bwz, ALLIANCE_SHARED_VISION, false);
  EnumItemsInRect(bj_mapInitialPlayableArea, null, f_bwu);
  lv_bwz = null;
  lv_bwC = null;
}
function f_bwD() {
  var lv_bwE = GetPlayerId(GetTriggerPlayer());
  return gv_alv[lv_bwE] != null && gv_alx.getInt(6890 + lv_bwE) != 1;
}
function f_bwF() {
  var lv_bwG = 0;
  var lv_bwH = CreateTrigger();
  do {
    if (lv_bwG > 7) {
      break;
    }
    TriggerRegisterPlayerChatEvent(lv_bwH, Player(lv_bwG), "-repick", true);
    lv_bwG = lv_bwG + 1;
  } while (true);
  TriggerAddCondition(lv_bwH, Condition(f_bwD));
  TriggerAddAction(lv_bwH, f_bwy);
}
function f_bwI() {
  DestroyLeaderboard(gv_alS);
  gv_alx[199] = 0;
}
function f_bwJ() {
  var lv_bwK = GetTriggerPlayer();
  var lv_bwL = GetPlayerId(lv_bwK);
  var lv_bwM = GetEventPlayerChatString();
  var lv_bwN = 0;
  var lv_bwO;
  if (lv_bwM == "-roll" || lv_bwM == "-roll  ") {
    if (gv_alx.getInt(199) == 0) {
      gv_alx[199] = 1;
      gv_alS = CreateLeaderboardBJ(gv_alH, lv_bwM);
      do {
        if (lv_bwN > 7) {
          break;
        }
        gv_alx[270 + lv_bwN] = 0;
        lv_bwN = lv_bwN + 1;
      } while (true);
      LeaderboardSetStyle(gv_alS, true, true, true, false);
      LeaderboardDisplayBJ(true, gv_alS);
      lv_bwO = f_aJj();
      TimerStart(lv_bwO, 25, false, f_bwI);
    }
    if (gv_alx.getInt(199) > 0 && gv_alx.getInt(270 + lv_bwL) == 0) {
      gv_alx[270 + lv_bwL] = 1;
      if (lv_bwM == "-roll  ") {
        lv_bwN = 50;
      } else {
        lv_bwN = 0;
      }
      LeaderboardAddItemBJ(
        Player(lv_bwL),
        gv_alS,
        GetPlayerName(Player(lv_bwL)),
        GetRandomInt(lv_bwN, 100)
      );
      LeaderboardSortItemsBJ(gv_alS, 0, false);
    }
  }
  lv_bwK = null;
  lv_bwO = null;
}
function f_bwP() {
  SetCameraFieldForPlayer(
    GetTriggerPlayer(),
    CAMERA_FIELD_TARGET_DISTANCE,
    1600,
    1
  );
  gv_alw[GetPlayerId(GetTriggerPlayer()) + 30] = "I";
}
function f_bwQ() {
  SetCameraFieldForPlayer(
    GetTriggerPlayer(),
    CAMERA_FIELD_TARGET_DISTANCE,
    2850,
    1
  );
  gv_alw[GetPlayerId(GetTriggerPlayer()) + 30] = "O";
}
function f_bwR() {
  var lv_bwS = GetExpiredTimer();
  var lv_bwT = LoadInteger(gv_abY, 0, GetHandleId(lv_bwS));
  var lv_bwU = "** Your Hero has";
  lv_bwU =
    S2S(lv_bwU + "  |cff00ff00Speed:|r ") +
    I2S(R2I(GetUnitMoveSpeed(gv_alv[lv_bwT])));
  lv_bwU =
    S2S(lv_bwU + ", |cffffd700HP Regen:|r ") +
    I2S(R2I(GetUnitStateSwap(UNIT_STATE_LIFE, gv_alv[lv_bwT])));
  lv_bwU =
    S2S(lv_bwU + ", |cff47a1eeMana Regen:|r ") +
    I2S(R2I(GetUnitStateSwap(UNIT_STATE_MANA, gv_alv[lv_bwT])));
  lv_bwU =
    S2S(lv_bwU + "\n|cffffffffExtra Spell |cff00ff00Damage:|r ") +
    I2S(R2I(gv_alu[lv_bwT]));
  lv_bwU =
    S2S(lv_bwU + ", |cffffd700xHealing:|r ") + I2S(R2I(gv_alu[lv_bwT + 8]));
  lv_bwU =
    S2S(lv_bwU + ", Copies: ") +
    I2S(gv_aat.getInt(lv_bwT)) +
    "\n|cff00ff00Evasion|r: " +
    I2S(IMaxBJ(GetUnitAbilityLevel(gv_alv[lv_bwT], "A09M") - 1, 0));
  DisplayTimedTextToPlayer(Player(lv_bwT), 0.4, -0.6, 13, lv_bwU);
  SetUnitState(gv_alv[lv_bwT], UNIT_STATE_LIFE, gv_alu[20 + lv_bwT]);
  SetUnitState(gv_alv[lv_bwT], UNIT_STATE_MANA, gv_alu[30 + lv_bwT]);
  f_aJk(lv_bwS);
  lv_bwS = null;
}
function f_bwV() {
  var lv_bwW;
  var lv_bwX = GetTriggerPlayer();
  var lv_bwY = GetPlayerId(lv_bwX);
  var lv_bwZ = 1;
  var lv_bxa;
  if (gv_aam[lv_bwY] > 1.5) {
    do {
      if (lv_bwZ > gv_aaI.getInt(0) || lv_bwZ > 0) {
        break;
      }
      lv_bxa = GetUnitAbilityLevel(gv_alv[lv_bwY], gv_aaI.getInt(lv_bwZ));
      if (lv_bxa > 0) {
        BlzSetUnitAbilityCooldown(
          gv_alv[lv_bwY],
          gv_aaI.getInt(lv_bwZ),
          lv_bxa,
          BlzGetAbilityCooldown(gv_aaI.getInt(lv_bwZ), lv_bxa) / gv_aan[lv_bwY]
        );
      }
      lv_bwZ = lv_bwZ + 1;
    } while (true);
  }
  gv_alu[20 + lv_bwY] = GetUnitStateSwap(UNIT_STATE_LIFE, gv_alv[lv_bwY]);
  gv_alu[30 + lv_bwY] = GetUnitStateSwap(UNIT_STATE_MANA, gv_alv[lv_bwY]);
  SetUnitState(gv_alv[lv_bwY], UNIT_STATE_LIFE, 1);
  SetUnitState(gv_alv[lv_bwY], UNIT_STATE_MANA, 1);
  lv_bwW = f_aJj();
  TimerStart(lv_bwW, 1, false, f_bwR);
  SaveInteger(gv_abY, 0, GetHandleId(lv_bwW), lv_bwY);
  lv_bwX = null;
  lv_bwW = null;
}
function f_bxb() {
  var lv_bxc = GetPlayerId(GetTriggerPlayer());
  var lv_bxd = f_aOl(
    SubStringBJ(StringCase(GetEventPlayerChatString(), false), 7, 12)
  );
  if (lv_bxd < 8) {
    PingMinimapForPlayer(
      Player(lv_bxc),
      GetUnitX(gv_alv[lv_bxd]),
      GetUnitY(gv_alv[lv_bxd]),
      5
    );
    if (lv_bxc == lv_bxd) {
      PanCameraToTimedForPlayer(
        Player(lv_bxc),
        GetUnitX(gv_alv[lv_bxd]),
        GetUnitY(gv_alv[lv_bxd]),
        0.0
      );
    }
  }
}
function f_bxe() {
  var lv_bxf = GetTriggerPlayer();
  var lv_bxg = GetPlayerId(lv_bxf);
  var lv_bxh = S2S(gv_alw[80] + "Display quest text on screen set to: ");
  if (gv_alx.getInt(250 + lv_bxg) == 1) {
    gv_alx[250 + lv_bxg] = 0;
    lv_bxh = S2S(lv_bxh + gv_alw[77]) + "OFF";
  } else {
    gv_alx[250 + lv_bxg] = 1;
    lv_bxh = S2S(lv_bxh + gv_alw[74]) + "ON";
  }
  DisplayTimedTextToPlayer(Player(lv_bxg), 0.4, -0.6, 10, lv_bxh);
  lv_bxf = null;
}
function f_bxi() {
  gv_ama[1] = "pghe";
  gv_ama[2] = "pgma";
  gv_ama[3] = "stwp";
  gv_ama[5] = "shea";
  gv_ama[6] = "sman";
  gv_ama[7] = "shas";
  gv_ama[9] = "spro";
  gv_ama[10] = "sror";
  gv_ama[11] = "pomn";
  gv_ama[12] = "pnvu";
  gv_ama[14] = "pres";
  gv_ama[15] = "pdiv";
  gv_ama[17] = "ankh";
  gv_ama[18] = "fgrd";
  gv_ama[19] = "mnst";
  gv_ama[21] = "fgfh";
  gv_ama[22] = "infs";
  gv_ama[30] = "kpin";
  gv_ama[31] = "rhth";
  gv_ama[32] = "lgdh";
  gv_ama[33] = "ajen";
  gv_ama[34] = "rat9";
  gv_ama[35] = "clfm";
  gv_ama[36] = "clsd";
  gv_ama[37] = "afac";
  gv_ama[38] = "spsh";
  gv_ama[40] = "mcou";
  gv_ama[41] = "bgst";
  gv_ama[42] = "bspd";
  gv_ama[43] = "rin1";
  gv_ama[44] = "belv";
  gv_ama[45] = "odef";
  gv_ama[46] = "crys";
  gv_ama[47] = "rst1";
  gv_ama[48] = "dsum";
  gv_ama[50] = "hcun";
  gv_ama[51] = "rat6";
  gv_ama[52] = "cnob";
  gv_ama[53] = "penr";
  gv_ama[54] = "gcel";
  gv_ama[55] = "hval";
  gv_ama[56] = "ratc";
  gv_ama[57] = "prvt";
  gv_ama[58] = "pmna";
  gv_ama[59] = "whwd";
  gv_ama[60] = "rde1";
  gv_ama[61] = "stel";
  gv_ama[62] = "rde3";
  gv_ama[63] = "rde2";
  gv_ama[64] = "ssil";
  gv_ama[65] = "evtl";
  gv_ama[66] = "I006";
  gv_ama[67] = "I004";
  gv_ama[68] = "I005";
  gv_ama[70] = "anfg";
  gv_ama[71] = "amrc";
  gv_ama[72] = "axas";
  gv_ama[73] = "pams";
  gv_ama[80] = "gsou";
  gv_ama[81] = "stre";
  gv_ama[82] = "sprn";
  gv_ama[83] = "thdm";
  gv_ama[84] = "tbar";
  gv_ama[85] = "tfar";
  gv_ama[86] = "I068";
  gv_ama[87] = "I069";
  gv_ama[90] = "arsh";
  gv_ama[91] = "arsc";
  gv_ama[92] = "asbl";
  gv_ama[99] = "I06E";
  gv_ama[100] = "ciri";
  gv_ama[101] = "lhst";
  gv_ama[102] = "rlif";
  gv_ama[103] = "brac";
  gv_ama[104] = "ward";
  gv_ama[105] = "I000";
  gv_ama[106] = "I009";
  gv_ama[107] = "I008";
  gv_ama[108] = "I007";
  gv_ama[110] = "sbch";
  gv_ama[111] = "rag1";
  gv_ama[112] = "rwiz";
  gv_ama[113] = "I003";
  gv_ama[114] = "I002";
  gv_ama[115] = "I001";
  gv_ama[116] = "I00A";
  gv_ama[117] = "I00B";
  gv_ama[118] = "I00C";
  gv_ama[120] = "blba";
  gv_ama[121] = "bfhr";
  gv_ama[122] = "btst";
  gv_ama[123] = "I06D";
  gv_ama[124] = "I06F";
  gv_ama[130] = "I00J";
  gv_ama[131] = "I00I";
  gv_ama[132] = "I00E";
  gv_ama[133] = "I00F";
  gv_ama[134] = "I00G";
  gv_ama[135] = "I00H";
  gv_ama[136] = "I00L";
  gv_ama[137] = "I00D";
  gv_ama[138] = "I00K";
  gv_ama[139] = "uflg";
  gv_ama[140] = "tmsc";
  gv_ama[141] = "bzbe";
  gv_ama[142] = "tmmt";
  gv_ama[143] = "vddl";
  gv_ama[144] = "ches";
  gv_ama[145] = "tgxp";
  gv_ama[146] = "kybl";
  gv_ama[147] = "engs";
  gv_ama[148] = "I01H";
  gv_ama[149] = "I01D";
  gv_ama[150] = "rat3";
  gv_ama[151] = "brag";
  gv_ama[152] = "cosl";
  gv_ama[153] = "stpg";
  gv_ama[154] = "crdt";
  gv_ama[155] = "I06A";
  gv_ama[160] = "I00N";
  gv_ama[161] = "I00U";
  gv_ama[162] = "I00Q";
  gv_ama[163] = "I00O";
  gv_ama[164] = "I00R";
  gv_ama[165] = "I00T";
  gv_ama[166] = "I00P";
  gv_ama[167] = "I00S";
  gv_ama[168] = "I00M";
  gv_ama[170] = "sbok";
  gv_ama[171] = "stwa";
  gv_ama[172] = "spre";
  gv_ama[173] = "tbak";
  gv_ama[174] = "tbsm";
  gv_ama[175] = "tlum";
  gv_ama[176] = "ledg";
  gv_ama[177] = "kygh";
  gv_ama[178] = "bzbf";
  gv_ama[179] = "gmfr";
  gv_ama[180] = "I01E";
  gv_ama[181] = "I01V";
  gv_ama[185] = "envl";
  gv_ama[186] = "drph";
  gv_ama[187] = "shen";
  gv_ama[188] = "I064";
  gv_ama[189] = "I067";
  gv_ama[190] = "dkfw";
  gv_ama[191] = "jpnt";
  gv_ama[192] = "cnhn";
  gv_ama[193] = "mgtk";
  gv_ama[194] = "mort";
  gv_ama[195] = "k3m1";
  gv_ama[196] = "gopr";
  gv_ama[197] = "kymn";
  gv_ama[198] = "azhr";
  gv_ama[199] = "k3m3";
  gv_ama[200] = "k3m2";
  gv_ama[201] = "dphe";
  gv_ama[202] = "frhg";
  gv_ama[203] = "fgun";
  gv_ama[204] = "fwss";
  gv_ama[205] = "esaz";
  gv_ama[206] = "frgd";
  gv_ama[208] = "I01X";
  gv_ama[209] = "I01W";
  gv_ama[208] = "I011";
  gv_ama[212] = "I010";
  gv_ama[213] = "I00Z";
  gv_ama[214] = "I013";
  gv_ama[215] = "I012";
  gv_ama[216] = "I00Y";
  gv_ama[217] = "I00W";
  gv_ama[218] = "I00X";
  gv_ama[219] = "I00V";
  gv_ama[220] = "I06B";
  gv_ama[226] = "I01Y";
  gv_ama[230] = "sehr";
  gv_ama[231] = "thle";
  gv_ama[232] = "kysn";
  gv_ama[233] = "sclp";
  gv_ama[234] = "sorf";
  gv_ama[235] = "phlt";
  gv_ama[236] = "skrt";
  gv_ama[237] = "glsk";
  gv_ama[238] = "shwd";
  gv_ama[239] = "dthb";
  gv_ama[240] = "ktrm";
  gv_ama[245] = "I01Z";
  gv_ama[246] = "wtlg";
  gv_ama[247] = "wolg";
  gv_ama[248] = "I04U";
  gv_ama[249] = "I06C";
  gv_ama[250] = "I018";
  gv_ama[251] = "I017";
  gv_ama[252] = "I014";
  gv_ama[253] = "I01A";
  gv_ama[254] = "I015";
  gv_ama[255] = "I019";
  gv_ama[256] = "I01B";
  gv_ama[257] = "I016";
  gv_ama[260] = "olig";
  gv_ama[261] = "oflg";
  gv_ama[262] = "rump";
  gv_ama[263] = "ram4";
  gv_ama[264] = "srbd";
  gv_ama[265] = "sor3";
  gv_ama[266] = "sor7";
  gv_ama[267] = "gvsm";
  gv_ama[268] = "rej6";
  gv_ama[269] = "iwbr";
  gv_ama[270] = "rej5";
  gv_ama[271] = "nspi";
  gv_ama[272] = "shhn";
  gv_ama[275] = "oli2";
  gv_ama[276] = "pspd";
  gv_ama[277] = "horl";
  gv_ama[278] = "ram2";
  gv_ama[279] = "srtl";
  gv_ama[280] = "sor4";
  gv_ama[281] = "sor9";
  gv_ama[282] = "gemt";
  gv_ama[283] = "grsl";
  gv_ama[284] = "kgal";
  gv_ama[285] = "lnrn";
  gv_ama[286] = "nflg";
  gv_ama[287] = "shdt";
  gv_ama[290] = "gldo";
  gv_ama[291] = "pgin";
  gv_ama[292] = "schl";
  gv_ama[293] = "ram1";
  gv_ama[294] = "scul";
  gv_ama[295] = "sor2";
  gv_ama[296] = "sor8";
  gv_ama[297] = "gobm";
  gv_ama[298] = "hbth";
  gv_ama[299] = "jdrn";
  gv_ama[300] = "mlst";
  gv_ama[301] = "lure";
  gv_ama[302] = "shrs";
  gv_ama[305] = "oslo";
  gv_ama[306] = "rde0";
  gv_ama[307] = "ccmd";
  gv_ama[308] = "ram3";
  gv_ama[309] = "sor1";
  gv_ama[310] = "sor5";
  gv_ama[311] = "shcw";
  gv_ama[312] = "tels";
  gv_ama[313] = "sfog";
  gv_ama[314] = "klmm";
  gv_ama[315] = "mnsf";
  gv_ama[316] = "ocor";
  gv_ama[317] = "sksh";
  gv_ama[320] = "oven";
  gv_ama[321] = "rnsp";
  gv_ama[322] = "rots";
  gv_ama[323] = "rugt";
  gv_ama[324] = "sora";
  gv_ama[325] = "sor6";
  gv_ama[326] = "shtm";
  gv_ama[327] = "rej4";
  gv_ama[328] = "flag";
  gv_ama[329] = "rej2";
  gv_ama[330] = "rej1";
  gv_ama[331] = "ofir";
  gv_ama[332] = "soul";
  gv_ama[335] = "I01N";
  gv_ama[336] = "I01O";
  gv_ama[337] = "I01Q";
  gv_ama[338] = "I01P";
  gv_ama[339] = "I01R";
  gv_ama[340] = "I01S";
  gv_ama[341] = "I01T";
  gv_ama[342] = "I01I";
  gv_ama[343] = "I01J";
  gv_ama[344] = "I01K";
  gv_ama[345] = "I01L";
  gv_ama[346] = "I01M";
  gv_ama[347] = "I01U";
  gv_ama[350] = "I04V";
  gv_ama[351] = "I04W";
  gv_ama[352] = "I04X";
  gv_ama[353] = "I04Y";
  gv_ama[354] = "I04Z";
  gv_ama[355] = "I050";
  gv_ama[356] = "I051";
  gv_ama[357] = "I052";
  gv_ama[358] = "I053";
  gv_ama[359] = "I054";
  gv_ama[360] = "I055";
  gv_ama[361] = "I056";
  gv_ama[365] = "I05X";
  gv_ama[366] = "I061";
  gv_ama[367] = "I062";
  gv_ama[368] = "I063";
  gv_ama[369] = "I065";
  gv_ama[370] = "I066";
  gv_ama[512] = "Udre";
  gv_ama[513] = "Edem";
  gv_ama[514] = "Ekee";
  gv_ama[515] = "Hblm";
  gv_ama[516] = "Emoo";
  gv_ama[517] = "Hamg";
  gv_ama[518] = "Oshd";
  gv_ama[519] = "Ulic";
  gv_ama[520] = "Udea";
  gv_ama[521] = "Hant";
  gv_ama[522] = "Hpal";
  gv_ama[523] = "Hjai";
  gv_ama[524] = "Ofar";
  gv_ama[600] = "fgsk";
  gv_ama[601] = "wild";
  gv_ama[602] = "fgdg";
  gv_ama[700] = "A05O";
  gv_ama[701] = "A06R";
  gv_ama[702] = "A074";
  gv_ama[703] = "A03Q";
  gv_ama[704] = "A07D";
  gv_ama[705] = "A078";
  gv_ama[706] = "A04V";
  gv_ama[707] = "A04U";
  gv_ama[708] = "A06Y";
  gv_ama[709] = "A056";
  gv_ama[710] = "A06F";
  gv_ama[711] = "A06E";
  gv_ama[712] = "A06C";
  gv_ama[713] = "A06D";
  gv_ama[714] = "A06G";
  gv_ama[715] = "A06L";
  gv_ama[716] = "A06M";
  gv_ama[717] = "A06P";
  gv_ama[718] = "A06Q";
  gv_ama[719] = "A06K";
  gv_ama[720] = "A049";
  gv_ama[721] = "A03X";
  gv_ama[722] = "A045";
  gv_ama[723] = "A044";
  gv_ama[724] = "A03V";
  gv_ama[725] = "A05C";
  gv_ama[726] = "A05D";
  gv_ama[727] = "A05E";
  gv_ama[728] = "A05B";
  gv_ama[729] = "A05I";
  gv_ama[730] = "A053";
  gv_ama[731] = "A052";
  gv_ama[732] = "A051";
  gv_ama[733] = "A050";
  gv_ama[734] = "A05A";
  gv_ama[735] = "A064";
  gv_ama[736] = "A065";
  gv_ama[737] = "A068";
  gv_ama[738] = "A067";
  gv_ama[739] = "A066";
  gv_ama[740] = "A04E";
  gv_ama[741] = "A03T";
  gv_ama[742] = "A03R";
  gv_ama[743] = "A04A";
  gv_ama[744] = "A042";
  gv_ama[745] = "A03U";
  gv_ama[746] = "A048";
  gv_ama[747] = "A08H";
  gv_ama[748] = "A041";
  gv_ama[749] = "A040";
  gv_ama[750] = "A076";
  gv_ama[751] = "A070";
  gv_ama[752] = "A07C";
  gv_ama[753] = "A06Z";
  gv_ama[754] = "A071";
  gv_ama[755] = "A047";
  gv_ama[756] = "A03Z";
  gv_ama[757] = "A03P";
  gv_ama[758] = "A03S";
  gv_ama[759] = "A046";
  gv_ama[800] = "npig";
  gv_ama[801] = "nsea";
  gv_ama[802] = "ncrb";
  gv_ama[803] = "nhmc";
  gv_ama[804] = "nrat";
  gv_ama[805] = "nfro";
  gv_ama[806] = "necr";
  gv_ama[807] = "nrac";
  gv_ama[808] = "npng";
  gv_ama[809] = "nskk";
  gv_ama[810] = "nder";
  gv_ama[811] = "nfbr";
  gv_ama[812] = "ndwm";
  gv_ama[900] = "n038";
  gv_ama[901] = "n01T";
  gv_ama[902] = "n00A";
  gv_ama[903] = "n00C";
  gv_ama[904] = "n00F";
  gv_ama[905] = "n00G";
  gv_ama[906] = "n00O";
  gv_ama[907] = "n00E";
  gv_ama[908] = "n00R";
  gv_ama[909] = "n00P";
  gv_ama[910] = "n039";
  gv_ama[911] = "n00Q";
  gv_ama[912] = "n00S";
  gv_ama[920] = "n034";
  gv_ama[921] = "n035";
  gv_ama[922] = "n036";
  gv_ama[923] = "n037";
  DestroyTrigger(gv_ajR);
}
function f_bxj(lv_bxk, lv_bxl) {
  var lv_bxm = 0;
  var lv_bxn = 0;
  var lv_bxo = 0;
  lv_bxo = GetItemTypeId(UnitItemInSlot(lv_bxk, lv_bxl));
  do {
    if (lv_bxn > 450) {
      break;
    }
    if (gv_ama.getInt(lv_bxn) == lv_bxo) {
      lv_bxm = 0 + lv_bxn * 500;
      lv_bxn = 501;
    }
    lv_bxn = lv_bxn + 1;
  } while (true);
  if (lv_bxn < 500) {
    UnitRemoveItemSwapped(UnitItemInSlot(lv_bxk, lv_bxl), lv_bxk);
  }
  lv_bxn = 0;
  lv_bxo = GetItemTypeId(UnitItemInSlot(lv_bxk, lv_bxl + 1));
  do {
    if (lv_bxn > 450) {
      break;
    }
    if (gv_ama.getInt(lv_bxn) == lv_bxo) {
      lv_bxm = lv_bxm + lv_bxn;
      lv_bxn = 501;
    }
    lv_bxn = lv_bxn + 1;
  } while (true);
  if (lv_bxn < 500) {
    UnitRemoveItemSwapped(UnitItemInSlot(lv_bxk, lv_bxl + 1), lv_bxk);
  }
  return lv_bxm;
}
function f_bxp(lv_bxq, lv_bxr, lv_bxs, lv_bxt) {
  var lv_bxu = 0;
  var lv_bxv = 4;
  do {
    if (lv_bxv < 0) {
      break;
    }
    if (lv_bxv == 4) {
      lv_bxu = R2I(lv_bxt / 17850625);
      lv_bxt = lv_bxt - lv_bxu * 17850625;
    }
    if (lv_bxv == 3) {
      lv_bxu = R2I(lv_bxt / 274625);
      lv_bxt = lv_bxt - lv_bxu * 274625;
    }
    if (lv_bxv == 2) {
      lv_bxu = R2I(lv_bxt / 4225);
      lv_bxt = lv_bxt - lv_bxu * 4225;
    }
    if (lv_bxv == 1) {
      lv_bxu = R2I(lv_bxt / 65);
      lv_bxt = lv_bxt - lv_bxu * 65;
    }
    if (lv_bxv == 0) {
      lv_bxu = lv_bxt;
    }
    if (lv_bxv == lv_bxs) {
      lv_bxv = 0;
    }
    lv_bxv = lv_bxv - 1;
  } while (true);
  gv_alw[lv_bxq + 150] = SubString(
    S2S(lv_bxr + lv_bxr),
    lv_bxq + lv_bxu,
    lv_bxq + lv_bxu + 1
  );
}
function f_bxw(lv_bxx) {
  if (lv_bxx == "!") {
    return 33;
  }
  if (lv_bxx == "#") {
    return 35;
  }
  if (lv_bxx == "$") {
    return 36;
  }
  if (lv_bxx == "%") {
    return 37;
  }
  if (lv_bxx == "&") {
    return 38;
  }
  if (lv_bxx == "(") {
    return 40;
  }
  if (lv_bxx == ")") {
    return 41;
  }
  if (lv_bxx == "+") {
    return 43;
  }
  if (lv_bxx == "-") {
    return 45;
  }
  if (lv_bxx == ".") {
    return 46;
  }
  if (lv_bxx == "/") {
    return 47;
  }
  if (lv_bxx == "0") {
    return 48;
  }
  if (lv_bxx == "1") {
    return 49;
  }
  if (lv_bxx == "2") {
    return 50;
  }
  if (lv_bxx == "3") {
    return 51;
  }
  if (lv_bxx == "4") {
    return 52;
  }
  if (lv_bxx == "5") {
    return 53;
  }
  if (lv_bxx == "6") {
    return 54;
  }
  if (lv_bxx == "7") {
    return 55;
  }
  if (lv_bxx == "8") {
    return 56;
  }
  if (lv_bxx == "9") {
    return 57;
  }
  if (lv_bxx == ":") {
    return 58;
  }
  if (lv_bxx == ";") {
    return 59;
  }
  if (lv_bxx == "<") {
    return 60;
  }
  if (lv_bxx == "=") {
    return 61;
  }
  if (lv_bxx == ">") {
    return 62;
  }
  if (lv_bxx == "?") {
    return 63;
  }
  if (lv_bxx == "@") {
    return 64;
  }
  if (lv_bxx == "A") {
    return 65;
  }
  if (lv_bxx == "B") {
    return 66;
  }
  if (lv_bxx == "C") {
    return 67;
  }
  if (lv_bxx == "D") {
    return 68;
  }
  if (lv_bxx == "E") {
    return 69;
  }
  if (lv_bxx == "F") {
    return 70;
  }
  if (lv_bxx == "G") {
    return 71;
  }
  if (lv_bxx == "H") {
    return 72;
  }
  if (lv_bxx == "I") {
    return 73;
  }
  if (lv_bxx == "J") {
    return 74;
  }
  if (lv_bxx == "K") {
    return 75;
  }
  if (lv_bxx == "L") {
    return 76;
  }
  if (lv_bxx == "M") {
    return 77;
  }
  if (lv_bxx == "N") {
    return 78;
  }
  if (lv_bxx == "O") {
    return 79;
  }
  if (lv_bxx == "P") {
    return 80;
  }
  if (lv_bxx == "Q") {
    return 81;
  }
  if (lv_bxx == "R") {
    return 82;
  }
  if (lv_bxx == "S") {
    return 83;
  }
  if (lv_bxx == "T") {
    return 84;
  }
  if (lv_bxx == "U") {
    return 85;
  }
  if (lv_bxx == "V") {
    return 86;
  }
  if (lv_bxx == "W") {
    return 87;
  }
  if (lv_bxx == "X") {
    return 88;
  }
  if (lv_bxx == "Y") {
    return 89;
  }
  if (lv_bxx == "Z") {
    return 90;
  }
  if (lv_bxx == "[") {
    return 91;
  }
  if (lv_bxx == "]") {
    return 93;
  }
  if (lv_bxx == "^") {
    return 94;
  }
  if (lv_bxx == "_") {
    return 95;
  }
  if (lv_bxx == "`") {
    return 96;
  }
  if (lv_bxx == "a") {
    return 97;
  }
  if (lv_bxx == "b") {
    return 98;
  }
  if (lv_bxx == "c") {
    return 99;
  }
  if (lv_bxx == "d") {
    return 100;
  }
  if (lv_bxx == "e") {
    return 101;
  }
  if (lv_bxx == "f") {
    return 102;
  }
  if (lv_bxx == "g") {
    return 103;
  }
  if (lv_bxx == "h") {
    return 104;
  }
  if (lv_bxx == "i") {
    return 105;
  }
  if (lv_bxx == "j") {
    return 106;
  }
  if (lv_bxx == "k") {
    return 107;
  }
  if (lv_bxx == "l") {
    return 108;
  }
  if (lv_bxx == "m") {
    return 109;
  }
  if (lv_bxx == "n") {
    return 110;
  }
  if (lv_bxx == "o") {
    return 111;
  }
  if (lv_bxx == "p") {
    return 112;
  }
  if (lv_bxx == "q") {
    return 113;
  }
  if (lv_bxx == "r") {
    return 114;
  }
  if (lv_bxx == "s") {
    return 115;
  }
  if (lv_bxx == "t") {
    return 116;
  }
  if (lv_bxx == "u") {
    return 117;
  }
  if (lv_bxx == "v") {
    return 118;
  }
  if (lv_bxx == "w") {
    return 119;
  }
  if (lv_bxx == "x") {
    return 120;
  }
  if (lv_bxx == "y") {
    return 121;
  }
  if (lv_bxx == "z") {
    return 122;
  }
  if (lv_bxx == "{") {
    return 123;
  }
  if (lv_bxx == "|") {
    return 124;
  }
  if (lv_bxx == "}") {
    return 125;
  }
  if (lv_bxx == "~") {
    return 126;
  }
  return 32;
}
function f_bxy() {
  var lv_bxz = "Mark";
  var lv_bxA = GetTriggerPlayer();
  var lv_bxB = GetPlayerName(lv_bxA);
  var lv_bxC = GetPlayerId(lv_bxA);
  var lv_bxD = gv_alw[59];
  var lv_bxE = StringLength(lv_bxD);
  var lv_bxF = S2S(gv_alw[75] + "Now saving: ");
  var lv_bxG = "|cffffffff-load |r";
  var lv_bxH = "\r\n\r\n-load ";
  var lv_bxI = [];
  var lv_bxJ = 0;
  var lv_bxK = 0;
  var lv_bxL = 0;
  var lv_bxM;
  var lv_bxN;
  var lv_bxO = 0;
  var lv_bxP;
  var lv_bxQ;
  if (IsUnitType(gv_alv[lv_bxC], UNIT_TYPE_HERO) == false) {
    return;
  }
  lv_bxK = 0 + 150;
  do {
    if (lv_bxK > 49 + 150) {
      break;
    }
    gv_alw[lv_bxK] = "*";
    lv_bxK = lv_bxK + 1;
  } while (true);
  lv_bxJ = GetRandomInt(0, lv_bxE - 1);
  f_bxp(0, lv_bxD, 0, lv_bxJ);
  lv_bxD = S2S(lv_bxD + lv_bxD);
  lv_bxD = SubString(lv_bxD, lv_bxJ, lv_bxJ + lv_bxE);
  f_bxp(22, lv_bxD, 0, GetUnitPointValue(gv_alv[lv_bxC]));
  lv_bxF = S2S(lv_bxF + GetUnitName(gv_alv[lv_bxC])) + ", lvl ";
  lv_bxF = S2S(lv_bxF + I2S(GetHeroLevel(gv_alv[lv_bxC]))) + ", exp ";
  lv_bxF = S2S(lv_bxF + I2S(GetHeroXP(gv_alv[lv_bxC]))) + ", ";
  lv_bxF = S2S(lv_bxF + lv_bxB);
  if (gv_alx.getInt(260 + lv_bxC) == 0) {
    if (GetHeroLevel(gv_alv[lv_bxC]) > 98) {
      lv_bxO = lv_bxO + 10;
    }
    if (GetPlayerState(lv_bxA, PLAYER_STATE_RESOURCE_GOLD) > 200000) {
      lv_bxO = lv_bxO + 20;
    }
  }
  lv_bxJ = GetPlayerState(lv_bxA, PLAYER_STATE_RESOURCE_GOLD);
  if (lv_bxJ > 1000000) {
    lv_bxJ = 1000000;
  }
  lv_bxJ = R2I(lv_bxJ / 5);
  f_bxp(37, lv_bxD, 2, lv_bxJ);
  f_bxp(19, lv_bxD, 1, lv_bxJ);
  f_bxp(18, lv_bxD, 0, lv_bxJ);
  lv_bxJ = GetPlayerState(lv_bxA, PLAYER_STATE_RESOURCE_LUMBER);
  if (lv_bxJ > 10000) {
    lv_bxJ = 10000;
  }
  f_bxp(21, lv_bxD, 2, lv_bxJ);
  f_bxp(45, lv_bxD, 1, lv_bxJ);
  f_bxp(17, lv_bxD, 0, lv_bxJ);
  lv_bxJ = GetHeroXP(gv_alv[lv_bxC]);
  if (lv_bxJ > 3345580) {
    lv_bxJ = 3345580;
  }
  f_bxp(40, lv_bxD, 3, lv_bxJ);
  f_bxp(6, lv_bxD, 2, lv_bxJ);
  f_bxp(30, lv_bxD, 1, lv_bxJ);
  f_bxp(23, lv_bxD, 0, lv_bxJ);
  lv_bxJ = 0 + GetHeroStr(gv_alv[lv_bxC], false) * 1050 * 1050;
  lv_bxJ = lv_bxJ + GetHeroAgi(gv_alv[lv_bxC], false) * 1050;
  lv_bxJ = lv_bxJ + GetHeroInt(gv_alv[lv_bxC], false) * 1;
  f_bxp(36, lv_bxD, 4, lv_bxJ);
  f_bxp(2, lv_bxD, 3, lv_bxJ);
  f_bxp(14, lv_bxD, 2, lv_bxJ);
  f_bxp(16, lv_bxD, 1, lv_bxJ);
  f_bxp(25, lv_bxD, 0, lv_bxJ);
  lv_bxJ = f_bxj(gv_alv[lv_bxC], 0);
  f_bxp(32, lv_bxD, 2, lv_bxJ);
  f_bxp(24, lv_bxD, 1, lv_bxJ);
  f_bxp(3, lv_bxD, 0, lv_bxJ);
  lv_bxJ = f_bxj(gv_alv[lv_bxC], 2);
  f_bxp(41, lv_bxD, 2, lv_bxJ);
  f_bxp(4, lv_bxD, 1, lv_bxJ);
  f_bxp(38, lv_bxD, 0, lv_bxJ);
  lv_bxJ = f_bxj(gv_alv[lv_bxC], 4);
  f_bxp(13, lv_bxD, 2, lv_bxJ);
  f_bxp(29, lv_bxD, 1, lv_bxJ);
  f_bxp(33, lv_bxD, 0, lv_bxJ);
  lv_bxJ = f_bxj(gv_alv[lv_bxC + 8], 0);
  f_bxp(15, lv_bxD, 2, lv_bxJ);
  f_bxp(34, lv_bxD, 1, lv_bxJ);
  f_bxp(31, lv_bxD, 0, lv_bxJ);
  lv_bxJ = f_bxj(gv_alv[lv_bxC + 8], 2);
  f_bxp(12, lv_bxD, 2, lv_bxJ);
  f_bxp(7, lv_bxD, 1, lv_bxJ);
  f_bxp(5, lv_bxD, 0, lv_bxJ);
  lv_bxJ = f_bxj(gv_alv[lv_bxC + 8], 4);
  f_bxp(43, lv_bxD, 2, lv_bxJ);
  f_bxp(28, lv_bxD, 1, lv_bxJ);
  f_bxp(35, lv_bxD, 0, lv_bxJ);
  lv_bxP = 0;
  do {
    if (lv_bxP > 5) {
      break;
    }
    lv_bxQ = GetItemTypeId(UnitItemInSlot(gv_alv[lv_bxC], lv_bxP));
    lv_bxK = 0;
    do {
      if (lv_bxK > 450) {
        break;
      }
      if (gv_ama.getInt(lv_bxK) == lv_bxQ && lv_bxQ != 0) {
        lv_bxI[lv_bxP + 1] =
          S2S("Item " + I2S(lv_bxP + 1)) +
          ": " +
          GetItemName(UnitItemInSlot(gv_alv[lv_bxC], lv_bxP));
        lv_bxK = 501;
      }
      lv_bxK = lv_bxK + 1;
    } while (true);
    lv_bxP = lv_bxP + 1;
  } while (true);
  lv_bxI[7] = "Ability Levels: ";
  lv_bxI[8] =
    S2S("Str: " + I2S(GetHeroStr(gv_alv[lv_bxC], false))) +
    ", Agi: " +
    I2S(GetHeroAgi(gv_alv[lv_bxC], false)) +
    ", Int: " +
    I2S(GetHeroInt(gv_alv[lv_bxC], false));
  lv_bxK = 0;
  do {
    if (lv_bxK > 5) {
      break;
    }
    lv_bxM = UnitItemInSlot(gv_alv[lv_bxC + 8], lv_bxK);
    if (GetItemType(lv_bxM) == ITEM_TYPE_CHARGED) {
      if (GetItemCharges(lv_bxM) > 7) {
        SetItemCharges(lv_bxM, 7);
      }
    }
    lv_bxK = lv_bxK + 1;
  } while (true);
  lv_bxJ = 0;
  lv_bxK = 0;
  do {
    if (lv_bxK > 5) {
      break;
    }
    lv_bxM = UnitItemInSlot(gv_alv[lv_bxC + 8], lv_bxK);
    if (GetItemType(lv_bxM) == ITEM_TYPE_CHARGED) {
      lv_bxL = GetItemCharges(lv_bxM);
      lv_bxJ = lv_bxJ + R2I(Pow(8, I2R(lv_bxK))) * lv_bxL;
    }
    lv_bxK = lv_bxK + 1;
  } while (true);
  f_bxp(39, lv_bxD, 2, lv_bxJ);
  f_bxp(42, lv_bxD, 1, lv_bxJ);
  f_bxp(8, lv_bxD, 0, lv_bxJ);
  lv_bxK = 0;
  lv_bxL = GetUnitPointValue(gv_alv[lv_bxC]) * 5 + 640;
  lv_bxJ = 0;
  do {
    if (lv_bxK > 4) {
      break;
    }
    lv_bxJ =
      lv_bxJ +
      GetUnitAbilityLevelSwapped(
        gv_ama.getInt(lv_bxL + lv_bxK),
        gv_alv[lv_bxC]
      ) *
        R2I(Pow(10, I2R(lv_bxK)));
    lv_bxI[7] =
      S2S(
        lv_bxI[7] +
          I2S(
            GetUnitAbilityLevelSwapped(
              gv_ama.getInt(lv_bxL + lv_bxK),
              gv_alv[lv_bxC]
            )
          )
      ) + "  ";
    lv_bxK = lv_bxK + 1;
  } while (true);
  f_bxp(27, lv_bxD, 2, lv_bxJ);
  f_bxp(44, lv_bxD, 1, lv_bxJ);
  f_bxp(11, lv_bxD, 0, lv_bxJ);
  lv_bxJ = 0;
  lv_bxK = 0;
  do {
    if (lv_bxK == StringLength(lv_bxB)) {
      break;
    }
    lv_bxJ = lv_bxJ + f_bxw(SubString(lv_bxB, lv_bxK, lv_bxK + 1));
    lv_bxK = lv_bxK + 1;
  } while (true);
  f_bxp(20, lv_bxD, 1, lv_bxJ);
  f_bxp(9, lv_bxD, 0, lv_bxJ);
  lv_bxJ = 1024;
  lv_bxK = 0;
  do {
    if (lv_bxK == StringLength(lv_bxB)) {
      break;
    }
    if (ModuloInteger(lv_bxK, 2) > 0) {
      lv_bxJ = lv_bxJ + f_bxw(SubString(lv_bxB, lv_bxK, lv_bxK + 1));
    } else {
      lv_bxJ = lv_bxJ - f_bxw(SubString(lv_bxB, lv_bxK, lv_bxK + 1));
    }
    lv_bxK = lv_bxK + 1;
  } while (true);
  f_bxp(10, lv_bxD, 1, lv_bxJ);
  f_bxp(26, lv_bxD, 0, lv_bxJ);
  lv_bxJ = 0 + lv_bxO;
  lv_bxK = 2;
  do {
    if (lv_bxK > 44) {
      break;
    }
    lv_bxJ = lv_bxJ + f_bxw(gv_alw[lv_bxK + 150]) - 32;
    lv_bxK = lv_bxK + 1;
  } while (true);
  f_bxp(47, lv_bxD, 1, lv_bxJ);
  f_bxp(46, lv_bxD, 0, lv_bxJ);
  lv_bxJ = 2112 + lv_bxO;
  lv_bxK = 2;
  do {
    if (lv_bxK > 44) {
      break;
    }
    if (ModuloInteger(lv_bxK, 2) > 0) {
      lv_bxJ = lv_bxJ + f_bxw(gv_alw[lv_bxK + 150]) - 32;
    } else {
      lv_bxJ = lv_bxJ - f_bxw(gv_alw[lv_bxK + 150]) - 32;
    }
    lv_bxK = lv_bxK + 1;
  } while (true);
  if (lv_bxJ < 0) {
    lv_bxJ = 0;
  }
  f_bxp(48, lv_bxD, 1, lv_bxJ);
  f_bxp(49, lv_bxD, 0, lv_bxJ);
  lv_bxJ = GetRandomInt(3, 48);
  f_bxp(1, lv_bxD, 0, lv_bxJ);
  gv_alw[200] = gv_alw[150];
  gv_alw[201] = gv_alw[151];
  lv_bxK = 2 + 150;
  do {
    if (lv_bxK > 49 + 150) {
      break;
    }
    if (lv_bxK + lv_bxJ > 49 + 150) {
      lv_bxJ = 2 + lv_bxJ - 50;
    }
    gv_alw[lv_bxK + 50] = gv_alw[lv_bxK + lv_bxJ];
    lv_bxK = lv_bxK + 1;
  } while (true);
  lv_bxK = 0 + 200;
  do {
    if (lv_bxK > 49 + 200) {
      break;
    }
    lv_bxJ = f_bxw(gv_alw[lv_bxK]);
    if (lv_bxJ < 1) {
      lv_bxG = S2S(lv_bxG + gv_alw[74]) + gv_alw[lv_bxK] + "|r";
      lv_bxH = S2S(lv_bxH + gv_alw[lv_bxK]);
    } else {
      if (lv_bxJ < 65) {
        lv_bxG = S2S(lv_bxG + gv_alw[80]) + gv_alw[lv_bxK] + "|r";
        lv_bxH = S2S(lv_bxH + gv_alw[lv_bxK]);
      } else {
        if (lv_bxJ > 96) {
          lv_bxG = S2S(lv_bxG + gv_alw[82]) + gv_alw[lv_bxK] + "|r";
          lv_bxH = S2S(lv_bxH + gv_alw[lv_bxK]);
        } else {
          lv_bxG = S2S(lv_bxG + gv_alw[74]) + gv_alw[lv_bxK] + "|r";
          lv_bxH = S2S(lv_bxH + gv_alw[lv_bxK]);
        }
      }
    }
    if (ModuloInteger(lv_bxK + 1, 5) == 0) {
      if (lv_bxK < 49 + 200) {
        lv_bxG = S2S(lv_bxG + gv_alw[60]) + "-|r";
        lv_bxH = S2S(lv_bxH + "-");
      }
    }
    lv_bxK = lv_bxK + 1;
  } while (true);
  if (GetPlayerId(GetLocalPlayer()) == lv_bxC) {
    ClearTextMessages();
  }
  DisplayTimedTextToPlayer(lv_bxA, 0.4, -0.6, 120, lv_bxF);
  DisplayTimedTextToPlayer(lv_bxA, 0.4, -0.6, 120, lv_bxG);
  if (GetLocalPlayer() == GetTriggerPlayer()) {
    f_aAQ(gv_alv[lv_bxC]);
    gv_aaa =
      S2S("TBR 2\\" + GetPlayerName(lv_bxA)) +
      " " +
      gv_aac +
      " lvl " +
      I2S(GetHeroLevel(gv_alv[lv_bxC])) +
      ", ";
    if (f_ayI(gv_alv[lv_bxC])) {
      gv_aaa = S2S(gv_aaa + "regalia, ");
    }
    gv_aaa =
      S2S(gv_aaa + "Honor ") +
      I2S(GetPlayerState(lv_bxA, PLAYER_STATE_RESOURCE_LUMBER)) +
      ",xp " +
      I2S(GetHeroXP(gv_alv[lv_bxC])) +
      ".txt";
    gv_aab = S2S(lv_bxH + "\r\n\r\n") + "https://discord.gg/YBCmwZS" + "\n";
    DisplayTimedTextToPlayer(
      lv_bxA,
      0.4,
      -0.6,
      15,
      S2S("-" + GetUnitName(gv_alv[lv_bxC])) + "-"
    );
    PreloadGenClear();
    PreloadGenStart();
    Preload(gv_aab);
    lv_bxP = 0;
    do {
      if (lv_bxP > 8) {
        break;
      }
      Preload(lv_bxI[lv_bxP]);
      lv_bxP = lv_bxP + 1;
    } while (true);
    PreloadGenEnd(gv_aaa);
    gv_aaa = "";
    gv_aab = "";
  }
  lv_bxK = 0;
  do {
    if (lv_bxK > 5) {
      break;
    }
    SetItemPlayer(UnitItemInSlot(gv_alv[lv_bxC], lv_bxK), lv_bxA, false);
    SetItemPlayer(UnitItemInSlot(gv_alv[lv_bxC + 8], lv_bxK), lv_bxA, false);
    lv_bxK = lv_bxK + 1;
  } while (true);
  gv_alx[260 + lv_bxC] = gv_alx.getInt(260 + lv_bxC) + 1;
  lv_bxA = null;
}
function f_bxR(lv_bxS, lv_bxT, lv_bxU, lv_bxV) {
  var lv_bxW = 0;
  var lv_bxX = lv_bxS;
  do {
    if (lv_bxX > lv_bxS + 64) {
      break;
    }
    if (
      SubString(S2S(lv_bxT + lv_bxT), lv_bxX, lv_bxX + 1) ==
      SubString(lv_bxV, lv_bxS, lv_bxS + 1)
    ) {
      lv_bxW = lv_bxX - lv_bxS;
      lv_bxX = lv_bxS + 65;
    }
    lv_bxX = lv_bxX + 1;
  } while (true);
  if (lv_bxU == 4) {
    lv_bxW = lv_bxW * 17850625;
  }
  if (lv_bxU == 3) {
    lv_bxW = lv_bxW * 274625;
  }
  if (lv_bxU == 2) {
    lv_bxW = lv_bxW * 4225;
  }
  if (lv_bxU == 1) {
    lv_bxW = lv_bxW * 65;
  }
  return lv_bxW;
}
function f_bxY() {
  var lv_bxZ = GetTriggerPlayer();
  var lv_bya = GetPlayerName(lv_bxZ);
  var lv_byb = GetPlayerId(lv_bxZ);
  var lv_byc = GetEventPlayerChatString();
  var lv_byd = "";
  var lv_bye = gv_alw[59];
  var lv_byf = StringLength(lv_bye);
  var lv_byg = 0;
  var lv_byh = 0;
  var lv_byi = 0;
  var lv_byj = 0;
  var lv_byk = GetRandomLocInRect(gv_aep);
  if (SubString(lv_byc, 0, 6) != "-load ") {
    return;
  }
  if (StringLength(lv_byc) != 65) {
    return;
  }
  if (gv_alx.getInt(260 + lv_byb) >= 1 && gv_abc == false) {
    return;
  }
  if (gv_ama.getInt(1000 + lv_byb) >= 3 && gv_abc == false) {
    f_aMm(
      lv_bxZ,
      "Listen assclown, you are done loading heros. Time to -repick"
    );
    return;
  }
  gv_ama[1000 + lv_byb] = gv_ama.getInt(1000 + lv_byb) + 1;
  lv_byc = SubString(lv_byc, 6, StringLength(lv_byc));
  lv_byh = 0;
  do {
    if (lv_byh > StringLength(lv_byc)) {
      break;
    }
    if (SubString(lv_byc, lv_byh, lv_byh + 1) == "-") {
    } else {
      lv_byd = S2S(lv_byd + SubString(lv_byc, lv_byh, lv_byh + 1));
    }
    lv_byh = lv_byh + 1;
  } while (true);
  lv_byg = 0 + f_bxR(0, lv_bye, 0, lv_byd);
  lv_bye = S2S(lv_bye + lv_bye);
  lv_bye = SubString(lv_bye, lv_byg, lv_byg + lv_byf);
  lv_byg = 0 + f_bxR(1, lv_bye, 0, lv_byd);
  lv_byd =
    S2S(SubString(lv_byd, 0, 2) + SubString(lv_byd, 50 - lv_byg, 50)) +
    SubString(lv_byd, 2, 50 - lv_byg);
  if (IsUnitType(gv_alv[lv_byb], UNIT_TYPE_HERO)) {
    lv_byh = 0;
    do {
      if (lv_byh > 5) {
        break;
      }
      if (UnitItemInSlot(gv_alv[lv_byb], lv_byh) != null) {
        RemoveItem(UnitItemInSlot(gv_alv[lv_byb], lv_byh));
      }
      if (UnitItemInSlot(gv_alv[lv_byb + 8], lv_byh) != null) {
        RemoveItem(UnitItemInSlot(gv_alv[lv_byb + 8], lv_byh));
      }
      lv_byh = lv_byh + 1;
    } while (true);
  }
  if (gv_alv[lv_byb] != null) {
    RemoveUnit(gv_alv[lv_byb]);
    RemoveUnit(gv_alv[lv_byb + 8]);
    gv_alv[lv_byb] = null;
    gv_alv[lv_byb + 8] = null;
  }
  lv_byg = 0 + f_bxR(22, lv_bye, 0, lv_byd);
  if (lv_byg > 24) {
    lv_byj = lv_byj + R2I(Pow(2, 0));
    lv_byg = 0;
  }
  f_aQE(lv_byb);
  gv_alv[lv_byb] = CreateUnit(
    lv_bxZ,
    gv_ama.getInt(500 + lv_byg),
    7552,
    9992,
    120
  );
  gv_alv[lv_byb + 8] = CreateUnit(lv_bxZ, "e000", 7352, 9752, 270);
  lv_byg = 0 + f_bxR(37, lv_bye, 2, lv_byd);
  lv_byg = lv_byg + f_bxR(19, lv_bye, 1, lv_byd);
  lv_byg = lv_byg + f_bxR(18, lv_bye, 0, lv_byd);
  lv_byg = lv_byg * 5;
  if (lv_byg > 1000000) {
    lv_byj = lv_byj + R2I(Pow(2, 1));
  }
  SetPlayerState(lv_bxZ, PLAYER_STATE_RESOURCE_GOLD, lv_byg);
  lv_byg = 0 + f_bxR(21, lv_bye, 2, lv_byd);
  lv_byg = lv_byg + f_bxR(45, lv_bye, 1, lv_byd);
  lv_byg = lv_byg + f_bxR(17, lv_bye, 0, lv_byd);
  if (lv_byg > 10000) {
    lv_byj = lv_byj + R2I(Pow(2, 2));
  }
  SetPlayerState(lv_bxZ, PLAYER_STATE_RESOURCE_LUMBER, lv_byg);
  lv_byg = 0 + f_bxR(40, lv_bye, 3, lv_byd);
  lv_byg = lv_byg + f_bxR(6, lv_bye, 2, lv_byd);
  lv_byg = lv_byg + f_bxR(30, lv_bye, 1, lv_byd);
  lv_byg = lv_byg + f_bxR(23, lv_bye, 0, lv_byd);
  if (lv_byg > 3345580) {
    lv_byj = lv_byj + R2I(Pow(2, 3));
  }
  SetHeroXP(gv_alv[lv_byb], lv_byg, true);
  lv_byg = 0 + f_bxR(36, lv_bye, 4, lv_byd);
  lv_byg = lv_byg + f_bxR(2, lv_bye, 3, lv_byd);
  lv_byg = lv_byg + f_bxR(14, lv_bye, 2, lv_byd);
  lv_byg = lv_byg + f_bxR(16, lv_bye, 1, lv_byd);
  lv_byg = lv_byg + f_bxR(25, lv_bye, 0, lv_byd);
  lv_byh = R2I(lv_byg / 1102500);
  SetHeroStr(gv_alv[lv_byb], lv_byh, true);
  if (lv_byh > 500) {
    lv_byj = lv_byj + R2I(Pow(2, 8));
  }
  lv_byg = lv_byg - lv_byh * 1102500;
  lv_byh = R2I(lv_byg / 1050);
  SetHeroAgi(gv_alv[lv_byb], lv_byh, true);
  if (lv_byh > 500) {
    lv_byj = lv_byj + R2I(Pow(2, 9));
  }
  lv_byg = lv_byg - lv_byh * 1050;
  lv_byh = lv_byg;
  SetHeroInt(gv_alv[lv_byb], lv_byh, true);
  if (lv_byh > 500) {
    lv_byj = lv_byj + R2I(Pow(2, 10));
  }
  lv_byh =
    GetHeroStr(gv_alv[lv_byb], false) +
    GetHeroAgi(gv_alv[lv_byb], false) +
    GetHeroInt(gv_alv[lv_byb], false);
  if (lv_byh > 500) {
    lv_byj = lv_byj + R2I(Pow(2, 11));
  }
  UnitModifySkillPoints(gv_alv[lv_byb], 0 - GetHeroSkillPoints(gv_alv[lv_byb]));
  lv_byg = 0 + f_bxR(27, lv_bye, 2, lv_byd);
  lv_byg = lv_byg + f_bxR(44, lv_bye, 1, lv_byd);
  lv_byg = lv_byg + f_bxR(11, lv_bye, 0, lv_byd);
  lv_byh = 4;
  do {
    if (lv_byh < 0) {
      break;
    }
    lv_byi = R2I(lv_byg / R2I(Pow(10, I2R(lv_byh))));
    lv_byg = lv_byg - lv_byi * R2I(Pow(10, I2R(lv_byh)));
    if (R2I(GetHeroLevel(gv_alv[lv_byb]) / 25) + 1 < lv_byi) {
      lv_byi = R2I(GetHeroLevel(gv_alv[lv_byb]) / 25) + 1;
    }
    if (lv_byi > 0) {
      if (lv_byh == 4) {
        f_aMX(gv_alv[lv_byb]);
      }
      SetUnitAbilityLevelSwapped(
        gv_ama.getInt(GetUnitPointValue(gv_alv[lv_byb]) * 5 + 640 + lv_byh),
        gv_alv[lv_byb],
        lv_byi
      );
    }
    gv_alx[lv_byb * 5 + 200 + lv_byh] = lv_byi;
    lv_byh = lv_byh - 1;
  } while (true);
  lv_byi = 0 + f_bxR(20, lv_bye, 1, lv_byd);
  lv_byi = lv_byi + f_bxR(9, lv_bye, 0, lv_byd);
  lv_byg = 0;
  lv_byh = 0;
  do {
    if (lv_byh == StringLength(lv_bya)) {
      break;
    }
    lv_byg = lv_byg + f_bxw(SubString(lv_bya, lv_byh, lv_byh + 1));
    lv_byh = lv_byh + 1;
  } while (true);
  if (lv_byg != lv_byi) {
    lv_byj = lv_byj + R2I(Pow(2, 4));
  }
  lv_byi = 0 + f_bxR(10, lv_bye, 1, lv_byd);
  lv_byi = lv_byi + f_bxR(26, lv_bye, 0, lv_byd);
  lv_byg = 1024;
  lv_byh = 0;
  do {
    if (lv_byh == StringLength(lv_bya)) {
      break;
    }
    if (ModuloInteger(lv_byh, 2) > 0) {
      lv_byg = lv_byg + f_bxw(SubString(lv_bya, lv_byh, lv_byh + 1));
    } else {
      lv_byg = lv_byg - f_bxw(SubString(lv_bya, lv_byh, lv_byh + 1));
    }
    lv_byh = lv_byh + 1;
  } while (true);
  if (lv_byg != lv_byi) {
    lv_byj = lv_byj + R2I(Pow(2, 5));
  }
  lv_byi = 0 + f_bxR(47, lv_bye, 1, lv_byd);
  lv_byi = lv_byi + f_bxR(46, lv_bye, 0, lv_byd);
  lv_byg = 0;
  lv_byh = 2;
  do {
    if (lv_byh > 44) {
      break;
    }
    lv_byg = lv_byg + f_bxw(SubString(lv_byd, lv_byh, lv_byh + 1)) - 32;
    lv_byh = lv_byh + 1;
  } while (true);
  if (lv_byg != lv_byi) {
    lv_byj = lv_byj + R2I(Pow(2, 6));
  }
  lv_byi = 0 + f_bxR(48, lv_bye, 1, lv_byd);
  lv_byi = lv_byi + f_bxR(49, lv_bye, 0, lv_byd);
  lv_byg = 2112;
  lv_byh = 2;
  do {
    if (lv_byh > 44) {
      break;
    }
    if (ModuloInteger(lv_byh, 2) > 0) {
      lv_byg = lv_byg + f_bxw(SubString(lv_byd, lv_byh, lv_byh + 1)) - 32;
    } else {
      lv_byg = lv_byg - f_bxw(SubString(lv_byd, lv_byh, lv_byh + 1)) - 32;
    }
    lv_byh = lv_byh + 1;
  } while (true);
  if (lv_byg != lv_byi) {
    lv_byj = lv_byj + R2I(Pow(2, 7));
  }
  if (lv_byj > 0) {
    DisplayTimedTextToPlayer(lv_bxZ, 0, -0.6, 120, S2S("h=" + I2S(lv_byj)));
    SetPlayerState(lv_bxZ, PLAYER_STATE_RESOURCE_GOLD, lv_byj);
    SetPlayerState(lv_bxZ, PLAYER_STATE_RESOURCE_LUMBER, 0);
    RemoveUnit(gv_alv[lv_byb]);
    gv_alv[lv_byb] = CreateUnit(lv_bxZ, "nech", 7552, 9952, 270);
  } else {
    gv_alx[260 + lv_byb] = gv_alx.getInt(260 + lv_byb) + 1;
    lv_byg = 0 + f_bxR(32, lv_bye, 2, lv_byd);
    lv_byg = lv_byg + f_bxR(24, lv_bye, 1, lv_byd);
    lv_byg = lv_byg + f_bxR(3, lv_bye, 0, lv_byd);
    lv_byh = R2I(lv_byg / 500);
    UnitAddItemByIdSwapped(gv_ama.getInt(lv_byh), gv_alv[lv_byb]);
    lv_byg = lv_byg - lv_byh * 500;
    lv_byh = lv_byg;
    UnitAddItemByIdSwapped(gv_ama.getInt(lv_byh), gv_alv[lv_byb]);
    lv_byg = 0 + f_bxR(41, lv_bye, 2, lv_byd);
    lv_byg = lv_byg + f_bxR(4, lv_bye, 1, lv_byd);
    lv_byg = lv_byg + f_bxR(38, lv_bye, 0, lv_byd);
    lv_byh = R2I(lv_byg / 500);
    UnitAddItemByIdSwapped(gv_ama.getInt(lv_byh), gv_alv[lv_byb]);
    lv_byg = lv_byg - lv_byh * 500;
    lv_byh = lv_byg;
    UnitAddItemByIdSwapped(gv_ama.getInt(lv_byh), gv_alv[lv_byb]);
    lv_byg = 0 + f_bxR(13, lv_bye, 2, lv_byd);
    lv_byg = lv_byg + f_bxR(29, lv_bye, 1, lv_byd);
    lv_byg = lv_byg + f_bxR(33, lv_bye, 0, lv_byd);
    lv_byh = R2I(lv_byg / 500);
    UnitAddItemByIdSwapped(gv_ama.getInt(lv_byh), gv_alv[lv_byb]);
    lv_byg = lv_byg - lv_byh * 500;
    lv_byh = lv_byg;
    UnitAddItemByIdSwapped(gv_ama.getInt(lv_byh), gv_alv[lv_byb]);
    lv_byg = 0 + f_bxR(15, lv_bye, 2, lv_byd);
    lv_byg = lv_byg + f_bxR(34, lv_bye, 1, lv_byd);
    lv_byg = lv_byg + f_bxR(31, lv_bye, 0, lv_byd);
    lv_byh = R2I(lv_byg / 500);
    UnitAddItemToSlotById(gv_alv[lv_byb + 8], gv_ama.getInt(lv_byh), 0);
    lv_byg = lv_byg - lv_byh * 500;
    lv_byh = lv_byg;
    UnitAddItemToSlotById(gv_alv[lv_byb + 8], gv_ama.getInt(lv_byh), 1);
    lv_byg = 0 + f_bxR(12, lv_bye, 2, lv_byd);
    lv_byg = lv_byg + f_bxR(7, lv_bye, 1, lv_byd);
    lv_byg = lv_byg + f_bxR(5, lv_bye, 0, lv_byd);
    lv_byh = R2I(lv_byg / 500);
    UnitAddItemToSlotById(gv_alv[lv_byb + 8], gv_ama.getInt(lv_byh), 2);
    lv_byg = lv_byg - lv_byh * 500;
    lv_byh = lv_byg;
    UnitAddItemToSlotById(gv_alv[lv_byb + 8], gv_ama.getInt(lv_byh), 3);
    lv_byg = 0 + f_bxR(43, lv_bye, 2, lv_byd);
    lv_byg = lv_byg + f_bxR(28, lv_bye, 1, lv_byd);
    lv_byg = lv_byg + f_bxR(35, lv_bye, 0, lv_byd);
    lv_byh = R2I(lv_byg / 500);
    UnitAddItemToSlotById(gv_alv[lv_byb + 8], gv_ama.getInt(lv_byh), 4);
    lv_byg = lv_byg - lv_byh * 500;
    lv_byh = lv_byg;
    UnitAddItemToSlotById(gv_alv[lv_byb + 8], gv_ama.getInt(lv_byh), 5);
    lv_byg = 0 + f_bxR(39, lv_bye, 2, lv_byd);
    lv_byg = lv_byg + f_bxR(42, lv_bye, 1, lv_byd);
    lv_byg = lv_byg + f_bxR(8, lv_bye, 0, lv_byd);
    lv_byh = 5;
    do {
      if (lv_byh < 0) {
        break;
      }
      lv_byi = R2I(lv_byg / R2I(Pow(8, I2R(lv_byh))));
      if (lv_byi > 1) {
        SetItemCharges(UnitItemInSlot(gv_alv[lv_byb + 8], lv_byh), lv_byi);
      }
      lv_byg = lv_byg - lv_byi * R2I(Pow(8, I2R(lv_byh)));
      lv_byh = lv_byh - 1;
    } while (true);
    lv_byh = 0;
    do {
      if (lv_byh > 5) {
        break;
      }
      SetItemPlayer(UnitItemInSlot(gv_alv[lv_byb], lv_byh), lv_bxZ, false);
      SetItemPlayer(UnitItemInSlot(gv_alv[lv_byb + 8], lv_byh), lv_bxZ, false);
      lv_byh = lv_byh + 1;
    } while (true);
  }
  DisplayTimedTextToPlayer(
    lv_bxZ,
    0,
    0,
    60,
    "Welcome back to |cffff0000The Black Road 2|r!"
  );
  DisplayTimedTextToPlayer(lv_bxZ, 0, 0, 60, "     ");
  MultiboardSetItemValueBJ(gv_alP, 3, lv_byb + 2, GetUnitName(gv_alv[lv_byb]));
  MultiboardSetItemValueBJ(
    gv_alP,
    4,
    lv_byb + 2,
    S2S(gv_alw[75] + I2S(GetHeroLevel(gv_alv[lv_byb]))) + "|r"
  );
  gv_alx[lv_byb + 300] = 1;
  gv_alw[GetPlayerId(lv_bxZ) + 30] = "O";
  if (lv_bxZ == GetLocalPlayer()) {
    ResetToGameCamera(0.0);
    SetCameraBoundsToRect(bj_mapInitialPlayableArea);
    ClearTextMessages();
    ClearSelection();
    SelectUnit(gv_alv[lv_byb], true);
    SetCameraField(CAMERA_FIELD_TARGET_DISTANCE, 2500, 1);
  }
  UnitAddAbility(gv_alv[lv_byb], "Amrf");
  UnitRemoveAbility(gv_alv[lv_byb], "Amrf");
  PanCameraToTimedForPlayer(lv_bxZ, 7552, 9952, 0.5);
  SetPlayerAlliance(Player(9), lv_bxZ, ALLIANCE_SHARED_VISION, true);
  SetPlayerAlliance(
    Player(PLAYER_NEUTRAL_PASSIVE),
    lv_bxZ,
    ALLIANCE_SHARED_CONTROL,
    false
  );
  SetPlayerAlliance(
    Player(PLAYER_NEUTRAL_PASSIVE),
    lv_bxZ,
    ALLIANCE_SHARED_VISION,
    false
  );
  lv_byh = R2I(GetHeroLevel(gv_alv[lv_byb]) / 2);
  SetPlayerState(Player(lv_byb), PLAYER_STATE_RESOURCE_FOOD_USED, lv_byh);
  lv_bxZ = null;
  lv_byk = null;
  RemoveLocation(lv_byk);
}
function f_byl() {
  var lv_bym = 0;
  var lv_byn = 0;
  do {
    if (lv_bym > 7) {
      break;
    }
    gv_alL = Player(lv_bym);
    do {
      if (lv_byn > 9) {
        break;
      }
      if (gv_alL != Player(lv_byn)) {
        SetPlayerAlliance(
          gv_alL,
          Player(lv_byn),
          ALLIANCE_SHARED_CONTROL,
          false
        );
      }
      lv_byn = lv_byn + 1;
    } while (true);
    lv_byn = 0;
    lv_bym = lv_bym + 1;
  } while (true);
}
function f_byo() {
  var lv_byp = CreateTrigger();
  var lv_byq = 0;
  do {
    if (lv_byq > 7) {
      break;
    }
    TriggerRegisterPlayerAllianceChange(
      lv_byp,
      Player(lv_byq),
      ALLIANCE_SHARED_CONTROL
    );
    lv_byq = lv_byq + 1;
  } while (true);
  TriggerAddAction(lv_byp, f_byl);
  lv_byp = null;
}
function f_byr() {
  var lv_bys = 0;
  if (IsUnitVisible(gv_akq, Player(8))) {
    gv_alx[8105] = 1;
    DisplayTimedTextToForce(
      gv_alH,
      30,
      "|cffff0000Full Vision was enabled.  Game ending in 15 seconds.|r"
    );
    TriggerSleepAction(15);
    lv_bys = 0;
    do {
      if (lv_bys > 7) {
        break;
      }
      CustomDefeatBJ(Player(lv_bys), "Full Vision Enabled");
      lv_bys = lv_bys + 1;
    } while (true);
  }
}
function f_byt() {
  var lv_byu = ForcePickRandomPlayer(gv_alH);
  var lv_byv = CreateUnit(lv_byu, gv_abu, 0, 0, 0);
  var lv_byw = 0;
  if (GetLocalPlayer() == lv_byu) {
    SelectUnit(lv_byv, true);
    if (IsUnitSelected(lv_byv, lv_byu)) {
      if (ReloadGameCachesFromDisk()) {
        CustomDefeatDialogBJ(lv_byu, "Not Enough Players");
      } else {
      }
    } else {
    }
  }
  lv_byu = null;
  RemoveUnit(lv_byv);
  lv_byv = null;
}
function f_byx() {
  var lv_byy = 0;
  var lv_byz = 0;
  if (gv_alx.getInt(8105) == 1) {
    return;
  }
  do {
    if (lv_byy > 7) {
      break;
    }
    if (
      GetPlayerController(Player(lv_byy)) == MAP_CONTROL_USER &&
      GetPlayerSlotState(Player(lv_byy)) == PLAYER_SLOT_STATE_PLAYING
    ) {
      lv_byz = lv_byz + 1;
    }
    lv_byy = lv_byy + 1;
  } while (true);
  lv_byy = 8;
  do {
    if (lv_byy > 11) {
      break;
    }
    if (GetPlayerController(Player(lv_byy)) == MAP_CONTROL_USER) {
      lv_byz = 0;
    }
    lv_byy = lv_byy + 1;
  } while (true);
  if (
    lv_byz < 2 &&
    !(StringHash(GetPlayerName(Player(0))) == 381224678) &&
    1 == 0
  ) {
    gv_alx[8105] = 1;
    DisplayTimedTextToForce(
      gv_alH,
      30,
      "|cffff0000Not enough players.  Game ending in 30 seconds.|r"
    );
    TriggerSleepAction(30);
    if (gv_abc) {
      return;
    }
    lv_byy = 0;
    do {
      if (lv_byy > 7) {
        break;
      }
      RemovePlayer(Player(lv_byy), PLAYER_GAME_RESULT_DEFEAT);
      if (GetPlayerController(Player(lv_byy)) == MAP_CONTROL_USER) {
        CustomDefeatDialogBJ(Player(lv_byy), "Not Enough Players");
      }
      lv_byy = lv_byy + 1;
    } while (true);
  }
  f_byt();
}
function f_byA() {
  if (GetUnitStateSwap(UNIT_STATE_MANA, gv_alb) >= 100) {
    gv_acQ = GetUnitLoc(GetAttacker());
    IssuePointOrderByIdLoc(gv_alb, 852125, gv_acQ);
    RemoveLocation(gv_acQ);
    DisableTrigger(GetTriggeringTrigger());
    TriggerSleepAction(5);
    EnableTrigger(GetTriggeringTrigger());
  }
}
function f_byB() {
  return GetUnitStateSwap(UNIT_STATE_MANA, gv_akz) >= 65;
}
function f_byC() {
  if (f_byB()) {
    IssueTargetOrderById(gv_akz, 852527, GetAttacker());
    DisableTrigger(GetTriggeringTrigger());
    TriggerSleepAction(5);
    EnableTrigger(GetTriggeringTrigger());
  }
}
function f_byD() {
  return GetUnitStateSwap(UNIT_STATE_MANA, gv_aaU[9]) >= 125;
}
function f_byE() {
  if (f_byD()) {
    IssueTargetOrderById(gv_aaU[9], 852226, GetAttacker());
    DisableTrigger(GetTriggeringTrigger());
    TriggerSleepAction(11);
    EnableTrigger(GetTriggeringTrigger());
  }
}
function f_byF() {
  return (
    GetUnitState(gv_ale, UNIT_STATE_MANA) >= 300 &&
    GetAttacker() == gv_acN &&
    IsUnitAlly(GetTriggerUnit(), Player(8))
  );
}
function f_byG() {
  if (
    GetUnitState(gv_ale, UNIT_STATE_MANA) >= 300 &&
    GetAttacker() == gv_acN &&
    IsUnitAlly(GetTriggerUnit(), Player(8)) &&
    !IsUnitHidden(gv_ale)
  ) {
    IssueTargetOrderById(gv_aaU[9], 852144, gv_acN);
    DisableTrigger(GetTriggeringTrigger());
    TriggerSleepAction(15);
    EnableTrigger(GetTriggeringTrigger());
  }
}
function f_byH() {
  return GetUnitTypeId(GetAttacker()) == "n00B" && GetRandomInt(1, 10) == 3;
}
function f_byI() {
  IssueTargetOrderById(GetAttacker(), 852179, GetTriggerUnit());
}
function f_byJ() {
  return GetUnitStateSwap(UNIT_STATE_MANA, gv_ald) >= 250;
}
function f_byK() {
  if (f_byJ()) {
    IssueImmediateOrderById(gv_ald, 852556);
    DisableTrigger(GetTriggeringTrigger());
    TriggerSleepAction(60);
    EnableTrigger(GetTriggeringTrigger());
  }
}
function f_byL() {
  return GetUnitStateSwap(UNIT_STATE_MANA, gv_akZ) >= 1;
}
function f_byM() {
  if (f_byL()) {
    IssueImmediateOrderById(gv_akZ, 852588);
    DisableTrigger(GetTriggeringTrigger());
    TriggerSleepAction(12);
    EnableTrigger(GetTriggeringTrigger());
  }
}
function f_byN() {
  return GetUnitStateSwap(UNIT_STATE_MANA, gv_akJ) >= 75;
}
function f_byO() {
  if (f_byN()) {
    IssueTargetOrderById(gv_akJ, 852487, GetAttacker());
    DisableTrigger(GetTriggeringTrigger());
    TriggerSleepAction(8);
    EnableTrigger(GetTriggeringTrigger());
  }
}
function f_byP() {
  return GetUnitStateSwap(UNIT_STATE_MANA, gv_akO) >= 0.0;
}
function f_byQ() {
  if (f_byP()) {
    gv_acQ = GetRandomLocInRect(gv_agb);
    CreateNUnitsAtLoc(1, "nfor", Player(10), gv_acQ, 320);
    UnitApplyTimedLifeBJ(30, "Bapl", bj_lastCreatedUnit);
    RemoveLocation(gv_acQ);
    gv_acQ = GetRandomLocInRect(gv_agb);
    CreateNUnitsAtLoc(1, "nfor", Player(10), gv_acQ, 320);
    UnitApplyTimedLifeBJ(30, "Bapl", bj_lastCreatedUnit);
    RemoveLocation(gv_acQ);
    gv_acQ = GetRandomLocInRect(gv_agb);
    CreateNUnitsAtLoc(
      1,
      "nfor",
      Player(10),
      gv_acQ,
      GetUnitFacing(GetTriggerUnit())
    );
    UnitApplyTimedLifeBJ(30, "Bapl", bj_lastCreatedUnit);
    RemoveLocation(gv_acQ);
    DisableTrigger(GetTriggeringTrigger());
    TriggerSleepAction(3.5);
    EnableTrigger(GetTriggeringTrigger());
  }
}
function f_byR() {
  var lv_byS = 0;
  do {
    if (lv_byS > 8) {
      break;
    }
    SetPlayerTeam(Player(0), 0);
    SetPlayerAllianceStateAllyBJ(Player(lv_byS), Player(8), true);
    lv_byS = lv_byS + 1;
  } while (true);
  SetPlayerTeam(Player(9), 0);
  SetPlayerState(Player(8), PLAYER_STATE_ALLIED_VICTORY, 1);
  SetPlayerTeam(Player(10), 2);
  SetPlayerState(Player(10), PLAYER_STATE_ALLIED_VICTORY, 1);
  SetPlayerTeam(Player(11), 2);
  SetPlayerState(Player(11), PLAYER_STATE_ALLIED_VICTORY, 1);
  SetPlayerAllianceStateAllyBJ(Player(10), Player(11), true);
  SetPlayerAllianceStateAllyBJ(Player(11), Player(10), true);
  SetPlayerAllianceStateVisionBJ(Player(10), Player(11), true);
  SetPlayerAllianceStateVisionBJ(Player(11), Player(10), true);
}
function main() {
  var lv_byT;
  var lv_byU;
  var lv_byV;
  var lv_byW;
  var lv_byX;
  var lv_byY;
  var lv_byZ;
  var lv_bza;
  var lv_bzb;
  var lv_bzc;
  var lv_bzd;
  SetCameraBounds(
    -15616 + GetCameraMargin(CAMERA_MARGIN_LEFT),
    -15872 + GetCameraMargin(CAMERA_MARGIN_BOTTOM),
    15616 - GetCameraMargin(CAMERA_MARGIN_RIGHT),
    15360 - GetCameraMargin(CAMERA_MARGIN_TOP),
    -15616 + GetCameraMargin(CAMERA_MARGIN_LEFT),
    15360 - GetCameraMargin(CAMERA_MARGIN_TOP),
    15616 - GetCameraMargin(CAMERA_MARGIN_RIGHT),
    -15872 + GetCameraMargin(CAMERA_MARGIN_BOTTOM)
  );
  SetDayNightModels(
    "Environment\\DNC\\DNCAshenvale\\DNCAshenvaleTerrain\\DNCAshenvaleTerrain.mdl",
    "Environment\\DNC\\DNCAshenvale\\DNCAshenvaleUnit\\DNCAshenvaleUnit.mdl"
  );
  SetWaterBaseColor(0, 0, 200, 255);
  NewSoundEnvironment("Default");
  SetAmbientDaySound("AshenvaleDay");
  SetAmbientNightSound("AshenvaleNight");
  SetMapMusic("Music", true, 0);
  gv_agc = CreateSound(
    "Sound\\Interface\\Hint.wav",
    false,
    false,
    false,
    10,
    10,
    "DefaultEAXON"
  );
  SetSoundParamsFromLabel(gv_agc, "Hint");
  SetSoundDuration(gv_agc, 2006);
  gv_agd = CreateSound(
    "Abilities\\Spells\\NightElf\\BattleRoar\\BattleRoar.wav",
    false,
    false,
    true,
    10,
    10,
    "SpellsEAX"
  );
  SetSoundParamsFromLabel(gv_agd, "BattleRoar");
  SetSoundDuration(gv_agd, 1991);
  SetSoundChannel(gv_agd, 8);
  gv_age = CreateSound(
    "Buildings\\Other\\MageTower\\MageTowerWhat1.wav",
    false,
    false,
    true,
    10,
    10,
    "SpellsEAX"
  );
  SetSoundParamsFromLabel(gv_age, "MageTowerWhat");
  SetSoundDuration(gv_age, 3274);
  SetSoundChannel(gv_age, 8);
  SetSoundVolume(gv_age, 127);
  gv_agf = CreateSound(
    "Units\\NightElf\\MountainGiant\\MountainGiantPissed1.wav",
    false,
    false,
    true,
    10,
    10,
    "SpellsEAX"
  );
  SetSoundParamsFromLabel(gv_agf, "MountainGiantPissed");
  SetSoundDuration(gv_agf, 2444);
  SetSoundChannel(gv_agf, 8);
  gv_agg = CreateSound(
    "Doodads\\LordaeronSummer\\Terrain\\Gate\\GateEpicDeath.wav",
    false,
    false,
    true,
    10,
    10,
    "SpellsEAX"
  );
  SetSoundParamsFromLabel(gv_agg, "GateDeath");
  SetSoundDuration(gv_agg, 1582);
  SetSoundChannel(gv_agg, 8);
  gv_agh = CreateSound(
    "Units\\NightElf\\Chimaera\\ChimaeraPissed1.wav",
    false,
    false,
    true,
    10,
    10,
    "SpellsEAX"
  );
  SetSoundParamsFromLabel(gv_agh, "ChimaeraPissed");
  SetSoundDuration(gv_agh, 1521);
  SetSoundChannel(gv_agh, 8);
  SetSoundVolume(gv_agh, 127);
  gv_agi = CreateSound(
    "Units\\Naga\\LadyVashj\\LadyVashjWhat5.wav",
    false,
    false,
    true,
    10,
    10,
    "SpellsEAX"
  );
  SetSoundParamsFromLabel(gv_agi, "SeaWitchWhat");
  SetSoundDuration(gv_agi, 1927);
  SetSoundChannel(gv_agi, 8);
  gv_agj = CreateSound(
    "Abilities\\Spells\\Orc\\Bloodlust\\BloodlustTarget.wav",
    false,
    false,
    true,
    10,
    10,
    "SpellsEAX"
  );
  SetSoundParamsFromLabel(gv_agj, "Bloodlust");
  SetSoundDuration(gv_agj, 2583);
  SetSoundChannel(gv_agj, 8);
  gv_acS = Rect(96, 12160, 512, 12608);
  gv_acT = Rect(5824, 8352, 9088, 11712);
  gv_acU = Rect(1280, 13184, 3008, 15264);
  gv_acV = Rect(2624, 1536, 5024, 7072);
  gv_acW = Rect(5024, 2880, 7776, 7936);
  gv_acX = Rect(1056, 832, 2720, 3968);
  gv_acY = Rect(8864, 5088, 10400, 6368);
  gv_acZ = Rect(10528, 5824, 11104, 6400);
  gv_ada = Rect(6688, 12768, 8128, 13056);
  gv_adb = Rect(6720, 13056, 8000, 13344);
  gv_adc = Rect(6784, 13344, 8000, 13632);
  gv_add = Rect(6976, 13632, 8000, 13920);
  gv_ade = Rect(-3488, -2624, -3424, -2560);
  gv_adf = Rect(-2464, -1792, -2400, -1728);
  gv_adg = Rect(-1376, -1120, -1312, -1056);
  gv_adh = Rect(-3456, -192, -3392, -128);
  gv_adi = Rect(-4800, -352, -4736, -288);
  gv_adj = Rect(-8448, -3520, -8384, -3456);
  gv_adk = Rect(6112, 3648, 6176, 3712);
  gv_adl = Rect(7872, 5984, 7936, 6048);
  gv_adm = Rect(4544, 6944, 4608, 7008);
  gv_adn = Rect(-13664, -11680, -2144, -10080);
  gv_ado = Rect(-3584, -13056, 320, -8960);
  gv_adp = Rect(-10848, -14912, -2048, -11616);
  gv_adq = Rect(-13152, -14016, -10816, -11648);
  gv_adr = Rect(-13568, -10112, -8864, -9216);
  gv_ads = Rect(13184, -3648, 14400, -2464);
  gv_adt = Rect(14752, -8800, 14976, -8608);
  gv_adu = Rect(-14656, 14016, -14496, 14176);
  gv_adv = Rect(-2272, 512, 1056, 3456);
  gv_adw = Rect(128, 2400, 256, 2528);
  gv_adx = Rect(3008, -6592, 6240, -1696);
  lv_byT = AddWeatherEffect(gv_adx, "RAlr");
  EnableWeatherEffect(lv_byT, true);
  gv_ady = Rect(1472, -6592, 3104, -1312);
  lv_byT = AddWeatherEffect(gv_ady, "RAlr");
  EnableWeatherEffect(lv_byT, true);
  gv_adz = Rect(1792, -7840, 5856, -6592);
  lv_byT = AddWeatherEffect(gv_adz, "RAlr");
  EnableWeatherEffect(lv_byT, true);
  gv_adA = Rect(2592, -8768, 4416, -7840);
  lv_byT = AddWeatherEffect(gv_adA, "RAlr");
  EnableWeatherEffect(lv_byT, true);
  gv_adB = Rect(3712, -2016, 5856, -928);
  lv_byT = AddWeatherEffect(gv_adB, "RAlr");
  EnableWeatherEffect(lv_byT, true);
  gv_adC = Rect(4160, -1248, 4320, -1088);
  gv_adD = Rect(13440, -12736, 15232, -10720);
  gv_adE = Rect(13340, -12736, 15232, -10720);
  gv_adF = Rect(12704, 3360, 15200, 7456);
  lv_byT = AddWeatherEffect(gv_adF, "FDwh");
  EnableWeatherEffect(lv_byT, true);
  gv_adG = Rect(-12864, 14880, -12544, 15040);
  gv_adH = Rect(14304, 4192, 14400, 4288);
  gv_adI = Rect(14240, 3808, 14624, 4096);
  gv_adJ = Rect(-12608, 14400, -12512, 14496);
  gv_adK = Rect(-13024, 13600, -12032, 14624);
  gv_adL = Rect(-14944, 14496, -14464, 14656);
  gv_adM = Rect(-13440, -4960, -11136, -960);
  lv_byT = AddWeatherEffect(gv_adM, "FDwh");
  EnableWeatherEffect(lv_byT, true);
  gv_adN = Rect(-13024, -6016, -8384, -4608);
  lv_byT = AddWeatherEffect(gv_adN, "FDwh");
  EnableWeatherEffect(lv_byT, true);
  gv_adO = Rect(-3616, -8960, -1056, -5248);
  lv_byT = AddWeatherEffect(gv_adO, "FDwh");
  EnableWeatherEffect(lv_byT, true);
  gv_adP = Rect(-8864, -10080, -3584, -5216);
  lv_byT = AddWeatherEffect(gv_adP, "FDwh");
  EnableWeatherEffect(lv_byT, true);
  gv_adQ = Rect(-4960, -5248, -2112, -3712);
  lv_byT = AddWeatherEffect(gv_adQ, "FDwh");
  EnableWeatherEffect(lv_byT, true);
  gv_adR = Rect(2048, 14336, 2112, 14400);
  gv_adS = Rect(8832, -8320, 15488, 2304);
  lv_byT = AddWeatherEffect(gv_adS, "SNbs");
  EnableWeatherEffect(lv_byT, true);
  gv_adT = Rect(10240, -5696, 10880, -4960);
  gv_adU = Rect(14240, -5280, 14880, -4512);
  gv_adV = Rect(10816, -3008, 11648, -2272);
  gv_adW = Rect(11776, -4256, 12384, -3488);
  gv_adX = Rect(9248, -3712, 9984, -3008);
  gv_adY = Rect(12768, -6016, 13536, -5280);
  gv_adZ = Rect(14240, -9184, 14592, -8832);
  gv_aea = Rect(-2016, -15872, 704, -13248);
  gv_aeb = Rect(7040, 13920, 7936, 14208);
  gv_aec = Rect(8544, -12608, 8704, -12480);
  gv_aed = Rect(7968, -12416, 8320, -12032);
  gv_aee = Rect(1248, 9056, 4864, 12736);
  gv_aef = Rect(3200, 12672, 5376, 14752);
  gv_aeg = Rect(9984, 7968, 10976, 9152);
  gv_aeh = Rect(-16384, 13376, -11520, 16352);
  lv_byT = AddWeatherEffect(gv_aeh, "SNbs");
  EnableWeatherEffect(lv_byT, true);
  gv_aei = Rect(-14784, -15520, -13696, -14400);
  gv_aej = Rect(5024, -10272, 6528, -8544);
  lv_byT = AddWeatherEffect(gv_aej, "RAhr");
  EnableWeatherEffect(lv_byT, true);
  gv_aek = Rect(7712, 1888, 7808, 1984);
  gv_ael = Rect(5728, 1312, 5824, 1408);
  gv_aem = Rect(7392, 512, 7488, 608);
  gv_aen = Rect(5056, -448, 8288, 2624);
  gv_aeo = Rect(-15136, 6272, -8960, 13376);
  gv_aep = Rect(7456, 9856, 7648, 10048);
  gv_aeq = Rect(2912, -15264, 5120, -12800);
  gv_aer = Rect(-9440, -6208, -9312, -6080);
  gv_aes = Rect(-992, -64, -736, 192);
  gv_aet = Rect(-8960, 7424, -5056, 9184);
  lv_byT = AddWeatherEffect(gv_aet, "RAlr");
  EnableWeatherEffect(lv_byT, true);
  gv_aeu = Rect(-8960, 6752, -5600, 7424);
  lv_byT = AddWeatherEffect(gv_aeu, "RAlr");
  EnableWeatherEffect(lv_byT, true);
  gv_aev = Rect(-8832, 6080, -6528, 6752);
  lv_byT = AddWeatherEffect(gv_aev, "RAlr");
  EnableWeatherEffect(lv_byT, true);
  gv_aew = Rect(-8864, 9184, -2848, 12928);
  gv_aex = Rect(-7968, 11200, -672, 14816);
  lv_byT = AddWeatherEffect(gv_aex, "RAlr");
  EnableWeatherEffect(lv_byT, true);
  gv_aey = Rect(-15360, 6304, -8832, 12320);
  lv_byT = AddWeatherEffect(gv_aey, "SNhs");
  EnableWeatherEffect(lv_byT, true);
  gv_aez = Rect(-14752, 12320, -11264, 13376);
  lv_byT = AddWeatherEffect(gv_aez, "SNls");
  EnableWeatherEffect(lv_byT, true);
  gv_aeA = Rect(12800, 13440, 14464, 15040);
  gv_aeB = Rect(9792, 9856, 10112, 14336);
  gv_aeC = Rect(672, -11872, 3136, -8768);
  lv_byT = AddWeatherEffect(gv_aeC, "RAhr");
  EnableWeatherEffect(lv_byT, true);
  gv_aeD = Rect(-11808, 1920, -11744, 1984);
  gv_aeE = Rect(928, 8480, 992, 8544);
  gv_aeF = Rect(-10400, 3392, -10336, 3488);
  gv_aeG = Rect(-10176, 4672, -10112, 4736);
  gv_aeH = Rect(-7872, 2304, -7808, 2368);
  gv_aeI = Rect(-4736, 864, -4672, 928);
  gv_aeJ = Rect(-4288, 2848, -4224, 2912);
  gv_aeK = Rect(-2464, 4160, -2400, 4224);
  gv_aeL = Rect(-2272, 5920, -2208, 5984);
  gv_aeM = Rect(-1920, 9984, -1856, 10048);
  gv_aeN = Rect(10400, 13248, 11136, 14080);
  gv_aeO = Rect(7072, 11712, 7776, 12032);
  gv_aeP = Rect(11520, -1408, 15232, 2048);
  gv_aeQ = Rect(-10848, -2400, -8352, 96);
  gv_aeR = Rect(1984, -15712, 3008, -13440);
  lv_byT = AddWeatherEffect(gv_aeR, "RAhr");
  EnableWeatherEffect(lv_byT, true);
  gv_aeS = Rect(2048, -16384, 8992, -12192);
  lv_byT = AddWeatherEffect(gv_aeS, "RAhr");
  EnableWeatherEffect(lv_byT, true);
  gv_aeT = Rect(8960, -16384, 15584, -10240);
  lv_byT = AddWeatherEffect(gv_aeT, "RAhr");
  EnableWeatherEffect(lv_byT, true);
  gv_aeU = Rect(7904, -12224, 8992, -10240);
  gv_aeV = Rect(2400, 7680, 2752, 8096);
  lv_byT = AddWeatherEffect(gv_aeV, "LRaa");
  EnableWeatherEffect(lv_byT, true);
  gv_aeW = Rect(-10688, -640, -10304, -256);
  gv_aeX = Rect(-11072, -4640, -4864, -2400);
  lv_byT = AddWeatherEffect(gv_aeX, "LRma");
  EnableWeatherEffect(lv_byT, true);
  gv_aeY = Rect(-4864, -3712, -3552, 160);
  lv_byT = AddWeatherEffect(gv_aeY, "LRma");
  EnableWeatherEffect(lv_byT, true);
  gv_aeZ = Rect(-3584, -2688, -448, 160);
  lv_byT = AddWeatherEffect(gv_aeZ, "LRma");
  EnableWeatherEffect(lv_byT, true);
  gv_afa = Rect(-8352, -3296, -4864, 96);
  lv_byT = AddWeatherEffect(gv_afa, "LRma");
  EnableWeatherEffect(lv_byT, true);
  gv_afb = Rect(-8384, -5216, -4960, -4608);
  gv_afc = Rect(416, 4640, 832, 5120);
  gv_afd = Rect(9952, 10080, 10048, 10176);
  gv_afe = Rect(3776, 4288, 4352, 4800);
  gv_aff = Rect(5376, 4896, 5472, 4992);
  gv_afg = Rect(8128, 8128, 8224, 8224);
  gv_afh = Rect(-12224, -9216, -9248, -6208);
  gv_afi = Rect(-10240, -6976, -10112, -6880);
  gv_afj = Rect(8384, 3872, 8448, 3936);
  gv_afk = Rect(-14912, 8640, -14848, 8704);
  gv_afl = Rect(-5344, -4960, -5280, -4896);
  gv_afm = Rect(-3232, 2496, -3168, 2560);
  gv_afn = Rect(5376, -5312, 5440, -5248);
  gv_afo = Rect(9152, 6112, 9408, 6336);
  gv_afp = Rect(10048, 5120, 10272, 5344);
  gv_afq = Rect(-2464, -4576, -768, -2528);
  gv_afr = Rect(-12480, 3488, -10336, 5760);
  gv_afs = Rect(1088, 192, 1472, 512);
  gv_aft = Rect(-12384, 672, -2688, 3424);
  gv_afu = Rect(-10176, 3392, -5952, 6080);
  gv_afv = Rect(-4800, 5408, 288, 8544);
  gv_afw = Rect(-6528, 3392, -2272, 6880);
  gv_afx = Rect(-5600, 2752, -3584, 7424);
  gv_afy = Rect(-2848, 6592, -1344, 10208);
  gv_afz = Rect(-1376, 4160, 1632, 10528);
  gv_afA = Rect(-2304, 3712, -736, 5472);
  gv_afB = Rect(-13344, -1376, -12960, -1024);
  lv_byT = AddWeatherEffect(gv_afB, "LRma");
  EnableWeatherEffect(lv_byT, true);
  gv_afC = Rect(-12864, -1376, -12736, -1248);
  gv_afD = Rect(-11136, 12650, -8512, 15072);
  lv_byT = AddWeatherEffect(gv_afD, "RAhr");
  EnableWeatherEffect(lv_byT, true);
  gv_afE = Rect(-3520, -1760, -3392, -1632);
  gv_afF = Rect(-6848, -2880, -6752, -2784);
  gv_afG = Rect(-7712, -3680, -7616, -3584);
  gv_afH = Rect(7104, 14208, 7680, 14656);
  gv_afI = Rect(10112, 10912, 11008, 13280);
  gv_afJ = Rect(10912, 10976, 11744, 12832);
  gv_afK = Rect(11712, 12032, 12928, 14368);
  gv_afL = Rect(12896, 11648, 13856, 13440);
  gv_afM = Rect(12480, 13760, 14208, 14432);
  gv_afN = Rect(-2720, -5088, -1984, -4416);
  gv_afO = Rect(12512, -4416, 15136, -1920);
  gv_afP = Rect(9344, -8576, 11168, -6656);
  gv_afQ = Rect(11872, -11232, 12192, -10944);
  gv_afR = Rect(9184, -11232, 9504, -10944);
  gv_afS = Rect(6080, -14080, 6400, -13792);
  gv_afT = Rect(9536, -14784, 9856, -14496);
  gv_afU = Rect(12064, -14848, 12384, -14560);
  gv_afV = Rect(7040, -15040, 7360, -14752);
  gv_afW = Rect(11264, -12832, 11584, -12544);
  gv_afX = Rect(9344, -1472, 10368, -352);
  gv_afY = Rect(11136, -8224, 13728, -7392);
  gv_afZ = Rect(-6176, -14784, -4224, -12736);
  gv_aga = Rect(8896, -3456, 10816, -1472);
  gv_agb = Rect(7808, -14848, 9056, -13632);
  gv_alg = CreateDestructable("ATg2", -8416, -2336, 270, 1, 0);
  gv_all = CreateDestructable("ATg2", -8608, 12768, 270, 1, 0);
  gv_alf = CreateDestructable("ATg3", -2048, -13568, 0.0, 0.9, 0);
  gv_aln = CreateDestructable("ATg3", 3200, 14528, 0.0, 0.9, 0);
  gv_alq = CreateDestructable("DTg3", 13440, -12160, 0.0, 0.9, 0);
  gv_alr = CreateDestructable("DTg3", 5120, -13568, 0.0, 0.9, 0);
  gv_alm = CreateDestructable("DTrc", -12896, 14624, 85, 1, 1);
  gv_alj = CreateDestructable("DTrc", -12512, 14624, 133, 1.2, 4);
  gv_alh = CreateDestructable("DTrc", -12704, 14560, 14, 1, 1);
  gv_alt = CreateDestructable("ITx1", 10240, -6720, 270, 0.9, 0);
  gv_als = CreateDestructable("ITx3", 11456, 256, 0.0, 0.8, 0);
  gv_alo = CreateDestructable("LOcg", 4544, -13184, 233.398, 1.128, 0);
  gv_alk = CreateDestructable("LTg1", -11840, 3456, 270, 0.9, 0);
  gv_ali = CreateDestructable("ZTd1", -14528, 13632, 270, 0.9, 0);
  gv_alp = CreateDestructable("ZTg4", 2784, -8736, 180, 1, 0);
  CreateItem("I023", 10598, 8546.3);
  f_aPM();
  f_aPY();
  f_aPS();
  f_aQe();
  ConfigureNeutralVictim();
  gv_ayF = Filter(f_aCp);
  filterIssueHauntOrderAtLocBJ = Filter(IssueHauntOrderAtLocBJFilter);
  filterEnumDestructablesInCircleBJ = Filter(f_aBU);
  filterGetUnitsInRectOfPlayer = Filter(GetUnitsInRectOfPlayerFilter);
  filterGetUnitsOfTypeIdAll = Filter(GetUnitsOfTypeIdAllFilter);
  filterGetUnitsOfPlayerAndTypeId = Filter(GetUnitsOfPlayerAndTypeIdFilter);
  filterMeleeTrainedUnitIsHeroBJ = Filter(MeleeTrainedUnitIsHeroBJFilter);
  filterLivingPlayerUnitsOfTypeId = Filter(LivingPlayerUnitsOfTypeIdFilter);
  lv_byZ = 0;
  do {
    if (lv_byZ == 16) {
      break;
    }
    bj_FORCE_PLAYER[lv_byZ] = CreateForce();
    ForceAddPlayer(bj_FORCE_PLAYER[lv_byZ], Player(lv_byZ));
    lv_byZ = lv_byZ + 1;
  } while (true);
  bj_FORCE_ALL_PLAYERS = CreateForce();
  ForceEnumPlayers(bj_FORCE_ALL_PLAYERS, null);
  bj_cineModePriorSpeed = GetGameSpeed();
  bj_cineModePriorFogSetting = IsFogEnabled();
  bj_cineModePriorMaskSetting = IsFogMaskEnabled();
  lv_byZ = 0;
  do {
    if (lv_byZ >= bj_MAX_QUEUED_TRIGGERS) {
      break;
    }
    bj_queuedExecTriggers[lv_byZ] = null;
    bj_queuedExecUseConds[lv_byZ] = false;
    lv_byZ = lv_byZ + 1;
  } while (true);
  bj_isSinglePlayer = false;
  lv_bza = 0;
  lv_byZ = 0;
  do {
    if (lv_byZ >= 12) {
      break;
    }
    if (
      GetPlayerController(Player(lv_byZ)) == MAP_CONTROL_USER &&
      GetPlayerSlotState(Player(lv_byZ)) == PLAYER_SLOT_STATE_PLAYING
    ) {
      lv_bza = lv_bza + 1;
    }
    lv_byZ = lv_byZ + 1;
  } while (true);
  bj_isSinglePlayer = lv_bza == 1;
  bj_rescueSound = CreateSoundFromLabel(
    "Rescue",
    false,
    false,
    false,
    10000,
    10000
  );
  bj_questDiscoveredSound = CreateSoundFromLabel(
    "QuestNew",
    false,
    false,
    false,
    10000,
    10000
  );
  bj_questUpdatedSound = CreateSoundFromLabel(
    "QuestUpdate",
    false,
    false,
    false,
    10000,
    10000
  );
  bj_questCompletedSound = CreateSoundFromLabel(
    "QuestCompleted",
    false,
    false,
    false,
    10000,
    10000
  );
  bj_questFailedSound = CreateSoundFromLabel(
    "QuestFailed",
    false,
    false,
    false,
    10000,
    10000
  );
  bj_questHintSound = CreateSoundFromLabel(
    "Hint",
    false,
    false,
    false,
    10000,
    10000
  );
  bj_questSecretSound = CreateSoundFromLabel(
    "SecretFound",
    false,
    false,
    false,
    10000,
    10000
  );
  bj_questItemAcquiredSound = CreateSoundFromLabel(
    "ItemReward",
    false,
    false,
    false,
    10000,
    10000
  );
  bj_questWarningSound = CreateSoundFromLabel(
    "Warning",
    false,
    false,
    false,
    10000,
    10000
  );
  bj_victoryDialogSound = CreateSoundFromLabel(
    "QuestCompleted",
    false,
    false,
    false,
    10000,
    10000
  );
  bj_defeatDialogSound = CreateSoundFromLabel(
    "QuestFailed",
    false,
    false,
    false,
    10000,
    10000
  );
  DelayedSuspendDecayCreate();
  lv_bzb = VersionGet();
  if (lv_bzb == VERSION_REIGN_OF_CHAOS) {
    bj_MELEE_MAX_TWINKED_HEROES = bj_MELEE_MAX_TWINKED_HEROES_V0;
  } else {
    bj_MELEE_MAX_TWINKED_HEROES = bj_MELEE_MAX_TWINKED_HEROES_V1;
  }
  InitQueuedTriggers();
  InitRescuableBehaviorBJ();
  InitDNCSounds();
  InitMapRects();
  InitSummonableCaps();
  lv_bzc = 0;
  do {
    bj_stockAllowedPermanent[lv_bzc] = false;
    bj_stockAllowedCharged[lv_bzc] = false;
    bj_stockAllowedArtifact[lv_bzc] = false;
    lv_bzc = lv_bzc + 1;
    if (lv_bzc > 10) {
      break;
    }
  } while (true);
  SetAllItemTypeSlots(11);
  SetAllUnitTypeSlots(11);
  bj_stockUpdateTimer = CreateTimer();
  TimerStart(bj_stockUpdateTimer, bj_STOCK_RESTOCK_INITIAL_DELAY, false, f_aCo);
  bj_stockItemPurchased = CreateTrigger();
  TriggerRegisterPlayerUnitEvent(
    bj_stockItemPurchased,
    Player(PLAYER_NEUTRAL_PASSIVE),
    EVENT_PLAYER_UNIT_SELL_ITEM,
    null
  );
  TriggerAddAction(bj_stockItemPurchased, RemovePurchasedItem);
  DetectGameStarted();
  ExecuteFunc("f_bze");
  ExecuteFunc("f_aIG");
  ExecuteFunc("f_aJd");
  ExecuteFunc("f_aJi");
  ExecuteFunc("f_aJm");
  ExecuteFunc("f_aJG");
  ExecuteFunc("f_aJH");
  ExecuteFunc("f_aMe");
  ExecuteFunc("f_aNb");
  ExecuteFunc("f_aNr");
  ExecuteFunc("f_aNN");
  ExecuteFunc("f_aOy");
  ExecuteFunc("f_aPB");
  lv_byY = 0;
  lv_byY = 0;
  do {
    if (lv_byY > 1) {
      break;
    }
    gv_acR[lv_byY] = 0;
    lv_byY = lv_byY + 1;
  } while (true);
  gv_agk = CreateTrigger();
  TriggerAddAction(gv_agk, f_aQk);
  gv_agl = CreateTrigger();
  DisableTrigger(gv_agl);
  TriggerAddAction(gv_agl, f_aQs);
  gv_agm = CreateTrigger();
  TriggerRegisterTimerEventSingle(gv_agm, 0.05);
  TriggerAddAction(gv_agm, f_aQu);
  gv_agn = CreateTrigger();
  TriggerRegisterAnyUnitEventBJ(gv_agn, EVENT_PLAYER_UNIT_SELECTED);
  TriggerAddCondition(gv_agn, Condition(f_aQC));
  TriggerAddAction(gv_agn, f_aQw);
  gv_ago = CreateTrigger();
  TriggerAddCondition(gv_ago, Condition(f_aQL));
  TriggerAddAction(gv_ago, f_aQH);
  gv_agp = CreateTrigger();
  TriggerRegisterTimerEventSingle(gv_agp, 0.2);
  TriggerAddAction(gv_agp, f_aQN);
  gv_agq = CreateTrigger();
  TriggerRegisterTimerEventSingle(gv_agq, 0.3);
  TriggerAddAction(gv_agq, f_aQP);
  gv_agr = CreateTrigger();
  TriggerRegisterTimerEventSingle(gv_agr, 120);
  TriggerAddAction(gv_agr, f_aQR);
  gv_ags = CreateTrigger();
  TriggerRegisterAnyUnitEventBJ(gv_ags, EVENT_PLAYER_UNIT_PICKUP_ITEM);
  TriggerAddAction(gv_ags, f_aQS);
  gv_agt = CreateTrigger();
  TriggerRegisterTimerEventPeriodic(gv_agt, 20);
  TriggerAddAction(gv_agt, f_aRb);
  PauseUnit(gv_akt, true);
  gv_agu = CreateTrigger();
  TriggerRegisterUnitEvent(gv_agu, gv_akB, EVENT_UNIT_SELECTED);
  TriggerAddAction(gv_agu, f_aRh);
  gv_agv = CreateTrigger();
  TriggerRegisterUnitEvent(gv_agv, gv_akr, EVENT_UNIT_SELECTED);
  TriggerAddAction(gv_agv, f_aRo);
  gv_abd = CreateTrigger();
  TriggerRegisterTimerEventPeriodic(gv_abd, 4);
  TriggerAddAction(gv_abd, f_azQ);
  gv_abj = CreateTrigger();
  TriggerRegisterTimerEventPeriodic(gv_abj, 0.5);
  TriggerAddAction(gv_abj, f_aAL);
  gv_abi = CreateTrigger();
  TriggerRegisterTimerEventPeriodic(gv_abi, 5);
  TriggerAddAction(gv_abi, f_aAB);
  gv_abe = CreateTrigger();
  lv_bzd = 0;
  do {
    if (lv_bzd > 7) {
      break;
    }
    TriggerRegisterPlayerChatEvent(gv_abe, Player(lv_bzd), "-", false);
    lv_bzd = lv_bzd + 1;
  } while (true);
  TriggerAddAction(gv_abe, f_aAw);
  gv_abf = CreateTrigger();
  TriggerRegisterTimerEvent(gv_abf, 4, false);
  TriggerAddAction(gv_abf, f_azt);
  gv_abg = CreateTrigger();
  TriggerRegisterAnyUnitEventBJ(gv_abg, EVENT_PLAYER_UNIT_SPELL_EFFECT);
  TriggerRegisterAnyUnitEventBJ(gv_abg, EVENT_PLAYER_HERO_SKILL);
  TriggerAddAction(gv_abg, f_azo);
  gv_abh = CreateTrigger();
  gv_abk = CreateTrigger();
  TriggerAddAction(gv_abk, f_aPl);
  TriggerRegisterPlayerUnitEvent(
    gv_abh,
    Player(11),
    EVENT_PLAYER_UNIT_DEATH,
    null
  );
  TriggerAddAction(gv_abh, f_btv);
  f_aBp();
  gv_agw = CreateTrigger();
  TriggerRegisterUnitEvent(gv_agw, gv_akS, EVENT_UNIT_SELECTED);
  TriggerAddAction(gv_agw, f_aRt);
  gv_agx = CreateTrigger();
  TriggerRegisterUnitEvent(gv_agx, gv_akV, EVENT_UNIT_SELECTED);
  TriggerAddAction(gv_agx, f_aRA);
  gv_agy = CreateTrigger();
  TriggerRegisterUnitEvent(gv_agy, gv_akP, EVENT_UNIT_SELECTED);
  TriggerAddAction(gv_agy, f_aRH);
  gv_agz = CreateTrigger();
  TriggerRegisterUnitEvent(gv_agz, gv_akW, EVENT_UNIT_SELECTED);
  TriggerAddAction(gv_agz, f_aRM);
  gv_agA = CreateTrigger();
  TriggerRegisterUnitEvent(gv_agA, gv_akX, EVENT_UNIT_SELECTED);
  TriggerAddAction(gv_agA, f_aRR);
  gv_agB = CreateTrigger();
  TriggerRegisterUnitEvent(gv_agB, gv_aku, EVENT_UNIT_SELECTED);
  TriggerAddAction(gv_agB, f_aRX);
  gv_agC = CreateTrigger();
  TriggerRegisterUnitEvent(gv_agC, gv_akw, EVENT_UNIT_SELECTED);
  TriggerAddAction(gv_agC, f_aSb);
  gv_agD = CreateTrigger();
  TriggerRegisterUnitEvent(gv_agD, gv_akC, EVENT_UNIT_SELECTED);
  TriggerAddAction(gv_agD, f_aSi);
  gv_agE = CreateTrigger();
  TriggerRegisterUnitEvent(gv_agE, gv_akD, EVENT_UNIT_SELECTED);
  TriggerAddAction(gv_agE, f_aSo);
  gv_agF = CreateTrigger();
  TriggerRegisterUnitEvent(gv_agF, gv_akQ, EVENT_UNIT_SELECTED);
  TriggerAddAction(gv_agF, f_aSt);
  gv_agG = CreateTrigger();
  TriggerRegisterUnitEvent(gv_agG, gv_akh, EVENT_UNIT_SELECTED);
  TriggerAddAction(gv_agG, f_aSB);
  gv_agH = CreateTrigger();
  TriggerRegisterUnitEvent(gv_agH, gv_akn, EVENT_UNIT_SELECTED);
  TriggerAddAction(gv_agH, f_aSH);
  gv_agI = CreateTrigger();
  TriggerRegisterUnitEvent(gv_agI, gv_akU, EVENT_UNIT_SELECTED);
  TriggerAddAction(gv_agI, f_aSM);
  gv_agJ = CreateTrigger();
  TriggerRegisterUnitEvent(gv_agJ, gv_akR, EVENT_UNIT_SELECTED);
  TriggerAddAction(gv_agJ, f_aST);
  gv_agK = CreateTrigger();
  TriggerRegisterUnitEvent(gv_agK, gv_akq, EVENT_UNIT_SELECTED);
  TriggerAddAction(gv_agK, f_aSX);
  gv_agL = CreateTrigger();
  TriggerAddAction(gv_agL, f_aTd);
  gv_agM = CreateTrigger();
  TriggerRegisterEnterRectSimple(gv_agM, gv_afe);
  TriggerAddAction(gv_agM, f_aTe);
  gv_agN = CreateTrigger();
  TriggerRegisterEnterRectSimple(gv_agN, gv_aff);
  TriggerAddAction(gv_agN, f_aTh);
  gv_agO = CreateTrigger();
  TriggerRegisterEnterRectSimple(gv_agO, gv_afg);
  TriggerAddAction(gv_agO, f_aTk);
  gv_agP = CreateTrigger();
  TriggerRegisterEnterRectSimple(gv_agP, gv_afd);
  TriggerAddAction(gv_agP, f_aTn);
  gv_agQ = CreateTrigger();
  TriggerRegisterEnterRectSimple(gv_agQ, gv_aes);
  TriggerAddAction(gv_agQ, f_aTp);
  gv_agR = CreateTrigger();
  TriggerRegisterEnterRectSimple(gv_agR, gv_afE);
  TriggerAddAction(gv_agR, f_aTq);
  gv_agS = CreateTrigger();
  TriggerRegisterEnterRectSimple(gv_agS, gv_afF);
  TriggerAddAction(gv_agS, f_aTr);
  gv_agT = CreateTrigger();
  TriggerRegisterEnterRectSimple(gv_agT, gv_afG);
  TriggerAddAction(gv_agT, f_aTs);
  gv_agU = CreateTrigger();
  TriggerRegisterEnterRectSimple(gv_agU, gv_aer);
  TriggerAddAction(gv_agU, f_aTt);
  gv_agV = CreateTrigger();
  DisableTrigger(gv_agV);
  TriggerAddAction(gv_agV, f_aTv);
  gv_agW = CreateTrigger();
  DisableTrigger(gv_agW);
  TriggerAddAction(gv_agW, f_aRa);
  lv_bzd = 0;
  gv_agX = CreateTrigger();
  do {
    if (lv_bzd > 7) {
      break;
    }
    TriggerRegisterPlayerUnitEvent(
      gv_agX,
      Player(lv_bzd),
      EVENT_PLAYER_UNIT_SELECTED,
      null
    );
    lv_bzd = lv_bzd + 1;
  } while (true);
  TriggerAddAction(gv_agX, f_aTD);
  lv_bzd = 0;
  gv_agY = CreateTrigger();
  do {
    if (lv_bzd > 7) {
      break;
    }
    TriggerRegisterPlayerUnitEventSimple(
      gv_agY,
      Player(lv_bzd),
      EVENT_PLAYER_UNIT_DEATH
    );
    lv_bzd = lv_bzd + 1;
  } while (true);
  TriggerAddAction(gv_agY, f_aUa);
  gv_alx[240] = 0;
  gv_alx[241] = 0;
  gv_alx[242] = 0;
  gv_alx[243] = 0;
  gv_alx[244] = 0;
  gv_alx[245] = 0;
  gv_alx[246] = 0;
  gv_alx[247] = 0;
  f_aUp();
  f_aUt();
  f_aUE();
  f_aUO();
  f_aUY();
  gv_agZ = CreateTrigger();
  TriggerRegisterTimerEventPeriodic(gv_agZ, 0.99);
  TriggerAddAction(gv_agZ, f_aVa);
  lv_bzd = 0;
  gv_aha = CreateTrigger();
  do {
    if (lv_bzd > 7) {
      break;
    }
    TriggerRegisterPlayerEventEndCinematic(gv_aha, Player(lv_bzd));
    lv_bzd = lv_bzd + 1;
  } while (true);
  TriggerAddAction(gv_aha, f_aVg);
  lv_bzd = 0;
  gv_ahb = CreateTrigger();
  do {
    if (lv_bzd > 7) {
      break;
    }
    TriggerRegisterPlayerEventLeave(gv_ahb, Player(lv_bzd));
    lv_bzd = lv_bzd + 1;
  } while (true);
  TriggerAddAction(gv_ahb, f_aVl);
  f_aVH();
  gv_ahd = CreateTrigger();
  TriggerRegisterAnyUnitEventBJ(gv_ahd, EVENT_PLAYER_UNIT_SPELL_EFFECT);
  TriggerAddCondition(gv_ahd, Condition(f_aVJ));
  TriggerAddAction(gv_ahd, f_aVL);
  gv_alu[1036] = 250;
  gv_alu[1037] = 370;
  gv_alu[1038] = 520;
  gv_alu[1039] = 680;
  gv_alu[1040] = 900;
  gv_alu[1041] = 1200;
  gv_ahe = CreateTrigger();
  TriggerRegisterAnyUnitEventBJ(gv_ahe, EVENT_PLAYER_UNIT_SPELL_EFFECT);
  TriggerAddCondition(gv_ahe, Condition(f_aVZ));
  TriggerAddAction(gv_ahe, f_aWa);
  gv_amb = f_aDg();
  gv_ame = CreateGroup();
  f_aIU(Condition(f_aVX));
  gv_alu[1042] = 250;
  gv_alu[1043] = 500;
  gv_alu[1044] = 800;
  gv_alu[1045] = 1150;
  gv_alu[1046] = 1500;
  gv_alu[1047] = 1900;
  gv_amc = f_aIn(255, 27, 221, 237);
  gv_amd = f_aIn(255, 255, 255, 255);
  gv_ahf = CreateTrigger();
  TriggerRegisterAnyUnitEventBJ(gv_ahf, EVENT_PLAYER_UNIT_SPELL_EFFECT);
  TriggerAddCondition(gv_ahf, Condition(f_aWi));
  TriggerAddAction(gv_ahf, f_aWj);
  f_aMb("A072");
  gv_alu[1024] = 60;
  gv_alu[1025] = 100;
  gv_alu[1026] = 180;
  gv_alu[1027] = 300;
  gv_alu[1028] = 530;
  gv_alu[1029] = 900;
  gv_ahg = CreateTrigger();
  TriggerRegisterAnyUnitEventBJ(gv_ahg, EVENT_PLAYER_UNIT_SPELL_EFFECT);
  TriggerAddCondition(gv_ahg, Condition(f_aWD));
  f_aMb("A04I");
  gv_alu[1108] = 60;
  gv_alu[1109] = 85;
  gv_alu[1110] = 120;
  gv_alu[1111] = 190;
  gv_alu[1112] = 290;
  gv_alu[1113] = 480;
  gv_ahh = CreateTrigger();
  TriggerRegisterAnyUnitEventBJ(gv_ahh, EVENT_PLAYER_UNIT_SPELL_EFFECT);
  TriggerAddCondition(gv_ahh, Condition(f_aWU));
  TriggerAddAction(gv_ahh, f_aWV);
  f_aMb("A04F");
  f_aMb("A096");
  f_aIU(Condition(f_aWP));
  gv_ahi = CreateTrigger();
  TriggerRegisterAnyUnitEventBJ(gv_ahi, EVENT_PLAYER_UNIT_SPELL_ENDCAST);
  TriggerAddCondition(gv_ahi, Condition(f_aXg));
  TriggerAddAction(gv_ahi, f_aXc);
  f_aMb("A04W");
  f_aMb("A097");
  gv_amf = CreateGroup();
  gv_ahj = CreateTrigger();
  TriggerRegisterAnyUnitEventBJ(gv_ahj, EVENT_PLAYER_UNIT_ISSUED_ORDER);
  TriggerAddCondition(gv_ahj, Condition(f_aXu));
  TriggerAddAction(gv_ahj, f_aXv);
  f_aMb("A04O");
  f_aMN("A04O");
  f_aMb("A04P");
  f_aMN("A04P");
  gv_ami = false;
  f_aIU(Condition(f_aXx));
  gv_alu[1090] = 0.2;
  gv_alu[1091] = 0.25;
  gv_alu[1092] = 0.3;
  gv_alu[1093] = 0.35;
  gv_alu[1094] = 0.4;
  gv_alu[1095] = 0.45;
  gv_ahk = CreateTrigger();
  TriggerRegisterAnyUnitEventBJ(gv_ahk, EVENT_PLAYER_UNIT_SPELL_EFFECT);
  TriggerAddCondition(gv_ahk, Condition(f_aXM));
  TriggerAddAction(gv_ahk, f_aXN);
  f_aMb("A04L");
  gv_alu[1078] = 65;
  gv_alu[1079] = 100;
  gv_alu[1080] = 155;
  gv_alu[1081] = 260;
  gv_alu[1082] = 450;
  gv_alu[1083] = 830;
  gv_ahl = CreateTrigger();
  TriggerRegisterAnyUnitEventBJ(gv_ahl, EVENT_PLAYER_UNIT_ISSUED_ORDER);
  TriggerAddCondition(gv_ahl, Condition(f_aYb));
  TriggerAddAction(gv_ahl, f_aYd);
  gv_ahm = CreateTrigger();
  TriggerRegisterAnyUnitEventBJ(gv_ahm, EVENT_PLAYER_UNIT_SPELL_EFFECT);
  TriggerAddCondition(gv_ahm, Condition(f_aXV));
  TriggerAddAction(gv_ahm, f_aXW);
  gv_alu[1301] = 0.15;
  gv_alu[1302] = 0.2;
  gv_alu[1303] = 0.27;
  gv_alu[1304] = 0.36;
  gv_alu[1305] = 0.47;
  gv_alu[1306] = 0.6;
  gv_alu[1307] = 3;
  gv_alu[1308] = 7;
  gv_alu[1309] = 12;
  gv_alu[1310] = 18;
  gv_alu[1311] = 26;
  gv_alu[1312] = 35;
  gv_ahn = CreateTrigger();
  TriggerRegisterAnyUnitEventBJ(gv_ahn, EVENT_PLAYER_UNIT_ATTACKED);
  TriggerAddCondition(gv_ahn, Condition(f_aYf));
  TriggerAddAction(gv_ahn, f_aYi);
  gv_alu[1084] = 50;
  gv_alu[1085] = 70;
  gv_alu[1086] = 105;
  gv_alu[1087] = 160;
  gv_alu[1088] = 250;
  gv_alu[1089] = 415;
  gv_aho = CreateTrigger();
  TriggerRegisterAnyUnitEventBJ(gv_aho, EVENT_PLAYER_UNIT_SPELL_EFFECT);
  TriggerAddCondition(gv_aho, Condition(f_aYA));
  f_aMb("A04T");
  f_aMb("A04S");
  gv_alu[1072] = 105;
  gv_alu[1073] = 145;
  gv_alu[1074] = 205;
  gv_alu[1075] = 300;
  gv_alu[1076] = 445;
  gv_alu[1077] = 685;
  gv_ahp = CreateTrigger();
  TriggerRegisterAnyUnitEventBJ(gv_ahp, EVENT_PLAYER_UNIT_SPELL_EFFECT);
  TriggerAddCondition(gv_ahp, Condition(f_aYF));
  TriggerAddAction(gv_ahp, f_aYG);
  f_aIU(Condition(f_aYJ));
  f_aMb("A05H");
  f_aMb("A07B");
  gv_ahq = CreateTrigger();
  TriggerRegisterAnyUnitEventBJ(gv_ahq, EVENT_PLAYER_UNIT_SPELL_EFFECT);
  TriggerAddCondition(gv_ahq, Condition(f_aZa));
  TriggerAddAction(gv_ahq, f_aZb);
  f_aMb("A05P");
  gv_alu[1210] = 35;
  gv_alu[1211] = 85;
  gv_alu[1212] = 155;
  gv_alu[1213] = 245;
  gv_alu[1214] = 355;
  gv_alu[1215] = 485;
  gv_ahr = CreateTrigger();
  TriggerRegisterAnyUnitEventBJ(gv_ahr, EVENT_PLAYER_UNIT_SPELL_EFFECT);
  TriggerAddCondition(gv_ahr, Condition(f_aZg));
  TriggerAddAction(gv_ahr, f_aZh);
  gv_alu[1204] = 150;
  gv_alu[1205] = 225;
  gv_alu[1206] = 345;
  gv_alu[1207] = 550;
  gv_alu[1208] = 915;
  gv_alu[1209] = 1575;
  f_aIU(Condition(f_aZo));
  gv_alu[1114] = 0.4;
  gv_alu[1115] = 0.35;
  gv_alu[1116] = 0.3;
  gv_alu[1117] = 0.25;
  gv_alu[1118] = 0.2;
  gv_alu[1119] = 0.15;
  f_aIU(Condition(f_aZy));
  f_aMb("A04M");
  f_aMb("A04X");
  gv_ahs = CreateTrigger();
  TriggerRegisterAnyUnitEventBJ(gv_ahs, EVENT_PLAYER_UNIT_SPELL_EFFECT);
  TriggerAddCondition(gv_ahs, Condition(f_aZE));
  TriggerAddAction(gv_ahs, f_aZG);
  gv_alu[1000] = 100;
  gv_alu[1001] = 160;
  gv_alu[1002] = 240;
  gv_alu[1003] = 360;
  gv_alu[1004] = 540;
  gv_alu[1005] = 800;
  gv_aht = CreateTrigger();
  TriggerRegisterAnyUnitEventBJ(gv_aht, EVENT_PLAYER_UNIT_SPELL_EFFECT);
  TriggerAddCondition(gv_aht, Condition(f_aZZ));
  gv_alu[1006] = 120;
  gv_alu[1007] = 180;
  gv_alu[1008] = 270;
  gv_alu[1009] = 400;
  gv_alu[1010] = 600;
  gv_alu[1011] = 900;
  gv_ahu = CreateTrigger();
  TriggerRegisterAnyUnitEventBJ(gv_ahu, EVENT_PLAYER_UNIT_SPELL_EFFECT);
  TriggerAddCondition(gv_ahu, Condition(f_bag));
  TriggerAddAction(gv_ahu, f_bah);
  f_aIU(Condition(f_bam));
  f_aMb("A05W");
  f_aMb("A062");
  gv_aml = f_aDg();
  gv_amk = CreateGroup();
  gv_alu[1126] = 50;
  gv_alu[1127] = 100;
  gv_alu[1128] = 180;
  gv_alu[1129] = 275;
  gv_alu[1130] = 350;
  gv_alu[1131] = 440;
  gv_ahv = CreateTrigger();
  TriggerRegisterAnyUnitEventBJ(gv_ahv, EVENT_PLAYER_UNIT_SPELL_EFFECT);
  TriggerAddCondition(gv_ahv, Condition(f_bar));
  TriggerAddAction(gv_ahv, f_bas);
  gv_amm = f_aDg();
  gv_amn = CreateGroup();
  gv_alu[1150] = 150;
  gv_alu[1151] = 225;
  gv_alu[1152] = 450;
  gv_alu[1153] = 570;
  gv_alu[1154] = 780;
  gv_alu[1155] = 1100;
  gv_ahw = CreateTrigger();
  TriggerRegisterAnyUnitEventBJ(gv_ahw, EVENT_PLAYER_UNIT_SPELL_EFFECT);
  TriggerAddCondition(gv_ahw, Condition(f_baF));
  TriggerAddAction(gv_ahw, f_baG);
  f_aMb("A06B");
  gv_amo = CreateGroup();
  gv_amp = f_aDg();
  gv_alu[1138] = 110;
  gv_alu[1139] = 180;
  gv_alu[1140] = 300;
  gv_alu[1141] = 480;
  gv_alu[1142] = 750;
  gv_alu[1143] = 1150;
  gv_ahx = CreateTrigger();
  TriggerRegisterAnyUnitEventBJ(gv_ahx, EVENT_PLAYER_UNIT_SPELL_EFFECT);
  TriggerAddCondition(gv_ahx, Condition(f_baQ));
  TriggerAddAction(gv_ahx, f_bba);
  f_aMb("A061");
  gv_alu[1132] = 140;
  gv_alu[1133] = 200;
  gv_alu[1134] = 290;
  gv_alu[1135] = 400;
  gv_alu[1136] = 600;
  gv_alu[1137] = 900;
  gv_ahy = CreateTrigger();
  TriggerRegisterAnyUnitEventBJ(gv_ahy, EVENT_PLAYER_UNIT_SPELL_EFFECT);
  TriggerAddCondition(gv_ahy, Condition(f_bbh));
  TriggerAddAction(gv_ahy, f_bbi);
  gv_amq = CreateGroup();
  gv_alu[1144] = 80;
  gv_alu[1145] = 160;
  gv_alu[1146] = 240;
  gv_alu[1147] = 320;
  gv_alu[1148] = 400;
  gv_alu[1149] = 500;
  gv_ahz = CreateTrigger();
  TriggerRegisterAnyUnitEventBJ(gv_ahz, EVENT_PLAYER_UNIT_SPELL_EFFECT);
  TriggerAddCondition(gv_ahz, Condition(f_bbs));
  TriggerAddAction(gv_ahz, f_bbt);
  f_aIU(Condition(f_bbq));
  f_aMb("A06H");
  f_aMb("A06J");
  gv_ams = f_aDg();
  gv_amr = CreateGroup();
  gv_ahA = CreateTrigger();
  TriggerRegisterAnyUnitEventBJ(gv_ahA, EVENT_PLAYER_UNIT_SPELL_EFFECT);
  TriggerAddCondition(gv_ahA, Condition(f_bbI));
  TriggerAddAction(gv_ahA, f_bbP);
  f_aMb("A05G");
  gv_alu[1162] = 140;
  gv_alu[1163] = 220;
  gv_alu[1164] = 310;
  gv_alu[1165] = 430;
  gv_alu[1166] = 560;
  gv_alu[1167] = 710;
  gv_ahB = CreateTrigger();
  TriggerRegisterAnyUnitEventBJ(gv_ahB, EVENT_PLAYER_UNIT_SPELL_EFFECT);
  TriggerAddCondition(gv_ahB, Condition(f_bca));
  TriggerAddAction(gv_ahB, f_bcb);
  gv_alu[1168] = 85;
  gv_alu[1169] = 125;
  gv_alu[1170] = 175;
  gv_alu[1171] = 270;
  gv_alu[1172] = 425;
  gv_alu[1173] = 685;
  gv_ahC = CreateTrigger();
  TriggerRegisterAnyUnitEventBJ(gv_ahC, EVENT_PLAYER_UNIT_SPELL_EFFECT);
  TriggerAddCondition(gv_ahC, Condition(f_bcq));
  TriggerAddAction(gv_ahC, f_bcr);
  f_aMb("A04Y");
  gv_alu[1156] = 165;
  gv_alu[1157] = 215;
  gv_alu[1158] = 275;
  gv_alu[1159] = 470;
  gv_alu[1160] = 500;
  gv_alu[1161] = 675;
  gv_ahD = CreateTrigger();
  TriggerRegisterAnyUnitEventBJ(gv_ahD, EVENT_PLAYER_UNIT_SPELL_EFFECT);
  TriggerAddCondition(gv_ahD, Condition(f_bcE));
  TriggerAddAction(gv_ahD, f_bcF);
  gv_alu[1174] = 150;
  gv_alu[1175] = 170;
  gv_alu[1176] = 200;
  gv_alu[1177] = 250;
  gv_alu[1178] = 325;
  gv_alu[1179] = 450;
  gv_ahE = CreateTrigger();
  TriggerRegisterAnyUnitEventBJ(gv_ahE, EVENT_PLAYER_UNIT_SPELL_EFFECT);
  TriggerAddCondition(gv_ahE, Condition(f_bcJ));
  TriggerAddAction(gv_ahE, f_bcK);
  gv_ahE = CreateTrigger();
  TriggerRegisterAnyUnitEventBJ(gv_ahE, EVENT_PLAYER_UNIT_ISSUED_TARGET_ORDER);
  TriggerAddCondition(gv_ahE, Condition(f_bcP));
  gv_alu[1180] = 135;
  gv_alu[1181] = 250;
  gv_alu[1182] = 325;
  gv_alu[1183] = 475;
  gv_alu[1184] = 700;
  gv_alu[1185] = 1100;
  gv_ahF = CreateTrigger();
  TriggerRegisterAnyUnitEventBJ(gv_ahF, EVENT_PLAYER_UNIT_SPELL_EFFECT);
  TriggerAddCondition(gv_ahF, Condition(f_bcW));
  TriggerAddAction(gv_ahF, f_bcX);
  f_aMb("A05F");
  gv_alu[1192] = 50;
  gv_alu[1193] = 85;
  gv_alu[1194] = 110;
  gv_alu[1195] = 200;
  gv_alu[1196] = 300;
  gv_alu[1197] = 525;
  gv_ahG = CreateTrigger();
  TriggerRegisterAnyUnitEventBJ(gv_ahG, EVENT_PLAYER_UNIT_SPELL_EFFECT);
  TriggerAddCondition(gv_ahG, Condition(f_bdu));
  f_aMb("A04B");
  f_aMb("A06U");
  f_aMN("A06U");
  gv_ahG = CreateTrigger();
  TriggerRegisterAnyUnitEventBJ(gv_ahE, EVENT_PLAYER_UNIT_ISSUED_POINT_ORDER);
  TriggerAddCondition(gv_ahE, Condition(f_bdy));
  gv_ahH = CreateTrigger();
  TriggerRegisterAnyUnitEventBJ(gv_ahH, EVENT_PLAYER_UNIT_SPELL_EFFECT);
  TriggerAddCondition(gv_ahH, Condition(f_bdD));
  TriggerAddAction(gv_ahH, f_bdE);
  gv_ahH = CreateTrigger();
  TriggerRegisterAnyUnitEventBJ(gv_ahE, EVENT_PLAYER_UNIT_ISSUED_TARGET_ORDER);
  TriggerAddCondition(gv_ahE, Condition(f_bdI));
  gv_alu[1223] = 0.1;
  gv_alu[1224] = 0.14;
  gv_alu[1225] = 0.18;
  gv_alu[1226] = 0.22;
  gv_alu[1227] = 0.26;
  gv_alu[1228] = 0.3;
  gv_ahI = CreateTrigger();
  TriggerRegisterAnyUnitEventBJ(gv_ahI, EVENT_PLAYER_UNIT_SPELL_EFFECT);
  TriggerAddCondition(gv_ahI, Condition(f_bdM));
  TriggerAddAction(gv_ahI, f_bdN);
  gv_alu[1216] = 60;
  gv_alu[1217] = 100;
  gv_alu[1218] = 140;
  gv_alu[1219] = 180;
  gv_alu[1220] = 220;
  gv_alu[1221] = 260;
  gv_ahJ = CreateTrigger();
  TriggerRegisterAnyUnitEventBJ(gv_ahJ, EVENT_PLAYER_UNIT_SPELL_EFFECT);
  TriggerAddCondition(gv_ahJ, Condition(f_bdT));
  TriggerAddAction(gv_ahJ, f_bdU);
  gv_ahK = CreateTrigger();
  TriggerRegisterAnyUnitEventBJ(gv_ahK, EVENT_PLAYER_UNIT_SPELL_EFFECT);
  TriggerAddCondition(gv_ahK, Condition(f_beb));
  TriggerAddAction(gv_ahK, f_bec);
  f_aMb("A06A");
  gv_amt = f_aDg();
  gv_amu = CreateGroup();
  gv_ahL = CreateTrigger();
  TriggerRegisterAnyUnitEventBJ(gv_ahL, EVENT_PLAYER_UNIT_SPELL_EFFECT);
  TriggerAddCondition(gv_ahL, Condition(f_bem));
  TriggerAddAction(gv_ahL, f_ben);
  gv_alu[1102] = 120;
  gv_alu[1103] = 175;
  gv_alu[1104] = 250;
  gv_alu[1105] = 375;
  gv_alu[1106] = 520;
  gv_alu[1107] = 790;
  gv_ahM = CreateTrigger();
  TriggerRegisterAnyUnitEventBJ(gv_ahM, EVENT_PLAYER_UNIT_SPELL_EFFECT);
  TriggerAddCondition(gv_ahM, Condition(f_bey));
  TriggerAddAction(gv_ahM, f_bez);
  f_aIU(Condition(f_bex));
  gv_alu[1096] = 125;
  gv_alu[1097] = 165;
  gv_alu[1098] = 205;
  gv_alu[1099] = 270;
  gv_alu[1100] = 350;
  gv_alu[1101] = 475;
  gv_ahN = CreateTrigger();
  TriggerRegisterAnyUnitEventBJ(gv_ahN, EVENT_PLAYER_UNIT_SPELL_EFFECT);
  TriggerAddCondition(gv_ahN, Condition(f_beE));
  TriggerAddAction(gv_ahN, f_beF);
  gv_alu[1060] = 200;
  gv_alu[1061] = 325;
  gv_alu[1062] = 415;
  gv_alu[1063] = 545;
  gv_alu[1064] = 725;
  gv_alu[1065] = 975;
  f_aIU(Condition(f_beH));
  gv_alu[1048] = 0.22;
  gv_alu[1049] = 0.25;
  gv_alu[1050] = 0.3;
  gv_alu[1051] = 0.35;
  gv_alu[1052] = 0.4;
  gv_alu[1053] = 0.45;
  gv_ahO = CreateTrigger();
  TriggerRegisterAnyUnitEventBJ(gv_ahO, EVENT_PLAYER_UNIT_SPELL_EFFECT);
  TriggerAddCondition(gv_ahO, Condition(f_beL));
  TriggerAddAction(gv_ahO, f_beP);
  f_aMb("A058");
  gv_alu[1066] = 150;
  gv_alu[1067] = 235;
  gv_alu[1068] = 385;
  gv_alu[1069] = 660;
  gv_alu[1070] = 1180;
  gv_alu[1071] = 2230;
  gv_ahP = CreateTrigger();
  TriggerRegisterAnyUnitEventBJ(gv_ahP, EVENT_PLAYER_UNIT_SPELL_EFFECT);
  TriggerAddCondition(gv_ahP, Condition(f_bfb));
  TriggerAddAction(gv_ahP, f_bfc);
  gv_auW = CreateGroup();
  gv_auX = f_aDg();
  f_aMb("A055");
  f_aIU(Condition(f_beU));
  f_bfn();
  f_aIU(Condition(f_bfp));
  gv_ahR = CreateTrigger();
  TriggerRegisterAnyUnitEventBJ(gv_ahR, EVENT_PLAYER_UNIT_SPELL_EFFECT);
  TriggerAddCondition(gv_ahR, Condition(f_bfv));
  TriggerAddAction(gv_ahR, f_bfy);
  f_aMb("A04K");
  f_aMb("A05T");
  f_aMN("A05T");
  gv_ahS = CreateTrigger();
  TriggerRegisterAnyUnitEventBJ(gv_ahS, EVENT_PLAYER_UNIT_SPELL_EFFECT);
  TriggerAddCondition(gv_ahS, Condition(f_bfY));
  gv_alu[1120] = 130;
  gv_alu[1121] = 195;
  gv_alu[1122] = 270;
  gv_alu[1123] = 420;
  gv_alu[1124] = 660;
  gv_alu[1125] = 1050;
  f_aIU(Condition(f_bgc));
  gv_ahT = CreateTrigger();
  TriggerRegisterAnyUnitEventBJ(gv_ahT, EVENT_PLAYER_UNIT_SPELL_EFFECT);
  TriggerAddCondition(gv_ahT, Condition(f_bgu));
  gv_alu[1012] = 80;
  gv_alu[1013] = 140;
  gv_alu[1014] = 220;
  gv_alu[1015] = 330;
  gv_alu[1016] = 450;
  gv_alu[1017] = 650;
  gv_ahU = CreateTrigger();
  TriggerRegisterAnyUnitEventBJ(gv_ahU, EVENT_PLAYER_UNIT_SPELL_EFFECT);
  TriggerAddCondition(gv_ahU, Condition(f_bgE));
  TriggerAddAction(gv_ahU, f_bgF);
  gv_alu[1018] = 130;
  gv_alu[1019] = 200;
  gv_alu[1020] = 320;
  gv_alu[1021] = 500;
  gv_alu[1022] = 700;
  gv_alu[1023] = 1000;
  gv_ahV = CreateTrigger();
  TriggerRegisterAnyUnitEventBJ(gv_ahV, EVENT_PLAYER_UNIT_SPELL_EFFECT);
  TriggerAddCondition(gv_ahV, Condition(f_bgQ));
  TriggerAddAction(gv_ahV, f_bgR);
  f_aMb("A04G");
  f_aMN("A04G");
  f_aMN("A09N");
  gv_amx = CreateGroup();
  gv_amy = f_aDg();
  gv_ahW = CreateTrigger();
  TriggerRegisterAnyUnitEventBJ(gv_ahW, EVENT_PLAYER_UNIT_SPELL_EFFECT);
  TriggerAddAction(gv_ahW, f_bgX);
  gv_ahX = CreateTrigger();
  TriggerRegisterAnyUnitEventBJ(gv_ahX, EVENT_PLAYER_UNIT_SPELL_EFFECT);
  TriggerAddCondition(gv_ahX, Condition(f_bhg));
  TriggerAddAction(gv_ahX, f_bhh);
  f_aMb("A08C");
  gv_ahY = CreateTrigger();
  TriggerRegisterAnyUnitEventBJ(gv_ahY, EVENT_PLAYER_UNIT_SPELL_EFFECT);
  TriggerAddCondition(gv_ahY, Condition(f_bhn));
  TriggerAddAction(gv_ahY, f_bho);
  f_aMb("A08D");
  f_aIU(Condition(f_bhs));
  gv_ahZ = CreateTrigger();
  TriggerRegisterAnyUnitEventBJ(gv_ahZ, EVENT_PLAYER_UNIT_SPELL_EFFECT);
  TriggerAddCondition(gv_ahZ, Condition(f_bhx));
  TriggerAddAction(gv_ahZ, f_bhy);
  f_aMb("A07L");
  f_aMb("A06I");
  f_aMb("A08E");
  gv_aia = CreateTrigger();
  TriggerRegisterAnyUnitEventBJ(gv_aia, EVENT_PLAYER_UNIT_SPELL_EFFECT);
  TriggerAddCondition(gv_aia, Condition(f_bhC));
  TriggerAddAction(gv_aia, f_bhD);
  gv_aib = CreateTrigger();
  TriggerRegisterAnyUnitEventBJ(gv_aib, EVENT_PLAYER_UNIT_SPELL_EFFECT);
  TriggerAddCondition(gv_aib, Condition(f_bhG));
  TriggerAddAction(gv_aib, f_bhH);
  gv_aic = CreateTrigger();
  TriggerRegisterAnyUnitEventBJ(gv_aic, EVENT_PLAYER_UNIT_SPELL_EFFECT);
  TriggerAddCondition(gv_aic, Condition(f_bhO));
  TriggerAddAction(gv_aic, f_bhP);
  f_aMb("A07P");
  f_aMb("A07Q");
  f_aMb("A08F");
  f_aIU(Condition(f_bhT));
  gv_aid = CreateTrigger();
  TriggerRegisterAnyUnitEventBJ(gv_aid, EVENT_PLAYER_UNIT_SPELL_EFFECT);
  TriggerAddCondition(gv_aid, Condition(f_bhZ));
  TriggerAddAction(gv_aid, f_bia);
  gv_aie = CreateTrigger();
  TriggerRegisterEnterRectSimple(gv_aie, gv_adL);
  TriggerAddCondition(gv_aie, Condition(f_bie));
  TriggerAddAction(gv_aie, f_bif);
  gv_aif = CreateTrigger();
  TriggerRegisterEnterRectSimple(gv_aif, gv_adZ);
  TriggerAddCondition(gv_aif, Condition(f_big));
  TriggerAddAction(gv_aif, f_bih);
  gv_aig = CreateTrigger();
  DisableTrigger(gv_aig);
  TriggerRegisterEnterRectSimple(gv_aig, gv_afB);
  TriggerAddCondition(gv_aig, Condition(f_bii));
  TriggerAddAction(gv_aig, f_bij);
  gv_aih = CreateTrigger();
  TriggerRegisterEnterRectSimple(gv_aih, gv_aed);
  TriggerAddCondition(gv_aih, Condition(f_bik));
  TriggerAddAction(gv_aih, f_bil);
  gv_aii = CreateTrigger();
  TriggerRegisterEnterRectSimple(gv_aii, gv_adG);
  TriggerAddCondition(gv_aii, Condition(f_bim));
  TriggerAddAction(gv_aii, f_bin);
  gv_aij = CreateTrigger();
  TriggerRegisterEnterRectSimple(gv_aij, gv_adI);
  TriggerAddCondition(gv_aij, Condition(f_bio));
  TriggerAddAction(gv_aij, f_bip);
  gv_aik = CreateTrigger();
  TriggerRegisterUnitEvent(gv_aik, gv_akA, EVENT_UNIT_DEATH);
  TriggerRegisterUnitEvent(gv_aik, gv_akg, EVENT_UNIT_DEATH);
  TriggerRegisterUnitEvent(gv_aik, gv_ako, EVENT_UNIT_DEATH);
  TriggerAddCondition(gv_aik, Condition(f_bir));
  TriggerAddAction(gv_aik, f_bis);
  gv_ail = CreateTrigger();
  TriggerRegisterUnitEvent(gv_ail, gv_akA, EVENT_UNIT_DEATH);
  TriggerAddAction(gv_ail, f_bit);
  f_aIU(Condition(f_biu));
  f_aIU(Condition(f_biy));
  Preload(gv_amA);
  f_aIU(Condition(f_biA));
  Preload(gv_amB);
  f_aIU(Condition(f_biH));
  Preload(gv_amE);
  f_aIU(Condition(f_biJ));
  Preload(gv_amz);
  f_aIU(Condition(f_biO));
  Preload(gv_amG);
  f_aIU(Condition(f_biS));
  f_aIU(Condition(f_biV));
  f_aIU(Condition(f_biQ));
  Preload(gv_amH);
  f_aIU(Condition(f_biY));
  Preload(gv_amL);
  f_aIU(Condition(f_bjd));
  f_aIU(Condition(f_bjb));
  gv_aim = CreateTrigger();
  TriggerRegisterAnyUnitEventBJ(gv_aim, EVENT_PLAYER_UNIT_SPELL_EFFECT);
  TriggerAddAction(gv_aim, f_biC);
  Preload(gv_amC);
  gv_aim = CreateTrigger();
  TriggerRegisterAnyUnitEventBJ(gv_aim, EVENT_PLAYER_UNIT_ATTACKED);
  TriggerAddCondition(gv_aim, Condition(f_biF));
  Preload(gv_amD);
  gv_aim = CreateTrigger();
  TriggerRegisterAnyUnitEventBJ(gv_aim, EVENT_PLAYER_UNIT_ATTACKED);
  TriggerAddCondition(gv_aim, Condition(f_biL));
  Preload(gv_amJ);
  Preload(gv_amI);
  gv_amF = CreateUnit(Player(0), gv_acw, 0.0, 0.0, 0.0);
  UnitAddAbility(gv_amF, "A03Y");
  UnitAddAbility(gv_amF, "A05U");
  UnitAddAbility(gv_amF, "A06E");
  UnitAddAbility(gv_amF, "A073");
  gv_amK = CreateUnit(Player(0), gv_acw, 0.0, 0.0, 0.0);
  UnitAddAbility(gv_amK, "A05V");
  f_aMN("A08V");
  gv_ain = CreateTrigger();
  TriggerRegisterTimerEventPeriodic(gv_ain, 12);
  TriggerAddAction(gv_ain, f_bjf);
  f_bjq();
  f_aIU(Condition(f_bjz));
  Preload("Abilities\\Spells\\Other\\HowlOfTerror\\HowlCaster.mdl");
  f_aIU(Condition(f_bjF));
  gv_amO = CreateUnit(Player(0), "hpea", 0.0, 0.0, 0.0);
  UnitAddAbility(gv_amO, "A07Z");
  gv_aio = CreateTrigger();
  TriggerRegisterAnyUnitEventBJ(gv_aio, EVENT_PLAYER_UNIT_SPELL_EFFECT);
  TriggerAddCondition(gv_aio, Condition(f_bjK));
  TriggerAddAction(gv_aio, f_bjL);
  gv_alz[8] = CreateTimer();
  gv_alz[9] = CreateTimer();
  gv_alz[10] = CreateTimer();
  gv_alz[11] = CreateTimer();
  gv_alz[12] = CreateTimer();
  gv_alz[13] = CreateTimer();
  gv_alz[14] = CreateTimer();
  gv_alz[15] = CreateTimer();
  gv_alD[8] = CreateGroup();
  gv_aip = CreateTrigger();
  TriggerRegisterAnyUnitEventBJ(gv_aip, EVENT_PLAYER_UNIT_ISSUED_TARGET_ORDER);
  TriggerAddCondition(gv_aip, Condition(f_bjO));
  TriggerAddAction(gv_aip, f_bjP);
  f_bkt();
  gv_air = CreateTrigger();
  TriggerRegisterAnyUnitEventBJ(gv_air, EVENT_PLAYER_UNIT_DROP_ITEM);
  TriggerAddAction(gv_air, f_bkv);
  gv_ais = CreateTrigger();
  TriggerRegisterAnyUnitEventBJ(gv_ais, EVENT_PLAYER_UNIT_USE_ITEM);
  TriggerAddAction(gv_ais, f_bkC);
  lv_bzd = 0;
  gv_ait = CreateTrigger();
  do {
    if (lv_bzd > 7) {
      break;
    }
    TriggerRegisterPlayerKeyEventBJ(gv_ait, Player(lv_bzd), 0, 1);
    lv_bzd = lv_bzd + 1;
  } while (true);
  TriggerAddAction(gv_ait, f_bkL);
  lv_bzd = 0;
  gv_aiu = CreateTrigger();
  do {
    if (lv_bzd > 7) {
      break;
    }
    TriggerRegisterPlayerKeyEventBJ(gv_aiu, Player(lv_bzd), 0, 3);
    lv_bzd = lv_bzd + 1;
  } while (true);
  TriggerAddAction(gv_aiu, f_bkP);
  gv_aiv = CreateTrigger();
  TriggerRegisterAnyUnitEventBJ(gv_aiv, EVENT_PLAYER_UNIT_PICKUP_ITEM);
  TriggerAddAction(gv_aiv, f_bkT);
  gv_aiw = CreateTrigger();
  TriggerRegisterAnyUnitEventBJ(gv_aiw, EVENT_PLAYER_UNIT_PICKUP_ITEM);
  TriggerAddAction(gv_aiw, f_blB);
  gv_aix = CreateTrigger();
  TriggerRegisterAnyUnitEventBJ(gv_aix, EVENT_PLAYER_UNIT_SELL_ITEM);
  TriggerAddAction(gv_aix, f_blM);
  gv_aiy = CreateTrigger();
  TriggerRegisterEnterRectSimple(gv_aiy, gv_acU);
  TriggerRegisterEnterRectSimple(gv_aiy, gv_afr);
  TriggerRegisterEnterRectSimple(gv_aiy, gv_afD);
  TriggerRegisterEnterRectSimple(gv_aiy, gv_aeC);
  TriggerRegisterEnterRectSimple(gv_aiy, gv_aeQ);
  TriggerRegisterEnterRectSimple(gv_aiy, gv_afq);
  TriggerRegisterEnterRectSimple(gv_aiy, gv_aea);
  TriggerRegisterEnterRectSimple(gv_aiy, gv_adD);
  TriggerRegisterEnterRectSimple(gv_aiy, gv_aeq);
  TriggerRegisterEnterRectSimple(gv_aiy, gv_aeP);
  TriggerAddCondition(gv_aiy, Condition(f_blN));
  TriggerAddAction(gv_aiy, f_blQ);
  f_blV();
  f_bmd();
  gv_aiz = CreateTrigger();
  DisableTrigger(gv_aiz);
  TriggerRegisterTimerEvent(gv_aiz, 18, true);
  TriggerAddAction(gv_aiz, f_bmb);
  f_bmt();
  gv_aiA = CreateTrigger();
  DisableTrigger(gv_aiA);
  TriggerRegisterTimerEvent(gv_aiA, 27, true);
  TriggerAddAction(gv_aiA, f_bmr);
  gv_aiB = CreateTrigger();
  TriggerRegisterEnterRectSimple(gv_aiB, gv_aeB);
  TriggerAddCondition(gv_aiB, Condition(f_bmE));
  TriggerAddAction(gv_aiB, f_bmF);
  f_bmL();
  gv_aiC = CreateTrigger();
  DisableTrigger(gv_aiC);
  TriggerRegisterTimerEvent(gv_aiC, 27, true);
  TriggerAddAction(gv_aiC, f_bmJ);
  f_bnb();
  gv_aiD = CreateTrigger();
  DisableTrigger(gv_aiD);
  TriggerRegisterTimerEvent(gv_aiD, 18, true);
  TriggerAddAction(gv_aiD, f_bmZ);
  f_bnq();
  f_bnx();
  f_bnF();
  gv_aiE = CreateTrigger();
  DisableTrigger(gv_aiE);
  TriggerRegisterTimerEvent(gv_aiE, 27, true);
  TriggerAddAction(gv_aiE, f_bnE);
  f_bnV();
  gv_aiF = CreateTrigger();
  DisableTrigger(gv_aiF);
  TriggerRegisterTimerEvent(gv_aiF, 18, true);
  TriggerAddAction(gv_aiF, f_bnU);
  f_bok();
  f_bos();
  gv_aiG = CreateTrigger();
  DisableTrigger(gv_aiG);
  TriggerRegisterTimerEvent(gv_aiG, 18, true);
  TriggerAddAction(gv_aiG, f_bor);
  f_boI();
  gv_aiH = CreateTrigger();
  DisableTrigger(gv_aiH);
  TriggerRegisterTimerEvent(gv_aiH, 18, true);
  TriggerAddAction(gv_aiH, f_boH);
  f_boY();
  gv_aiI = CreateTrigger();
  DisableTrigger(gv_aiI);
  TriggerRegisterTimerEvent(gv_aiI, 18, true);
  TriggerAddAction(gv_aiI, f_boX);
  f_bpn();
  f_bpv();
  gv_aiJ = CreateTrigger();
  DisableTrigger(gv_aiJ);
  TriggerRegisterTimerEvent(gv_aiJ, 18, true);
  TriggerAddAction(gv_aiJ, f_bpu);
  gv_aiK = CreateTrigger();
  TriggerRegisterEnterRectSimple(gv_aiK, gv_aeR);
  TriggerAddCondition(gv_aiK, Condition(f_bpG));
  TriggerAddAction(gv_aiK, f_bpH);
  f_bpN();
  gv_aiL = CreateTrigger();
  DisableTrigger(gv_aiL);
  TriggerRegisterTimerEvent(gv_aiL, 20, true);
  TriggerAddAction(gv_aiL, f_bpM);
  Preload("Abilities\\Spells\\Undead\\Darksummoning\\DarkSummonTarget.mdl");
  f_bqd();
  gv_aiM = CreateTrigger();
  DisableTrigger(gv_aiM);
  TriggerRegisterTimerEvent(gv_aiM, 10, true);
  TriggerAddAction(gv_aiM, f_bqc);
  Preload("Abilities\\Spells\\Undead\\FrostNova\\FrostNovaTarget.mdl");
  gv_aiN = CreateTrigger();
  TriggerRegisterEnterRectSimple(gv_aiN, gv_acU);
  TriggerAddCondition(gv_aiN, Condition(f_aOn));
  TriggerAddAction(gv_aiN, f_bqq);
  Preload("Abilities\\Spells\\Orc\\EarthQuake\\EarthQuakeTarget.mdl");
  gv_aok = f_aJj();
  gv_aol = false;
  SuspendHeroXP(gv_aaU[1], true);
  gv_aiO = CreateTrigger();
  TriggerRegisterEnterRectSimple(gv_aiO, gv_afr);
  TriggerAddCondition(gv_aiO, Condition(f_aOn));
  TriggerAddAction(gv_aiO, f_bqs);
  gv_aom = f_aJj();
  f_aMb("A063");
  UnitAddAbility(gv_aaU[2], "A063");
  SuspendHeroXP(gv_aaU[2], true);
  SetUnitAbilityLevel(gv_aaU[2], "A063", f_aMf() - 1);
  gv_aiP = CreateTrigger();
  TriggerRegisterEnterRectSimple(gv_aiP, gv_afD);
  TriggerAddCondition(gv_aiP, Condition(f_aOn));
  TriggerAddAction(gv_aiP, f_bqx);
  gv_aon = f_aJj();
  Preload("Abilities\\Spells\\Human\\FlameStrike\\FlameStrikeTarget.mdl");
  gv_aop = CreateUnit(Player(11), "hpea", 0.0, 0.0, 0.0);
  UnitAddAbility(gv_aop, "A04J");
  f_aIU(Condition(f_bqu));
  SuspendHeroXP(gv_aaU[3], true);
  gv_aiQ = CreateTrigger();
  TriggerRegisterEnterRectSimple(gv_aiQ, gv_aeC);
  TriggerAddCondition(gv_aiQ, Condition(f_aOn));
  TriggerAddAction(gv_aiQ, f_bqz);
  gv_aoq = f_aJj();
  gv_aor = f_aIL();
  UnitAddAbility(gv_aaU[4], "A006");
  SuspendHeroXP(gv_aaU[4], true);
  Preload("Abilities\\Weapons\\ZigguratFrostMissile\\ZigguratFrostMissile.mdl");
  Preload("Objects\\Spawnmodels\\NightElf\\NECancelDeath\\NECancelDeath.mdl");
  gv_aiR = CreateTrigger();
  TriggerRegisterEnterRectSimple(gv_aiR, gv_aeQ);
  TriggerAddCondition(gv_aiR, Condition(f_aOn));
  TriggerAddAction(gv_aiR, f_bqD);
  gv_aou = CreateTrigger();
  TriggerRegisterEnterRectSimple(gv_aou, gv_aeW);
  TriggerAddCondition(gv_aou, Condition(f_bqE));
  TriggerAddAction(gv_aou, f_bqF);
  DisableTrigger(gv_aou);
  gv_aos = f_aJj();
  gv_aov = f_aIL();
  SuspendHeroXP(gv_aaU[5], true);
  gv_aot = 200;
  Preload("Abilities\\Spells\\NightElf\\Taunt\\TauntCaster.mdl");
  f_bqV();
  gv_aiT = CreateTrigger();
  TriggerRegisterAnyUnitEventBJ(gv_aiT, EVENT_PLAYER_UNIT_DEATH);
  TriggerAddCondition(gv_aiT, Condition(f_brb));
  gv_aiT = CreateTrigger();
  TriggerRegisterEnterRectSimple(gv_aiT, gv_aea);
  TriggerAddCondition(gv_aiT, Condition(f_aOn));
  TriggerAddAction(gv_aiT, f_bra);
  gv_aoA = f_aJj();
  gv_alC[80] = Location(-882, -14009);
  gv_alC[81] = Location(-15, -15364);
  gv_alC[82] = Location(-14, -15050);
  gv_alC[83] = Location(-377, -14933);
  gv_alC[84] = Location(-850, -15120);
  gv_alC[85] = Location(-972, -14572);
  gv_aoB[0] = "ucry";
  gv_aoB[1] = "u004";
  gv_aoB[2] = "u003";
  gv_aoB[3] = "u008";
  UnitAddAbility(gv_aaU[7], "Alit");
  f_aMb("A085");
  f_aMb("A086");
  f_aMb("A087");
  f_aMb("A088");
  f_aMb("A089");
  Preload("Abilities\\Spells\\Other\\Incinerate\\FireLordDeathExplode.mdl");
  SuspendHeroXP(gv_aaU[7], true);
  gv_aiU = CreateTrigger();
  TriggerRegisterEnterRectSimple(gv_aiU, gv_adD);
  TriggerAddCondition(gv_aiU, Condition(f_aOn));
  TriggerAddAction(gv_aiU, f_brm);
  gv_aoC = f_aJj();
  gv_aoH = f_aIL();
  SuspendHeroXP(gv_aaU[8], true);
  Preload("Abilities\\Spells\\Undead\\UnholyAura\\UnholyAura.mdl");
  gv_acM = f_aJj();
  f_aMb("A090");
  ShowUnit(gv_ale, false);
  PauseUnit(gv_ale, true);
  Preload("Abilities\\Spells\\Human\\MassTeleport\\MassTeleportCaster.mdl");
  gv_aiW = CreateTrigger();
  TriggerRegisterTimerEvent(gv_aiW, 0.5, true);
  TriggerAddAction(gv_aiW, f_brq);
  gv_alC[86] = Location(11136, GetRandomReal(-8224, -7392));
  gv_alC[87] = Location(12432, GetRandomReal(-8224, -7392));
  gv_alC[88] = Location(GetRandomReal(11136, 13000), -8150);
  gv_alC[89] = Location(12174.7, -7811.3);
  gv_alC[90] = Location(11136, -7500);
  gv_alC[91] = Location(13728, GetLocationY(gv_alC[86]));
  gv_alC[92] = Location(13728, GetLocationY(gv_alC[87]));
  gv_alC[93] = Location(13728, -8150);
  gv_alC[94] = Location(13728, -7811.3);
  gv_alC[95] = Location(13728, -7500);
  gv_awj = f_aIL();
  gv_aiX = CreateTrigger();
  TriggerRegisterEnterRectSimple(gv_aiX, gv_afX);
  TriggerAddCondition(gv_aiX, Condition(f_bpY));
  TriggerAddAction(gv_aiX, f_bru);
  gv_aiY = CreateTrigger();
  TriggerRegisterEnterRectSimple(gv_aiY, gv_afP);
  TriggerAddCondition(gv_aiY, Condition(f_aOn));
  TriggerAddAction(gv_aiY, f_brx);
  gv_aoI = f_aJj();
  Preload("MDX\\iceberg.mdx");
  gv_aiZ = CreateTrigger();
  TriggerRegisterEnterRectSimple(gv_aiZ, gv_aga);
  TriggerAddCondition(gv_aiZ, Condition(f_aOn));
  TriggerAddAction(gv_aiZ, f_brF);
  gv_aoJ = f_aJj();
  Preload("Abilities\\Spells\\Human\\FlameStrike\\FlameStrike1.mdl");
  f_aMb("A08J");
  gv_aja = CreateTrigger();
  TriggerRegisterEnterRectSimple(gv_aja, gv_afO);
  TriggerAddCondition(gv_aja, Condition(f_aOn));
  TriggerAddAction(gv_aja, f_brR);
  gv_aoK = f_aJj();
  gv_aoL = f_aJj();
  gv_aoM = f_aIL();
  gv_alC[96] = Location(14240, -4074);
  gv_alC[97] = Location(12986, -3000);
  gv_alC[98] = Location(13598, -3463);
  gv_ajb = CreateTrigger();
  TriggerRegisterEnterRectSimple(gv_ajb, gv_aeP);
  TriggerAddCondition(gv_ajb, Condition(f_aOn));
  TriggerAddAction(gv_ajb, f_bsb);
  gv_aoO = f_aJj();
  gv_aoP = f_aJj();
  gv_aoQ = f_aIL();
  gv_alC[99] = Location(11936, -960);
  gv_alC[100] = Location(12032, 1568);
  gv_alC[101] = Location(14752, 1600);
  gv_alC[102] = Location(14720, -896);
  SuspendHeroXP(gv_aaU[9], true);
  gv_ajc = CreateTrigger();
  TriggerRegisterEnterRectSimple(gv_ajc, gv_aeq);
  TriggerAddCondition(gv_ajc, Condition(f_aOn));
  TriggerAddAction(gv_ajc, f_bsy);
  gv_aoW = f_aJj();
  f_aIU(Condition(f_bsn));
  gv_ajd = CreateTrigger();
  TriggerRegisterEnterRectSimple(gv_ajd, gv_afP);
  TriggerAddCondition(gv_ajd, Condition(f_aOn));
  TriggerAddAction(gv_ajd, f_bsL);
  gv_aoY = f_aJj();
  gv_apa = false;
  Preload("Abilities\\Spells\\Human\\FlameStrike\\FlameStrikeEmbers.mdl");
  DisableTrigger(gv_ajd);
  gv_aje = CreateTrigger();
  TriggerRegisterEnterRectSimple(gv_aje, gv_aeo);
  TriggerAddCondition(gv_aje, Condition(f_aOn));
  TriggerAddAction(gv_aje, f_bsQ);
  DisableTrigger(gv_aje);
  gv_apb = f_aJj();
  gv_ajf = CreateTrigger();
  TriggerRegisterTimerEventPeriodic(gv_ajf, 30);
  TriggerAddAction(gv_ajf, f_bsR);
  f_bti();
  gv_ajg = CreateTrigger();
  TriggerRegisterPlayerUnitEventSimple(
    gv_ajg,
    Player(10),
    EVENT_PLAYER_UNIT_DEATH
  );
  TriggerAddAction(gv_ajg, f_btk);
  f_btI();
  gv_ajh = CreateTrigger();
  TriggerRegisterPlayerUnitEventSimple(
    gv_ajh,
    Player(10),
    EVENT_PLAYER_UNIT_DEATH
  );
  TriggerRegisterPlayerUnitEventSimple(
    gv_ajh,
    Player(9),
    EVENT_PLAYER_UNIT_DEATH
  );
  TriggerAddAction(gv_ajh, f_btK);
  gv_aji = CreateTrigger();
  TriggerRegisterTimerEventSingle(gv_aji, 121);
  TriggerAddAction(gv_aji, f_btQ);
  gv_ajj = CreateTrigger();
  TriggerAddAction(gv_ajj, f_btU);
  gv_ajk = CreateTrigger();
  TriggerAddAction(gv_ajk, f_bua);
  gv_ajl = CreateTrigger();
  TriggerRegisterEnterRectSimple(gv_ajl, gv_aeb);
  TriggerRegisterEnterRectSimple(gv_ajl, gv_afH);
  TriggerAddAction(gv_ajl, f_bug);
  gv_ajm = CreateTrigger();
  TriggerRegisterTimerEventPeriodic(gv_ajm, 25.15);
  TriggerAddAction(gv_ajm, f_buk);
  gv_ajn = CreateTrigger();
  TriggerRegisterUnitEvent(gv_ajn, gv_akj, EVENT_UNIT_DEATH);
  TriggerAddAction(gv_ajn, f_bul);
  gv_ajo = CreateTrigger();
  TriggerRegisterAnyUnitEventBJ(gv_ajo, EVENT_PLAYER_UNIT_DEATH);
  TriggerAddAction(gv_ajo, f_bun);
  gv_ajp = CreateTrigger();
  TriggerRegisterTimerEventPeriodic(gv_ajp, 20);
  TriggerAddAction(gv_ajp, f_bus);
  gv_ajq = CreateTrigger();
  TriggerRegisterTimerEventPeriodic(gv_ajq, 6.5);
  TriggerAddAction(gv_ajq, f_buy);
  gv_ajr = CreateTrigger();
  TriggerRegisterTimerEventPeriodic(gv_ajr, 1.45);
  TriggerAddAction(gv_ajr, f_buA);
  gv_ajs = CreateTrigger();
  TriggerRegisterTimerEventPeriodic(gv_ajs, 20);
  TriggerAddAction(gv_ajs, f_buF);
  gv_ajt = CreateTrigger();
  TriggerRegisterEnterRectSimple(gv_ajt, gv_aeb);
  TriggerAddAction(gv_ajt, f_buQ);
  gv_aju = CreateTrigger();
  TriggerRegisterTimerEventPeriodic(gv_aju, 5.09);
  TriggerAddAction(gv_aju, f_buS);
  gv_ajv = CreateTrigger();
  TriggerRegisterEnterRectSimple(gv_ajv, gv_ada);
  TriggerRegisterEnterRectSimple(gv_ajv, gv_adb);
  TriggerRegisterEnterRectSimple(gv_ajv, gv_adc);
  TriggerRegisterEnterRectSimple(gv_ajv, gv_add);
  TriggerAddAction(gv_ajv, f_buY);
  gv_ajw = CreateTrigger();
  TriggerRegisterUnitEvent(gv_ajw, gv_ala, EVENT_UNIT_DAMAGED);
  TriggerAddAction(gv_ajw, f_bvk);
  gv_ajx = CreateTrigger();
  TriggerRegisterUnitEvent(gv_ajx, gv_aki, EVENT_UNIT_DAMAGED);
  TriggerAddAction(gv_ajx, f_bvs);
  gv_ajy = CreateTrigger();
  TriggerRegisterTimerEventSingle(gv_ajy, 0.6);
  TriggerAddAction(gv_ajy, f_bvt);
  gv_ajz = CreateTrigger();
  TriggerRegisterAnyUnitEventBJ(gv_ajz, EVENT_PLAYER_UNIT_PICKUP_ITEM);
  TriggerAddAction(gv_ajz, f_bvy);
  gv_ajA = CreateTrigger();
  DisableTrigger(gv_ajA);
  TriggerRegisterTimerEventPeriodic(gv_ajA, 1.01);
  TriggerAddAction(gv_ajA, f_bvE);
  gv_ajB = CreateTrigger();
  TriggerRegisterLeaveRectSimple(gv_ajB, gv_acY);
  TriggerAddAction(gv_ajB, f_bvS);
  gv_ajC = CreateTrigger();
  TriggerRegisterTimerEventPeriodic(gv_ajC, 25);
  TriggerAddAction(gv_ajC, f_bvV);
  lv_bzd = 0;
  gv_ajD = CreateTrigger();
  do {
    if (lv_bzd > 7) {
      break;
    }
    lv_bzd = lv_bzd + 1;
  } while (true);
  TriggerAddAction(gv_ajD, f_bwb);
  lv_bzd = 0;
  gv_ajE = CreateTrigger();
  do {
    if (lv_bzd > 7) {
      break;
    }
    TriggerRegisterPlayerChatEvent(gv_ajE, Player(lv_bzd), "-stab", false);
    TriggerRegisterPlayerChatEvent(gv_ajE, Player(lv_bzd), "-slap", false);
    lv_bzd = lv_bzd + 1;
  } while (true);
  TriggerAddAction(gv_ajE, f_bwf);
  lv_bzd = 0;
  gv_ajF = CreateTrigger();
  do {
    if (lv_bzd > 7) {
      break;
    }
    TriggerRegisterPlayerChatEvent(gv_ajF, Player(lv_bzd), "-kill", false);
    lv_bzd = lv_bzd + 1;
  } while (true);
  TriggerAddAction(gv_ajF, f_bwj);
  lv_bzd = 0;
  gv_ajG = CreateTrigger();
  do {
    if (lv_bzd > 7) {
      break;
    }
    TriggerRegisterPlayerChatEvent(gv_ajG, Player(lv_bzd), "-boot", false);
    TriggerRegisterPlayerChatEvent(gv_ajG, Player(lv_bzd), "-kick", false);
    lv_bzd = lv_bzd + 1;
  } while (true);
  TriggerAddAction(gv_ajG, f_bwm);
  lv_bzd = 0;
  gv_ajH = CreateTrigger();
  do {
    if (lv_bzd > 7) {
      break;
    }
    TriggerRegisterPlayerChatEvent(gv_ajH, Player(lv_bzd), "-quests", true);
    TriggerRegisterPlayerChatEvent(gv_ajH, Player(lv_bzd), "-q", true);
    lv_bzd = lv_bzd + 1;
  } while (true);
  TriggerAddAction(gv_ajH, f_bwp);
  lv_bzd = 0;
  gv_ajI = CreateTrigger();
  do {
    if (lv_bzd > 7) {
      break;
    }
    TriggerRegisterPlayerChatEvent(gv_ajI, Player(lv_bzd), "-players", true);
    TriggerRegisterPlayerChatEvent(gv_ajI, Player(lv_bzd), "-p", true);
    lv_bzd = lv_bzd + 1;
  } while (true);
  TriggerAddAction(gv_ajI, f_bwq);
  lv_bzd = 0;
  gv_ajJ = CreateTrigger();
  do {
    if (lv_bzd > 7) {
      break;
    }
    TriggerRegisterPlayerChatEvent(gv_ajJ, Player(lv_bzd), "-die", true);
    TriggerRegisterPlayerChatEvent(gv_ajJ, Player(lv_bzd), "-suicide", true);
    lv_bzd = lv_bzd + 1;
  } while (true);
  TriggerAddAction(gv_ajJ, f_bwr);
  lv_bzd = 0;
  gv_ajK = CreateTrigger();
  do {
    if (lv_bzd > 7) {
      break;
    }
    TriggerRegisterPlayerChatEvent(gv_ajK, Player(lv_bzd), "-clear", true);
    lv_bzd = lv_bzd + 1;
  } while (true);
  TriggerAddAction(gv_ajK, f_bwt);
  f_bwF();
  lv_bzd = 0;
  gv_ajL = CreateTrigger();
  do {
    if (lv_bzd > 7) {
      break;
    }
    TriggerRegisterPlayerChatEvent(gv_ajL, Player(lv_bzd), "-roll", false);
    TriggerRegisterPlayerChatEvent(gv_ajL, Player(lv_bzd), "-roll  ", false);
    lv_bzd = lv_bzd + 1;
  } while (true);
  TriggerAddAction(gv_ajL, f_bwJ);
  lv_bzd = 0;
  gv_ajM = CreateTrigger();
  do {
    if (lv_bzd > 7) {
      break;
    }
    TriggerRegisterPlayerChatEvent(gv_ajM, Player(lv_bzd), "-in", true);
    lv_bzd = lv_bzd + 1;
  } while (true);
  TriggerAddAction(gv_ajM, f_bwP);
  lv_bzd = 0;
  gv_ajN = CreateTrigger();
  do {
    if (lv_bzd > 7) {
      break;
    }
    TriggerRegisterPlayerChatEvent(gv_ajN, Player(lv_bzd), "-out", true);
    lv_bzd = lv_bzd + 1;
  } while (true);
  TriggerAddAction(gv_ajN, f_bwQ);
  lv_bzd = 0;
  gv_ajO = CreateTrigger();
  do {
    if (lv_bzd > 7) {
      break;
    }
    TriggerRegisterPlayerChatEvent(gv_ajO, Player(lv_bzd), "-info", true);
    lv_bzd = lv_bzd + 1;
  } while (true);
  TriggerAddAction(gv_ajO, f_bwV);
  lv_bzd = 0;
  gv_ajP = CreateTrigger();
  do {
    if (lv_bzd > 7) {
      break;
    }
    TriggerRegisterPlayerChatEvent(gv_ajP, Player(lv_bzd), "-find", false);
    lv_bzd = lv_bzd + 1;
  } while (true);
  TriggerAddAction(gv_ajP, f_bxb);
  lv_bzd = 0;
  gv_ajQ = CreateTrigger();
  do {
    if (lv_bzd > 7) {
      break;
    }
    TriggerRegisterPlayerChatEvent(gv_ajQ, Player(lv_bzd), "-text", true);
    lv_bzd = lv_bzd + 1;
  } while (true);
  TriggerAddAction(gv_ajQ, f_bxe);
  gv_ajR = CreateTrigger();
  TriggerRegisterTimerEventSingle(gv_ajR, 0.3);
  TriggerAddAction(gv_ajR, f_bxi);
  lv_bzd = 0;
  gv_ajS = CreateTrigger();
  do {
    if (lv_bzd > 7) {
      break;
    }
    TriggerRegisterPlayerChatEvent(gv_ajS, Player(lv_bzd), "-save", true);
    lv_bzd = lv_bzd + 1;
  } while (true);
  TriggerAddAction(gv_ajS, f_bxy);
  lv_bzd = 0;
  gv_ajT = CreateTrigger();
  do {
    if (lv_bzd > 7) {
      break;
    }
    TriggerRegisterPlayerChatEvent(gv_ajT, Player(lv_bzd), "-load ", false);
    lv_bzd = lv_bzd + 1;
  } while (true);
  TriggerAddAction(gv_ajT, f_bxY);
  f_byo();
  gv_ajU = CreateTrigger();
  TriggerRegisterTimerEventSingle(gv_ajU, 15);
  TriggerAddAction(gv_ajU, f_byr);
  gv_ajV = CreateTrigger();
  TriggerRegisterTimerEventPeriodic(gv_ajV, 2.07);
  TriggerAddAction(gv_ajV, f_byx);
  gv_ajW = CreateTrigger();
  TriggerRegisterUnitEvent(gv_ajW, gv_alb, EVENT_UNIT_ATTACKED);
  TriggerAddAction(gv_ajW, f_byA);
  gv_ajX = CreateTrigger();
  TriggerRegisterUnitEvent(gv_ajX, gv_akz, EVENT_UNIT_ATTACKED);
  TriggerAddAction(gv_ajX, f_byC);
  gv_ajY = CreateTrigger();
  TriggerRegisterUnitEvent(gv_ajY, gv_aaU[9], EVENT_UNIT_ATTACKED);
  TriggerAddAction(gv_ajY, f_byE);
  gv_ajZ = CreateTrigger();
  TriggerRegisterAnyUnitEventBJ(gv_ajZ, EVENT_PLAYER_UNIT_ATTACKED);
  TriggerAddAction(gv_ajZ, f_byG);
  gv_aka = CreateTrigger();
  TriggerRegisterAnyUnitEventBJ(gv_aka, EVENT_PLAYER_UNIT_ATTACKED);
  TriggerAddCondition(gv_aka, Condition(f_byH));
  TriggerAddAction(gv_aka, f_byI);
  gv_akb = CreateTrigger();
  TriggerRegisterUnitEvent(gv_akb, gv_ald, EVENT_UNIT_ATTACKED);
  TriggerAddAction(gv_akb, f_byK);
  gv_akc = CreateTrigger();
  TriggerRegisterUnitEvent(gv_akc, gv_akZ, EVENT_UNIT_ATTACKED);
  TriggerAddAction(gv_akc, f_byM);
  gv_akd = CreateTrigger();
  TriggerRegisterUnitEvent(gv_akd, gv_akJ, EVENT_UNIT_ATTACKED);
  TriggerAddAction(gv_akd, f_byO);
  gv_ake = CreateTrigger();
  TriggerRegisterUnitEvent(gv_ake, gv_akO, EVENT_UNIT_ATTACKED);
  TriggerAddAction(gv_ake, f_byQ);
  ConditionalTriggerExecute(gv_agk);
  ConditionalTriggerExecute(gv_agl);
  ConditionalTriggerExecute(gv_agm);
}
function f_bzf() {
  SetMapName("TRIGSTR_001");
  SetMapDescription("TRIGSTR_003");
  SetPlayers(12);
  SetTeams(12);
  SetGamePlacement(MAP_PLACEMENT_TEAMS_TOGETHER);
  DefineStartLocation(0, -14208, -14976);
  DefineStartLocation(1, -14208, -14976);
  DefineStartLocation(2, -14208, -14976);
  DefineStartLocation(3, -14208, -14976);
  DefineStartLocation(4, -14208, -14976);
  DefineStartLocation(5, -14208, -14976);
  DefineStartLocation(6, -14208, -14976);
  DefineStartLocation(7, -14208, -14976);
  DefineStartLocation(8, -14208, -14976);
  DefineStartLocation(9, -14208, -14976);
  DefineStartLocation(10, -14208, -14976);
  DefineStartLocation(11, -14208, -14976);
  SetPlayerStartLocation(Player(0), 0);
  ForcePlayerStartLocation(Player(0), 0);
  SetPlayerColor(Player(0), ConvertPlayerColor(0));
  SetPlayerRacePreference(Player(0), RACE_PREF_HUMAN);
  SetPlayerRaceSelectable(Player(0), false);
  SetPlayerController(Player(0), MAP_CONTROL_USER);
  SetPlayerStartLocation(Player(1), 1);
  ForcePlayerStartLocation(Player(1), 1);
  SetPlayerColor(Player(1), ConvertPlayerColor(1));
  SetPlayerRacePreference(Player(1), RACE_PREF_HUMAN);
  SetPlayerRaceSelectable(Player(1), false);
  SetPlayerController(Player(1), MAP_CONTROL_USER);
  SetPlayerStartLocation(Player(2), 2);
  ForcePlayerStartLocation(Player(2), 2);
  SetPlayerColor(Player(2), ConvertPlayerColor(2));
  SetPlayerRacePreference(Player(2), RACE_PREF_HUMAN);
  SetPlayerRaceSelectable(Player(2), false);
  SetPlayerController(Player(2), MAP_CONTROL_USER);
  SetPlayerStartLocation(Player(3), 3);
  ForcePlayerStartLocation(Player(3), 3);
  SetPlayerColor(Player(3), ConvertPlayerColor(3));
  SetPlayerRacePreference(Player(3), RACE_PREF_HUMAN);
  SetPlayerRaceSelectable(Player(3), false);
  SetPlayerController(Player(3), MAP_CONTROL_USER);
  SetPlayerStartLocation(Player(4), 4);
  ForcePlayerStartLocation(Player(4), 4);
  SetPlayerColor(Player(4), ConvertPlayerColor(4));
  SetPlayerRacePreference(Player(4), RACE_PREF_HUMAN);
  SetPlayerRaceSelectable(Player(4), false);
  SetPlayerController(Player(4), MAP_CONTROL_USER);
  SetPlayerStartLocation(Player(5), 5);
  ForcePlayerStartLocation(Player(5), 5);
  SetPlayerColor(Player(5), ConvertPlayerColor(5));
  SetPlayerRacePreference(Player(5), RACE_PREF_HUMAN);
  SetPlayerRaceSelectable(Player(5), false);
  SetPlayerController(Player(5), MAP_CONTROL_USER);
  SetPlayerStartLocation(Player(6), 6);
  ForcePlayerStartLocation(Player(6), 6);
  SetPlayerColor(Player(6), ConvertPlayerColor(6));
  SetPlayerRacePreference(Player(6), RACE_PREF_HUMAN);
  SetPlayerRaceSelectable(Player(6), false);
  SetPlayerController(Player(6), MAP_CONTROL_USER);
  SetPlayerStartLocation(Player(7), 7);
  ForcePlayerStartLocation(Player(7), 7);
  SetPlayerColor(Player(7), ConvertPlayerColor(7));
  SetPlayerRacePreference(Player(7), RACE_PREF_HUMAN);
  SetPlayerRaceSelectable(Player(7), false);
  SetPlayerController(Player(7), MAP_CONTROL_USER);
  SetPlayerStartLocation(Player(8), 8);
  ForcePlayerStartLocation(Player(8), 8);
  SetPlayerColor(Player(8), ConvertPlayerColor(8));
  SetPlayerRacePreference(Player(8), RACE_PREF_HUMAN);
  SetPlayerRaceSelectable(Player(8), false);
  SetPlayerController(Player(8), MAP_CONTROL_COMPUTER);
  SetPlayerStartLocation(Player(9), 9);
  ForcePlayerStartLocation(Player(9), 9);
  SetPlayerColor(Player(9), ConvertPlayerColor(9));
  SetPlayerRacePreference(Player(9), RACE_PREF_HUMAN);
  SetPlayerRaceSelectable(Player(9), false);
  SetPlayerController(Player(9), MAP_CONTROL_COMPUTER);
  SetPlayerStartLocation(Player(10), 10);
  ForcePlayerStartLocation(Player(10), 10);
  SetPlayerColor(Player(10), ConvertPlayerColor(10));
  SetPlayerRacePreference(Player(10), RACE_PREF_UNDEAD);
  SetPlayerRaceSelectable(Player(10), false);
  SetPlayerController(Player(10), MAP_CONTROL_COMPUTER);
  SetPlayerStartLocation(Player(11), 11);
  ForcePlayerStartLocation(Player(11), 11);
  SetPlayerColor(Player(11), ConvertPlayerColor(11));
  SetPlayerRacePreference(Player(11), RACE_PREF_UNDEAD);
  SetPlayerRaceSelectable(Player(11), false);
  SetPlayerController(Player(11), MAP_CONTROL_COMPUTER);
  f_byR();
  SetStartLocPrioCount(0, 7);
  SetStartLocPrio(0, 0, 1, MAP_LOC_PRIO_HIGH);
  SetStartLocPrio(0, 1, 2, MAP_LOC_PRIO_HIGH);
  SetStartLocPrio(0, 2, 3, MAP_LOC_PRIO_HIGH);
  SetStartLocPrio(0, 3, 4, MAP_LOC_PRIO_HIGH);
  SetStartLocPrio(0, 4, 5, MAP_LOC_PRIO_HIGH);
  SetStartLocPrio(0, 5, 6, MAP_LOC_PRIO_HIGH);
  SetStartLocPrio(0, 6, 7, MAP_LOC_PRIO_HIGH);
  SetStartLocPrioCount(1, 7);
  SetStartLocPrio(1, 0, 0, MAP_LOC_PRIO_HIGH);
  SetStartLocPrio(1, 1, 2, MAP_LOC_PRIO_HIGH);
  SetStartLocPrio(1, 2, 3, MAP_LOC_PRIO_HIGH);
  SetStartLocPrio(1, 3, 4, MAP_LOC_PRIO_HIGH);
  SetStartLocPrio(1, 4, 5, MAP_LOC_PRIO_HIGH);
  SetStartLocPrio(1, 5, 6, MAP_LOC_PRIO_HIGH);
  SetStartLocPrio(1, 6, 7, MAP_LOC_PRIO_HIGH);
  SetStartLocPrioCount(2, 7);
  SetStartLocPrio(2, 0, 0, MAP_LOC_PRIO_HIGH);
  SetStartLocPrio(2, 1, 1, MAP_LOC_PRIO_HIGH);
  SetStartLocPrio(2, 2, 3, MAP_LOC_PRIO_HIGH);
  SetStartLocPrio(2, 3, 4, MAP_LOC_PRIO_HIGH);
  SetStartLocPrio(2, 4, 5, MAP_LOC_PRIO_HIGH);
  SetStartLocPrio(2, 5, 6, MAP_LOC_PRIO_HIGH);
  SetStartLocPrio(2, 6, 7, MAP_LOC_PRIO_HIGH);
  SetStartLocPrioCount(3, 7);
  SetStartLocPrio(3, 0, 0, MAP_LOC_PRIO_HIGH);
  SetStartLocPrio(3, 1, 1, MAP_LOC_PRIO_HIGH);
  SetStartLocPrio(3, 2, 2, MAP_LOC_PRIO_HIGH);
  SetStartLocPrio(3, 3, 4, MAP_LOC_PRIO_HIGH);
  SetStartLocPrio(3, 4, 5, MAP_LOC_PRIO_HIGH);
  SetStartLocPrio(3, 5, 6, MAP_LOC_PRIO_HIGH);
  SetStartLocPrio(3, 6, 7, MAP_LOC_PRIO_HIGH);
  SetStartLocPrioCount(4, 7);
  SetStartLocPrio(4, 0, 0, MAP_LOC_PRIO_HIGH);
  SetStartLocPrio(4, 1, 1, MAP_LOC_PRIO_HIGH);
  SetStartLocPrio(4, 2, 2, MAP_LOC_PRIO_HIGH);
  SetStartLocPrio(4, 3, 3, MAP_LOC_PRIO_HIGH);
  SetStartLocPrio(4, 4, 5, MAP_LOC_PRIO_HIGH);
  SetStartLocPrio(4, 5, 6, MAP_LOC_PRIO_HIGH);
  SetStartLocPrio(4, 6, 7, MAP_LOC_PRIO_HIGH);
  SetStartLocPrioCount(5, 7);
  SetStartLocPrio(5, 0, 0, MAP_LOC_PRIO_HIGH);
  SetStartLocPrio(5, 1, 1, MAP_LOC_PRIO_HIGH);
  SetStartLocPrio(5, 2, 2, MAP_LOC_PRIO_HIGH);
  SetStartLocPrio(5, 3, 3, MAP_LOC_PRIO_HIGH);
  SetStartLocPrio(5, 4, 4, MAP_LOC_PRIO_HIGH);
  SetStartLocPrio(5, 5, 6, MAP_LOC_PRIO_HIGH);
  SetStartLocPrio(5, 6, 7, MAP_LOC_PRIO_HIGH);
  SetStartLocPrioCount(6, 7);
  SetStartLocPrio(6, 0, 0, MAP_LOC_PRIO_HIGH);
  SetStartLocPrio(6, 1, 1, MAP_LOC_PRIO_HIGH);
  SetStartLocPrio(6, 2, 2, MAP_LOC_PRIO_HIGH);
  SetStartLocPrio(6, 3, 3, MAP_LOC_PRIO_HIGH);
  SetStartLocPrio(6, 4, 4, MAP_LOC_PRIO_HIGH);
  SetStartLocPrio(6, 5, 5, MAP_LOC_PRIO_HIGH);
  SetStartLocPrio(6, 6, 7, MAP_LOC_PRIO_HIGH);
  SetStartLocPrioCount(7, 7);
  SetStartLocPrio(7, 0, 0, MAP_LOC_PRIO_HIGH);
  SetStartLocPrio(7, 1, 1, MAP_LOC_PRIO_HIGH);
  SetStartLocPrio(7, 2, 2, MAP_LOC_PRIO_HIGH);
  SetStartLocPrio(7, 3, 3, MAP_LOC_PRIO_HIGH);
  SetStartLocPrio(7, 4, 4, MAP_LOC_PRIO_HIGH);
  SetStartLocPrio(7, 5, 5, MAP_LOC_PRIO_HIGH);
  SetStartLocPrio(7, 6, 6, MAP_LOC_PRIO_HIGH);
}
function f_bzg() {
  f_aOs(gv_ayr, gv_ayt, gv_ayu);
  return true;
}
function f_bzh() {
  f_bll(gv_ayr, gv_ayv, gv_ays, gv_ayw);
  return true;
}
function f_bzi() {
  var lv_bzj = gv_ayx;
  do {
    if (gv_awD.getInt(lv_bzj) < 0) {
      break;
    }
    DestroyEffect(gv_awB[gv_awC.getInt(lv_bzj) + gv_awD.getInt(lv_bzj)]);
    gv_awD[lv_bzj] = gv_awD.getInt(lv_bzj) - 1;
  } while (true);
  if (GetWidgetLife(gv_akN) > 0.405) {
    IssuePointOrderById(gv_akN, gv_aas, GetUnitX(gv_akN), GetUnitY(gv_akN));
  }
  return true;
}
function f_bzk() {
  var lv_bzl = gv_ayx;
  PauseUnit(gv_awx[lv_bzl], false);
  PauseUnit(gv_aww[lv_bzl], false);
  f_aNE(
    gv_awx[lv_bzl],
    "Objects\\Spawnmodels\\Undead\\ImpaleTargetDust\\ImpaleTargetDust.mdl",
    400,
    30,
    1,
    0.02
  );
  return true;
}
function f_bzm() {
  var lv_bzn = gv_ayx;
  FlushChildHashtable(gv_abT, lv_bzn);
  return true;
}
function f_bzo() {
  var lv_bzp = gv_ayx;
  SetUnitInvulnerable(gv_awg[lv_bzp], false);
  return true;
}
function f_bzq() {
  var lv_bzr = gv_ayx;
  var lv_bzs = gv_ayn;
  SetUnitFacing(gv_avH[lv_bzr], lv_bzs * bj_RADTODEG);
  gv_ayy = false;
  return true;
}
function f_bzt() {
  var lv_bzu = gv_ayx;
  var lv_bzv = f_aDy();
  var lv_bzw = f_aJj();
  gv_acx = GetOwningPlayer(gv_avH[lv_bzu]);
  gv_acy = GetUnitX(gv_avH[lv_bzu]);
  gv_acz = GetUnitY(gv_avH[lv_bzu]);
  gv_acA = 400 * gv_aan[GetPlayerId(gv_acx)];
  f_aLX(
    AddSpecialEffect(
      "Abilities\\Spells\\NightElf\\Starfall\\StarfallCaster.mdl",
      gv_acy,
      gv_acz
    ),
    1.4
  );
  gv_avz[lv_bzv] = f_aIL();
  gv_avA[lv_bzv] = f_aJt(
    gv_acx,
    GetUnitX(gv_avH[lv_bzu]),
    GetUnitY(gv_avH[lv_bzu]),
    0.0
  );
  gv_avy[lv_bzv] = gv_avI[lv_bzu] * gv_aam[GetPlayerId(gv_acx)];
  GroupEnumUnitsInRange(
    gv_avz[lv_bzv],
    gv_acy,
    gv_acz,
    500 * gv_aan[GetPlayerId(gv_acx)],
    Condition(f_aMk)
  );
  bj_groupRemoveGroupDest = gv_avz[lv_bzv];
  ForGroup(gv_avz[lv_bzv], f_bgt);
  SaveInteger(gv_abY, 0, GetHandleId(lv_bzw), lv_bzv);
  TimerStart(lv_bzw, 0.7, false, f_bgg);
  KillUnit(gv_avH[lv_bzu]);
  lv_bzw = null;
  return true;
}
function f_bzx() {
  var lv_bzy = gv_ayx;
  var lv_bzz = gv_ayn;
  SetUnitFacing(gv_avt[lv_bzy], lv_bzz * bj_RADTODEG);
  gv_ayy = false;
  return true;
}
function f_bzA() {
  var lv_bzB = gv_ayx;
  var lv_bzC = f_aIL();
  var lv_bzD;
  var lv_bzE = f_aJt(
    GetOwningPlayer(gv_avt[lv_bzB]),
    GetUnitX(gv_avt[lv_bzB]),
    GetUnitY(gv_avt[lv_bzB]),
    3
  );
  SetUnitScale(lv_bzE, 2, 2, 0.0);
  gv_acy = GetUnitX(gv_avt[lv_bzB]);
  gv_acz = GetUnitY(gv_avt[lv_bzB]);
  gv_acx = GetOwningPlayer(gv_avt[lv_bzB]);
  gv_acA = 250;
  GroupEnumUnitsInRange(lv_bzC, gv_acy, gv_acz, 350, Condition(f_aMk));
  do {
    lv_bzD = FirstOfGroup(lv_bzC);
    if (lv_bzD == null) {
      break;
    }
    f_bfH(lv_bzD, GetOwningPlayer(gv_avt[lv_bzB]), gv_avu[lv_bzB]);
    GroupRemoveUnit(lv_bzC, lv_bzD);
  } while (true);
  DestroyEffect(
    AddSpecialEffectTarget(
      "Objects\\Spawnmodels\\Human\\HCancelDeath\\HCancelDeath.mdl",
      lv_bzE,
      "origin"
    )
  );
  KillUnit(gv_avt[lv_bzB]);
  f_aIM(lv_bzC);
  lv_bzC = null;
  lv_bzE = null;
  lv_bzD = null;
  return true;
}
function f_bzF() {
  var lv_bzG = gv_ayx;
  var lv_bzH = gv_ayn;
  var lv_bzI = f_aIL();
  var lv_bzJ;
  gv_acy = GetUnitX(gv_atU[lv_bzG]);
  gv_acz = GetUnitY(gv_atU[lv_bzG]);
  gv_acA = 150;
  gv_acx = GetOwningPlayer(gv_atU[lv_bzG]);
  GroupEnumUnitsInRange(lv_bzI, gv_acy, gv_acz, 250, Condition(f_aAS));
  do {
    lv_bzJ = FirstOfGroup(lv_bzI);
    if (lv_bzJ == null) {
      break;
    }
    if (!IsUnitInGroup(lv_bzJ, gv_atV[lv_bzG])) {
      UnitDamageTarget(
        gv_atU[lv_bzG],
        lv_bzJ,
        gv_atX[lv_bzG],
        false,
        false,
        ATTACK_TYPE_NORMAL,
        DAMAGE_TYPE_UNIVERSAL,
        null
      );
      f_bde(lv_bzJ, gv_atW.getInt(lv_bzG));
      GroupAddUnit(gv_atV[lv_bzG], lv_bzJ);
    }
    GroupRemoveUnit(lv_bzI, lv_bzJ);
  } while (true);
  f_aIM(lv_bzI);
  lv_bzI = null;
  lv_bzJ = null;
  gv_ayy = false;
  return true;
}
function f_bzK() {
  var lv_bzL = gv_ayx;
  KillUnit(gv_atU[lv_bzL]);
  f_aIM(gv_atV[lv_bzL]);
  return true;
}
function f_bzM() {
  var lv_bzN = gv_ayx;
  var lv_bzO;
  var lv_bzP = f_aIL();
  UnitRemoveAbility(gv_atn[lv_bzN], "A04Y");
  UnitRemoveAbility(gv_atn[lv_bzN], "B010");
  DestroyEffect(
    AddSpecialEffect(
      "MDX\\FreezingRing.mdx",
      GetUnitX(gv_atn[lv_bzN]),
      GetUnitY(gv_atn[lv_bzN])
    )
  );
  gv_acy = GetUnitX(gv_atn[lv_bzN]);
  gv_acz = GetUnitY(gv_atn[lv_bzN]);
  gv_acA = 300;
  gv_acx = GetOwningPlayer(gv_ato[lv_bzN]);
  GroupEnumUnitsInRange(lv_bzP, gv_acy, gv_acz, 400, Condition(f_aMk));
  gv_alN = gv_atp[lv_bzN];
  ForGroup(lv_bzP, f_bcg);
  f_aIM(lv_bzP);
  lv_bzP = null;
  return true;
}
function f_bzQ() {
  var lv_bzR = gv_ayx;
  var lv_bzS = gv_ayn;
  var lv_bzT = f_aIL();
  var lv_bzU;
  gv_acx = GetOwningPlayer(gv_atc[lv_bzR]);
  gv_acy = GetUnitX(gv_atc[lv_bzR]);
  gv_acz = GetUnitY(gv_atc[lv_bzR]);
  gv_acA = 75;
  GroupClear(lv_bzT);
  GroupEnumUnitsInRange(lv_bzT, gv_acy, gv_acz, 175, Condition(f_aMk));
  do {
    lv_bzU = FirstOfGroup(lv_bzT);
    if (lv_bzU == null) {
      break;
    }
    if (GetUnitAbilityLevel(lv_bzU, "B00B") < 1) {
      SetUnitPosition(gv_atd[lv_bzR], GetUnitX(lv_bzU), GetUnitY(lv_bzU));
      IssueTargetOrderById(gv_atd[lv_bzR], 852106, lv_bzU);
    }
    GroupRemoveUnit(lv_bzT, lv_bzU);
  } while (true);
  f_aIM(lv_bzT);
  lv_bzT = null;
  lv_bzU = null;
  gv_ayy = false;
  return true;
}
function f_bzV() {
  var lv_bzW = gv_ayx;
  f_aJn(gv_atd[lv_bzW]);
  KillUnit(gv_atc[lv_bzW]);
  return true;
}
function f_bzX() {
  var lv_bzY = gv_ayx;
  var lv_bzZ = gv_ayn;
  f_aZO(lv_bzY, GetUnitX(gv_asq[lv_bzY]), GetUnitY(gv_asq[lv_bzY]));
  SetUnitFacing(gv_aso[lv_bzY], lv_bzZ * bj_RADTODEG);
  if (GetWidgetLife(gv_asq[lv_bzY]) < 0.406) {
    gv_ayy = true;
    return true;
  }
  gv_ayy = false;
  return true;
}
function f_bAa() {
  var lv_bAb = gv_ayx;
  if (GetWidgetLife(gv_asq[lv_bAb]) > 0.405) {
    UnitDamageTarget(
      gv_aso[lv_bAb],
      gv_asq[lv_bAb],
      gv_asp[lv_bAb],
      false,
      false,
      ATTACK_TYPE_NORMAL,
      DAMAGE_TYPE_UNIVERSAL,
      null
    );
    if (GetUnitState(gv_asq[lv_bAb], UNIT_STATE_MANA) > 0.0) {
      if (GetUnitState(gv_asq[lv_bAb], UNIT_STATE_MANA) > gv_asp[lv_bAb]) {
        UnitDamageTarget(
          gv_aso[lv_bAb],
          gv_asq[lv_bAb],
          gv_asp[lv_bAb],
          false,
          false,
          ATTACK_TYPE_NORMAL,
          DAMAGE_TYPE_UNIVERSAL,
          null
        );
        f_aMp(
          null,
          S2S("-" + I2S(R2I(gv_asp[lv_bAb] + 0.5))),
          128,
          255,
          0,
          GetUnitX(gv_aso[lv_bAb]),
          GetUnitY(gv_aso[lv_bAb]),
          0.029,
          0.0,
          3,
          10
        );
      } else {
        UnitDamageTarget(
          gv_aso[lv_bAb],
          gv_asq[lv_bAb],
          GetUnitState(gv_asq[lv_bAb], UNIT_STATE_MANA),
          false,
          false,
          ATTACK_TYPE_MAGIC,
          DAMAGE_TYPE_MAGIC,
          null
        );
        f_aMp(
          null,
          S2S(
            "-" + I2S(R2I(GetUnitState(gv_asq[lv_bAb], UNIT_STATE_MANA) + 0.5))
          ),
          128,
          255,
          0,
          GetUnitX(gv_aso[lv_bAb]),
          GetUnitY(gv_aso[lv_bAb]),
          0.029,
          0.0,
          3,
          10
        );
      }
      SetUnitState(
        gv_asq[lv_bAb],
        UNIT_STATE_MANA,
        GetUnitState(gv_asq[lv_bAb], UNIT_STATE_MANA) - gv_asp[lv_bAb]
      );
    }
  }
  KillUnit(gv_aso[lv_bAb]);
  return true;
}
function f_bAc() {
  var lv_bAd = gv_ayx;
  var lv_bAe = gv_ayn;
  gv_ayy = false;
  return true;
}
function f_bAf() {
  var lv_bAg = gv_ayx;
  var lv_bAh = f_aIL();
  var lv_bAi = f_aFX();
  var lv_bAj = f_aJj();
  var lv_bAk = GetUnitAbilityLevel(gv_arS[lv_bAg], "A04V");
  gv_arK[lv_bAi] = f_aJt(
    GetOwningPlayer(gv_arR[lv_bAg]),
    GetUnitX(gv_arR[lv_bAg]),
    GetUnitY(gv_arR[lv_bAg]),
    0.0
  );
  f_aJA(gv_arK[lv_bAi], "A05P", lv_bAk + R2I(f_ayQ(gv_arS[lv_bAg]) / 2));
  IssuePointOrderById(
    gv_arK[lv_bAi],
    852473,
    GetUnitX(gv_arR[lv_bAg]),
    GetUnitY(gv_arR[lv_bAg])
  );
  gv_acy = GetUnitX(gv_arR[lv_bAg]);
  gv_acz = GetUnitY(gv_arR[lv_bAg]);
  gv_acA = 300;
  gv_acx = GetOwningPlayer(gv_arS[lv_bAg]);
  GroupEnumUnitsInRange(lv_bAh, gv_acy, gv_acz, 400, Condition(f_aMk));
  gv_alN =
    (gv_alu[1209 + lv_bAk] +
      gv_alu[GetPlayerId(GetOwningPlayer(gv_arS[lv_bAg]))] +
      ((3 + lv_bAk) / 3) * GetHeroStr(gv_arS[lv_bAg], true)) *
    f_azK(gv_arS[lv_bAg]);
  ForGroup(lv_bAh, f_aYZ);
  KillUnit(gv_arR[lv_bAg]);
  SaveInteger(gv_abY, 0, GetHandleId(lv_bAj), lv_bAi);
  TimerStart(lv_bAj, 11, false, f_aYM);
  f_aIM(lv_bAh);
  lv_bAh = null;
  lv_bAj = null;
  return true;
}
function f_bAl() {
  var lv_bAm = gv_ayx;
  var lv_bAn = gv_ayn;
  gv_arA[lv_bAm] = gv_arA.getInt(lv_bAm) + 1;
  if (gv_arA.getInt(lv_bAm) > 4) {
    gv_arA[lv_bAm] = 0;
    DestroyEffect(
      AddSpecialEffect(
        "Objects\\Spawnmodels\\Undead\\ImpaleTargetDust\\ImpaleTargetDust.mdl",
        GetUnitX(gv_arz[lv_bAm]),
        GetUnitY(gv_arz[lv_bAm])
      )
    );
  }
  gv_ary[lv_bAm] = (gv_ary[lv_bAm] / 0.025 + 25) * 1 * 0.025;
  f_aYp(lv_bAm, GetUnitX(gv_arB[lv_bAm]), GetUnitY(gv_arB[lv_bAm]));
  SetUnitFacing(gv_arz[lv_bAm], bj_RADTODEG * lv_bAn);
  if (
    GetWidgetLife(gv_arz[lv_bAm]) < 0.405 ||
    GetWidgetLife(gv_arB[lv_bAm]) < 0.405 ||
    IsUnitInRange(gv_arz[lv_bAm], gv_arB[lv_bAm], 125) ||
    GetUnitCurrentOrder(gv_arz[lv_bAm]) != 852487
  ) {
    gv_ayy = true;
    return true;
  }
  gv_ayy = false;
  return true;
}
function f_bAo() {
  var lv_bAp = gv_ayx;
  var lv_bAq;
  if (
    GetUnitCurrentOrder(gv_arz[lv_bAp]) == 852487 &&
    GetWidgetLife(gv_arB[lv_bAp]) > 0.405
  ) {
    lv_bAq = f_aJt(
      GetOwningPlayer(gv_arz[lv_bAp]),
      GetUnitX(gv_arz[lv_bAp]),
      GetUnitY(gv_arz[lv_bAp]),
      2
    );
    if (GetRandomReal(0, 100) > 20 / f_azK(gv_arz[lv_bAp])) {
      UnitDamageTarget(
        gv_arz[lv_bAp],
        gv_arB[lv_bAp],
        gv_arC[lv_bAp],
        false,
        false,
        ATTACK_TYPE_HERO,
        DAMAGE_TYPE_NORMAL,
        null
      );
      f_aJA(lv_bAq, "A04S", 0);
      IssueTargetOrderById(lv_bAq, 852095, gv_arB[lv_bAp]);
      f_aMp(
        null,
        "Hit!",
        255,
        0,
        0,
        GetUnitX(gv_arz[lv_bAp]),
        GetUnitY(gv_arz[lv_bAp]),
        0.033,
        0.0,
        3,
        20
      );
    } else {
      f_aMp(
        null,
        "Miss!",
        255,
        0,
        0,
        GetUnitX(gv_arz[lv_bAp]),
        GetUnitY(gv_arz[lv_bAp]),
        0.033,
        0.0,
        3,
        20
      );
    }
  }
  IssueImmediateOrderById(gv_arz[lv_bAp], 851972);
  SetUnitPosition(
    gv_arz[lv_bAp],
    GetUnitX(gv_arz[lv_bAp]),
    GetUnitY(gv_arz[lv_bAp])
  );
  lv_bAq = null;
  return true;
}
function f_bAr() {
  var lv_bAs = gv_ayx;
  var lv_bAt = gv_ayn;
  gv_acx = GetOwningPlayer(gv_arq[lv_bAs]);
  gv_acy = GetUnitX(gv_arq[lv_bAs]);
  gv_acz = GetUnitY(gv_arq[lv_bAs]);
  gv_acA = 50;
  GroupClear(gv_abF);
  GroupEnumUnitsInRange(gv_abF, gv_acy, gv_acz, 150, Condition(f_aMk));
  do {
    gv_alM = FirstOfGroup(gv_abF);
    if (gv_alM == null) {
      break;
    }
    if (!IsUnitInGroup(gv_alM, gv_alD[gv_ars.getInt(lv_bAs)])) {
      SetUnitPosition(gv_arr[lv_bAs], GetUnitX(gv_alM), GetUnitY(gv_alM));
      UnitDamageTarget(
        gv_arr[lv_bAs],
        gv_alM,
        gv_alu[44 + gv_ars.getInt(lv_bAs)],
        false,
        false,
        ATTACK_TYPE_NORMAL,
        DAMAGE_TYPE_UNIVERSAL,
        null
      );
      IssueTargetOrderById(gv_arr[lv_bAs], 852075, gv_alM);
      GroupAddUnit(gv_alD[gv_ars.getInt(lv_bAs)], gv_alM);
    }
    GroupRemoveUnit(gv_abF, gv_alM);
  } while (true);
  f_aIJ(gv_abF);
  gv_ayy = false;
  return true;
}
function f_bAu() {
  var lv_bAv = gv_ayx;
  var lv_bAw;
  if (GetUnitUserData(gv_arq[lv_bAv]) > 21) {
    lv_bAw = f_aJj();
    SaveInteger(gv_abY, 0, GetHandleId(lv_bAw), gv_ars.getInt(lv_bAv));
    TimerStart(lv_bAw, 1, false, f_aXL);
  }
  f_aJn(gv_arr[lv_bAv]);
  KillUnit(gv_arq[lv_bAv]);
  lv_bAw = null;
  return true;
}
function f_bAx() {
  var lv_bAy = gv_ayx;
  AddUnitAnimationProperties(gv_ari[lv_bAy], "Defend", false);
  UnitRemoveAbility(gv_ari[lv_bAy], "A04O");
  gv_ami = true;
  gv_amg = gv_arj[lv_bAy];
  ForGroup(gv_arj[lv_bAy], f_aXh);
  gv_ami = false;
  f_aIJ(gv_arj[lv_bAy]);
  f_aIM(gv_arj[lv_bAy]);
  return true;
}
function f_bAz() {
  var lv_bAA = gv_ayx;
  var lv_bAB = gv_ayn;
  gv_aqQ[lv_bAA] = gv_aqQ.getInt(lv_bAA) + 1;
  if (gv_aqQ.getInt(lv_bAA) > 4) {
    gv_aqQ[lv_bAA] = 0;
    DestroyEffect(
      AddSpecialEffect(
        "Objects\\Spawnmodels\\Undead\\ImpaleTargetDust\\ImpaleTargetDust.mdl",
        GetUnitX(gv_aqP[lv_bAA]),
        GetUnitY(gv_aqP[lv_bAA])
      )
    );
  }
  gv_aqO[lv_bAA] = (gv_aqO[lv_bAA] / 0.025 + 10) * 1 * 0.025;
  f_aWs(lv_bAA, GetUnitX(gv_aqR[lv_bAA]), GetUnitY(gv_aqR[lv_bAA]));
  SetUnitFacing(gv_aqP[lv_bAA], bj_RADTODEG * lv_bAB);
  if (
    GetWidgetLife(gv_aqP[lv_bAA]) < 0.406 ||
    GetWidgetLife(gv_aqR[lv_bAA]) < 0.406 ||
    IsUnitInRange(gv_aqP[lv_bAA], gv_aqR[lv_bAA], 125) ||
    GetUnitCurrentOrder(gv_aqP[lv_bAA]) != 852487
  ) {
    gv_ayy = true;
    return true;
  }
  gv_ayy = false;
  return true;
}
function f_bAC() {
  var lv_bAD = gv_ayx;
  var lv_bAE;
  var lv_bAF;
  var lv_bAG;
  if (
    GetUnitCurrentOrder(gv_aqP[lv_bAD]) == 852487 &&
    GetWidgetLife(gv_aqR[lv_bAD]) > 0.405
  ) {
    gv_acx = GetOwningPlayer(gv_aqP[lv_bAD]);
    gv_acy = GetUnitX(gv_aqP[lv_bAD]);
    gv_acz = GetUnitY(gv_aqP[lv_bAD]);
    gv_acA =
      (GetUnitAbilityLevel(gv_aqP[lv_bAD], "A03T") * 25 + 175) *
      f_azK(gv_aqP[lv_bAD]);
    lv_bAE = f_aJt(gv_acx, gv_acy, gv_acz, 2);
    f_aJA(lv_bAE, "A04I", GetUnitAbilityLevel(gv_aqP[lv_bAD], "A03T"));
    lv_bAF = f_aIL();
    GroupEnumUnitsInRange(
      lv_bAF,
      GetUnitX(gv_aqP[lv_bAD]),
      GetUnitY(gv_aqP[lv_bAD]),
      gv_acA,
      Condition(f_aMk)
    );
    do {
      lv_bAG = FirstOfGroup(lv_bAF);
      if (lv_bAG == null) {
        break;
      }
      SetUnitPosition(lv_bAE, GetUnitX(lv_bAG), GetUnitY(lv_bAG));
      IssueTargetOrderById(lv_bAE, 852095, lv_bAG);
      DestroyEffect(
        AddSpecialEffectTarget(
          "Abilities\\Spells\\Other\\Stampede\\StampedeMissileDeath.mdl",
          lv_bAG,
          "chest"
        )
      );
      UnitDamageTarget(
        lv_bAE,
        lv_bAG,
        gv_aqS[lv_bAD],
        false,
        false,
        ATTACK_TYPE_HERO,
        DAMAGE_TYPE_NORMAL,
        null
      );
      GroupRemoveUnit(lv_bAF, lv_bAG);
    } while (true);
    f_aIM(lv_bAF);
  }
  IssueImmediateOrderById(gv_aqP[lv_bAD], 851972);
  SetUnitPosition(
    gv_aqP[lv_bAD],
    GetUnitX(gv_aqP[lv_bAD]),
    GetUnitY(gv_aqP[lv_bAD])
  );
  lv_bAE = null;
  lv_bAF = null;
  lv_bAG = null;
  return true;
}
function f_bAH() {
  var lv_bAI = gv_ayx;
  var lv_bAJ = f_aJt(
    GetOwningPlayer(gv_aqG[lv_bAI]),
    GetUnitX(gv_aqG[lv_bAI]),
    GetUnitY(gv_aqG[lv_bAI]),
    2
  );
  var lv_bAK = f_aIL();
  if (gv_aqH[lv_bAI] > 0.0) {
    gv_aqI[lv_bAI] = gv_aqI[lv_bAI] - gv_aqH[lv_bAI];
  }
  DestroyEffect(
    AddSpecialEffect(
      "Abilities\\Spells\\Orc\\WarStomp\\WarStompCaster.mdl",
      GetUnitX(gv_aqG[lv_bAI]),
      GetUnitY(gv_aqG[lv_bAI])
    )
  );
  gv_acy = GetUnitX(gv_aqG[lv_bAI]);
  gv_acz = GetUnitY(gv_aqG[lv_bAI]);
  gv_acA = 450;
  gv_acx = GetOwningPlayer(gv_aqG[lv_bAI]);
  GroupEnumUnitsInRange(lv_bAK, gv_acy, gv_acz, 550, Condition(f_aMk));
  do {
    gv_alM = FirstOfGroup(lv_bAK);
    if (gv_alM == null) {
      break;
    }
    UnitDamageTarget(
      lv_bAJ,
      gv_alM,
      gv_aqI[lv_bAI],
      false,
      false,
      ATTACK_TYPE_HERO,
      DAMAGE_TYPE_NORMAL,
      null
    );
    GroupRemoveUnit(lv_bAK, gv_alM);
  } while (true);
  f_aIM(lv_bAK);
  f_aLN(gv_aqF.getInt(lv_bAI));
  RemoveSavedInteger(gv_abT, gv_amb, GetHandleId(gv_aqG[lv_bAI]));
  GroupRemoveUnit(gv_ame, gv_aqG[lv_bAI]);
  lv_bAJ = null;
  lv_bAK = null;
  return true;
}
function f_bAL() {
  var lv_bAM = gv_ayx;
  var lv_bAN = gv_ayn;
  f_aVs(lv_bAM, GetUnitX(gv_aqA[lv_bAM]), GetUnitY(gv_aqA[lv_bAM]));
  SetUnitFacing(gv_aqz[lv_bAM], bj_RADTODEG * lv_bAN);
  gv_ayy = false;
  return true;
}
function f_bAO() {
  var lv_bAP = gv_ayx;
  var lv_bAQ = f_aJt(
    GetOwningPlayer(gv_aqz[lv_bAP]),
    GetUnitX(gv_aqA[lv_bAP]),
    GetUnitY(gv_aqA[lv_bAP]),
    2
  );
  var lv_bAR = f_aIL();
  var lv_bAS;
  f_aJA(lv_bAQ, "A077", 0);
  if (GetWidgetLife(gv_aqA[lv_bAP]) > 0.405) {
    IssueTargetOrderById(lv_bAQ, 852095, gv_aqA[lv_bAP]);
  }
  gv_acy = GetUnitX(gv_aqz[lv_bAP]);
  gv_acz = GetUnitY(gv_aqz[lv_bAP]);
  gv_acA = 200 * f_azM(lv_bAQ);
  gv_acx = GetOwningPlayer(gv_aqz[lv_bAP]);
  GroupEnumUnitsInRange(
    lv_bAR,
    gv_acy,
    gv_acz,
    250 * f_azM(lv_bAQ),
    Condition(f_aMk)
  );
  do {
    lv_bAS = FirstOfGroup(lv_bAR);
    if (lv_bAS == null) {
      break;
    }
    SetUnitPosition(lv_bAQ, GetUnitX(lv_bAS), GetUnitY(lv_bAS));
    UnitDamageTarget(
      lv_bAQ,
      lv_bAS,
      gv_aqB[lv_bAP],
      false,
      false,
      ATTACK_TYPE_NORMAL,
      DAMAGE_TYPE_UNIVERSAL,
      null
    );
    GroupRemoveUnit(lv_bAR, lv_bAS);
  } while (true);
  f_aIM(lv_bAR);
  KillUnit(gv_aqz[lv_bAP]);
  lv_bAS = null;
  lv_bAR = null;
  return true;
}
function f_bAT() {
  var lv_bAU = gv_ayx;
  if (gv_apk[lv_bAU] != null) {
    DestroyTextTag(gv_apk[lv_bAU]);
    gv_apk[lv_bAU] = null;
  }
  if (gv_apt[lv_bAU]) {
    f_aLA(lv_bAU);
    gv_apu[lv_bAU] = null;
  }
  return true;
}
function f_bAV() {
  var lv_bAW = gv_ayx;
  f_aLN(gv_apE.getInt(lv_bAW));
  return true;
}
function f_bAX() {
  var lv_bAY = gv_ayx;
  var lv_bAZ = gv_ayn;
  gv_apT[lv_bAY] = gv_apT.getInt(lv_bAY) + 1;
  if (gv_apT.getInt(lv_bAY) > 5) {
    DestroyEffect(
      AddSpecialEffect(
        "Objects\\Spawnmodels\\Undead\\ImpaleTargetDust\\ImpaleTargetDust.mdl",
        GetUnitX(gv_apS[lv_bAY]),
        GetUnitY(gv_apS[lv_bAY])
      )
    );
    gv_apT[lv_bAY] = 0;
  }
  SetUnitPosition(
    gv_apS[lv_bAY],
    GetUnitX(gv_apS[lv_bAY]),
    GetUnitY(gv_apS[lv_bAY])
  );
  gv_apR[lv_bAY] = (gv_apR[lv_bAY] / 0.025 - 10) * 1 * 0.025;
  if (GetWidgetLife(gv_apS[lv_bAY]) < 0.406 || gv_apR[lv_bAY] / 0.025 < 10) {
    gv_ayy = true;
    return true;
  }
  gv_ayy = false;
  return true;
}
function f_bBa() {
  gv_ayz = f_aNs(gv_ayr, gv_ayn, gv_ayo, gv_ayp, gv_ayq);
  return true;
}
function f_bBb() {
  var lv_bBc = gv_ayx;
  GroupClear(gv_abF);
  GroupEnumUnitsInRange(
    gv_abF,
    GetUnitX(gv_aqa[lv_bBc]),
    GetUnitY(gv_aqa[lv_bBc]),
    80,
    Condition(f_aOo)
  );
  bj_randomSubGroupGroup = gv_awl[lv_bBc];
  ForGroup(gv_abF, f_brn);
  f_aIJ(gv_abF);
  gv_alM = gv_aqa[lv_bBc];
  ForGroup(gv_awl[lv_bBc], f_bro);
  return true;
}
function f_bBd() {
  var lv_bBe = gv_ayx;
  KillUnit(gv_aqa[lv_bBe]);
  ForGroup(gv_awl[lv_bBe], f_brp);
  f_aIM(gv_awl[lv_bBe]);
  f_aIJ(gv_awl[lv_bBe]);
  gv_ayx = lv_bBe;
  return true;
}
function f_bBf() {
  var lv_bBg = gv_ayx;
  gv_aqd[lv_bBg] = gv_aqd[lv_bBg] - gv_aqk[lv_bBg];
  if (gv_aqd[lv_bBg] < 3 || GetWidgetLife(gv_aqa[lv_bBg]) < 0.406) {
    gv_aqi[lv_bBg] = true;
  }
  IssueImmediateOrderById(gv_aqa[lv_bBg], 851972);
  gv_aqm[lv_bBg] = gv_aqm.getInt(lv_bBg) + 1;
  if (gv_aqm.getInt(lv_bBg) > 5) {
    gv_aqm[lv_bBg] = 0;
    f_aLX(
      AddSpecialEffect(
        gv_aql[lv_bBg],
        GetUnitX(gv_aqa[lv_bBg]),
        GetUnitY(gv_aqa[lv_bBg])
      ),
      0.1
    );
  }
  return true;
}
function f_bBh() {
  var lv_bBi = gv_ayx;
  bj_ghoul[26] = gv_aqa[lv_bBi];
  bj_randomSubGroupGroup = gv_avT[lv_bBi];
  GroupClear(gv_abF);
  GroupEnumUnitsInRange(
    gv_abF,
    GetUnitX(gv_aqa[lv_bBi]),
    GetUnitY(gv_aqa[lv_bBi]),
    300,
    Condition(f_bjs)
  );
  do {
    gv_alM = FirstOfGroup(gv_abF);
    if (gv_alM == null) {
      break;
    }
    UnitDamageTarget(
      gv_aqa[lv_bBi],
      gv_alM,
      gv_avU[lv_bBi],
      false,
      false,
      ATTACK_TYPE_HERO,
      DAMAGE_TYPE_NORMAL,
      null
    );
    DestroyEffect(
      AddSpecialEffectTarget(
        "Abilities\\Spells\\Other\\Stampede\\StampedeMissileDeath.mdl",
        gv_alM,
        "chest"
      )
    );
    GroupAddUnit(gv_avT[lv_bBi], gv_alM);
    GroupRemoveUnit(gv_abF, gv_alM);
  } while (true);
  f_aIJ(gv_abF);
  return true;
}
function f_bBj() {
  var lv_bBk = gv_ayx;
  SetUnitExploded(gv_aqa[lv_bBk], true);
  KillUnit(gv_aqa[lv_bBk]);
  f_aIM(gv_avT[lv_bBk]);
  gv_ayx = lv_bBk;
  return true;
}
function f_bBl() {
  var lv_bBm = gv_ayx;
  gv_aqb[lv_bBm] = GetUnitX(gv_avV[lv_bBm]);
  gv_aqc[lv_bBm] = GetUnitY(gv_avV[lv_bBm]);
  if (GetWidgetLife(gv_avV[lv_bBm]) < 0.406) {
    gv_aqi[lv_bBm] = true;
  }
  return true;
}
function f_bBn() {
  var lv_bBo = gv_ayx;
  if (GetWidgetLife(gv_avV[lv_bBo]) > 0.405) {
    SetUnitPosition(gv_amO, GetUnitX(gv_avV[lv_bBo]), GetUnitY(gv_avV[lv_bBo]));
    SetUnitOwner(gv_amO, GetOwningPlayer(gv_aqa[lv_bBo]), false);
    IssueTargetOrderById(gv_amO, 852226, gv_avV[lv_bBo]);
  }
  KillUnit(gv_aqa[lv_bBo]);
  gv_ayx = lv_bBo;
  return true;
}
function f_bBp() {
  var lv_bBq = gv_ayx;
  gv_awc[lv_bBq] = gv_awc.getInt(lv_bBq) + 1;
  if (gv_awc.getInt(lv_bBq) > 4) {
    gv_awc[lv_bBq] = 0;
    f_aLX(
      AddSpecialEffect(
        "Abilities\\Spells\\NightElf\\EntanglingRoots\\EntanglingRootsTarget.mdl",
        GetUnitX(gv_aqa[lv_bBq]),
        GetUnitY(gv_aqa[lv_bBq])
      ),
      0.1
    );
    GroupClear(gv_abF);
    GroupEnumUnitsInRange(
      gv_abF,
      GetUnitX(gv_aqa[lv_bBq]),
      GetUnitY(gv_aqa[lv_bBq]),
      150,
      Condition(f_aOo)
    );
    do {
      gv_alM = FirstOfGroup(gv_abF);
      if (gv_alM == null) {
        break;
      }
      if (GetUnitAbilityLevel(gv_alM, "BEer") < 1) {
        SetUnitPosition(gv_aoy, GetUnitX(gv_alM), GetUnitY(gv_alM));
        IssueTargetOrderById(gv_aoy, 852171, gv_alM);
      }
      GroupRemoveUnit(gv_abF, gv_alM);
    } while (true);
    f_aIJ(gv_abF);
  }
  return true;
}
function f_bBr() {
  var lv_bBs = gv_ayx;
  KillUnit(gv_aqa[lv_bBs]);
  gv_ayx = lv_bBs;
  return true;
}
function f_bze() {
  gv_ayl[1] = CreateTrigger();
  TriggerAddAction(gv_ayl[1], f_bzg);
  TriggerAddCondition(gv_ayl[1], Condition(f_bzg));
  gv_aym[1] = CreateTrigger();
  TriggerAddAction(gv_aym[1], f_bzh);
  TriggerAddCondition(gv_aym[1], Condition(f_bzh));
  gv_ayk = CreateTrigger();
  TriggerAddCondition(gv_ayk, Condition(f_bzi));
  gv_ayj = CreateTrigger();
  TriggerAddCondition(gv_ayj, Condition(f_bzk));
  gv_axG[2] = CreateTrigger();
  gv_axG[3] = gv_axG[2];
  gv_axG[4] = gv_axG[2];
  gv_axG[5] = gv_axG[2];
  TriggerAddCondition(gv_axG[2], Condition(f_bzm));
  gv_ayi = CreateTrigger();
  TriggerAddCondition(gv_ayi, Condition(f_bzo));
  gv_ayg = CreateTrigger();
  TriggerAddCondition(gv_ayg, Condition(f_bzq));
  gv_ayh = CreateTrigger();
  TriggerAddCondition(gv_ayh, Condition(f_bzt));
  gv_aye = CreateTrigger();
  TriggerAddCondition(gv_aye, Condition(f_bzx));
  gv_ayf = CreateTrigger();
  TriggerAddCondition(gv_ayf, Condition(f_bzA));
  gv_ayc = CreateTrigger();
  TriggerAddCondition(gv_ayc, Condition(f_bzF));
  gv_ayd = CreateTrigger();
  TriggerAddCondition(gv_ayd, Condition(f_bzK));
  gv_ayb = CreateTrigger();
  TriggerAddCondition(gv_ayb, Condition(f_bzM));
  gv_axZ = CreateTrigger();
  TriggerAddCondition(gv_axZ, Condition(f_bzQ));
  gv_aya = CreateTrigger();
  TriggerAddCondition(gv_aya, Condition(f_bzV));
  gv_axX = CreateTrigger();
  TriggerAddCondition(gv_axX, Condition(f_bzX));
  gv_axY = CreateTrigger();
  TriggerAddCondition(gv_axY, Condition(f_bAa));
  gv_axV = CreateTrigger();
  TriggerAddCondition(gv_axV, Condition(f_bAc));
  gv_axW = CreateTrigger();
  TriggerAddCondition(gv_axW, Condition(f_bAf));
  gv_axT = CreateTrigger();
  TriggerAddCondition(gv_axT, Condition(f_bAl));
  gv_axU = CreateTrigger();
  TriggerAddCondition(gv_axU, Condition(f_bAo));
  gv_axR = CreateTrigger();
  TriggerAddCondition(gv_axR, Condition(f_bAr));
  gv_axS = CreateTrigger();
  TriggerAddCondition(gv_axS, Condition(f_bAu));
  gv_axQ = CreateTrigger();
  TriggerAddCondition(gv_axQ, Condition(f_bAx));
  gv_axO = CreateTrigger();
  TriggerAddCondition(gv_axO, Condition(f_bAz));
  gv_axP = CreateTrigger();
  TriggerAddCondition(gv_axP, Condition(f_bAC));
  gv_axN = CreateTrigger();
  TriggerAddCondition(gv_axN, Condition(f_bAH));
  gv_axL = CreateTrigger();
  TriggerAddCondition(gv_axL, Condition(f_bAL));
  gv_axM = CreateTrigger();
  TriggerAddCondition(gv_axM, Condition(f_bAO));
  gv_axH = CreateTrigger();
  TriggerAddCondition(gv_axH, Condition(f_bAT));
  gv_axI = CreateTrigger();
  TriggerAddCondition(gv_axI, Condition(f_bAV));
  gv_apZ[13] = null;
  gv_axJ = CreateTrigger();
  TriggerAddCondition(gv_axJ, Condition(f_bAX));
  gv_axK = CreateTrigger();
  TriggerAddCondition(gv_axK, Condition(f_bBa));
  gv_apY[13] = null;
  gv_apY[14] = null;
  gv_apZ[66] = CreateTrigger();
  TriggerAddCondition(gv_apZ[66], Condition(f_bBb));
  TriggerAddAction(gv_apZ[66], f_bBb);
  gv_apY[66] = CreateTrigger();
  TriggerAddCondition(gv_apY[66], Condition(f_bBd));
  gv_apZ[14] = CreateTrigger();
  TriggerAddCondition(gv_apZ[14], Condition(f_bBf));
  TriggerAddAction(gv_apZ[14], f_bBf);
  gv_apZ[61] = CreateTrigger();
  TriggerAddCondition(gv_apZ[61], Condition(f_bBh));
  TriggerAddAction(gv_apZ[61], f_bBh);
  gv_apY[61] = CreateTrigger();
  TriggerAddCondition(gv_apY[61], Condition(f_bBj));
  gv_apZ[62] = CreateTrigger();
  TriggerAddCondition(gv_apZ[62], Condition(f_bBl));
  TriggerAddAction(gv_apZ[62], f_bBl);
  gv_apY[62] = CreateTrigger();
  TriggerAddCondition(gv_apY[62], Condition(f_bBn));
  gv_apZ[64] = CreateTrigger();
  TriggerAddCondition(gv_apZ[64], Condition(f_bBp));
  TriggerAddAction(gv_apZ[64], f_bBp);
  gv_apY[64] = CreateTrigger();
  TriggerAddCondition(gv_apY[64], Condition(f_bBr));
  ExecuteFunc("f_aJh");
  ExecuteFunc("f_aND");
}
